
bno055_uros_publisher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a848  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e30  0801aa28  0801aa28  0001ba28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b858  0801b858  0001d314  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b858  0801b858  0001c858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b860  0801b860  0001d314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801b860  0801b860  0001c860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b868  0801b868  0001c868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000314  20000000  0801b86c  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aeb8  20000318  0801bb80  0001d318  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000b1d0  0801bb80  0001e1d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d314  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028595  00000000  00000000  0001d344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058a2  00000000  00000000  000458d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee0  00000000  00000000  0004b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017c2  00000000  00000000  0004d060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e4d2  00000000  00000000  0004e822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002810f  00000000  00000000  0007ccf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116d48  00000000  00000000  000a4e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001bbb4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ef4  00000000  00000000  001bbbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001c4ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000318 	.word	0x20000318
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801aa10 	.word	0x0801aa10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000031c 	.word	0x2000031c
 800021c:	0801aa10 	.word	0x0801aa10

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_ldivmod>:
 8000a8c:	b97b      	cbnz	r3, 8000aae <__aeabi_ldivmod+0x22>
 8000a8e:	b972      	cbnz	r2, 8000aae <__aeabi_ldivmod+0x22>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bfbe      	ittt	lt
 8000a94:	2000      	movlt	r0, #0
 8000a96:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a9a:	e006      	blt.n	8000aaa <__aeabi_ldivmod+0x1e>
 8000a9c:	bf08      	it	eq
 8000a9e:	2800      	cmpeq	r0, #0
 8000aa0:	bf1c      	itt	ne
 8000aa2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000aa6:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aaa:	f000 b9d3 	b.w	8000e54 <__aeabi_idiv0>
 8000aae:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	db09      	blt.n	8000ace <__aeabi_ldivmod+0x42>
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db1a      	blt.n	8000af4 <__aeabi_ldivmod+0x68>
 8000abe:	f000 f84d 	bl	8000b5c <__udivmoddi4>
 8000ac2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aca:	b004      	add	sp, #16
 8000acc:	4770      	bx	lr
 8000ace:	4240      	negs	r0, r0
 8000ad0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db1b      	blt.n	8000b10 <__aeabi_ldivmod+0x84>
 8000ad8:	f000 f840 	bl	8000b5c <__udivmoddi4>
 8000adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae4:	b004      	add	sp, #16
 8000ae6:	4240      	negs	r0, r0
 8000ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aec:	4252      	negs	r2, r2
 8000aee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000af2:	4770      	bx	lr
 8000af4:	4252      	negs	r2, r2
 8000af6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000afa:	f000 f82f 	bl	8000b5c <__udivmoddi4>
 8000afe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b06:	b004      	add	sp, #16
 8000b08:	4240      	negs	r0, r0
 8000b0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0e:	4770      	bx	lr
 8000b10:	4252      	negs	r2, r2
 8000b12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b16:	f000 f821 	bl	8000b5c <__udivmoddi4>
 8000b1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b22:	b004      	add	sp, #16
 8000b24:	4252      	negs	r2, r2
 8000b26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b40:	f000 b988 	b.w	8000e54 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	468e      	mov	lr, r1
 8000b64:	4604      	mov	r4, r0
 8000b66:	4688      	mov	r8, r1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d14a      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4617      	mov	r7, r2
 8000b70:	d962      	bls.n	8000c38 <__udivmoddi4+0xdc>
 8000b72:	fab2 f682 	clz	r6, r2
 8000b76:	b14e      	cbz	r6, 8000b8c <__udivmoddi4+0x30>
 8000b78:	f1c6 0320 	rsb	r3, r6, #32
 8000b7c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b80:	fa20 f303 	lsr.w	r3, r0, r3
 8000b84:	40b7      	lsls	r7, r6
 8000b86:	ea43 0808 	orr.w	r8, r3, r8
 8000b8a:	40b4      	lsls	r4, r6
 8000b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b90:	fa1f fc87 	uxth.w	ip, r7
 8000b94:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b98:	0c23      	lsrs	r3, r4, #16
 8000b9a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0x62>
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000bb0:	f080 80ea 	bcs.w	8000d88 <__udivmoddi4+0x22c>
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	f240 80e7 	bls.w	8000d88 <__udivmoddi4+0x22c>
 8000bba:	3902      	subs	r1, #2
 8000bbc:	443b      	add	r3, r7
 8000bbe:	1a9a      	subs	r2, r3, r2
 8000bc0:	b2a3      	uxth	r3, r4
 8000bc2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bc6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bce:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd2:	459c      	cmp	ip, r3
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0x8e>
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000bdc:	f080 80d6 	bcs.w	8000d8c <__udivmoddi4+0x230>
 8000be0:	459c      	cmp	ip, r3
 8000be2:	f240 80d3 	bls.w	8000d8c <__udivmoddi4+0x230>
 8000be6:	443b      	add	r3, r7
 8000be8:	3802      	subs	r0, #2
 8000bea:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bee:	eba3 030c 	sub.w	r3, r3, ip
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	b11d      	cbz	r5, 8000bfe <__udivmoddi4+0xa2>
 8000bf6:	40f3      	lsrs	r3, r6
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d905      	bls.n	8000c12 <__udivmoddi4+0xb6>
 8000c06:	b10d      	cbz	r5, 8000c0c <__udivmoddi4+0xb0>
 8000c08:	e9c5 0100 	strd	r0, r1, [r5]
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4608      	mov	r0, r1
 8000c10:	e7f5      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000c12:	fab3 f183 	clz	r1, r3
 8000c16:	2900      	cmp	r1, #0
 8000c18:	d146      	bne.n	8000ca8 <__udivmoddi4+0x14c>
 8000c1a:	4573      	cmp	r3, lr
 8000c1c:	d302      	bcc.n	8000c24 <__udivmoddi4+0xc8>
 8000c1e:	4282      	cmp	r2, r0
 8000c20:	f200 8105 	bhi.w	8000e2e <__udivmoddi4+0x2d2>
 8000c24:	1a84      	subs	r4, r0, r2
 8000c26:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	4690      	mov	r8, r2
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d0e5      	beq.n	8000bfe <__udivmoddi4+0xa2>
 8000c32:	e9c5 4800 	strd	r4, r8, [r5]
 8000c36:	e7e2      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	f000 8090 	beq.w	8000d5e <__udivmoddi4+0x202>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	f040 80a4 	bne.w	8000d90 <__udivmoddi4+0x234>
 8000c48:	1a8a      	subs	r2, r1, r2
 8000c4a:	0c03      	lsrs	r3, r0, #16
 8000c4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c50:	b280      	uxth	r0, r0
 8000c52:	b2bc      	uxth	r4, r7
 8000c54:	2101      	movs	r1, #1
 8000c56:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c5a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c62:	fb04 f20c 	mul.w	r2, r4, ip
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x11e>
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x11c>
 8000c72:	429a      	cmp	r2, r3
 8000c74:	f200 80e0 	bhi.w	8000e38 <__udivmoddi4+0x2dc>
 8000c78:	46c4      	mov	ip, r8
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c80:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c84:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c88:	fb02 f404 	mul.w	r4, r2, r4
 8000c8c:	429c      	cmp	r4, r3
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x144>
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x142>
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	f200 80ca 	bhi.w	8000e32 <__udivmoddi4+0x2d6>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	1b1b      	subs	r3, r3, r4
 8000ca2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ca6:	e7a5      	b.n	8000bf4 <__udivmoddi4+0x98>
 8000ca8:	f1c1 0620 	rsb	r6, r1, #32
 8000cac:	408b      	lsls	r3, r1
 8000cae:	fa22 f706 	lsr.w	r7, r2, r6
 8000cb2:	431f      	orrs	r7, r3
 8000cb4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cb8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cbc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cc0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cc4:	4323      	orrs	r3, r4
 8000cc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cca:	fa1f fc87 	uxth.w	ip, r7
 8000cce:	fbbe f0f9 	udiv	r0, lr, r9
 8000cd2:	0c1c      	lsrs	r4, r3, #16
 8000cd4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cd8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cdc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x1a0>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000cee:	f080 809c 	bcs.w	8000e2a <__udivmoddi4+0x2ce>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f240 8099 	bls.w	8000e2a <__udivmoddi4+0x2ce>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	443c      	add	r4, r7
 8000cfc:	eba4 040e 	sub.w	r4, r4, lr
 8000d00:	fa1f fe83 	uxth.w	lr, r3
 8000d04:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d08:	fb09 4413 	mls	r4, r9, r3, r4
 8000d0c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d10:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d14:	45a4      	cmp	ip, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x1ce>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d1e:	f080 8082 	bcs.w	8000e26 <__udivmoddi4+0x2ca>
 8000d22:	45a4      	cmp	ip, r4
 8000d24:	d97f      	bls.n	8000e26 <__udivmoddi4+0x2ca>
 8000d26:	3b02      	subs	r3, #2
 8000d28:	443c      	add	r4, r7
 8000d2a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d2e:	eba4 040c 	sub.w	r4, r4, ip
 8000d32:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d36:	4564      	cmp	r4, ip
 8000d38:	4673      	mov	r3, lr
 8000d3a:	46e1      	mov	r9, ip
 8000d3c:	d362      	bcc.n	8000e04 <__udivmoddi4+0x2a8>
 8000d3e:	d05f      	beq.n	8000e00 <__udivmoddi4+0x2a4>
 8000d40:	b15d      	cbz	r5, 8000d5a <__udivmoddi4+0x1fe>
 8000d42:	ebb8 0203 	subs.w	r2, r8, r3
 8000d46:	eb64 0409 	sbc.w	r4, r4, r9
 8000d4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d4e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d52:	431e      	orrs	r6, r3
 8000d54:	40cc      	lsrs	r4, r1
 8000d56:	e9c5 6400 	strd	r6, r4, [r5]
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	e74f      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000d5e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d62:	0c01      	lsrs	r1, r0, #16
 8000d64:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d68:	b280      	uxth	r0, r0
 8000d6a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4638      	mov	r0, r7
 8000d72:	463c      	mov	r4, r7
 8000d74:	46b8      	mov	r8, r7
 8000d76:	46be      	mov	lr, r7
 8000d78:	2620      	movs	r6, #32
 8000d7a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d7e:	eba2 0208 	sub.w	r2, r2, r8
 8000d82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d86:	e766      	b.n	8000c56 <__udivmoddi4+0xfa>
 8000d88:	4601      	mov	r1, r0
 8000d8a:	e718      	b.n	8000bbe <__udivmoddi4+0x62>
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	e72c      	b.n	8000bea <__udivmoddi4+0x8e>
 8000d90:	f1c6 0220 	rsb	r2, r6, #32
 8000d94:	fa2e f302 	lsr.w	r3, lr, r2
 8000d98:	40b7      	lsls	r7, r6
 8000d9a:	40b1      	lsls	r1, r6
 8000d9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000da0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da4:	430a      	orrs	r2, r1
 8000da6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000daa:	b2bc      	uxth	r4, r7
 8000dac:	fb0e 3318 	mls	r3, lr, r8, r3
 8000db0:	0c11      	lsrs	r1, r2, #16
 8000db2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db6:	fb08 f904 	mul.w	r9, r8, r4
 8000dba:	40b0      	lsls	r0, r6
 8000dbc:	4589      	cmp	r9, r1
 8000dbe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dc2:	b280      	uxth	r0, r0
 8000dc4:	d93e      	bls.n	8000e44 <__udivmoddi4+0x2e8>
 8000dc6:	1879      	adds	r1, r7, r1
 8000dc8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000dcc:	d201      	bcs.n	8000dd2 <__udivmoddi4+0x276>
 8000dce:	4589      	cmp	r9, r1
 8000dd0:	d81f      	bhi.n	8000e12 <__udivmoddi4+0x2b6>
 8000dd2:	eba1 0109 	sub.w	r1, r1, r9
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fb09 f804 	mul.w	r8, r9, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	b292      	uxth	r2, r2
 8000de4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de8:	4542      	cmp	r2, r8
 8000dea:	d229      	bcs.n	8000e40 <__udivmoddi4+0x2e4>
 8000dec:	18ba      	adds	r2, r7, r2
 8000dee:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000df2:	d2c4      	bcs.n	8000d7e <__udivmoddi4+0x222>
 8000df4:	4542      	cmp	r2, r8
 8000df6:	d2c2      	bcs.n	8000d7e <__udivmoddi4+0x222>
 8000df8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dfc:	443a      	add	r2, r7
 8000dfe:	e7be      	b.n	8000d7e <__udivmoddi4+0x222>
 8000e00:	45f0      	cmp	r8, lr
 8000e02:	d29d      	bcs.n	8000d40 <__udivmoddi4+0x1e4>
 8000e04:	ebbe 0302 	subs.w	r3, lr, r2
 8000e08:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	46e1      	mov	r9, ip
 8000e10:	e796      	b.n	8000d40 <__udivmoddi4+0x1e4>
 8000e12:	eba7 0909 	sub.w	r9, r7, r9
 8000e16:	4449      	add	r1, r9
 8000e18:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e1c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e20:	fb09 f804 	mul.w	r8, r9, r4
 8000e24:	e7db      	b.n	8000dde <__udivmoddi4+0x282>
 8000e26:	4673      	mov	r3, lr
 8000e28:	e77f      	b.n	8000d2a <__udivmoddi4+0x1ce>
 8000e2a:	4650      	mov	r0, sl
 8000e2c:	e766      	b.n	8000cfc <__udivmoddi4+0x1a0>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e6fd      	b.n	8000c2e <__udivmoddi4+0xd2>
 8000e32:	443b      	add	r3, r7
 8000e34:	3a02      	subs	r2, #2
 8000e36:	e733      	b.n	8000ca0 <__udivmoddi4+0x144>
 8000e38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e3c:	443b      	add	r3, r7
 8000e3e:	e71c      	b.n	8000c7a <__udivmoddi4+0x11e>
 8000e40:	4649      	mov	r1, r9
 8000e42:	e79c      	b.n	8000d7e <__udivmoddi4+0x222>
 8000e44:	eba1 0109 	sub.w	r1, r1, r9
 8000e48:	46c4      	mov	ip, r8
 8000e4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4e:	fb09 f804 	mul.w	r8, r9, r4
 8000e52:	e7c4      	b.n	8000dde <__udivmoddi4+0x282>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <BNO055_Init>:
 */

#include "BNO055.h"

HAL_StatusTypeDef BNO055_Init(BNO055_t *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af04      	add	r7, sp, #16
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	4611      	mov	r1, r2
 8000e64:	461a      	mov	r2, r3
 8000e66:	460b      	mov	r3, r1
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuffer;
	uint8_t rxbuffer;

	bno->hi2cx = hi2cx;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	601a      	str	r2, [r3, #0]
	bno->address = BNO055_ADD_H;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2252      	movs	r2, #82	@ 0x52
 8000e78:	711a      	strb	r2, [r3, #4]
	if (addr == 0) bno->address = BNO055_ADD_L;
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <BNO055_Init+0x2e>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2250      	movs	r2, #80	@ 0x50
 8000e84:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	791b      	ldrb	r3, [r3, #4]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	230a      	movs	r3, #10
 8000e92:	9302      	str	r3, [sp, #8]
 8000e94:	2301      	movs	r3, #1
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	f107 0316 	add.w	r3, r7, #22
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f003 f829 	bl	8003ef8 <HAL_I2C_Mem_Read>
	if (rxbuffer != 0xA0) {
 8000ea6:	7dbb      	ldrb	r3, [r7, #22]
 8000ea8:	2ba0      	cmp	r3, #160	@ 0xa0
 8000eaa:	d018      	beq.n	8000ede <BNO055_Init+0x86>
		HAL_Delay(1000);
 8000eac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eb0:	f002 f870 	bl	8002f94 <HAL_Delay>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	791b      	ldrb	r3, [r3, #4]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	9302      	str	r3, [sp, #8]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	f107 0316 	add.w	r3, r7, #22
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f003 f812 	bl	8003ef8 <HAL_I2C_Mem_Read>
		if (rxbuffer != 0xA0) return HAL_ERROR;
 8000ed4:	7dbb      	ldrb	r3, [r7, #22]
 8000ed6:	2ba0      	cmp	r3, #160	@ 0xa0
 8000ed8:	d001      	beq.n	8000ede <BNO055_Init+0x86>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e095      	b.n	800100a <BNO055_Init+0x1b2>
	}

	txbuffer = CONFIGMODE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	791b      	ldrb	r3, [r3, #4]
 8000eea:	4619      	mov	r1, r3
 8000eec:	230a      	movs	r3, #10
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	f107 0317 	add.w	r3, r7, #23
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	223d      	movs	r2, #61	@ 0x3d
 8000efe:	f002 fee7 	bl	8003cd0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000f02:	200a      	movs	r0, #10
 8000f04:	f002 f846 	bl	8002f94 <HAL_Delay>

	txbuffer = 0x20;
 8000f08:	2320      	movs	r3, #32
 8000f0a:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	791b      	ldrb	r3, [r3, #4]
 8000f14:	4619      	mov	r1, r3
 8000f16:	230a      	movs	r3, #10
 8000f18:	9302      	str	r3, [sp, #8]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	f107 0317 	add.w	r3, r7, #23
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2301      	movs	r3, #1
 8000f26:	223f      	movs	r2, #63	@ 0x3f
 8000f28:	f002 fed2 	bl	8003cd0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f002 f831 	bl	8002f94 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	791b      	ldrb	r3, [r3, #4]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	2301      	movs	r3, #1
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	f107 0316 	add.w	r3, r7, #22
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f002 ffd3 	bl	8003ef8 <HAL_I2C_Mem_Read>
	} while (rxbuffer != 0xA0);
 8000f52:	7dbb      	ldrb	r3, [r7, #22]
 8000f54:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f56:	d1ec      	bne.n	8000f32 <BNO055_Init+0xda>
	HAL_Delay(50);
 8000f58:	2032      	movs	r0, #50	@ 0x32
 8000f5a:	f002 f81b 	bl	8002f94 <HAL_Delay>

	txbuffer = Normal_Mode;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PWR_MODE, 1, &txbuffer, 1, 10);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	791b      	ldrb	r3, [r3, #4]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	230a      	movs	r3, #10
 8000f6e:	9302      	str	r3, [sp, #8]
 8000f70:	2301      	movs	r3, #1
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	f107 0317 	add.w	r3, r7, #23
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	223e      	movs	r2, #62	@ 0x3e
 8000f7e:	f002 fea7 	bl	8003cd0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000f82:	200a      	movs	r0, #10
 8000f84:	f002 f806 	bl	8002f94 <HAL_Delay>

	txbuffer = Page_ID_00;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	4619      	mov	r1, r3
 8000f96:	230a      	movs	r3, #10
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	f107 0317 	add.w	r3, r7, #23
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	2207      	movs	r2, #7
 8000fa8:	f002 fe92 	bl	8003cd0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000fac:	200a      	movs	r0, #10
 8000fae:	f001 fff1 	bl	8002f94 <HAL_Delay>

	txbuffer = 0x00;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 2);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	791b      	ldrb	r3, [r3, #4]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	f107 0317 	add.w	r3, r7, #23
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	223f      	movs	r2, #63	@ 0x3f
 8000fd2:	f002 fe7d 	bl	8003cd0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000fd6:	200a      	movs	r0, #10
 8000fd8:	f001 ffdc 	bl	8002f94 <HAL_Delay>

	bno->mode = mode;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	79ba      	ldrb	r2, [r7, #6]
 8000fe0:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 2);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	791b      	ldrb	r3, [r3, #4]
 8000fea:	4619      	mov	r1, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3305      	adds	r3, #5
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	9202      	str	r2, [sp, #8]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	9201      	str	r2, [sp, #4]
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	223d      	movs	r2, #61	@ 0x3d
 8000ffe:	f002 fe67 	bl	8003cd0 <HAL_I2C_Mem_Write>

	bno->flag = HAL_OK;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	0000      	movs	r0, r0
 8001014:	0000      	movs	r0, r0
	...

08001018 <BNO055_Read_DMA>:
	}

}

void BNO055_Read_DMA(BNO055_t *bno, uint8_t fast_mode)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	@ 0x28
 800101c:	af04      	add	r7, sp, #16
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	4619      	mov	r1, r3
 800102e:	230a      	movs	r3, #10
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2301      	movs	r3, #1
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	f107 030f 	add.w	r3, r7, #15
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	223d      	movs	r2, #61	@ 0x3d
 8001040:	f002 ff5a 	bl	8003ef8 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	795a      	ldrb	r2, [r3, #5]
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	429a      	cmp	r2, r3
 800104c:	d00f      	beq.n	800106e <BNO055_Read_DMA+0x56>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	791b      	ldrb	r3, [r3, #4]
 8001056:	4619      	mov	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3305      	adds	r3, #5
 800105c:	220a      	movs	r2, #10
 800105e:	9202      	str	r2, [sp, #8]
 8001060:	2201      	movs	r2, #1
 8001062:	9201      	str	r2, [sp, #4]
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	223d      	movs	r2, #61	@ 0x3d
 800106a:	f002 fe31 	bl	8003cd0 <HAL_I2C_Mem_Write>
	}

	const double scale = (1.0 / (1 << 14));
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4bc3      	ldr	r3, [pc, #780]	@ (8001380 <BNO055_Read_DMA+0x368>)
 8001074:	e9c7 2304 	strd	r2, r3, [r7, #16]

	bno->accel.x = ((double) bno->DataBuffer[0].i16) / 100.0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa88 	bl	8000594 <__aeabi_i2d>
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	4bbe      	ldr	r3, [pc, #760]	@ (8001384 <BNO055_Read_DMA+0x36c>)
 800108a:	f7ff fc17 	bl	80008bc <__aeabi_ddiv>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	e9c1 2302 	strd	r2, r3, [r1, #8]
	bno->accel.y = ((double) bno->DataBuffer[1].i16) / 100.0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa78 	bl	8000594 <__aeabi_i2d>
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4bb6      	ldr	r3, [pc, #728]	@ (8001384 <BNO055_Read_DMA+0x36c>)
 80010aa:	f7ff fc07 	bl	80008bc <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	bno->accel.z = ((double) bno->DataBuffer[2].i16) / 100.0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa68 	bl	8000594 <__aeabi_i2d>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4bae      	ldr	r3, [pc, #696]	@ (8001384 <BNO055_Read_DMA+0x36c>)
 80010ca:	f7ff fbf7 	bl	80008bc <__aeabi_ddiv>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	e9c1 2306 	strd	r2, r3, [r1, #24]

	bno->mag.x = ((double) bno->DataBuffer[3].i16) / 16.0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fa58 	bl	8000594 <__aeabi_i2d>
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4ba7      	ldr	r3, [pc, #668]	@ (8001388 <BNO055_Read_DMA+0x370>)
 80010ea:	f7ff fbe7 	bl	80008bc <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	bno->mag.y = ((double) bno->DataBuffer[4].i16) / 16.0;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa48 	bl	8000594 <__aeabi_i2d>
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b9f      	ldr	r3, [pc, #636]	@ (8001388 <BNO055_Read_DMA+0x370>)
 800110a:	f7ff fbd7 	bl	80008bc <__aeabi_ddiv>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	bno->mag.z = ((double) bno->DataBuffer[5].i16) / 16.0;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fa38 	bl	8000594 <__aeabi_i2d>
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	4b97      	ldr	r3, [pc, #604]	@ (8001388 <BNO055_Read_DMA+0x370>)
 800112a:	f7ff fbc7 	bl	80008bc <__aeabi_ddiv>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	bno->gyro.x = ((double) bno->DataBuffer[6].i16) * M_PI / (16.0 * 180.0);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa28 	bl	8000594 <__aeabi_i2d>
 8001144:	a38c      	add	r3, pc, #560	@ (adr r3, 8001378 <BNO055_Read_DMA+0x360>)
 8001146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114a:	f7ff fa8d 	bl	8000668 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	4b8c      	ldr	r3, [pc, #560]	@ (800138c <BNO055_Read_DMA+0x374>)
 800115c:	f7ff fbae 	bl	80008bc <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	bno->gyro.y = ((double) bno->DataBuffer[7].i16) * M_PI / (16.0 * 180.0);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	@ 0xc6
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fa0f 	bl	8000594 <__aeabi_i2d>
 8001176:	a380      	add	r3, pc, #512	@ (adr r3, 8001378 <BNO055_Read_DMA+0x360>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa74 	bl	8000668 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b7f      	ldr	r3, [pc, #508]	@ (800138c <BNO055_Read_DMA+0x374>)
 800118e:	f7ff fb95 	bl	80008bc <__aeabi_ddiv>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	bno->gyro.z = ((double) bno->DataBuffer[8].i16) * M_PI / (16.0 * 180.0);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f9f6 	bl	8000594 <__aeabi_i2d>
 80011a8:	a373      	add	r3, pc, #460	@ (adr r3, 8001378 <BNO055_Read_DMA+0x360>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff fa5b 	bl	8000668 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b73      	ldr	r3, [pc, #460]	@ (800138c <BNO055_Read_DMA+0x374>)
 80011c0:	f7ff fb7c 	bl	80008bc <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	bno->euler.yaw = ((double) bno->DataBuffer[9].i16) * M_PI / (16.0 * 180.0);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f9dd 	bl	8000594 <__aeabi_i2d>
 80011da:	a367      	add	r3, pc, #412	@ (adr r3, 8001378 <BNO055_Read_DMA+0x360>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fa42 	bl	8000668 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b66      	ldr	r3, [pc, #408]	@ (800138c <BNO055_Read_DMA+0x374>)
 80011f2:	f7ff fb63 	bl	80008bc <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	bno->euler.roll = ((double) bno->DataBuffer[10].i16) * M_PI / (16.0 * 180.0);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	@ 0xcc
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f9c4 	bl	8000594 <__aeabi_i2d>
 800120c:	a35a      	add	r3, pc, #360	@ (adr r3, 8001378 <BNO055_Read_DMA+0x360>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff fa29 	bl	8000668 <__aeabi_dmul>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	4b5a      	ldr	r3, [pc, #360]	@ (800138c <BNO055_Read_DMA+0x374>)
 8001224:	f7ff fb4a 	bl	80008bc <__aeabi_ddiv>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	bno->euler.pitch = ((double) bno->DataBuffer[11].i16) * M_PI / (16.0 * 180.0);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f9b3 30ce 	ldrsh.w	r3, [r3, #206]	@ 0xce
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f9ab 	bl	8000594 <__aeabi_i2d>
 800123e:	a34e      	add	r3, pc, #312	@ (adr r3, 8001378 <BNO055_Read_DMA+0x360>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff fa10 	bl	8000668 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b4d      	ldr	r3, [pc, #308]	@ (800138c <BNO055_Read_DMA+0x374>)
 8001256:	f7ff fb31 	bl	80008bc <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	bno->quat.w = bno->DataBuffer[12].i16 * scale;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f992 	bl	8000594 <__aeabi_i2d>
 8001270:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001274:	f7ff f9f8 	bl	8000668 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	bno->quat.x = bno->DataBuffer[13].i16 * scale;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	@ 0xd2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f983 	bl	8000594 <__aeabi_i2d>
 800128e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001292:	f7ff f9e9 	bl	8000668 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	bno->quat.y = bno->DataBuffer[14].i16 * scale;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	@ 0xd4
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f974 	bl	8000594 <__aeabi_i2d>
 80012ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012b0:	f7ff f9da 	bl	8000668 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	bno->quat.z = bno->DataBuffer[15].i16 * scale;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f9b3 30d6 	ldrsh.w	r3, [r3, #214]	@ 0xd6
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f965 	bl	8000594 <__aeabi_i2d>
 80012ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012ce:	f7ff f9cb 	bl	8000668 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	if (!fast_mode) {
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d17d      	bne.n	80013de <BNO055_Read_DMA+0x3c6>

		bno->lin_acc.x = ((double) bno->DataBuffer[16].i16) / 100.0;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f9b3 30d8 	ldrsh.w	r3, [r3, #216]	@ 0xd8
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f953 	bl	8000594 <__aeabi_i2d>
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <BNO055_Read_DMA+0x36c>)
 80012f4:	f7ff fae2 	bl	80008bc <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		bno->lin_acc.y = ((double) bno->DataBuffer[17].i16) / 100.0;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f9b3 30da 	ldrsh.w	r3, [r3, #218]	@ 0xda
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f943 	bl	8000594 <__aeabi_i2d>
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <BNO055_Read_DMA+0x36c>)
 8001314:	f7ff fad2 	bl	80008bc <__aeabi_ddiv>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		bno->lin_acc.z = ((double) bno->DataBuffer[18].i16) / 100.0;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	@ 0xdc
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f933 	bl	8000594 <__aeabi_i2d>
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <BNO055_Read_DMA+0x36c>)
 8001334:	f7ff fac2 	bl	80008bc <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		bno->grav.x = ((double) bno->DataBuffer[19].i16) / 100.0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f9b3 30de 	ldrsh.w	r3, [r3, #222]	@ 0xde
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f923 	bl	8000594 <__aeabi_i2d>
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <BNO055_Read_DMA+0x36c>)
 8001354:	f7ff fab2 	bl	80008bc <__aeabi_ddiv>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		bno->grav.y = ((double) bno->DataBuffer[20].i16) / 100.0;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f9b3 30e0 	ldrsh.w	r3, [r3, #224]	@ 0xe0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f913 	bl	8000594 <__aeabi_i2d>
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	e00d      	b.n	8001390 <BNO055_Read_DMA+0x378>
 8001374:	f3af 8000 	nop.w
 8001378:	54442d18 	.word	0x54442d18
 800137c:	400921fb 	.word	0x400921fb
 8001380:	3f100000 	.word	0x3f100000
 8001384:	40590000 	.word	0x40590000
 8001388:	40300000 	.word	0x40300000
 800138c:	40a68000 	.word	0x40a68000
 8001390:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <BNO055_Read_DMA+0x3ec>)
 8001392:	f7ff fa93 	bl	80008bc <__aeabi_ddiv>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
		bno->grav.z = ((double) bno->DataBuffer[21].i16) / 100.0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	@ 0xe2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8f4 	bl	8000594 <__aeabi_i2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <BNO055_Read_DMA+0x3ec>)
 80013b2:	f7ff fa83 	bl	80008bc <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0

		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 44);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	791b      	ldrb	r3, [r3, #4]
 80013c8:	4619      	mov	r1, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	33b8      	adds	r3, #184	@ 0xb8
 80013ce:	222c      	movs	r2, #44	@ 0x2c
 80013d0:	9201      	str	r2, [sp, #4]
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	2208      	movs	r2, #8
 80013d8:	f002 fea8 	bl	800412c <HAL_I2C_Mem_Read_DMA>
	} else {
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
	}
}
 80013dc:	e00d      	b.n	80013fa <BNO055_Read_DMA+0x3e2>
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	791b      	ldrb	r3, [r3, #4]
 80013e6:	4619      	mov	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	33b8      	adds	r3, #184	@ 0xb8
 80013ec:	2220      	movs	r2, #32
 80013ee:	9201      	str	r2, [sp, #4]
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	2208      	movs	r2, #8
 80013f6:	f002 fe99 	bl	800412c <HAL_I2C_Mem_Read_DMA>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40590000 	.word	0x40590000

08001408 <BNO055_SetOffsets>:
		HAL_Delay(20);
	}
}

void BNO055_SetOffsets(BNO055_t *bno, BNO055_Offsets *bno_offset)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	@ 0x38
 800140c:	af04      	add	r7, sp, #16
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	791b      	ldrb	r3, [r3, #4]
 800141a:	4619      	mov	r1, r3
 800141c:	230a      	movs	r3, #10
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	2301      	movs	r3, #1
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2301      	movs	r3, #1
 800142c:	223d      	movs	r2, #61	@ 0x3d
 800142e:	f002 fd63 	bl	8003ef8 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 8001432:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001436:	2b00      	cmp	r3, #0
 8001438:	d014      	beq.n	8001464 <BNO055_SetOffsets+0x5c>
		uint8_t txbuffer = CONFIGMODE;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	791b      	ldrb	r3, [r3, #4]
 8001446:	4619      	mov	r1, r3
 8001448:	230a      	movs	r3, #10
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2301      	movs	r3, #1
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	f107 030f 	add.w	r3, r7, #15
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	223d      	movs	r2, #61	@ 0x3d
 800145a:	f002 fc39 	bl	8003cd0 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800145e:	2014      	movs	r0, #20
 8001460:	f001 fd98 	bl	8002f94 <HAL_Delay>
	}

	uint8_t txbuffer[22];
	txbuffer[0] = bno_offset->accel_offset_x.u8[0];
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	743b      	strb	r3, [r7, #16]
	txbuffer[1] = bno_offset->accel_offset_x.u8[1];
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	785b      	ldrb	r3, [r3, #1]
 800146e:	747b      	strb	r3, [r7, #17]
	txbuffer[2] = bno_offset->accel_offset_y.u8[0];
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	789b      	ldrb	r3, [r3, #2]
 8001474:	74bb      	strb	r3, [r7, #18]
	txbuffer[3] = bno_offset->accel_offset_y.u8[1];
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	78db      	ldrb	r3, [r3, #3]
 800147a:	74fb      	strb	r3, [r7, #19]
	txbuffer[4] = bno_offset->accel_offset_z.u8[0];
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	791b      	ldrb	r3, [r3, #4]
 8001480:	753b      	strb	r3, [r7, #20]
	txbuffer[5] = bno_offset->accel_offset_z.u8[1];
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	795b      	ldrb	r3, [r3, #5]
 8001486:	757b      	strb	r3, [r7, #21]
	txbuffer[6] = bno_offset->mag_offset_x.u8[0];
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	799b      	ldrb	r3, [r3, #6]
 800148c:	75bb      	strb	r3, [r7, #22]
	txbuffer[7] = bno_offset->mag_offset_x.u8[1];
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	79db      	ldrb	r3, [r3, #7]
 8001492:	75fb      	strb	r3, [r7, #23]
	txbuffer[8] = bno_offset->mag_offset_y.u8[0];
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	7a1b      	ldrb	r3, [r3, #8]
 8001498:	763b      	strb	r3, [r7, #24]
	txbuffer[9] = bno_offset->mag_offset_y.u8[1];
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	7a5b      	ldrb	r3, [r3, #9]
 800149e:	767b      	strb	r3, [r7, #25]
	txbuffer[10] = bno_offset->mag_offset_z.u8[0];
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	7a9b      	ldrb	r3, [r3, #10]
 80014a4:	76bb      	strb	r3, [r7, #26]
	txbuffer[11] = bno_offset->mag_offset_z.u8[1];
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	7adb      	ldrb	r3, [r3, #11]
 80014aa:	76fb      	strb	r3, [r7, #27]
	txbuffer[12] = bno_offset->gyro_offset_x.u8[0];
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	7b1b      	ldrb	r3, [r3, #12]
 80014b0:	773b      	strb	r3, [r7, #28]
	txbuffer[13] = bno_offset->gyro_offset_x.u8[1];
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	7b5b      	ldrb	r3, [r3, #13]
 80014b6:	777b      	strb	r3, [r7, #29]
	txbuffer[14] = bno_offset->gyro_offset_y.u8[0];
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	7b9b      	ldrb	r3, [r3, #14]
 80014bc:	77bb      	strb	r3, [r7, #30]
	txbuffer[15] = bno_offset->gyro_offset_y.u8[1];
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	7bdb      	ldrb	r3, [r3, #15]
 80014c2:	77fb      	strb	r3, [r7, #31]
	txbuffer[16] = bno_offset->gyro_offset_z.u8[0];
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	7c1b      	ldrb	r3, [r3, #16]
 80014c8:	f887 3020 	strb.w	r3, [r7, #32]
	txbuffer[17] = bno_offset->gyro_offset_z.u8[1];
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	7c5b      	ldrb	r3, [r3, #17]
 80014d0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	txbuffer[18] = bno_offset->accel_radius.u8[0];
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	7c9b      	ldrb	r3, [r3, #18]
 80014d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	txbuffer[19] = bno_offset->accel_radius.u8[1];
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	7cdb      	ldrb	r3, [r3, #19]
 80014e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	txbuffer[20] = bno_offset->mag_radius.u8[0];
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	7d1b      	ldrb	r3, [r3, #20]
 80014e8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	txbuffer[21] = bno_offset->mag_radius.u8[1];
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	7d5b      	ldrb	r3, [r3, #21]
 80014f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, ACC_OFFSET_X_LSB, 1, txbuffer, 22, 10);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	791b      	ldrb	r3, [r3, #4]
 80014fc:	4619      	mov	r1, r3
 80014fe:	230a      	movs	r3, #10
 8001500:	9302      	str	r3, [sp, #8]
 8001502:	2316      	movs	r3, #22
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2301      	movs	r3, #1
 800150e:	2255      	movs	r2, #85	@ 0x55
 8001510:	f002 fbde 	bl	8003cd0 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	791b      	ldrb	r3, [r3, #4]
 800151c:	4619      	mov	r1, r3
 800151e:	230a      	movs	r3, #10
 8001520:	9302      	str	r3, [sp, #8]
 8001522:	2301      	movs	r3, #1
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2301      	movs	r3, #1
 800152e:	223d      	movs	r2, #61	@ 0x3d
 8001530:	f002 fce2 	bl	8003ef8 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	795a      	ldrb	r2, [r3, #5]
 8001538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800153c:	429a      	cmp	r2, r3
 800153e:	d012      	beq.n	8001566 <BNO055_SetOffsets+0x15e>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	791b      	ldrb	r3, [r3, #4]
 8001548:	4619      	mov	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3305      	adds	r3, #5
 800154e:	220a      	movs	r2, #10
 8001550:	9202      	str	r2, [sp, #8]
 8001552:	2201      	movs	r2, #1
 8001554:	9201      	str	r2, [sp, #4]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2301      	movs	r3, #1
 800155a:	223d      	movs	r2, #61	@ 0x3d
 800155c:	f002 fbb8 	bl	8003cd0 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8001560:	2014      	movs	r0, #20
 8001562:	f001 fd17 	bl	8002f94 <HAL_Delay>
	}
}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	@ 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <BNO055_SetAxis>:

void BNO055_SetAxis(BNO055_t *bno, Remap_Config config, Remap_Sign sign)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b088      	sub	sp, #32
 8001572:	af04      	add	r7, sp, #16
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	70fb      	strb	r3, [r7, #3]
 800157a:	4613      	mov	r3, r2
 800157c:	70bb      	strb	r3, [r7, #2]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	791b      	ldrb	r3, [r3, #4]
 8001586:	4619      	mov	r1, r3
 8001588:	230a      	movs	r3, #10
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2301      	movs	r3, #1
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f107 030f 	add.w	r3, r7, #15
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	223d      	movs	r2, #61	@ 0x3d
 800159a:	f002 fcad 	bl	8003ef8 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d014      	beq.n	80015ce <BNO055_SetAxis+0x60>
		uint8_t txbuffer = CONFIGMODE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	791b      	ldrb	r3, [r3, #4]
 80015b0:	4619      	mov	r1, r3
 80015b2:	230a      	movs	r3, #10
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	2301      	movs	r3, #1
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	f107 030d 	add.w	r3, r7, #13
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2301      	movs	r3, #1
 80015c2:	223d      	movs	r2, #61	@ 0x3d
 80015c4:	f002 fb84 	bl	8003cd0 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 80015c8:	2014      	movs	r0, #20
 80015ca:	f001 fce3 	bl	8002f94 <HAL_Delay>
	}

	uint8_t txbuffer;

	txbuffer = config;
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_CONFIG, 1, &txbuffer, 1, 10);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	791b      	ldrb	r3, [r3, #4]
 80015da:	4619      	mov	r1, r3
 80015dc:	230a      	movs	r3, #10
 80015de:	9302      	str	r3, [sp, #8]
 80015e0:	2301      	movs	r3, #1
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	f107 030e 	add.w	r3, r7, #14
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2301      	movs	r3, #1
 80015ec:	2241      	movs	r2, #65	@ 0x41
 80015ee:	f002 fb6f 	bl	8003cd0 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 80015f2:	2014      	movs	r0, #20
 80015f4:	f001 fcce 	bl	8002f94 <HAL_Delay>

	txbuffer = sign;
 80015f8:	78bb      	ldrb	r3, [r7, #2]
 80015fa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_SIGN, 1, &txbuffer, 1, 10);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	791b      	ldrb	r3, [r3, #4]
 8001604:	4619      	mov	r1, r3
 8001606:	230a      	movs	r3, #10
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	2301      	movs	r3, #1
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	f107 030e 	add.w	r3, r7, #14
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2301      	movs	r3, #1
 8001616:	2242      	movs	r2, #66	@ 0x42
 8001618:	f002 fb5a 	bl	8003cd0 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 800161c:	2014      	movs	r0, #20
 800161e:	f001 fcb9 	bl	8002f94 <HAL_Delay>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	791b      	ldrb	r3, [r3, #4]
 800162a:	4619      	mov	r1, r3
 800162c:	230a      	movs	r3, #10
 800162e:	9302      	str	r3, [sp, #8]
 8001630:	2301      	movs	r3, #1
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	f107 030f 	add.w	r3, r7, #15
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2301      	movs	r3, #1
 800163c:	223d      	movs	r2, #61	@ 0x3d
 800163e:	f002 fc5b 	bl	8003ef8 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	795a      	ldrb	r2, [r3, #5]
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	429a      	cmp	r2, r3
 800164a:	d012      	beq.n	8001672 <BNO055_SetAxis+0x104>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	791b      	ldrb	r3, [r3, #4]
 8001654:	4619      	mov	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3305      	adds	r3, #5
 800165a:	220a      	movs	r2, #10
 800165c:	9202      	str	r2, [sp, #8]
 800165e:	2201      	movs	r2, #1
 8001660:	9201      	str	r2, [sp, #4]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	223d      	movs	r2, #61	@ 0x3d
 8001668:	f002 fb32 	bl	8003cd0 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800166c:	2014      	movs	r0, #20
 800166e:	f001 fc91 	bl	8002f94 <HAL_Delay>
	}
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001680:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <MX_FREERTOS_Init+0x18>)
 8001682:	2100      	movs	r1, #0
 8001684:	4804      	ldr	r0, [pc, #16]	@ (8001698 <MX_FREERTOS_Init+0x1c>)
 8001686:	f008 f951 	bl	800992c <osThreadNew>
 800168a:	4603      	mov	r3, r0
 800168c:	4a03      	ldr	r2, [pc, #12]	@ (800169c <MX_FREERTOS_Init+0x20>)
 800168e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	0801aab8 	.word	0x0801aab8
 8001698:	080021b9 	.word	0x080021b9
 800169c:	20000334 	.word	0x20000334

080016a0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	@ 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80016ac:	f009 fa12 	bl	800aad4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80016b0:	4b5a      	ldr	r3, [pc, #360]	@ (800181c <pvPortMallocMicroROS+0x17c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80016b8:	f000 f986 	bl	80019c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80016bc:	4b58      	ldr	r3, [pc, #352]	@ (8001820 <pvPortMallocMicroROS+0x180>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f040 8090 	bne.w	80017ea <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d01e      	beq.n	800170e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80016d0:	2208      	movs	r2, #8
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d015      	beq.n	800170e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f023 0307 	bic.w	r3, r3, #7
 80016e8:	3308      	adds	r3, #8
 80016ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00b      	beq.n	800170e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80016f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016fa:	f383 8811 	msr	BASEPRI, r3
 80016fe:	f3bf 8f6f 	isb	sy
 8001702:	f3bf 8f4f 	dsb	sy
 8001706:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	e7fd      	b.n	800170a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d06a      	beq.n	80017ea <pvPortMallocMicroROS+0x14a>
 8001714:	4b43      	ldr	r3, [pc, #268]	@ (8001824 <pvPortMallocMicroROS+0x184>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	d865      	bhi.n	80017ea <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800171e:	4b42      	ldr	r3, [pc, #264]	@ (8001828 <pvPortMallocMicroROS+0x188>)
 8001720:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001722:	4b41      	ldr	r3, [pc, #260]	@ (8001828 <pvPortMallocMicroROS+0x188>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001728:	e004      	b.n	8001734 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	429a      	cmp	r2, r3
 800173c:	d903      	bls.n	8001746 <pvPortMallocMicroROS+0xa6>
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f1      	bne.n	800172a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001746:	4b35      	ldr	r3, [pc, #212]	@ (800181c <pvPortMallocMicroROS+0x17c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174c:	429a      	cmp	r2, r3
 800174e:	d04c      	beq.n	80017ea <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2208      	movs	r2, #8
 8001756:	4413      	add	r3, r2
 8001758:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	1ad2      	subs	r2, r2, r3
 800176a:	2308      	movs	r3, #8
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	429a      	cmp	r2, r3
 8001770:	d920      	bls.n	80017b4 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00b      	beq.n	800179c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001788:	f383 8811 	msr	BASEPRI, r3
 800178c:	f3bf 8f6f 	isb	sy
 8001790:	f3bf 8f4f 	dsb	sy
 8001794:	613b      	str	r3, [r7, #16]
}
 8001796:	bf00      	nop
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	1ad2      	subs	r2, r2, r3
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80017a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80017ae:	69b8      	ldr	r0, [r7, #24]
 80017b0:	f000 f96c 	bl	8001a8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <pvPortMallocMicroROS+0x184>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	4a19      	ldr	r2, [pc, #100]	@ (8001824 <pvPortMallocMicroROS+0x184>)
 80017c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80017c2:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <pvPortMallocMicroROS+0x184>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b19      	ldr	r3, [pc, #100]	@ (800182c <pvPortMallocMicroROS+0x18c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d203      	bcs.n	80017d6 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <pvPortMallocMicroROS+0x184>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a16      	ldr	r2, [pc, #88]	@ (800182c <pvPortMallocMicroROS+0x18c>)
 80017d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <pvPortMallocMicroROS+0x180>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	431a      	orrs	r2, r3
 80017e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80017ea:	f009 f981 	bl	800aaf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00b      	beq.n	8001810 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80017f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017fc:	f383 8811 	msr	BASEPRI, r3
 8001800:	f3bf 8f6f 	isb	sy
 8001804:	f3bf 8f4f 	dsb	sy
 8001808:	60fb      	str	r3, [r7, #12]
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001810:	69fb      	ldr	r3, [r7, #28]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3728      	adds	r7, #40	@ 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20003e7c 	.word	0x20003e7c
 8001820:	20003e88 	.word	0x20003e88
 8001824:	20003e80 	.word	0x20003e80
 8001828:	20003e74 	.word	0x20003e74
 800182c:	20003e84 	.word	0x20003e84

08001830 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d04a      	beq.n	80018d8 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001842:	2308      	movs	r3, #8
 8001844:	425b      	negs	r3, r3
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	4413      	add	r3, r2
 800184a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <vPortFreeMicroROS+0xb0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10b      	bne.n	8001876 <vPortFreeMicroROS+0x46>
	__asm volatile
 800185e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001862:	f383 8811 	msr	BASEPRI, r3
 8001866:	f3bf 8f6f 	isb	sy
 800186a:	f3bf 8f4f 	dsb	sy
 800186e:	60fb      	str	r3, [r7, #12]
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	e7fd      	b.n	8001872 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00b      	beq.n	8001896 <vPortFreeMicroROS+0x66>
	__asm volatile
 800187e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001882:	f383 8811 	msr	BASEPRI, r3
 8001886:	f3bf 8f6f 	isb	sy
 800188a:	f3bf 8f4f 	dsb	sy
 800188e:	60bb      	str	r3, [r7, #8]
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	e7fd      	b.n	8001892 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <vPortFreeMicroROS+0xb0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d019      	beq.n	80018d8 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d115      	bne.n	80018d8 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <vPortFreeMicroROS+0xb0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	401a      	ands	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80018bc:	f009 f90a 	bl	800aad4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <vPortFreeMicroROS+0xb4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a06      	ldr	r2, [pc, #24]	@ (80018e4 <vPortFreeMicroROS+0xb4>)
 80018cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80018ce:	6938      	ldr	r0, [r7, #16]
 80018d0:	f000 f8dc 	bl	8001a8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80018d4:	f009 f90c 	bl	800aaf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20003e88 	.word	0x20003e88
 80018e4:	20003e80 	.word	0x20003e80

080018e8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80018f4:	2308      	movs	r3, #8
 80018f6:	425b      	negs	r3, r3
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	4413      	add	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <getBlockSize+0x38>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	43db      	mvns	r3, r3
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]

	return count;
 8001910:	68fb      	ldr	r3, [r7, #12]
}
 8001912:	4618      	mov	r0, r3
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20003e88 	.word	0x20003e88

08001924 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800192e:	f009 f8d1 	bl	800aad4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001932:	6838      	ldr	r0, [r7, #0]
 8001934:	f7ff feb4 	bl	80016a0 <pvPortMallocMicroROS>
 8001938:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d017      	beq.n	8001970 <pvPortReallocMicroROS+0x4c>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d014      	beq.n	8001970 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffce 	bl	80018e8 <getBlockSize>
 800194c:	4603      	mov	r3, r0
 800194e:	2208      	movs	r2, #8
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d201      	bcs.n	8001960 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	68b8      	ldr	r0, [r7, #8]
 8001966:	f018 fa14 	bl	8019d92 <memcpy>

		vPortFreeMicroROS(pv);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff60 	bl	8001830 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001970:	f009 f8be 	bl	800aaf0 <xTaskResumeAll>

	return newmem;
 8001974:	68bb      	ldr	r3, [r7, #8]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001988:	f009 f8a4 	bl	800aad4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	fb02 f303 	mul.w	r3, r2, r3
 8001994:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff fe82 	bl	80016a0 <pvPortMallocMicroROS>
 800199c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	613b      	str	r3, [r7, #16]

  	while(count--)
 80019a2:	e004      	b.n	80019ae <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	613a      	str	r2, [r7, #16]
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	1e5a      	subs	r2, r3, #1
 80019b2:	617a      	str	r2, [r7, #20]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f5      	bne.n	80019a4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80019b8:	f009 f89a 	bl	800aaf0 <xTaskResumeAll>
  	return mem;
 80019bc:	68fb      	ldr	r3, [r7, #12]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80019ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80019d4:	4b27      	ldr	r3, [pc, #156]	@ (8001a74 <prvHeapInit+0xac>)
 80019d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00c      	beq.n	80019fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3307      	adds	r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f023 0307 	bic.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a74 <prvHeapInit+0xac>)
 80019f8:	4413      	add	r3, r2
 80019fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001a00:	4a1d      	ldr	r2, [pc, #116]	@ (8001a78 <prvHeapInit+0xb0>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <prvHeapInit+0xb0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001a14:	2208      	movs	r2, #8
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f023 0307 	bic.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4a15      	ldr	r2, [pc, #84]	@ (8001a7c <prvHeapInit+0xb4>)
 8001a28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001a2a:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <prvHeapInit+0xb4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <prvHeapInit+0xb4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	1ad2      	subs	r2, r2, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <prvHeapInit+0xb4>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <prvHeapInit+0xb8>)
 8001a56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4a09      	ldr	r2, [pc, #36]	@ (8001a84 <prvHeapInit+0xbc>)
 8001a5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <prvHeapInit+0xc0>)
 8001a62:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	20003274 	.word	0x20003274
 8001a78:	20003e74 	.word	0x20003e74
 8001a7c:	20003e7c 	.word	0x20003e7c
 8001a80:	20003e84 	.word	0x20003e84
 8001a84:	20003e80 	.word	0x20003e80
 8001a88:	20003e88 	.word	0x20003e88

08001a8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001a94:	4b28      	ldr	r3, [pc, #160]	@ (8001b38 <prvInsertBlockIntoFreeList+0xac>)
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e002      	b.n	8001aa0 <prvInsertBlockIntoFreeList+0x14>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d8f7      	bhi.n	8001a9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d108      	bne.n	8001ace <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	441a      	add	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	441a      	add	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d118      	bne.n	8001b14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <prvInsertBlockIntoFreeList+0xb0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d00d      	beq.n	8001b0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	441a      	add	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e008      	b.n	8001b1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <prvInsertBlockIntoFreeList+0xb0>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	e003      	b.n	8001b1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d002      	beq.n	8001b2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20003e74 	.word	0x20003e74
 8001b3c:	20003e7c 	.word	0x20003e7c

08001b40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b46:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc0 <MX_DMA_Init+0x80>)
 8001b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc0 <MX_DMA_Init+0x80>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b52:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <MX_DMA_Init+0x80>)
 8001b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b5e:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <MX_DMA_Init+0x80>)
 8001b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b62:	4a17      	ldr	r2, [pc, #92]	@ (8001bc0 <MX_DMA_Init+0x80>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <MX_DMA_Init+0x80>)
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2105      	movs	r1, #5
 8001b7a:	200c      	movs	r0, #12
 8001b7c:	f001 fae4 	bl	8003148 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b80:	200c      	movs	r0, #12
 8001b82:	f001 fafb 	bl	800317c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2105      	movs	r1, #5
 8001b8a:	200d      	movs	r0, #13
 8001b8c:	f001 fadc 	bl	8003148 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b90:	200d      	movs	r0, #13
 8001b92:	f001 faf3 	bl	800317c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2105      	movs	r1, #5
 8001b9a:	200e      	movs	r0, #14
 8001b9c:	f001 fad4 	bl	8003148 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ba0:	200e      	movs	r0, #14
 8001ba2:	f001 faeb 	bl	800317c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2105      	movs	r1, #5
 8001baa:	2010      	movs	r0, #16
 8001bac:	f001 facc 	bl	8003148 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001bb0:	2010      	movs	r0, #16
 8001bb2:	f001 fae3 	bl	800317c <HAL_NVIC_EnableIRQ>

}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	@ 0x28
 8001bc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bda:	4b2b      	ldr	r3, [pc, #172]	@ (8001c88 <MX_GPIO_Init+0xc4>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	4a2a      	ldr	r2, [pc, #168]	@ (8001c88 <MX_GPIO_Init+0xc4>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be6:	4b28      	ldr	r3, [pc, #160]	@ (8001c88 <MX_GPIO_Init+0xc4>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bf2:	4b25      	ldr	r3, [pc, #148]	@ (8001c88 <MX_GPIO_Init+0xc4>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	4a24      	ldr	r2, [pc, #144]	@ (8001c88 <MX_GPIO_Init+0xc4>)
 8001bf8:	f043 0320 	orr.w	r3, r3, #32
 8001bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfe:	4b22      	ldr	r3, [pc, #136]	@ (8001c88 <MX_GPIO_Init+0xc4>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c88 <MX_GPIO_Init+0xc4>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c88 <MX_GPIO_Init+0xc4>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c16:	4b1c      	ldr	r3, [pc, #112]	@ (8001c88 <MX_GPIO_Init+0xc4>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <MX_GPIO_Init+0xc4>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c26:	4a18      	ldr	r2, [pc, #96]	@ (8001c88 <MX_GPIO_Init+0xc4>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2e:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <MX_GPIO_Init+0xc4>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2121      	movs	r1, #33	@ 0x21
 8001c3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c42:	f001 ff77 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480b      	ldr	r0, [pc, #44]	@ (8001c8c <MX_GPIO_Init+0xc8>)
 8001c5e:	f001 fde7 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RST_Pin|LD2_Pin;
 8001c62:	2321      	movs	r3, #33	@ 0x21
 8001c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c7c:	f001 fdd8 	bl	8003830 <HAL_GPIO_Init>

}
 8001c80:	bf00      	nop
 8001c82:	3728      	adds	r7, #40	@ 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	48000800 	.word	0x48000800

08001c90 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <MX_I2C1_Init+0x74>)
 8001c96:	4a1c      	ldr	r2, [pc, #112]	@ (8001d08 <MX_I2C1_Init+0x78>)
 8001c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <MX_I2C1_Init+0x74>)
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d0c <MX_I2C1_Init+0x7c>)
 8001c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <MX_I2C1_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	@ (8001d04 <MX_I2C1_Init+0x74>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cac:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <MX_I2C1_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <MX_I2C1_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <MX_I2C1_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <MX_I2C1_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <MX_I2C1_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cca:	480e      	ldr	r0, [pc, #56]	@ (8001d04 <MX_I2C1_Init+0x74>)
 8001ccc:	f001 ff64 	bl	8003b98 <HAL_I2C_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cd6:	f000 fb87 	bl	80023e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4809      	ldr	r0, [pc, #36]	@ (8001d04 <MX_I2C1_Init+0x74>)
 8001cde:	f004 f8d1 	bl	8005e84 <HAL_I2CEx_ConfigAnalogFilter>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ce8:	f000 fb7e 	bl	80023e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cec:	2100      	movs	r1, #0
 8001cee:	4805      	ldr	r0, [pc, #20]	@ (8001d04 <MX_I2C1_Init+0x74>)
 8001cf0:	f004 f913 	bl	8005f1a <HAL_I2CEx_ConfigDigitalFilter>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cfa:	f000 fb75 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20003e8c 	.word	0x20003e8c
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	40621236 	.word	0x40621236

08001d10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b09e      	sub	sp, #120	@ 0x78
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	2254      	movs	r2, #84	@ 0x54
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f017 ff65 	bl	8019c00 <memset>
  if(i2cHandle->Instance==I2C1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a50      	ldr	r2, [pc, #320]	@ (8001e7c <HAL_I2C_MspInit+0x16c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	f040 8099 	bne.w	8001e74 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d42:	2340      	movs	r3, #64	@ 0x40
 8001d44:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 ffa2 	bl	8006c98 <HAL_RCCEx_PeriphCLKConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d5a:	f000 fb45 	bl	80023e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	4b48      	ldr	r3, [pc, #288]	@ (8001e80 <HAL_I2C_MspInit+0x170>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d62:	4a47      	ldr	r2, [pc, #284]	@ (8001e80 <HAL_I2C_MspInit+0x170>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d6a:	4b45      	ldr	r3, [pc, #276]	@ (8001e80 <HAL_I2C_MspInit+0x170>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d7a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d7c:	2312      	movs	r3, #18
 8001d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d90:	4619      	mov	r1, r3
 8001d92:	483c      	ldr	r0, [pc, #240]	@ (8001e84 <HAL_I2C_MspInit+0x174>)
 8001d94:	f001 fd4c 	bl	8003830 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d98:	4b39      	ldr	r3, [pc, #228]	@ (8001e80 <HAL_I2C_MspInit+0x170>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9c:	4a38      	ldr	r2, [pc, #224]	@ (8001e80 <HAL_I2C_MspInit+0x170>)
 8001d9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001da4:	4b36      	ldr	r3, [pc, #216]	@ (8001e80 <HAL_I2C_MspInit+0x170>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 8001db0:	4b35      	ldr	r3, [pc, #212]	@ (8001e88 <HAL_I2C_MspInit+0x178>)
 8001db2:	4a36      	ldr	r2, [pc, #216]	@ (8001e8c <HAL_I2C_MspInit+0x17c>)
 8001db4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001db6:	4b34      	ldr	r3, [pc, #208]	@ (8001e88 <HAL_I2C_MspInit+0x178>)
 8001db8:	2211      	movs	r2, #17
 8001dba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dbc:	4b32      	ldr	r3, [pc, #200]	@ (8001e88 <HAL_I2C_MspInit+0x178>)
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc2:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <HAL_I2C_MspInit+0x178>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e88 <HAL_I2C_MspInit+0x178>)
 8001dca:	2280      	movs	r2, #128	@ 0x80
 8001dcc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dce:	4b2e      	ldr	r3, [pc, #184]	@ (8001e88 <HAL_I2C_MspInit+0x178>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e88 <HAL_I2C_MspInit+0x178>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001dda:	4b2b      	ldr	r3, [pc, #172]	@ (8001e88 <HAL_I2C_MspInit+0x178>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001de0:	4b29      	ldr	r3, [pc, #164]	@ (8001e88 <HAL_I2C_MspInit+0x178>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001de6:	4828      	ldr	r0, [pc, #160]	@ (8001e88 <HAL_I2C_MspInit+0x178>)
 8001de8:	f001 f9d6 	bl	8003198 <HAL_DMA_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8001df2:	f000 faf9 	bl	80023e8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a23      	ldr	r2, [pc, #140]	@ (8001e88 <HAL_I2C_MspInit+0x178>)
 8001dfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dfc:	4a22      	ldr	r2, [pc, #136]	@ (8001e88 <HAL_I2C_MspInit+0x178>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 8001e02:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <HAL_I2C_MspInit+0x180>)
 8001e04:	4a23      	ldr	r2, [pc, #140]	@ (8001e94 <HAL_I2C_MspInit+0x184>)
 8001e06:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001e08:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <HAL_I2C_MspInit+0x180>)
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e0e:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <HAL_I2C_MspInit+0x180>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e14:	4b1e      	ldr	r3, [pc, #120]	@ (8001e90 <HAL_I2C_MspInit+0x180>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <HAL_I2C_MspInit+0x180>)
 8001e1c:	2280      	movs	r2, #128	@ 0x80
 8001e1e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <HAL_I2C_MspInit+0x180>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <HAL_I2C_MspInit+0x180>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e2c:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <HAL_I2C_MspInit+0x180>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e32:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <HAL_I2C_MspInit+0x180>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001e38:	4815      	ldr	r0, [pc, #84]	@ (8001e90 <HAL_I2C_MspInit+0x180>)
 8001e3a:	f001 f9ad 	bl	8003198 <HAL_DMA_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8001e44:	f000 fad0 	bl	80023e8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a11      	ldr	r2, [pc, #68]	@ (8001e90 <HAL_I2C_MspInit+0x180>)
 8001e4c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e4e:	4a10      	ldr	r2, [pc, #64]	@ (8001e90 <HAL_I2C_MspInit+0x180>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2105      	movs	r1, #5
 8001e58:	201f      	movs	r0, #31
 8001e5a:	f001 f975 	bl	8003148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e5e:	201f      	movs	r0, #31
 8001e60:	f001 f98c 	bl	800317c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2105      	movs	r1, #5
 8001e68:	2020      	movs	r0, #32
 8001e6a:	f001 f96d 	bl	8003148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e6e:	2020      	movs	r0, #32
 8001e70:	f001 f984 	bl	800317c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e74:	bf00      	nop
 8001e76:	3778      	adds	r7, #120	@ 0x78
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40005400 	.word	0x40005400
 8001e80:	40021000 	.word	0x40021000
 8001e84:	48000400 	.word	0x48000400
 8001e88:	20003ee0 	.word	0x20003ee0
 8001e8c:	40020030 	.word	0x40020030
 8001e90:	20003f40 	.word	0x20003f40
 8001e94:	40020044 	.word	0x40020044

08001e98 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <MX_IWDG_Init+0x34>)
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed0 <MX_IWDG_Init+0x38>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <MX_IWDG_Init+0x34>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <MX_IWDG_Init+0x34>)
 8001eaa:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001eae:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <MX_IWDG_Init+0x34>)
 8001eb2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001eb6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001eb8:	4804      	ldr	r0, [pc, #16]	@ (8001ecc <MX_IWDG_Init+0x34>)
 8001eba:	f004 f87a 	bl	8005fb2 <HAL_IWDG_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001ec4:	f000 fa90 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20003fa0 	.word	0x20003fa0
 8001ed0:	40003000 	.word	0x40003000

08001ed4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ed8:	f001 f825 	bl	8002f26 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001edc:	f000 f814 	bl	8001f08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ee0:	f7ff fe70 	bl	8001bc4 <MX_GPIO_Init>
	MX_DMA_Init();
 8001ee4:	f7ff fe2c 	bl	8001b40 <MX_DMA_Init>
	MX_IWDG_Init();
 8001ee8:	f7ff ffd6 	bl	8001e98 <MX_IWDG_Init>
	MX_I2C1_Init();
 8001eec:	f7ff fed0 	bl	8001c90 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001ef0:	f000 fdca 	bl	8002a88 <MX_TIM2_Init>
	MX_LPUART1_UART_Init();
 8001ef4:	f000 fe3a 	bl	8002b6c <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in cmsis_os2.c) */
 8001ef8:	f007 fcce 	bl	8009898 <osKernelInitialize>
	MX_FREERTOS_Init();
 8001efc:	f7ff fbbe 	bl	800167c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001f00:	f007 fcee 	bl	80098e0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <main+0x30>

08001f08 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b094      	sub	sp, #80	@ 0x50
 8001f0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001f0e:	f107 0318 	add.w	r3, r7, #24
 8001f12:	2238      	movs	r2, #56	@ 0x38
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f017 fe72 	bl	8019c00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f004 f8a0 	bl	8006070 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001f30:	230a      	movs	r3, #10
 8001f32:	61bb      	str	r3, [r7, #24]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f3a:	2340      	movs	r3, #64	@ 0x40
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f42:	2302      	movs	r3, #2
 8001f44:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f46:	2302      	movs	r3, #2
 8001f48:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001f4e:	2355      	movs	r3, #85	@ 0x55
 8001f50:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f52:	2302      	movs	r3, #2
 8001f54:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f56:	2302      	movs	r3, #2
 8001f58:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f5e:	f107 0318 	add.w	r3, r7, #24
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 f938 	bl	80061d8 <HAL_RCC_OscConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <SystemClock_Config+0x6a>
		Error_Handler();
 8001f6e:	f000 fa3b 	bl	80023e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f72:	230f      	movs	r3, #15
 8001f74:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f76:	2303      	movs	r3, #3
 8001f78:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2104      	movs	r1, #4
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 fc36 	bl	80067fc <HAL_RCC_ClockConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <SystemClock_Config+0x92>
		Error_Handler();
 8001f96:	f000 fa27 	bl	80023e8 <Error_Handler>
	}
}
 8001f9a:	bf00      	nop
 8001f9c:	3750      	adds	r7, #80	@ 0x50
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <timer_callback>:

/* USER CODE BEGIN 4 */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	e9c7 2300 	strd	r2, r3, [r7]
	static uint8_t cnt = 0;
	if (timer != NULL) {
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d037      	beq.n	8002026 <timer_callback+0x82>

		if (cnt == 0)
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002030 <timer_callback+0x8c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d104      	bne.n	8001fc8 <timer_callback+0x24>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001fbe:	2120      	movs	r1, #32
 8001fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc4:	f001 fdce 	bl	8003b64 <HAL_GPIO_TogglePin>
		cnt = (cnt + 1) % 50;
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <timer_callback+0x8c>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	4a19      	ldr	r2, [pc, #100]	@ (8002034 <timer_callback+0x90>)
 8001fd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001fd4:	1111      	asrs	r1, r2, #4
 8001fd6:	17da      	asrs	r2, r3, #31
 8001fd8:	1a8a      	subs	r2, r1, r2
 8001fda:	2132      	movs	r1, #50	@ 0x32
 8001fdc:	fb01 f202 	mul.w	r2, r1, r2
 8001fe0:	1a9a      	subs	r2, r3, r2
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <timer_callback+0x8c>)
 8001fe6:	701a      	strb	r2, [r3, #0]

		if ((toggle == 1) && (BNO055.flag == HAL_BUSY)) {
 8001fe8:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <timer_callback+0x94>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d106      	bne.n	8001ffe <timer_callback+0x5a>
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <timer_callback+0x98>)
 8001ff2:	799b      	ldrb	r3, [r3, #6]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d102      	bne.n	8001ffe <timer_callback+0x5a>
			BNO055.flag = HAL_OK;
 8001ff8:	4b10      	ldr	r3, [pc, #64]	@ (800203c <timer_callback+0x98>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	719a      	strb	r2, [r3, #6]
		}

		if (sync++ >= 255) {  // Sync session at lower frequency
 8001ffe:	4b10      	ldr	r3, [pc, #64]	@ (8002040 <timer_callback+0x9c>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	b2d1      	uxtb	r1, r2
 8002006:	4a0e      	ldr	r2, [pc, #56]	@ (8002040 <timer_callback+0x9c>)
 8002008:	7011      	strb	r1, [r2, #0]
 800200a:	2bff      	cmp	r3, #255	@ 0xff
 800200c:	d106      	bne.n	800201c <timer_callback+0x78>
			rmw_uros_sync_session(1000);
 800200e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002012:	f00c f9fb 	bl	800e40c <rmw_uros_sync_session>
			sync = 0;
 8002016:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <timer_callback+0x9c>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
		}

		SensorsPublished();
 800201c:	f000 f814 	bl	8002048 <SensorsPublished>
		HAL_IWDG_Refresh(&hiwdg);
 8002020:	4808      	ldr	r0, [pc, #32]	@ (8002044 <timer_callback+0xa0>)
 8002022:	f004 f815 	bl	8006050 <HAL_IWDG_Refresh>
	}

}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000421a 	.word	0x2000421a
 8002034:	51eb851f 	.word	0x51eb851f
 8002038:	20004219 	.word	0x20004219
 800203c:	20004130 	.word	0x20004130
 8002040:	20004218 	.word	0x20004218
 8002044:	20003fa0 	.word	0x20003fa0

08002048 <SensorsPublished>:

void SensorsPublished() {
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0

	// quaternion
	f64array_msg.data.data[0] = BNO055.quat.x;
 800204c:	4b57      	ldr	r3, [pc, #348]	@ (80021ac <SensorsPublished+0x164>)
 800204e:	6919      	ldr	r1, [r3, #16]
 8002050:	4b57      	ldr	r3, [pc, #348]	@ (80021b0 <SensorsPublished+0x168>)
 8002052:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002056:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[1] = BNO055.quat.y;
 800205a:	4b54      	ldr	r3, [pc, #336]	@ (80021ac <SensorsPublished+0x164>)
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f103 0108 	add.w	r1, r3, #8
 8002062:	4b53      	ldr	r3, [pc, #332]	@ (80021b0 <SensorsPublished+0x168>)
 8002064:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8002068:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[2] = BNO055.quat.z;
 800206c:	4b4f      	ldr	r3, [pc, #316]	@ (80021ac <SensorsPublished+0x164>)
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f103 0110 	add.w	r1, r3, #16
 8002074:	4b4e      	ldr	r3, [pc, #312]	@ (80021b0 <SensorsPublished+0x168>)
 8002076:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800207a:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[3] = BNO055.quat.w;
 800207e:	4b4b      	ldr	r3, [pc, #300]	@ (80021ac <SensorsPublished+0x164>)
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f103 0118 	add.w	r1, r3, #24
 8002086:	4b4a      	ldr	r3, [pc, #296]	@ (80021b0 <SensorsPublished+0x168>)
 8002088:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 800208c:	e9c1 2300 	strd	r2, r3, [r1]

	//  acceleration
	f64array_msg.data.data[4] = BNO055.accel.x;
 8002090:	4b46      	ldr	r3, [pc, #280]	@ (80021ac <SensorsPublished+0x164>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f103 0120 	add.w	r1, r3, #32
 8002098:	4b45      	ldr	r3, [pc, #276]	@ (80021b0 <SensorsPublished+0x168>)
 800209a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800209e:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[5] = BNO055.accel.y;
 80020a2:	4b42      	ldr	r3, [pc, #264]	@ (80021ac <SensorsPublished+0x164>)
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80020aa:	4b41      	ldr	r3, [pc, #260]	@ (80021b0 <SensorsPublished+0x168>)
 80020ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020b0:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[6] = BNO055.accel.z;
 80020b4:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <SensorsPublished+0x164>)
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80020bc:	4b3c      	ldr	r3, [pc, #240]	@ (80021b0 <SensorsPublished+0x168>)
 80020be:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80020c2:	e9c1 2300 	strd	r2, r3, [r1]

	// linear acceleration
	f64array_msg.data.data[7] = BNO055.lin_acc.x;
 80020c6:	4b39      	ldr	r3, [pc, #228]	@ (80021ac <SensorsPublished+0x164>)
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80020ce:	4b38      	ldr	r3, [pc, #224]	@ (80021b0 <SensorsPublished+0x168>)
 80020d0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80020d4:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[8] = BNO055.lin_acc.y;
 80020d8:	4b34      	ldr	r3, [pc, #208]	@ (80021ac <SensorsPublished+0x164>)
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80020e0:	4b33      	ldr	r3, [pc, #204]	@ (80021b0 <SensorsPublished+0x168>)
 80020e2:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80020e6:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[9] = BNO055.lin_acc.z;
 80020ea:	4b30      	ldr	r3, [pc, #192]	@ (80021ac <SensorsPublished+0x164>)
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80020f2:	4b2f      	ldr	r3, [pc, #188]	@ (80021b0 <SensorsPublished+0x168>)
 80020f4:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80020f8:	e9c1 2300 	strd	r2, r3, [r1]

	// gyro (angular velocity)
	f64array_msg.data.data[10] = BNO055.gyro.x;
 80020fc:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <SensorsPublished+0x164>)
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8002104:	4b2a      	ldr	r3, [pc, #168]	@ (80021b0 <SensorsPublished+0x168>)
 8002106:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800210a:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[11] = BNO055.gyro.y;
 800210e:	4b27      	ldr	r3, [pc, #156]	@ (80021ac <SensorsPublished+0x164>)
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8002116:	4b26      	ldr	r3, [pc, #152]	@ (80021b0 <SensorsPublished+0x168>)
 8002118:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800211c:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[12] = BNO055.gyro.z;
 8002120:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <SensorsPublished+0x164>)
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8002128:	4b21      	ldr	r3, [pc, #132]	@ (80021b0 <SensorsPublished+0x168>)
 800212a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800212e:	e9c1 2300 	strd	r2, r3, [r1]

	// magnetometer
	f64array_msg.data.data[13] = BNO055.mag.x;
 8002132:	4b1e      	ldr	r3, [pc, #120]	@ (80021ac <SensorsPublished+0x164>)
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 800213a:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <SensorsPublished+0x168>)
 800213c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002140:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[14] = BNO055.mag.y;
 8002144:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <SensorsPublished+0x164>)
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800214c:	4b18      	ldr	r3, [pc, #96]	@ (80021b0 <SensorsPublished+0x168>)
 800214e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002152:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[15] = BNO055.mag.z;
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <SensorsPublished+0x164>)
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800215e:	4b14      	ldr	r3, [pc, #80]	@ (80021b0 <SensorsPublished+0x168>)
 8002160:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002164:	e9c1 2300 	strd	r2, r3, [r1]

	// euler angles
	f64array_msg.data.data[16] = BNO055.euler.roll;
 8002168:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <SensorsPublished+0x164>)
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8002170:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <SensorsPublished+0x168>)
 8002172:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002176:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[17] = BNO055.euler.pitch;
 800217a:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <SensorsPublished+0x164>)
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8002182:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <SensorsPublished+0x168>)
 8002184:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002188:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[18] = BNO055.euler.yaw;
 800218c:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <SensorsPublished+0x164>)
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <SensorsPublished+0x168>)
 8002196:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800219a:	e9c1 2300 	strd	r2, r3, [r1]

	RCCHECK(rcl_publish(&f64array_pub, &f64array_msg, NULL));
 800219e:	2200      	movs	r2, #0
 80021a0:	4902      	ldr	r1, [pc, #8]	@ (80021ac <SensorsPublished+0x164>)
 80021a2:	4804      	ldr	r0, [pc, #16]	@ (80021b4 <SensorsPublished+0x16c>)
 80021a4:	f00a faf0 	bl	800c788 <rcl_publish>

}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000018 	.word	0x20000018
 80021b0:	20004130 	.word	0x20004130
 80021b4:	20004090 	.word	0x20004090

080021b8 <StartDefaultTask>:
void StartDefaultTask(void *argument) {
 80021b8:	b5b0      	push	{r4, r5, r7, lr}
 80021ba:	b0b2      	sub	sp, #200	@ 0xc8
 80021bc:	af02      	add	r7, sp, #8
 80021be:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	BNO055_Init(&BNO055, &hi2c1, 0, NDOF);
 80021c2:	230c      	movs	r3, #12
 80021c4:	2200      	movs	r2, #0
 80021c6:	494e      	ldr	r1, [pc, #312]	@ (8002300 <StartDefaultTask+0x148>)
 80021c8:	484e      	ldr	r0, [pc, #312]	@ (8002304 <StartDefaultTask+0x14c>)
 80021ca:	f7fe fe45 	bl	8000e58 <BNO055_Init>
#ifdef BNO_CALIB_ON
	  BNO055_Calibrated(&BNO055, &BNO055_stat, &BNO055_off);
	  #endif
	BNO055_SetOffsets(&BNO055, &BNO055_off);
 80021ce:	494e      	ldr	r1, [pc, #312]	@ (8002308 <StartDefaultTask+0x150>)
 80021d0:	484c      	ldr	r0, [pc, #304]	@ (8002304 <StartDefaultTask+0x14c>)
 80021d2:	f7ff f919 	bl	8001408 <BNO055_SetOffsets>
	BNO055_SetAxis(&BNO055, P0_Config, P1_Sign);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2121      	movs	r1, #33	@ 0x21
 80021da:	484a      	ldr	r0, [pc, #296]	@ (8002304 <StartDefaultTask+0x14c>)
 80021dc:	f7ff f9c7 	bl	800156e <BNO055_SetAxis>
	HAL_TIM_Base_Start_IT(&htim2);
 80021e0:	484a      	ldr	r0, [pc, #296]	@ (800230c <StartDefaultTask+0x154>)
 80021e2:	f004 ffff 	bl	80071e4 <HAL_TIM_Base_Start_IT>

	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 80021e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002310 <StartDefaultTask+0x158>)
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002314 <StartDefaultTask+0x15c>)
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002318 <StartDefaultTask+0x160>)
 80021f0:	4a4a      	ldr	r2, [pc, #296]	@ (800231c <StartDefaultTask+0x164>)
 80021f2:	494b      	ldr	r1, [pc, #300]	@ (8002320 <StartDefaultTask+0x168>)
 80021f4:	2001      	movs	r0, #1
 80021f6:	f00b fae7 	bl	800d7c8 <rmw_uros_set_custom_transport>
	true, (void*) &hlpuart1, cubemx_transport_open, cubemx_transport_close,
			cubemx_transport_write, cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 80021fa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80021fe:	4618      	mov	r0, r3
 8002200:	f00b f9fe 	bl	800d600 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8002204:	4b47      	ldr	r3, [pc, #284]	@ (8002324 <StartDefaultTask+0x16c>)
 8002206:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 800220a:	4b47      	ldr	r3, [pc, #284]	@ (8002328 <StartDefaultTask+0x170>)
 800220c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 8002210:	4b46      	ldr	r3, [pc, #280]	@ (800232c <StartDefaultTask+0x174>)
 8002212:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8002216:	4b46      	ldr	r3, [pc, #280]	@ (8002330 <StartDefaultTask+0x178>)
 8002218:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800221c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002220:	4618      	mov	r0, r3
 8002222:	f00b f9fb 	bl	800d61c <rcutils_set_default_allocator>
 8002226:	4603      	mov	r3, r0
 8002228:	f083 0301 	eor.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <StartDefaultTask+0x84>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8002232:	f240 1121 	movw	r1, #289	@ 0x121
 8002236:	483f      	ldr	r0, [pc, #252]	@ (8002334 <StartDefaultTask+0x17c>)
 8002238:	f017 fb5c 	bl	80198f4 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 800223c:	4c3e      	ldr	r4, [pc, #248]	@ (8002338 <StartDefaultTask+0x180>)
 800223e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002242:	4618      	mov	r0, r3
 8002244:	f00b fa08 	bl	800d658 <rcutils_get_default_allocator>
 8002248:	4625      	mov	r5, r4
 800224a:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800224e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	602b      	str	r3, [r5, #0]

	init_options = rcl_get_zero_initialized_init_options();
 8002256:	f00a f8c7 	bl	800c3e8 <rcl_get_zero_initialized_init_options>
 800225a:	4603      	mov	r3, r0
 800225c:	4a37      	ldr	r2, [pc, #220]	@ (800233c <StartDefaultTask+0x184>)
 800225e:	6013      	str	r3, [r2, #0]
	RCCHECK(rcl_init_options_init(&init_options, allocator));
 8002260:	4b35      	ldr	r3, [pc, #212]	@ (8002338 <StartDefaultTask+0x180>)
 8002262:	466c      	mov	r4, sp
 8002264:	f103 020c 	add.w	r2, r3, #12
 8002268:	e892 0003 	ldmia.w	r2, {r0, r1}
 800226c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002272:	4832      	ldr	r0, [pc, #200]	@ (800233c <StartDefaultTask+0x184>)
 8002274:	f00a f8ba 	bl	800c3ec <rcl_init_options_init>
	RCCHECK(rcl_init_options_set_domain_id(&init_options, 124));
 8002278:	217c      	movs	r1, #124	@ 0x7c
 800227a:	4830      	ldr	r0, [pc, #192]	@ (800233c <StartDefaultTask+0x184>)
 800227c:	f00a f9b2 	bl	800c5e4 <rcl_init_options_set_domain_id>

	rclc_support_init_with_options(&support, 0, NULL, &init_options,
 8002280:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <StartDefaultTask+0x180>)
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <StartDefaultTask+0x184>)
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	482d      	ldr	r0, [pc, #180]	@ (8002340 <StartDefaultTask+0x188>)
 800228c:	f00b f8dc 	bl	800d448 <rclc_support_init_with_options>
			&allocator);

	rclc_node_init_default(&node, "bno055_publisher", "", &support);
 8002290:	4b2b      	ldr	r3, [pc, #172]	@ (8002340 <StartDefaultTask+0x188>)
 8002292:	4a2c      	ldr	r2, [pc, #176]	@ (8002344 <StartDefaultTask+0x18c>)
 8002294:	492c      	ldr	r1, [pc, #176]	@ (8002348 <StartDefaultTask+0x190>)
 8002296:	482d      	ldr	r0, [pc, #180]	@ (800234c <StartDefaultTask+0x194>)
 8002298:	f00b f90a 	bl	800d4b0 <rclc_node_init_default>

	rclc_publisher_init_best_effort(&f64array_pub, &node,
 800229c:	f00c fc38 	bl	800eb10 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002350 <StartDefaultTask+0x198>)
 80022a4:	4929      	ldr	r1, [pc, #164]	@ (800234c <StartDefaultTask+0x194>)
 80022a6:	482b      	ldr	r0, [pc, #172]	@ (8002354 <StartDefaultTask+0x19c>)
 80022a8:	f00b f93e 	bl	800d528 <rclc_publisher_init_best_effort>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"bno055_data");

	executor = rclc_executor_get_zero_initialized_executor();
 80022ac:	4c2a      	ldr	r4, [pc, #168]	@ (8002358 <StartDefaultTask+0x1a0>)
 80022ae:	463b      	mov	r3, r7
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00a fdf7 	bl	800cea4 <rclc_executor_get_zero_initialized_executor>
 80022b6:	4620      	mov	r0, r4
 80022b8:	463b      	mov	r3, r7
 80022ba:	2288      	movs	r2, #136	@ 0x88
 80022bc:	4619      	mov	r1, r3
 80022be:	f017 fd68 	bl	8019d92 <memcpy>
	rmw_uros_sync_session(1000);
 80022c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022c6:	f00c f8a1 	bl	800e40c <rmw_uros_sync_session>

	rclc_timer_init_default(&timer_, &support, RCL_MS_TO_NS(10),
 80022ca:	4b24      	ldr	r3, [pc, #144]	@ (800235c <StartDefaultTask+0x1a4>)
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	4a24      	ldr	r2, [pc, #144]	@ (8002360 <StartDefaultTask+0x1a8>)
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	491a      	ldr	r1, [pc, #104]	@ (8002340 <StartDefaultTask+0x188>)
 80022d6:	4823      	ldr	r0, [pc, #140]	@ (8002364 <StartDefaultTask+0x1ac>)
 80022d8:	f00b f95a 	bl	800d590 <rclc_timer_init_default>
			timer_callback);

	rclc_executor_init(&executor, &support.context, 1, &allocator);
 80022dc:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <StartDefaultTask+0x180>)
 80022de:	2201      	movs	r2, #1
 80022e0:	4917      	ldr	r1, [pc, #92]	@ (8002340 <StartDefaultTask+0x188>)
 80022e2:	481d      	ldr	r0, [pc, #116]	@ (8002358 <StartDefaultTask+0x1a0>)
 80022e4:	f00a fde8 	bl	800ceb8 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer_);
 80022e8:	491e      	ldr	r1, [pc, #120]	@ (8002364 <StartDefaultTask+0x1ac>)
 80022ea:	481b      	ldr	r0, [pc, #108]	@ (8002358 <StartDefaultTask+0x1a0>)
 80022ec:	f00a fe54 	bl	800cf98 <rclc_executor_add_timer>
	rclc_executor_spin(&executor);
 80022f0:	4819      	ldr	r0, [pc, #100]	@ (8002358 <StartDefaultTask+0x1a0>)
 80022f2:	f00b f867 	bl	800d3c4 <rclc_executor_spin>
}
 80022f6:	bf00      	nop
 80022f8:	37c0      	adds	r7, #192	@ 0xc0
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bdb0      	pop	{r4, r5, r7, pc}
 80022fe:	bf00      	nop
 8002300:	20003e8c 	.word	0x20003e8c
 8002304:	20004130 	.word	0x20004130
 8002308:	20000000 	.word	0x20000000
 800230c:	20004278 	.word	0x20004278
 8002310:	08002e2d 	.word	0x08002e2d
 8002314:	08002dc9 	.word	0x08002dc9
 8002318:	08002da9 	.word	0x08002da9
 800231c:	08002d7d 	.word	0x08002d7d
 8002320:	200042c4 	.word	0x200042c4
 8002324:	080023f5 	.word	0x080023f5
 8002328:	08002439 	.word	0x08002439
 800232c:	08002471 	.word	0x08002471
 8002330:	080024dd 	.word	0x080024dd
 8002334:	0801aa34 	.word	0x0801aa34
 8002338:	20003fe4 	.word	0x20003fe4
 800233c:	20004000 	.word	0x20004000
 8002340:	20003fb0 	.word	0x20003fb0
 8002344:	0801aa5c 	.word	0x0801aa5c
 8002348:	0801aa60 	.word	0x0801aa60
 800234c:	20003ff8 	.word	0x20003ff8
 8002350:	0801aa74 	.word	0x0801aa74
 8002354:	20004090 	.word	0x20004090
 8002358:	20004008 	.word	0x20004008
 800235c:	08001fa5 	.word	0x08001fa5
 8002360:	00989680 	.word	0x00989680
 8002364:	20004004 	.word	0x20004004

08002368 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a06      	ldr	r2, [pc, #24]	@ (800238c <HAL_I2C_MemRxCpltCallback+0x24>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d102      	bne.n	800237e <HAL_I2C_MemRxCpltCallback+0x16>
		BNO055.flag = HAL_OK;
 8002378:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <HAL_I2C_MemRxCpltCallback+0x28>)
 800237a:	2200      	movs	r2, #0
 800237c:	719a      	strb	r2, [r3, #6]
	}
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20003e8c 	.word	0x20003e8c
 8002390:	20004130 	.word	0x20004130

08002394 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0d      	ldr	r2, [pc, #52]	@ (80023d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80023a6:	f000 fdd7 	bl	8002f58 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim == &htim2) {
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a0b      	ldr	r2, [pc, #44]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10d      	bne.n	80023ce <HAL_TIM_PeriodElapsedCallback+0x3a>
		if (BNO055.flag == HAL_OK) {
 80023b2:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80023b4:	799b      	ldrb	r3, [r3, #6]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_TIM_PeriodElapsedCallback+0x3a>
			BNO055_Read_DMA(&BNO055, 0);
 80023ba:	2100      	movs	r1, #0
 80023bc:	4808      	ldr	r0, [pc, #32]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80023be:	f7fe fe2b 	bl	8001018 <BNO055_Read_DMA>
			BNO055.flag = HAL_BUSY;
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80023c4:	2202      	movs	r2, #2
 80023c6:	719a      	strb	r2, [r3, #6]
			toggle = 1;
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
		}
	}
	/* USER CODE END Callback 1 */
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40012c00 	.word	0x40012c00
 80023dc:	20004278 	.word	0x20004278
 80023e0:	20004130 	.word	0x20004130
 80023e4:	20004219 	.word	0x20004219

080023e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023ec:	b672      	cpsid	i
}
 80023ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <Error_Handler+0x8>

080023f4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80023fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <microros_allocate+0x3c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	461a      	mov	r2, r3
 800240a:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <microros_allocate+0x3c>)
 800240c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <microros_allocate+0x40>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	461a      	mov	r2, r3
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <microros_allocate+0x40>)
 800241c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff f93e 	bl	80016a0 <pvPortMallocMicroROS>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000421c 	.word	0x2000421c
 8002434:	20004220 	.word	0x20004220

08002438 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00c      	beq.n	8002462 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff fa4d 	bl	80018e8 <getBlockSize>
 800244e:	4603      	mov	r3, r0
 8002450:	4a06      	ldr	r2, [pc, #24]	@ (800246c <microros_deallocate+0x34>)
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	461a      	mov	r2, r3
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <microros_deallocate+0x34>)
 800245a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff f9e7 	bl	8001830 <vPortFreeMicroROS>
  }
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20004220 	.word	0x20004220

08002470 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800247c:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <microros_reallocate+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	4413      	add	r3, r2
 8002486:	461a      	mov	r2, r3
 8002488:	4b12      	ldr	r3, [pc, #72]	@ (80024d4 <microros_reallocate+0x64>)
 800248a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800248c:	4b12      	ldr	r3, [pc, #72]	@ (80024d8 <microros_reallocate+0x68>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	4413      	add	r3, r2
 8002496:	461a      	mov	r2, r3
 8002498:	4b0f      	ldr	r3, [pc, #60]	@ (80024d8 <microros_reallocate+0x68>)
 800249a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d104      	bne.n	80024ac <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80024a2:	68b8      	ldr	r0, [r7, #8]
 80024a4:	f7ff f8fc 	bl	80016a0 <pvPortMallocMicroROS>
 80024a8:	4603      	mov	r3, r0
 80024aa:	e00e      	b.n	80024ca <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f7ff fa1b 	bl	80018e8 <getBlockSize>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a08      	ldr	r2, [pc, #32]	@ (80024d8 <microros_reallocate+0x68>)
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <microros_reallocate+0x68>)
 80024be:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f7ff fa2e 	bl	8001924 <pvPortReallocMicroROS>
 80024c8:	4603      	mov	r3, r0
  }
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	2000421c 	.word	0x2000421c
 80024d8:	20004220 	.word	0x20004220

080024dc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002524 <microros_zero_allocate+0x48>)
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <microros_zero_allocate+0x48>)
 80024fa:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	4a08      	ldr	r2, [pc, #32]	@ (8002528 <microros_zero_allocate+0x4c>)
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	4413      	add	r3, r2
 800250a:	461a      	mov	r2, r3
 800250c:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <microros_zero_allocate+0x4c>)
 800250e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff fa33 	bl	800197e <pvPortCallocMicroROS>
 8002518:	4603      	mov	r3, r0
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000421c 	.word	0x2000421c
 8002528:	20004220 	.word	0x20004220
 800252c:	00000000 	.word	0x00000000

08002530 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002530:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002546:	a320      	add	r3, pc, #128	@ (adr r3, 80025c8 <UTILS_NanosecondsToTimespec+0x98>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fe fa9e 	bl	8000a8c <__aeabi_ldivmod>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800255a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800255e:	a31a      	add	r3, pc, #104	@ (adr r3, 80025c8 <UTILS_NanosecondsToTimespec+0x98>)
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	f7fe fa92 	bl	8000a8c <__aeabi_ldivmod>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	da20      	bge.n	80025b6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4a11      	ldr	r2, [pc, #68]	@ (80025c0 <UTILS_NanosecondsToTimespec+0x90>)
 800257a:	fb82 1203 	smull	r1, r2, r2, r3
 800257e:	1712      	asrs	r2, r2, #28
 8002580:	17db      	asrs	r3, r3, #31
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	3301      	adds	r3, #1
 8002586:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	6979      	ldr	r1, [r7, #20]
 8002590:	17c8      	asrs	r0, r1, #31
 8002592:	460c      	mov	r4, r1
 8002594:	4605      	mov	r5, r0
 8002596:	ebb2 0804 	subs.w	r8, r2, r4
 800259a:	eb63 0905 	sbc.w	r9, r3, r5
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	4906      	ldr	r1, [pc, #24]	@ (80025c4 <UTILS_NanosecondsToTimespec+0x94>)
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	441a      	add	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	609a      	str	r2, [r3, #8]
    }
}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025c0:	44b82fa1 	.word	0x44b82fa1
 80025c4:	3b9aca00 	.word	0x3b9aca00
 80025c8:	3b9aca00 	.word	0x3b9aca00
 80025cc:	00000000 	.word	0x00000000

080025d0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80025d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d4:	b08e      	sub	sp, #56	@ 0x38
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80025da:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80025dc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80025e0:	2300      	movs	r3, #0
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80025f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025f6:	4618      	mov	r0, r3
 80025f8:	f008 fcf6 	bl	800afe8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80025fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fe:	17da      	asrs	r2, r3, #31
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	61fa      	str	r2, [r7, #28]
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	69b9      	ldr	r1, [r7, #24]
 800260e:	000b      	movs	r3, r1
 8002610:	2200      	movs	r2, #0
 8002612:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002618:	2200      	movs	r2, #0
 800261a:	461c      	mov	r4, r3
 800261c:	4615      	mov	r5, r2
 800261e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002622:	1911      	adds	r1, r2, r4
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	416b      	adcs	r3, r5
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800262e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002632:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	f04f 0400 	mov.w	r4, #0
 800263e:	f04f 0500 	mov.w	r5, #0
 8002642:	015d      	lsls	r5, r3, #5
 8002644:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002648:	0154      	lsls	r4, r2, #5
 800264a:	4622      	mov	r2, r4
 800264c:	462b      	mov	r3, r5
 800264e:	ebb2 0800 	subs.w	r8, r2, r0
 8002652:	eb63 0901 	sbc.w	r9, r3, r1
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002662:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002666:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800266a:	4690      	mov	r8, r2
 800266c:	4699      	mov	r9, r3
 800266e:	eb18 0a00 	adds.w	sl, r8, r0
 8002672:	eb49 0b01 	adc.w	fp, r9, r1
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002682:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002686:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800268a:	ebb2 040a 	subs.w	r4, r2, sl
 800268e:	603c      	str	r4, [r7, #0]
 8002690:	eb63 030b 	sbc.w	r3, r3, fp
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	e9d7 4500 	ldrd	r4, r5, [r7]
 800269a:	4623      	mov	r3, r4
 800269c:	181b      	adds	r3, r3, r0
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	462b      	mov	r3, r5
 80026a2:	eb41 0303 	adc.w	r3, r1, r3
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	6a3a      	ldr	r2, [r7, #32]
 80026aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026ae:	f7ff ff3f 	bl	8002530 <UTILS_NanosecondsToTimespec>

    return 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	3738      	adds	r7, #56	@ 0x38
 80026b8:	46bd      	mov	sp, r7
 80026ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080026c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <HAL_MspInit+0x50>)
 80026c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ca:	4a11      	ldr	r2, [pc, #68]	@ (8002710 <HAL_MspInit+0x50>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80026d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <HAL_MspInit+0x50>)
 80026d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <HAL_MspInit+0x50>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002710 <HAL_MspInit+0x50>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80026ea:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <HAL_MspInit+0x50>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	210f      	movs	r1, #15
 80026fa:	f06f 0001 	mvn.w	r0, #1
 80026fe:	f000 fd23 	bl	8003148 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002702:	f003 fd59 	bl	80061b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000

08002714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	@ 0x30
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002724:	4b2c      	ldr	r3, [pc, #176]	@ (80027d8 <HAL_InitTick+0xc4>)
 8002726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002728:	4a2b      	ldr	r2, [pc, #172]	@ (80027d8 <HAL_InitTick+0xc4>)
 800272a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800272e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002730:	4b29      	ldr	r3, [pc, #164]	@ (80027d8 <HAL_InitTick+0xc4>)
 8002732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002734:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800273c:	f107 020c 	add.w	r2, r7, #12
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f004 fa2e 	bl	8006ba8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800274c:	f004 fa16 	bl	8006b7c <HAL_RCC_GetPCLK2Freq>
 8002750:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002754:	4a21      	ldr	r2, [pc, #132]	@ (80027dc <HAL_InitTick+0xc8>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0c9b      	lsrs	r3, r3, #18
 800275c:	3b01      	subs	r3, #1
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002760:	4b1f      	ldr	r3, [pc, #124]	@ (80027e0 <HAL_InitTick+0xcc>)
 8002762:	4a20      	ldr	r2, [pc, #128]	@ (80027e4 <HAL_InitTick+0xd0>)
 8002764:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002766:	4b1e      	ldr	r3, [pc, #120]	@ (80027e0 <HAL_InitTick+0xcc>)
 8002768:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800276c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800276e:	4a1c      	ldr	r2, [pc, #112]	@ (80027e0 <HAL_InitTick+0xcc>)
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002774:	4b1a      	ldr	r3, [pc, #104]	@ (80027e0 <HAL_InitTick+0xcc>)
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277a:	4b19      	ldr	r3, [pc, #100]	@ (80027e0 <HAL_InitTick+0xcc>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002780:	4817      	ldr	r0, [pc, #92]	@ (80027e0 <HAL_InitTick+0xcc>)
 8002782:	f004 fcd7 	bl	8007134 <HAL_TIM_Base_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800278c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11b      	bne.n	80027cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002794:	4812      	ldr	r0, [pc, #72]	@ (80027e0 <HAL_InitTick+0xcc>)
 8002796:	f004 fd25 	bl	80071e4 <HAL_TIM_Base_Start_IT>
 800279a:	4603      	mov	r3, r0
 800279c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80027a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d111      	bne.n	80027cc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80027a8:	2019      	movs	r0, #25
 80027aa:	f000 fce7 	bl	800317c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b0f      	cmp	r3, #15
 80027b2:	d808      	bhi.n	80027c6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80027b4:	2200      	movs	r2, #0
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	2019      	movs	r0, #25
 80027ba:	f000 fcc5 	bl	8003148 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027be:	4a0a      	ldr	r2, [pc, #40]	@ (80027e8 <HAL_InitTick+0xd4>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	e002      	b.n	80027cc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80027cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3730      	adds	r7, #48	@ 0x30
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	431bde83 	.word	0x431bde83
 80027e0:	20004224 	.word	0x20004224
 80027e4:	40012c00 	.word	0x40012c00
 80027e8:	2000003c 	.word	0x2000003c

080027ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <NMI_Handler+0x4>

080027f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <HardFault_Handler+0x4>

080027fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <MemManage_Handler+0x4>

08002804 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002808:	bf00      	nop
 800280a:	e7fd      	b.n	8002808 <BusFault_Handler+0x4>

0800280c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <UsageFault_Handler+0x4>

08002814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002828:	4802      	ldr	r0, [pc, #8]	@ (8002834 <DMA1_Channel2_IRQHandler+0x10>)
 800282a:	f000 fe98 	bl	800355e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20004358 	.word	0x20004358

08002838 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800283c:	4802      	ldr	r0, [pc, #8]	@ (8002848 <DMA1_Channel3_IRQHandler+0x10>)
 800283e:	f000 fe8e 	bl	800355e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20003ee0 	.word	0x20003ee0

0800284c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <DMA1_Channel4_IRQHandler+0x10>)
 8002852:	f000 fe84 	bl	800355e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20003f40 	.word	0x20003f40

08002860 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002864:	4802      	ldr	r0, [pc, #8]	@ (8002870 <DMA1_Channel6_IRQHandler+0x10>)
 8002866:	f000 fe7a 	bl	800355e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200043b8 	.word	0x200043b8

08002874 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002878:	4802      	ldr	r0, [pc, #8]	@ (8002884 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800287a:	f004 fd2b 	bl	80072d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20004224 	.word	0x20004224

08002888 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800288c:	4802      	ldr	r0, [pc, #8]	@ (8002898 <TIM2_IRQHandler+0x10>)
 800288e:	f004 fd21 	bl	80072d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20004278 	.word	0x20004278

0800289c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80028a0:	4802      	ldr	r0, [pc, #8]	@ (80028ac <I2C1_EV_IRQHandler+0x10>)
 80028a2:	f001 fd29 	bl	80042f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20003e8c 	.word	0x20003e8c

080028b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80028b4:	4802      	ldr	r0, [pc, #8]	@ (80028c0 <I2C1_ER_IRQHandler+0x10>)
 80028b6:	f001 fd39 	bl	800432c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20003e8c 	.word	0x20003e8c

080028c4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80028c8:	4802      	ldr	r0, [pc, #8]	@ (80028d4 <LPUART1_IRQHandler+0x10>)
 80028ca:	f005 fb6f 	bl	8007fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200042c4 	.word	0x200042c4

080028d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return 1;
 80028dc:	2301      	movs	r3, #1
}
 80028de:	4618      	mov	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <_kill>:

int _kill(int pid, int sig)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028f2:	f017 fa19 	bl	8019d28 <__errno>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2216      	movs	r2, #22
 80028fa:	601a      	str	r2, [r3, #0]
  return -1;
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <_exit>:

void _exit (int status)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002910:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff ffe7 	bl	80028e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800291a:	bf00      	nop
 800291c:	e7fd      	b.n	800291a <_exit+0x12>

0800291e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e00a      	b.n	8002946 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002930:	f3af 8000 	nop.w
 8002934:	4601      	mov	r1, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	60ba      	str	r2, [r7, #8]
 800293c:	b2ca      	uxtb	r2, r1
 800293e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3301      	adds	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	dbf0      	blt.n	8002930 <_read+0x12>
  }

  return len;
 800294e:	687b      	ldr	r3, [r7, #4]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e009      	b.n	800297e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	60ba      	str	r2, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3301      	adds	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	429a      	cmp	r2, r3
 8002984:	dbf1      	blt.n	800296a <_write+0x12>
  }
  return len;
 8002986:	687b      	ldr	r3, [r7, #4]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_close>:

int _close(int file)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002998:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029b8:	605a      	str	r2, [r3, #4]
  return 0;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_isatty>:

int _isatty(int file)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029d0:	2301      	movs	r3, #1
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a00:	4a14      	ldr	r2, [pc, #80]	@ (8002a54 <_sbrk+0x5c>)
 8002a02:	4b15      	ldr	r3, [pc, #84]	@ (8002a58 <_sbrk+0x60>)
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a0c:	4b13      	ldr	r3, [pc, #76]	@ (8002a5c <_sbrk+0x64>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <_sbrk+0x64>)
 8002a16:	4a12      	ldr	r2, [pc, #72]	@ (8002a60 <_sbrk+0x68>)
 8002a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a1a:	4b10      	ldr	r3, [pc, #64]	@ (8002a5c <_sbrk+0x64>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d207      	bcs.n	8002a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a28:	f017 f97e 	bl	8019d28 <__errno>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	220c      	movs	r2, #12
 8002a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a36:	e009      	b.n	8002a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a38:	4b08      	ldr	r3, [pc, #32]	@ (8002a5c <_sbrk+0x64>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a3e:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <_sbrk+0x64>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	4a05      	ldr	r2, [pc, #20]	@ (8002a5c <_sbrk+0x64>)
 8002a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20020000 	.word	0x20020000
 8002a58:	00000400 	.word	0x00000400
 8002a5c:	20004274 	.word	0x20004274
 8002a60:	2000b1d0 	.word	0x2000b1d0

08002a64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <SystemInit+0x20>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6e:	4a05      	ldr	r2, [pc, #20]	@ (8002a84 <SystemInit+0x20>)
 8002a70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a8e:	f107 0310 	add.w	r3, r7, #16
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b20 <MX_TIM2_Init+0x98>)
 8002aa8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002aac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8002aae:	4b1c      	ldr	r3, [pc, #112]	@ (8002b20 <MX_TIM2_Init+0x98>)
 8002ab0:	22a9      	movs	r2, #169	@ 0xa9
 8002ab2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <MX_TIM2_Init+0x98>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002aba:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <MX_TIM2_Init+0x98>)
 8002abc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ac0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac2:	4b17      	ldr	r3, [pc, #92]	@ (8002b20 <MX_TIM2_Init+0x98>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <MX_TIM2_Init+0x98>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ace:	4814      	ldr	r0, [pc, #80]	@ (8002b20 <MX_TIM2_Init+0x98>)
 8002ad0:	f004 fb30 	bl	8007134 <HAL_TIM_Base_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002ada:	f7ff fc85 	bl	80023e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ae2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ae4:	f107 0310 	add.w	r3, r7, #16
 8002ae8:	4619      	mov	r1, r3
 8002aea:	480d      	ldr	r0, [pc, #52]	@ (8002b20 <MX_TIM2_Init+0x98>)
 8002aec:	f004 fd42 	bl	8007574 <HAL_TIM_ConfigClockSource>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002af6:	f7ff fc77 	bl	80023e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002afa:	2320      	movs	r3, #32
 8002afc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4806      	ldr	r0, [pc, #24]	@ (8002b20 <MX_TIM2_Init+0x98>)
 8002b08:	f004 ffc2 	bl	8007a90 <HAL_TIMEx_MasterConfigSynchronization>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b12:	f7ff fc69 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b16:	bf00      	nop
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20004278 	.word	0x20004278

08002b24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b34:	d113      	bne.n	8002b5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b36:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <HAL_TIM_Base_MspInit+0x44>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8002b68 <HAL_TIM_Base_MspInit+0x44>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b42:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <HAL_TIM_Base_MspInit+0x44>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2105      	movs	r1, #5
 8002b52:	201c      	movs	r0, #28
 8002b54:	f000 faf8 	bl	8003148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b58:	201c      	movs	r0, #28
 8002b5a:	f000 fb0f 	bl	800317c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000

08002b6c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002b70:	4b20      	ldr	r3, [pc, #128]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002b72:	4a21      	ldr	r2, [pc, #132]	@ (8002bf8 <MX_LPUART1_UART_Init+0x8c>)
 8002b74:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8002b76:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002b78:	4a20      	ldr	r2, [pc, #128]	@ (8002bfc <MX_LPUART1_UART_Init+0x90>)
 8002b7a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002b82:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002b88:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002b8e:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002b90:	220c      	movs	r2, #12
 8002b92:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b94:	4b17      	ldr	r3, [pc, #92]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b9a:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ba0:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ba6:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002bac:	4811      	ldr	r0, [pc, #68]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002bae:	f005 f84b 	bl	8007c48 <HAL_UART_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8002bb8:	f7ff fc16 	bl	80023e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	480d      	ldr	r0, [pc, #52]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002bc0:	f006 fd5b 	bl	800967a <HAL_UARTEx_SetTxFifoThreshold>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8002bca:	f7ff fc0d 	bl	80023e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4808      	ldr	r0, [pc, #32]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002bd2:	f006 fd90 	bl	80096f6 <HAL_UARTEx_SetRxFifoThreshold>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8002bdc:	f7ff fc04 	bl	80023e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002be0:	4804      	ldr	r0, [pc, #16]	@ (8002bf4 <MX_LPUART1_UART_Init+0x88>)
 8002be2:	f006 fd11 	bl	8009608 <HAL_UARTEx_DisableFifoMode>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8002bec:	f7ff fbfc 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	200042c4 	.word	0x200042c4
 8002bf8:	40008000 	.word	0x40008000
 8002bfc:	001e8480 	.word	0x001e8480

08002c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b09e      	sub	sp, #120	@ 0x78
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c18:	f107 0310 	add.w	r3, r7, #16
 8002c1c:	2254      	movs	r2, #84	@ 0x54
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f016 ffed 	bl	8019c00 <memset>
  if(uartHandle->Instance==LPUART1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a4e      	ldr	r2, [pc, #312]	@ (8002d64 <HAL_UART_MspInit+0x164>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	f040 8094 	bne.w	8002d5a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002c32:	2320      	movs	r3, #32
 8002c34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002c36:	2300      	movs	r3, #0
 8002c38:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c3a:	f107 0310 	add.w	r3, r7, #16
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f004 f82a 	bl	8006c98 <HAL_RCCEx_PeriphCLKConfig>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c4a:	f7ff fbcd 	bl	80023e8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002c4e:	4b46      	ldr	r3, [pc, #280]	@ (8002d68 <HAL_UART_MspInit+0x168>)
 8002c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c52:	4a45      	ldr	r2, [pc, #276]	@ (8002d68 <HAL_UART_MspInit+0x168>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002c5a:	4b43      	ldr	r3, [pc, #268]	@ (8002d68 <HAL_UART_MspInit+0x168>)
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c66:	4b40      	ldr	r3, [pc, #256]	@ (8002d68 <HAL_UART_MspInit+0x168>)
 8002c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d68 <HAL_UART_MspInit+0x168>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c72:	4b3d      	ldr	r3, [pc, #244]	@ (8002d68 <HAL_UART_MspInit+0x168>)
 8002c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002c7e:	230c      	movs	r3, #12
 8002c80:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c82:	2302      	movs	r3, #2
 8002c84:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002c8e:	230c      	movs	r3, #12
 8002c90:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c96:	4619      	mov	r1, r3
 8002c98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c9c:	f000 fdc8 	bl	8003830 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002ca0:	4b32      	ldr	r3, [pc, #200]	@ (8002d6c <HAL_UART_MspInit+0x16c>)
 8002ca2:	4a33      	ldr	r2, [pc, #204]	@ (8002d70 <HAL_UART_MspInit+0x170>)
 8002ca4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002ca6:	4b31      	ldr	r3, [pc, #196]	@ (8002d6c <HAL_UART_MspInit+0x16c>)
 8002ca8:	2223      	movs	r2, #35	@ 0x23
 8002caa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cac:	4b2f      	ldr	r3, [pc, #188]	@ (8002d6c <HAL_UART_MspInit+0x16c>)
 8002cae:	2210      	movs	r2, #16
 8002cb0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d6c <HAL_UART_MspInit+0x16c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d6c <HAL_UART_MspInit+0x16c>)
 8002cba:	2280      	movs	r2, #128	@ 0x80
 8002cbc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8002d6c <HAL_UART_MspInit+0x16c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cc4:	4b29      	ldr	r3, [pc, #164]	@ (8002d6c <HAL_UART_MspInit+0x16c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002cca:	4b28      	ldr	r3, [pc, #160]	@ (8002d6c <HAL_UART_MspInit+0x16c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cd0:	4b26      	ldr	r3, [pc, #152]	@ (8002d6c <HAL_UART_MspInit+0x16c>)
 8002cd2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002cd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002cd8:	4824      	ldr	r0, [pc, #144]	@ (8002d6c <HAL_UART_MspInit+0x16c>)
 8002cda:	f000 fa5d 	bl	8003198 <HAL_DMA_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002ce4:	f7ff fb80 	bl	80023e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a20      	ldr	r2, [pc, #128]	@ (8002d6c <HAL_UART_MspInit+0x16c>)
 8002cec:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002cee:	4a1f      	ldr	r2, [pc, #124]	@ (8002d6c <HAL_UART_MspInit+0x16c>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8002cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d74 <HAL_UART_MspInit+0x174>)
 8002cf6:	4a20      	ldr	r2, [pc, #128]	@ (8002d78 <HAL_UART_MspInit+0x178>)
 8002cf8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002d74 <HAL_UART_MspInit+0x174>)
 8002cfc:	2222      	movs	r2, #34	@ 0x22
 8002cfe:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d00:	4b1c      	ldr	r3, [pc, #112]	@ (8002d74 <HAL_UART_MspInit+0x174>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d06:	4b1b      	ldr	r3, [pc, #108]	@ (8002d74 <HAL_UART_MspInit+0x174>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d0c:	4b19      	ldr	r3, [pc, #100]	@ (8002d74 <HAL_UART_MspInit+0x174>)
 8002d0e:	2280      	movs	r2, #128	@ 0x80
 8002d10:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d12:	4b18      	ldr	r3, [pc, #96]	@ (8002d74 <HAL_UART_MspInit+0x174>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d18:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <HAL_UART_MspInit+0x174>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002d1e:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <HAL_UART_MspInit+0x174>)
 8002d20:	2220      	movs	r2, #32
 8002d22:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d24:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <HAL_UART_MspInit+0x174>)
 8002d26:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002d2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002d2c:	4811      	ldr	r0, [pc, #68]	@ (8002d74 <HAL_UART_MspInit+0x174>)
 8002d2e:	f000 fa33 	bl	8003198 <HAL_DMA_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8002d38:	f7ff fb56 	bl	80023e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0d      	ldr	r2, [pc, #52]	@ (8002d74 <HAL_UART_MspInit+0x174>)
 8002d40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002d44:	4a0b      	ldr	r2, [pc, #44]	@ (8002d74 <HAL_UART_MspInit+0x174>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2105      	movs	r1, #5
 8002d4e:	205b      	movs	r0, #91	@ 0x5b
 8002d50:	f000 f9fa 	bl	8003148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002d54:	205b      	movs	r0, #91	@ 0x5b
 8002d56:	f000 fa11 	bl	800317c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	3778      	adds	r7, #120	@ 0x78
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40008000 	.word	0x40008000
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	20004358 	.word	0x20004358
 8002d70:	4002001c 	.word	0x4002001c
 8002d74:	200043b8 	.word	0x200043b8
 8002d78:	4002006c 	.word	0x4002006c

08002d7c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002d8a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002d8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d90:	4904      	ldr	r1, [pc, #16]	@ (8002da4 <cubemx_transport_open+0x28>)
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f005 f828 	bl	8007de8 <HAL_UART_Receive_DMA>
    return true;
 8002d98:	2301      	movs	r3, #1
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20004418 	.word	0x20004418

08002da8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002db6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f005 f861 	bl	8007e80 <HAL_UART_DMAStop>
    return true;
 8002dbe:	2301      	movs	r3, #1
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ddc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d11b      	bne.n	8002e20 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	6978      	ldr	r0, [r7, #20]
 8002df2:	f004 ff79 	bl	8007ce8 <HAL_UART_Transmit_DMA>
 8002df6:	4603      	mov	r3, r0
 8002df8:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002dfa:	e002      	b.n	8002e02 <cubemx_transport_write+0x3a>
            osDelay(1);
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f006 fe27 	bl	8009a50 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002e02:	7cfb      	ldrb	r3, [r7, #19]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <cubemx_transport_write+0x4a>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d1f4      	bne.n	8002dfc <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8002e12:	7cfb      	ldrb	r3, [r7, #19]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <cubemx_transport_write+0x54>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	e002      	b.n	8002e22 <cubemx_transport_write+0x5a>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e000      	b.n	8002e22 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8002e20:	2300      	movs	r3, #0
    }
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002e40:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e46:	b672      	cpsid	i
}
 8002e48:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002e58:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec8 <cubemx_transport_read+0x9c>)
 8002e5a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e5c:	b662      	cpsie	i
}
 8002e5e:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	3301      	adds	r3, #1
 8002e64:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002e66:	2001      	movs	r0, #1
 8002e68:	f006 fdf2 	bl	8009a50 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002e6c:	4b17      	ldr	r3, [pc, #92]	@ (8002ecc <cubemx_transport_read+0xa0>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <cubemx_transport_read+0x9c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d103      	bne.n	8002e80 <cubemx_transport_read+0x54>
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	dbe2      	blt.n	8002e46 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002e84:	e011      	b.n	8002eaa <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8002e86:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <cubemx_transport_read+0xa0>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	440b      	add	r3, r1
 8002e90:	490f      	ldr	r1, [pc, #60]	@ (8002ed0 <cubemx_transport_read+0xa4>)
 8002e92:	5c8a      	ldrb	r2, [r1, r2]
 8002e94:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002e96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ecc <cubemx_transport_read+0xa0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ecc <cubemx_transport_read+0xa0>)
 8002ea2:	6013      	str	r3, [r2, #0]
        wrote++;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002eaa:	4b08      	ldr	r3, [pc, #32]	@ (8002ecc <cubemx_transport_read+0xa0>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <cubemx_transport_read+0x9c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d003      	beq.n	8002ebe <cubemx_transport_read+0x92>
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d3e3      	bcc.n	8002e86 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3720      	adds	r7, #32
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20004c1c 	.word	0x20004c1c
 8002ecc:	20004c18 	.word	0x20004c18
 8002ed0:	20004418 	.word	0x20004418

08002ed4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ed4:	480d      	ldr	r0, [pc, #52]	@ (8002f0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ed6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ed8:	f7ff fdc4 	bl	8002a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002edc:	480c      	ldr	r0, [pc, #48]	@ (8002f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ede:	490d      	ldr	r1, [pc, #52]	@ (8002f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f18 <LoopForever+0xe>)
  movs r3, #0
 8002ee2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ee4:	e002      	b.n	8002eec <LoopCopyDataInit>

08002ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eea:	3304      	adds	r3, #4

08002eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef0:	d3f9      	bcc.n	8002ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8002f20 <LoopForever+0x16>)
  movs r3, #0
 8002ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ef8:	e001      	b.n	8002efe <LoopFillZerobss>

08002efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002efc:	3204      	adds	r2, #4

08002efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f00:	d3fb      	bcc.n	8002efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f02:	f016 ff17 	bl	8019d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f06:	f7fe ffe5 	bl	8001ed4 <main>

08002f0a <LoopForever>:

LoopForever:
    b LoopForever
 8002f0a:	e7fe      	b.n	8002f0a <LoopForever>
  ldr   r0, =_estack
 8002f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f14:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 8002f18:	0801b86c 	.word	0x0801b86c
  ldr r2, =_sbss
 8002f1c:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8002f20:	2000b1d0 	.word	0x2000b1d0

08002f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f24:	e7fe      	b.n	8002f24 <ADC1_2_IRQHandler>

08002f26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f30:	2003      	movs	r0, #3
 8002f32:	f000 f8fe 	bl	8003132 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f36:	200f      	movs	r0, #15
 8002f38:	f7ff fbec 	bl	8002714 <HAL_InitTick>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	71fb      	strb	r3, [r7, #7]
 8002f46:	e001      	b.n	8002f4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f48:	f7ff fbba 	bl	80026c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f4c:	79fb      	ldrb	r3, [r7, #7]

}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	@ (8002f74 <HAL_IncTick+0x1c>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <HAL_IncTick+0x20>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4413      	add	r3, r2
 8002f66:	4a03      	ldr	r2, [pc, #12]	@ (8002f74 <HAL_IncTick+0x1c>)
 8002f68:	6013      	str	r3, [r2, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	20004c20 	.word	0x20004c20
 8002f78:	20000040 	.word	0x20000040

08002f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f80:	4b03      	ldr	r3, [pc, #12]	@ (8002f90 <HAL_GetTick+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20004c20 	.word	0x20004c20

08002f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f9c:	f7ff ffee 	bl	8002f7c <HAL_GetTick>
 8002fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fac:	d004      	beq.n	8002fb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fae:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <HAL_Delay+0x40>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fb8:	bf00      	nop
 8002fba:	f7ff ffdf 	bl	8002f7c <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d8f7      	bhi.n	8002fba <HAL_Delay+0x26>
  {
  }
}
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000040 	.word	0x20000040

08002fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300a:	4a04      	ldr	r2, [pc, #16]	@ (800301c <__NVIC_SetPriorityGrouping+0x44>)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	60d3      	str	r3, [r2, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	db0b      	blt.n	8003066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	4907      	ldr	r1, [pc, #28]	@ (8003074 <__NVIC_EnableIRQ+0x38>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2001      	movs	r0, #1
 800305e:	fa00 f202 	lsl.w	r2, r0, r2
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000e100 	.word	0xe000e100

08003078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	6039      	str	r1, [r7, #0]
 8003082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	2b00      	cmp	r3, #0
 800308a:	db0a      	blt.n	80030a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	490c      	ldr	r1, [pc, #48]	@ (80030c4 <__NVIC_SetPriority+0x4c>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	0112      	lsls	r2, r2, #4
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	440b      	add	r3, r1
 800309c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a0:	e00a      	b.n	80030b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	4908      	ldr	r1, [pc, #32]	@ (80030c8 <__NVIC_SetPriority+0x50>)
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	3b04      	subs	r3, #4
 80030b0:	0112      	lsls	r2, r2, #4
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	440b      	add	r3, r1
 80030b6:	761a      	strb	r2, [r3, #24]
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000e100 	.word	0xe000e100
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	@ 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f1c3 0307 	rsb	r3, r3, #7
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	bf28      	it	cs
 80030ea:	2304      	movcs	r3, #4
 80030ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3304      	adds	r3, #4
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d902      	bls.n	80030fc <NVIC_EncodePriority+0x30>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3b03      	subs	r3, #3
 80030fa:	e000      	b.n	80030fe <NVIC_EncodePriority+0x32>
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	401a      	ands	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003114:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	43d9      	mvns	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	4313      	orrs	r3, r2
         );
}
 8003126:	4618      	mov	r0, r3
 8003128:	3724      	adds	r7, #36	@ 0x24
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ff4c 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003156:	f7ff ff63 	bl	8003020 <__NVIC_GetPriorityGrouping>
 800315a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	6978      	ldr	r0, [r7, #20]
 8003162:	f7ff ffb3 	bl	80030cc <NVIC_EncodePriority>
 8003166:	4602      	mov	r2, r0
 8003168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ff82 	bl	8003078 <__NVIC_SetPriority>
}
 8003174:	bf00      	nop
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ff56 	bl	800303c <__NVIC_EnableIRQ>
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e08d      	b.n	80032c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b47      	ldr	r3, [pc, #284]	@ (80032d0 <HAL_DMA_Init+0x138>)
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d80f      	bhi.n	80031d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b45      	ldr	r3, [pc, #276]	@ (80032d4 <HAL_DMA_Init+0x13c>)
 80031be:	4413      	add	r3, r2
 80031c0:	4a45      	ldr	r2, [pc, #276]	@ (80032d8 <HAL_DMA_Init+0x140>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	009a      	lsls	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a42      	ldr	r2, [pc, #264]	@ (80032dc <HAL_DMA_Init+0x144>)
 80031d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80031d4:	e00e      	b.n	80031f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	4b40      	ldr	r3, [pc, #256]	@ (80032e0 <HAL_DMA_Init+0x148>)
 80031de:	4413      	add	r3, r2
 80031e0:	4a3d      	ldr	r2, [pc, #244]	@ (80032d8 <HAL_DMA_Init+0x140>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	009a      	lsls	r2, r3, #2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a3c      	ldr	r2, [pc, #240]	@ (80032e4 <HAL_DMA_Init+0x14c>)
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800320a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800320e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fa90 	bl	800376c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003254:	d102      	bne.n	800325c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003270:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d010      	beq.n	800329c <HAL_DMA_Init+0x104>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b04      	cmp	r3, #4
 8003280:	d80c      	bhi.n	800329c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fab0 	bl	80037e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	e008      	b.n	80032ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40020407 	.word	0x40020407
 80032d4:	bffdfff8 	.word	0xbffdfff8
 80032d8:	cccccccd 	.word	0xcccccccd
 80032dc:	40020000 	.word	0x40020000
 80032e0:	bffdfbf8 	.word	0xbffdfbf8
 80032e4:	40020400 	.word	0x40020400

080032e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_DMA_Start_IT+0x20>
 8003304:	2302      	movs	r3, #2
 8003306:	e066      	b.n	80033d6 <HAL_DMA_Start_IT+0xee>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d155      	bne.n	80033c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0201 	bic.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f9d5 	bl	80036f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 020e 	orr.w	r2, r2, #14
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e00f      	b.n	8003380 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0204 	bic.w	r2, r2, #4
 800336e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 020a 	orr.w	r2, r2, #10
 800337e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003398:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800339c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0201 	orr.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e005      	b.n	80033d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
 80033d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d005      	beq.n	8003402 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e037      	b.n	8003472 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 020e 	bic.w	r2, r2, #14
 8003410:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800341c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003420:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003436:	f003 021f 	and.w	r2, r3, #31
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f202 	lsl.w	r2, r1, r2
 8003444:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800344e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00c      	beq.n	8003472 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003462:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003466:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003470:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d00d      	beq.n	80034c4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2204      	movs	r2, #4
 80034ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	e047      	b.n	8003554 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 020e 	bic.w	r2, r2, #14
 80034d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f8:	f003 021f 	and.w	r2, r3, #31
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	2101      	movs	r1, #1
 8003502:	fa01 f202 	lsl.w	r2, r1, r2
 8003506:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003510:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00c      	beq.n	8003534 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003524:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003528:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003532:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
    }
  }
  return status;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	2204      	movs	r2, #4
 8003580:	409a      	lsls	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d026      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x7a>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d021      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0204 	bic.w	r2, r2, #4
 80035b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	f003 021f 	and.w	r2, r3, #31
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	2104      	movs	r1, #4
 80035c0:	fa01 f202 	lsl.w	r2, r1, r2
 80035c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d071      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035d6:	e06c      	b.n	80036b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	2202      	movs	r2, #2
 80035e2:	409a      	lsls	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d02e      	beq.n	800364a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d029      	beq.n	800364a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10b      	bne.n	800361c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 020a 	bic.w	r2, r2, #10
 8003612:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003620:	f003 021f 	and.w	r2, r3, #31
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	2102      	movs	r1, #2
 800362a:	fa01 f202 	lsl.w	r2, r1, r2
 800362e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d038      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003648:	e033      	b.n	80036b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	2208      	movs	r2, #8
 8003654:	409a      	lsls	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d02a      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d025      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 020e 	bic.w	r2, r2, #14
 8003676:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367c:	f003 021f 	and.w	r2, r3, #31
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	2101      	movs	r1, #1
 8003686:	fa01 f202 	lsl.w	r2, r1, r2
 800368a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d004      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036b2:	bf00      	nop
 80036b4:	bf00      	nop
}
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036ca:	b2db      	uxtb	r3, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003706:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370c:	2b00      	cmp	r3, #0
 800370e:	d004      	beq.n	800371a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003718:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	f003 021f 	and.w	r2, r3, #31
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f202 	lsl.w	r2, r1, r2
 800372c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b10      	cmp	r3, #16
 800373c:	d108      	bne.n	8003750 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800374e:	e007      	b.n	8003760 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	4b16      	ldr	r3, [pc, #88]	@ (80037d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800377c:	429a      	cmp	r2, r3
 800377e:	d802      	bhi.n	8003786 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003780:	4b15      	ldr	r3, [pc, #84]	@ (80037d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	e001      	b.n	800378a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003786:	4b15      	ldr	r3, [pc, #84]	@ (80037dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003788:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	3b08      	subs	r3, #8
 8003796:	4a12      	ldr	r2, [pc, #72]	@ (80037e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a4:	089b      	lsrs	r3, r3, #2
 80037a6:	009a      	lsls	r2, r3, #2
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4413      	add	r3, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a0b      	ldr	r2, [pc, #44]	@ (80037e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80037b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	2201      	movs	r2, #1
 80037c0:	409a      	lsls	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40020407 	.word	0x40020407
 80037d8:	40020800 	.word	0x40020800
 80037dc:	40020820 	.word	0x40020820
 80037e0:	cccccccd 	.word	0xcccccccd
 80037e4:	40020880 	.word	0x40020880

080037e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	461a      	mov	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a08      	ldr	r2, [pc, #32]	@ (800382c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800380a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3b01      	subs	r3, #1
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	2201      	movs	r2, #1
 8003816:	409a      	lsls	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	1000823f 	.word	0x1000823f
 800382c:	40020940 	.word	0x40020940

08003830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800383e:	e15a      	b.n	8003af6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	2101      	movs	r1, #1
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	fa01 f303 	lsl.w	r3, r1, r3
 800384c:	4013      	ands	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 814c 	beq.w	8003af0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d005      	beq.n	8003870 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800386c:	2b02      	cmp	r3, #2
 800386e:	d130      	bne.n	80038d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038a6:	2201      	movs	r2, #1
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4013      	ands	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f003 0201 	and.w	r2, r3, #1
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d017      	beq.n	800390e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	2203      	movs	r2, #3
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4013      	ands	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d123      	bne.n	8003962 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	08da      	lsrs	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3208      	adds	r2, #8
 8003922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003926:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	220f      	movs	r2, #15
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	08da      	lsrs	r2, r3, #3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3208      	adds	r2, #8
 800395c:	6939      	ldr	r1, [r7, #16]
 800395e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	2203      	movs	r2, #3
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0203 	and.w	r2, r3, #3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80a6 	beq.w	8003af0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003b14 <HAL_GPIO_Init+0x2e4>)
 80039a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003b14 <HAL_GPIO_Init+0x2e4>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80039b0:	4b58      	ldr	r3, [pc, #352]	@ (8003b14 <HAL_GPIO_Init+0x2e4>)
 80039b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039bc:	4a56      	ldr	r2, [pc, #344]	@ (8003b18 <HAL_GPIO_Init+0x2e8>)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	089b      	lsrs	r3, r3, #2
 80039c2:	3302      	adds	r3, #2
 80039c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	220f      	movs	r2, #15
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039e6:	d01f      	beq.n	8003a28 <HAL_GPIO_Init+0x1f8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a4c      	ldr	r2, [pc, #304]	@ (8003b1c <HAL_GPIO_Init+0x2ec>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d019      	beq.n	8003a24 <HAL_GPIO_Init+0x1f4>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a4b      	ldr	r2, [pc, #300]	@ (8003b20 <HAL_GPIO_Init+0x2f0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <HAL_GPIO_Init+0x1f0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003b24 <HAL_GPIO_Init+0x2f4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00d      	beq.n	8003a1c <HAL_GPIO_Init+0x1ec>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a49      	ldr	r2, [pc, #292]	@ (8003b28 <HAL_GPIO_Init+0x2f8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d007      	beq.n	8003a18 <HAL_GPIO_Init+0x1e8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a48      	ldr	r2, [pc, #288]	@ (8003b2c <HAL_GPIO_Init+0x2fc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d101      	bne.n	8003a14 <HAL_GPIO_Init+0x1e4>
 8003a10:	2305      	movs	r3, #5
 8003a12:	e00a      	b.n	8003a2a <HAL_GPIO_Init+0x1fa>
 8003a14:	2306      	movs	r3, #6
 8003a16:	e008      	b.n	8003a2a <HAL_GPIO_Init+0x1fa>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	e006      	b.n	8003a2a <HAL_GPIO_Init+0x1fa>
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e004      	b.n	8003a2a <HAL_GPIO_Init+0x1fa>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e002      	b.n	8003a2a <HAL_GPIO_Init+0x1fa>
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <HAL_GPIO_Init+0x1fa>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	f002 0203 	and.w	r2, r2, #3
 8003a30:	0092      	lsls	r2, r2, #2
 8003a32:	4093      	lsls	r3, r2
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a3a:	4937      	ldr	r1, [pc, #220]	@ (8003b18 <HAL_GPIO_Init+0x2e8>)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	3302      	adds	r3, #2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a48:	4b39      	ldr	r3, [pc, #228]	@ (8003b30 <HAL_GPIO_Init+0x300>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	43db      	mvns	r3, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a6c:	4a30      	ldr	r2, [pc, #192]	@ (8003b30 <HAL_GPIO_Init+0x300>)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a72:	4b2f      	ldr	r3, [pc, #188]	@ (8003b30 <HAL_GPIO_Init+0x300>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a96:	4a26      	ldr	r2, [pc, #152]	@ (8003b30 <HAL_GPIO_Init+0x300>)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003a9c:	4b24      	ldr	r3, [pc, #144]	@ (8003b30 <HAL_GPIO_Init+0x300>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8003b30 <HAL_GPIO_Init+0x300>)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b30 <HAL_GPIO_Init+0x300>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003aea:	4a11      	ldr	r2, [pc, #68]	@ (8003b30 <HAL_GPIO_Init+0x300>)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	3301      	adds	r3, #1
 8003af4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f47f ae9d 	bne.w	8003840 <HAL_GPIO_Init+0x10>
  }
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40010000 	.word	0x40010000
 8003b1c:	48000400 	.word	0x48000400
 8003b20:	48000800 	.word	0x48000800
 8003b24:	48000c00 	.word	0x48000c00
 8003b28:	48001000 	.word	0x48001000
 8003b2c:	48001400 	.word	0x48001400
 8003b30:	40010400 	.word	0x40010400

08003b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]
 8003b40:	4613      	mov	r3, r2
 8003b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b44:	787b      	ldrb	r3, [r7, #1]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b4a:	887a      	ldrh	r2, [r7, #2]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b50:	e002      	b.n	8003b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b52:	887a      	ldrh	r2, [r7, #2]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b76:	887a      	ldrh	r2, [r7, #2]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	041a      	lsls	r2, r3, #16
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	43d9      	mvns	r1, r3
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	400b      	ands	r3, r1
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	619a      	str	r2, [r3, #24]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e08d      	b.n	8003cc6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fe f8a6 	bl	8001d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	@ 0x24
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003be8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d107      	bne.n	8003c12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	e006      	b.n	8003c20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d108      	bne.n	8003c3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	e007      	b.n	8003c4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69d9      	ldr	r1, [r3, #28]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1a      	ldr	r2, [r3, #32]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	4608      	mov	r0, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	817b      	strh	r3, [r7, #10]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	813b      	strh	r3, [r7, #8]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	f040 80f9 	bne.w	8003eea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_I2C_Mem_Write+0x34>
 8003cfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d0a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0ed      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_I2C_Mem_Write+0x4e>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e0e6      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d26:	f7ff f929 	bl	8002f7c <HAL_GetTick>
 8003d2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2319      	movs	r3, #25
 8003d32:	2201      	movs	r2, #1
 8003d34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f001 fdcc 	bl	80058d6 <I2C_WaitOnFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0d1      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2221      	movs	r2, #33	@ 0x21
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2240      	movs	r2, #64	@ 0x40
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d70:	88f8      	ldrh	r0, [r7, #6]
 8003d72:	893a      	ldrh	r2, [r7, #8]
 8003d74:	8979      	ldrh	r1, [r7, #10]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4603      	mov	r3, r0
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 ff9b 	bl	8004cbc <I2C_RequestMemoryWrite>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0a9      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2bff      	cmp	r3, #255	@ 0xff
 8003da0:	d90e      	bls.n	8003dc0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	22ff      	movs	r2, #255	@ 0xff
 8003da6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	8979      	ldrh	r1, [r7, #10]
 8003db0:	2300      	movs	r3, #0
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f001 ff4f 	bl	8005c5c <I2C_TransferConfig>
 8003dbe:	e00f      	b.n	8003de0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	8979      	ldrh	r1, [r7, #10]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f001 ff3e 	bl	8005c5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f001 fdcf 	bl	8005988 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e07b      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d034      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x1c8>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d130      	bne.n	8003e98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2180      	movs	r1, #128	@ 0x80
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f001 fd48 	bl	80058d6 <I2C_WaitOnFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e04d      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2bff      	cmp	r3, #255	@ 0xff
 8003e58:	d90e      	bls.n	8003e78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	22ff      	movs	r2, #255	@ 0xff
 8003e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	8979      	ldrh	r1, [r7, #10]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f001 fef3 	bl	8005c5c <I2C_TransferConfig>
 8003e76:	e00f      	b.n	8003e98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	8979      	ldrh	r1, [r7, #10]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f001 fee2 	bl	8005c5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d19e      	bne.n	8003de0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f001 fdb5 	bl	8005a16 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e01a      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <HAL_I2C_Mem_Write+0x224>)
 8003eca:	400b      	ands	r3, r1
 8003ecc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e000      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	fe00e800 	.word	0xfe00e800

08003ef8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	4608      	mov	r0, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	461a      	mov	r2, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	817b      	strh	r3, [r7, #10]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	813b      	strh	r3, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	f040 80fd 	bne.w	800411a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_I2C_Mem_Read+0x34>
 8003f26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f32:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0f1      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_I2C_Mem_Read+0x4e>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e0ea      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f4e:	f7ff f815 	bl	8002f7c <HAL_GetTick>
 8003f52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2319      	movs	r3, #25
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f001 fcb8 	bl	80058d6 <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0d5      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2222      	movs	r2, #34	@ 0x22
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2240      	movs	r2, #64	@ 0x40
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a3a      	ldr	r2, [r7, #32]
 8003f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f98:	88f8      	ldrh	r0, [r7, #6]
 8003f9a:	893a      	ldrh	r2, [r7, #8]
 8003f9c:	8979      	ldrh	r1, [r7, #10]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fedb 	bl	8004d64 <I2C_RequestMemoryRead>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0ad      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2bff      	cmp	r3, #255	@ 0xff
 8003fc8:	d90e      	bls.n	8003fe8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	22ff      	movs	r2, #255	@ 0xff
 8003fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	8979      	ldrh	r1, [r7, #10]
 8003fd8:	4b52      	ldr	r3, [pc, #328]	@ (8004124 <HAL_I2C_Mem_Read+0x22c>)
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f001 fe3b 	bl	8005c5c <I2C_TransferConfig>
 8003fe6:	e00f      	b.n	8004008 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	8979      	ldrh	r1, [r7, #10]
 8003ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8004124 <HAL_I2C_Mem_Read+0x22c>)
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f001 fe2a 	bl	8005c5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400e:	2200      	movs	r2, #0
 8004010:	2104      	movs	r1, #4
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f001 fc5f 	bl	80058d6 <I2C_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e07c      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d034      	beq.n	80040c8 <HAL_I2C_Mem_Read+0x1d0>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004062:	2b00      	cmp	r3, #0
 8004064:	d130      	bne.n	80040c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	2200      	movs	r2, #0
 800406e:	2180      	movs	r1, #128	@ 0x80
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f001 fc30 	bl	80058d6 <I2C_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e04d      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2bff      	cmp	r3, #255	@ 0xff
 8004088:	d90e      	bls.n	80040a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	22ff      	movs	r2, #255	@ 0xff
 800408e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004094:	b2da      	uxtb	r2, r3
 8004096:	8979      	ldrh	r1, [r7, #10]
 8004098:	2300      	movs	r3, #0
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f001 fddb 	bl	8005c5c <I2C_TransferConfig>
 80040a6:	e00f      	b.n	80040c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	8979      	ldrh	r1, [r7, #10]
 80040ba:	2300      	movs	r3, #0
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f001 fdca 	bl	8005c5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d19a      	bne.n	8004008 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f001 fc9d 	bl	8005a16 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e01a      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2220      	movs	r2, #32
 80040ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6859      	ldr	r1, [r3, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <HAL_I2C_Mem_Read+0x230>)
 80040fa:	400b      	ands	r3, r1
 80040fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e000      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800411a:	2302      	movs	r3, #2
  }
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	80002400 	.word	0x80002400
 8004128:	fe00e800 	.word	0xfe00e800

0800412c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	4608      	mov	r0, r1
 8004136:	4611      	mov	r1, r2
 8004138:	461a      	mov	r2, r3
 800413a:	4603      	mov	r3, r0
 800413c:	817b      	strh	r3, [r7, #10]
 800413e:	460b      	mov	r3, r1
 8004140:	813b      	strh	r3, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b20      	cmp	r3, #32
 8004150:	f040 80c2 	bne.w	80042d8 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_I2C_Mem_Read_DMA+0x34>
 800415a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800415c:	2b00      	cmp	r3, #0
 800415e:	d105      	bne.n	800416c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004166:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0b6      	b.n	80042da <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800417a:	d101      	bne.n	8004180 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
 800417e:	e0ac      	b.n	80042da <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_I2C_Mem_Read_DMA+0x62>
 800418a:	2302      	movs	r3, #2
 800418c:	e0a5      	b.n	80042da <HAL_I2C_Mem_Read_DMA+0x1ae>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2222      	movs	r2, #34	@ 0x22
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2240      	movs	r2, #64	@ 0x40
 80041a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a3a      	ldr	r2, [r7, #32]
 80041b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a4a      	ldr	r2, [pc, #296]	@ (80042e4 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 80041bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a49      	ldr	r2, [pc, #292]	@ (80042e8 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 80041c2:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80041c4:	897a      	ldrh	r2, [r7, #10]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2bff      	cmp	r3, #255	@ 0xff
 80041d2:	d903      	bls.n	80041dc <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	22ff      	movs	r2, #255	@ 0xff
 80041d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80041da:	e004      	b.n	80041e6 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d109      	bne.n	8004200 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041ec:	893b      	ldrh	r3, [r7, #8]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80041fe:	e00b      	b.n	8004218 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004200:	893b      	ldrh	r3, [r7, #8]
 8004202:	0a1b      	lsrs	r3, r3, #8
 8004204:	b29b      	uxth	r3, r3
 8004206:	b2da      	uxtb	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800420e:	893b      	ldrh	r3, [r7, #8]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d020      	beq.n	8004262 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004224:	4a31      	ldr	r2, [pc, #196]	@ (80042ec <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8004226:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422c:	4a30      	ldr	r2, [pc, #192]	@ (80042f0 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 800422e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423c:	2200      	movs	r2, #0
 800423e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3324      	adds	r3, #36	@ 0x24
 800424a:	4619      	mov	r1, r3
 800424c:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004252:	f7ff f849 	bl	80032e8 <HAL_DMA_Start_IT>
 8004256:	4603      	mov	r3, r0
 8004258:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d127      	bne.n	80042b0 <HAL_I2C_Mem_Read_DMA+0x184>
 8004260:	e013      	b.n	800428a <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e027      	b.n	80042da <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	8979      	ldrh	r1, [r7, #10]
 8004290:	4b18      	ldr	r3, [pc, #96]	@ (80042f4 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	2300      	movs	r3, #0
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f001 fce0 	bl	8005c5c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042a4:	2101      	movs	r1, #1
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f001 fd0a 	bl	8005cc0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	e014      	b.n	80042da <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c4:	f043 0210 	orr.w	r2, r3, #16
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
  }
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	ffff0000 	.word	0xffff0000
 80042e8:	08004899 	.word	0x08004899
 80042ec:	080057d7 	.word	0x080057d7
 80042f0:	0800586d 	.word	0x0800586d
 80042f4:	80002000 	.word	0x80002000

080042f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	68f9      	ldr	r1, [r7, #12]
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4798      	blx	r3
  }
}
 8004324:	bf00      	nop
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d010      	beq.n	8004372 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	09db      	lsrs	r3, r3, #7
 8004354:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004360:	f043 0201 	orr.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004370:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	0a9b      	lsrs	r3, r3, #10
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d010      	beq.n	80043a0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	09db      	lsrs	r3, r3, #7
 8004382:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438e:	f043 0208 	orr.w	r2, r3, #8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800439e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	0a5b      	lsrs	r3, r3, #9
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d010      	beq.n	80043ce <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	09db      	lsrs	r3, r3, #7
 80043b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043bc:	f043 0202 	orr.w	r2, r3, #2
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 030b 	and.w	r3, r3, #11
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80043de:	68f9      	ldr	r1, [r7, #12]
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f001 f8bd 	bl	8005560 <I2C_ITError>
  }
}
 80043e6:	bf00      	nop
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	460b      	mov	r3, r1
 8004448:	70fb      	strb	r3, [r7, #3]
 800444a:	4613      	mov	r3, r2
 800444c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b086      	sub	sp, #24
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <I2C_Slave_ISR_IT+0x24>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e0ed      	b.n	80046aa <I2C_Slave_ISR_IT+0x200>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	095b      	lsrs	r3, r3, #5
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80044ee:	6939      	ldr	r1, [r7, #16]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fe75 	bl	80051e0 <I2C_ITSlaveCplt>
 80044f6:	e0d3      	b.n	80046a0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d04d      	beq.n	80045a0 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800450c:	2b00      	cmp	r3, #0
 800450e:	d047      	beq.n	80045a0 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d128      	bne.n	800456c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b28      	cmp	r3, #40	@ 0x28
 8004524:	d108      	bne.n	8004538 <I2C_Slave_ISR_IT+0x8e>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800452c:	d104      	bne.n	8004538 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800452e:	6939      	ldr	r1, [r7, #16]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 ffbf 	bl	80054b4 <I2C_ITListenCplt>
 8004536:	e032      	b.n	800459e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b29      	cmp	r3, #41	@ 0x29
 8004542:	d10e      	bne.n	8004562 <I2C_Slave_ISR_IT+0xb8>
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800454a:	d00a      	beq.n	8004562 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2210      	movs	r2, #16
 8004552:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f001 f91a 	bl	800578e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fd17 	bl	8004f8e <I2C_ITSlaveSeqCplt>
 8004560:	e01d      	b.n	800459e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2210      	movs	r2, #16
 8004568:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800456a:	e096      	b.n	800469a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2210      	movs	r2, #16
 8004572:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004578:	f043 0204 	orr.w	r2, r3, #4
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <I2C_Slave_ISR_IT+0xe6>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800458c:	f040 8085 	bne.w	800469a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004594:	4619      	mov	r1, r3
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 ffe2 	bl	8005560 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800459c:	e07d      	b.n	800469a <I2C_Slave_ISR_IT+0x1f0>
 800459e:	e07c      	b.n	800469a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	089b      	lsrs	r3, r3, #2
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d030      	beq.n	800460e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	089b      	lsrs	r3, r3, #2
 80045b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d02a      	beq.n	800460e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d018      	beq.n	80045f4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d14f      	bne.n	800469e <I2C_Slave_ISR_IT+0x1f4>
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004604:	d04b      	beq.n	800469e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fcc1 	bl	8004f8e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800460c:	e047      	b.n	800469e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	08db      	lsrs	r3, r3, #3
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	08db      	lsrs	r3, r3, #3
 800461e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004626:	6939      	ldr	r1, [r7, #16]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fbef 	bl	8004e0c <I2C_ITAddrCplt>
 800462e:	e037      	b.n	80046a0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d031      	beq.n	80046a0 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004644:	2b00      	cmp	r3, #0
 8004646:	d02b      	beq.n	80046a0 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d018      	beq.n	8004684 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	781a      	ldrb	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004682:	e00d      	b.n	80046a0 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800468a:	d002      	beq.n	8004692 <I2C_Slave_ISR_IT+0x1e8>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fc7b 	bl	8004f8e <I2C_ITSlaveSeqCplt>
 8004698:	e002      	b.n	80046a0 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800469e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b088      	sub	sp, #32
 80046b6:	af02      	add	r7, sp, #8
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <I2C_Master_ISR_DMA+0x1a>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e0e1      	b.n	8004890 <I2C_Master_ISR_DMA+0x1de>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d017      	beq.n	8004710 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d011      	beq.n	8004710 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2210      	movs	r2, #16
 80046f2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f8:	f043 0204 	orr.w	r2, r3, #4
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004700:	2120      	movs	r1, #32
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f001 fadc 	bl	8005cc0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f001 f840 	bl	800578e <I2C_Flush_TXDR>
 800470e:	e0ba      	b.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	09db      	lsrs	r3, r3, #7
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d072      	beq.n	8004802 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	099b      	lsrs	r3, r3, #6
 8004720:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004724:	2b00      	cmp	r3, #0
 8004726:	d06c      	beq.n	8004802 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004736:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d04e      	beq.n	80047e0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800474e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	2bff      	cmp	r3, #255	@ 0xff
 8004758:	d906      	bls.n	8004768 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	22ff      	movs	r2, #255	@ 0xff
 800475e:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004760:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e010      	b.n	800478a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004776:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800477a:	d003      	beq.n	8004784 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	e002      	b.n	800478a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004784:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004788:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800478e:	b2da      	uxtb	r2, r3
 8004790:	8a79      	ldrh	r1, [r7, #18]
 8004792:	2300      	movs	r3, #0
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f001 fa5f 	bl	8005c5c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b22      	cmp	r3, #34	@ 0x22
 80047ba:	d108      	bne.n	80047ce <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047ca:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80047cc:	e05b      	b.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047dc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80047de:	e052      	b.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047ee:	d003      	beq.n	80047f8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fb8f 	bl	8004f14 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80047f6:	e046      	b.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80047f8:	2140      	movs	r1, #64	@ 0x40
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 feb0 	bl	8005560 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004800:	e041      	b.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	099b      	lsrs	r3, r3, #6
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d029      	beq.n	8004862 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	099b      	lsrs	r3, r3, #6
 8004812:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004816:	2b00      	cmp	r3, #0
 8004818:	d023      	beq.n	8004862 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d119      	bne.n	8004858 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004832:	d027      	beq.n	8004884 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004838:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800483c:	d108      	bne.n	8004850 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800484c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800484e:	e019      	b.n	8004884 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 fb5f 	bl	8004f14 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004856:	e015      	b.n	8004884 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004858:	2140      	movs	r1, #64	@ 0x40
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fe80 	bl	8005560 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004860:	e010      	b.n	8004884 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00b      	beq.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fbe5 	bl	800504c <I2C_ITMasterCplt>
 8004882:	e000      	b.n	8004886 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004884:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80048a4:	4b92      	ldr	r3, [pc, #584]	@ (8004af0 <I2C_Mem_ISR_DMA+0x258>)
 80048a6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d101      	bne.n	80048b6 <I2C_Mem_ISR_DMA+0x1e>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e118      	b.n	8004ae8 <I2C_Mem_ISR_DMA+0x250>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d017      	beq.n	80048fa <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d011      	beq.n	80048fa <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2210      	movs	r2, #16
 80048dc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e2:	f043 0204 	orr.w	r2, r3, #4
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80048ea:	2120      	movs	r1, #32
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f001 f9e7 	bl	8005cc0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 ff4b 	bl	800578e <I2C_Flush_TXDR>
 80048f8:	e0f1      	b.n	8004ade <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00f      	beq.n	8004926 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800491a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004922:	651a      	str	r2, [r3, #80]	@ 0x50
 8004924:	e0db      	b.n	8004ade <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	09db      	lsrs	r3, r3, #7
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d060      	beq.n	80049f4 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	099b      	lsrs	r3, r3, #6
 8004936:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800493a:	2b00      	cmp	r3, #0
 800493c:	d05a      	beq.n	80049f4 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800493e:	2101      	movs	r1, #1
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f001 fa41 	bl	8005dc8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004946:	2110      	movs	r1, #16
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f001 f9b9 	bl	8005cc0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d048      	beq.n	80049ea <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	2bff      	cmp	r3, #255	@ 0xff
 8004960:	d910      	bls.n	8004984 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	22ff      	movs	r2, #255	@ 0xff
 8004966:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800496c:	b299      	uxth	r1, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004972:	b2da      	uxtb	r2, r3
 8004974:	2300      	movs	r3, #0
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f001 f96d 	bl	8005c5c <I2C_TransferConfig>
 8004982:	e011      	b.n	80049a8 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004992:	b299      	uxth	r1, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004998:	b2da      	uxtb	r2, r3
 800499a:	2300      	movs	r3, #0
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f001 f95a 	bl	8005c5c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b22      	cmp	r3, #34	@ 0x22
 80049c4:	d108      	bne.n	80049d8 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80049d6:	e082      	b.n	8004ade <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049e6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80049e8:	e079      	b.n	8004ade <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80049ea:	2140      	movs	r1, #64	@ 0x40
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fdb7 	bl	8005560 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80049f2:	e074      	b.n	8004ade <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	099b      	lsrs	r3, r3, #6
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d05e      	beq.n	8004abe <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	099b      	lsrs	r3, r3, #6
 8004a04:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d058      	beq.n	8004abe <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f001 f9da 	bl	8005dc8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004a14:	2110      	movs	r1, #16
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f001 f952 	bl	8005cc0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b22      	cmp	r3, #34	@ 0x22
 8004a26:	d101      	bne.n	8004a2c <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8004a28:	4b32      	ldr	r3, [pc, #200]	@ (8004af4 <I2C_Mem_ISR_DMA+0x25c>)
 8004a2a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2bff      	cmp	r3, #255	@ 0xff
 8004a34:	d910      	bls.n	8004a58 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	22ff      	movs	r2, #255	@ 0xff
 8004a3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a40:	b299      	uxth	r1, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f001 f903 	bl	8005c5c <I2C_TransferConfig>
 8004a56:	e011      	b.n	8004a7c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a66:	b299      	uxth	r1, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f001 f8f0 	bl	8005c5c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b22      	cmp	r3, #34	@ 0x22
 8004a98:	d108      	bne.n	8004aac <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aa8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aaa:	e018      	b.n	8004ade <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aba:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004abc:	e00f      	b.n	8004ade <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fab7 	bl	800504c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	80002000 	.word	0x80002000
 8004af4:	80002400 	.word	0x80002400

08004af8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <I2C_Slave_ISR_DMA+0x24>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e0ca      	b.n	8004cb2 <I2C_Slave_ISR_DMA+0x1ba>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 fb4e 	bl	80051e0 <I2C_ITSlaveCplt>
 8004b44:	e0b0      	b.n	8004ca8 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 809a 	beq.w	8004c88 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	091b      	lsrs	r3, r3, #4
 8004b58:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8093 	beq.w	8004c88 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0b9b      	lsrs	r3, r3, #14
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0bdb      	lsrs	r3, r3, #15
 8004b72:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d07f      	beq.n	8004c7a <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00d      	beq.n	8004b9e <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	0bdb      	lsrs	r3, r3, #15
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00d      	beq.n	8004bc2 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0b9b      	lsrs	r3, r3, #14
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d128      	bne.n	8004c1a <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b28      	cmp	r3, #40	@ 0x28
 8004bd2:	d108      	bne.n	8004be6 <I2C_Slave_ISR_DMA+0xee>
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bda:	d104      	bne.n	8004be6 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 fc68 	bl	80054b4 <I2C_ITListenCplt>
 8004be4:	e048      	b.n	8004c78 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b29      	cmp	r3, #41	@ 0x29
 8004bf0:	d10e      	bne.n	8004c10 <I2C_Slave_ISR_DMA+0x118>
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bf8:	d00a      	beq.n	8004c10 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2210      	movs	r2, #16
 8004c00:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fdc3 	bl	800578e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f9c0 	bl	8004f8e <I2C_ITSlaveSeqCplt>
 8004c0e:	e033      	b.n	8004c78 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2210      	movs	r2, #16
 8004c16:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004c18:	e034      	b.n	8004c84 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2210      	movs	r2, #16
 8004c20:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c26:	f043 0204 	orr.w	r2, r3, #4
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c34:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <I2C_Slave_ISR_DMA+0x14c>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c42:	d11f      	bne.n	8004c84 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
 8004c46:	2b21      	cmp	r3, #33	@ 0x21
 8004c48:	d002      	beq.n	8004c50 <I2C_Slave_ISR_DMA+0x158>
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
 8004c4c:	2b29      	cmp	r3, #41	@ 0x29
 8004c4e:	d103      	bne.n	8004c58 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2221      	movs	r2, #33	@ 0x21
 8004c54:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c56:	e008      	b.n	8004c6a <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
 8004c5a:	2b22      	cmp	r3, #34	@ 0x22
 8004c5c:	d002      	beq.n	8004c64 <I2C_Slave_ISR_DMA+0x16c>
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
 8004c60:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c62:	d102      	bne.n	8004c6a <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2222      	movs	r2, #34	@ 0x22
 8004c68:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6e:	4619      	mov	r1, r3
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fc75 	bl	8005560 <I2C_ITError>
      if (treatdmanack == 1U)
 8004c76:	e005      	b.n	8004c84 <I2C_Slave_ISR_DMA+0x18c>
 8004c78:	e004      	b.n	8004c84 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2210      	movs	r2, #16
 8004c80:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c82:	e011      	b.n	8004ca8 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8004c84:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c86:	e00f      	b.n	8004ca8 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	08db      	lsrs	r3, r3, #3
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d009      	beq.n	8004ca8 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	08db      	lsrs	r3, r3, #3
 8004c98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 f8b2 	bl	8004e0c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	4608      	mov	r0, r1
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4603      	mov	r3, r0
 8004ccc:	817b      	strh	r3, [r7, #10]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	813b      	strh	r3, [r7, #8]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	8979      	ldrh	r1, [r7, #10]
 8004cdc:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <I2C_RequestMemoryWrite+0xa4>)
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 ffb9 	bl	8005c5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	69b9      	ldr	r1, [r7, #24]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 fe4a 	bl	8005988 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e02c      	b.n	8004d58 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d105      	bne.n	8004d10 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d04:	893b      	ldrh	r3, [r7, #8]
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d0e:	e015      	b.n	8004d3c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d10:	893b      	ldrh	r3, [r7, #8]
 8004d12:	0a1b      	lsrs	r3, r3, #8
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	69b9      	ldr	r1, [r7, #24]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fe30 	bl	8005988 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e012      	b.n	8004d58 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d32:	893b      	ldrh	r3, [r7, #8]
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2200      	movs	r2, #0
 8004d44:	2180      	movs	r1, #128	@ 0x80
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fdc5 	bl	80058d6 <I2C_WaitOnFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	80002000 	.word	0x80002000

08004d64 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	461a      	mov	r2, r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	817b      	strh	r3, [r7, #10]
 8004d76:	460b      	mov	r3, r1
 8004d78:	813b      	strh	r3, [r7, #8]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	8979      	ldrh	r1, [r7, #10]
 8004d84:	4b20      	ldr	r3, [pc, #128]	@ (8004e08 <I2C_RequestMemoryRead+0xa4>)
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 ff66 	bl	8005c5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	69b9      	ldr	r1, [r7, #24]
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fdf7 	bl	8005988 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e02c      	b.n	8004dfe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004da4:	88fb      	ldrh	r3, [r7, #6]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d105      	bne.n	8004db6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004daa:	893b      	ldrh	r3, [r7, #8]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004db4:	e015      	b.n	8004de2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004db6:	893b      	ldrh	r3, [r7, #8]
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	69b9      	ldr	r1, [r7, #24]
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 fddd 	bl	8005988 <I2C_WaitOnTXISFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e012      	b.n	8004dfe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dd8:	893b      	ldrh	r3, [r7, #8]
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	2200      	movs	r2, #0
 8004dea:	2140      	movs	r1, #64	@ 0x40
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fd72 	bl	80058d6 <I2C_WaitOnFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	80002000 	.word	0x80002000

08004e0c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e22:	2b28      	cmp	r3, #40	@ 0x28
 8004e24:	d16a      	bne.n	8004efc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	0c1b      	lsrs	r3, r3, #16
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	0c1b      	lsrs	r3, r3, #16
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004e44:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e52:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004e60:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d138      	bne.n	8004edc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004e6a:	897b      	ldrh	r3, [r7, #10]
 8004e6c:	09db      	lsrs	r3, r3, #7
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	89bb      	ldrh	r3, [r7, #12]
 8004e72:	4053      	eors	r3, r2
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f003 0306 	and.w	r3, r3, #6
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d11c      	bne.n	8004eb8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004e7e:	897b      	ldrh	r3, [r7, #10]
 8004e80:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d13b      	bne.n	8004f0c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2208      	movs	r2, #8
 8004ea0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004eaa:	89ba      	ldrh	r2, [r7, #12]
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff fac4 	bl	800443e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004eb6:	e029      	b.n	8004f0c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004eb8:	893b      	ldrh	r3, [r7, #8]
 8004eba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ebc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 ff81 	bl	8005dc8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ece:	89ba      	ldrh	r2, [r7, #12]
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff fab2 	bl	800443e <HAL_I2C_AddrCallback>
}
 8004eda:	e017      	b.n	8004f0c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004edc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 ff71 	bl	8005dc8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004eee:	89ba      	ldrh	r2, [r7, #12]
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff faa2 	bl	800443e <HAL_I2C_AddrCallback>
}
 8004efa:	e007      	b.n	8004f0c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2208      	movs	r2, #8
 8004f02:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b21      	cmp	r3, #33	@ 0x21
 8004f2e:	d115      	bne.n	8004f5c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2211      	movs	r2, #17
 8004f3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f44:	2101      	movs	r1, #1
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 ff3e 	bl	8005dc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff fa4a 	bl	80043ee <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f5a:	e014      	b.n	8004f86 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2212      	movs	r2, #18
 8004f68:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004f70:	2102      	movs	r1, #2
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 ff28 	bl	8005dc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff fa3e 	bl	8004402 <HAL_I2C_MasterRxCpltCallback>
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	0b9b      	lsrs	r3, r3, #14
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d008      	beq.n	8004fc4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	e00d      	b.n	8004fe0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	0bdb      	lsrs	r3, r3, #15
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d007      	beq.n	8004fe0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fde:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b29      	cmp	r3, #41	@ 0x29
 8004fea:	d112      	bne.n	8005012 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2228      	movs	r2, #40	@ 0x28
 8004ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2221      	movs	r2, #33	@ 0x21
 8004ff8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fee3 	bl	8005dc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff fa03 	bl	8004416 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005010:	e017      	b.n	8005042 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b2a      	cmp	r3, #42	@ 0x2a
 800501c:	d111      	bne.n	8005042 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2228      	movs	r2, #40	@ 0x28
 8005022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2222      	movs	r2, #34	@ 0x22
 800502a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800502c:	2102      	movs	r1, #2
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 feca 	bl	8005dc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff f9f4 	bl	800442a <HAL_I2C_SlaveRxCpltCallback>
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2220      	movs	r2, #32
 8005060:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b21      	cmp	r3, #33	@ 0x21
 800506c:	d107      	bne.n	800507e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800506e:	2101      	movs	r1, #1
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fea9 	bl	8005dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2211      	movs	r2, #17
 800507a:	631a      	str	r2, [r3, #48]	@ 0x30
 800507c:	e00c      	b.n	8005098 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b22      	cmp	r3, #34	@ 0x22
 8005088:	d106      	bne.n	8005098 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800508a:	2102      	movs	r1, #2
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fe9b 	bl	8005dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2212      	movs	r2, #18
 8005096:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b4d      	ldr	r3, [pc, #308]	@ (80051d8 <I2C_ITMasterCplt+0x18c>)
 80050a4:	400b      	ands	r3, r1
 80050a6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a4a      	ldr	r2, [pc, #296]	@ (80051dc <I2C_ITMasterCplt+0x190>)
 80050b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	091b      	lsrs	r3, r3, #4
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d009      	beq.n	80050d4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2210      	movs	r2, #16
 80050c6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050cc:	f043 0204 	orr.w	r2, r3, #4
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b60      	cmp	r3, #96	@ 0x60
 80050de:	d10b      	bne.n	80050f8 <I2C_ITMasterCplt+0xac>
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	089b      	lsrs	r3, r3, #2
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80050f6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fb48 	bl	800578e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005102:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b60      	cmp	r3, #96	@ 0x60
 800510e:	d002      	beq.n	8005116 <I2C_ITMasterCplt+0xca>
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d006      	beq.n	8005124 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fa1f 	bl	8005560 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005122:	e054      	b.n	80051ce <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b21      	cmp	r3, #33	@ 0x21
 800512e:	d124      	bne.n	800517a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b40      	cmp	r3, #64	@ 0x40
 8005148:	d10b      	bne.n	8005162 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff f987 	bl	800446e <HAL_I2C_MemTxCpltCallback>
}
 8005160:	e035      	b.n	80051ce <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff f93b 	bl	80043ee <HAL_I2C_MasterTxCpltCallback>
}
 8005178:	e029      	b.n	80051ce <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b22      	cmp	r3, #34	@ 0x22
 8005184:	d123      	bne.n	80051ce <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b40      	cmp	r3, #64	@ 0x40
 800519e:	d10b      	bne.n	80051b8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fd f8d9 	bl	8002368 <HAL_I2C_MemRxCpltCallback>
}
 80051b6:	e00a      	b.n	80051ce <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff f91a 	bl	8004402 <HAL_I2C_MasterRxCpltCallback>
}
 80051ce:	bf00      	nop
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	fe00e800 	.word	0xfe00e800
 80051dc:	ffff0000 	.word	0xffff0000

080051e0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005202:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2220      	movs	r2, #32
 800520a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800520c:	7afb      	ldrb	r3, [r7, #11]
 800520e:	2b21      	cmp	r3, #33	@ 0x21
 8005210:	d002      	beq.n	8005218 <I2C_ITSlaveCplt+0x38>
 8005212:	7afb      	ldrb	r3, [r7, #11]
 8005214:	2b29      	cmp	r3, #41	@ 0x29
 8005216:	d108      	bne.n	800522a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005218:	f248 0101 	movw	r1, #32769	@ 0x8001
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fdd3 	bl	8005dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2221      	movs	r2, #33	@ 0x21
 8005226:	631a      	str	r2, [r3, #48]	@ 0x30
 8005228:	e019      	b.n	800525e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800522a:	7afb      	ldrb	r3, [r7, #11]
 800522c:	2b22      	cmp	r3, #34	@ 0x22
 800522e:	d002      	beq.n	8005236 <I2C_ITSlaveCplt+0x56>
 8005230:	7afb      	ldrb	r3, [r7, #11]
 8005232:	2b2a      	cmp	r3, #42	@ 0x2a
 8005234:	d108      	bne.n	8005248 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005236:	f248 0102 	movw	r1, #32770	@ 0x8002
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fdc4 	bl	8005dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2222      	movs	r2, #34	@ 0x22
 8005244:	631a      	str	r2, [r3, #48]	@ 0x30
 8005246:	e00a      	b.n	800525e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005248:	7afb      	ldrb	r3, [r7, #11]
 800524a:	2b28      	cmp	r3, #40	@ 0x28
 800524c:	d107      	bne.n	800525e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800524e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fdb8 	bl	8005dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800526c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b8c      	ldr	r3, [pc, #560]	@ (80054ac <I2C_ITSlaveCplt+0x2cc>)
 800527a:	400b      	ands	r3, r1
 800527c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa85 	bl	800578e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	0b9b      	lsrs	r3, r3, #14
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d013      	beq.n	80052b8 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800529e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d020      	beq.n	80052ea <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052b6:	e018      	b.n	80052ea <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	0bdb      	lsrs	r3, r3, #15
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d012      	beq.n	80052ea <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d006      	beq.n	80052ea <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	089b      	lsrs	r3, r3, #2
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d020      	beq.n	8005338 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f023 0304 	bic.w	r3, r3, #4
 80052fc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005346:	f043 0204 	orr.w	r2, r3, #4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	091b      	lsrs	r3, r3, #4
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d04a      	beq.n	80053f0 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005362:	2b00      	cmp	r3, #0
 8005364:	d044      	beq.n	80053f0 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d128      	bne.n	80053c2 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b28      	cmp	r3, #40	@ 0x28
 800537a:	d108      	bne.n	800538e <I2C_ITSlaveCplt+0x1ae>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005382:	d104      	bne.n	800538e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005384:	6979      	ldr	r1, [r7, #20]
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f894 	bl	80054b4 <I2C_ITListenCplt>
 800538c:	e030      	b.n	80053f0 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b29      	cmp	r3, #41	@ 0x29
 8005398:	d10e      	bne.n	80053b8 <I2C_ITSlaveCplt+0x1d8>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053a0:	d00a      	beq.n	80053b8 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2210      	movs	r2, #16
 80053a8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f9ef 	bl	800578e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff fdec 	bl	8004f8e <I2C_ITSlaveSeqCplt>
 80053b6:	e01b      	b.n	80053f0 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2210      	movs	r2, #16
 80053be:	61da      	str	r2, [r3, #28]
 80053c0:	e016      	b.n	80053f0 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2210      	movs	r2, #16
 80053c8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ce:	f043 0204 	orr.w	r2, r3, #4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <I2C_ITSlaveCplt+0x204>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053e2:	d105      	bne.n	80053f0 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e8:	4619      	mov	r1, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f8b8 	bl	8005560 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005402:	2b00      	cmp	r3, #0
 8005404:	d010      	beq.n	8005428 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f8a7 	bl	8005560 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b28      	cmp	r3, #40	@ 0x28
 800541c:	d141      	bne.n	80054a2 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800541e:	6979      	ldr	r1, [r7, #20]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f847 	bl	80054b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005426:	e03c      	b.n	80054a2 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005430:	d014      	beq.n	800545c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff fdab 	bl	8004f8e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a1d      	ldr	r2, [pc, #116]	@ (80054b0 <I2C_ITSlaveCplt+0x2d0>)
 800543c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff f800 	bl	800445a <HAL_I2C_ListenCpltCallback>
}
 800545a:	e022      	b.n	80054a2 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b22      	cmp	r3, #34	@ 0x22
 8005466:	d10e      	bne.n	8005486 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7fe ffd3 	bl	800442a <HAL_I2C_SlaveRxCpltCallback>
}
 8005484:	e00d      	b.n	80054a2 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7fe ffba 	bl	8004416 <HAL_I2C_SlaveTxCpltCallback>
}
 80054a2:	bf00      	nop
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	fe00e800 	.word	0xfe00e800
 80054b0:	ffff0000 	.word	0xffff0000

080054b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a26      	ldr	r2, [pc, #152]	@ (800555c <I2C_ITListenCplt+0xa8>)
 80054c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	089b      	lsrs	r3, r3, #2
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d022      	beq.n	8005532 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005508:	2b00      	cmp	r3, #0
 800550a:	d012      	beq.n	8005532 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800552a:	f043 0204 	orr.w	r2, r3, #4
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005532:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fc46 	bl	8005dc8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2210      	movs	r2, #16
 8005542:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7fe ff84 	bl	800445a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005552:	bf00      	nop
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	ffff0000 	.word	0xffff0000

08005560 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005570:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a6d      	ldr	r2, [pc, #436]	@ (8005734 <I2C_ITError+0x1d4>)
 800557e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	431a      	orrs	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	2b28      	cmp	r3, #40	@ 0x28
 8005596:	d005      	beq.n	80055a4 <I2C_ITError+0x44>
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b29      	cmp	r3, #41	@ 0x29
 800559c:	d002      	beq.n	80055a4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80055a2:	d10b      	bne.n	80055bc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80055a4:	2103      	movs	r1, #3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fc0e 	bl	8005dc8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2228      	movs	r2, #40	@ 0x28
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a60      	ldr	r2, [pc, #384]	@ (8005738 <I2C_ITError+0x1d8>)
 80055b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80055ba:	e030      	b.n	800561e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80055bc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fc01 	bl	8005dc8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f8e1 	bl	800578e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b60      	cmp	r3, #96	@ 0x60
 80055d6:	d01f      	beq.n	8005618 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d114      	bne.n	8005618 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	d109      	bne.n	8005610 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2210      	movs	r2, #16
 8005602:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005608:	f043 0204 	orr.w	r2, r3, #4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2220      	movs	r2, #32
 8005616:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005622:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005628:	2b00      	cmp	r3, #0
 800562a:	d039      	beq.n	80056a0 <I2C_ITError+0x140>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b11      	cmp	r3, #17
 8005630:	d002      	beq.n	8005638 <I2C_ITError+0xd8>
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b21      	cmp	r3, #33	@ 0x21
 8005636:	d133      	bne.n	80056a0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005642:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005646:	d107      	bne.n	8005658 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005656:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe f82d 	bl	80036bc <HAL_DMA_GetState>
 8005662:	4603      	mov	r3, r0
 8005664:	2b01      	cmp	r3, #1
 8005666:	d017      	beq.n	8005698 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566c:	4a33      	ldr	r2, [pc, #204]	@ (800573c <I2C_ITError+0x1dc>)
 800566e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	4618      	mov	r0, r3
 800567e:	f7fd ff07 	bl	8003490 <HAL_DMA_Abort_IT>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d04d      	beq.n	8005724 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005692:	4610      	mov	r0, r2
 8005694:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005696:	e045      	b.n	8005724 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f851 	bl	8005740 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800569e:	e041      	b.n	8005724 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d039      	beq.n	800571c <I2C_ITError+0x1bc>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b12      	cmp	r3, #18
 80056ac:	d002      	beq.n	80056b4 <I2C_ITError+0x154>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b22      	cmp	r3, #34	@ 0x22
 80056b2:	d133      	bne.n	800571c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056c2:	d107      	bne.n	80056d4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fd ffef 	bl	80036bc <HAL_DMA_GetState>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d017      	beq.n	8005714 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e8:	4a14      	ldr	r2, [pc, #80]	@ (800573c <I2C_ITError+0x1dc>)
 80056ea:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fd fec9 	bl	8003490 <HAL_DMA_Abort_IT>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d011      	beq.n	8005728 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800570e:	4610      	mov	r0, r2
 8005710:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005712:	e009      	b.n	8005728 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f813 	bl	8005740 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800571a:	e005      	b.n	8005728 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f80f 	bl	8005740 <I2C_TreatErrorCallback>
  }
}
 8005722:	e002      	b.n	800572a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005724:	bf00      	nop
 8005726:	e000      	b.n	800572a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005728:	bf00      	nop
}
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	ffff0000 	.word	0xffff0000
 8005738:	080044ab 	.word	0x080044ab
 800573c:	0800589b 	.word	0x0800589b

08005740 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b60      	cmp	r3, #96	@ 0x60
 8005752:	d10e      	bne.n	8005772 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fe fe93 	bl	8004496 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005770:	e009      	b.n	8005786 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7fe fe7e 	bl	8004482 <HAL_I2C_ErrorCallback>
}
 8005786:	bf00      	nop
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d103      	bne.n	80057ac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2200      	movs	r2, #0
 80057aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d007      	beq.n	80057ca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699a      	ldr	r2, [r3, #24]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 0201 	orr.w	r2, r2, #1
 80057c8:	619a      	str	r2, [r3, #24]
  }
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057f2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d104      	bne.n	8005808 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80057fe:	2120      	movs	r1, #32
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 fa5d 	bl	8005cc0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005806:	e02d      	b.n	8005864 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005810:	441a      	add	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581a:	b29b      	uxth	r3, r3
 800581c:	2bff      	cmp	r3, #255	@ 0xff
 800581e:	d903      	bls.n	8005828 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	22ff      	movs	r2, #255	@ 0xff
 8005824:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005826:	e004      	b.n	8005832 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3324      	adds	r3, #36	@ 0x24
 800583c:	4619      	mov	r1, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005842:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005848:	f7fd fd4e 	bl	80032e8 <HAL_DMA_Start_IT>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d004      	beq.n	800585c <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005852:	2110      	movs	r1, #16
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7ff fe83 	bl	8005560 <I2C_ITError>
}
 800585a:	e003      	b.n	8005864 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800585c:	2140      	movs	r1, #64	@ 0x40
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fa2e 	bl	8005cc0 <I2C_Enable_IRQ>
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005878:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005888:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800588a:	2110      	movs	r1, #16
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f7ff fe67 	bl	8005560 <I2C_ITError>
}
 8005892:	bf00      	nop
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b4:	2200      	movs	r2, #0
 80058b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c4:	2200      	movs	r2, #0
 80058c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f7ff ff39 	bl	8005740 <I2C_TreatErrorCallback>
}
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	603b      	str	r3, [r7, #0]
 80058e2:	4613      	mov	r3, r2
 80058e4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058e6:	e03b      	b.n	8005960 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f8d5 	bl	8005a9c <I2C_IsErrorOccurred>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e041      	b.n	8005980 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005902:	d02d      	beq.n	8005960 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005904:	f7fd fb3a 	bl	8002f7c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d302      	bcc.n	800591a <I2C_WaitOnFlagUntilTimeout+0x44>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d122      	bne.n	8005960 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4013      	ands	r3, r2
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	429a      	cmp	r2, r3
 8005928:	bf0c      	ite	eq
 800592a:	2301      	moveq	r3, #1
 800592c:	2300      	movne	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	429a      	cmp	r2, r3
 8005936:	d113      	bne.n	8005960 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e00f      	b.n	8005980 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4013      	ands	r3, r2
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	429a      	cmp	r2, r3
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	429a      	cmp	r2, r3
 800597c:	d0b4      	beq.n	80058e8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005994:	e033      	b.n	80059fe <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	68b9      	ldr	r1, [r7, #8]
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f87e 	bl	8005a9c <I2C_IsErrorOccurred>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e031      	b.n	8005a0e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059b0:	d025      	beq.n	80059fe <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fd fae3 	bl	8002f7c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d11a      	bne.n	80059fe <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d013      	beq.n	80059fe <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059da:	f043 0220 	orr.w	r2, r3, #32
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e007      	b.n	8005a0e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d1c4      	bne.n	8005996 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b084      	sub	sp, #16
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a22:	e02f      	b.n	8005a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f837 	bl	8005a9c <I2C_IsErrorOccurred>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e02d      	b.n	8005a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a38:	f7fd faa0 	bl	8002f7c <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d302      	bcc.n	8005a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d11a      	bne.n	8005a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	d013      	beq.n	8005a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a60:	f043 0220 	orr.w	r2, r3, #32
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e007      	b.n	8005a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	d1c8      	bne.n	8005a24 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	@ 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f003 0310 	and.w	r3, r3, #16
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d068      	beq.n	8005b9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2210      	movs	r2, #16
 8005ace:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ad0:	e049      	b.n	8005b66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ad8:	d045      	beq.n	8005b66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ada:	f7fd fa4f 	bl	8002f7c <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d302      	bcc.n	8005af0 <I2C_IsErrorOccurred+0x54>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d13a      	bne.n	8005b66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005afa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b12:	d121      	bne.n	8005b58 <I2C_IsErrorOccurred+0xbc>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b1a:	d01d      	beq.n	8005b58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b1c:	7cfb      	ldrb	r3, [r7, #19]
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d01a      	beq.n	8005b58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b32:	f7fd fa23 	bl	8002f7c <HAL_GetTick>
 8005b36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b38:	e00e      	b.n	8005b58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b3a:	f7fd fa1f 	bl	8002f7c <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b19      	cmp	r3, #25
 8005b46:	d907      	bls.n	8005b58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f043 0320 	orr.w	r3, r3, #32
 8005b4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005b56:	e006      	b.n	8005b66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d1e9      	bne.n	8005b3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d003      	beq.n	8005b7c <I2C_IsErrorOccurred+0xe0>
 8005b74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0aa      	beq.n	8005ad2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	f043 0304 	orr.w	r3, r3, #4
 8005b92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00b      	beq.n	8005bc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00b      	beq.n	8005be6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	f043 0308 	orr.w	r3, r3, #8
 8005bd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00b      	beq.n	8005c08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	f043 0302 	orr.w	r3, r3, #2
 8005bf6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01c      	beq.n	8005c4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff fdbc 	bl	800578e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6859      	ldr	r1, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4b0d      	ldr	r3, [pc, #52]	@ (8005c58 <I2C_IsErrorOccurred+0x1bc>)
 8005c22:	400b      	ands	r3, r1
 8005c24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3728      	adds	r7, #40	@ 0x28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	fe00e800 	.word	0xfe00e800

08005c5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	607b      	str	r3, [r7, #4]
 8005c66:	460b      	mov	r3, r1
 8005c68:	817b      	strh	r3, [r7, #10]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c6e:	897b      	ldrh	r3, [r7, #10]
 8005c70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c74:	7a7b      	ldrb	r3, [r7, #9]
 8005c76:	041b      	lsls	r3, r3, #16
 8005c78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	0d5b      	lsrs	r3, r3, #21
 8005c96:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005c9a:	4b08      	ldr	r3, [pc, #32]	@ (8005cbc <I2C_TransferConfig+0x60>)
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	ea02 0103 	and.w	r1, r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	03ff63ff 	.word	0x03ff63ff

08005cc0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd4:	4a39      	ldr	r2, [pc, #228]	@ (8005dbc <I2C_Enable_IRQ+0xfc>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d032      	beq.n	8005d40 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005cde:	4a38      	ldr	r2, [pc, #224]	@ (8005dc0 <I2C_Enable_IRQ+0x100>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d02d      	beq.n	8005d40 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005ce8:	4a36      	ldr	r2, [pc, #216]	@ (8005dc4 <I2C_Enable_IRQ+0x104>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d028      	beq.n	8005d40 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005cee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da03      	bge.n	8005cfe <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005cfc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005cfe:	887b      	ldrh	r3, [r7, #2]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005d0e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005d10:	887b      	ldrh	r3, [r7, #2]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005d20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005d22:	887b      	ldrh	r3, [r7, #2]
 8005d24:	2b10      	cmp	r3, #16
 8005d26:	d103      	bne.n	8005d30 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005d2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005d30:	887b      	ldrh	r3, [r7, #2]
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d133      	bne.n	8005d9e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f043 0320 	orr.w	r3, r3, #32
 8005d3c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005d3e:	e02e      	b.n	8005d9e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005d40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	da03      	bge.n	8005d50 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005d4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005d50:	887b      	ldrh	r3, [r7, #2]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005d60:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005d62:	887b      	ldrh	r3, [r7, #2]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005d72:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005d74:	887b      	ldrh	r3, [r7, #2]
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d103      	bne.n	8005d82 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005d80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005d82:	887b      	ldrh	r3, [r7, #2]
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	d103      	bne.n	8005d90 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005d8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005d90:	887b      	ldrh	r3, [r7, #2]
 8005d92:	2b40      	cmp	r3, #64	@ 0x40
 8005d94:	d103      	bne.n	8005d9e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d9c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	601a      	str	r2, [r3, #0]
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	080046b3 	.word	0x080046b3
 8005dc0:	08004af9 	.word	0x08004af9
 8005dc4:	08004899 	.word	0x08004899

08005dc8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005dd8:	887b      	ldrh	r3, [r7, #2]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00f      	beq.n	8005e02 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005de8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005df6:	2b28      	cmp	r3, #40	@ 0x28
 8005df8:	d003      	beq.n	8005e02 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005e00:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005e02:	887b      	ldrh	r3, [r7, #2]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00f      	beq.n	8005e2c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005e12:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005e20:	2b28      	cmp	r3, #40	@ 0x28
 8005e22:	d003      	beq.n	8005e2c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005e2a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	da03      	bge.n	8005e3c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005e3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005e3c:	887b      	ldrh	r3, [r7, #2]
 8005e3e:	2b10      	cmp	r3, #16
 8005e40:	d103      	bne.n	8005e4a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005e48:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005e4a:	887b      	ldrh	r3, [r7, #2]
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d103      	bne.n	8005e58 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f043 0320 	orr.w	r3, r3, #32
 8005e56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005e58:	887b      	ldrh	r3, [r7, #2]
 8005e5a:	2b40      	cmp	r3, #64	@ 0x40
 8005e5c:	d103      	bne.n	8005e66 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e64:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6819      	ldr	r1, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	43da      	mvns	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	400a      	ands	r2, r1
 8005e76:	601a      	str	r2, [r3, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b20      	cmp	r3, #32
 8005e98:	d138      	bne.n	8005f0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e032      	b.n	8005f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2224      	movs	r2, #36	@ 0x24
 8005eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0201 	bic.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ed6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6819      	ldr	r1, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e000      	b.n	8005f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f0c:	2302      	movs	r3, #2
  }
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d139      	bne.n	8005fa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e033      	b.n	8005fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2224      	movs	r2, #36	@ 0x24
 8005f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0201 	bic.w	r2, r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e000      	b.n	8005fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
  }
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e041      	b.n	8006048 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8005fcc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f245 5255 	movw	r2, #21845	@ 0x5555
 8005fd6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6852      	ldr	r2, [r2, #4]
 8005fe0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6892      	ldr	r2, [r2, #8]
 8005fea:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005fec:	f7fc ffc6 	bl	8002f7c <HAL_GetTick>
 8005ff0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005ff2:	e00f      	b.n	8006014 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005ff4:	f7fc ffc2 	bl	8002f7c <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b31      	cmp	r3, #49	@ 0x31
 8006000:	d908      	bls.n	8006014 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e019      	b.n	8006048 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e8      	bne.n	8005ff4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	429a      	cmp	r2, r3
 800602e:	d005      	beq.n	800603c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	68d2      	ldr	r2, [r2, #12]
 8006038:	611a      	str	r2, [r3, #16]
 800603a:	e004      	b.n	8006046 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006044:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006060:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d141      	bne.n	8006102 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800607e:	4b4b      	ldr	r3, [pc, #300]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800608a:	d131      	bne.n	80060f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800608c:	4b47      	ldr	r3, [pc, #284]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800608e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006092:	4a46      	ldr	r2, [pc, #280]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006098:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800609c:	4b43      	ldr	r3, [pc, #268]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060a4:	4a41      	ldr	r2, [pc, #260]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060ac:	4b40      	ldr	r3, [pc, #256]	@ (80061b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2232      	movs	r2, #50	@ 0x32
 80060b2:	fb02 f303 	mul.w	r3, r2, r3
 80060b6:	4a3f      	ldr	r2, [pc, #252]	@ (80061b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80060b8:	fba2 2303 	umull	r2, r3, r2, r3
 80060bc:	0c9b      	lsrs	r3, r3, #18
 80060be:	3301      	adds	r3, #1
 80060c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060c2:	e002      	b.n	80060ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060ca:	4b38      	ldr	r3, [pc, #224]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060d6:	d102      	bne.n	80060de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f2      	bne.n	80060c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060de:	4b33      	ldr	r3, [pc, #204]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ea:	d158      	bne.n	800619e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e057      	b.n	80061a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060f0:	4b2e      	ldr	r3, [pc, #184]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060f6:	4a2d      	ldr	r2, [pc, #180]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006100:	e04d      	b.n	800619e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006108:	d141      	bne.n	800618e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800610a:	4b28      	ldr	r3, [pc, #160]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006116:	d131      	bne.n	800617c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006118:	4b24      	ldr	r3, [pc, #144]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800611a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800611e:	4a23      	ldr	r2, [pc, #140]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006124:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006128:	4b20      	ldr	r3, [pc, #128]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006130:	4a1e      	ldr	r2, [pc, #120]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006132:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006136:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006138:	4b1d      	ldr	r3, [pc, #116]	@ (80061b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2232      	movs	r2, #50	@ 0x32
 800613e:	fb02 f303 	mul.w	r3, r2, r3
 8006142:	4a1c      	ldr	r2, [pc, #112]	@ (80061b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006144:	fba2 2303 	umull	r2, r3, r2, r3
 8006148:	0c9b      	lsrs	r3, r3, #18
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800614e:	e002      	b.n	8006156 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3b01      	subs	r3, #1
 8006154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006156:	4b15      	ldr	r3, [pc, #84]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800615e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006162:	d102      	bne.n	800616a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f2      	bne.n	8006150 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800616a:	4b10      	ldr	r3, [pc, #64]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006176:	d112      	bne.n	800619e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e011      	b.n	80061a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800617c:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800617e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006182:	4a0a      	ldr	r2, [pc, #40]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006188:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800618c:	e007      	b.n	800619e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800618e:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006196:	4a05      	ldr	r2, [pc, #20]	@ (80061ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006198:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800619c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	40007000 	.word	0x40007000
 80061b0:	20000038 	.word	0x20000038
 80061b4:	431bde83 	.word	0x431bde83

080061b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80061bc:	4b05      	ldr	r3, [pc, #20]	@ (80061d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	4a04      	ldr	r2, [pc, #16]	@ (80061d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80061c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061c6:	6093      	str	r3, [r2, #8]
}
 80061c8:	bf00      	nop
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40007000 	.word	0x40007000

080061d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e2fe      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d075      	beq.n	80062e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061f6:	4b97      	ldr	r3, [pc, #604]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006200:	4b94      	ldr	r3, [pc, #592]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f003 0303 	and.w	r3, r3, #3
 8006208:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b0c      	cmp	r3, #12
 800620e:	d102      	bne.n	8006216 <HAL_RCC_OscConfig+0x3e>
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	2b03      	cmp	r3, #3
 8006214:	d002      	beq.n	800621c <HAL_RCC_OscConfig+0x44>
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	2b08      	cmp	r3, #8
 800621a:	d10b      	bne.n	8006234 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800621c:	4b8d      	ldr	r3, [pc, #564]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d05b      	beq.n	80062e0 <HAL_RCC_OscConfig+0x108>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d157      	bne.n	80062e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e2d9      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800623c:	d106      	bne.n	800624c <HAL_RCC_OscConfig+0x74>
 800623e:	4b85      	ldr	r3, [pc, #532]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a84      	ldr	r2, [pc, #528]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e01d      	b.n	8006288 <HAL_RCC_OscConfig+0xb0>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006254:	d10c      	bne.n	8006270 <HAL_RCC_OscConfig+0x98>
 8006256:	4b7f      	ldr	r3, [pc, #508]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a7e      	ldr	r2, [pc, #504]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 800625c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	4b7c      	ldr	r3, [pc, #496]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a7b      	ldr	r2, [pc, #492]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e00b      	b.n	8006288 <HAL_RCC_OscConfig+0xb0>
 8006270:	4b78      	ldr	r3, [pc, #480]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a77      	ldr	r2, [pc, #476]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	4b75      	ldr	r3, [pc, #468]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a74      	ldr	r2, [pc, #464]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d013      	beq.n	80062b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fc fe74 	bl	8002f7c <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006298:	f7fc fe70 	bl	8002f7c <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b64      	cmp	r3, #100	@ 0x64
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e29e      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062aa:	4b6a      	ldr	r3, [pc, #424]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0f0      	beq.n	8006298 <HAL_RCC_OscConfig+0xc0>
 80062b6:	e014      	b.n	80062e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b8:	f7fc fe60 	bl	8002f7c <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c0:	f7fc fe5c 	bl	8002f7c <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b64      	cmp	r3, #100	@ 0x64
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e28a      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062d2:	4b60      	ldr	r3, [pc, #384]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0xe8>
 80062de:	e000      	b.n	80062e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d075      	beq.n	80063da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ee:	4b59      	ldr	r3, [pc, #356]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 030c 	and.w	r3, r3, #12
 80062f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062f8:	4b56      	ldr	r3, [pc, #344]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2b0c      	cmp	r3, #12
 8006306:	d102      	bne.n	800630e <HAL_RCC_OscConfig+0x136>
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d002      	beq.n	8006314 <HAL_RCC_OscConfig+0x13c>
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2b04      	cmp	r3, #4
 8006312:	d11f      	bne.n	8006354 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006314:	4b4f      	ldr	r3, [pc, #316]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_RCC_OscConfig+0x154>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e25d      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632c:	4b49      	ldr	r3, [pc, #292]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	061b      	lsls	r3, r3, #24
 800633a:	4946      	ldr	r1, [pc, #280]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 800633c:	4313      	orrs	r3, r2
 800633e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006340:	4b45      	ldr	r3, [pc, #276]	@ (8006458 <HAL_RCC_OscConfig+0x280>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f7fc f9e5 	bl	8002714 <HAL_InitTick>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d043      	beq.n	80063d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e249      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d023      	beq.n	80063a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800635c:	4b3d      	ldr	r3, [pc, #244]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a3c      	ldr	r2, [pc, #240]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006368:	f7fc fe08 	bl	8002f7c <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006370:	f7fc fe04 	bl	8002f7c <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e232      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006382:	4b34      	ldr	r3, [pc, #208]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0f0      	beq.n	8006370 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800638e:	4b31      	ldr	r3, [pc, #196]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	061b      	lsls	r3, r3, #24
 800639c:	492d      	ldr	r1, [pc, #180]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	604b      	str	r3, [r1, #4]
 80063a2:	e01a      	b.n	80063da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 80063aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b0:	f7fc fde4 	bl	8002f7c <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063b8:	f7fc fde0 	bl	8002f7c <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e20e      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063ca:	4b22      	ldr	r3, [pc, #136]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x1e0>
 80063d6:	e000      	b.n	80063da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d041      	beq.n	800646a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d01c      	beq.n	8006428 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ee:	4b19      	ldr	r3, [pc, #100]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 80063f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063f4:	4a17      	ldr	r2, [pc, #92]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fe:	f7fc fdbd 	bl	8002f7c <HAL_GetTick>
 8006402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006404:	e008      	b.n	8006418 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006406:	f7fc fdb9 	bl	8002f7c <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d901      	bls.n	8006418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e1e7      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006418:	4b0e      	ldr	r3, [pc, #56]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 800641a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0ef      	beq.n	8006406 <HAL_RCC_OscConfig+0x22e>
 8006426:	e020      	b.n	800646a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006428:	4b0a      	ldr	r3, [pc, #40]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 800642a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800642e:	4a09      	ldr	r2, [pc, #36]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006438:	f7fc fda0 	bl	8002f7c <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800643e:	e00d      	b.n	800645c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006440:	f7fc fd9c 	bl	8002f7c <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d906      	bls.n	800645c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e1ca      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
 8006452:	bf00      	nop
 8006454:	40021000 	.word	0x40021000
 8006458:	2000003c 	.word	0x2000003c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800645c:	4b8c      	ldr	r3, [pc, #560]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 800645e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1ea      	bne.n	8006440 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 80a6 	beq.w	80065c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006478:	2300      	movs	r3, #0
 800647a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800647c:	4b84      	ldr	r3, [pc, #528]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 800647e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <HAL_RCC_OscConfig+0x2b4>
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <HAL_RCC_OscConfig+0x2b6>
 800648c:	2300      	movs	r3, #0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00d      	beq.n	80064ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006492:	4b7f      	ldr	r3, [pc, #508]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006496:	4a7e      	ldr	r2, [pc, #504]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800649c:	6593      	str	r3, [r2, #88]	@ 0x58
 800649e:	4b7c      	ldr	r3, [pc, #496]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 80064a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064aa:	2301      	movs	r3, #1
 80064ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064ae:	4b79      	ldr	r3, [pc, #484]	@ (8006694 <HAL_RCC_OscConfig+0x4bc>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d118      	bne.n	80064ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064ba:	4b76      	ldr	r3, [pc, #472]	@ (8006694 <HAL_RCC_OscConfig+0x4bc>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a75      	ldr	r2, [pc, #468]	@ (8006694 <HAL_RCC_OscConfig+0x4bc>)
 80064c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064c6:	f7fc fd59 	bl	8002f7c <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ce:	f7fc fd55 	bl	8002f7c <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e183      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064e0:	4b6c      	ldr	r3, [pc, #432]	@ (8006694 <HAL_RCC_OscConfig+0x4bc>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0f0      	beq.n	80064ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d108      	bne.n	8006506 <HAL_RCC_OscConfig+0x32e>
 80064f4:	4b66      	ldr	r3, [pc, #408]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 80064f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fa:	4a65      	ldr	r2, [pc, #404]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 80064fc:	f043 0301 	orr.w	r3, r3, #1
 8006500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006504:	e024      	b.n	8006550 <HAL_RCC_OscConfig+0x378>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2b05      	cmp	r3, #5
 800650c:	d110      	bne.n	8006530 <HAL_RCC_OscConfig+0x358>
 800650e:	4b60      	ldr	r3, [pc, #384]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006514:	4a5e      	ldr	r2, [pc, #376]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006516:	f043 0304 	orr.w	r3, r3, #4
 800651a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800651e:	4b5c      	ldr	r3, [pc, #368]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006524:	4a5a      	ldr	r2, [pc, #360]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006526:	f043 0301 	orr.w	r3, r3, #1
 800652a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800652e:	e00f      	b.n	8006550 <HAL_RCC_OscConfig+0x378>
 8006530:	4b57      	ldr	r3, [pc, #348]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006536:	4a56      	ldr	r2, [pc, #344]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006540:	4b53      	ldr	r3, [pc, #332]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006546:	4a52      	ldr	r2, [pc, #328]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006548:	f023 0304 	bic.w	r3, r3, #4
 800654c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d016      	beq.n	8006586 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006558:	f7fc fd10 	bl	8002f7c <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800655e:	e00a      	b.n	8006576 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006560:	f7fc fd0c 	bl	8002f7c <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e138      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006576:	4b46      	ldr	r3, [pc, #280]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0ed      	beq.n	8006560 <HAL_RCC_OscConfig+0x388>
 8006584:	e015      	b.n	80065b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006586:	f7fc fcf9 	bl	8002f7c <HAL_GetTick>
 800658a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800658c:	e00a      	b.n	80065a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800658e:	f7fc fcf5 	bl	8002f7c <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800659c:	4293      	cmp	r3, r2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e121      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065a4:	4b3a      	ldr	r3, [pc, #232]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 80065a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1ed      	bne.n	800658e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065b2:	7ffb      	ldrb	r3, [r7, #31]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d105      	bne.n	80065c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065b8:	4b35      	ldr	r3, [pc, #212]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 80065ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065bc:	4a34      	ldr	r2, [pc, #208]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 80065be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d03c      	beq.n	800664a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01c      	beq.n	8006612 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 80065da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065de:	4a2c      	ldr	r2, [pc, #176]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e8:	f7fc fcc8 	bl	8002f7c <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065f0:	f7fc fcc4 	bl	8002f7c <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e0f2      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006602:	4b23      	ldr	r3, [pc, #140]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006604:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0ef      	beq.n	80065f0 <HAL_RCC_OscConfig+0x418>
 8006610:	e01b      	b.n	800664a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006612:	4b1f      	ldr	r3, [pc, #124]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006614:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006618:	4a1d      	ldr	r2, [pc, #116]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006622:	f7fc fcab 	bl	8002f7c <HAL_GetTick>
 8006626:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006628:	e008      	b.n	800663c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800662a:	f7fc fca7 	bl	8002f7c <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e0d5      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800663c:	4b14      	ldr	r3, [pc, #80]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 800663e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1ef      	bne.n	800662a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 80c9 	beq.w	80067e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006654:	4b0e      	ldr	r3, [pc, #56]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 030c 	and.w	r3, r3, #12
 800665c:	2b0c      	cmp	r3, #12
 800665e:	f000 8083 	beq.w	8006768 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d15e      	bne.n	8006728 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666a:	4b09      	ldr	r3, [pc, #36]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a08      	ldr	r2, [pc, #32]	@ (8006690 <HAL_RCC_OscConfig+0x4b8>)
 8006670:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006676:	f7fc fc81 	bl	8002f7c <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800667c:	e00c      	b.n	8006698 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800667e:	f7fc fc7d 	bl	8002f7c <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d905      	bls.n	8006698 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e0ab      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
 8006690:	40021000 	.word	0x40021000
 8006694:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006698:	4b55      	ldr	r3, [pc, #340]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1ec      	bne.n	800667e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066a4:	4b52      	ldr	r3, [pc, #328]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	4b52      	ldr	r3, [pc, #328]	@ (80067f4 <HAL_RCC_OscConfig+0x61c>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6a11      	ldr	r1, [r2, #32]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066b4:	3a01      	subs	r2, #1
 80066b6:	0112      	lsls	r2, r2, #4
 80066b8:	4311      	orrs	r1, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80066be:	0212      	lsls	r2, r2, #8
 80066c0:	4311      	orrs	r1, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80066c6:	0852      	lsrs	r2, r2, #1
 80066c8:	3a01      	subs	r2, #1
 80066ca:	0552      	lsls	r2, r2, #21
 80066cc:	4311      	orrs	r1, r2
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80066d2:	0852      	lsrs	r2, r2, #1
 80066d4:	3a01      	subs	r2, #1
 80066d6:	0652      	lsls	r2, r2, #25
 80066d8:	4311      	orrs	r1, r2
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80066de:	06d2      	lsls	r2, r2, #27
 80066e0:	430a      	orrs	r2, r1
 80066e2:	4943      	ldr	r1, [pc, #268]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066e8:	4b41      	ldr	r3, [pc, #260]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a40      	ldr	r2, [pc, #256]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 80066ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066f4:	4b3e      	ldr	r3, [pc, #248]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	4a3d      	ldr	r2, [pc, #244]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 80066fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7fc fc3c 	bl	8002f7c <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006708:	f7fc fc38 	bl	8002f7c <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e066      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800671a:	4b35      	ldr	r3, [pc, #212]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f0      	beq.n	8006708 <HAL_RCC_OscConfig+0x530>
 8006726:	e05e      	b.n	80067e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006728:	4b31      	ldr	r3, [pc, #196]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a30      	ldr	r2, [pc, #192]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 800672e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006734:	f7fc fc22 	bl	8002f7c <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800673c:	f7fc fc1e 	bl	8002f7c <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e04c      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800674e:	4b28      	ldr	r3, [pc, #160]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800675a:	4b25      	ldr	r3, [pc, #148]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	4924      	ldr	r1, [pc, #144]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 8006760:	4b25      	ldr	r3, [pc, #148]	@ (80067f8 <HAL_RCC_OscConfig+0x620>)
 8006762:	4013      	ands	r3, r2
 8006764:	60cb      	str	r3, [r1, #12]
 8006766:	e03e      	b.n	80067e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e039      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006774:	4b1e      	ldr	r3, [pc, #120]	@ (80067f0 <HAL_RCC_OscConfig+0x618>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f003 0203 	and.w	r2, r3, #3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	429a      	cmp	r2, r3
 8006786:	d12c      	bne.n	80067e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006792:	3b01      	subs	r3, #1
 8006794:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006796:	429a      	cmp	r2, r3
 8006798:	d123      	bne.n	80067e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d11b      	bne.n	80067e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d113      	bne.n	80067e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c4:	085b      	lsrs	r3, r3, #1
 80067c6:	3b01      	subs	r3, #1
 80067c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d109      	bne.n	80067e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d8:	085b      	lsrs	r3, r3, #1
 80067da:	3b01      	subs	r3, #1
 80067dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067de:	429a      	cmp	r2, r3
 80067e0:	d001      	beq.n	80067e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e000      	b.n	80067e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3720      	adds	r7, #32
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	40021000 	.word	0x40021000
 80067f4:	019f800c 	.word	0x019f800c
 80067f8:	feeefffc 	.word	0xfeeefffc

080067fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006806:	2300      	movs	r3, #0
 8006808:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e11e      	b.n	8006a52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006814:	4b91      	ldr	r3, [pc, #580]	@ (8006a5c <HAL_RCC_ClockConfig+0x260>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 030f 	and.w	r3, r3, #15
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d910      	bls.n	8006844 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006822:	4b8e      	ldr	r3, [pc, #568]	@ (8006a5c <HAL_RCC_ClockConfig+0x260>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f023 020f 	bic.w	r2, r3, #15
 800682a:	498c      	ldr	r1, [pc, #560]	@ (8006a5c <HAL_RCC_ClockConfig+0x260>)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	4313      	orrs	r3, r2
 8006830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006832:	4b8a      	ldr	r3, [pc, #552]	@ (8006a5c <HAL_RCC_ClockConfig+0x260>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	429a      	cmp	r2, r3
 800683e:	d001      	beq.n	8006844 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e106      	b.n	8006a52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d073      	beq.n	8006938 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b03      	cmp	r3, #3
 8006856:	d129      	bne.n	80068ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006858:	4b81      	ldr	r3, [pc, #516]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0f4      	b.n	8006a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006868:	f000 f9d0 	bl	8006c0c <RCC_GetSysClockFreqFromPLLSource>
 800686c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	4a7c      	ldr	r2, [pc, #496]	@ (8006a64 <HAL_RCC_ClockConfig+0x268>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d93f      	bls.n	80068f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006876:	4b7a      	ldr	r3, [pc, #488]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d009      	beq.n	8006896 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800688a:	2b00      	cmp	r3, #0
 800688c:	d033      	beq.n	80068f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006892:	2b00      	cmp	r3, #0
 8006894:	d12f      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006896:	4b72      	ldr	r3, [pc, #456]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800689e:	4a70      	ldr	r2, [pc, #448]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 80068a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80068a6:	2380      	movs	r3, #128	@ 0x80
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	e024      	b.n	80068f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d107      	bne.n	80068c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068b4:	4b6a      	ldr	r3, [pc, #424]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e0c6      	b.n	8006a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068c4:	4b66      	ldr	r3, [pc, #408]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e0be      	b.n	8006a52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80068d4:	f000 f8ce 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 80068d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	4a61      	ldr	r2, [pc, #388]	@ (8006a64 <HAL_RCC_ClockConfig+0x268>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d909      	bls.n	80068f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068e2:	4b5f      	ldr	r3, [pc, #380]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068ea:	4a5d      	ldr	r2, [pc, #372]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 80068ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80068f2:	2380      	movs	r3, #128	@ 0x80
 80068f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068f6:	4b5a      	ldr	r3, [pc, #360]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f023 0203 	bic.w	r2, r3, #3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	4957      	ldr	r1, [pc, #348]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006904:	4313      	orrs	r3, r2
 8006906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006908:	f7fc fb38 	bl	8002f7c <HAL_GetTick>
 800690c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800690e:	e00a      	b.n	8006926 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006910:	f7fc fb34 	bl	8002f7c <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800691e:	4293      	cmp	r3, r2
 8006920:	d901      	bls.n	8006926 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e095      	b.n	8006a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006926:	4b4e      	ldr	r3, [pc, #312]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 020c 	and.w	r2, r3, #12
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	429a      	cmp	r2, r3
 8006936:	d1eb      	bne.n	8006910 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d023      	beq.n	800698c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b00      	cmp	r3, #0
 800694e:	d005      	beq.n	800695c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006950:	4b43      	ldr	r3, [pc, #268]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	4a42      	ldr	r2, [pc, #264]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006956:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800695a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006968:	4b3d      	ldr	r3, [pc, #244]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006970:	4a3b      	ldr	r2, [pc, #236]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006972:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006976:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006978:	4b39      	ldr	r3, [pc, #228]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	4936      	ldr	r1, [pc, #216]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006986:	4313      	orrs	r3, r2
 8006988:	608b      	str	r3, [r1, #8]
 800698a:	e008      	b.n	800699e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b80      	cmp	r3, #128	@ 0x80
 8006990:	d105      	bne.n	800699e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006992:	4b33      	ldr	r3, [pc, #204]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	4a32      	ldr	r2, [pc, #200]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006998:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800699c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800699e:	4b2f      	ldr	r3, [pc, #188]	@ (8006a5c <HAL_RCC_ClockConfig+0x260>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d21d      	bcs.n	80069e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ac:	4b2b      	ldr	r3, [pc, #172]	@ (8006a5c <HAL_RCC_ClockConfig+0x260>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f023 020f 	bic.w	r2, r3, #15
 80069b4:	4929      	ldr	r1, [pc, #164]	@ (8006a5c <HAL_RCC_ClockConfig+0x260>)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069bc:	f7fc fade 	bl	8002f7c <HAL_GetTick>
 80069c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c2:	e00a      	b.n	80069da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069c4:	f7fc fada 	bl	8002f7c <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e03b      	b.n	8006a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069da:	4b20      	ldr	r3, [pc, #128]	@ (8006a5c <HAL_RCC_ClockConfig+0x260>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d1ed      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d008      	beq.n	8006a06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	4917      	ldr	r1, [pc, #92]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a12:	4b13      	ldr	r3, [pc, #76]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	490f      	ldr	r1, [pc, #60]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a26:	f000 f825 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a60 <HAL_RCC_ClockConfig+0x264>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	091b      	lsrs	r3, r3, #4
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	490c      	ldr	r1, [pc, #48]	@ (8006a68 <HAL_RCC_ClockConfig+0x26c>)
 8006a38:	5ccb      	ldrb	r3, [r1, r3]
 8006a3a:	f003 031f 	and.w	r3, r3, #31
 8006a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a42:	4a0a      	ldr	r2, [pc, #40]	@ (8006a6c <HAL_RCC_ClockConfig+0x270>)
 8006a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a46:	4b0a      	ldr	r3, [pc, #40]	@ (8006a70 <HAL_RCC_ClockConfig+0x274>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fb fe62 	bl	8002714 <HAL_InitTick>
 8006a50:	4603      	mov	r3, r0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40022000 	.word	0x40022000
 8006a60:	40021000 	.word	0x40021000
 8006a64:	04c4b400 	.word	0x04c4b400
 8006a68:	0801aadc 	.word	0x0801aadc
 8006a6c:	20000038 	.word	0x20000038
 8006a70:	2000003c 	.word	0x2000003c

08006a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d102      	bne.n	8006a8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a86:	4b2a      	ldr	r3, [pc, #168]	@ (8006b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a88:	613b      	str	r3, [r7, #16]
 8006a8a:	e047      	b.n	8006b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006a8c:	4b27      	ldr	r3, [pc, #156]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f003 030c 	and.w	r3, r3, #12
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d102      	bne.n	8006a9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a98:	4b26      	ldr	r3, [pc, #152]	@ (8006b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a9a:	613b      	str	r3, [r7, #16]
 8006a9c:	e03e      	b.n	8006b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006a9e:	4b23      	ldr	r3, [pc, #140]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 030c 	and.w	r3, r3, #12
 8006aa6:	2b0c      	cmp	r3, #12
 8006aa8:	d136      	bne.n	8006b18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006aaa:	4b20      	ldr	r3, [pc, #128]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	091b      	lsrs	r3, r3, #4
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	3301      	adds	r3, #1
 8006ac0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d10c      	bne.n	8006ae2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8006b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad0:	4a16      	ldr	r2, [pc, #88]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ad2:	68d2      	ldr	r2, [r2, #12]
 8006ad4:	0a12      	lsrs	r2, r2, #8
 8006ad6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ada:	fb02 f303 	mul.w	r3, r2, r3
 8006ade:	617b      	str	r3, [r7, #20]
      break;
 8006ae0:	e00c      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ae2:	4a13      	ldr	r2, [pc, #76]	@ (8006b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aea:	4a10      	ldr	r2, [pc, #64]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aec:	68d2      	ldr	r2, [r2, #12]
 8006aee:	0a12      	lsrs	r2, r2, #8
 8006af0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006af4:	fb02 f303 	mul.w	r3, r2, r3
 8006af8:	617b      	str	r3, [r7, #20]
      break;
 8006afa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006afc:	4b0b      	ldr	r3, [pc, #44]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	0e5b      	lsrs	r3, r3, #25
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	3301      	adds	r3, #1
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	e001      	b.n	8006b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006b1c:	693b      	ldr	r3, [r7, #16]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	00f42400 	.word	0x00f42400
 8006b34:	016e3600 	.word	0x016e3600

08006b38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b3c:	4b03      	ldr	r3, [pc, #12]	@ (8006b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	20000038 	.word	0x20000038

08006b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b54:	f7ff fff0 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	4b06      	ldr	r3, [pc, #24]	@ (8006b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	0a1b      	lsrs	r3, r3, #8
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	4904      	ldr	r1, [pc, #16]	@ (8006b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b66:	5ccb      	ldrb	r3, [r1, r3]
 8006b68:	f003 031f 	and.w	r3, r3, #31
 8006b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	40021000 	.word	0x40021000
 8006b78:	0801aaec 	.word	0x0801aaec

08006b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006b80:	f7ff ffda 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8006b84:	4602      	mov	r2, r0
 8006b86:	4b06      	ldr	r3, [pc, #24]	@ (8006ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	0adb      	lsrs	r3, r3, #11
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	4904      	ldr	r1, [pc, #16]	@ (8006ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b92:	5ccb      	ldrb	r3, [r1, r3]
 8006b94:	f003 031f 	and.w	r3, r3, #31
 8006b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	40021000 	.word	0x40021000
 8006ba4:	0801aaec 	.word	0x0801aaec

08006ba8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	220f      	movs	r2, #15
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006bb8:	4b12      	ldr	r3, [pc, #72]	@ (8006c04 <HAL_RCC_GetClockConfig+0x5c>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f003 0203 	and.w	r2, r3, #3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8006c04 <HAL_RCC_GetClockConfig+0x5c>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8006c04 <HAL_RCC_GetClockConfig+0x5c>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006bdc:	4b09      	ldr	r3, [pc, #36]	@ (8006c04 <HAL_RCC_GetClockConfig+0x5c>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	08db      	lsrs	r3, r3, #3
 8006be2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006bea:	4b07      	ldr	r3, [pc, #28]	@ (8006c08 <HAL_RCC_GetClockConfig+0x60>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 020f 	and.w	r2, r3, #15
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	601a      	str	r2, [r3, #0]
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40021000 	.word	0x40021000
 8006c08:	40022000 	.word	0x40022000

08006c0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c12:	4b1e      	ldr	r3, [pc, #120]	@ (8006c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f003 0303 	and.w	r3, r3, #3
 8006c1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	091b      	lsrs	r3, r3, #4
 8006c22:	f003 030f 	and.w	r3, r3, #15
 8006c26:	3301      	adds	r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d10c      	bne.n	8006c4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c30:	4a17      	ldr	r2, [pc, #92]	@ (8006c90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c38:	4a14      	ldr	r2, [pc, #80]	@ (8006c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c3a:	68d2      	ldr	r2, [r2, #12]
 8006c3c:	0a12      	lsrs	r2, r2, #8
 8006c3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c42:	fb02 f303 	mul.w	r3, r2, r3
 8006c46:	617b      	str	r3, [r7, #20]
    break;
 8006c48:	e00c      	b.n	8006c64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c4a:	4a12      	ldr	r2, [pc, #72]	@ (8006c94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c52:	4a0e      	ldr	r2, [pc, #56]	@ (8006c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c54:	68d2      	ldr	r2, [r2, #12]
 8006c56:	0a12      	lsrs	r2, r2, #8
 8006c58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c5c:	fb02 f303 	mul.w	r3, r2, r3
 8006c60:	617b      	str	r3, [r7, #20]
    break;
 8006c62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c64:	4b09      	ldr	r3, [pc, #36]	@ (8006c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	0e5b      	lsrs	r3, r3, #25
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	3301      	adds	r3, #1
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006c7e:	687b      	ldr	r3, [r7, #4]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	371c      	adds	r7, #28
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	016e3600 	.word	0x016e3600
 8006c94:	00f42400 	.word	0x00f42400

08006c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8098 	beq.w	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cba:	4b43      	ldr	r3, [pc, #268]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10d      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cc6:	4b40      	ldr	r3, [pc, #256]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cca:	4a3f      	ldr	r2, [pc, #252]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cda:	60bb      	str	r3, [r7, #8]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a39      	ldr	r2, [pc, #228]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cee:	f7fc f945 	bl	8002f7c <HAL_GetTick>
 8006cf2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cf4:	e009      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cf6:	f7fc f941 	bl	8002f7c <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d902      	bls.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	74fb      	strb	r3, [r7, #19]
        break;
 8006d08:	e005      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d0a:	4b30      	ldr	r3, [pc, #192]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0ef      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006d16:	7cfb      	ldrb	r3, [r7, #19]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d159      	bne.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d01e      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d019      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d38:	4b23      	ldr	r3, [pc, #140]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d44:	4b20      	ldr	r3, [pc, #128]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d54:	4b1c      	ldr	r3, [pc, #112]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d64:	4a18      	ldr	r2, [pc, #96]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d016      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d76:	f7fc f901 	bl	8002f7c <HAL_GetTick>
 8006d7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d7c:	e00b      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d7e:	f7fc f8fd 	bl	8002f7c <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d902      	bls.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	74fb      	strb	r3, [r7, #19]
            break;
 8006d94:	e006      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d96:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0ec      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006da4:	7cfb      	ldrb	r3, [r7, #19]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10b      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006daa:	4b07      	ldr	r3, [pc, #28]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db8:	4903      	ldr	r1, [pc, #12]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dc2:	7cfb      	ldrb	r3, [r7, #19]
 8006dc4:	74bb      	strb	r3, [r7, #18]
 8006dc6:	e005      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006dc8:	40021000 	.word	0x40021000
 8006dcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd0:	7cfb      	ldrb	r3, [r7, #19]
 8006dd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dd4:	7c7b      	ldrb	r3, [r7, #17]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d105      	bne.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dda:	4ba7      	ldr	r3, [pc, #668]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dde:	4aa6      	ldr	r2, [pc, #664]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006de4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006df2:	4ba1      	ldr	r3, [pc, #644]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df8:	f023 0203 	bic.w	r2, r3, #3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	499d      	ldr	r1, [pc, #628]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e14:	4b98      	ldr	r3, [pc, #608]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e1a:	f023 020c 	bic.w	r2, r3, #12
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	4995      	ldr	r1, [pc, #596]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e36:	4b90      	ldr	r3, [pc, #576]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	498c      	ldr	r1, [pc, #560]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00a      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e58:	4b87      	ldr	r3, [pc, #540]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	4984      	ldr	r1, [pc, #528]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	497b      	ldr	r1, [pc, #492]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0320 	and.w	r3, r3, #32
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e9c:	4b76      	ldr	r3, [pc, #472]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	4973      	ldr	r1, [pc, #460]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ebe:	4b6e      	ldr	r3, [pc, #440]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ec4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	496a      	ldr	r1, [pc, #424]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00a      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ee0:	4b65      	ldr	r3, [pc, #404]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	4962      	ldr	r1, [pc, #392]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00a      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f02:	4b5d      	ldr	r3, [pc, #372]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f10:	4959      	ldr	r1, [pc, #356]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00a      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f24:	4b54      	ldr	r3, [pc, #336]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f2a:	f023 0203 	bic.w	r2, r3, #3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f32:	4951      	ldr	r1, [pc, #324]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f46:	4b4c      	ldr	r3, [pc, #304]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f54:	4948      	ldr	r1, [pc, #288]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d015      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f68:	4b43      	ldr	r3, [pc, #268]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f76:	4940      	ldr	r1, [pc, #256]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f86:	d105      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f88:	4b3b      	ldr	r3, [pc, #236]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	4a3a      	ldr	r2, [pc, #232]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f92:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d015      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006fa0:	4b35      	ldr	r3, [pc, #212]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fae:	4932      	ldr	r1, [pc, #200]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fbe:	d105      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d015      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fd8:	4b27      	ldr	r3, [pc, #156]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fde:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe6:	4924      	ldr	r1, [pc, #144]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ff6:	d105      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007002:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d015      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007010:	4b19      	ldr	r3, [pc, #100]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007016:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800701e:	4916      	ldr	r1, [pc, #88]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007020:	4313      	orrs	r3, r2
 8007022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800702e:	d105      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007030:	4b11      	ldr	r3, [pc, #68]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	4a10      	ldr	r2, [pc, #64]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800703a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d019      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007048:	4b0b      	ldr	r3, [pc, #44]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800704a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800704e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007056:	4908      	ldr	r1, [pc, #32]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007058:	4313      	orrs	r3, r2
 800705a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007062:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007066:	d109      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007068:	4b03      	ldr	r3, [pc, #12]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	4a02      	ldr	r2, [pc, #8]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800706e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007072:	60d3      	str	r3, [r2, #12]
 8007074:	e002      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007076:	bf00      	nop
 8007078:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d015      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007088:	4b29      	ldr	r3, [pc, #164]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800708a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007096:	4926      	ldr	r1, [pc, #152]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007098:	4313      	orrs	r3, r2
 800709a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070a6:	d105      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070a8:	4b21      	ldr	r3, [pc, #132]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	4a20      	ldr	r2, [pc, #128]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d015      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80070c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ce:	4918      	ldr	r1, [pc, #96]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070de:	d105      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070e0:	4b13      	ldr	r3, [pc, #76]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	4a12      	ldr	r2, [pc, #72]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d015      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007106:	490a      	ldr	r1, [pc, #40]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007108:	4313      	orrs	r3, r2
 800710a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007112:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007116:	d105      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007118:	4b05      	ldr	r3, [pc, #20]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	4a04      	ldr	r2, [pc, #16]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800711e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007122:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007124:	7cbb      	ldrb	r3, [r7, #18]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	40021000 	.word	0x40021000

08007134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e049      	b.n	80071da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fb fce2 	bl	8002b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3304      	adds	r3, #4
 8007170:	4619      	mov	r1, r3
 8007172:	4610      	mov	r0, r2
 8007174:	f000 fb3c 	bl	80077f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d001      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e054      	b.n	80072a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0201 	orr.w	r2, r2, #1
 8007212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a26      	ldr	r2, [pc, #152]	@ (80072b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d022      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007226:	d01d      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a22      	ldr	r2, [pc, #136]	@ (80072b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d018      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a21      	ldr	r2, [pc, #132]	@ (80072bc <HAL_TIM_Base_Start_IT+0xd8>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d013      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1f      	ldr	r2, [pc, #124]	@ (80072c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00e      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1e      	ldr	r2, [pc, #120]	@ (80072c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d009      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1c      	ldr	r2, [pc, #112]	@ (80072c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d004      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x80>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1b      	ldr	r2, [pc, #108]	@ (80072cc <HAL_TIM_Base_Start_IT+0xe8>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d115      	bne.n	8007290 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	4b19      	ldr	r3, [pc, #100]	@ (80072d0 <HAL_TIM_Base_Start_IT+0xec>)
 800726c:	4013      	ands	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b06      	cmp	r3, #6
 8007274:	d015      	beq.n	80072a2 <HAL_TIM_Base_Start_IT+0xbe>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800727c:	d011      	beq.n	80072a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0201 	orr.w	r2, r2, #1
 800728c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728e:	e008      	b.n	80072a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	e000      	b.n	80072a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	40012c00 	.word	0x40012c00
 80072b8:	40000400 	.word	0x40000400
 80072bc:	40000800 	.word	0x40000800
 80072c0:	40000c00 	.word	0x40000c00
 80072c4:	40013400 	.word	0x40013400
 80072c8:	40014000 	.word	0x40014000
 80072cc:	40015000 	.word	0x40015000
 80072d0:	00010007 	.word	0x00010007

080072d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d020      	beq.n	8007338 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01b      	beq.n	8007338 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0202 	mvn.w	r2, #2
 8007308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa48 	bl	80077b4 <HAL_TIM_IC_CaptureCallback>
 8007324:	e005      	b.n	8007332 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fa3a 	bl	80077a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fa4b 	bl	80077c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	d020      	beq.n	8007384 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b00      	cmp	r3, #0
 800734a:	d01b      	beq.n	8007384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f06f 0204 	mvn.w	r2, #4
 8007354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2202      	movs	r2, #2
 800735a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fa22 	bl	80077b4 <HAL_TIM_IC_CaptureCallback>
 8007370:	e005      	b.n	800737e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa14 	bl	80077a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fa25 	bl	80077c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b00      	cmp	r3, #0
 800738c:	d020      	beq.n	80073d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01b      	beq.n	80073d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0208 	mvn.w	r2, #8
 80073a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2204      	movs	r2, #4
 80073a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f9fc 	bl	80077b4 <HAL_TIM_IC_CaptureCallback>
 80073bc:	e005      	b.n	80073ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f9ee 	bl	80077a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f9ff 	bl	80077c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f003 0310 	and.w	r3, r3, #16
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d020      	beq.n	800741c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f003 0310 	and.w	r3, r3, #16
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01b      	beq.n	800741c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0210 	mvn.w	r2, #16
 80073ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2208      	movs	r2, #8
 80073f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f9d6 	bl	80077b4 <HAL_TIM_IC_CaptureCallback>
 8007408:	e005      	b.n	8007416 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f9c8 	bl	80077a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f9d9 	bl	80077c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00c      	beq.n	8007440 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d007      	beq.n	8007440 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0201 	mvn.w	r2, #1
 8007438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fa ffaa 	bl	8002394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007446:	2b00      	cmp	r3, #0
 8007448:	d104      	bne.n	8007454 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00c      	beq.n	800746e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fbb1 	bl	8007bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00c      	beq.n	8007492 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800748a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fba9 	bl	8007be4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00c      	beq.n	80074b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f993 	bl	80077dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f003 0320 	and.w	r3, r3, #32
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00c      	beq.n	80074da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d007      	beq.n	80074da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f06f 0220 	mvn.w	r2, #32
 80074d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fb71 	bl	8007bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00c      	beq.n	80074fe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d007      	beq.n	80074fe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80074f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fb7d 	bl	8007bf8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00c      	beq.n	8007522 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d007      	beq.n	8007522 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800751a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fb75 	bl	8007c0c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00c      	beq.n	8007546 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d007      	beq.n	8007546 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800753e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fb6d 	bl	8007c20 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00c      	beq.n	800756a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d007      	beq.n	800756a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fb65 	bl	8007c34 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
	...

08007574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <HAL_TIM_ConfigClockSource+0x1c>
 800758c:	2302      	movs	r3, #2
 800758e:	e0f6      	b.n	800777e <HAL_TIM_ConfigClockSource+0x20a>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80075ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80075b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a6f      	ldr	r2, [pc, #444]	@ (8007788 <HAL_TIM_ConfigClockSource+0x214>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	f000 80c1 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1de>
 80075d0:	4a6d      	ldr	r2, [pc, #436]	@ (8007788 <HAL_TIM_ConfigClockSource+0x214>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	f200 80c6 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 80075d8:	4a6c      	ldr	r2, [pc, #432]	@ (800778c <HAL_TIM_ConfigClockSource+0x218>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	f000 80b9 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1de>
 80075e0:	4a6a      	ldr	r2, [pc, #424]	@ (800778c <HAL_TIM_ConfigClockSource+0x218>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	f200 80be 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 80075e8:	4a69      	ldr	r2, [pc, #420]	@ (8007790 <HAL_TIM_ConfigClockSource+0x21c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	f000 80b1 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1de>
 80075f0:	4a67      	ldr	r2, [pc, #412]	@ (8007790 <HAL_TIM_ConfigClockSource+0x21c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	f200 80b6 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 80075f8:	4a66      	ldr	r2, [pc, #408]	@ (8007794 <HAL_TIM_ConfigClockSource+0x220>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	f000 80a9 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1de>
 8007600:	4a64      	ldr	r2, [pc, #400]	@ (8007794 <HAL_TIM_ConfigClockSource+0x220>)
 8007602:	4293      	cmp	r3, r2
 8007604:	f200 80ae 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 8007608:	4a63      	ldr	r2, [pc, #396]	@ (8007798 <HAL_TIM_ConfigClockSource+0x224>)
 800760a:	4293      	cmp	r3, r2
 800760c:	f000 80a1 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1de>
 8007610:	4a61      	ldr	r2, [pc, #388]	@ (8007798 <HAL_TIM_ConfigClockSource+0x224>)
 8007612:	4293      	cmp	r3, r2
 8007614:	f200 80a6 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 8007618:	4a60      	ldr	r2, [pc, #384]	@ (800779c <HAL_TIM_ConfigClockSource+0x228>)
 800761a:	4293      	cmp	r3, r2
 800761c:	f000 8099 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1de>
 8007620:	4a5e      	ldr	r2, [pc, #376]	@ (800779c <HAL_TIM_ConfigClockSource+0x228>)
 8007622:	4293      	cmp	r3, r2
 8007624:	f200 809e 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 8007628:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800762c:	f000 8091 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1de>
 8007630:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007634:	f200 8096 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 8007638:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800763c:	f000 8089 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1de>
 8007640:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007644:	f200 808e 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 8007648:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800764c:	d03e      	beq.n	80076cc <HAL_TIM_ConfigClockSource+0x158>
 800764e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007652:	f200 8087 	bhi.w	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 8007656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800765a:	f000 8086 	beq.w	800776a <HAL_TIM_ConfigClockSource+0x1f6>
 800765e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007662:	d87f      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 8007664:	2b70      	cmp	r3, #112	@ 0x70
 8007666:	d01a      	beq.n	800769e <HAL_TIM_ConfigClockSource+0x12a>
 8007668:	2b70      	cmp	r3, #112	@ 0x70
 800766a:	d87b      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 800766c:	2b60      	cmp	r3, #96	@ 0x60
 800766e:	d050      	beq.n	8007712 <HAL_TIM_ConfigClockSource+0x19e>
 8007670:	2b60      	cmp	r3, #96	@ 0x60
 8007672:	d877      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 8007674:	2b50      	cmp	r3, #80	@ 0x50
 8007676:	d03c      	beq.n	80076f2 <HAL_TIM_ConfigClockSource+0x17e>
 8007678:	2b50      	cmp	r3, #80	@ 0x50
 800767a:	d873      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 800767c:	2b40      	cmp	r3, #64	@ 0x40
 800767e:	d058      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x1be>
 8007680:	2b40      	cmp	r3, #64	@ 0x40
 8007682:	d86f      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 8007684:	2b30      	cmp	r3, #48	@ 0x30
 8007686:	d064      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0x1de>
 8007688:	2b30      	cmp	r3, #48	@ 0x30
 800768a:	d86b      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 800768c:	2b20      	cmp	r3, #32
 800768e:	d060      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0x1de>
 8007690:	2b20      	cmp	r3, #32
 8007692:	d867      	bhi.n	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
 8007694:	2b00      	cmp	r3, #0
 8007696:	d05c      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0x1de>
 8007698:	2b10      	cmp	r3, #16
 800769a:	d05a      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0x1de>
 800769c:	e062      	b.n	8007764 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076ae:	f000 f9cf 	bl	8007a50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80076c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	609a      	str	r2, [r3, #8]
      break;
 80076ca:	e04f      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076dc:	f000 f9b8 	bl	8007a50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076ee:	609a      	str	r2, [r3, #8]
      break;
 80076f0:	e03c      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076fe:	461a      	mov	r2, r3
 8007700:	f000 f92a 	bl	8007958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2150      	movs	r1, #80	@ 0x50
 800770a:	4618      	mov	r0, r3
 800770c:	f000 f983 	bl	8007a16 <TIM_ITRx_SetConfig>
      break;
 8007710:	e02c      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800771e:	461a      	mov	r2, r3
 8007720:	f000 f949 	bl	80079b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2160      	movs	r1, #96	@ 0x60
 800772a:	4618      	mov	r0, r3
 800772c:	f000 f973 	bl	8007a16 <TIM_ITRx_SetConfig>
      break;
 8007730:	e01c      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800773e:	461a      	mov	r2, r3
 8007740:	f000 f90a 	bl	8007958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2140      	movs	r1, #64	@ 0x40
 800774a:	4618      	mov	r0, r3
 800774c:	f000 f963 	bl	8007a16 <TIM_ITRx_SetConfig>
      break;
 8007750:	e00c      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f000 f95a 	bl	8007a16 <TIM_ITRx_SetConfig>
      break;
 8007762:	e003      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	73fb      	strb	r3, [r7, #15]
      break;
 8007768:	e000      	b.n	800776c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800776a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800777c:	7bfb      	ldrb	r3, [r7, #15]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	00100070 	.word	0x00100070
 800778c:	00100060 	.word	0x00100060
 8007790:	00100050 	.word	0x00100050
 8007794:	00100040 	.word	0x00100040
 8007798:	00100030 	.word	0x00100030
 800779c:	00100020 	.word	0x00100020

080077a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a4c      	ldr	r2, [pc, #304]	@ (8007934 <TIM_Base_SetConfig+0x144>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d017      	beq.n	8007838 <TIM_Base_SetConfig+0x48>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800780e:	d013      	beq.n	8007838 <TIM_Base_SetConfig+0x48>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a49      	ldr	r2, [pc, #292]	@ (8007938 <TIM_Base_SetConfig+0x148>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00f      	beq.n	8007838 <TIM_Base_SetConfig+0x48>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a48      	ldr	r2, [pc, #288]	@ (800793c <TIM_Base_SetConfig+0x14c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00b      	beq.n	8007838 <TIM_Base_SetConfig+0x48>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a47      	ldr	r2, [pc, #284]	@ (8007940 <TIM_Base_SetConfig+0x150>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d007      	beq.n	8007838 <TIM_Base_SetConfig+0x48>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a46      	ldr	r2, [pc, #280]	@ (8007944 <TIM_Base_SetConfig+0x154>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d003      	beq.n	8007838 <TIM_Base_SetConfig+0x48>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a45      	ldr	r2, [pc, #276]	@ (8007948 <TIM_Base_SetConfig+0x158>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d108      	bne.n	800784a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800783e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4313      	orrs	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a39      	ldr	r2, [pc, #228]	@ (8007934 <TIM_Base_SetConfig+0x144>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d023      	beq.n	800789a <TIM_Base_SetConfig+0xaa>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007858:	d01f      	beq.n	800789a <TIM_Base_SetConfig+0xaa>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a36      	ldr	r2, [pc, #216]	@ (8007938 <TIM_Base_SetConfig+0x148>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d01b      	beq.n	800789a <TIM_Base_SetConfig+0xaa>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a35      	ldr	r2, [pc, #212]	@ (800793c <TIM_Base_SetConfig+0x14c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d017      	beq.n	800789a <TIM_Base_SetConfig+0xaa>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a34      	ldr	r2, [pc, #208]	@ (8007940 <TIM_Base_SetConfig+0x150>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d013      	beq.n	800789a <TIM_Base_SetConfig+0xaa>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a33      	ldr	r2, [pc, #204]	@ (8007944 <TIM_Base_SetConfig+0x154>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d00f      	beq.n	800789a <TIM_Base_SetConfig+0xaa>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a33      	ldr	r2, [pc, #204]	@ (800794c <TIM_Base_SetConfig+0x15c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00b      	beq.n	800789a <TIM_Base_SetConfig+0xaa>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a32      	ldr	r2, [pc, #200]	@ (8007950 <TIM_Base_SetConfig+0x160>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d007      	beq.n	800789a <TIM_Base_SetConfig+0xaa>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a31      	ldr	r2, [pc, #196]	@ (8007954 <TIM_Base_SetConfig+0x164>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d003      	beq.n	800789a <TIM_Base_SetConfig+0xaa>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a2c      	ldr	r2, [pc, #176]	@ (8007948 <TIM_Base_SetConfig+0x158>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d108      	bne.n	80078ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a18      	ldr	r2, [pc, #96]	@ (8007934 <TIM_Base_SetConfig+0x144>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d013      	beq.n	8007900 <TIM_Base_SetConfig+0x110>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a1a      	ldr	r2, [pc, #104]	@ (8007944 <TIM_Base_SetConfig+0x154>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d00f      	beq.n	8007900 <TIM_Base_SetConfig+0x110>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a1a      	ldr	r2, [pc, #104]	@ (800794c <TIM_Base_SetConfig+0x15c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d00b      	beq.n	8007900 <TIM_Base_SetConfig+0x110>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a19      	ldr	r2, [pc, #100]	@ (8007950 <TIM_Base_SetConfig+0x160>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d007      	beq.n	8007900 <TIM_Base_SetConfig+0x110>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a18      	ldr	r2, [pc, #96]	@ (8007954 <TIM_Base_SetConfig+0x164>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d003      	beq.n	8007900 <TIM_Base_SetConfig+0x110>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a13      	ldr	r2, [pc, #76]	@ (8007948 <TIM_Base_SetConfig+0x158>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d103      	bne.n	8007908 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b01      	cmp	r3, #1
 8007918:	d105      	bne.n	8007926 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	f023 0201 	bic.w	r2, r3, #1
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	611a      	str	r2, [r3, #16]
  }
}
 8007926:	bf00      	nop
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	40012c00 	.word	0x40012c00
 8007938:	40000400 	.word	0x40000400
 800793c:	40000800 	.word	0x40000800
 8007940:	40000c00 	.word	0x40000c00
 8007944:	40013400 	.word	0x40013400
 8007948:	40015000 	.word	0x40015000
 800794c:	40014000 	.word	0x40014000
 8007950:	40014400 	.word	0x40014400
 8007954:	40014800 	.word	0x40014800

08007958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	f023 0201 	bic.w	r2, r3, #1
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	4313      	orrs	r3, r2
 800798c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f023 030a 	bic.w	r3, r3, #10
 8007994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	4313      	orrs	r3, r2
 800799c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	621a      	str	r2, [r3, #32]
}
 80079aa:	bf00      	nop
 80079ac:	371c      	adds	r7, #28
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b087      	sub	sp, #28
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f023 0210 	bic.w	r2, r3, #16
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	031b      	lsls	r3, r3, #12
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	621a      	str	r2, [r3, #32]
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	f043 0307 	orr.w	r3, r3, #7
 8007a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	609a      	str	r2, [r3, #8]
}
 8007a44:	bf00      	nop
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
 8007a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	021a      	lsls	r2, r3, #8
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	431a      	orrs	r2, r3
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	609a      	str	r2, [r3, #8]
}
 8007a84:	bf00      	nop
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e074      	b.n	8007b92 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a34      	ldr	r2, [pc, #208]	@ (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d009      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a33      	ldr	r2, [pc, #204]	@ (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d004      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a31      	ldr	r2, [pc, #196]	@ (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d108      	bne.n	8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007aec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a21      	ldr	r2, [pc, #132]	@ (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d022      	beq.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b28:	d01d      	beq.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8007bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d018      	beq.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d013      	beq.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1c      	ldr	r2, [pc, #112]	@ (8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d00e      	beq.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a15      	ldr	r2, [pc, #84]	@ (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d009      	beq.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a18      	ldr	r2, [pc, #96]	@ (8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d004      	beq.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a11      	ldr	r2, [pc, #68]	@ (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d10c      	bne.n	8007b80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	40012c00 	.word	0x40012c00
 8007ba4:	40013400 	.word	0x40013400
 8007ba8:	40015000 	.word	0x40015000
 8007bac:	40000400 	.word	0x40000400
 8007bb0:	40000800 	.word	0x40000800
 8007bb4:	40000c00 	.word	0x40000c00
 8007bb8:	40014000 	.word	0x40014000

08007bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e042      	b.n	8007ce0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d106      	bne.n	8007c72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7fa ffc7 	bl	8002c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2224      	movs	r2, #36	@ 0x24
 8007c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 0201 	bic.w	r2, r2, #1
 8007c88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f001 f806 	bl	8008ca4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fd07 	bl	80086ac <UART_SetConfig>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e01b      	b.n	8007ce0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0201 	orr.w	r2, r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f001 f885 	bl	8008de8 <UART_CheckIdleState>
 8007cde:	4603      	mov	r3, r0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08a      	sub	sp, #40	@ 0x28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	d167      	bne.n	8007dd0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_UART_Transmit_DMA+0x24>
 8007d06:	88fb      	ldrh	r3, [r7, #6]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e060      	b.n	8007dd2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	88fa      	ldrh	r2, [r7, #6]
 8007d1a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	88fa      	ldrh	r2, [r7, #6]
 8007d22:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2221      	movs	r2, #33	@ 0x21
 8007d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d028      	beq.n	8007d90 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d42:	4a26      	ldr	r2, [pc, #152]	@ (8007ddc <HAL_UART_Transmit_DMA+0xf4>)
 8007d44:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d4a:	4a25      	ldr	r2, [pc, #148]	@ (8007de0 <HAL_UART_Transmit_DMA+0xf8>)
 8007d4c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d52:	4a24      	ldr	r2, [pc, #144]	@ (8007de4 <HAL_UART_Transmit_DMA+0xfc>)
 8007d54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d66:	4619      	mov	r1, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3328      	adds	r3, #40	@ 0x28
 8007d6e:	461a      	mov	r2, r3
 8007d70:	88fb      	ldrh	r3, [r7, #6]
 8007d72:	f7fb fab9 	bl	80032e8 <HAL_DMA_Start_IT>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d009      	beq.n	8007d90 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2210      	movs	r2, #16
 8007d80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e020      	b.n	8007dd2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2240      	movs	r2, #64	@ 0x40
 8007d96:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	613b      	str	r3, [r7, #16]
   return(result);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3308      	adds	r3, #8
 8007db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007db8:	623a      	str	r2, [r7, #32]
 8007dba:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	69f9      	ldr	r1, [r7, #28]
 8007dbe:	6a3a      	ldr	r2, [r7, #32]
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e5      	bne.n	8007d98 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e000      	b.n	8007dd2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007dd0:	2302      	movs	r3, #2
  }
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3728      	adds	r7, #40	@ 0x28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	080092b3 	.word	0x080092b3
 8007de0:	0800934d 	.word	0x0800934d
 8007de4:	080094d3 	.word	0x080094d3

08007de8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08a      	sub	sp, #40	@ 0x28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	4613      	mov	r3, r2
 8007df4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d137      	bne.n	8007e70 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <HAL_UART_Receive_DMA+0x24>
 8007e06:	88fb      	ldrh	r3, [r7, #6]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e030      	b.n	8007e72 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a18      	ldr	r2, [pc, #96]	@ (8007e7c <HAL_UART_Receive_DMA+0x94>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d01f      	beq.n	8007e60 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d018      	beq.n	8007e60 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4c:	623b      	str	r3, [r7, #32]
 8007e4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	69f9      	ldr	r1, [r7, #28]
 8007e52:	6a3a      	ldr	r2, [r7, #32]
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e6      	bne.n	8007e2e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e60:	88fb      	ldrh	r3, [r7, #6]
 8007e62:	461a      	mov	r2, r3
 8007e64:	68b9      	ldr	r1, [r7, #8]
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f001 f8d6 	bl	8009018 <UART_Start_Receive_DMA>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	e000      	b.n	8007e72 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e70:	2302      	movs	r3, #2
  }
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3728      	adds	r7, #40	@ 0x28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	40008000 	.word	0x40008000

08007e80 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b090      	sub	sp, #64	@ 0x40
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea2:	2b80      	cmp	r3, #128	@ 0x80
 8007ea4:	d139      	bne.n	8007f1a <HAL_UART_DMAStop+0x9a>
 8007ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ea8:	2b21      	cmp	r3, #33	@ 0x21
 8007eaa:	d136      	bne.n	8007f1a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3308      	adds	r3, #8
 8007eca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ecc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ece:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ed4:	e841 2300 	strex	r3, r2, [r1]
 8007ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e5      	bne.n	8007eac <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d015      	beq.n	8007f14 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fb fa76 	bl	80033de <HAL_DMA_Abort>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00d      	beq.n	8007f14 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fb fbeb 	bl	80036d8 <HAL_DMA_GetError>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d105      	bne.n	8007f14 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2210      	movs	r2, #16
 8007f0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e047      	b.n	8007fa4 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 f925 	bl	8009164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f24:	2b40      	cmp	r3, #64	@ 0x40
 8007f26:	d13c      	bne.n	8007fa2 <HAL_UART_DMAStop+0x122>
 8007f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2a:	2b22      	cmp	r3, #34	@ 0x22
 8007f2c:	d139      	bne.n	8007fa2 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3308      	adds	r3, #8
 8007f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f4e:	61ba      	str	r2, [r7, #24]
 8007f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	6979      	ldr	r1, [r7, #20]
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e5      	bne.n	8007f2e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d017      	beq.n	8007f9c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fb fa33 	bl	80033de <HAL_DMA_Abort>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00e      	beq.n	8007f9c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fb fba7 	bl	80036d8 <HAL_DMA_GetError>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d105      	bne.n	8007f9c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2210      	movs	r2, #16
 8007f94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e003      	b.n	8007fa4 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 f922 	bl	80091e6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3740      	adds	r7, #64	@ 0x40
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b0ba      	sub	sp, #232	@ 0xe8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007fd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007fd6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007fda:	4013      	ands	r3, r2
 8007fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d11b      	bne.n	8008020 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d015      	beq.n	8008020 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ff8:	f003 0320 	and.w	r3, r3, #32
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d105      	bne.n	800800c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d009      	beq.n	8008020 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 8300 	beq.w	8008616 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
      }
      return;
 800801e:	e2fa      	b.n	8008616 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 8123 	beq.w	8008270 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800802a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800802e:	4b8d      	ldr	r3, [pc, #564]	@ (8008264 <HAL_UART_IRQHandler+0x2b8>)
 8008030:	4013      	ands	r3, r2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d106      	bne.n	8008044 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008036:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800803a:	4b8b      	ldr	r3, [pc, #556]	@ (8008268 <HAL_UART_IRQHandler+0x2bc>)
 800803c:	4013      	ands	r3, r2
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 8116 	beq.w	8008270 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	d011      	beq.n	8008074 <HAL_UART_IRQHandler+0xc8>
 8008050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00b      	beq.n	8008074 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2201      	movs	r2, #1
 8008062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800806a:	f043 0201 	orr.w	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d011      	beq.n	80080a4 <HAL_UART_IRQHandler+0xf8>
 8008080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00b      	beq.n	80080a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2202      	movs	r2, #2
 8008092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800809a:	f043 0204 	orr.w	r2, r3, #4
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d011      	beq.n	80080d4 <HAL_UART_IRQHandler+0x128>
 80080b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00b      	beq.n	80080d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2204      	movs	r2, #4
 80080c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ca:	f043 0202 	orr.w	r2, r3, #2
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080d8:	f003 0308 	and.w	r3, r3, #8
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d017      	beq.n	8008110 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080e4:	f003 0320 	and.w	r3, r3, #32
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d105      	bne.n	80080f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80080ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080f0:	4b5c      	ldr	r3, [pc, #368]	@ (8008264 <HAL_UART_IRQHandler+0x2b8>)
 80080f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00b      	beq.n	8008110 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2208      	movs	r2, #8
 80080fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008106:	f043 0208 	orr.w	r2, r3, #8
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008118:	2b00      	cmp	r3, #0
 800811a:	d012      	beq.n	8008142 <HAL_UART_IRQHandler+0x196>
 800811c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008120:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00c      	beq.n	8008142 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008130:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008138:	f043 0220 	orr.w	r2, r3, #32
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 8266 	beq.w	800861a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800814e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b00      	cmp	r3, #0
 8008158:	d013      	beq.n	8008182 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800815a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800815e:	f003 0320 	and.w	r3, r3, #32
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800816a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d007      	beq.n	8008182 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008188:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008196:	2b40      	cmp	r3, #64	@ 0x40
 8008198:	d005      	beq.n	80081a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800819a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800819e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d054      	beq.n	8008250 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f001 f81d 	bl	80091e6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081b6:	2b40      	cmp	r3, #64	@ 0x40
 80081b8:	d146      	bne.n	8008248 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3308      	adds	r3, #8
 80081c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3308      	adds	r3, #8
 80081e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80081e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80081ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80081f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80081fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1d9      	bne.n	80081ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800820c:	2b00      	cmp	r3, #0
 800820e:	d017      	beq.n	8008240 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008216:	4a15      	ldr	r2, [pc, #84]	@ (800826c <HAL_UART_IRQHandler+0x2c0>)
 8008218:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008220:	4618      	mov	r0, r3
 8008222:	f7fb f935 	bl	8003490 <HAL_DMA_Abort_IT>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d019      	beq.n	8008260 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800823a:	4610      	mov	r0, r2
 800823c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823e:	e00f      	b.n	8008260 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fa1d 	bl	8008680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008246:	e00b      	b.n	8008260 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fa19 	bl	8008680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800824e:	e007      	b.n	8008260 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fa15 	bl	8008680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800825e:	e1dc      	b.n	800861a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008260:	bf00      	nop
    return;
 8008262:	e1da      	b.n	800861a <HAL_UART_IRQHandler+0x66e>
 8008264:	10000001 	.word	0x10000001
 8008268:	04000120 	.word	0x04000120
 800826c:	08009553 	.word	0x08009553

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008274:	2b01      	cmp	r3, #1
 8008276:	f040 8170 	bne.w	800855a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800827a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800827e:	f003 0310 	and.w	r3, r3, #16
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 8169 	beq.w	800855a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800828c:	f003 0310 	and.w	r3, r3, #16
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 8162 	beq.w	800855a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2210      	movs	r2, #16
 800829c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a8:	2b40      	cmp	r3, #64	@ 0x40
 80082aa:	f040 80d8 	bne.w	800845e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 80af 	beq.w	8008424 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082d0:	429a      	cmp	r2, r3
 80082d2:	f080 80a7 	bcs.w	8008424 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f040 8087 	bne.w	8008402 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008300:	e853 3f00 	ldrex	r3, [r3]
 8008304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008308:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800830c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008310:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	461a      	mov	r2, r3
 800831a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800831e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008322:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800832a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008336:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1da      	bne.n	80082f4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3308      	adds	r3, #8
 8008344:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800834e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008350:	f023 0301 	bic.w	r3, r3, #1
 8008354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3308      	adds	r3, #8
 800835e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008362:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008366:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800836a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008374:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e1      	bne.n	800833e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3308      	adds	r3, #8
 8008380:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800838a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800838c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008390:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3308      	adds	r3, #8
 800839a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800839e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80083a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80083a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80083ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e3      	bne.n	800837a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083d0:	f023 0310 	bic.w	r3, r3, #16
 80083d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1e4      	bne.n	80083c0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fa ffee 	bl	80033de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2202      	movs	r2, #2
 8008406:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008414:	b29b      	uxth	r3, r3
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	b29b      	uxth	r3, r3
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f939 	bl	8008694 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008422:	e0fc      	b.n	800861e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800842a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800842e:	429a      	cmp	r2, r3
 8008430:	f040 80f5 	bne.w	800861e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0320 	and.w	r3, r3, #32
 8008442:	2b20      	cmp	r3, #32
 8008444:	f040 80eb 	bne.w	800861e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f91c 	bl	8008694 <HAL_UARTEx_RxEventCallback>
      return;
 800845c:	e0df      	b.n	800861e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800846a:	b29b      	uxth	r3, r3
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008478:	b29b      	uxth	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 80d1 	beq.w	8008622 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 80cc 	beq.w	8008622 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800849a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800849e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80084ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084b4:	e841 2300 	strex	r3, r2, [r1]
 80084b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1e4      	bne.n	800848a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3308      	adds	r3, #8
 80084c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	623b      	str	r3, [r7, #32]
   return(result);
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084d6:	f023 0301 	bic.w	r3, r3, #1
 80084da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3308      	adds	r3, #8
 80084e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80084e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80084ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084f0:	e841 2300 	strex	r3, r2, [r1]
 80084f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1e1      	bne.n	80084c0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2220      	movs	r2, #32
 8008500:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	60fb      	str	r3, [r7, #12]
   return(result);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f023 0310 	bic.w	r3, r3, #16
 8008524:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	461a      	mov	r2, r3
 800852e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008532:	61fb      	str	r3, [r7, #28]
 8008534:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008536:	69b9      	ldr	r1, [r7, #24]
 8008538:	69fa      	ldr	r2, [r7, #28]
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	617b      	str	r3, [r7, #20]
   return(result);
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1e4      	bne.n	8008510 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2202      	movs	r2, #2
 800854a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800854c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f89e 	bl	8008694 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008558:	e063      	b.n	8008622 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800855a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800855e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00e      	beq.n	8008584 <HAL_UART_IRQHandler+0x5d8>
 8008566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800856a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d008      	beq.n	8008584 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800857a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f001 f825 	bl	80095cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008582:	e051      	b.n	8008628 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800858c:	2b00      	cmp	r3, #0
 800858e:	d014      	beq.n	80085ba <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008598:	2b00      	cmp	r3, #0
 800859a:	d105      	bne.n	80085a8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800859c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d008      	beq.n	80085ba <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d03a      	beq.n	8008626 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	4798      	blx	r3
    }
    return;
 80085b8:	e035      	b.n	8008626 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d009      	beq.n	80085da <HAL_UART_IRQHandler+0x62e>
 80085c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 ffcf 	bl	8009576 <UART_EndTransmit_IT>
    return;
 80085d8:	e026      	b.n	8008628 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80085da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d009      	beq.n	80085fa <HAL_UART_IRQHandler+0x64e>
 80085e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fffe 	bl	80095f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085f8:	e016      	b.n	8008628 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d010      	beq.n	8008628 <HAL_UART_IRQHandler+0x67c>
 8008606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800860a:	2b00      	cmp	r3, #0
 800860c:	da0c      	bge.n	8008628 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 ffe6 	bl	80095e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008614:	e008      	b.n	8008628 <HAL_UART_IRQHandler+0x67c>
      return;
 8008616:	bf00      	nop
 8008618:	e006      	b.n	8008628 <HAL_UART_IRQHandler+0x67c>
    return;
 800861a:	bf00      	nop
 800861c:	e004      	b.n	8008628 <HAL_UART_IRQHandler+0x67c>
      return;
 800861e:	bf00      	nop
 8008620:	e002      	b.n	8008628 <HAL_UART_IRQHandler+0x67c>
      return;
 8008622:	bf00      	nop
 8008624:	e000      	b.n	8008628 <HAL_UART_IRQHandler+0x67c>
    return;
 8008626:	bf00      	nop
  }
}
 8008628:	37e8      	adds	r7, #232	@ 0xe8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop

08008630 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086b0:	b08c      	sub	sp, #48	@ 0x30
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	431a      	orrs	r2, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	431a      	orrs	r2, r3
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	69db      	ldr	r3, [r3, #28]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	4baa      	ldr	r3, [pc, #680]	@ (8008984 <UART_SetConfig+0x2d8>)
 80086dc:	4013      	ands	r3, r2
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	6812      	ldr	r2, [r2, #0]
 80086e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086e4:	430b      	orrs	r3, r1
 80086e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	68da      	ldr	r2, [r3, #12]
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a9f      	ldr	r2, [pc, #636]	@ (8008988 <UART_SetConfig+0x2dc>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d004      	beq.n	8008718 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008714:	4313      	orrs	r3, r2
 8008716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008722:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	6812      	ldr	r2, [r2, #0]
 800872a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800872c:	430b      	orrs	r3, r1
 800872e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008736:	f023 010f 	bic.w	r1, r3, #15
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a90      	ldr	r2, [pc, #576]	@ (800898c <UART_SetConfig+0x2e0>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d125      	bne.n	800879c <UART_SetConfig+0xf0>
 8008750:	4b8f      	ldr	r3, [pc, #572]	@ (8008990 <UART_SetConfig+0x2e4>)
 8008752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008756:	f003 0303 	and.w	r3, r3, #3
 800875a:	2b03      	cmp	r3, #3
 800875c:	d81a      	bhi.n	8008794 <UART_SetConfig+0xe8>
 800875e:	a201      	add	r2, pc, #4	@ (adr r2, 8008764 <UART_SetConfig+0xb8>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	08008775 	.word	0x08008775
 8008768:	08008785 	.word	0x08008785
 800876c:	0800877d 	.word	0x0800877d
 8008770:	0800878d 	.word	0x0800878d
 8008774:	2301      	movs	r3, #1
 8008776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800877a:	e116      	b.n	80089aa <UART_SetConfig+0x2fe>
 800877c:	2302      	movs	r3, #2
 800877e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008782:	e112      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008784:	2304      	movs	r3, #4
 8008786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800878a:	e10e      	b.n	80089aa <UART_SetConfig+0x2fe>
 800878c:	2308      	movs	r3, #8
 800878e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008792:	e10a      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008794:	2310      	movs	r3, #16
 8008796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800879a:	e106      	b.n	80089aa <UART_SetConfig+0x2fe>
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a7c      	ldr	r2, [pc, #496]	@ (8008994 <UART_SetConfig+0x2e8>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d138      	bne.n	8008818 <UART_SetConfig+0x16c>
 80087a6:	4b7a      	ldr	r3, [pc, #488]	@ (8008990 <UART_SetConfig+0x2e4>)
 80087a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ac:	f003 030c 	and.w	r3, r3, #12
 80087b0:	2b0c      	cmp	r3, #12
 80087b2:	d82d      	bhi.n	8008810 <UART_SetConfig+0x164>
 80087b4:	a201      	add	r2, pc, #4	@ (adr r2, 80087bc <UART_SetConfig+0x110>)
 80087b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ba:	bf00      	nop
 80087bc:	080087f1 	.word	0x080087f1
 80087c0:	08008811 	.word	0x08008811
 80087c4:	08008811 	.word	0x08008811
 80087c8:	08008811 	.word	0x08008811
 80087cc:	08008801 	.word	0x08008801
 80087d0:	08008811 	.word	0x08008811
 80087d4:	08008811 	.word	0x08008811
 80087d8:	08008811 	.word	0x08008811
 80087dc:	080087f9 	.word	0x080087f9
 80087e0:	08008811 	.word	0x08008811
 80087e4:	08008811 	.word	0x08008811
 80087e8:	08008811 	.word	0x08008811
 80087ec:	08008809 	.word	0x08008809
 80087f0:	2300      	movs	r3, #0
 80087f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087f6:	e0d8      	b.n	80089aa <UART_SetConfig+0x2fe>
 80087f8:	2302      	movs	r3, #2
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087fe:	e0d4      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008800:	2304      	movs	r3, #4
 8008802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008806:	e0d0      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008808:	2308      	movs	r3, #8
 800880a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800880e:	e0cc      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008810:	2310      	movs	r3, #16
 8008812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008816:	e0c8      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a5e      	ldr	r2, [pc, #376]	@ (8008998 <UART_SetConfig+0x2ec>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d125      	bne.n	800886e <UART_SetConfig+0x1c2>
 8008822:	4b5b      	ldr	r3, [pc, #364]	@ (8008990 <UART_SetConfig+0x2e4>)
 8008824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008828:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800882c:	2b30      	cmp	r3, #48	@ 0x30
 800882e:	d016      	beq.n	800885e <UART_SetConfig+0x1b2>
 8008830:	2b30      	cmp	r3, #48	@ 0x30
 8008832:	d818      	bhi.n	8008866 <UART_SetConfig+0x1ba>
 8008834:	2b20      	cmp	r3, #32
 8008836:	d00a      	beq.n	800884e <UART_SetConfig+0x1a2>
 8008838:	2b20      	cmp	r3, #32
 800883a:	d814      	bhi.n	8008866 <UART_SetConfig+0x1ba>
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <UART_SetConfig+0x19a>
 8008840:	2b10      	cmp	r3, #16
 8008842:	d008      	beq.n	8008856 <UART_SetConfig+0x1aa>
 8008844:	e00f      	b.n	8008866 <UART_SetConfig+0x1ba>
 8008846:	2300      	movs	r3, #0
 8008848:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800884c:	e0ad      	b.n	80089aa <UART_SetConfig+0x2fe>
 800884e:	2302      	movs	r3, #2
 8008850:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008854:	e0a9      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008856:	2304      	movs	r3, #4
 8008858:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800885c:	e0a5      	b.n	80089aa <UART_SetConfig+0x2fe>
 800885e:	2308      	movs	r3, #8
 8008860:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008864:	e0a1      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008866:	2310      	movs	r3, #16
 8008868:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800886c:	e09d      	b.n	80089aa <UART_SetConfig+0x2fe>
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a4a      	ldr	r2, [pc, #296]	@ (800899c <UART_SetConfig+0x2f0>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d125      	bne.n	80088c4 <UART_SetConfig+0x218>
 8008878:	4b45      	ldr	r3, [pc, #276]	@ (8008990 <UART_SetConfig+0x2e4>)
 800887a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800887e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008882:	2bc0      	cmp	r3, #192	@ 0xc0
 8008884:	d016      	beq.n	80088b4 <UART_SetConfig+0x208>
 8008886:	2bc0      	cmp	r3, #192	@ 0xc0
 8008888:	d818      	bhi.n	80088bc <UART_SetConfig+0x210>
 800888a:	2b80      	cmp	r3, #128	@ 0x80
 800888c:	d00a      	beq.n	80088a4 <UART_SetConfig+0x1f8>
 800888e:	2b80      	cmp	r3, #128	@ 0x80
 8008890:	d814      	bhi.n	80088bc <UART_SetConfig+0x210>
 8008892:	2b00      	cmp	r3, #0
 8008894:	d002      	beq.n	800889c <UART_SetConfig+0x1f0>
 8008896:	2b40      	cmp	r3, #64	@ 0x40
 8008898:	d008      	beq.n	80088ac <UART_SetConfig+0x200>
 800889a:	e00f      	b.n	80088bc <UART_SetConfig+0x210>
 800889c:	2300      	movs	r3, #0
 800889e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088a2:	e082      	b.n	80089aa <UART_SetConfig+0x2fe>
 80088a4:	2302      	movs	r3, #2
 80088a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088aa:	e07e      	b.n	80089aa <UART_SetConfig+0x2fe>
 80088ac:	2304      	movs	r3, #4
 80088ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088b2:	e07a      	b.n	80089aa <UART_SetConfig+0x2fe>
 80088b4:	2308      	movs	r3, #8
 80088b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ba:	e076      	b.n	80089aa <UART_SetConfig+0x2fe>
 80088bc:	2310      	movs	r3, #16
 80088be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088c2:	e072      	b.n	80089aa <UART_SetConfig+0x2fe>
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a35      	ldr	r2, [pc, #212]	@ (80089a0 <UART_SetConfig+0x2f4>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d12a      	bne.n	8008924 <UART_SetConfig+0x278>
 80088ce:	4b30      	ldr	r3, [pc, #192]	@ (8008990 <UART_SetConfig+0x2e4>)
 80088d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088dc:	d01a      	beq.n	8008914 <UART_SetConfig+0x268>
 80088de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088e2:	d81b      	bhi.n	800891c <UART_SetConfig+0x270>
 80088e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088e8:	d00c      	beq.n	8008904 <UART_SetConfig+0x258>
 80088ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ee:	d815      	bhi.n	800891c <UART_SetConfig+0x270>
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d003      	beq.n	80088fc <UART_SetConfig+0x250>
 80088f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088f8:	d008      	beq.n	800890c <UART_SetConfig+0x260>
 80088fa:	e00f      	b.n	800891c <UART_SetConfig+0x270>
 80088fc:	2300      	movs	r3, #0
 80088fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008902:	e052      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008904:	2302      	movs	r3, #2
 8008906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800890a:	e04e      	b.n	80089aa <UART_SetConfig+0x2fe>
 800890c:	2304      	movs	r3, #4
 800890e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008912:	e04a      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008914:	2308      	movs	r3, #8
 8008916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800891a:	e046      	b.n	80089aa <UART_SetConfig+0x2fe>
 800891c:	2310      	movs	r3, #16
 800891e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008922:	e042      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a17      	ldr	r2, [pc, #92]	@ (8008988 <UART_SetConfig+0x2dc>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d13a      	bne.n	80089a4 <UART_SetConfig+0x2f8>
 800892e:	4b18      	ldr	r3, [pc, #96]	@ (8008990 <UART_SetConfig+0x2e4>)
 8008930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008934:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008938:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800893c:	d01a      	beq.n	8008974 <UART_SetConfig+0x2c8>
 800893e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008942:	d81b      	bhi.n	800897c <UART_SetConfig+0x2d0>
 8008944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008948:	d00c      	beq.n	8008964 <UART_SetConfig+0x2b8>
 800894a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800894e:	d815      	bhi.n	800897c <UART_SetConfig+0x2d0>
 8008950:	2b00      	cmp	r3, #0
 8008952:	d003      	beq.n	800895c <UART_SetConfig+0x2b0>
 8008954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008958:	d008      	beq.n	800896c <UART_SetConfig+0x2c0>
 800895a:	e00f      	b.n	800897c <UART_SetConfig+0x2d0>
 800895c:	2300      	movs	r3, #0
 800895e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008962:	e022      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008964:	2302      	movs	r3, #2
 8008966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800896a:	e01e      	b.n	80089aa <UART_SetConfig+0x2fe>
 800896c:	2304      	movs	r3, #4
 800896e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008972:	e01a      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008974:	2308      	movs	r3, #8
 8008976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800897a:	e016      	b.n	80089aa <UART_SetConfig+0x2fe>
 800897c:	2310      	movs	r3, #16
 800897e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008982:	e012      	b.n	80089aa <UART_SetConfig+0x2fe>
 8008984:	cfff69f3 	.word	0xcfff69f3
 8008988:	40008000 	.word	0x40008000
 800898c:	40013800 	.word	0x40013800
 8008990:	40021000 	.word	0x40021000
 8008994:	40004400 	.word	0x40004400
 8008998:	40004800 	.word	0x40004800
 800899c:	40004c00 	.word	0x40004c00
 80089a0:	40005000 	.word	0x40005000
 80089a4:	2310      	movs	r3, #16
 80089a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4aae      	ldr	r2, [pc, #696]	@ (8008c68 <UART_SetConfig+0x5bc>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	f040 8097 	bne.w	8008ae4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80089ba:	2b08      	cmp	r3, #8
 80089bc:	d823      	bhi.n	8008a06 <UART_SetConfig+0x35a>
 80089be:	a201      	add	r2, pc, #4	@ (adr r2, 80089c4 <UART_SetConfig+0x318>)
 80089c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c4:	080089e9 	.word	0x080089e9
 80089c8:	08008a07 	.word	0x08008a07
 80089cc:	080089f1 	.word	0x080089f1
 80089d0:	08008a07 	.word	0x08008a07
 80089d4:	080089f7 	.word	0x080089f7
 80089d8:	08008a07 	.word	0x08008a07
 80089dc:	08008a07 	.word	0x08008a07
 80089e0:	08008a07 	.word	0x08008a07
 80089e4:	080089ff 	.word	0x080089ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089e8:	f7fe f8b2 	bl	8006b50 <HAL_RCC_GetPCLK1Freq>
 80089ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089ee:	e010      	b.n	8008a12 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089f0:	4b9e      	ldr	r3, [pc, #632]	@ (8008c6c <UART_SetConfig+0x5c0>)
 80089f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089f4:	e00d      	b.n	8008a12 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089f6:	f7fe f83d 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 80089fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089fc:	e009      	b.n	8008a12 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a04:	e005      	b.n	8008a12 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008a06:	2300      	movs	r3, #0
 8008a08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 8130 	beq.w	8008c7a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1e:	4a94      	ldr	r2, [pc, #592]	@ (8008c70 <UART_SetConfig+0x5c4>)
 8008a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a24:	461a      	mov	r2, r3
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a2c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	4613      	mov	r3, r2
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	4413      	add	r3, r2
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d305      	bcc.n	8008a4a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d903      	bls.n	8008a52 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a50:	e113      	b.n	8008c7a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	2200      	movs	r2, #0
 8008a56:	60bb      	str	r3, [r7, #8]
 8008a58:	60fa      	str	r2, [r7, #12]
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a5e:	4a84      	ldr	r2, [pc, #528]	@ (8008c70 <UART_SetConfig+0x5c4>)
 8008a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	2200      	movs	r2, #0
 8008a68:	603b      	str	r3, [r7, #0]
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a74:	f7f8 f85a 	bl	8000b2c <__aeabi_uldivmod>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4619      	mov	r1, r3
 8008a80:	f04f 0200 	mov.w	r2, #0
 8008a84:	f04f 0300 	mov.w	r3, #0
 8008a88:	020b      	lsls	r3, r1, #8
 8008a8a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a8e:	0202      	lsls	r2, r0, #8
 8008a90:	6979      	ldr	r1, [r7, #20]
 8008a92:	6849      	ldr	r1, [r1, #4]
 8008a94:	0849      	lsrs	r1, r1, #1
 8008a96:	2000      	movs	r0, #0
 8008a98:	460c      	mov	r4, r1
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	eb12 0804 	adds.w	r8, r2, r4
 8008aa0:	eb43 0905 	adc.w	r9, r3, r5
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	469a      	mov	sl, r3
 8008aac:	4693      	mov	fp, r2
 8008aae:	4652      	mov	r2, sl
 8008ab0:	465b      	mov	r3, fp
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	4649      	mov	r1, r9
 8008ab6:	f7f8 f839 	bl	8000b2c <__aeabi_uldivmod>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4613      	mov	r3, r2
 8008ac0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ac8:	d308      	bcc.n	8008adc <UART_SetConfig+0x430>
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ad0:	d204      	bcs.n	8008adc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6a3a      	ldr	r2, [r7, #32]
 8008ad8:	60da      	str	r2, [r3, #12]
 8008ada:	e0ce      	b.n	8008c7a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008ae2:	e0ca      	b.n	8008c7a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008aec:	d166      	bne.n	8008bbc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008aee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008af2:	2b08      	cmp	r3, #8
 8008af4:	d827      	bhi.n	8008b46 <UART_SetConfig+0x49a>
 8008af6:	a201      	add	r2, pc, #4	@ (adr r2, 8008afc <UART_SetConfig+0x450>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008b21 	.word	0x08008b21
 8008b00:	08008b29 	.word	0x08008b29
 8008b04:	08008b31 	.word	0x08008b31
 8008b08:	08008b47 	.word	0x08008b47
 8008b0c:	08008b37 	.word	0x08008b37
 8008b10:	08008b47 	.word	0x08008b47
 8008b14:	08008b47 	.word	0x08008b47
 8008b18:	08008b47 	.word	0x08008b47
 8008b1c:	08008b3f 	.word	0x08008b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b20:	f7fe f816 	bl	8006b50 <HAL_RCC_GetPCLK1Freq>
 8008b24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b26:	e014      	b.n	8008b52 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b28:	f7fe f828 	bl	8006b7c <HAL_RCC_GetPCLK2Freq>
 8008b2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b2e:	e010      	b.n	8008b52 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b30:	4b4e      	ldr	r3, [pc, #312]	@ (8008c6c <UART_SetConfig+0x5c0>)
 8008b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b34:	e00d      	b.n	8008b52 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b36:	f7fd ff9d 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 8008b3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b3c:	e009      	b.n	8008b52 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b44:	e005      	b.n	8008b52 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 8090 	beq.w	8008c7a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5e:	4a44      	ldr	r2, [pc, #272]	@ (8008c70 <UART_SetConfig+0x5c4>)
 8008b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b64:	461a      	mov	r2, r3
 8008b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b6c:	005a      	lsls	r2, r3, #1
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	085b      	lsrs	r3, r3, #1
 8008b74:	441a      	add	r2, r3
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	2b0f      	cmp	r3, #15
 8008b84:	d916      	bls.n	8008bb4 <UART_SetConfig+0x508>
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b8c:	d212      	bcs.n	8008bb4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f023 030f 	bic.w	r3, r3, #15
 8008b96:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	085b      	lsrs	r3, r3, #1
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	f003 0307 	and.w	r3, r3, #7
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	8bfb      	ldrh	r3, [r7, #30]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	8bfa      	ldrh	r2, [r7, #30]
 8008bb0:	60da      	str	r2, [r3, #12]
 8008bb2:	e062      	b.n	8008c7a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008bba:	e05e      	b.n	8008c7a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bbc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008bc0:	2b08      	cmp	r3, #8
 8008bc2:	d828      	bhi.n	8008c16 <UART_SetConfig+0x56a>
 8008bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8008bcc <UART_SetConfig+0x520>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008bf1 	.word	0x08008bf1
 8008bd0:	08008bf9 	.word	0x08008bf9
 8008bd4:	08008c01 	.word	0x08008c01
 8008bd8:	08008c17 	.word	0x08008c17
 8008bdc:	08008c07 	.word	0x08008c07
 8008be0:	08008c17 	.word	0x08008c17
 8008be4:	08008c17 	.word	0x08008c17
 8008be8:	08008c17 	.word	0x08008c17
 8008bec:	08008c0f 	.word	0x08008c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bf0:	f7fd ffae 	bl	8006b50 <HAL_RCC_GetPCLK1Freq>
 8008bf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bf6:	e014      	b.n	8008c22 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bf8:	f7fd ffc0 	bl	8006b7c <HAL_RCC_GetPCLK2Freq>
 8008bfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bfe:	e010      	b.n	8008c22 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c00:	4b1a      	ldr	r3, [pc, #104]	@ (8008c6c <UART_SetConfig+0x5c0>)
 8008c02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c04:	e00d      	b.n	8008c22 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c06:	f7fd ff35 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 8008c0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c0c:	e009      	b.n	8008c22 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c14:	e005      	b.n	8008c22 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c20:	bf00      	nop
    }

    if (pclk != 0U)
 8008c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d028      	beq.n	8008c7a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2c:	4a10      	ldr	r2, [pc, #64]	@ (8008c70 <UART_SetConfig+0x5c4>)
 8008c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c32:	461a      	mov	r2, r3
 8008c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c36:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	085b      	lsrs	r3, r3, #1
 8008c40:	441a      	add	r2, r3
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	2b0f      	cmp	r3, #15
 8008c50:	d910      	bls.n	8008c74 <UART_SetConfig+0x5c8>
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c58:	d20c      	bcs.n	8008c74 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	60da      	str	r2, [r3, #12]
 8008c64:	e009      	b.n	8008c7a <UART_SetConfig+0x5ce>
 8008c66:	bf00      	nop
 8008c68:	40008000 	.word	0x40008000
 8008c6c:	00f42400 	.word	0x00f42400
 8008c70:	0801aaf4 	.word	0x0801aaf4
      }
      else
      {
        ret = HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	2200      	movs	r2, #0
 8008c94:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008c96:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3730      	adds	r7, #48	@ 0x30
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb0:	f003 0308 	and.w	r3, r3, #8
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00a      	beq.n	8008cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00a      	beq.n	8008cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	430a      	orrs	r2, r1
 8008cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf4:	f003 0302 	and.w	r3, r3, #2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00a      	beq.n	8008d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d16:	f003 0304 	and.w	r3, r3, #4
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d38:	f003 0310 	and.w	r3, r3, #16
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00a      	beq.n	8008d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	430a      	orrs	r2, r1
 8008d54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d5a:	f003 0320 	and.w	r3, r3, #32
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00a      	beq.n	8008d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	430a      	orrs	r2, r1
 8008d76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d01a      	beq.n	8008dba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008da2:	d10a      	bne.n	8008dba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00a      	beq.n	8008ddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	605a      	str	r2, [r3, #4]
  }
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b098      	sub	sp, #96	@ 0x60
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008df8:	f7fa f8c0 	bl	8002f7c <HAL_GetTick>
 8008dfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0308 	and.w	r3, r3, #8
 8008e08:	2b08      	cmp	r3, #8
 8008e0a:	d12f      	bne.n	8008e6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e14:	2200      	movs	r2, #0
 8008e16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f88e 	bl	8008f3c <UART_WaitOnFlagUntilTimeout>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d022      	beq.n	8008e6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	461a      	mov	r2, r3
 8008e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e6      	bne.n	8008e26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e063      	b.n	8008f34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0304 	and.w	r3, r3, #4
 8008e76:	2b04      	cmp	r3, #4
 8008e78:	d149      	bne.n	8008f0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e82:	2200      	movs	r2, #0
 8008e84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f857 	bl	8008f3c <UART_WaitOnFlagUntilTimeout>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d03c      	beq.n	8008f0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e6      	bne.n	8008e94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3308      	adds	r3, #8
 8008ecc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f023 0301 	bic.w	r3, r3, #1
 8008edc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3308      	adds	r3, #8
 8008ee4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ee6:	61fa      	str	r2, [r7, #28]
 8008ee8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	69b9      	ldr	r1, [r7, #24]
 8008eec:	69fa      	ldr	r2, [r7, #28]
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e5      	bne.n	8008ec6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e012      	b.n	8008f34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2220      	movs	r2, #32
 8008f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3758      	adds	r7, #88	@ 0x58
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	603b      	str	r3, [r7, #0]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f4c:	e04f      	b.n	8008fee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f54:	d04b      	beq.n	8008fee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f56:	f7fa f811 	bl	8002f7c <HAL_GetTick>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d302      	bcc.n	8008f6c <UART_WaitOnFlagUntilTimeout+0x30>
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e04e      	b.n	800900e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0304 	and.w	r3, r3, #4
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d037      	beq.n	8008fee <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b80      	cmp	r3, #128	@ 0x80
 8008f82:	d034      	beq.n	8008fee <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2b40      	cmp	r3, #64	@ 0x40
 8008f88:	d031      	beq.n	8008fee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	f003 0308 	and.w	r3, r3, #8
 8008f94:	2b08      	cmp	r3, #8
 8008f96:	d110      	bne.n	8008fba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2208      	movs	r2, #8
 8008f9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 f920 	bl	80091e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2208      	movs	r2, #8
 8008faa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e029      	b.n	800900e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fc8:	d111      	bne.n	8008fee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 f906 	bl	80091e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e00f      	b.n	800900e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69da      	ldr	r2, [r3, #28]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	bf0c      	ite	eq
 8008ffe:	2301      	moveq	r3, #1
 8009000:	2300      	movne	r3, #0
 8009002:	b2db      	uxtb	r3, r3
 8009004:	461a      	mov	r2, r3
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	429a      	cmp	r2, r3
 800900a:	d0a0      	beq.n	8008f4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b096      	sub	sp, #88	@ 0x58
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	4613      	mov	r3, r2
 8009024:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	88fa      	ldrh	r2, [r7, #6]
 8009030:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2222      	movs	r2, #34	@ 0x22
 8009040:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800904a:	2b00      	cmp	r3, #0
 800904c:	d02d      	beq.n	80090aa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009054:	4a40      	ldr	r2, [pc, #256]	@ (8009158 <UART_Start_Receive_DMA+0x140>)
 8009056:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800905e:	4a3f      	ldr	r2, [pc, #252]	@ (800915c <UART_Start_Receive_DMA+0x144>)
 8009060:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009068:	4a3d      	ldr	r2, [pc, #244]	@ (8009160 <UART_Start_Receive_DMA+0x148>)
 800906a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009072:	2200      	movs	r2, #0
 8009074:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3324      	adds	r3, #36	@ 0x24
 8009082:	4619      	mov	r1, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009088:	461a      	mov	r2, r3
 800908a:	88fb      	ldrh	r3, [r7, #6]
 800908c:	f7fa f92c 	bl	80032e8 <HAL_DMA_Start_IT>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d009      	beq.n	80090aa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2210      	movs	r2, #16
 800909a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e051      	b.n	800914e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d018      	beq.n	80090e4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	461a      	mov	r2, r3
 80090ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090d2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80090d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090d8:	e841 2300 	strex	r3, r2, [r1]
 80090dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80090de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1e6      	bne.n	80090b2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3308      	adds	r3, #8
 80090ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ee:	e853 3f00 	ldrex	r3, [r3]
 80090f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f6:	f043 0301 	orr.w	r3, r3, #1
 80090fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3308      	adds	r3, #8
 8009102:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009104:	637a      	str	r2, [r7, #52]	@ 0x34
 8009106:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800910a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800910c:	e841 2300 	strex	r3, r2, [r1]
 8009110:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e5      	bne.n	80090e4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3308      	adds	r3, #8
 800911e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	e853 3f00 	ldrex	r3, [r3]
 8009126:	613b      	str	r3, [r7, #16]
   return(result);
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800912e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3308      	adds	r3, #8
 8009136:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009138:	623a      	str	r2, [r7, #32]
 800913a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913c:	69f9      	ldr	r1, [r7, #28]
 800913e:	6a3a      	ldr	r2, [r7, #32]
 8009140:	e841 2300 	strex	r3, r2, [r1]
 8009144:	61bb      	str	r3, [r7, #24]
   return(result);
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e5      	bne.n	8009118 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3758      	adds	r7, #88	@ 0x58
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	08009369 	.word	0x08009369
 800915c:	08009495 	.word	0x08009495
 8009160:	080094d3 	.word	0x080094d3

08009164 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009164:	b480      	push	{r7}
 8009166:	b08f      	sub	sp, #60	@ 0x3c
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	61fb      	str	r3, [r7, #28]
   return(result);
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009180:	637b      	str	r3, [r7, #52]	@ 0x34
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800918a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800918c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e6      	bne.n	800916c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3308      	adds	r3, #8
 80091a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80091b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3308      	adds	r3, #8
 80091bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091be:	61ba      	str	r2, [r7, #24]
 80091c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6979      	ldr	r1, [r7, #20]
 80091c4:	69ba      	ldr	r2, [r7, #24]
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	613b      	str	r3, [r7, #16]
   return(result);
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e5      	bne.n	800919e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80091da:	bf00      	nop
 80091dc:	373c      	adds	r7, #60	@ 0x3c
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b095      	sub	sp, #84	@ 0x54
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f6:	e853 3f00 	ldrex	r3, [r3]
 80091fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800920c:	643b      	str	r3, [r7, #64]	@ 0x40
 800920e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009212:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800921a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e6      	bne.n	80091ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009236:	f023 0301 	bic.w	r3, r3, #1
 800923a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3308      	adds	r3, #8
 8009242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009244:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009246:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800924a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800924c:	e841 2300 	strex	r3, r2, [r1]
 8009250:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1e3      	bne.n	8009220 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800925c:	2b01      	cmp	r3, #1
 800925e:	d118      	bne.n	8009292 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	e853 3f00 	ldrex	r3, [r3]
 800926c:	60bb      	str	r3, [r7, #8]
   return(result);
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	f023 0310 	bic.w	r3, r3, #16
 8009274:	647b      	str	r3, [r7, #68]	@ 0x44
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800927e:	61bb      	str	r3, [r7, #24]
 8009280:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009282:	6979      	ldr	r1, [r7, #20]
 8009284:	69ba      	ldr	r2, [r7, #24]
 8009286:	e841 2300 	strex	r3, r2, [r1]
 800928a:	613b      	str	r3, [r7, #16]
   return(result);
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1e6      	bne.n	8009260 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2220      	movs	r2, #32
 8009296:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80092a6:	bf00      	nop
 80092a8:	3754      	adds	r7, #84	@ 0x54
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b090      	sub	sp, #64	@ 0x40
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092be:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 0320 	and.w	r3, r3, #32
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d137      	bne.n	800933e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80092ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d0:	2200      	movs	r2, #0
 80092d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3308      	adds	r3, #8
 80092dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	623b      	str	r3, [r7, #32]
   return(result);
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80092ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3308      	adds	r3, #8
 80092f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80092f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092fe:	e841 2300 	strex	r3, r2, [r1]
 8009302:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1e5      	bne.n	80092d6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800930a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	e853 3f00 	ldrex	r3, [r3]
 8009316:	60fb      	str	r3, [r7, #12]
   return(result);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800931e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009328:	61fb      	str	r3, [r7, #28]
 800932a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	69b9      	ldr	r1, [r7, #24]
 800932e:	69fa      	ldr	r2, [r7, #28]
 8009330:	e841 2300 	strex	r3, r2, [r1]
 8009334:	617b      	str	r3, [r7, #20]
   return(result);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e6      	bne.n	800930a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800933c:	e002      	b.n	8009344 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800933e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009340:	f7ff f976 	bl	8008630 <HAL_UART_TxCpltCallback>
}
 8009344:	bf00      	nop
 8009346:	3740      	adds	r7, #64	@ 0x40
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009358:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7ff f972 	bl	8008644 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009360:	bf00      	nop
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b09c      	sub	sp, #112	@ 0x70
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009374:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0320 	and.w	r3, r3, #32
 8009380:	2b00      	cmp	r3, #0
 8009382:	d171      	bne.n	8009468 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009386:	2200      	movs	r2, #0
 8009388:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800938c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009394:	e853 3f00 	ldrex	r3, [r3]
 8009398:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800939a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800939c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	461a      	mov	r2, r3
 80093a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093b2:	e841 2300 	strex	r3, r2, [r1]
 80093b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1e6      	bne.n	800938c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3308      	adds	r3, #8
 80093c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d0:	f023 0301 	bic.w	r3, r3, #1
 80093d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80093d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3308      	adds	r3, #8
 80093dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80093de:	647a      	str	r2, [r7, #68]	@ 0x44
 80093e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e5      	bne.n	80093be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3308      	adds	r3, #8
 80093f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	e853 3f00 	ldrex	r3, [r3]
 8009400:	623b      	str	r3, [r7, #32]
   return(result);
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009408:	663b      	str	r3, [r7, #96]	@ 0x60
 800940a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3308      	adds	r3, #8
 8009410:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009412:	633a      	str	r2, [r7, #48]	@ 0x30
 8009414:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800941a:	e841 2300 	strex	r3, r2, [r1]
 800941e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1e5      	bne.n	80093f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009428:	2220      	movs	r2, #32
 800942a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800942e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009430:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009432:	2b01      	cmp	r3, #1
 8009434:	d118      	bne.n	8009468 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	e853 3f00 	ldrex	r3, [r3]
 8009442:	60fb      	str	r3, [r7, #12]
   return(result);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 0310 	bic.w	r3, r3, #16
 800944a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800944c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009454:	61fb      	str	r3, [r7, #28]
 8009456:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	69b9      	ldr	r1, [r7, #24]
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	617b      	str	r3, [r7, #20]
   return(result);
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e6      	bne.n	8009436 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800946a:	2200      	movs	r2, #0
 800946c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800946e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009472:	2b01      	cmp	r3, #1
 8009474:	d107      	bne.n	8009486 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800947c:	4619      	mov	r1, r3
 800947e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009480:	f7ff f908 	bl	8008694 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009484:	e002      	b.n	800948c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009486:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009488:	f7ff f8e6 	bl	8008658 <HAL_UART_RxCpltCallback>
}
 800948c:	bf00      	nop
 800948e:	3770      	adds	r7, #112	@ 0x70
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2201      	movs	r2, #1
 80094a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d109      	bne.n	80094c4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094b6:	085b      	lsrs	r3, r3, #1
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	4619      	mov	r1, r3
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f7ff f8e9 	bl	8008694 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094c2:	e002      	b.n	80094ca <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f7ff f8d1 	bl	800866c <HAL_UART_RxHalfCpltCallback>
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b086      	sub	sp, #24
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094fa:	2b80      	cmp	r3, #128	@ 0x80
 80094fc:	d109      	bne.n	8009512 <UART_DMAError+0x40>
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	2b21      	cmp	r3, #33	@ 0x21
 8009502:	d106      	bne.n	8009512 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	2200      	movs	r2, #0
 8009508:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800950c:	6978      	ldr	r0, [r7, #20]
 800950e:	f7ff fe29 	bl	8009164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951c:	2b40      	cmp	r3, #64	@ 0x40
 800951e:	d109      	bne.n	8009534 <UART_DMAError+0x62>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2b22      	cmp	r3, #34	@ 0x22
 8009524:	d106      	bne.n	8009534 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2200      	movs	r2, #0
 800952a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800952e:	6978      	ldr	r0, [r7, #20]
 8009530:	f7ff fe59 	bl	80091e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800953a:	f043 0210 	orr.w	r2, r3, #16
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009544:	6978      	ldr	r0, [r7, #20]
 8009546:	f7ff f89b 	bl	8008680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800954a:	bf00      	nop
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f7ff f889 	bl	8008680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800956e:	bf00      	nop
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b088      	sub	sp, #32
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	e853 3f00 	ldrex	r3, [r3]
 800958a:	60bb      	str	r3, [r7, #8]
   return(result);
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009592:	61fb      	str	r3, [r7, #28]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	461a      	mov	r2, r3
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	61bb      	str	r3, [r7, #24]
 800959e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a0:	6979      	ldr	r1, [r7, #20]
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	e841 2300 	strex	r3, r2, [r1]
 80095a8:	613b      	str	r3, [r7, #16]
   return(result);
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1e6      	bne.n	800957e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2220      	movs	r2, #32
 80095b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7ff f836 	bl	8008630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095c4:	bf00      	nop
 80095c6:	3720      	adds	r7, #32
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009616:	2b01      	cmp	r3, #1
 8009618:	d101      	bne.n	800961e <HAL_UARTEx_DisableFifoMode+0x16>
 800961a:	2302      	movs	r3, #2
 800961c:	e027      	b.n	800966e <HAL_UARTEx_DisableFifoMode+0x66>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2224      	movs	r2, #36	@ 0x24
 800962a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 0201 	bic.w	r2, r2, #1
 8009644:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800964c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2220      	movs	r2, #32
 8009660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3714      	adds	r7, #20
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800968a:	2b01      	cmp	r3, #1
 800968c:	d101      	bne.n	8009692 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800968e:	2302      	movs	r3, #2
 8009690:	e02d      	b.n	80096ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2224      	movs	r2, #36	@ 0x24
 800969e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 0201 	bic.w	r2, r2, #1
 80096b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	430a      	orrs	r2, r1
 80096cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f850 	bl	8009774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2220      	movs	r2, #32
 80096e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800970a:	2302      	movs	r3, #2
 800970c:	e02d      	b.n	800976a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2224      	movs	r2, #36	@ 0x24
 800971a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 0201 	bic.w	r2, r2, #1
 8009734:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f812 	bl	8009774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2220      	movs	r2, #32
 800975c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009780:	2b00      	cmp	r3, #0
 8009782:	d108      	bne.n	8009796 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009794:	e031      	b.n	80097fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009796:	2308      	movs	r3, #8
 8009798:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800979a:	2308      	movs	r3, #8
 800979c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	0e5b      	lsrs	r3, r3, #25
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	f003 0307 	and.w	r3, r3, #7
 80097ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	0f5b      	lsrs	r3, r3, #29
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 0307 	and.w	r3, r3, #7
 80097bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	7b3a      	ldrb	r2, [r7, #12]
 80097c2:	4911      	ldr	r1, [pc, #68]	@ (8009808 <UARTEx_SetNbDataToProcess+0x94>)
 80097c4:	5c8a      	ldrb	r2, [r1, r2]
 80097c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097ca:	7b3a      	ldrb	r2, [r7, #12]
 80097cc:	490f      	ldr	r1, [pc, #60]	@ (800980c <UARTEx_SetNbDataToProcess+0x98>)
 80097ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	7b7a      	ldrb	r2, [r7, #13]
 80097e0:	4909      	ldr	r1, [pc, #36]	@ (8009808 <UARTEx_SetNbDataToProcess+0x94>)
 80097e2:	5c8a      	ldrb	r2, [r1, r2]
 80097e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097e8:	7b7a      	ldrb	r2, [r7, #13]
 80097ea:	4908      	ldr	r1, [pc, #32]	@ (800980c <UARTEx_SetNbDataToProcess+0x98>)
 80097ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80097fa:	bf00      	nop
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	0801ab0c 	.word	0x0801ab0c
 800980c:	0801ab14 	.word	0x0801ab14

08009810 <__NVIC_SetPriority>:
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	6039      	str	r1, [r7, #0]
 800981a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800981c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009820:	2b00      	cmp	r3, #0
 8009822:	db0a      	blt.n	800983a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	b2da      	uxtb	r2, r3
 8009828:	490c      	ldr	r1, [pc, #48]	@ (800985c <__NVIC_SetPriority+0x4c>)
 800982a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800982e:	0112      	lsls	r2, r2, #4
 8009830:	b2d2      	uxtb	r2, r2
 8009832:	440b      	add	r3, r1
 8009834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009838:	e00a      	b.n	8009850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	b2da      	uxtb	r2, r3
 800983e:	4908      	ldr	r1, [pc, #32]	@ (8009860 <__NVIC_SetPriority+0x50>)
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	f003 030f 	and.w	r3, r3, #15
 8009846:	3b04      	subs	r3, #4
 8009848:	0112      	lsls	r2, r2, #4
 800984a:	b2d2      	uxtb	r2, r2
 800984c:	440b      	add	r3, r1
 800984e:	761a      	strb	r2, [r3, #24]
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	e000e100 	.word	0xe000e100
 8009860:	e000ed00 	.word	0xe000ed00

08009864 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009868:	4b05      	ldr	r3, [pc, #20]	@ (8009880 <SysTick_Handler+0x1c>)
 800986a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800986c:	f001 fd40 	bl	800b2f0 <xTaskGetSchedulerState>
 8009870:	4603      	mov	r3, r0
 8009872:	2b01      	cmp	r3, #1
 8009874:	d001      	beq.n	800987a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009876:	f002 fb37 	bl	800bee8 <xPortSysTickHandler>
  }
}
 800987a:	bf00      	nop
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	e000e010 	.word	0xe000e010

08009884 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009884:	b580      	push	{r7, lr}
 8009886:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009888:	2100      	movs	r1, #0
 800988a:	f06f 0004 	mvn.w	r0, #4
 800988e:	f7ff ffbf 	bl	8009810 <__NVIC_SetPriority>
#endif
}
 8009892:	bf00      	nop
 8009894:	bd80      	pop	{r7, pc}
	...

08009898 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800989e:	f3ef 8305 	mrs	r3, IPSR
 80098a2:	603b      	str	r3, [r7, #0]
  return(result);
 80098a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d003      	beq.n	80098b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80098aa:	f06f 0305 	mvn.w	r3, #5
 80098ae:	607b      	str	r3, [r7, #4]
 80098b0:	e00c      	b.n	80098cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80098b2:	4b0a      	ldr	r3, [pc, #40]	@ (80098dc <osKernelInitialize+0x44>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d105      	bne.n	80098c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80098ba:	4b08      	ldr	r3, [pc, #32]	@ (80098dc <osKernelInitialize+0x44>)
 80098bc:	2201      	movs	r2, #1
 80098be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	607b      	str	r3, [r7, #4]
 80098c4:	e002      	b.n	80098cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80098c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80098cc:	687b      	ldr	r3, [r7, #4]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	20004c24 	.word	0x20004c24

080098e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098e6:	f3ef 8305 	mrs	r3, IPSR
 80098ea:	603b      	str	r3, [r7, #0]
  return(result);
 80098ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80098f2:	f06f 0305 	mvn.w	r3, #5
 80098f6:	607b      	str	r3, [r7, #4]
 80098f8:	e010      	b.n	800991c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80098fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009928 <osKernelStart+0x48>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d109      	bne.n	8009916 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009902:	f7ff ffbf 	bl	8009884 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009906:	4b08      	ldr	r3, [pc, #32]	@ (8009928 <osKernelStart+0x48>)
 8009908:	2202      	movs	r2, #2
 800990a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800990c:	f001 f87a 	bl	800aa04 <vTaskStartScheduler>
      stat = osOK;
 8009910:	2300      	movs	r3, #0
 8009912:	607b      	str	r3, [r7, #4]
 8009914:	e002      	b.n	800991c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009916:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800991a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800991c:	687b      	ldr	r3, [r7, #4]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20004c24 	.word	0x20004c24

0800992c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800992c:	b580      	push	{r7, lr}
 800992e:	b08e      	sub	sp, #56	@ 0x38
 8009930:	af04      	add	r7, sp, #16
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009938:	2300      	movs	r3, #0
 800993a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800993c:	f3ef 8305 	mrs	r3, IPSR
 8009940:	617b      	str	r3, [r7, #20]
  return(result);
 8009942:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009944:	2b00      	cmp	r3, #0
 8009946:	d17e      	bne.n	8009a46 <osThreadNew+0x11a>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d07b      	beq.n	8009a46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800994e:	2380      	movs	r3, #128	@ 0x80
 8009950:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009952:	2318      	movs	r3, #24
 8009954:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009956:	2300      	movs	r3, #0
 8009958:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800995a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800995e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d045      	beq.n	80099f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <osThreadNew+0x48>
        name = attr->name;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d008      	beq.n	800999a <osThreadNew+0x6e>
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	2b38      	cmp	r3, #56	@ 0x38
 800998c:	d805      	bhi.n	800999a <osThreadNew+0x6e>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <osThreadNew+0x72>
        return (NULL);
 800999a:	2300      	movs	r3, #0
 800999c:	e054      	b.n	8009a48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	089b      	lsrs	r3, r3, #2
 80099ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00e      	beq.n	80099d4 <osThreadNew+0xa8>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	2b5b      	cmp	r3, #91	@ 0x5b
 80099bc:	d90a      	bls.n	80099d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d006      	beq.n	80099d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <osThreadNew+0xa8>
        mem = 1;
 80099ce:	2301      	movs	r3, #1
 80099d0:	61bb      	str	r3, [r7, #24]
 80099d2:	e010      	b.n	80099f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10c      	bne.n	80099f6 <osThreadNew+0xca>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d108      	bne.n	80099f6 <osThreadNew+0xca>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d104      	bne.n	80099f6 <osThreadNew+0xca>
          mem = 0;
 80099ec:	2300      	movs	r3, #0
 80099ee:	61bb      	str	r3, [r7, #24]
 80099f0:	e001      	b.n	80099f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d110      	bne.n	8009a1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a04:	9202      	str	r2, [sp, #8]
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	6a3a      	ldr	r2, [r7, #32]
 8009a10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 fe1a 	bl	800a64c <xTaskCreateStatic>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	613b      	str	r3, [r7, #16]
 8009a1c:	e013      	b.n	8009a46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d110      	bne.n	8009a46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	f107 0310 	add.w	r3, r7, #16
 8009a2c:	9301      	str	r3, [sp, #4]
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 fe68 	bl	800a70c <xTaskCreate>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d001      	beq.n	8009a46 <osThreadNew+0x11a>
            hTask = NULL;
 8009a42:	2300      	movs	r3, #0
 8009a44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009a46:	693b      	ldr	r3, [r7, #16]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3728      	adds	r7, #40	@ 0x28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a58:	f3ef 8305 	mrs	r3, IPSR
 8009a5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d003      	beq.n	8009a6c <osDelay+0x1c>
    stat = osErrorISR;
 8009a64:	f06f 0305 	mvn.w	r3, #5
 8009a68:	60fb      	str	r3, [r7, #12]
 8009a6a:	e007      	b.n	8009a7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 ff8e 	bl	800a998 <vTaskDelay>
    }
  }

  return (stat);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	4a07      	ldr	r2, [pc, #28]	@ (8009ab4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	4a06      	ldr	r2, [pc, #24]	@ (8009ab8 <vApplicationGetIdleTaskMemory+0x30>)
 8009a9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2280      	movs	r2, #128	@ 0x80
 8009aa4:	601a      	str	r2, [r3, #0]
}
 8009aa6:	bf00      	nop
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	20004c28 	.word	0x20004c28
 8009ab8:	20004c84 	.word	0x20004c84

08009abc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4a07      	ldr	r2, [pc, #28]	@ (8009ae8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009acc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	4a06      	ldr	r2, [pc, #24]	@ (8009aec <vApplicationGetTimerTaskMemory+0x30>)
 8009ad2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ada:	601a      	str	r2, [r3, #0]
}
 8009adc:	bf00      	nop
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	20004e84 	.word	0x20004e84
 8009aec:	20004ee0 	.word	0x20004ee0

08009af0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f103 0208 	add.w	r2, r3, #8
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f103 0208 	add.w	r2, r3, #8
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f103 0208 	add.w	r2, r3, #8
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b3e:	bf00      	nop
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b085      	sub	sp, #20
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	689a      	ldr	r2, [r3, #8]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	601a      	str	r2, [r3, #0]
}
 8009b86:	bf00      	nop
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b92:	b480      	push	{r7}
 8009b94:	b085      	sub	sp, #20
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ba8:	d103      	bne.n	8009bb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	691b      	ldr	r3, [r3, #16]
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	e00c      	b.n	8009bcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3308      	adds	r3, #8
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	e002      	b.n	8009bc0 <vListInsert+0x2e>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d2f6      	bcs.n	8009bba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	683a      	ldr	r2, [r7, #0]
 8009be6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	601a      	str	r2, [r3, #0]
}
 8009bf8:	bf00      	nop
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	6892      	ldr	r2, [r2, #8]
 8009c1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	6852      	ldr	r2, [r2, #4]
 8009c24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d103      	bne.n	8009c38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689a      	ldr	r2, [r3, #8]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	1e5a      	subs	r2, r3, #1
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10b      	bne.n	8009c84 <xQueueGenericReset+0x2c>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	60bb      	str	r3, [r7, #8]
}
 8009c7e:	bf00      	nop
 8009c80:	bf00      	nop
 8009c82:	e7fd      	b.n	8009c80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c84:	f002 f8a0 	bl	800bdc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c90:	68f9      	ldr	r1, [r7, #12]
 8009c92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009c94:	fb01 f303 	mul.w	r3, r1, r3
 8009c98:	441a      	add	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	68f9      	ldr	r1, [r7, #12]
 8009cb8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009cba:	fb01 f303 	mul.w	r3, r1, r3
 8009cbe:	441a      	add	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	22ff      	movs	r2, #255	@ 0xff
 8009cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	22ff      	movs	r2, #255	@ 0xff
 8009cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d114      	bne.n	8009d04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d01a      	beq.n	8009d18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3310      	adds	r3, #16
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f001 f91a 	bl	800af20 <xTaskRemoveFromEventList>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d012      	beq.n	8009d18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8009d28 <xQueueGenericReset+0xd0>)
 8009cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cf8:	601a      	str	r2, [r3, #0]
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	e009      	b.n	8009d18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	3310      	adds	r3, #16
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7ff fef1 	bl	8009af0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3324      	adds	r3, #36	@ 0x24
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7ff feec 	bl	8009af0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d18:	f002 f888 	bl	800be2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d1c:	2301      	movs	r3, #1
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	e000ed04 	.word	0xe000ed04

08009d2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08e      	sub	sp, #56	@ 0x38
 8009d30:	af02      	add	r7, sp, #8
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
 8009d38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10b      	bne.n	8009d58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009d52:	bf00      	nop
 8009d54:	bf00      	nop
 8009d56:	e7fd      	b.n	8009d54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d10b      	bne.n	8009d76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d70:	bf00      	nop
 8009d72:	bf00      	nop
 8009d74:	e7fd      	b.n	8009d72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d002      	beq.n	8009d82 <xQueueGenericCreateStatic+0x56>
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <xQueueGenericCreateStatic+0x5a>
 8009d82:	2301      	movs	r3, #1
 8009d84:	e000      	b.n	8009d88 <xQueueGenericCreateStatic+0x5c>
 8009d86:	2300      	movs	r3, #0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10b      	bne.n	8009da4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	623b      	str	r3, [r7, #32]
}
 8009d9e:	bf00      	nop
 8009da0:	bf00      	nop
 8009da2:	e7fd      	b.n	8009da0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d102      	bne.n	8009db0 <xQueueGenericCreateStatic+0x84>
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <xQueueGenericCreateStatic+0x88>
 8009db0:	2301      	movs	r3, #1
 8009db2:	e000      	b.n	8009db6 <xQueueGenericCreateStatic+0x8a>
 8009db4:	2300      	movs	r3, #0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10b      	bne.n	8009dd2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dbe:	f383 8811 	msr	BASEPRI, r3
 8009dc2:	f3bf 8f6f 	isb	sy
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	61fb      	str	r3, [r7, #28]
}
 8009dcc:	bf00      	nop
 8009dce:	bf00      	nop
 8009dd0:	e7fd      	b.n	8009dce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009dd2:	2350      	movs	r3, #80	@ 0x50
 8009dd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2b50      	cmp	r3, #80	@ 0x50
 8009dda:	d00b      	beq.n	8009df4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	61bb      	str	r3, [r7, #24]
}
 8009dee:	bf00      	nop
 8009df0:	bf00      	nop
 8009df2:	e7fd      	b.n	8009df0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009df4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00d      	beq.n	8009e1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	4613      	mov	r3, r2
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	68b9      	ldr	r1, [r7, #8]
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f000 f805 	bl	8009e26 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3730      	adds	r7, #48	@ 0x30
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b084      	sub	sp, #16
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	607a      	str	r2, [r7, #4]
 8009e32:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d103      	bne.n	8009e42 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	601a      	str	r2, [r3, #0]
 8009e40:	e002      	b.n	8009e48 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e54:	2101      	movs	r1, #1
 8009e56:	69b8      	ldr	r0, [r7, #24]
 8009e58:	f7ff fefe 	bl	8009c58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	78fa      	ldrb	r2, [r7, #3]
 8009e60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e64:	bf00      	nop
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b08e      	sub	sp, #56	@ 0x38
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
 8009e78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10b      	bne.n	8009ea0 <xQueueGenericSend+0x34>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e9a:	bf00      	nop
 8009e9c:	bf00      	nop
 8009e9e:	e7fd      	b.n	8009e9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d103      	bne.n	8009eae <xQueueGenericSend+0x42>
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <xQueueGenericSend+0x46>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e000      	b.n	8009eb4 <xQueueGenericSend+0x48>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10b      	bne.n	8009ed0 <xQueueGenericSend+0x64>
	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009eca:	bf00      	nop
 8009ecc:	bf00      	nop
 8009ece:	e7fd      	b.n	8009ecc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d103      	bne.n	8009ede <xQueueGenericSend+0x72>
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d101      	bne.n	8009ee2 <xQueueGenericSend+0x76>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e000      	b.n	8009ee4 <xQueueGenericSend+0x78>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10b      	bne.n	8009f00 <xQueueGenericSend+0x94>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	623b      	str	r3, [r7, #32]
}
 8009efa:	bf00      	nop
 8009efc:	bf00      	nop
 8009efe:	e7fd      	b.n	8009efc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f00:	f001 f9f6 	bl	800b2f0 <xTaskGetSchedulerState>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d102      	bne.n	8009f10 <xQueueGenericSend+0xa4>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d101      	bne.n	8009f14 <xQueueGenericSend+0xa8>
 8009f10:	2301      	movs	r3, #1
 8009f12:	e000      	b.n	8009f16 <xQueueGenericSend+0xaa>
 8009f14:	2300      	movs	r3, #0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10b      	bne.n	8009f32 <xQueueGenericSend+0xc6>
	__asm volatile
 8009f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1e:	f383 8811 	msr	BASEPRI, r3
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	61fb      	str	r3, [r7, #28]
}
 8009f2c:	bf00      	nop
 8009f2e:	bf00      	nop
 8009f30:	e7fd      	b.n	8009f2e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f32:	f001 ff49 	bl	800bdc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d302      	bcc.n	8009f48 <xQueueGenericSend+0xdc>
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d129      	bne.n	8009f9c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	68b9      	ldr	r1, [r7, #8]
 8009f4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f4e:	f000 fa0f 	bl	800a370 <prvCopyDataToQueue>
 8009f52:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d010      	beq.n	8009f7e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5e:	3324      	adds	r3, #36	@ 0x24
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 ffdd 	bl	800af20 <xTaskRemoveFromEventList>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d013      	beq.n	8009f94 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f6c:	4b3f      	ldr	r3, [pc, #252]	@ (800a06c <xQueueGenericSend+0x200>)
 8009f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	e00a      	b.n	8009f94 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d007      	beq.n	8009f94 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f84:	4b39      	ldr	r3, [pc, #228]	@ (800a06c <xQueueGenericSend+0x200>)
 8009f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f94:	f001 ff4a 	bl	800be2c <vPortExitCritical>
				return pdPASS;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e063      	b.n	800a064 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d103      	bne.n	8009faa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fa2:	f001 ff43 	bl	800be2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	e05c      	b.n	800a064 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d106      	bne.n	8009fbe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fb0:	f107 0314 	add.w	r3, r7, #20
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f001 f83f 	bl	800b038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fbe:	f001 ff35 	bl	800be2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fc2:	f000 fd87 	bl	800aad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fc6:	f001 feff 	bl	800bdc8 <vPortEnterCritical>
 8009fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fd0:	b25b      	sxtb	r3, r3
 8009fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fd6:	d103      	bne.n	8009fe0 <xQueueGenericSend+0x174>
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fe6:	b25b      	sxtb	r3, r3
 8009fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fec:	d103      	bne.n	8009ff6 <xQueueGenericSend+0x18a>
 8009fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ff6:	f001 ff19 	bl	800be2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ffa:	1d3a      	adds	r2, r7, #4
 8009ffc:	f107 0314 	add.w	r3, r7, #20
 800a000:	4611      	mov	r1, r2
 800a002:	4618      	mov	r0, r3
 800a004:	f001 f82e 	bl	800b064 <xTaskCheckForTimeOut>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d124      	bne.n	800a058 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a00e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a010:	f000 faa6 	bl	800a560 <prvIsQueueFull>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d018      	beq.n	800a04c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01c:	3310      	adds	r3, #16
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	4611      	mov	r1, r2
 800a022:	4618      	mov	r0, r3
 800a024:	f000 ff2a 	bl	800ae7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a028:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a02a:	f000 fa31 	bl	800a490 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a02e:	f000 fd5f 	bl	800aaf0 <xTaskResumeAll>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	f47f af7c 	bne.w	8009f32 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a03a:	4b0c      	ldr	r3, [pc, #48]	@ (800a06c <xQueueGenericSend+0x200>)
 800a03c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	e772      	b.n	8009f32 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a04c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a04e:	f000 fa1f 	bl	800a490 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a052:	f000 fd4d 	bl	800aaf0 <xTaskResumeAll>
 800a056:	e76c      	b.n	8009f32 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a058:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a05a:	f000 fa19 	bl	800a490 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a05e:	f000 fd47 	bl	800aaf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a062:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a064:	4618      	mov	r0, r3
 800a066:	3738      	adds	r7, #56	@ 0x38
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	e000ed04 	.word	0xe000ed04

0800a070 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b090      	sub	sp, #64	@ 0x40
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10b      	bne.n	800a0a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a09a:	bf00      	nop
 800a09c:	bf00      	nop
 800a09e:	e7fd      	b.n	800a09c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d103      	bne.n	800a0ae <xQueueGenericSendFromISR+0x3e>
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d101      	bne.n	800a0b2 <xQueueGenericSendFromISR+0x42>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e000      	b.n	800a0b4 <xQueueGenericSendFromISR+0x44>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10b      	bne.n	800a0d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a0ca:	bf00      	nop
 800a0cc:	bf00      	nop
 800a0ce:	e7fd      	b.n	800a0cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d103      	bne.n	800a0de <xQueueGenericSendFromISR+0x6e>
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d101      	bne.n	800a0e2 <xQueueGenericSendFromISR+0x72>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e000      	b.n	800a0e4 <xQueueGenericSendFromISR+0x74>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10b      	bne.n	800a100 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	623b      	str	r3, [r7, #32]
}
 800a0fa:	bf00      	nop
 800a0fc:	bf00      	nop
 800a0fe:	e7fd      	b.n	800a0fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a100:	f001 ff42 	bl	800bf88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a104:	f3ef 8211 	mrs	r2, BASEPRI
 800a108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	61fa      	str	r2, [r7, #28]
 800a11a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a11c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a11e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a128:	429a      	cmp	r2, r3
 800a12a:	d302      	bcc.n	800a132 <xQueueGenericSendFromISR+0xc2>
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d12f      	bne.n	800a192 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a134:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a138:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a140:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	68b9      	ldr	r1, [r7, #8]
 800a146:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a148:	f000 f912 	bl	800a370 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a14c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a150:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a154:	d112      	bne.n	800a17c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d016      	beq.n	800a18c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a160:	3324      	adds	r3, #36	@ 0x24
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fedc 	bl	800af20 <xTaskRemoveFromEventList>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00e      	beq.n	800a18c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00b      	beq.n	800a18c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	601a      	str	r2, [r3, #0]
 800a17a:	e007      	b.n	800a18c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a17c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a180:	3301      	adds	r3, #1
 800a182:	b2db      	uxtb	r3, r3
 800a184:	b25a      	sxtb	r2, r3
 800a186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a18c:	2301      	movs	r3, #1
 800a18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a190:	e001      	b.n	800a196 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a192:	2300      	movs	r3, #0
 800a194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a198:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a1a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3740      	adds	r7, #64	@ 0x40
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08c      	sub	sp, #48	@ 0x30
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10b      	bne.n	800a1de <xQueueReceive+0x32>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	623b      	str	r3, [r7, #32]
}
 800a1d8:	bf00      	nop
 800a1da:	bf00      	nop
 800a1dc:	e7fd      	b.n	800a1da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d103      	bne.n	800a1ec <xQueueReceive+0x40>
 800a1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d101      	bne.n	800a1f0 <xQueueReceive+0x44>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e000      	b.n	800a1f2 <xQueueReceive+0x46>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10b      	bne.n	800a20e <xQueueReceive+0x62>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	61fb      	str	r3, [r7, #28]
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a20e:	f001 f86f 	bl	800b2f0 <xTaskGetSchedulerState>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d102      	bne.n	800a21e <xQueueReceive+0x72>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <xQueueReceive+0x76>
 800a21e:	2301      	movs	r3, #1
 800a220:	e000      	b.n	800a224 <xQueueReceive+0x78>
 800a222:	2300      	movs	r3, #0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10b      	bne.n	800a240 <xQueueReceive+0x94>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	61bb      	str	r3, [r7, #24]
}
 800a23a:	bf00      	nop
 800a23c:	bf00      	nop
 800a23e:	e7fd      	b.n	800a23c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a240:	f001 fdc2 	bl	800bdc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a248:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d01f      	beq.n	800a290 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a250:	68b9      	ldr	r1, [r7, #8]
 800a252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a254:	f000 f8f6 	bl	800a444 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25a:	1e5a      	subs	r2, r3, #1
 800a25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00f      	beq.n	800a288 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26a:	3310      	adds	r3, #16
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 fe57 	bl	800af20 <xTaskRemoveFromEventList>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d007      	beq.n	800a288 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a278:	4b3c      	ldr	r3, [pc, #240]	@ (800a36c <xQueueReceive+0x1c0>)
 800a27a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a288:	f001 fdd0 	bl	800be2c <vPortExitCritical>
				return pdPASS;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e069      	b.n	800a364 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d103      	bne.n	800a29e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a296:	f001 fdc9 	bl	800be2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a29a:	2300      	movs	r3, #0
 800a29c:	e062      	b.n	800a364 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d106      	bne.n	800a2b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2a4:	f107 0310 	add.w	r3, r7, #16
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 fec5 	bl	800b038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2b2:	f001 fdbb 	bl	800be2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2b6:	f000 fc0d 	bl	800aad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2ba:	f001 fd85 	bl	800bdc8 <vPortEnterCritical>
 800a2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a2c4:	b25b      	sxtb	r3, r3
 800a2c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2ca:	d103      	bne.n	800a2d4 <xQueueReceive+0x128>
 800a2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a2da:	b25b      	sxtb	r3, r3
 800a2dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2e0:	d103      	bne.n	800a2ea <xQueueReceive+0x13e>
 800a2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2ea:	f001 fd9f 	bl	800be2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2ee:	1d3a      	adds	r2, r7, #4
 800a2f0:	f107 0310 	add.w	r3, r7, #16
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 feb4 	bl	800b064 <xTaskCheckForTimeOut>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d123      	bne.n	800a34a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a304:	f000 f916 	bl	800a534 <prvIsQueueEmpty>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d017      	beq.n	800a33e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a310:	3324      	adds	r3, #36	@ 0x24
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	4611      	mov	r1, r2
 800a316:	4618      	mov	r0, r3
 800a318:	f000 fdb0 	bl	800ae7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a31c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a31e:	f000 f8b7 	bl	800a490 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a322:	f000 fbe5 	bl	800aaf0 <xTaskResumeAll>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d189      	bne.n	800a240 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a32c:	4b0f      	ldr	r3, [pc, #60]	@ (800a36c <xQueueReceive+0x1c0>)
 800a32e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	e780      	b.n	800a240 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a33e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a340:	f000 f8a6 	bl	800a490 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a344:	f000 fbd4 	bl	800aaf0 <xTaskResumeAll>
 800a348:	e77a      	b.n	800a240 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a34a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a34c:	f000 f8a0 	bl	800a490 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a350:	f000 fbce 	bl	800aaf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a354:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a356:	f000 f8ed 	bl	800a534 <prvIsQueueEmpty>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f43f af6f 	beq.w	800a240 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a362:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a364:	4618      	mov	r0, r3
 800a366:	3730      	adds	r7, #48	@ 0x30
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a37c:	2300      	movs	r3, #0
 800a37e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a384:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d10d      	bne.n	800a3aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d14d      	bne.n	800a432 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 ffc6 	bl	800b32c <xTaskPriorityDisinherit>
 800a3a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	609a      	str	r2, [r3, #8]
 800a3a8:	e043      	b.n	800a432 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d119      	bne.n	800a3e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6858      	ldr	r0, [r3, #4]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	68b9      	ldr	r1, [r7, #8]
 800a3bc:	f00f fce9 	bl	8019d92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3c8:	441a      	add	r2, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d32b      	bcc.n	800a432 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	605a      	str	r2, [r3, #4]
 800a3e2:	e026      	b.n	800a432 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	68d8      	ldr	r0, [r3, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	68b9      	ldr	r1, [r7, #8]
 800a3f0:	f00f fccf 	bl	8019d92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	68da      	ldr	r2, [r3, #12]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3fc:	425b      	negs	r3, r3
 800a3fe:	441a      	add	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	68da      	ldr	r2, [r3, #12]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d207      	bcs.n	800a420 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	689a      	ldr	r2, [r3, #8]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a418:	425b      	negs	r3, r3
 800a41a:	441a      	add	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b02      	cmp	r3, #2
 800a424:	d105      	bne.n	800a432 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d002      	beq.n	800a432 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	3b01      	subs	r3, #1
 800a430:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	1c5a      	adds	r2, r3, #1
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a43a:	697b      	ldr	r3, [r7, #20]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a452:	2b00      	cmp	r3, #0
 800a454:	d018      	beq.n	800a488 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68da      	ldr	r2, [r3, #12]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a45e:	441a      	add	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	68da      	ldr	r2, [r3, #12]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d303      	bcc.n	800a478 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	68d9      	ldr	r1, [r3, #12]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a480:	461a      	mov	r2, r3
 800a482:	6838      	ldr	r0, [r7, #0]
 800a484:	f00f fc85 	bl	8019d92 <memcpy>
	}
}
 800a488:	bf00      	nop
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a498:	f001 fc96 	bl	800bdc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4a4:	e011      	b.n	800a4ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d012      	beq.n	800a4d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3324      	adds	r3, #36	@ 0x24
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 fd34 	bl	800af20 <xTaskRemoveFromEventList>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a4be:	f000 fe35 	bl	800b12c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	dce9      	bgt.n	800a4a6 <prvUnlockQueue+0x16>
 800a4d2:	e000      	b.n	800a4d6 <prvUnlockQueue+0x46>
					break;
 800a4d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	22ff      	movs	r2, #255	@ 0xff
 800a4da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a4de:	f001 fca5 	bl	800be2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a4e2:	f001 fc71 	bl	800bdc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4ee:	e011      	b.n	800a514 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d012      	beq.n	800a51e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	3310      	adds	r3, #16
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f000 fd0f 	bl	800af20 <xTaskRemoveFromEventList>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d001      	beq.n	800a50c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a508:	f000 fe10 	bl	800b12c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
 800a50e:	3b01      	subs	r3, #1
 800a510:	b2db      	uxtb	r3, r3
 800a512:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	dce9      	bgt.n	800a4f0 <prvUnlockQueue+0x60>
 800a51c:	e000      	b.n	800a520 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a51e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	22ff      	movs	r2, #255	@ 0xff
 800a524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a528:	f001 fc80 	bl	800be2c <vPortExitCritical>
}
 800a52c:	bf00      	nop
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a53c:	f001 fc44 	bl	800bdc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a544:	2b00      	cmp	r3, #0
 800a546:	d102      	bne.n	800a54e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a548:	2301      	movs	r3, #1
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	e001      	b.n	800a552 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a54e:	2300      	movs	r3, #0
 800a550:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a552:	f001 fc6b 	bl	800be2c <vPortExitCritical>

	return xReturn;
 800a556:	68fb      	ldr	r3, [r7, #12]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a568:	f001 fc2e 	bl	800bdc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a574:	429a      	cmp	r2, r3
 800a576:	d102      	bne.n	800a57e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a578:	2301      	movs	r3, #1
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	e001      	b.n	800a582 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a57e:	2300      	movs	r3, #0
 800a580:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a582:	f001 fc53 	bl	800be2c <vPortExitCritical>

	return xReturn;
 800a586:	68fb      	ldr	r3, [r7, #12]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a59a:	2300      	movs	r3, #0
 800a59c:	60fb      	str	r3, [r7, #12]
 800a59e:	e014      	b.n	800a5ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a5a0:	4a0f      	ldr	r2, [pc, #60]	@ (800a5e0 <vQueueAddToRegistry+0x50>)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10b      	bne.n	800a5c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a5ac:	490c      	ldr	r1, [pc, #48]	@ (800a5e0 <vQueueAddToRegistry+0x50>)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a5b6:	4a0a      	ldr	r2, [pc, #40]	@ (800a5e0 <vQueueAddToRegistry+0x50>)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	00db      	lsls	r3, r3, #3
 800a5bc:	4413      	add	r3, r2
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a5c2:	e006      	b.n	800a5d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b07      	cmp	r3, #7
 800a5ce:	d9e7      	bls.n	800a5a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a5d0:	bf00      	nop
 800a5d2:	bf00      	nop
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	200052e0 	.word	0x200052e0

0800a5e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a5f4:	f001 fbe8 	bl	800bdc8 <vPortEnterCritical>
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a5fe:	b25b      	sxtb	r3, r3
 800a600:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a604:	d103      	bne.n	800a60e <vQueueWaitForMessageRestricted+0x2a>
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a614:	b25b      	sxtb	r3, r3
 800a616:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a61a:	d103      	bne.n	800a624 <vQueueWaitForMessageRestricted+0x40>
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a624:	f001 fc02 	bl	800be2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d106      	bne.n	800a63e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	3324      	adds	r3, #36	@ 0x24
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	68b9      	ldr	r1, [r7, #8]
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fc45 	bl	800aec8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a63e:	6978      	ldr	r0, [r7, #20]
 800a640:	f7ff ff26 	bl	800a490 <prvUnlockQueue>
	}
 800a644:	bf00      	nop
 800a646:	3718      	adds	r7, #24
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08e      	sub	sp, #56	@ 0x38
 800a650:	af04      	add	r7, sp, #16
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
 800a658:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10b      	bne.n	800a678 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	623b      	str	r3, [r7, #32]
}
 800a672:	bf00      	nop
 800a674:	bf00      	nop
 800a676:	e7fd      	b.n	800a674 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10b      	bne.n	800a696 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	61fb      	str	r3, [r7, #28]
}
 800a690:	bf00      	nop
 800a692:	bf00      	nop
 800a694:	e7fd      	b.n	800a692 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a696:	235c      	movs	r3, #92	@ 0x5c
 800a698:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a69e:	d00b      	beq.n	800a6b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	61bb      	str	r3, [r7, #24]
}
 800a6b2:	bf00      	nop
 800a6b4:	bf00      	nop
 800a6b6:	e7fd      	b.n	800a6b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a6b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01e      	beq.n	800a6fe <xTaskCreateStatic+0xb2>
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d01b      	beq.n	800a6fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9303      	str	r3, [sp, #12]
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6de:	9302      	str	r3, [sp, #8]
 800a6e0:	f107 0314 	add.w	r3, r7, #20
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	68b9      	ldr	r1, [r7, #8]
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f000 f850 	bl	800a796 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a6f8:	f000 f8de 	bl	800a8b8 <prvAddNewTaskToReadyList>
 800a6fc:	e001      	b.n	800a702 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a6fe:	2300      	movs	r3, #0
 800a700:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a702:	697b      	ldr	r3, [r7, #20]
	}
 800a704:	4618      	mov	r0, r3
 800a706:	3728      	adds	r7, #40	@ 0x28
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08c      	sub	sp, #48	@ 0x30
 800a710:	af04      	add	r7, sp, #16
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	603b      	str	r3, [r7, #0]
 800a718:	4613      	mov	r3, r2
 800a71a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a71c:	88fb      	ldrh	r3, [r7, #6]
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4618      	mov	r0, r3
 800a722:	f001 fc73 	bl	800c00c <pvPortMalloc>
 800a726:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00e      	beq.n	800a74c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a72e:	205c      	movs	r0, #92	@ 0x5c
 800a730:	f001 fc6c 	bl	800c00c <pvPortMalloc>
 800a734:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	631a      	str	r2, [r3, #48]	@ 0x30
 800a742:	e005      	b.n	800a750 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a744:	6978      	ldr	r0, [r7, #20]
 800a746:	f001 fd2f 	bl	800c1a8 <vPortFree>
 800a74a:	e001      	b.n	800a750 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a74c:	2300      	movs	r3, #0
 800a74e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d017      	beq.n	800a786 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a75e:	88fa      	ldrh	r2, [r7, #6]
 800a760:	2300      	movs	r3, #0
 800a762:	9303      	str	r3, [sp, #12]
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	9302      	str	r3, [sp, #8]
 800a768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a76a:	9301      	str	r3, [sp, #4]
 800a76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	68b9      	ldr	r1, [r7, #8]
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 f80e 	bl	800a796 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a77a:	69f8      	ldr	r0, [r7, #28]
 800a77c:	f000 f89c 	bl	800a8b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a780:	2301      	movs	r3, #1
 800a782:	61bb      	str	r3, [r7, #24]
 800a784:	e002      	b.n	800a78c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a786:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a78a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a78c:	69bb      	ldr	r3, [r7, #24]
	}
 800a78e:	4618      	mov	r0, r3
 800a790:	3720      	adds	r7, #32
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b088      	sub	sp, #32
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	60f8      	str	r0, [r7, #12]
 800a79e:	60b9      	str	r1, [r7, #8]
 800a7a0:	607a      	str	r2, [r7, #4]
 800a7a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	21a5      	movs	r1, #165	@ 0xa5
 800a7b0:	f00f fa26 	bl	8019c00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4413      	add	r3, r2
 800a7c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	f023 0307 	bic.w	r3, r3, #7
 800a7cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	f003 0307 	and.w	r3, r3, #7
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00b      	beq.n	800a7f0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	617b      	str	r3, [r7, #20]
}
 800a7ea:	bf00      	nop
 800a7ec:	bf00      	nop
 800a7ee:	e7fd      	b.n	800a7ec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d01f      	beq.n	800a836 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	61fb      	str	r3, [r7, #28]
 800a7fa:	e012      	b.n	800a822 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	4413      	add	r3, r2
 800a802:	7819      	ldrb	r1, [r3, #0]
 800a804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	4413      	add	r3, r2
 800a80a:	3334      	adds	r3, #52	@ 0x34
 800a80c:	460a      	mov	r2, r1
 800a80e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	4413      	add	r3, r2
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d006      	beq.n	800a82a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	3301      	adds	r3, #1
 800a820:	61fb      	str	r3, [r7, #28]
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	2b0f      	cmp	r3, #15
 800a826:	d9e9      	bls.n	800a7fc <prvInitialiseNewTask+0x66>
 800a828:	e000      	b.n	800a82c <prvInitialiseNewTask+0x96>
			{
				break;
 800a82a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82e:	2200      	movs	r2, #0
 800a830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a834:	e003      	b.n	800a83e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a840:	2b37      	cmp	r3, #55	@ 0x37
 800a842:	d901      	bls.n	800a848 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a844:	2337      	movs	r3, #55	@ 0x37
 800a846:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a84c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a850:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a852:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a856:	2200      	movs	r2, #0
 800a858:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85c:	3304      	adds	r3, #4
 800a85e:	4618      	mov	r0, r3
 800a860:	f7ff f966 	bl	8009b30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a866:	3318      	adds	r3, #24
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff f961 	bl	8009b30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a872:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a876:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a882:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a886:	2200      	movs	r2, #0
 800a888:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	68f9      	ldr	r1, [r7, #12]
 800a896:	69b8      	ldr	r0, [r7, #24]
 800a898:	f001 f966 	bl	800bb68 <pxPortInitialiseStack>
 800a89c:	4602      	mov	r2, r0
 800a89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8ae:	bf00      	nop
 800a8b0:	3720      	adds	r7, #32
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
	...

0800a8b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8c0:	f001 fa82 	bl	800bdc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8c4:	4b2d      	ldr	r3, [pc, #180]	@ (800a97c <prvAddNewTaskToReadyList+0xc4>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	4a2c      	ldr	r2, [pc, #176]	@ (800a97c <prvAddNewTaskToReadyList+0xc4>)
 800a8cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a8ce:	4b2c      	ldr	r3, [pc, #176]	@ (800a980 <prvAddNewTaskToReadyList+0xc8>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d109      	bne.n	800a8ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a8d6:	4a2a      	ldr	r2, [pc, #168]	@ (800a980 <prvAddNewTaskToReadyList+0xc8>)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a8dc:	4b27      	ldr	r3, [pc, #156]	@ (800a97c <prvAddNewTaskToReadyList+0xc4>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d110      	bne.n	800a906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a8e4:	f000 fc46 	bl	800b174 <prvInitialiseTaskLists>
 800a8e8:	e00d      	b.n	800a906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a8ea:	4b26      	ldr	r3, [pc, #152]	@ (800a984 <prvAddNewTaskToReadyList+0xcc>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d109      	bne.n	800a906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a8f2:	4b23      	ldr	r3, [pc, #140]	@ (800a980 <prvAddNewTaskToReadyList+0xc8>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d802      	bhi.n	800a906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a900:	4a1f      	ldr	r2, [pc, #124]	@ (800a980 <prvAddNewTaskToReadyList+0xc8>)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a906:	4b20      	ldr	r3, [pc, #128]	@ (800a988 <prvAddNewTaskToReadyList+0xd0>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3301      	adds	r3, #1
 800a90c:	4a1e      	ldr	r2, [pc, #120]	@ (800a988 <prvAddNewTaskToReadyList+0xd0>)
 800a90e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a910:	4b1d      	ldr	r3, [pc, #116]	@ (800a988 <prvAddNewTaskToReadyList+0xd0>)
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a91c:	4b1b      	ldr	r3, [pc, #108]	@ (800a98c <prvAddNewTaskToReadyList+0xd4>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	429a      	cmp	r2, r3
 800a922:	d903      	bls.n	800a92c <prvAddNewTaskToReadyList+0x74>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a928:	4a18      	ldr	r2, [pc, #96]	@ (800a98c <prvAddNewTaskToReadyList+0xd4>)
 800a92a:	6013      	str	r3, [r2, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a930:	4613      	mov	r3, r2
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4a15      	ldr	r2, [pc, #84]	@ (800a990 <prvAddNewTaskToReadyList+0xd8>)
 800a93a:	441a      	add	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	3304      	adds	r3, #4
 800a940:	4619      	mov	r1, r3
 800a942:	4610      	mov	r0, r2
 800a944:	f7ff f901 	bl	8009b4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a948:	f001 fa70 	bl	800be2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a94c:	4b0d      	ldr	r3, [pc, #52]	@ (800a984 <prvAddNewTaskToReadyList+0xcc>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00e      	beq.n	800a972 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a954:	4b0a      	ldr	r3, [pc, #40]	@ (800a980 <prvAddNewTaskToReadyList+0xc8>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a95e:	429a      	cmp	r2, r3
 800a960:	d207      	bcs.n	800a972 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a962:	4b0c      	ldr	r3, [pc, #48]	@ (800a994 <prvAddNewTaskToReadyList+0xdc>)
 800a964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a972:	bf00      	nop
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	200057f4 	.word	0x200057f4
 800a980:	20005320 	.word	0x20005320
 800a984:	20005800 	.word	0x20005800
 800a988:	20005810 	.word	0x20005810
 800a98c:	200057fc 	.word	0x200057fc
 800a990:	20005324 	.word	0x20005324
 800a994:	e000ed04 	.word	0xe000ed04

0800a998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d018      	beq.n	800a9dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a9aa:	4b14      	ldr	r3, [pc, #80]	@ (800a9fc <vTaskDelay+0x64>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00b      	beq.n	800a9ca <vTaskDelay+0x32>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	60bb      	str	r3, [r7, #8]
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop
 800a9c8:	e7fd      	b.n	800a9c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a9ca:	f000 f883 	bl	800aad4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fd1b 	bl	800b40c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a9d6:	f000 f88b 	bl	800aaf0 <xTaskResumeAll>
 800a9da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d107      	bne.n	800a9f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a9e2:	4b07      	ldr	r3, [pc, #28]	@ (800aa00 <vTaskDelay+0x68>)
 800a9e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9f2:	bf00      	nop
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	2000581c 	.word	0x2000581c
 800aa00:	e000ed04 	.word	0xe000ed04

0800aa04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08a      	sub	sp, #40	@ 0x28
 800aa08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa12:	463a      	mov	r2, r7
 800aa14:	1d39      	adds	r1, r7, #4
 800aa16:	f107 0308 	add.w	r3, r7, #8
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff f834 	bl	8009a88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa20:	6839      	ldr	r1, [r7, #0]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68ba      	ldr	r2, [r7, #8]
 800aa26:	9202      	str	r2, [sp, #8]
 800aa28:	9301      	str	r3, [sp, #4]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	2300      	movs	r3, #0
 800aa30:	460a      	mov	r2, r1
 800aa32:	4922      	ldr	r1, [pc, #136]	@ (800aabc <vTaskStartScheduler+0xb8>)
 800aa34:	4822      	ldr	r0, [pc, #136]	@ (800aac0 <vTaskStartScheduler+0xbc>)
 800aa36:	f7ff fe09 	bl	800a64c <xTaskCreateStatic>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	4a21      	ldr	r2, [pc, #132]	@ (800aac4 <vTaskStartScheduler+0xc0>)
 800aa3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa40:	4b20      	ldr	r3, [pc, #128]	@ (800aac4 <vTaskStartScheduler+0xc0>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d002      	beq.n	800aa4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	e001      	b.n	800aa52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d102      	bne.n	800aa5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa58:	f000 fd2c 	bl	800b4b4 <xTimerCreateTimerTask>
 800aa5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d116      	bne.n	800aa92 <vTaskStartScheduler+0x8e>
	__asm volatile
 800aa64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	613b      	str	r3, [r7, #16]
}
 800aa76:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa78:	4b13      	ldr	r3, [pc, #76]	@ (800aac8 <vTaskStartScheduler+0xc4>)
 800aa7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa80:	4b12      	ldr	r3, [pc, #72]	@ (800aacc <vTaskStartScheduler+0xc8>)
 800aa82:	2201      	movs	r2, #1
 800aa84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa86:	4b12      	ldr	r3, [pc, #72]	@ (800aad0 <vTaskStartScheduler+0xcc>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa8c:	f001 f8f8 	bl	800bc80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa90:	e00f      	b.n	800aab2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa98:	d10b      	bne.n	800aab2 <vTaskStartScheduler+0xae>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	60fb      	str	r3, [r7, #12]
}
 800aaac:	bf00      	nop
 800aaae:	bf00      	nop
 800aab0:	e7fd      	b.n	800aaae <vTaskStartScheduler+0xaa>
}
 800aab2:	bf00      	nop
 800aab4:	3718      	adds	r7, #24
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	0801aa80 	.word	0x0801aa80
 800aac0:	0800b145 	.word	0x0800b145
 800aac4:	20005818 	.word	0x20005818
 800aac8:	20005814 	.word	0x20005814
 800aacc:	20005800 	.word	0x20005800
 800aad0:	200057f8 	.word	0x200057f8

0800aad4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aad4:	b480      	push	{r7}
 800aad6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aad8:	4b04      	ldr	r3, [pc, #16]	@ (800aaec <vTaskSuspendAll+0x18>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	3301      	adds	r3, #1
 800aade:	4a03      	ldr	r2, [pc, #12]	@ (800aaec <vTaskSuspendAll+0x18>)
 800aae0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aae2:	bf00      	nop
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	2000581c 	.word	0x2000581c

0800aaf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aafa:	2300      	movs	r3, #0
 800aafc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aafe:	4b42      	ldr	r3, [pc, #264]	@ (800ac08 <xTaskResumeAll+0x118>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10b      	bne.n	800ab1e <xTaskResumeAll+0x2e>
	__asm volatile
 800ab06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	603b      	str	r3, [r7, #0]
}
 800ab18:	bf00      	nop
 800ab1a:	bf00      	nop
 800ab1c:	e7fd      	b.n	800ab1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab1e:	f001 f953 	bl	800bdc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab22:	4b39      	ldr	r3, [pc, #228]	@ (800ac08 <xTaskResumeAll+0x118>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	3b01      	subs	r3, #1
 800ab28:	4a37      	ldr	r2, [pc, #220]	@ (800ac08 <xTaskResumeAll+0x118>)
 800ab2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab2c:	4b36      	ldr	r3, [pc, #216]	@ (800ac08 <xTaskResumeAll+0x118>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d162      	bne.n	800abfa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab34:	4b35      	ldr	r3, [pc, #212]	@ (800ac0c <xTaskResumeAll+0x11c>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d05e      	beq.n	800abfa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab3c:	e02f      	b.n	800ab9e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab3e:	4b34      	ldr	r3, [pc, #208]	@ (800ac10 <xTaskResumeAll+0x120>)
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	3318      	adds	r3, #24
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7ff f85a 	bl	8009c04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	3304      	adds	r3, #4
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff f855 	bl	8009c04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab5e:	4b2d      	ldr	r3, [pc, #180]	@ (800ac14 <xTaskResumeAll+0x124>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d903      	bls.n	800ab6e <xTaskResumeAll+0x7e>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6a:	4a2a      	ldr	r2, [pc, #168]	@ (800ac14 <xTaskResumeAll+0x124>)
 800ab6c:	6013      	str	r3, [r2, #0]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab72:	4613      	mov	r3, r2
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	4413      	add	r3, r2
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4a27      	ldr	r2, [pc, #156]	@ (800ac18 <xTaskResumeAll+0x128>)
 800ab7c:	441a      	add	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3304      	adds	r3, #4
 800ab82:	4619      	mov	r1, r3
 800ab84:	4610      	mov	r0, r2
 800ab86:	f7fe ffe0 	bl	8009b4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab8e:	4b23      	ldr	r3, [pc, #140]	@ (800ac1c <xTaskResumeAll+0x12c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d302      	bcc.n	800ab9e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ab98:	4b21      	ldr	r3, [pc, #132]	@ (800ac20 <xTaskResumeAll+0x130>)
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ac10 <xTaskResumeAll+0x120>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1cb      	bne.n	800ab3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800abac:	f000 fb80 	bl	800b2b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800abb0:	4b1c      	ldr	r3, [pc, #112]	@ (800ac24 <xTaskResumeAll+0x134>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d010      	beq.n	800abde <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800abbc:	f000 f846 	bl	800ac4c <xTaskIncrementTick>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d002      	beq.n	800abcc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800abc6:	4b16      	ldr	r3, [pc, #88]	@ (800ac20 <xTaskResumeAll+0x130>)
 800abc8:	2201      	movs	r2, #1
 800abca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	3b01      	subs	r3, #1
 800abd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1f1      	bne.n	800abbc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800abd8:	4b12      	ldr	r3, [pc, #72]	@ (800ac24 <xTaskResumeAll+0x134>)
 800abda:	2200      	movs	r2, #0
 800abdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800abde:	4b10      	ldr	r3, [pc, #64]	@ (800ac20 <xTaskResumeAll+0x130>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d009      	beq.n	800abfa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800abe6:	2301      	movs	r3, #1
 800abe8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800abea:	4b0f      	ldr	r3, [pc, #60]	@ (800ac28 <xTaskResumeAll+0x138>)
 800abec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abf0:	601a      	str	r2, [r3, #0]
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abfa:	f001 f917 	bl	800be2c <vPortExitCritical>

	return xAlreadyYielded;
 800abfe:	68bb      	ldr	r3, [r7, #8]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	2000581c 	.word	0x2000581c
 800ac0c:	200057f4 	.word	0x200057f4
 800ac10:	200057b4 	.word	0x200057b4
 800ac14:	200057fc 	.word	0x200057fc
 800ac18:	20005324 	.word	0x20005324
 800ac1c:	20005320 	.word	0x20005320
 800ac20:	20005808 	.word	0x20005808
 800ac24:	20005804 	.word	0x20005804
 800ac28:	e000ed04 	.word	0xe000ed04

0800ac2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ac32:	4b05      	ldr	r3, [pc, #20]	@ (800ac48 <xTaskGetTickCount+0x1c>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ac38:	687b      	ldr	r3, [r7, #4]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	200057f8 	.word	0x200057f8

0800ac4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac52:	2300      	movs	r3, #0
 800ac54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac56:	4b4f      	ldr	r3, [pc, #316]	@ (800ad94 <xTaskIncrementTick+0x148>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f040 8090 	bne.w	800ad80 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac60:	4b4d      	ldr	r3, [pc, #308]	@ (800ad98 <xTaskIncrementTick+0x14c>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3301      	adds	r3, #1
 800ac66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac68:	4a4b      	ldr	r2, [pc, #300]	@ (800ad98 <xTaskIncrementTick+0x14c>)
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d121      	bne.n	800acb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac74:	4b49      	ldr	r3, [pc, #292]	@ (800ad9c <xTaskIncrementTick+0x150>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00b      	beq.n	800ac96 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	603b      	str	r3, [r7, #0]
}
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	e7fd      	b.n	800ac92 <xTaskIncrementTick+0x46>
 800ac96:	4b41      	ldr	r3, [pc, #260]	@ (800ad9c <xTaskIncrementTick+0x150>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	4b40      	ldr	r3, [pc, #256]	@ (800ada0 <xTaskIncrementTick+0x154>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a3e      	ldr	r2, [pc, #248]	@ (800ad9c <xTaskIncrementTick+0x150>)
 800aca2:	6013      	str	r3, [r2, #0]
 800aca4:	4a3e      	ldr	r2, [pc, #248]	@ (800ada0 <xTaskIncrementTick+0x154>)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6013      	str	r3, [r2, #0]
 800acaa:	4b3e      	ldr	r3, [pc, #248]	@ (800ada4 <xTaskIncrementTick+0x158>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	3301      	adds	r3, #1
 800acb0:	4a3c      	ldr	r2, [pc, #240]	@ (800ada4 <xTaskIncrementTick+0x158>)
 800acb2:	6013      	str	r3, [r2, #0]
 800acb4:	f000 fafc 	bl	800b2b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acb8:	4b3b      	ldr	r3, [pc, #236]	@ (800ada8 <xTaskIncrementTick+0x15c>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	693a      	ldr	r2, [r7, #16]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d349      	bcc.n	800ad56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acc2:	4b36      	ldr	r3, [pc, #216]	@ (800ad9c <xTaskIncrementTick+0x150>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d104      	bne.n	800acd6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800accc:	4b36      	ldr	r3, [pc, #216]	@ (800ada8 <xTaskIncrementTick+0x15c>)
 800acce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800acd2:	601a      	str	r2, [r3, #0]
					break;
 800acd4:	e03f      	b.n	800ad56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acd6:	4b31      	ldr	r3, [pc, #196]	@ (800ad9c <xTaskIncrementTick+0x150>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	429a      	cmp	r2, r3
 800acec:	d203      	bcs.n	800acf6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800acee:	4a2e      	ldr	r2, [pc, #184]	@ (800ada8 <xTaskIncrementTick+0x15c>)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800acf4:	e02f      	b.n	800ad56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	3304      	adds	r3, #4
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fe ff82 	bl	8009c04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d004      	beq.n	800ad12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	3318      	adds	r3, #24
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fe ff79 	bl	8009c04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad16:	4b25      	ldr	r3, [pc, #148]	@ (800adac <xTaskIncrementTick+0x160>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d903      	bls.n	800ad26 <xTaskIncrementTick+0xda>
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad22:	4a22      	ldr	r2, [pc, #136]	@ (800adac <xTaskIncrementTick+0x160>)
 800ad24:	6013      	str	r3, [r2, #0]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4413      	add	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4a1f      	ldr	r2, [pc, #124]	@ (800adb0 <xTaskIncrementTick+0x164>)
 800ad34:	441a      	add	r2, r3
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	3304      	adds	r3, #4
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	f7fe ff04 	bl	8009b4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad46:	4b1b      	ldr	r3, [pc, #108]	@ (800adb4 <xTaskIncrementTick+0x168>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d3b8      	bcc.n	800acc2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ad50:	2301      	movs	r3, #1
 800ad52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad54:	e7b5      	b.n	800acc2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad56:	4b17      	ldr	r3, [pc, #92]	@ (800adb4 <xTaskIncrementTick+0x168>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad5c:	4914      	ldr	r1, [pc, #80]	@ (800adb0 <xTaskIncrementTick+0x164>)
 800ad5e:	4613      	mov	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	440b      	add	r3, r1
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d901      	bls.n	800ad72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad72:	4b11      	ldr	r3, [pc, #68]	@ (800adb8 <xTaskIncrementTick+0x16c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d007      	beq.n	800ad8a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	617b      	str	r3, [r7, #20]
 800ad7e:	e004      	b.n	800ad8a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad80:	4b0e      	ldr	r3, [pc, #56]	@ (800adbc <xTaskIncrementTick+0x170>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	3301      	adds	r3, #1
 800ad86:	4a0d      	ldr	r2, [pc, #52]	@ (800adbc <xTaskIncrementTick+0x170>)
 800ad88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ad8a:	697b      	ldr	r3, [r7, #20]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3718      	adds	r7, #24
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	2000581c 	.word	0x2000581c
 800ad98:	200057f8 	.word	0x200057f8
 800ad9c:	200057ac 	.word	0x200057ac
 800ada0:	200057b0 	.word	0x200057b0
 800ada4:	2000580c 	.word	0x2000580c
 800ada8:	20005814 	.word	0x20005814
 800adac:	200057fc 	.word	0x200057fc
 800adb0:	20005324 	.word	0x20005324
 800adb4:	20005320 	.word	0x20005320
 800adb8:	20005808 	.word	0x20005808
 800adbc:	20005804 	.word	0x20005804

0800adc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800adc6:	4b28      	ldr	r3, [pc, #160]	@ (800ae68 <vTaskSwitchContext+0xa8>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d003      	beq.n	800add6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800adce:	4b27      	ldr	r3, [pc, #156]	@ (800ae6c <vTaskSwitchContext+0xac>)
 800add0:	2201      	movs	r2, #1
 800add2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800add4:	e042      	b.n	800ae5c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800add6:	4b25      	ldr	r3, [pc, #148]	@ (800ae6c <vTaskSwitchContext+0xac>)
 800add8:	2200      	movs	r2, #0
 800adda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800addc:	4b24      	ldr	r3, [pc, #144]	@ (800ae70 <vTaskSwitchContext+0xb0>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	60fb      	str	r3, [r7, #12]
 800ade2:	e011      	b.n	800ae08 <vTaskSwitchContext+0x48>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10b      	bne.n	800ae02 <vTaskSwitchContext+0x42>
	__asm volatile
 800adea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	607b      	str	r3, [r7, #4]
}
 800adfc:	bf00      	nop
 800adfe:	bf00      	nop
 800ae00:	e7fd      	b.n	800adfe <vTaskSwitchContext+0x3e>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	3b01      	subs	r3, #1
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	491a      	ldr	r1, [pc, #104]	@ (800ae74 <vTaskSwitchContext+0xb4>)
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4413      	add	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	440b      	add	r3, r1
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d0e3      	beq.n	800ade4 <vTaskSwitchContext+0x24>
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4a13      	ldr	r2, [pc, #76]	@ (800ae74 <vTaskSwitchContext+0xb4>)
 800ae28:	4413      	add	r3, r2
 800ae2a:	60bb      	str	r3, [r7, #8]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	685a      	ldr	r2, [r3, #4]
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	605a      	str	r2, [r3, #4]
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	3308      	adds	r3, #8
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d104      	bne.n	800ae4c <vTaskSwitchContext+0x8c>
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	685a      	ldr	r2, [r3, #4]
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	605a      	str	r2, [r3, #4]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	4a09      	ldr	r2, [pc, #36]	@ (800ae78 <vTaskSwitchContext+0xb8>)
 800ae54:	6013      	str	r3, [r2, #0]
 800ae56:	4a06      	ldr	r2, [pc, #24]	@ (800ae70 <vTaskSwitchContext+0xb0>)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6013      	str	r3, [r2, #0]
}
 800ae5c:	bf00      	nop
 800ae5e:	3714      	adds	r7, #20
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr
 800ae68:	2000581c 	.word	0x2000581c
 800ae6c:	20005808 	.word	0x20005808
 800ae70:	200057fc 	.word	0x200057fc
 800ae74:	20005324 	.word	0x20005324
 800ae78:	20005320 	.word	0x20005320

0800ae7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10b      	bne.n	800aea4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	60fb      	str	r3, [r7, #12]
}
 800ae9e:	bf00      	nop
 800aea0:	bf00      	nop
 800aea2:	e7fd      	b.n	800aea0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aea4:	4b07      	ldr	r3, [pc, #28]	@ (800aec4 <vTaskPlaceOnEventList+0x48>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	3318      	adds	r3, #24
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7fe fe70 	bl	8009b92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	6838      	ldr	r0, [r7, #0]
 800aeb6:	f000 faa9 	bl	800b40c <prvAddCurrentTaskToDelayedList>
}
 800aeba:	bf00      	nop
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	20005320 	.word	0x20005320

0800aec8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10b      	bne.n	800aef2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800aeda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	617b      	str	r3, [r7, #20]
}
 800aeec:	bf00      	nop
 800aeee:	bf00      	nop
 800aef0:	e7fd      	b.n	800aeee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aef2:	4b0a      	ldr	r3, [pc, #40]	@ (800af1c <vTaskPlaceOnEventListRestricted+0x54>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	3318      	adds	r3, #24
 800aef8:	4619      	mov	r1, r3
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f7fe fe25 	bl	8009b4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d002      	beq.n	800af0c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800af06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	68b8      	ldr	r0, [r7, #8]
 800af10:	f000 fa7c 	bl	800b40c <prvAddCurrentTaskToDelayedList>
	}
 800af14:	bf00      	nop
 800af16:	3718      	adds	r7, #24
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	20005320 	.word	0x20005320

0800af20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10b      	bne.n	800af4e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800af36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3a:	f383 8811 	msr	BASEPRI, r3
 800af3e:	f3bf 8f6f 	isb	sy
 800af42:	f3bf 8f4f 	dsb	sy
 800af46:	60fb      	str	r3, [r7, #12]
}
 800af48:	bf00      	nop
 800af4a:	bf00      	nop
 800af4c:	e7fd      	b.n	800af4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	3318      	adds	r3, #24
 800af52:	4618      	mov	r0, r3
 800af54:	f7fe fe56 	bl	8009c04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af58:	4b1d      	ldr	r3, [pc, #116]	@ (800afd0 <xTaskRemoveFromEventList+0xb0>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d11d      	bne.n	800af9c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	3304      	adds	r3, #4
 800af64:	4618      	mov	r0, r3
 800af66:	f7fe fe4d 	bl	8009c04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af6e:	4b19      	ldr	r3, [pc, #100]	@ (800afd4 <xTaskRemoveFromEventList+0xb4>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	429a      	cmp	r2, r3
 800af74:	d903      	bls.n	800af7e <xTaskRemoveFromEventList+0x5e>
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af7a:	4a16      	ldr	r2, [pc, #88]	@ (800afd4 <xTaskRemoveFromEventList+0xb4>)
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af82:	4613      	mov	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4a13      	ldr	r2, [pc, #76]	@ (800afd8 <xTaskRemoveFromEventList+0xb8>)
 800af8c:	441a      	add	r2, r3
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	3304      	adds	r3, #4
 800af92:	4619      	mov	r1, r3
 800af94:	4610      	mov	r0, r2
 800af96:	f7fe fdd8 	bl	8009b4a <vListInsertEnd>
 800af9a:	e005      	b.n	800afa8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	3318      	adds	r3, #24
 800afa0:	4619      	mov	r1, r3
 800afa2:	480e      	ldr	r0, [pc, #56]	@ (800afdc <xTaskRemoveFromEventList+0xbc>)
 800afa4:	f7fe fdd1 	bl	8009b4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afac:	4b0c      	ldr	r3, [pc, #48]	@ (800afe0 <xTaskRemoveFromEventList+0xc0>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d905      	bls.n	800afc2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800afb6:	2301      	movs	r3, #1
 800afb8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800afba:	4b0a      	ldr	r3, [pc, #40]	@ (800afe4 <xTaskRemoveFromEventList+0xc4>)
 800afbc:	2201      	movs	r2, #1
 800afbe:	601a      	str	r2, [r3, #0]
 800afc0:	e001      	b.n	800afc6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800afc2:	2300      	movs	r3, #0
 800afc4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800afc6:	697b      	ldr	r3, [r7, #20]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3718      	adds	r7, #24
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	2000581c 	.word	0x2000581c
 800afd4:	200057fc 	.word	0x200057fc
 800afd8:	20005324 	.word	0x20005324
 800afdc:	200057b4 	.word	0x200057b4
 800afe0:	20005320 	.word	0x20005320
 800afe4:	20005808 	.word	0x20005808

0800afe8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10b      	bne.n	800b00e <vTaskSetTimeOutState+0x26>
	__asm volatile
 800aff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	60fb      	str	r3, [r7, #12]
}
 800b008:	bf00      	nop
 800b00a:	bf00      	nop
 800b00c:	e7fd      	b.n	800b00a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b00e:	f000 fedb 	bl	800bdc8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b012:	4b07      	ldr	r3, [pc, #28]	@ (800b030 <vTaskSetTimeOutState+0x48>)
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b01a:	4b06      	ldr	r3, [pc, #24]	@ (800b034 <vTaskSetTimeOutState+0x4c>)
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b022:	f000 ff03 	bl	800be2c <vPortExitCritical>
}
 800b026:	bf00      	nop
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	2000580c 	.word	0x2000580c
 800b034:	200057f8 	.word	0x200057f8

0800b038 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b040:	4b06      	ldr	r3, [pc, #24]	@ (800b05c <vTaskInternalSetTimeOutState+0x24>)
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b048:	4b05      	ldr	r3, [pc, #20]	@ (800b060 <vTaskInternalSetTimeOutState+0x28>)
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	605a      	str	r2, [r3, #4]
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr
 800b05c:	2000580c 	.word	0x2000580c
 800b060:	200057f8 	.word	0x200057f8

0800b064 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b088      	sub	sp, #32
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10b      	bne.n	800b08c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	613b      	str	r3, [r7, #16]
}
 800b086:	bf00      	nop
 800b088:	bf00      	nop
 800b08a:	e7fd      	b.n	800b088 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10b      	bne.n	800b0aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	60fb      	str	r3, [r7, #12]
}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	e7fd      	b.n	800b0a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b0aa:	f000 fe8d 	bl	800bdc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b0ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b124 <xTaskCheckForTimeOut+0xc0>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	69ba      	ldr	r2, [r7, #24]
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0c6:	d102      	bne.n	800b0ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	61fb      	str	r3, [r7, #28]
 800b0cc:	e023      	b.n	800b116 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	4b15      	ldr	r3, [pc, #84]	@ (800b128 <xTaskCheckForTimeOut+0xc4>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d007      	beq.n	800b0ea <xTaskCheckForTimeOut+0x86>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	69ba      	ldr	r2, [r7, #24]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d302      	bcc.n	800b0ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	61fb      	str	r3, [r7, #28]
 800b0e8:	e015      	b.n	800b116 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	697a      	ldr	r2, [r7, #20]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d20b      	bcs.n	800b10c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	1ad2      	subs	r2, r2, r3
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7ff ff99 	bl	800b038 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b106:	2300      	movs	r3, #0
 800b108:	61fb      	str	r3, [r7, #28]
 800b10a:	e004      	b.n	800b116 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	2200      	movs	r2, #0
 800b110:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b112:	2301      	movs	r3, #1
 800b114:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b116:	f000 fe89 	bl	800be2c <vPortExitCritical>

	return xReturn;
 800b11a:	69fb      	ldr	r3, [r7, #28]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3720      	adds	r7, #32
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	200057f8 	.word	0x200057f8
 800b128:	2000580c 	.word	0x2000580c

0800b12c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b12c:	b480      	push	{r7}
 800b12e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b130:	4b03      	ldr	r3, [pc, #12]	@ (800b140 <vTaskMissedYield+0x14>)
 800b132:	2201      	movs	r2, #1
 800b134:	601a      	str	r2, [r3, #0]
}
 800b136:	bf00      	nop
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr
 800b140:	20005808 	.word	0x20005808

0800b144 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b14c:	f000 f852 	bl	800b1f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b150:	4b06      	ldr	r3, [pc, #24]	@ (800b16c <prvIdleTask+0x28>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d9f9      	bls.n	800b14c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b158:	4b05      	ldr	r3, [pc, #20]	@ (800b170 <prvIdleTask+0x2c>)
 800b15a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b15e:	601a      	str	r2, [r3, #0]
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b168:	e7f0      	b.n	800b14c <prvIdleTask+0x8>
 800b16a:	bf00      	nop
 800b16c:	20005324 	.word	0x20005324
 800b170:	e000ed04 	.word	0xe000ed04

0800b174 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b17a:	2300      	movs	r3, #0
 800b17c:	607b      	str	r3, [r7, #4]
 800b17e:	e00c      	b.n	800b19a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	4613      	mov	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4a12      	ldr	r2, [pc, #72]	@ (800b1d4 <prvInitialiseTaskLists+0x60>)
 800b18c:	4413      	add	r3, r2
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fe fcae 	bl	8009af0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	3301      	adds	r3, #1
 800b198:	607b      	str	r3, [r7, #4]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b37      	cmp	r3, #55	@ 0x37
 800b19e:	d9ef      	bls.n	800b180 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b1a0:	480d      	ldr	r0, [pc, #52]	@ (800b1d8 <prvInitialiseTaskLists+0x64>)
 800b1a2:	f7fe fca5 	bl	8009af0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b1a6:	480d      	ldr	r0, [pc, #52]	@ (800b1dc <prvInitialiseTaskLists+0x68>)
 800b1a8:	f7fe fca2 	bl	8009af0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b1ac:	480c      	ldr	r0, [pc, #48]	@ (800b1e0 <prvInitialiseTaskLists+0x6c>)
 800b1ae:	f7fe fc9f 	bl	8009af0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b1b2:	480c      	ldr	r0, [pc, #48]	@ (800b1e4 <prvInitialiseTaskLists+0x70>)
 800b1b4:	f7fe fc9c 	bl	8009af0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b1b8:	480b      	ldr	r0, [pc, #44]	@ (800b1e8 <prvInitialiseTaskLists+0x74>)
 800b1ba:	f7fe fc99 	bl	8009af0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b1be:	4b0b      	ldr	r3, [pc, #44]	@ (800b1ec <prvInitialiseTaskLists+0x78>)
 800b1c0:	4a05      	ldr	r2, [pc, #20]	@ (800b1d8 <prvInitialiseTaskLists+0x64>)
 800b1c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b1c4:	4b0a      	ldr	r3, [pc, #40]	@ (800b1f0 <prvInitialiseTaskLists+0x7c>)
 800b1c6:	4a05      	ldr	r2, [pc, #20]	@ (800b1dc <prvInitialiseTaskLists+0x68>)
 800b1c8:	601a      	str	r2, [r3, #0]
}
 800b1ca:	bf00      	nop
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	20005324 	.word	0x20005324
 800b1d8:	20005784 	.word	0x20005784
 800b1dc:	20005798 	.word	0x20005798
 800b1e0:	200057b4 	.word	0x200057b4
 800b1e4:	200057c8 	.word	0x200057c8
 800b1e8:	200057e0 	.word	0x200057e0
 800b1ec:	200057ac 	.word	0x200057ac
 800b1f0:	200057b0 	.word	0x200057b0

0800b1f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1fa:	e019      	b.n	800b230 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1fc:	f000 fde4 	bl	800bdc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b200:	4b10      	ldr	r3, [pc, #64]	@ (800b244 <prvCheckTasksWaitingTermination+0x50>)
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	3304      	adds	r3, #4
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fe fcf9 	bl	8009c04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b212:	4b0d      	ldr	r3, [pc, #52]	@ (800b248 <prvCheckTasksWaitingTermination+0x54>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3b01      	subs	r3, #1
 800b218:	4a0b      	ldr	r2, [pc, #44]	@ (800b248 <prvCheckTasksWaitingTermination+0x54>)
 800b21a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b21c:	4b0b      	ldr	r3, [pc, #44]	@ (800b24c <prvCheckTasksWaitingTermination+0x58>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	3b01      	subs	r3, #1
 800b222:	4a0a      	ldr	r2, [pc, #40]	@ (800b24c <prvCheckTasksWaitingTermination+0x58>)
 800b224:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b226:	f000 fe01 	bl	800be2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f810 	bl	800b250 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b230:	4b06      	ldr	r3, [pc, #24]	@ (800b24c <prvCheckTasksWaitingTermination+0x58>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1e1      	bne.n	800b1fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b238:	bf00      	nop
 800b23a:	bf00      	nop
 800b23c:	3708      	adds	r7, #8
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	200057c8 	.word	0x200057c8
 800b248:	200057f4 	.word	0x200057f4
 800b24c:	200057dc 	.word	0x200057dc

0800b250 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d108      	bne.n	800b274 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b266:	4618      	mov	r0, r3
 800b268:	f000 ff9e 	bl	800c1a8 <vPortFree>
				vPortFree( pxTCB );
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 ff9b 	bl	800c1a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b272:	e019      	b.n	800b2a8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d103      	bne.n	800b286 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 ff92 	bl	800c1a8 <vPortFree>
	}
 800b284:	e010      	b.n	800b2a8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d00b      	beq.n	800b2a8 <prvDeleteTCB+0x58>
	__asm volatile
 800b290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	60fb      	str	r3, [r7, #12]
}
 800b2a2:	bf00      	nop
 800b2a4:	bf00      	nop
 800b2a6:	e7fd      	b.n	800b2a4 <prvDeleteTCB+0x54>
	}
 800b2a8:	bf00      	nop
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e8 <prvResetNextTaskUnblockTime+0x38>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d104      	bne.n	800b2ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b2c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b2ec <prvResetNextTaskUnblockTime+0x3c>)
 800b2c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b2c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b2c8:	e008      	b.n	800b2dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2ca:	4b07      	ldr	r3, [pc, #28]	@ (800b2e8 <prvResetNextTaskUnblockTime+0x38>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	4a04      	ldr	r2, [pc, #16]	@ (800b2ec <prvResetNextTaskUnblockTime+0x3c>)
 800b2da:	6013      	str	r3, [r2, #0]
}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	200057ac 	.word	0x200057ac
 800b2ec:	20005814 	.word	0x20005814

0800b2f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b324 <xTaskGetSchedulerState+0x34>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d102      	bne.n	800b304 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2fe:	2301      	movs	r3, #1
 800b300:	607b      	str	r3, [r7, #4]
 800b302:	e008      	b.n	800b316 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b304:	4b08      	ldr	r3, [pc, #32]	@ (800b328 <xTaskGetSchedulerState+0x38>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d102      	bne.n	800b312 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b30c:	2302      	movs	r3, #2
 800b30e:	607b      	str	r3, [r7, #4]
 800b310:	e001      	b.n	800b316 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b312:	2300      	movs	r3, #0
 800b314:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b316:	687b      	ldr	r3, [r7, #4]
	}
 800b318:	4618      	mov	r0, r3
 800b31a:	370c      	adds	r7, #12
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr
 800b324:	20005800 	.word	0x20005800
 800b328:	2000581c 	.word	0x2000581c

0800b32c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b086      	sub	sp, #24
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b338:	2300      	movs	r3, #0
 800b33a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d058      	beq.n	800b3f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b342:	4b2f      	ldr	r3, [pc, #188]	@ (800b400 <xTaskPriorityDisinherit+0xd4>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	693a      	ldr	r2, [r7, #16]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d00b      	beq.n	800b364 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	60fb      	str	r3, [r7, #12]
}
 800b35e:	bf00      	nop
 800b360:	bf00      	nop
 800b362:	e7fd      	b.n	800b360 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d10b      	bne.n	800b384 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b370:	f383 8811 	msr	BASEPRI, r3
 800b374:	f3bf 8f6f 	isb	sy
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	60bb      	str	r3, [r7, #8]
}
 800b37e:	bf00      	nop
 800b380:	bf00      	nop
 800b382:	e7fd      	b.n	800b380 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b388:	1e5a      	subs	r2, r3, #1
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b396:	429a      	cmp	r2, r3
 800b398:	d02c      	beq.n	800b3f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d128      	bne.n	800b3f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	3304      	adds	r3, #4
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fe fc2c 	bl	8009c04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b404 <xTaskPriorityDisinherit+0xd8>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d903      	bls.n	800b3d4 <xTaskPriorityDisinherit+0xa8>
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d0:	4a0c      	ldr	r2, [pc, #48]	@ (800b404 <xTaskPriorityDisinherit+0xd8>)
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4a09      	ldr	r2, [pc, #36]	@ (800b408 <xTaskPriorityDisinherit+0xdc>)
 800b3e2:	441a      	add	r2, r3
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	3304      	adds	r3, #4
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	f7fe fbad 	bl	8009b4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3f4:	697b      	ldr	r3, [r7, #20]
	}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	20005320 	.word	0x20005320
 800b404:	200057fc 	.word	0x200057fc
 800b408:	20005324 	.word	0x20005324

0800b40c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b416:	4b21      	ldr	r3, [pc, #132]	@ (800b49c <prvAddCurrentTaskToDelayedList+0x90>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b41c:	4b20      	ldr	r3, [pc, #128]	@ (800b4a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	3304      	adds	r3, #4
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe fbee 	bl	8009c04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b42e:	d10a      	bne.n	800b446 <prvAddCurrentTaskToDelayedList+0x3a>
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d007      	beq.n	800b446 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b436:	4b1a      	ldr	r3, [pc, #104]	@ (800b4a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3304      	adds	r3, #4
 800b43c:	4619      	mov	r1, r3
 800b43e:	4819      	ldr	r0, [pc, #100]	@ (800b4a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b440:	f7fe fb83 	bl	8009b4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b444:	e026      	b.n	800b494 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4413      	add	r3, r2
 800b44c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b44e:	4b14      	ldr	r3, [pc, #80]	@ (800b4a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	68ba      	ldr	r2, [r7, #8]
 800b454:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d209      	bcs.n	800b472 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b45e:	4b12      	ldr	r3, [pc, #72]	@ (800b4a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	4b0f      	ldr	r3, [pc, #60]	@ (800b4a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	3304      	adds	r3, #4
 800b468:	4619      	mov	r1, r3
 800b46a:	4610      	mov	r0, r2
 800b46c:	f7fe fb91 	bl	8009b92 <vListInsert>
}
 800b470:	e010      	b.n	800b494 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b472:	4b0e      	ldr	r3, [pc, #56]	@ (800b4ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	4b0a      	ldr	r3, [pc, #40]	@ (800b4a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3304      	adds	r3, #4
 800b47c:	4619      	mov	r1, r3
 800b47e:	4610      	mov	r0, r2
 800b480:	f7fe fb87 	bl	8009b92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b484:	4b0a      	ldr	r3, [pc, #40]	@ (800b4b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d202      	bcs.n	800b494 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b48e:	4a08      	ldr	r2, [pc, #32]	@ (800b4b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	6013      	str	r3, [r2, #0]
}
 800b494:	bf00      	nop
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	200057f8 	.word	0x200057f8
 800b4a0:	20005320 	.word	0x20005320
 800b4a4:	200057e0 	.word	0x200057e0
 800b4a8:	200057b0 	.word	0x200057b0
 800b4ac:	200057ac 	.word	0x200057ac
 800b4b0:	20005814 	.word	0x20005814

0800b4b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b08a      	sub	sp, #40	@ 0x28
 800b4b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b4be:	f000 fb13 	bl	800bae8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b4c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b538 <xTimerCreateTimerTask+0x84>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d021      	beq.n	800b50e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b4d2:	1d3a      	adds	r2, r7, #4
 800b4d4:	f107 0108 	add.w	r1, r7, #8
 800b4d8:	f107 030c 	add.w	r3, r7, #12
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fe faed 	bl	8009abc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b4e2:	6879      	ldr	r1, [r7, #4]
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	68fa      	ldr	r2, [r7, #12]
 800b4e8:	9202      	str	r2, [sp, #8]
 800b4ea:	9301      	str	r3, [sp, #4]
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	460a      	mov	r2, r1
 800b4f4:	4911      	ldr	r1, [pc, #68]	@ (800b53c <xTimerCreateTimerTask+0x88>)
 800b4f6:	4812      	ldr	r0, [pc, #72]	@ (800b540 <xTimerCreateTimerTask+0x8c>)
 800b4f8:	f7ff f8a8 	bl	800a64c <xTaskCreateStatic>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	4a11      	ldr	r2, [pc, #68]	@ (800b544 <xTimerCreateTimerTask+0x90>)
 800b500:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b502:	4b10      	ldr	r3, [pc, #64]	@ (800b544 <xTimerCreateTimerTask+0x90>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d001      	beq.n	800b50e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b50a:	2301      	movs	r3, #1
 800b50c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10b      	bne.n	800b52c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	613b      	str	r3, [r7, #16]
}
 800b526:	bf00      	nop
 800b528:	bf00      	nop
 800b52a:	e7fd      	b.n	800b528 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b52c:	697b      	ldr	r3, [r7, #20]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3718      	adds	r7, #24
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	20005850 	.word	0x20005850
 800b53c:	0801aa88 	.word	0x0801aa88
 800b540:	0800b681 	.word	0x0800b681
 800b544:	20005854 	.word	0x20005854

0800b548 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b08a      	sub	sp, #40	@ 0x28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
 800b554:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b556:	2300      	movs	r3, #0
 800b558:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10b      	bne.n	800b578 <xTimerGenericCommand+0x30>
	__asm volatile
 800b560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b564:	f383 8811 	msr	BASEPRI, r3
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	623b      	str	r3, [r7, #32]
}
 800b572:	bf00      	nop
 800b574:	bf00      	nop
 800b576:	e7fd      	b.n	800b574 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b578:	4b19      	ldr	r3, [pc, #100]	@ (800b5e0 <xTimerGenericCommand+0x98>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d02a      	beq.n	800b5d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	2b05      	cmp	r3, #5
 800b590:	dc18      	bgt.n	800b5c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b592:	f7ff fead 	bl	800b2f0 <xTaskGetSchedulerState>
 800b596:	4603      	mov	r3, r0
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d109      	bne.n	800b5b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b59c:	4b10      	ldr	r3, [pc, #64]	@ (800b5e0 <xTimerGenericCommand+0x98>)
 800b59e:	6818      	ldr	r0, [r3, #0]
 800b5a0:	f107 0110 	add.w	r1, r7, #16
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5a8:	f7fe fc60 	bl	8009e6c <xQueueGenericSend>
 800b5ac:	6278      	str	r0, [r7, #36]	@ 0x24
 800b5ae:	e012      	b.n	800b5d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b5b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e0 <xTimerGenericCommand+0x98>)
 800b5b2:	6818      	ldr	r0, [r3, #0]
 800b5b4:	f107 0110 	add.w	r1, r7, #16
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f7fe fc56 	bl	8009e6c <xQueueGenericSend>
 800b5c0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b5c2:	e008      	b.n	800b5d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b5c4:	4b06      	ldr	r3, [pc, #24]	@ (800b5e0 <xTimerGenericCommand+0x98>)
 800b5c6:	6818      	ldr	r0, [r3, #0]
 800b5c8:	f107 0110 	add.w	r1, r7, #16
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	f7fe fd4e 	bl	800a070 <xQueueGenericSendFromISR>
 800b5d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3728      	adds	r7, #40	@ 0x28
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	20005850 	.word	0x20005850

0800b5e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b088      	sub	sp, #32
 800b5e8:	af02      	add	r7, sp, #8
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ee:	4b23      	ldr	r3, [pc, #140]	@ (800b67c <prvProcessExpiredTimer+0x98>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fe fb01 	bl	8009c04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b608:	f003 0304 	and.w	r3, r3, #4
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d023      	beq.n	800b658 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	699a      	ldr	r2, [r3, #24]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	18d1      	adds	r1, r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	6978      	ldr	r0, [r7, #20]
 800b61e:	f000 f8d5 	bl	800b7cc <prvInsertTimerInActiveList>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d020      	beq.n	800b66a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b628:	2300      	movs	r3, #0
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	2300      	movs	r3, #0
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	2100      	movs	r1, #0
 800b632:	6978      	ldr	r0, [r7, #20]
 800b634:	f7ff ff88 	bl	800b548 <xTimerGenericCommand>
 800b638:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d114      	bne.n	800b66a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	60fb      	str	r3, [r7, #12]
}
 800b652:	bf00      	nop
 800b654:	bf00      	nop
 800b656:	e7fd      	b.n	800b654 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b65e:	f023 0301 	bic.w	r3, r3, #1
 800b662:	b2da      	uxtb	r2, r3
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	6978      	ldr	r0, [r7, #20]
 800b670:	4798      	blx	r3
}
 800b672:	bf00      	nop
 800b674:	3718      	adds	r7, #24
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20005848 	.word	0x20005848

0800b680 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b688:	f107 0308 	add.w	r3, r7, #8
 800b68c:	4618      	mov	r0, r3
 800b68e:	f000 f859 	bl	800b744 <prvGetNextExpireTime>
 800b692:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	4619      	mov	r1, r3
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f000 f805 	bl	800b6a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b69e:	f000 f8d7 	bl	800b850 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6a2:	bf00      	nop
 800b6a4:	e7f0      	b.n	800b688 <prvTimerTask+0x8>
	...

0800b6a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b6b2:	f7ff fa0f 	bl	800aad4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6b6:	f107 0308 	add.w	r3, r7, #8
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f000 f866 	bl	800b78c <prvSampleTimeNow>
 800b6c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d130      	bne.n	800b72a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10a      	bne.n	800b6e4 <prvProcessTimerOrBlockTask+0x3c>
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d806      	bhi.n	800b6e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b6d6:	f7ff fa0b 	bl	800aaf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b6da:	68f9      	ldr	r1, [r7, #12]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f7ff ff81 	bl	800b5e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b6e2:	e024      	b.n	800b72e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d008      	beq.n	800b6fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b6ea:	4b13      	ldr	r3, [pc, #76]	@ (800b738 <prvProcessTimerOrBlockTask+0x90>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d101      	bne.n	800b6f8 <prvProcessTimerOrBlockTask+0x50>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e000      	b.n	800b6fa <prvProcessTimerOrBlockTask+0x52>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b6fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b73c <prvProcessTimerOrBlockTask+0x94>)
 800b6fe:	6818      	ldr	r0, [r3, #0]
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	4619      	mov	r1, r3
 800b70a:	f7fe ff6b 	bl	800a5e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b70e:	f7ff f9ef 	bl	800aaf0 <xTaskResumeAll>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10a      	bne.n	800b72e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b718:	4b09      	ldr	r3, [pc, #36]	@ (800b740 <prvProcessTimerOrBlockTask+0x98>)
 800b71a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	f3bf 8f6f 	isb	sy
}
 800b728:	e001      	b.n	800b72e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b72a:	f7ff f9e1 	bl	800aaf0 <xTaskResumeAll>
}
 800b72e:	bf00      	nop
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	2000584c 	.word	0x2000584c
 800b73c:	20005850 	.word	0x20005850
 800b740:	e000ed04 	.word	0xe000ed04

0800b744 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b74c:	4b0e      	ldr	r3, [pc, #56]	@ (800b788 <prvGetNextExpireTime+0x44>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d101      	bne.n	800b75a <prvGetNextExpireTime+0x16>
 800b756:	2201      	movs	r2, #1
 800b758:	e000      	b.n	800b75c <prvGetNextExpireTime+0x18>
 800b75a:	2200      	movs	r2, #0
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d105      	bne.n	800b774 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b768:	4b07      	ldr	r3, [pc, #28]	@ (800b788 <prvGetNextExpireTime+0x44>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	60fb      	str	r3, [r7, #12]
 800b772:	e001      	b.n	800b778 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b774:	2300      	movs	r3, #0
 800b776:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b778:	68fb      	ldr	r3, [r7, #12]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	20005848 	.word	0x20005848

0800b78c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b794:	f7ff fa4a 	bl	800ac2c <xTaskGetTickCount>
 800b798:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b79a:	4b0b      	ldr	r3, [pc, #44]	@ (800b7c8 <prvSampleTimeNow+0x3c>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d205      	bcs.n	800b7b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b7a4:	f000 f93a 	bl	800ba1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	601a      	str	r2, [r3, #0]
 800b7ae:	e002      	b.n	800b7b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b7b6:	4a04      	ldr	r2, [pc, #16]	@ (800b7c8 <prvSampleTimeNow+0x3c>)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20005858 	.word	0x20005858

0800b7cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
 800b7d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d812      	bhi.n	800b818 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	1ad2      	subs	r2, r2, r3
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d302      	bcc.n	800b806 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b800:	2301      	movs	r3, #1
 800b802:	617b      	str	r3, [r7, #20]
 800b804:	e01b      	b.n	800b83e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b806:	4b10      	ldr	r3, [pc, #64]	@ (800b848 <prvInsertTimerInActiveList+0x7c>)
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	3304      	adds	r3, #4
 800b80e:	4619      	mov	r1, r3
 800b810:	4610      	mov	r0, r2
 800b812:	f7fe f9be 	bl	8009b92 <vListInsert>
 800b816:	e012      	b.n	800b83e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d206      	bcs.n	800b82e <prvInsertTimerInActiveList+0x62>
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	429a      	cmp	r2, r3
 800b826:	d302      	bcc.n	800b82e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b828:	2301      	movs	r3, #1
 800b82a:	617b      	str	r3, [r7, #20]
 800b82c:	e007      	b.n	800b83e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b82e:	4b07      	ldr	r3, [pc, #28]	@ (800b84c <prvInsertTimerInActiveList+0x80>)
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3304      	adds	r3, #4
 800b836:	4619      	mov	r1, r3
 800b838:	4610      	mov	r0, r2
 800b83a:	f7fe f9aa 	bl	8009b92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b83e:	697b      	ldr	r3, [r7, #20]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	2000584c 	.word	0x2000584c
 800b84c:	20005848 	.word	0x20005848

0800b850 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b08e      	sub	sp, #56	@ 0x38
 800b854:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b856:	e0ce      	b.n	800b9f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	da19      	bge.n	800b892 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b85e:	1d3b      	adds	r3, r7, #4
 800b860:	3304      	adds	r3, #4
 800b862:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10b      	bne.n	800b882 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b86a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b86e:	f383 8811 	msr	BASEPRI, r3
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	61fb      	str	r3, [r7, #28]
}
 800b87c:	bf00      	nop
 800b87e:	bf00      	nop
 800b880:	e7fd      	b.n	800b87e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b888:	6850      	ldr	r0, [r2, #4]
 800b88a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b88c:	6892      	ldr	r2, [r2, #8]
 800b88e:	4611      	mov	r1, r2
 800b890:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	f2c0 80ae 	blt.w	800b9f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a0:	695b      	ldr	r3, [r3, #20]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d004      	beq.n	800b8b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fe f9aa 	bl	8009c04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8b0:	463b      	mov	r3, r7
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7ff ff6a 	bl	800b78c <prvSampleTimeNow>
 800b8b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b09      	cmp	r3, #9
 800b8be:	f200 8097 	bhi.w	800b9f0 <prvProcessReceivedCommands+0x1a0>
 800b8c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8c8 <prvProcessReceivedCommands+0x78>)
 800b8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c8:	0800b8f1 	.word	0x0800b8f1
 800b8cc:	0800b8f1 	.word	0x0800b8f1
 800b8d0:	0800b8f1 	.word	0x0800b8f1
 800b8d4:	0800b967 	.word	0x0800b967
 800b8d8:	0800b97b 	.word	0x0800b97b
 800b8dc:	0800b9c7 	.word	0x0800b9c7
 800b8e0:	0800b8f1 	.word	0x0800b8f1
 800b8e4:	0800b8f1 	.word	0x0800b8f1
 800b8e8:	0800b967 	.word	0x0800b967
 800b8ec:	0800b97b 	.word	0x0800b97b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8f6:	f043 0301 	orr.w	r3, r3, #1
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b902:	68ba      	ldr	r2, [r7, #8]
 800b904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	18d1      	adds	r1, r2, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b90e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b910:	f7ff ff5c 	bl	800b7cc <prvInsertTimerInActiveList>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d06c      	beq.n	800b9f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91c:	6a1b      	ldr	r3, [r3, #32]
 800b91e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b920:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b928:	f003 0304 	and.w	r3, r3, #4
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d061      	beq.n	800b9f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b934:	699b      	ldr	r3, [r3, #24]
 800b936:	441a      	add	r2, r3
 800b938:	2300      	movs	r3, #0
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	2300      	movs	r3, #0
 800b93e:	2100      	movs	r1, #0
 800b940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b942:	f7ff fe01 	bl	800b548 <xTimerGenericCommand>
 800b946:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d152      	bne.n	800b9f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	61bb      	str	r3, [r7, #24]
}
 800b960:	bf00      	nop
 800b962:	bf00      	nop
 800b964:	e7fd      	b.n	800b962 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b968:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b96c:	f023 0301 	bic.w	r3, r3, #1
 800b970:	b2da      	uxtb	r2, r3
 800b972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b974:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b978:	e03d      	b.n	800b9f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b980:	f043 0301 	orr.w	r3, r3, #1
 800b984:	b2da      	uxtb	r2, r3
 800b986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b988:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b990:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10b      	bne.n	800b9b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	617b      	str	r3, [r7, #20]
}
 800b9ac:	bf00      	nop
 800b9ae:	bf00      	nop
 800b9b0:	e7fd      	b.n	800b9ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b4:	699a      	ldr	r2, [r3, #24]
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b8:	18d1      	adds	r1, r2, r3
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9c0:	f7ff ff04 	bl	800b7cc <prvInsertTimerInActiveList>
					break;
 800b9c4:	e017      	b.n	800b9f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9cc:	f003 0302 	and.w	r3, r3, #2
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d103      	bne.n	800b9dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b9d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9d6:	f000 fbe7 	bl	800c1a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b9da:	e00c      	b.n	800b9f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9e2:	f023 0301 	bic.w	r3, r3, #1
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b9ee:	e002      	b.n	800b9f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b9f0:	bf00      	nop
 800b9f2:	e000      	b.n	800b9f6 <prvProcessReceivedCommands+0x1a6>
					break;
 800b9f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9f6:	4b08      	ldr	r3, [pc, #32]	@ (800ba18 <prvProcessReceivedCommands+0x1c8>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	1d39      	adds	r1, r7, #4
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fe fbd4 	bl	800a1ac <xQueueReceive>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f47f af26 	bne.w	800b858 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ba0c:	bf00      	nop
 800ba0e:	bf00      	nop
 800ba10:	3730      	adds	r7, #48	@ 0x30
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	20005850 	.word	0x20005850

0800ba1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b088      	sub	sp, #32
 800ba20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba22:	e049      	b.n	800bab8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba24:	4b2e      	ldr	r3, [pc, #184]	@ (800bae0 <prvSwitchTimerLists+0xc4>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba2e:	4b2c      	ldr	r3, [pc, #176]	@ (800bae0 <prvSwitchTimerLists+0xc4>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3304      	adds	r3, #4
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fe f8e1 	bl	8009c04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d02f      	beq.n	800bab8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	699b      	ldr	r3, [r3, #24]
 800ba5c:	693a      	ldr	r2, [r7, #16]
 800ba5e:	4413      	add	r3, r2
 800ba60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d90e      	bls.n	800ba88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	68ba      	ldr	r2, [r7, #8]
 800ba6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba76:	4b1a      	ldr	r3, [pc, #104]	@ (800bae0 <prvSwitchTimerLists+0xc4>)
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	4619      	mov	r1, r3
 800ba80:	4610      	mov	r0, r2
 800ba82:	f7fe f886 	bl	8009b92 <vListInsert>
 800ba86:	e017      	b.n	800bab8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba88:	2300      	movs	r3, #0
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	2100      	movs	r1, #0
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f7ff fd58 	bl	800b548 <xTimerGenericCommand>
 800ba98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10b      	bne.n	800bab8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	603b      	str	r3, [r7, #0]
}
 800bab2:	bf00      	nop
 800bab4:	bf00      	nop
 800bab6:	e7fd      	b.n	800bab4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bab8:	4b09      	ldr	r3, [pc, #36]	@ (800bae0 <prvSwitchTimerLists+0xc4>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1b0      	bne.n	800ba24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bac2:	4b07      	ldr	r3, [pc, #28]	@ (800bae0 <prvSwitchTimerLists+0xc4>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bac8:	4b06      	ldr	r3, [pc, #24]	@ (800bae4 <prvSwitchTimerLists+0xc8>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a04      	ldr	r2, [pc, #16]	@ (800bae0 <prvSwitchTimerLists+0xc4>)
 800bace:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bad0:	4a04      	ldr	r2, [pc, #16]	@ (800bae4 <prvSwitchTimerLists+0xc8>)
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	6013      	str	r3, [r2, #0]
}
 800bad6:	bf00      	nop
 800bad8:	3718      	adds	r7, #24
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	20005848 	.word	0x20005848
 800bae4:	2000584c 	.word	0x2000584c

0800bae8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800baee:	f000 f96b 	bl	800bdc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800baf2:	4b15      	ldr	r3, [pc, #84]	@ (800bb48 <prvCheckForValidListAndQueue+0x60>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d120      	bne.n	800bb3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bafa:	4814      	ldr	r0, [pc, #80]	@ (800bb4c <prvCheckForValidListAndQueue+0x64>)
 800bafc:	f7fd fff8 	bl	8009af0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb00:	4813      	ldr	r0, [pc, #76]	@ (800bb50 <prvCheckForValidListAndQueue+0x68>)
 800bb02:	f7fd fff5 	bl	8009af0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb06:	4b13      	ldr	r3, [pc, #76]	@ (800bb54 <prvCheckForValidListAndQueue+0x6c>)
 800bb08:	4a10      	ldr	r2, [pc, #64]	@ (800bb4c <prvCheckForValidListAndQueue+0x64>)
 800bb0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb0c:	4b12      	ldr	r3, [pc, #72]	@ (800bb58 <prvCheckForValidListAndQueue+0x70>)
 800bb0e:	4a10      	ldr	r2, [pc, #64]	@ (800bb50 <prvCheckForValidListAndQueue+0x68>)
 800bb10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb12:	2300      	movs	r3, #0
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	4b11      	ldr	r3, [pc, #68]	@ (800bb5c <prvCheckForValidListAndQueue+0x74>)
 800bb18:	4a11      	ldr	r2, [pc, #68]	@ (800bb60 <prvCheckForValidListAndQueue+0x78>)
 800bb1a:	2110      	movs	r1, #16
 800bb1c:	200a      	movs	r0, #10
 800bb1e:	f7fe f905 	bl	8009d2c <xQueueGenericCreateStatic>
 800bb22:	4603      	mov	r3, r0
 800bb24:	4a08      	ldr	r2, [pc, #32]	@ (800bb48 <prvCheckForValidListAndQueue+0x60>)
 800bb26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb28:	4b07      	ldr	r3, [pc, #28]	@ (800bb48 <prvCheckForValidListAndQueue+0x60>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d005      	beq.n	800bb3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb30:	4b05      	ldr	r3, [pc, #20]	@ (800bb48 <prvCheckForValidListAndQueue+0x60>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	490b      	ldr	r1, [pc, #44]	@ (800bb64 <prvCheckForValidListAndQueue+0x7c>)
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fe fd2a 	bl	800a590 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb3c:	f000 f976 	bl	800be2c <vPortExitCritical>
}
 800bb40:	bf00      	nop
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	20005850 	.word	0x20005850
 800bb4c:	20005820 	.word	0x20005820
 800bb50:	20005834 	.word	0x20005834
 800bb54:	20005848 	.word	0x20005848
 800bb58:	2000584c 	.word	0x2000584c
 800bb5c:	200058fc 	.word	0x200058fc
 800bb60:	2000585c 	.word	0x2000585c
 800bb64:	0801aa90 	.word	0x0801aa90

0800bb68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	3b04      	subs	r3, #4
 800bb78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bb80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	3b04      	subs	r3, #4
 800bb86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	f023 0201 	bic.w	r2, r3, #1
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	3b04      	subs	r3, #4
 800bb96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb98:	4a0c      	ldr	r2, [pc, #48]	@ (800bbcc <pxPortInitialiseStack+0x64>)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3b14      	subs	r3, #20
 800bba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	3b04      	subs	r3, #4
 800bbae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f06f 0202 	mvn.w	r2, #2
 800bbb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3b20      	subs	r3, #32
 800bbbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	0800bbd1 	.word	0x0800bbd1

0800bbd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bbda:	4b13      	ldr	r3, [pc, #76]	@ (800bc28 <prvTaskExitError+0x58>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbe2:	d00b      	beq.n	800bbfc <prvTaskExitError+0x2c>
	__asm volatile
 800bbe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe8:	f383 8811 	msr	BASEPRI, r3
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	60fb      	str	r3, [r7, #12]
}
 800bbf6:	bf00      	nop
 800bbf8:	bf00      	nop
 800bbfa:	e7fd      	b.n	800bbf8 <prvTaskExitError+0x28>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	60bb      	str	r3, [r7, #8]
}
 800bc0e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc10:	bf00      	nop
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d0fc      	beq.n	800bc12 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc18:	bf00      	nop
 800bc1a:	bf00      	nop
 800bc1c:	3714      	adds	r7, #20
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	20000044 	.word	0x20000044
 800bc2c:	00000000 	.word	0x00000000

0800bc30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc30:	4b07      	ldr	r3, [pc, #28]	@ (800bc50 <pxCurrentTCBConst2>)
 800bc32:	6819      	ldr	r1, [r3, #0]
 800bc34:	6808      	ldr	r0, [r1, #0]
 800bc36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3a:	f380 8809 	msr	PSP, r0
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	f04f 0000 	mov.w	r0, #0
 800bc46:	f380 8811 	msr	BASEPRI, r0
 800bc4a:	4770      	bx	lr
 800bc4c:	f3af 8000 	nop.w

0800bc50 <pxCurrentTCBConst2>:
 800bc50:	20005320 	.word	0x20005320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc54:	bf00      	nop
 800bc56:	bf00      	nop

0800bc58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc58:	4808      	ldr	r0, [pc, #32]	@ (800bc7c <prvPortStartFirstTask+0x24>)
 800bc5a:	6800      	ldr	r0, [r0, #0]
 800bc5c:	6800      	ldr	r0, [r0, #0]
 800bc5e:	f380 8808 	msr	MSP, r0
 800bc62:	f04f 0000 	mov.w	r0, #0
 800bc66:	f380 8814 	msr	CONTROL, r0
 800bc6a:	b662      	cpsie	i
 800bc6c:	b661      	cpsie	f
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	df00      	svc	0
 800bc78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc7a:	bf00      	nop
 800bc7c:	e000ed08 	.word	0xe000ed08

0800bc80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc86:	4b47      	ldr	r3, [pc, #284]	@ (800bda4 <xPortStartScheduler+0x124>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a47      	ldr	r2, [pc, #284]	@ (800bda8 <xPortStartScheduler+0x128>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d10b      	bne.n	800bca8 <xPortStartScheduler+0x28>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	60fb      	str	r3, [r7, #12]
}
 800bca2:	bf00      	nop
 800bca4:	bf00      	nop
 800bca6:	e7fd      	b.n	800bca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bca8:	4b3e      	ldr	r3, [pc, #248]	@ (800bda4 <xPortStartScheduler+0x124>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a3f      	ldr	r2, [pc, #252]	@ (800bdac <xPortStartScheduler+0x12c>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d10b      	bne.n	800bcca <xPortStartScheduler+0x4a>
	__asm volatile
 800bcb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	613b      	str	r3, [r7, #16]
}
 800bcc4:	bf00      	nop
 800bcc6:	bf00      	nop
 800bcc8:	e7fd      	b.n	800bcc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bcca:	4b39      	ldr	r3, [pc, #228]	@ (800bdb0 <xPortStartScheduler+0x130>)
 800bccc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	22ff      	movs	r2, #255	@ 0xff
 800bcda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bce4:	78fb      	ldrb	r3, [r7, #3]
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	4b31      	ldr	r3, [pc, #196]	@ (800bdb4 <xPortStartScheduler+0x134>)
 800bcf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bcf2:	4b31      	ldr	r3, [pc, #196]	@ (800bdb8 <xPortStartScheduler+0x138>)
 800bcf4:	2207      	movs	r2, #7
 800bcf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcf8:	e009      	b.n	800bd0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bcfa:	4b2f      	ldr	r3, [pc, #188]	@ (800bdb8 <xPortStartScheduler+0x138>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	4a2d      	ldr	r2, [pc, #180]	@ (800bdb8 <xPortStartScheduler+0x138>)
 800bd02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd04:	78fb      	ldrb	r3, [r7, #3]
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	005b      	lsls	r3, r3, #1
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd0e:	78fb      	ldrb	r3, [r7, #3]
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd16:	2b80      	cmp	r3, #128	@ 0x80
 800bd18:	d0ef      	beq.n	800bcfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd1a:	4b27      	ldr	r3, [pc, #156]	@ (800bdb8 <xPortStartScheduler+0x138>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f1c3 0307 	rsb	r3, r3, #7
 800bd22:	2b04      	cmp	r3, #4
 800bd24:	d00b      	beq.n	800bd3e <xPortStartScheduler+0xbe>
	__asm volatile
 800bd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	60bb      	str	r3, [r7, #8]
}
 800bd38:	bf00      	nop
 800bd3a:	bf00      	nop
 800bd3c:	e7fd      	b.n	800bd3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd3e:	4b1e      	ldr	r3, [pc, #120]	@ (800bdb8 <xPortStartScheduler+0x138>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	021b      	lsls	r3, r3, #8
 800bd44:	4a1c      	ldr	r2, [pc, #112]	@ (800bdb8 <xPortStartScheduler+0x138>)
 800bd46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd48:	4b1b      	ldr	r3, [pc, #108]	@ (800bdb8 <xPortStartScheduler+0x138>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bd50:	4a19      	ldr	r2, [pc, #100]	@ (800bdb8 <xPortStartScheduler+0x138>)
 800bd52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd5c:	4b17      	ldr	r3, [pc, #92]	@ (800bdbc <xPortStartScheduler+0x13c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a16      	ldr	r2, [pc, #88]	@ (800bdbc <xPortStartScheduler+0x13c>)
 800bd62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bd66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd68:	4b14      	ldr	r3, [pc, #80]	@ (800bdbc <xPortStartScheduler+0x13c>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a13      	ldr	r2, [pc, #76]	@ (800bdbc <xPortStartScheduler+0x13c>)
 800bd6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bd72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd74:	f000 f8da 	bl	800bf2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd78:	4b11      	ldr	r3, [pc, #68]	@ (800bdc0 <xPortStartScheduler+0x140>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd7e:	f000 f8f9 	bl	800bf74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd82:	4b10      	ldr	r3, [pc, #64]	@ (800bdc4 <xPortStartScheduler+0x144>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a0f      	ldr	r2, [pc, #60]	@ (800bdc4 <xPortStartScheduler+0x144>)
 800bd88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bd8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd8e:	f7ff ff63 	bl	800bc58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd92:	f7ff f815 	bl	800adc0 <vTaskSwitchContext>
	prvTaskExitError();
 800bd96:	f7ff ff1b 	bl	800bbd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3718      	adds	r7, #24
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	e000ed00 	.word	0xe000ed00
 800bda8:	410fc271 	.word	0x410fc271
 800bdac:	410fc270 	.word	0x410fc270
 800bdb0:	e000e400 	.word	0xe000e400
 800bdb4:	2000594c 	.word	0x2000594c
 800bdb8:	20005950 	.word	0x20005950
 800bdbc:	e000ed20 	.word	0xe000ed20
 800bdc0:	20000044 	.word	0x20000044
 800bdc4:	e000ef34 	.word	0xe000ef34

0800bdc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
	__asm volatile
 800bdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	607b      	str	r3, [r7, #4]
}
 800bde0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bde2:	4b10      	ldr	r3, [pc, #64]	@ (800be24 <vPortEnterCritical+0x5c>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	3301      	adds	r3, #1
 800bde8:	4a0e      	ldr	r2, [pc, #56]	@ (800be24 <vPortEnterCritical+0x5c>)
 800bdea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bdec:	4b0d      	ldr	r3, [pc, #52]	@ (800be24 <vPortEnterCritical+0x5c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d110      	bne.n	800be16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bdf4:	4b0c      	ldr	r3, [pc, #48]	@ (800be28 <vPortEnterCritical+0x60>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00b      	beq.n	800be16 <vPortEnterCritical+0x4e>
	__asm volatile
 800bdfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be02:	f383 8811 	msr	BASEPRI, r3
 800be06:	f3bf 8f6f 	isb	sy
 800be0a:	f3bf 8f4f 	dsb	sy
 800be0e:	603b      	str	r3, [r7, #0]
}
 800be10:	bf00      	nop
 800be12:	bf00      	nop
 800be14:	e7fd      	b.n	800be12 <vPortEnterCritical+0x4a>
	}
}
 800be16:	bf00      	nop
 800be18:	370c      	adds	r7, #12
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	20000044 	.word	0x20000044
 800be28:	e000ed04 	.word	0xe000ed04

0800be2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be32:	4b12      	ldr	r3, [pc, #72]	@ (800be7c <vPortExitCritical+0x50>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10b      	bne.n	800be52 <vPortExitCritical+0x26>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	607b      	str	r3, [r7, #4]
}
 800be4c:	bf00      	nop
 800be4e:	bf00      	nop
 800be50:	e7fd      	b.n	800be4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be52:	4b0a      	ldr	r3, [pc, #40]	@ (800be7c <vPortExitCritical+0x50>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	3b01      	subs	r3, #1
 800be58:	4a08      	ldr	r2, [pc, #32]	@ (800be7c <vPortExitCritical+0x50>)
 800be5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be5c:	4b07      	ldr	r3, [pc, #28]	@ (800be7c <vPortExitCritical+0x50>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d105      	bne.n	800be70 <vPortExitCritical+0x44>
 800be64:	2300      	movs	r3, #0
 800be66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	f383 8811 	msr	BASEPRI, r3
}
 800be6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	20000044 	.word	0x20000044

0800be80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be80:	f3ef 8009 	mrs	r0, PSP
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	4b15      	ldr	r3, [pc, #84]	@ (800bee0 <pxCurrentTCBConst>)
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	f01e 0f10 	tst.w	lr, #16
 800be90:	bf08      	it	eq
 800be92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9a:	6010      	str	r0, [r2, #0]
 800be9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bea0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bea4:	f380 8811 	msr	BASEPRI, r0
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f7fe ff86 	bl	800adc0 <vTaskSwitchContext>
 800beb4:	f04f 0000 	mov.w	r0, #0
 800beb8:	f380 8811 	msr	BASEPRI, r0
 800bebc:	bc09      	pop	{r0, r3}
 800bebe:	6819      	ldr	r1, [r3, #0]
 800bec0:	6808      	ldr	r0, [r1, #0]
 800bec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec6:	f01e 0f10 	tst.w	lr, #16
 800beca:	bf08      	it	eq
 800becc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bed0:	f380 8809 	msr	PSP, r0
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	f3af 8000 	nop.w

0800bee0 <pxCurrentTCBConst>:
 800bee0:	20005320 	.word	0x20005320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop

0800bee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	607b      	str	r3, [r7, #4]
}
 800bf00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf02:	f7fe fea3 	bl	800ac4c <xTaskIncrementTick>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d003      	beq.n	800bf14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf0c:	4b06      	ldr	r3, [pc, #24]	@ (800bf28 <xPortSysTickHandler+0x40>)
 800bf0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf12:	601a      	str	r2, [r3, #0]
 800bf14:	2300      	movs	r3, #0
 800bf16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	f383 8811 	msr	BASEPRI, r3
}
 800bf1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf20:	bf00      	nop
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	e000ed04 	.word	0xe000ed04

0800bf2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf30:	4b0b      	ldr	r3, [pc, #44]	@ (800bf60 <vPortSetupTimerInterrupt+0x34>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf36:	4b0b      	ldr	r3, [pc, #44]	@ (800bf64 <vPortSetupTimerInterrupt+0x38>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf3c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf68 <vPortSetupTimerInterrupt+0x3c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a0a      	ldr	r2, [pc, #40]	@ (800bf6c <vPortSetupTimerInterrupt+0x40>)
 800bf42:	fba2 2303 	umull	r2, r3, r2, r3
 800bf46:	099b      	lsrs	r3, r3, #6
 800bf48:	4a09      	ldr	r2, [pc, #36]	@ (800bf70 <vPortSetupTimerInterrupt+0x44>)
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf4e:	4b04      	ldr	r3, [pc, #16]	@ (800bf60 <vPortSetupTimerInterrupt+0x34>)
 800bf50:	2207      	movs	r2, #7
 800bf52:	601a      	str	r2, [r3, #0]
}
 800bf54:	bf00      	nop
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	e000e010 	.word	0xe000e010
 800bf64:	e000e018 	.word	0xe000e018
 800bf68:	20000038 	.word	0x20000038
 800bf6c:	10624dd3 	.word	0x10624dd3
 800bf70:	e000e014 	.word	0xe000e014

0800bf74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bf84 <vPortEnableVFP+0x10>
 800bf78:	6801      	ldr	r1, [r0, #0]
 800bf7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bf7e:	6001      	str	r1, [r0, #0]
 800bf80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf82:	bf00      	nop
 800bf84:	e000ed88 	.word	0xe000ed88

0800bf88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf8e:	f3ef 8305 	mrs	r3, IPSR
 800bf92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b0f      	cmp	r3, #15
 800bf98:	d915      	bls.n	800bfc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf9a:	4a18      	ldr	r2, [pc, #96]	@ (800bffc <vPortValidateInterruptPriority+0x74>)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bfa4:	4b16      	ldr	r3, [pc, #88]	@ (800c000 <vPortValidateInterruptPriority+0x78>)
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	7afa      	ldrb	r2, [r7, #11]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d20b      	bcs.n	800bfc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	607b      	str	r3, [r7, #4]
}
 800bfc0:	bf00      	nop
 800bfc2:	bf00      	nop
 800bfc4:	e7fd      	b.n	800bfc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bfc6:	4b0f      	ldr	r3, [pc, #60]	@ (800c004 <vPortValidateInterruptPriority+0x7c>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bfce:	4b0e      	ldr	r3, [pc, #56]	@ (800c008 <vPortValidateInterruptPriority+0x80>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d90b      	bls.n	800bfee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	603b      	str	r3, [r7, #0]
}
 800bfe8:	bf00      	nop
 800bfea:	bf00      	nop
 800bfec:	e7fd      	b.n	800bfea <vPortValidateInterruptPriority+0x62>
	}
 800bfee:	bf00      	nop
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	e000e3f0 	.word	0xe000e3f0
 800c000:	2000594c 	.word	0x2000594c
 800c004:	e000ed0c 	.word	0xe000ed0c
 800c008:	20005950 	.word	0x20005950

0800c00c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08a      	sub	sp, #40	@ 0x28
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c014:	2300      	movs	r3, #0
 800c016:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c018:	f7fe fd5c 	bl	800aad4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c01c:	4b5c      	ldr	r3, [pc, #368]	@ (800c190 <pvPortMalloc+0x184>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d101      	bne.n	800c028 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c024:	f000 f924 	bl	800c270 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c028:	4b5a      	ldr	r3, [pc, #360]	@ (800c194 <pvPortMalloc+0x188>)
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4013      	ands	r3, r2
 800c030:	2b00      	cmp	r3, #0
 800c032:	f040 8095 	bne.w	800c160 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d01e      	beq.n	800c07a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c03c:	2208      	movs	r2, #8
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4413      	add	r3, r2
 800c042:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f003 0307 	and.w	r3, r3, #7
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d015      	beq.n	800c07a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f023 0307 	bic.w	r3, r3, #7
 800c054:	3308      	adds	r3, #8
 800c056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f003 0307 	and.w	r3, r3, #7
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00b      	beq.n	800c07a <pvPortMalloc+0x6e>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	617b      	str	r3, [r7, #20]
}
 800c074:	bf00      	nop
 800c076:	bf00      	nop
 800c078:	e7fd      	b.n	800c076 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d06f      	beq.n	800c160 <pvPortMalloc+0x154>
 800c080:	4b45      	ldr	r3, [pc, #276]	@ (800c198 <pvPortMalloc+0x18c>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	429a      	cmp	r2, r3
 800c088:	d86a      	bhi.n	800c160 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c08a:	4b44      	ldr	r3, [pc, #272]	@ (800c19c <pvPortMalloc+0x190>)
 800c08c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c08e:	4b43      	ldr	r3, [pc, #268]	@ (800c19c <pvPortMalloc+0x190>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c094:	e004      	b.n	800c0a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c098:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d903      	bls.n	800c0b2 <pvPortMalloc+0xa6>
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1f1      	bne.n	800c096 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0b2:	4b37      	ldr	r3, [pc, #220]	@ (800c190 <pvPortMalloc+0x184>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d051      	beq.n	800c160 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c0bc:	6a3b      	ldr	r3, [r7, #32]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2208      	movs	r2, #8
 800c0c2:	4413      	add	r3, r2
 800c0c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	6a3b      	ldr	r3, [r7, #32]
 800c0cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d0:	685a      	ldr	r2, [r3, #4]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	1ad2      	subs	r2, r2, r3
 800c0d6:	2308      	movs	r3, #8
 800c0d8:	005b      	lsls	r3, r3, #1
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d920      	bls.n	800c120 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	f003 0307 	and.w	r3, r3, #7
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00b      	beq.n	800c108 <pvPortMalloc+0xfc>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	613b      	str	r3, [r7, #16]
}
 800c102:	bf00      	nop
 800c104:	bf00      	nop
 800c106:	e7fd      	b.n	800c104 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10a:	685a      	ldr	r2, [r3, #4]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	1ad2      	subs	r2, r2, r3
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c11a:	69b8      	ldr	r0, [r7, #24]
 800c11c:	f000 f90a 	bl	800c334 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c120:	4b1d      	ldr	r3, [pc, #116]	@ (800c198 <pvPortMalloc+0x18c>)
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	4a1b      	ldr	r2, [pc, #108]	@ (800c198 <pvPortMalloc+0x18c>)
 800c12c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c12e:	4b1a      	ldr	r3, [pc, #104]	@ (800c198 <pvPortMalloc+0x18c>)
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	4b1b      	ldr	r3, [pc, #108]	@ (800c1a0 <pvPortMalloc+0x194>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	429a      	cmp	r2, r3
 800c138:	d203      	bcs.n	800c142 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c13a:	4b17      	ldr	r3, [pc, #92]	@ (800c198 <pvPortMalloc+0x18c>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a18      	ldr	r2, [pc, #96]	@ (800c1a0 <pvPortMalloc+0x194>)
 800c140:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	4b13      	ldr	r3, [pc, #76]	@ (800c194 <pvPortMalloc+0x188>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	431a      	orrs	r2, r3
 800c14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c152:	2200      	movs	r2, #0
 800c154:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c156:	4b13      	ldr	r3, [pc, #76]	@ (800c1a4 <pvPortMalloc+0x198>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	3301      	adds	r3, #1
 800c15c:	4a11      	ldr	r2, [pc, #68]	@ (800c1a4 <pvPortMalloc+0x198>)
 800c15e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c160:	f7fe fcc6 	bl	800aaf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	f003 0307 	and.w	r3, r3, #7
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d00b      	beq.n	800c186 <pvPortMalloc+0x17a>
	__asm volatile
 800c16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	60fb      	str	r3, [r7, #12]
}
 800c180:	bf00      	nop
 800c182:	bf00      	nop
 800c184:	e7fd      	b.n	800c182 <pvPortMalloc+0x176>
	return pvReturn;
 800c186:	69fb      	ldr	r3, [r7, #28]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3728      	adds	r7, #40	@ 0x28
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	2000655c 	.word	0x2000655c
 800c194:	20006570 	.word	0x20006570
 800c198:	20006560 	.word	0x20006560
 800c19c:	20006554 	.word	0x20006554
 800c1a0:	20006564 	.word	0x20006564
 800c1a4:	20006568 	.word	0x20006568

0800c1a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b086      	sub	sp, #24
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d04f      	beq.n	800c25a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c1ba:	2308      	movs	r3, #8
 800c1bc:	425b      	negs	r3, r3
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	685a      	ldr	r2, [r3, #4]
 800c1cc:	4b25      	ldr	r3, [pc, #148]	@ (800c264 <vPortFree+0xbc>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d10b      	bne.n	800c1ee <vPortFree+0x46>
	__asm volatile
 800c1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	60fb      	str	r3, [r7, #12]
}
 800c1e8:	bf00      	nop
 800c1ea:	bf00      	nop
 800c1ec:	e7fd      	b.n	800c1ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00b      	beq.n	800c20e <vPortFree+0x66>
	__asm volatile
 800c1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	60bb      	str	r3, [r7, #8]
}
 800c208:	bf00      	nop
 800c20a:	bf00      	nop
 800c20c:	e7fd      	b.n	800c20a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	4b14      	ldr	r3, [pc, #80]	@ (800c264 <vPortFree+0xbc>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4013      	ands	r3, r2
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d01e      	beq.n	800c25a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d11a      	bne.n	800c25a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	685a      	ldr	r2, [r3, #4]
 800c228:	4b0e      	ldr	r3, [pc, #56]	@ (800c264 <vPortFree+0xbc>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	43db      	mvns	r3, r3
 800c22e:	401a      	ands	r2, r3
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c234:	f7fe fc4e 	bl	800aad4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	685a      	ldr	r2, [r3, #4]
 800c23c:	4b0a      	ldr	r3, [pc, #40]	@ (800c268 <vPortFree+0xc0>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4413      	add	r3, r2
 800c242:	4a09      	ldr	r2, [pc, #36]	@ (800c268 <vPortFree+0xc0>)
 800c244:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c246:	6938      	ldr	r0, [r7, #16]
 800c248:	f000 f874 	bl	800c334 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c24c:	4b07      	ldr	r3, [pc, #28]	@ (800c26c <vPortFree+0xc4>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3301      	adds	r3, #1
 800c252:	4a06      	ldr	r2, [pc, #24]	@ (800c26c <vPortFree+0xc4>)
 800c254:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c256:	f7fe fc4b 	bl	800aaf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c25a:	bf00      	nop
 800c25c:	3718      	adds	r7, #24
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	20006570 	.word	0x20006570
 800c268:	20006560 	.word	0x20006560
 800c26c:	2000656c 	.word	0x2000656c

0800c270 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c276:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c27a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c27c:	4b27      	ldr	r3, [pc, #156]	@ (800c31c <prvHeapInit+0xac>)
 800c27e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f003 0307 	and.w	r3, r3, #7
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00c      	beq.n	800c2a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	3307      	adds	r3, #7
 800c28e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f023 0307 	bic.w	r3, r3, #7
 800c296:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c298:	68ba      	ldr	r2, [r7, #8]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	1ad3      	subs	r3, r2, r3
 800c29e:	4a1f      	ldr	r2, [pc, #124]	@ (800c31c <prvHeapInit+0xac>)
 800c2a0:	4413      	add	r3, r2
 800c2a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2a8:	4a1d      	ldr	r2, [pc, #116]	@ (800c320 <prvHeapInit+0xb0>)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2ae:	4b1c      	ldr	r3, [pc, #112]	@ (800c320 <prvHeapInit+0xb0>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	68ba      	ldr	r2, [r7, #8]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2bc:	2208      	movs	r2, #8
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	1a9b      	subs	r3, r3, r2
 800c2c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f023 0307 	bic.w	r3, r3, #7
 800c2ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	4a15      	ldr	r2, [pc, #84]	@ (800c324 <prvHeapInit+0xb4>)
 800c2d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c2d2:	4b14      	ldr	r3, [pc, #80]	@ (800c324 <prvHeapInit+0xb4>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c2da:	4b12      	ldr	r3, [pc, #72]	@ (800c324 <prvHeapInit+0xb4>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	1ad2      	subs	r2, r2, r3
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c324 <prvHeapInit+0xb4>)
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	4a0a      	ldr	r2, [pc, #40]	@ (800c328 <prvHeapInit+0xb8>)
 800c2fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	4a09      	ldr	r2, [pc, #36]	@ (800c32c <prvHeapInit+0xbc>)
 800c306:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c308:	4b09      	ldr	r3, [pc, #36]	@ (800c330 <prvHeapInit+0xc0>)
 800c30a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c30e:	601a      	str	r2, [r3, #0]
}
 800c310:	bf00      	nop
 800c312:	3714      	adds	r7, #20
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	20005954 	.word	0x20005954
 800c320:	20006554 	.word	0x20006554
 800c324:	2000655c 	.word	0x2000655c
 800c328:	20006564 	.word	0x20006564
 800c32c:	20006560 	.word	0x20006560
 800c330:	20006570 	.word	0x20006570

0800c334 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c33c:	4b28      	ldr	r3, [pc, #160]	@ (800c3e0 <prvInsertBlockIntoFreeList+0xac>)
 800c33e:	60fb      	str	r3, [r7, #12]
 800c340:	e002      	b.n	800c348 <prvInsertBlockIntoFreeList+0x14>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d8f7      	bhi.n	800c342 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	68ba      	ldr	r2, [r7, #8]
 800c35c:	4413      	add	r3, r2
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	429a      	cmp	r2, r3
 800c362:	d108      	bne.n	800c376 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	685a      	ldr	r2, [r3, #4]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	441a      	add	r2, r3
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	441a      	add	r2, r3
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	429a      	cmp	r2, r3
 800c388:	d118      	bne.n	800c3bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	4b15      	ldr	r3, [pc, #84]	@ (800c3e4 <prvInsertBlockIntoFreeList+0xb0>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	429a      	cmp	r2, r3
 800c394:	d00d      	beq.n	800c3b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	685a      	ldr	r2, [r3, #4]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	441a      	add	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	601a      	str	r2, [r3, #0]
 800c3b0:	e008      	b.n	800c3c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c3e4 <prvInsertBlockIntoFreeList+0xb0>)
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	601a      	str	r2, [r3, #0]
 800c3ba:	e003      	b.n	800c3c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d002      	beq.n	800c3d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3d2:	bf00      	nop
 800c3d4:	3714      	adds	r7, #20
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	20006554 	.word	0x20006554
 800c3e4:	2000655c 	.word	0x2000655c

0800c3e8 <rcl_get_zero_initialized_init_options>:
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	4770      	bx	lr

0800c3ec <rcl_init_options_init>:
 800c3ec:	b084      	sub	sp, #16
 800c3ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3f0:	b097      	sub	sp, #92	@ 0x5c
 800c3f2:	ae1d      	add	r6, sp, #116	@ 0x74
 800c3f4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d058      	beq.n	800c4ae <rcl_init_options_init+0xc2>
 800c3fc:	6803      	ldr	r3, [r0, #0]
 800c3fe:	4605      	mov	r5, r0
 800c400:	b133      	cbz	r3, 800c410 <rcl_init_options_init+0x24>
 800c402:	2464      	movs	r4, #100	@ 0x64
 800c404:	4620      	mov	r0, r4
 800c406:	b017      	add	sp, #92	@ 0x5c
 800c408:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c40c:	b004      	add	sp, #16
 800c40e:	4770      	bx	lr
 800c410:	4630      	mov	r0, r6
 800c412:	f001 f92f 	bl	800d674 <rcutils_allocator_is_valid>
 800c416:	2800      	cmp	r0, #0
 800c418:	d049      	beq.n	800c4ae <rcl_init_options_init+0xc2>
 800c41a:	46b4      	mov	ip, r6
 800c41c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c420:	ac11      	add	r4, sp, #68	@ 0x44
 800c422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c424:	f8dc 3000 	ldr.w	r3, [ip]
 800c428:	6023      	str	r3, [r4, #0]
 800c42a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c42c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c42e:	2050      	movs	r0, #80	@ 0x50
 800c430:	4798      	blx	r3
 800c432:	4604      	mov	r4, r0
 800c434:	6028      	str	r0, [r5, #0]
 800c436:	2800      	cmp	r0, #0
 800c438:	d03b      	beq.n	800c4b2 <rcl_init_options_init+0xc6>
 800c43a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800c43e:	4686      	mov	lr, r0
 800c440:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c444:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c448:	f8dc 3000 	ldr.w	r3, [ip]
 800c44c:	f8ce 3000 	str.w	r3, [lr]
 800c450:	a802      	add	r0, sp, #8
 800c452:	f001 f9a1 	bl	800d798 <rmw_get_zero_initialized_init_options>
 800c456:	f10d 0e08 	add.w	lr, sp, #8
 800c45a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c45e:	f104 0c18 	add.w	ip, r4, #24
 800c462:	682f      	ldr	r7, [r5, #0]
 800c464:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c468:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c46c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c470:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c474:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c478:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c47c:	ac20      	add	r4, sp, #128	@ 0x80
 800c47e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c482:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c486:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c48a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c48e:	f107 0018 	add.w	r0, r7, #24
 800c492:	f001 f9af 	bl	800d7f4 <rmw_init_options_init>
 800c496:	4604      	mov	r4, r0
 800c498:	2800      	cmp	r0, #0
 800c49a:	d0b3      	beq.n	800c404 <rcl_init_options_init+0x18>
 800c49c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c49e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c4a0:	6828      	ldr	r0, [r5, #0]
 800c4a2:	4798      	blx	r3
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f007 fbb5 	bl	8013c14 <rcl_convert_rmw_ret_to_rcl_ret>
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	e7aa      	b.n	800c404 <rcl_init_options_init+0x18>
 800c4ae:	240b      	movs	r4, #11
 800c4b0:	e7a8      	b.n	800c404 <rcl_init_options_init+0x18>
 800c4b2:	240a      	movs	r4, #10
 800c4b4:	e7a6      	b.n	800c404 <rcl_init_options_init+0x18>
 800c4b6:	bf00      	nop

0800c4b8 <rcl_init_options_fini>:
 800c4b8:	b530      	push	{r4, r5, lr}
 800c4ba:	b087      	sub	sp, #28
 800c4bc:	b1f0      	cbz	r0, 800c4fc <rcl_init_options_fini+0x44>
 800c4be:	6803      	ldr	r3, [r0, #0]
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	b1db      	cbz	r3, 800c4fc <rcl_init_options_fini+0x44>
 800c4c4:	469c      	mov	ip, r3
 800c4c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4ca:	f10d 0e04 	add.w	lr, sp, #4
 800c4ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c4d2:	f8dc 3000 	ldr.w	r3, [ip]
 800c4d6:	f8ce 3000 	str.w	r3, [lr]
 800c4da:	a801      	add	r0, sp, #4
 800c4dc:	f001 f8ca 	bl	800d674 <rcutils_allocator_is_valid>
 800c4e0:	b160      	cbz	r0, 800c4fc <rcl_init_options_fini+0x44>
 800c4e2:	6820      	ldr	r0, [r4, #0]
 800c4e4:	3018      	adds	r0, #24
 800c4e6:	f001 fa5b 	bl	800d9a0 <rmw_init_options_fini>
 800c4ea:	4605      	mov	r5, r0
 800c4ec:	b950      	cbnz	r0, 800c504 <rcl_init_options_fini+0x4c>
 800c4ee:	6820      	ldr	r0, [r4, #0]
 800c4f0:	9b02      	ldr	r3, [sp, #8]
 800c4f2:	9905      	ldr	r1, [sp, #20]
 800c4f4:	4798      	blx	r3
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	b007      	add	sp, #28
 800c4fa:	bd30      	pop	{r4, r5, pc}
 800c4fc:	250b      	movs	r5, #11
 800c4fe:	4628      	mov	r0, r5
 800c500:	b007      	add	sp, #28
 800c502:	bd30      	pop	{r4, r5, pc}
 800c504:	f007 fb86 	bl	8013c14 <rcl_convert_rmw_ret_to_rcl_ret>
 800c508:	4605      	mov	r5, r0
 800c50a:	e7f8      	b.n	800c4fe <rcl_init_options_fini+0x46>

0800c50c <rcl_init_options_copy>:
 800c50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c510:	b094      	sub	sp, #80	@ 0x50
 800c512:	2800      	cmp	r0, #0
 800c514:	d058      	beq.n	800c5c8 <rcl_init_options_copy+0xbc>
 800c516:	4604      	mov	r4, r0
 800c518:	6800      	ldr	r0, [r0, #0]
 800c51a:	2800      	cmp	r0, #0
 800c51c:	d054      	beq.n	800c5c8 <rcl_init_options_copy+0xbc>
 800c51e:	460e      	mov	r6, r1
 800c520:	f001 f8a8 	bl	800d674 <rcutils_allocator_is_valid>
 800c524:	2800      	cmp	r0, #0
 800c526:	d04f      	beq.n	800c5c8 <rcl_init_options_copy+0xbc>
 800c528:	2e00      	cmp	r6, #0
 800c52a:	d04d      	beq.n	800c5c8 <rcl_init_options_copy+0xbc>
 800c52c:	6833      	ldr	r3, [r6, #0]
 800c52e:	b123      	cbz	r3, 800c53a <rcl_init_options_copy+0x2e>
 800c530:	2464      	movs	r4, #100	@ 0x64
 800c532:	4620      	mov	r0, r4
 800c534:	b014      	add	sp, #80	@ 0x50
 800c536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c53a:	6827      	ldr	r7, [r4, #0]
 800c53c:	46bc      	mov	ip, r7
 800c53e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c542:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c546:	f8dc 3000 	ldr.w	r3, [ip]
 800c54a:	f8d7 8000 	ldr.w	r8, [r7]
 800c54e:	602b      	str	r3, [r5, #0]
 800c550:	4619      	mov	r1, r3
 800c552:	2050      	movs	r0, #80	@ 0x50
 800c554:	47c0      	blx	r8
 800c556:	4605      	mov	r5, r0
 800c558:	6030      	str	r0, [r6, #0]
 800c55a:	b3d0      	cbz	r0, 800c5d2 <rcl_init_options_copy+0xc6>
 800c55c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c560:	4686      	mov	lr, r0
 800c562:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c566:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c56a:	f8dc 3000 	ldr.w	r3, [ip]
 800c56e:	f8ce 3000 	str.w	r3, [lr]
 800c572:	4668      	mov	r0, sp
 800c574:	f001 f910 	bl	800d798 <rmw_get_zero_initialized_init_options>
 800c578:	46ee      	mov	lr, sp
 800c57a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c57e:	f105 0c18 	add.w	ip, r5, #24
 800c582:	6824      	ldr	r4, [r4, #0]
 800c584:	6835      	ldr	r5, [r6, #0]
 800c586:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c58a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c58e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c592:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c596:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c59a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c59e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c5a2:	f104 0018 	add.w	r0, r4, #24
 800c5a6:	f105 0118 	add.w	r1, r5, #24
 800c5aa:	f001 f985 	bl	800d8b8 <rmw_init_options_copy>
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d0be      	beq.n	800c532 <rcl_init_options_copy+0x26>
 800c5b4:	f001 f86c 	bl	800d690 <rcutils_get_error_string>
 800c5b8:	f001 f882 	bl	800d6c0 <rcutils_reset_error>
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f7ff ff7b 	bl	800c4b8 <rcl_init_options_fini>
 800c5c2:	b140      	cbz	r0, 800c5d6 <rcl_init_options_copy+0xca>
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	e7b4      	b.n	800c532 <rcl_init_options_copy+0x26>
 800c5c8:	240b      	movs	r4, #11
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	b014      	add	sp, #80	@ 0x50
 800c5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5d2:	240a      	movs	r4, #10
 800c5d4:	e7ad      	b.n	800c532 <rcl_init_options_copy+0x26>
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	b014      	add	sp, #80	@ 0x50
 800c5da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5de:	f007 bb19 	b.w	8013c14 <rcl_convert_rmw_ret_to_rcl_ret>
 800c5e2:	bf00      	nop

0800c5e4 <rcl_init_options_set_domain_id>:
 800c5e4:	b120      	cbz	r0, 800c5f0 <rcl_init_options_set_domain_id+0xc>
 800c5e6:	6803      	ldr	r3, [r0, #0]
 800c5e8:	b113      	cbz	r3, 800c5f0 <rcl_init_options_set_domain_id+0xc>
 800c5ea:	6259      	str	r1, [r3, #36]	@ 0x24
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	4770      	bx	lr
 800c5f0:	200b      	movs	r0, #11
 800c5f2:	4770      	bx	lr

0800c5f4 <rcl_get_zero_initialized_publisher>:
 800c5f4:	4b01      	ldr	r3, [pc, #4]	@ (800c5fc <rcl_get_zero_initialized_publisher+0x8>)
 800c5f6:	6818      	ldr	r0, [r3, #0]
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	0801ab1c 	.word	0x0801ab1c

0800c600 <rcl_publisher_init>:
 800c600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c604:	b088      	sub	sp, #32
 800c606:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c608:	2d00      	cmp	r5, #0
 800c60a:	d069      	beq.n	800c6e0 <rcl_publisher_init+0xe0>
 800c60c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c610:	4604      	mov	r4, r0
 800c612:	4648      	mov	r0, r9
 800c614:	460e      	mov	r6, r1
 800c616:	4690      	mov	r8, r2
 800c618:	461f      	mov	r7, r3
 800c61a:	f001 f82b 	bl	800d674 <rcutils_allocator_is_valid>
 800c61e:	2800      	cmp	r0, #0
 800c620:	d05e      	beq.n	800c6e0 <rcl_publisher_init+0xe0>
 800c622:	2c00      	cmp	r4, #0
 800c624:	d05c      	beq.n	800c6e0 <rcl_publisher_init+0xe0>
 800c626:	f8d4 a000 	ldr.w	sl, [r4]
 800c62a:	f1ba 0f00 	cmp.w	sl, #0
 800c62e:	d004      	beq.n	800c63a <rcl_publisher_init+0x3a>
 800c630:	2764      	movs	r7, #100	@ 0x64
 800c632:	4638      	mov	r0, r7
 800c634:	b008      	add	sp, #32
 800c636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c63a:	4630      	mov	r0, r6
 800c63c:	f007 fdce 	bl	80141dc <rcl_node_is_valid>
 800c640:	2800      	cmp	r0, #0
 800c642:	d052      	beq.n	800c6ea <rcl_publisher_init+0xea>
 800c644:	f1b8 0f00 	cmp.w	r8, #0
 800c648:	d04a      	beq.n	800c6e0 <rcl_publisher_init+0xe0>
 800c64a:	2f00      	cmp	r7, #0
 800c64c:	d048      	beq.n	800c6e0 <rcl_publisher_init+0xe0>
 800c64e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c652:	aa07      	add	r2, sp, #28
 800c654:	9205      	str	r2, [sp, #20]
 800c656:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c65a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c65e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c662:	f8cd a01c 	str.w	sl, [sp, #28]
 800c666:	4639      	mov	r1, r7
 800c668:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c66c:	4630      	mov	r0, r6
 800c66e:	f007 fe09 	bl	8014284 <rcl_node_resolve_name>
 800c672:	4607      	mov	r7, r0
 800c674:	2800      	cmp	r0, #0
 800c676:	d14f      	bne.n	800c718 <rcl_publisher_init+0x118>
 800c678:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c67a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c67c:	20c8      	movs	r0, #200	@ 0xc8
 800c67e:	4798      	blx	r3
 800c680:	6020      	str	r0, [r4, #0]
 800c682:	2800      	cmp	r0, #0
 800c684:	d04e      	beq.n	800c724 <rcl_publisher_init+0x124>
 800c686:	4630      	mov	r0, r6
 800c688:	f007 fdca 	bl	8014220 <rcl_node_get_rmw_handle>
 800c68c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	9a07      	ldr	r2, [sp, #28]
 800c694:	6827      	ldr	r7, [r4, #0]
 800c696:	462b      	mov	r3, r5
 800c698:	4641      	mov	r1, r8
 800c69a:	f001 fcad 	bl	800dff8 <rmw_create_publisher>
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c6a4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c6a8:	b370      	cbz	r0, 800c708 <rcl_publisher_init+0x108>
 800c6aa:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c6ae:	f001 fd81 	bl	800e1b4 <rmw_publisher_get_actual_qos>
 800c6b2:	6823      	ldr	r3, [r4, #0]
 800c6b4:	4607      	mov	r7, r0
 800c6b6:	b9d0      	cbnz	r0, 800c6ee <rcl_publisher_init+0xee>
 800c6b8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c6bc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	2270      	movs	r2, #112	@ 0x70
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f00d fb64 	bl	8019d92 <memcpy>
 800c6ca:	6832      	ldr	r2, [r6, #0]
 800c6cc:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c6d0:	9807      	ldr	r0, [sp, #28]
 800c6d2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c6d4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c6d6:	4798      	blx	r3
 800c6d8:	4638      	mov	r0, r7
 800c6da:	b008      	add	sp, #32
 800c6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e0:	270b      	movs	r7, #11
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	b008      	add	sp, #32
 800c6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ea:	27c8      	movs	r7, #200	@ 0xc8
 800c6ec:	e7a1      	b.n	800c632 <rcl_publisher_init+0x32>
 800c6ee:	b18b      	cbz	r3, 800c714 <rcl_publisher_init+0x114>
 800c6f0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c6f4:	b142      	cbz	r2, 800c708 <rcl_publisher_init+0x108>
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f007 fd92 	bl	8014220 <rcl_node_get_rmw_handle>
 800c6fc:	6823      	ldr	r3, [r4, #0]
 800c6fe:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c702:	f001 fd67 	bl	800e1d4 <rmw_destroy_publisher>
 800c706:	6823      	ldr	r3, [r4, #0]
 800c708:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c70a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c70c:	4618      	mov	r0, r3
 800c70e:	4790      	blx	r2
 800c710:	2300      	movs	r3, #0
 800c712:	6023      	str	r3, [r4, #0]
 800c714:	2701      	movs	r7, #1
 800c716:	e7db      	b.n	800c6d0 <rcl_publisher_init+0xd0>
 800c718:	2867      	cmp	r0, #103	@ 0x67
 800c71a:	d0d9      	beq.n	800c6d0 <rcl_publisher_init+0xd0>
 800c71c:	2869      	cmp	r0, #105	@ 0x69
 800c71e:	d003      	beq.n	800c728 <rcl_publisher_init+0x128>
 800c720:	280a      	cmp	r0, #10
 800c722:	d1f7      	bne.n	800c714 <rcl_publisher_init+0x114>
 800c724:	270a      	movs	r7, #10
 800c726:	e7d3      	b.n	800c6d0 <rcl_publisher_init+0xd0>
 800c728:	2767      	movs	r7, #103	@ 0x67
 800c72a:	e7d1      	b.n	800c6d0 <rcl_publisher_init+0xd0>

0800c72c <rcl_publisher_get_default_options>:
 800c72c:	b570      	push	{r4, r5, r6, lr}
 800c72e:	4d14      	ldr	r5, [pc, #80]	@ (800c780 <rcl_publisher_get_default_options+0x54>)
 800c730:	4914      	ldr	r1, [pc, #80]	@ (800c784 <rcl_publisher_get_default_options+0x58>)
 800c732:	b088      	sub	sp, #32
 800c734:	4604      	mov	r4, r0
 800c736:	2250      	movs	r2, #80	@ 0x50
 800c738:	4628      	mov	r0, r5
 800c73a:	f00d fb2a 	bl	8019d92 <memcpy>
 800c73e:	a802      	add	r0, sp, #8
 800c740:	f000 ff8a 	bl	800d658 <rcutils_get_default_allocator>
 800c744:	f10d 0c08 	add.w	ip, sp, #8
 800c748:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c74c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c750:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c754:	466e      	mov	r6, sp
 800c756:	f8dc 3000 	ldr.w	r3, [ip]
 800c75a:	f8ce 3000 	str.w	r3, [lr]
 800c75e:	4630      	mov	r0, r6
 800c760:	f001 f82a 	bl	800d7b8 <rmw_get_default_publisher_options>
 800c764:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c768:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c76c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c770:	2270      	movs	r2, #112	@ 0x70
 800c772:	4629      	mov	r1, r5
 800c774:	4620      	mov	r0, r4
 800c776:	f00d fb0c 	bl	8019d92 <memcpy>
 800c77a:	4620      	mov	r0, r4
 800c77c:	b008      	add	sp, #32
 800c77e:	bd70      	pop	{r4, r5, r6, pc}
 800c780:	20006578 	.word	0x20006578
 800c784:	0801ab20 	.word	0x0801ab20

0800c788 <rcl_publish>:
 800c788:	b1f8      	cbz	r0, 800c7ca <rcl_publish+0x42>
 800c78a:	6803      	ldr	r3, [r0, #0]
 800c78c:	b570      	push	{r4, r5, r6, lr}
 800c78e:	4604      	mov	r4, r0
 800c790:	b1b3      	cbz	r3, 800c7c0 <rcl_publish+0x38>
 800c792:	4616      	mov	r6, r2
 800c794:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c798:	b192      	cbz	r2, 800c7c0 <rcl_publish+0x38>
 800c79a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c79e:	460d      	mov	r5, r1
 800c7a0:	f007 fa56 	bl	8013c50 <rcl_context_is_valid>
 800c7a4:	b160      	cbz	r0, 800c7c0 <rcl_publish+0x38>
 800c7a6:	6823      	ldr	r3, [r4, #0]
 800c7a8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c7ac:	b140      	cbz	r0, 800c7c0 <rcl_publish+0x38>
 800c7ae:	b155      	cbz	r5, 800c7c6 <rcl_publish+0x3e>
 800c7b0:	4632      	mov	r2, r6
 800c7b2:	4629      	mov	r1, r5
 800c7b4:	f001 fbc0 	bl	800df38 <rmw_publish>
 800c7b8:	3800      	subs	r0, #0
 800c7ba:	bf18      	it	ne
 800c7bc:	2001      	movne	r0, #1
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
 800c7c0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c7c4:	bd70      	pop	{r4, r5, r6, pc}
 800c7c6:	200b      	movs	r0, #11
 800c7c8:	bd70      	pop	{r4, r5, r6, pc}
 800c7ca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c7ce:	4770      	bx	lr

0800c7d0 <rcl_publisher_is_valid>:
 800c7d0:	b1a0      	cbz	r0, 800c7fc <rcl_publisher_is_valid+0x2c>
 800c7d2:	6803      	ldr	r3, [r0, #0]
 800c7d4:	b510      	push	{r4, lr}
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	b173      	cbz	r3, 800c7f8 <rcl_publisher_is_valid+0x28>
 800c7da:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c7de:	b15a      	cbz	r2, 800c7f8 <rcl_publisher_is_valid+0x28>
 800c7e0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c7e4:	f007 fa34 	bl	8013c50 <rcl_context_is_valid>
 800c7e8:	b130      	cbz	r0, 800c7f8 <rcl_publisher_is_valid+0x28>
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c7f0:	3800      	subs	r0, #0
 800c7f2:	bf18      	it	ne
 800c7f4:	2001      	movne	r0, #1
 800c7f6:	bd10      	pop	{r4, pc}
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	bd10      	pop	{r4, pc}
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	4770      	bx	lr

0800c800 <rcl_publisher_is_valid_except_context>:
 800c800:	b130      	cbz	r0, 800c810 <rcl_publisher_is_valid_except_context+0x10>
 800c802:	6800      	ldr	r0, [r0, #0]
 800c804:	b120      	cbz	r0, 800c810 <rcl_publisher_is_valid_except_context+0x10>
 800c806:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c80a:	3800      	subs	r0, #0
 800c80c:	bf18      	it	ne
 800c80e:	2001      	movne	r0, #1
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop

0800c814 <_rclc_check_for_new_data>:
 800c814:	2800      	cmp	r0, #0
 800c816:	d046      	beq.n	800c8a6 <_rclc_check_for_new_data+0x92>
 800c818:	b510      	push	{r4, lr}
 800c81a:	7802      	ldrb	r2, [r0, #0]
 800c81c:	b084      	sub	sp, #16
 800c81e:	4603      	mov	r3, r0
 800c820:	2a0a      	cmp	r2, #10
 800c822:	d842      	bhi.n	800c8aa <_rclc_check_for_new_data+0x96>
 800c824:	e8df f002 	tbb	[pc, r2]
 800c828:	14181212 	.word	0x14181212
 800c82c:	06060614 	.word	0x06060614
 800c830:	2e1a      	.short	0x2e1a
 800c832:	16          	.byte	0x16
 800c833:	00          	.byte	0x00
 800c834:	6a0a      	ldr	r2, [r1, #32]
 800c836:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c838:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c83c:	2000      	movs	r0, #0
 800c83e:	1a12      	subs	r2, r2, r0
 800c840:	bf18      	it	ne
 800c842:	2201      	movne	r2, #1
 800c844:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c848:	b004      	add	sp, #16
 800c84a:	bd10      	pop	{r4, pc}
 800c84c:	680a      	ldr	r2, [r1, #0]
 800c84e:	e7f2      	b.n	800c836 <_rclc_check_for_new_data+0x22>
 800c850:	698a      	ldr	r2, [r1, #24]
 800c852:	e7f0      	b.n	800c836 <_rclc_check_for_new_data+0x22>
 800c854:	688a      	ldr	r2, [r1, #8]
 800c856:	e7ee      	b.n	800c836 <_rclc_check_for_new_data+0x22>
 800c858:	690a      	ldr	r2, [r1, #16]
 800c85a:	e7ec      	b.n	800c836 <_rclc_check_for_new_data+0x22>
 800c85c:	685c      	ldr	r4, [r3, #4]
 800c85e:	4608      	mov	r0, r1
 800c860:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c864:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c868:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c86c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c876:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c87a:	f104 0110 	add.w	r1, r4, #16
 800c87e:	f009 f997 	bl	8015bb0 <rcl_action_client_wait_set_get_entities_ready>
 800c882:	e7e1      	b.n	800c848 <_rclc_check_for_new_data+0x34>
 800c884:	685c      	ldr	r4, [r3, #4]
 800c886:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c88a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c88e:	e9cd 3200 	strd	r3, r2, [sp]
 800c892:	4608      	mov	r0, r1
 800c894:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c898:	f104 0220 	add.w	r2, r4, #32
 800c89c:	f104 0110 	add.w	r1, r4, #16
 800c8a0:	f009 fb9e 	bl	8015fe0 <rcl_action_server_wait_set_get_entities_ready>
 800c8a4:	e7d0      	b.n	800c848 <_rclc_check_for_new_data+0x34>
 800c8a6:	200b      	movs	r0, #11
 800c8a8:	4770      	bx	lr
 800c8aa:	2001      	movs	r0, #1
 800c8ac:	e7cc      	b.n	800c848 <_rclc_check_for_new_data+0x34>
 800c8ae:	bf00      	nop

0800c8b0 <_rclc_take_new_data>:
 800c8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8b2:	b09b      	sub	sp, #108	@ 0x6c
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	f000 8088 	beq.w	800c9ca <_rclc_take_new_data+0x11a>
 800c8ba:	7803      	ldrb	r3, [r0, #0]
 800c8bc:	4604      	mov	r4, r0
 800c8be:	2b0a      	cmp	r3, #10
 800c8c0:	f200 8167 	bhi.w	800cb92 <_rclc_take_new_data+0x2e2>
 800c8c4:	e8df f003 	tbb	[pc, r3]
 800c8c8:	44152d2d 	.word	0x44152d2d
 800c8cc:	19191944 	.word	0x19191944
 800c8d0:	065a      	.short	0x065a
 800c8d2:	15          	.byte	0x15
 800c8d3:	00          	.byte	0x00
 800c8d4:	6840      	ldr	r0, [r0, #4]
 800c8d6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f040 80b2 	bne.w	800ca44 <_rclc_take_new_data+0x194>
 800c8e0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f040 80e4 	bne.w	800cab2 <_rclc_take_new_data+0x202>
 800c8ea:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d16f      	bne.n	800c9d2 <_rclc_take_new_data+0x122>
 800c8f2:	2500      	movs	r5, #0
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	b01b      	add	sp, #108	@ 0x6c
 800c8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8fa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c8fc:	6a0b      	ldr	r3, [r1, #32]
 800c8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d0f5      	beq.n	800c8f2 <_rclc_take_new_data+0x42>
 800c906:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c90a:	f104 0110 	add.w	r1, r4, #16
 800c90e:	f007 fd67 	bl	80143e0 <rcl_take_request>
 800c912:	4605      	mov	r5, r0
 800c914:	2800      	cmp	r0, #0
 800c916:	d0ec      	beq.n	800c8f2 <_rclc_take_new_data+0x42>
 800c918:	f240 2359 	movw	r3, #601	@ 0x259
 800c91c:	4298      	cmp	r0, r3
 800c91e:	d013      	beq.n	800c948 <_rclc_take_new_data+0x98>
 800c920:	e029      	b.n	800c976 <_rclc_take_new_data+0xc6>
 800c922:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c924:	680b      	ldr	r3, [r1, #0]
 800c926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d0e1      	beq.n	800c8f2 <_rclc_take_new_data+0x42>
 800c92e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c932:	2300      	movs	r3, #0
 800c934:	aa0a      	add	r2, sp, #40	@ 0x28
 800c936:	f007 fdb5 	bl	80144a4 <rcl_take>
 800c93a:	4605      	mov	r5, r0
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d0d9      	beq.n	800c8f4 <_rclc_take_new_data+0x44>
 800c940:	f240 1391 	movw	r3, #401	@ 0x191
 800c944:	4298      	cmp	r0, r3
 800c946:	d116      	bne.n	800c976 <_rclc_take_new_data+0xc6>
 800c948:	2300      	movs	r3, #0
 800c94a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c94e:	e7d1      	b.n	800c8f4 <_rclc_take_new_data+0x44>
 800c950:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c952:	698b      	ldr	r3, [r1, #24]
 800c954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d0ca      	beq.n	800c8f2 <_rclc_take_new_data+0x42>
 800c95c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c960:	f104 0110 	add.w	r1, r4, #16
 800c964:	f007 f904 	bl	8013b70 <rcl_take_response>
 800c968:	4605      	mov	r5, r0
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d0c1      	beq.n	800c8f2 <_rclc_take_new_data+0x42>
 800c96e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c972:	4298      	cmp	r0, r3
 800c974:	d0be      	beq.n	800c8f4 <_rclc_take_new_data+0x44>
 800c976:	f000 fea3 	bl	800d6c0 <rcutils_reset_error>
 800c97a:	e7bb      	b.n	800c8f4 <_rclc_take_new_data+0x44>
 800c97c:	6840      	ldr	r0, [r0, #4]
 800c97e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c982:	2b00      	cmp	r3, #0
 800c984:	d17d      	bne.n	800ca82 <_rclc_take_new_data+0x1d2>
 800c986:	69c3      	ldr	r3, [r0, #28]
 800c988:	b11b      	cbz	r3, 800c992 <_rclc_take_new_data+0xe2>
 800c98a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d144      	bne.n	800ca1c <_rclc_take_new_data+0x16c>
 800c992:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c996:	2b00      	cmp	r3, #0
 800c998:	f040 80ac 	bne.w	800caf4 <_rclc_take_new_data+0x244>
 800c99c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d0a6      	beq.n	800c8f2 <_rclc_take_new_data+0x42>
 800c9a4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c9a6:	a90a      	add	r1, sp, #40	@ 0x28
 800c9a8:	3010      	adds	r0, #16
 800c9aa:	f008 ffd9 	bl	8015960 <rcl_action_take_result_response>
 800c9ae:	4605      	mov	r5, r0
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d1e0      	bne.n	800c976 <_rclc_take_new_data+0xc6>
 800c9b4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c9b8:	6860      	ldr	r0, [r4, #4]
 800c9ba:	f009 fc35 	bl	8016228 <rclc_action_find_handle_by_result_request_sequence_number>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	d098      	beq.n	800c8f4 <_rclc_take_new_data+0x44>
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c9c8:	e794      	b.n	800c8f4 <_rclc_take_new_data+0x44>
 800c9ca:	250b      	movs	r5, #11
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	b01b      	add	sp, #108	@ 0x6c
 800c9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9d2:	ae04      	add	r6, sp, #16
 800c9d4:	aa0a      	add	r2, sp, #40	@ 0x28
 800c9d6:	3010      	adds	r0, #16
 800c9d8:	4631      	mov	r1, r6
 800c9da:	f009 fa35 	bl	8015e48 <rcl_action_take_cancel_request>
 800c9de:	4605      	mov	r5, r0
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d1c8      	bne.n	800c976 <_rclc_take_new_data+0xc6>
 800c9e4:	6860      	ldr	r0, [r4, #4]
 800c9e6:	a90a      	add	r1, sp, #40	@ 0x28
 800c9e8:	f009 fbdc 	bl	80161a4 <rclc_action_find_goal_handle_by_uuid>
 800c9ec:	4607      	mov	r7, r0
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	f000 80bb 	beq.w	800cb6a <_rclc_take_new_data+0x2ba>
 800c9f4:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c9f8:	2101      	movs	r1, #1
 800c9fa:	f009 fb5d 	bl	80160b8 <rcl_action_transition_goal_state>
 800c9fe:	2803      	cmp	r0, #3
 800ca00:	4684      	mov	ip, r0
 800ca02:	f040 80a7 	bne.w	800cb54 <_rclc_take_new_data+0x2a4>
 800ca06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ca08:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800ca0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca0e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ca12:	e884 0003 	stmia.w	r4, {r0, r1}
 800ca16:	f887 c008 	strb.w	ip, [r7, #8]
 800ca1a:	e76b      	b.n	800c8f4 <_rclc_take_new_data+0x44>
 800ca1c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ca1e:	3010      	adds	r0, #16
 800ca20:	f009 f81e 	bl	8015a60 <rcl_action_take_feedback>
 800ca24:	4605      	mov	r5, r0
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d1a5      	bne.n	800c976 <_rclc_take_new_data+0xc6>
 800ca2a:	6860      	ldr	r0, [r4, #4]
 800ca2c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ca2e:	f009 fbb9 	bl	80161a4 <rclc_action_find_goal_handle_by_uuid>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2800      	cmp	r0, #0
 800ca36:	f000 80a3 	beq.w	800cb80 <_rclc_take_new_data+0x2d0>
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	6860      	ldr	r0, [r4, #4]
 800ca3e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800ca42:	e7a6      	b.n	800c992 <_rclc_take_new_data+0xe2>
 800ca44:	f009 fb88 	bl	8016158 <rclc_action_take_goal_handle>
 800ca48:	4606      	mov	r6, r0
 800ca4a:	6860      	ldr	r0, [r4, #4]
 800ca4c:	2e00      	cmp	r6, #0
 800ca4e:	f43f af47 	beq.w	800c8e0 <_rclc_take_new_data+0x30>
 800ca52:	6070      	str	r0, [r6, #4]
 800ca54:	69f2      	ldr	r2, [r6, #28]
 800ca56:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800ca5a:	3010      	adds	r0, #16
 800ca5c:	f009 f93c 	bl	8015cd8 <rcl_action_take_goal_request>
 800ca60:	4605      	mov	r5, r0
 800ca62:	2800      	cmp	r0, #0
 800ca64:	f040 808e 	bne.w	800cb84 <_rclc_take_new_data+0x2d4>
 800ca68:	69f7      	ldr	r7, [r6, #28]
 800ca6a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ca6c:	7235      	strb	r5, [r6, #8]
 800ca6e:	f8c6 0009 	str.w	r0, [r6, #9]
 800ca72:	f8c6 100d 	str.w	r1, [r6, #13]
 800ca76:	6860      	ldr	r0, [r4, #4]
 800ca78:	f8c6 2011 	str.w	r2, [r6, #17]
 800ca7c:	f8c6 3015 	str.w	r3, [r6, #21]
 800ca80:	e72e      	b.n	800c8e0 <_rclc_take_new_data+0x30>
 800ca82:	aa04      	add	r2, sp, #16
 800ca84:	a90a      	add	r1, sp, #40	@ 0x28
 800ca86:	3010      	adds	r0, #16
 800ca88:	f008 fef2 	bl	8015870 <rcl_action_take_goal_response>
 800ca8c:	4605      	mov	r5, r0
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	f47f af71 	bne.w	800c976 <_rclc_take_new_data+0xc6>
 800ca94:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ca98:	6860      	ldr	r0, [r4, #4]
 800ca9a:	f009 fbb3 	bl	8016204 <rclc_action_find_handle_by_goal_request_sequence_number>
 800ca9e:	b130      	cbz	r0, 800caae <_rclc_take_new_data+0x1fe>
 800caa0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800caa4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800caa8:	2201      	movs	r2, #1
 800caaa:	f880 2020 	strb.w	r2, [r0, #32]
 800caae:	6860      	ldr	r0, [r4, #4]
 800cab0:	e769      	b.n	800c986 <_rclc_take_new_data+0xd6>
 800cab2:	aa04      	add	r2, sp, #16
 800cab4:	3010      	adds	r0, #16
 800cab6:	a90a      	add	r1, sp, #40	@ 0x28
 800cab8:	f009 f986 	bl	8015dc8 <rcl_action_take_result_request>
 800cabc:	4605      	mov	r5, r0
 800cabe:	2800      	cmp	r0, #0
 800cac0:	f47f af59 	bne.w	800c976 <_rclc_take_new_data+0xc6>
 800cac4:	6860      	ldr	r0, [r4, #4]
 800cac6:	a904      	add	r1, sp, #16
 800cac8:	f009 fb6c 	bl	80161a4 <rclc_action_find_goal_handle_by_uuid>
 800cacc:	4607      	mov	r7, r0
 800cace:	b160      	cbz	r0, 800caea <_rclc_take_new_data+0x23a>
 800cad0:	ad0a      	add	r5, sp, #40	@ 0x28
 800cad2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800cad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cad8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cada:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cade:	f04f 0c02 	mov.w	ip, #2
 800cae2:	e886 0003 	stmia.w	r6, {r0, r1}
 800cae6:	f887 c008 	strb.w	ip, [r7, #8]
 800caea:	6860      	ldr	r0, [r4, #4]
 800caec:	2300      	movs	r3, #0
 800caee:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800caf2:	e6fa      	b.n	800c8ea <_rclc_take_new_data+0x3a>
 800caf4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800caf8:	a90a      	add	r1, sp, #40	@ 0x28
 800cafa:	3010      	adds	r0, #16
 800cafc:	f008 ff70 	bl	80159e0 <rcl_action_take_cancel_response>
 800cb00:	4605      	mov	r5, r0
 800cb02:	2800      	cmp	r0, #0
 800cb04:	f47f af37 	bne.w	800c976 <_rclc_take_new_data+0xc6>
 800cb08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cb0c:	6860      	ldr	r0, [r4, #4]
 800cb0e:	f009 fb9d 	bl	801624c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800cb12:	4606      	mov	r6, r0
 800cb14:	6860      	ldr	r0, [r4, #4]
 800cb16:	2e00      	cmp	r6, #0
 800cb18:	f43f af40 	beq.w	800c99c <_rclc_take_new_data+0xec>
 800cb1c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cb1e:	2701      	movs	r7, #1
 800cb20:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f43f af3a 	beq.w	800c99c <_rclc_take_new_data+0xec>
 800cb28:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800cb2a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800cb2e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800cb32:	f009 fb37 	bl	80161a4 <rclc_action_find_goal_handle_by_uuid>
 800cb36:	b138      	cbz	r0, 800cb48 <_rclc_take_new_data+0x298>
 800cb38:	6860      	ldr	r0, [r4, #4]
 800cb3a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cb3c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800cb40:	3501      	adds	r5, #1
 800cb42:	42ab      	cmp	r3, r5
 800cb44:	d8f0      	bhi.n	800cb28 <_rclc_take_new_data+0x278>
 800cb46:	e729      	b.n	800c99c <_rclc_take_new_data+0xec>
 800cb48:	6860      	ldr	r0, [r4, #4]
 800cb4a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cb4c:	3501      	adds	r5, #1
 800cb4e:	42ab      	cmp	r3, r5
 800cb50:	d8ea      	bhi.n	800cb28 <_rclc_take_new_data+0x278>
 800cb52:	e723      	b.n	800c99c <_rclc_take_new_data+0xec>
 800cb54:	ab06      	add	r3, sp, #24
 800cb56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cb58:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cb5c:	2103      	movs	r1, #3
 800cb5e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800cb62:	6860      	ldr	r0, [r4, #4]
 800cb64:	f009 fbe8 	bl	8016338 <rclc_action_server_goal_cancel_reject>
 800cb68:	e6c4      	b.n	800c8f4 <_rclc_take_new_data+0x44>
 800cb6a:	ab06      	add	r3, sp, #24
 800cb6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cb6e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cb72:	2102      	movs	r1, #2
 800cb74:	e896 000c 	ldmia.w	r6, {r2, r3}
 800cb78:	6860      	ldr	r0, [r4, #4]
 800cb7a:	f009 fbdd 	bl	8016338 <rclc_action_server_goal_cancel_reject>
 800cb7e:	e6b9      	b.n	800c8f4 <_rclc_take_new_data+0x44>
 800cb80:	6860      	ldr	r0, [r4, #4]
 800cb82:	e706      	b.n	800c992 <_rclc_take_new_data+0xe2>
 800cb84:	6860      	ldr	r0, [r4, #4]
 800cb86:	4631      	mov	r1, r6
 800cb88:	f009 faf6 	bl	8016178 <rclc_action_remove_used_goal_handle>
 800cb8c:	f000 fd98 	bl	800d6c0 <rcutils_reset_error>
 800cb90:	e6b0      	b.n	800c8f4 <_rclc_take_new_data+0x44>
 800cb92:	2501      	movs	r5, #1
 800cb94:	e6ae      	b.n	800c8f4 <_rclc_take_new_data+0x44>
 800cb96:	bf00      	nop

0800cb98 <_rclc_execute.part.0>:
 800cb98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb9a:	7803      	ldrb	r3, [r0, #0]
 800cb9c:	b087      	sub	sp, #28
 800cb9e:	4604      	mov	r4, r0
 800cba0:	2b0a      	cmp	r3, #10
 800cba2:	f200 8136 	bhi.w	800ce12 <_rclc_execute.part.0+0x27a>
 800cba6:	e8df f003 	tbb	[pc, r3]
 800cbaa:	435e      	.short	0x435e
 800cbac:	06a1664f 	.word	0x06a1664f
 800cbb0:	6c1e0606 	.word	0x6c1e0606
 800cbb4:	59          	.byte	0x59
 800cbb5:	00          	.byte	0x00
 800cbb6:	2b06      	cmp	r3, #6
 800cbb8:	f000 8122 	beq.w	800ce00 <_rclc_execute.part.0+0x268>
 800cbbc:	2b07      	cmp	r3, #7
 800cbbe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cbc0:	f040 8118 	bne.w	800cdf4 <_rclc_execute.part.0+0x25c>
 800cbc4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800cbc8:	6880      	ldr	r0, [r0, #8]
 800cbca:	4798      	blx	r3
 800cbcc:	f104 0110 	add.w	r1, r4, #16
 800cbd0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800cbd2:	6860      	ldr	r0, [r4, #4]
 800cbd4:	f007 fc44 	bl	8014460 <rcl_send_response>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d033      	beq.n	800cc44 <_rclc_execute.part.0+0xac>
 800cbdc:	9005      	str	r0, [sp, #20]
 800cbde:	f000 fd6f 	bl	800d6c0 <rcutils_reset_error>
 800cbe2:	9805      	ldr	r0, [sp, #20]
 800cbe4:	e02e      	b.n	800cc44 <_rclc_execute.part.0+0xac>
 800cbe6:	6840      	ldr	r0, [r0, #4]
 800cbe8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 8086 	beq.w	800ccfe <_rclc_execute.part.0+0x166>
 800cbf2:	2600      	movs	r6, #0
 800cbf4:	2701      	movs	r7, #1
 800cbf6:	e004      	b.n	800cc02 <_rclc_execute.part.0+0x6a>
 800cbf8:	f009 fa88 	bl	801610c <rclc_action_send_result_request>
 800cbfc:	b998      	cbnz	r0, 800cc26 <_rclc_execute.part.0+0x8e>
 800cbfe:	722f      	strb	r7, [r5, #8]
 800cc00:	6860      	ldr	r0, [r4, #4]
 800cc02:	f009 fb35 	bl	8016270 <rclc_action_find_first_handle_with_goal_response>
 800cc06:	4605      	mov	r5, r0
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d077      	beq.n	800ccfc <_rclc_execute.part.0+0x164>
 800cc0c:	6863      	ldr	r3, [r4, #4]
 800cc0e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cc10:	699b      	ldr	r3, [r3, #24]
 800cc12:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800cc16:	f885 6020 	strb.w	r6, [r5, #32]
 800cc1a:	4798      	blx	r3
 800cc1c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800cc20:	4628      	mov	r0, r5
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1e8      	bne.n	800cbf8 <_rclc_execute.part.0+0x60>
 800cc26:	6860      	ldr	r0, [r4, #4]
 800cc28:	4629      	mov	r1, r5
 800cc2a:	f009 faa5 	bl	8016178 <rclc_action_remove_used_goal_handle>
 800cc2e:	e7e7      	b.n	800cc00 <_rclc_execute.part.0+0x68>
 800cc30:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800cc34:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800cc38:	2d00      	cmp	r5, #0
 800cc3a:	f000 80c9 	beq.w	800cdd0 <_rclc_execute.part.0+0x238>
 800cc3e:	6880      	ldr	r0, [r0, #8]
 800cc40:	4798      	blx	r3
 800cc42:	2000      	movs	r0, #0
 800cc44:	b007      	add	sp, #28
 800cc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc48:	6840      	ldr	r0, [r0, #4]
 800cc4a:	f007 ff3b 	bl	8014ac4 <rcl_timer_call>
 800cc4e:	f240 3321 	movw	r3, #801	@ 0x321
 800cc52:	4298      	cmp	r0, r3
 800cc54:	d004      	beq.n	800cc60 <_rclc_execute.part.0+0xc8>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	d0f4      	beq.n	800cc44 <_rclc_execute.part.0+0xac>
 800cc5a:	e7bf      	b.n	800cbdc <_rclc_execute.part.0+0x44>
 800cc5c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cc5e:	4798      	blx	r3
 800cc60:	2000      	movs	r0, #0
 800cc62:	b007      	add	sp, #28
 800cc64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc66:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800cc6a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cc6c:	b925      	cbnz	r5, 800cc78 <_rclc_execute.part.0+0xe0>
 800cc6e:	4628      	mov	r0, r5
 800cc70:	4798      	blx	r3
 800cc72:	4628      	mov	r0, r5
 800cc74:	e7e6      	b.n	800cc44 <_rclc_execute.part.0+0xac>
 800cc76:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cc78:	68a0      	ldr	r0, [r4, #8]
 800cc7a:	4798      	blx	r3
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	b007      	add	sp, #28
 800cc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc82:	6840      	ldr	r0, [r0, #4]
 800cc84:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800cc88:	bb3b      	cbnz	r3, 800ccda <_rclc_execute.part.0+0x142>
 800cc8a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d07b      	beq.n	800cd8a <_rclc_execute.part.0+0x1f2>
 800cc92:	f640 0634 	movw	r6, #2100	@ 0x834
 800cc96:	2701      	movs	r7, #1
 800cc98:	e007      	b.n	800ccaa <_rclc_execute.part.0+0x112>
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	f009 fb00 	bl	80162a0 <rclc_action_server_response_goal_request>
 800cca0:	6860      	ldr	r0, [r4, #4]
 800cca2:	4629      	mov	r1, r5
 800cca4:	f009 fa68 	bl	8016178 <rclc_action_remove_used_goal_handle>
 800cca8:	6860      	ldr	r0, [r4, #4]
 800ccaa:	2100      	movs	r1, #0
 800ccac:	f009 fa92 	bl	80161d4 <rclc_action_find_first_handle_by_status>
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	d066      	beq.n	800cd84 <_rclc_execute.part.0+0x1ec>
 800ccb6:	6863      	ldr	r3, [r4, #4]
 800ccb8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ccba:	699b      	ldr	r3, [r3, #24]
 800ccbc:	4798      	blx	r3
 800ccbe:	42b0      	cmp	r0, r6
 800ccc0:	f04f 0100 	mov.w	r1, #0
 800ccc4:	d1e9      	bne.n	800cc9a <_rclc_execute.part.0+0x102>
 800ccc6:	2101      	movs	r1, #1
 800ccc8:	4628      	mov	r0, r5
 800ccca:	f009 fae9 	bl	80162a0 <rclc_action_server_response_goal_request>
 800ccce:	722f      	strb	r7, [r5, #8]
 800ccd0:	e7ea      	b.n	800cca8 <_rclc_execute.part.0+0x110>
 800ccd2:	6848      	ldr	r0, [r1, #4]
 800ccd4:	f009 fa50 	bl	8016178 <rclc_action_remove_used_goal_handle>
 800ccd8:	6860      	ldr	r0, [r4, #4]
 800ccda:	f009 fa87 	bl	80161ec <rclc_action_find_first_terminated_handle>
 800ccde:	4601      	mov	r1, r0
 800cce0:	2800      	cmp	r0, #0
 800cce2:	d1f6      	bne.n	800ccd2 <_rclc_execute.part.0+0x13a>
 800cce4:	6860      	ldr	r0, [r4, #4]
 800cce6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ccea:	e7ce      	b.n	800cc8a <_rclc_execute.part.0+0xf2>
 800ccec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ccee:	6880      	ldr	r0, [r0, #8]
 800ccf0:	f104 0110 	add.w	r1, r4, #16
 800ccf4:	4798      	blx	r3
 800ccf6:	2000      	movs	r0, #0
 800ccf8:	b007      	add	sp, #28
 800ccfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccfc:	6860      	ldr	r0, [r4, #4]
 800ccfe:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cd02:	b18b      	cbz	r3, 800cd28 <_rclc_execute.part.0+0x190>
 800cd04:	68c5      	ldr	r5, [r0, #12]
 800cd06:	b32d      	cbz	r5, 800cd54 <_rclc_execute.part.0+0x1bc>
 800cd08:	2600      	movs	r6, #0
 800cd0a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800cd0e:	b143      	cbz	r3, 800cd22 <_rclc_execute.part.0+0x18a>
 800cd10:	69c3      	ldr	r3, [r0, #28]
 800cd12:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800cd16:	b123      	cbz	r3, 800cd22 <_rclc_execute.part.0+0x18a>
 800cd18:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cd1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	4798      	blx	r3
 800cd20:	6860      	ldr	r0, [r4, #4]
 800cd22:	682d      	ldr	r5, [r5, #0]
 800cd24:	2d00      	cmp	r5, #0
 800cd26:	d1f0      	bne.n	800cd0a <_rclc_execute.part.0+0x172>
 800cd28:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cd2c:	b193      	cbz	r3, 800cd54 <_rclc_execute.part.0+0x1bc>
 800cd2e:	68c5      	ldr	r5, [r0, #12]
 800cd30:	b185      	cbz	r5, 800cd54 <_rclc_execute.part.0+0x1bc>
 800cd32:	2600      	movs	r6, #0
 800cd34:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800cd38:	b14b      	cbz	r3, 800cd4e <_rclc_execute.part.0+0x1b6>
 800cd3a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cd3c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800cd40:	b12b      	cbz	r3, 800cd4e <_rclc_execute.part.0+0x1b6>
 800cd42:	4628      	mov	r0, r5
 800cd44:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800cd48:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cd4a:	4798      	blx	r3
 800cd4c:	6860      	ldr	r0, [r4, #4]
 800cd4e:	682d      	ldr	r5, [r5, #0]
 800cd50:	2d00      	cmp	r5, #0
 800cd52:	d1ef      	bne.n	800cd34 <_rclc_execute.part.0+0x19c>
 800cd54:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d081      	beq.n	800cc60 <_rclc_execute.part.0+0xc8>
 800cd5c:	2700      	movs	r7, #0
 800cd5e:	e00b      	b.n	800cd78 <_rclc_execute.part.0+0x1e0>
 800cd60:	6863      	ldr	r3, [r4, #4]
 800cd62:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cd64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800cd66:	6a1e      	ldr	r6, [r3, #32]
 800cd68:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800cd6c:	47b0      	blx	r6
 800cd6e:	6860      	ldr	r0, [r4, #4]
 800cd70:	4629      	mov	r1, r5
 800cd72:	f009 fa01 	bl	8016178 <rclc_action_remove_used_goal_handle>
 800cd76:	6860      	ldr	r0, [r4, #4]
 800cd78:	f009 fa86 	bl	8016288 <rclc_action_find_first_handle_with_result_response>
 800cd7c:	4605      	mov	r5, r0
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d1ee      	bne.n	800cd60 <_rclc_execute.part.0+0x1c8>
 800cd82:	e76d      	b.n	800cc60 <_rclc_execute.part.0+0xc8>
 800cd84:	6860      	ldr	r0, [r4, #4]
 800cd86:	f880 5020 	strb.w	r5, [r0, #32]
 800cd8a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f43f af66 	beq.w	800cc60 <_rclc_execute.part.0+0xc8>
 800cd94:	68c5      	ldr	r5, [r0, #12]
 800cd96:	b1b5      	cbz	r5, 800cdc6 <_rclc_execute.part.0+0x22e>
 800cd98:	2602      	movs	r6, #2
 800cd9a:	e001      	b.n	800cda0 <_rclc_execute.part.0+0x208>
 800cd9c:	682d      	ldr	r5, [r5, #0]
 800cd9e:	b195      	cbz	r5, 800cdc6 <_rclc_execute.part.0+0x22e>
 800cda0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800cda4:	2b03      	cmp	r3, #3
 800cda6:	d1f9      	bne.n	800cd9c <_rclc_execute.part.0+0x204>
 800cda8:	69c3      	ldr	r3, [r0, #28]
 800cdaa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cdac:	4628      	mov	r0, r5
 800cdae:	4798      	blx	r3
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800cdbc:	b163      	cbz	r3, 800cdd8 <_rclc_execute.part.0+0x240>
 800cdbe:	f009 fa8f 	bl	80162e0 <rclc_action_server_goal_cancel_accept>
 800cdc2:	6860      	ldr	r0, [r4, #4]
 800cdc4:	e7ea      	b.n	800cd9c <_rclc_execute.part.0+0x204>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800cdcc:	4618      	mov	r0, r3
 800cdce:	e739      	b.n	800cc44 <_rclc_execute.part.0+0xac>
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	4798      	blx	r3
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	e735      	b.n	800cc44 <_rclc_execute.part.0+0xac>
 800cdd8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800cdda:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cdde:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800cde2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cde6:	6860      	ldr	r0, [r4, #4]
 800cde8:	2101      	movs	r1, #1
 800cdea:	f009 faa5 	bl	8016338 <rclc_action_server_goal_cancel_reject>
 800cdee:	722e      	strb	r6, [r5, #8]
 800cdf0:	6860      	ldr	r0, [r4, #4]
 800cdf2:	e7d3      	b.n	800cd9c <_rclc_execute.part.0+0x204>
 800cdf4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cdf6:	6880      	ldr	r0, [r0, #8]
 800cdf8:	4798      	blx	r3
 800cdfa:	f104 0110 	add.w	r1, r4, #16
 800cdfe:	e6e7      	b.n	800cbd0 <_rclc_execute.part.0+0x38>
 800ce00:	f100 0110 	add.w	r1, r0, #16
 800ce04:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ce06:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800ce08:	6880      	ldr	r0, [r0, #8]
 800ce0a:	9105      	str	r1, [sp, #20]
 800ce0c:	4798      	blx	r3
 800ce0e:	9905      	ldr	r1, [sp, #20]
 800ce10:	e6de      	b.n	800cbd0 <_rclc_execute.part.0+0x38>
 800ce12:	2001      	movs	r0, #1
 800ce14:	e716      	b.n	800cc44 <_rclc_execute.part.0+0xac>
 800ce16:	bf00      	nop

0800ce18 <rclc_executor_trigger_any>:
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	d03f      	beq.n	800ce9c <rclc_executor_trigger_any+0x84>
 800ce1c:	2900      	cmp	r1, #0
 800ce1e:	d03e      	beq.n	800ce9e <rclc_executor_trigger_any+0x86>
 800ce20:	4603      	mov	r3, r0
 800ce22:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800ce26:	2200      	movs	r2, #0
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d037      	beq.n	800ce9c <rclc_executor_trigger_any+0x84>
 800ce2c:	b430      	push	{r4, r5}
 800ce2e:	f893 c000 	ldrb.w	ip, [r3]
 800ce32:	f1bc 0f08 	cmp.w	ip, #8
 800ce36:	d11e      	bne.n	800ce76 <rclc_executor_trigger_any+0x5e>
 800ce38:	685c      	ldr	r4, [r3, #4]
 800ce3a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800ce3c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800ce40:	d105      	bne.n	800ce4e <rclc_executor_trigger_any+0x36>
 800ce42:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800ce46:	b910      	cbnz	r0, 800ce4e <rclc_executor_trigger_any+0x36>
 800ce48:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800ce4c:	b128      	cbz	r0, 800ce5a <rclc_executor_trigger_any+0x42>
 800ce4e:	bc30      	pop	{r4, r5}
 800ce50:	4770      	bx	lr
 800ce52:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d1f9      	bne.n	800ce4e <rclc_executor_trigger_any+0x36>
 800ce5a:	3201      	adds	r2, #1
 800ce5c:	4291      	cmp	r1, r2
 800ce5e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ce62:	d018      	beq.n	800ce96 <rclc_executor_trigger_any+0x7e>
 800ce64:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800ce68:	2800      	cmp	r0, #0
 800ce6a:	d0f0      	beq.n	800ce4e <rclc_executor_trigger_any+0x36>
 800ce6c:	f893 c000 	ldrb.w	ip, [r3]
 800ce70:	f1bc 0f08 	cmp.w	ip, #8
 800ce74:	d0e0      	beq.n	800ce38 <rclc_executor_trigger_any+0x20>
 800ce76:	f1bc 0f09 	cmp.w	ip, #9
 800ce7a:	d1ea      	bne.n	800ce52 <rclc_executor_trigger_any+0x3a>
 800ce7c:	685c      	ldr	r4, [r3, #4]
 800ce7e:	6a25      	ldr	r5, [r4, #32]
 800ce80:	2d00      	cmp	r5, #0
 800ce82:	d1e4      	bne.n	800ce4e <rclc_executor_trigger_any+0x36>
 800ce84:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	d1e0      	bne.n	800ce4e <rclc_executor_trigger_any+0x36>
 800ce8c:	3201      	adds	r2, #1
 800ce8e:	4291      	cmp	r1, r2
 800ce90:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ce94:	d1e6      	bne.n	800ce64 <rclc_executor_trigger_any+0x4c>
 800ce96:	2000      	movs	r0, #0
 800ce98:	bc30      	pop	{r4, r5}
 800ce9a:	4770      	bx	lr
 800ce9c:	4770      	bx	lr
 800ce9e:	4608      	mov	r0, r1
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop

0800cea4 <rclc_executor_get_zero_initialized_executor>:
 800cea4:	b510      	push	{r4, lr}
 800cea6:	4903      	ldr	r1, [pc, #12]	@ (800ceb4 <rclc_executor_get_zero_initialized_executor+0x10>)
 800cea8:	4604      	mov	r4, r0
 800ceaa:	2288      	movs	r2, #136	@ 0x88
 800ceac:	f00c ff71 	bl	8019d92 <memcpy>
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	bd10      	pop	{r4, pc}
 800ceb4:	0801ab70 	.word	0x0801ab70

0800ceb8 <rclc_executor_init>:
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	d05f      	beq.n	800cf7c <rclc_executor_init+0xc4>
 800cebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec0:	460c      	mov	r4, r1
 800cec2:	b0b0      	sub	sp, #192	@ 0xc0
 800cec4:	2900      	cmp	r1, #0
 800cec6:	d051      	beq.n	800cf6c <rclc_executor_init+0xb4>
 800cec8:	4605      	mov	r5, r0
 800ceca:	4618      	mov	r0, r3
 800cecc:	4616      	mov	r6, r2
 800cece:	461f      	mov	r7, r3
 800ced0:	f000 fbd0 	bl	800d674 <rcutils_allocator_is_valid>
 800ced4:	2800      	cmp	r0, #0
 800ced6:	d049      	beq.n	800cf6c <rclc_executor_init+0xb4>
 800ced8:	2e00      	cmp	r6, #0
 800ceda:	d047      	beq.n	800cf6c <rclc_executor_init+0xb4>
 800cedc:	492c      	ldr	r1, [pc, #176]	@ (800cf90 <rclc_executor_init+0xd8>)
 800cede:	2288      	movs	r2, #136	@ 0x88
 800cee0:	a80e      	add	r0, sp, #56	@ 0x38
 800cee2:	f00c ff56 	bl	8019d92 <memcpy>
 800cee6:	a90e      	add	r1, sp, #56	@ 0x38
 800cee8:	2288      	movs	r2, #136	@ 0x88
 800ceea:	4628      	mov	r0, r5
 800ceec:	f00c ff51 	bl	8019d92 <memcpy>
 800cef0:	602c      	str	r4, [r5, #0]
 800cef2:	4668      	mov	r0, sp
 800cef4:	60ae      	str	r6, [r5, #8]
 800cef6:	466c      	mov	r4, sp
 800cef8:	f007 feec 	bl	8014cd4 <rcl_get_zero_initialized_wait_set>
 800cefc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cefe:	f105 0c14 	add.w	ip, r5, #20
 800cf02:	f8d7 8000 	ldr.w	r8, [r7]
 800cf06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf16:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800cf88 <rclc_executor_init+0xd0>
 800cf1a:	6823      	ldr	r3, [r4, #0]
 800cf1c:	f8cc 3000 	str.w	r3, [ip]
 800cf20:	6939      	ldr	r1, [r7, #16]
 800cf22:	612f      	str	r7, [r5, #16]
 800cf24:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800cf28:	01b0      	lsls	r0, r6, #6
 800cf2a:	47c0      	blx	r8
 800cf2c:	6068      	str	r0, [r5, #4]
 800cf2e:	b338      	cbz	r0, 800cf80 <rclc_executor_init+0xc8>
 800cf30:	2400      	movs	r4, #0
 800cf32:	e000      	b.n	800cf36 <rclc_executor_init+0x7e>
 800cf34:	6868      	ldr	r0, [r5, #4]
 800cf36:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	3401      	adds	r4, #1
 800cf3e:	f000 fa6b 	bl	800d418 <rclc_executor_handle_init>
 800cf42:	42a6      	cmp	r6, r4
 800cf44:	d1f6      	bne.n	800cf34 <rclc_executor_init+0x7c>
 800cf46:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800cf4a:	f000 fa59 	bl	800d400 <rclc_executor_handle_counters_zero_init>
 800cf4e:	4a11      	ldr	r2, [pc, #68]	@ (800cf94 <rclc_executor_init+0xdc>)
 800cf50:	686b      	ldr	r3, [r5, #4]
 800cf52:	2000      	movs	r0, #0
 800cf54:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800cf58:	b163      	cbz	r3, 800cf74 <rclc_executor_init+0xbc>
 800cf5a:	692b      	ldr	r3, [r5, #16]
 800cf5c:	b153      	cbz	r3, 800cf74 <rclc_executor_init+0xbc>
 800cf5e:	68ab      	ldr	r3, [r5, #8]
 800cf60:	b143      	cbz	r3, 800cf74 <rclc_executor_init+0xbc>
 800cf62:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800cf66:	b030      	add	sp, #192	@ 0xc0
 800cf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf6c:	200b      	movs	r0, #11
 800cf6e:	b030      	add	sp, #192	@ 0xc0
 800cf70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf74:	4618      	mov	r0, r3
 800cf76:	b030      	add	sp, #192	@ 0xc0
 800cf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf7c:	200b      	movs	r0, #11
 800cf7e:	4770      	bx	lr
 800cf80:	200a      	movs	r0, #10
 800cf82:	e7f4      	b.n	800cf6e <rclc_executor_init+0xb6>
 800cf84:	f3af 8000 	nop.w
 800cf88:	3b9aca00 	.word	0x3b9aca00
 800cf8c:	00000000 	.word	0x00000000
 800cf90:	0801ab70 	.word	0x0801ab70
 800cf94:	0800ce19 	.word	0x0800ce19

0800cf98 <rclc_executor_add_timer>:
 800cf98:	b300      	cbz	r0, 800cfdc <rclc_executor_add_timer+0x44>
 800cf9a:	b1f9      	cbz	r1, 800cfdc <rclc_executor_add_timer+0x44>
 800cf9c:	b538      	push	{r3, r4, r5, lr}
 800cf9e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	d301      	bcc.n	800cfac <rclc_executor_add_timer+0x14>
 800cfa8:	2001      	movs	r0, #1
 800cfaa:	bd38      	pop	{r3, r4, r5, pc}
 800cfac:	6840      	ldr	r0, [r0, #4]
 800cfae:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800cfb2:	019d      	lsls	r5, r3, #6
 800cfb4:	6051      	str	r1, [r2, #4]
 800cfb6:	2102      	movs	r1, #2
 800cfb8:	5341      	strh	r1, [r0, r5]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	2101      	movs	r1, #1
 800cfc0:	f104 0514 	add.w	r5, r4, #20
 800cfc4:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800cfc6:	8711      	strh	r1, [r2, #56]	@ 0x38
 800cfc8:	4628      	mov	r0, r5
 800cfca:	60e3      	str	r3, [r4, #12]
 800cfcc:	f007 fe96 	bl	8014cfc <rcl_wait_set_is_valid>
 800cfd0:	b930      	cbnz	r0, 800cfe0 <rclc_executor_add_timer+0x48>
 800cfd2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	2000      	movs	r0, #0
 800cfd8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800cfda:	bd38      	pop	{r3, r4, r5, pc}
 800cfdc:	200b      	movs	r0, #11
 800cfde:	4770      	bx	lr
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	f007 fe91 	bl	8014d08 <rcl_wait_set_fini>
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	d0f3      	beq.n	800cfd2 <rclc_executor_add_timer+0x3a>
 800cfea:	bd38      	pop	{r3, r4, r5, pc}

0800cfec <rclc_executor_prepare>:
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d044      	beq.n	800d07a <rclc_executor_prepare+0x8e>
 800cff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cff2:	f100 0514 	add.w	r5, r0, #20
 800cff6:	b09b      	sub	sp, #108	@ 0x6c
 800cff8:	4604      	mov	r4, r0
 800cffa:	4628      	mov	r0, r5
 800cffc:	f007 fe7e 	bl	8014cfc <rcl_wait_set_is_valid>
 800d000:	b110      	cbz	r0, 800d008 <rclc_executor_prepare+0x1c>
 800d002:	2000      	movs	r0, #0
 800d004:	b01b      	add	sp, #108	@ 0x6c
 800d006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d008:	4628      	mov	r0, r5
 800d00a:	f007 fe7d 	bl	8014d08 <rcl_wait_set_fini>
 800d00e:	2800      	cmp	r0, #0
 800d010:	d130      	bne.n	800d074 <rclc_executor_prepare+0x88>
 800d012:	a80c      	add	r0, sp, #48	@ 0x30
 800d014:	f007 fe5e 	bl	8014cd4 <rcl_get_zero_initialized_wait_set>
 800d018:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d01c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d020:	46ae      	mov	lr, r5
 800d022:	6927      	ldr	r7, [r4, #16]
 800d024:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d028:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d02c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d030:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d034:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d038:	f8dc 3000 	ldr.w	r3, [ip]
 800d03c:	f8ce 3000 	str.w	r3, [lr]
 800d040:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d042:	ae04      	add	r6, sp, #16
 800d044:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	6822      	ldr	r2, [r4, #0]
 800d04a:	6033      	str	r3, [r6, #0]
 800d04c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d04e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d050:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d054:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800d058:	e9cd 2100 	strd	r2, r1, [sp]
 800d05c:	4628      	mov	r0, r5
 800d05e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800d060:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d062:	f008 f94f 	bl	8015304 <rcl_wait_set_init>
 800d066:	2800      	cmp	r0, #0
 800d068:	d0cc      	beq.n	800d004 <rclc_executor_prepare+0x18>
 800d06a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d06c:	f000 fb28 	bl	800d6c0 <rcutils_reset_error>
 800d070:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d072:	e7c7      	b.n	800d004 <rclc_executor_prepare+0x18>
 800d074:	f000 fb24 	bl	800d6c0 <rcutils_reset_error>
 800d078:	e7cb      	b.n	800d012 <rclc_executor_prepare+0x26>
 800d07a:	200b      	movs	r0, #11
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop

0800d080 <rclc_executor_spin_some.part.0>:
 800d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d084:	f100 0614 	add.w	r6, r0, #20
 800d088:	b083      	sub	sp, #12
 800d08a:	4691      	mov	r9, r2
 800d08c:	4698      	mov	r8, r3
 800d08e:	4605      	mov	r5, r0
 800d090:	f7ff ffac 	bl	800cfec <rclc_executor_prepare>
 800d094:	4630      	mov	r0, r6
 800d096:	f007 ff03 	bl	8014ea0 <rcl_wait_set_clear>
 800d09a:	4607      	mov	r7, r0
 800d09c:	2800      	cmp	r0, #0
 800d09e:	f040 80ed 	bne.w	800d27c <rclc_executor_spin_some.part.0+0x1fc>
 800d0a2:	68ab      	ldr	r3, [r5, #8]
 800d0a4:	4604      	mov	r4, r0
 800d0a6:	b303      	cbz	r3, 800d0ea <rclc_executor_spin_some.part.0+0x6a>
 800d0a8:	6869      	ldr	r1, [r5, #4]
 800d0aa:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d0ae:	01a2      	lsls	r2, r4, #6
 800d0b0:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800d0b4:	b1cb      	cbz	r3, 800d0ea <rclc_executor_spin_some.part.0+0x6a>
 800d0b6:	5c8b      	ldrb	r3, [r1, r2]
 800d0b8:	2b0a      	cmp	r3, #10
 800d0ba:	f200 80d8 	bhi.w	800d26e <rclc_executor_spin_some.part.0+0x1ee>
 800d0be:	e8df f003 	tbb	[pc, r3]
 800d0c2:	9c9c      	.short	0x9c9c
 800d0c4:	068c8ca7 	.word	0x068c8ca7
 800d0c8:	bdc90606 	.word	0xbdc90606
 800d0cc:	b2          	.byte	0xb2
 800d0cd:	00          	.byte	0x00
 800d0ce:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d0d2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f008 fa2a 	bl	8015530 <rcl_wait_set_add_service>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	f040 8086 	bne.w	800d1ee <rclc_executor_spin_some.part.0+0x16e>
 800d0e2:	68ab      	ldr	r3, [r5, #8]
 800d0e4:	3401      	adds	r4, #1
 800d0e6:	429c      	cmp	r4, r3
 800d0e8:	d3de      	bcc.n	800d0a8 <rclc_executor_spin_some.part.0+0x28>
 800d0ea:	4643      	mov	r3, r8
 800d0ec:	464a      	mov	r2, r9
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	f008 fa4a 	bl	8015588 <rcl_wait>
 800d0f4:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f000 80c7 	beq.w	800d28c <rclc_executor_spin_some.part.0+0x20c>
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	f040 80b5 	bne.w	800d26e <rclc_executor_spin_some.part.0+0x1ee>
 800d104:	68ab      	ldr	r3, [r5, #8]
 800d106:	2b00      	cmp	r3, #0
 800d108:	f000 8159 	beq.w	800d3be <rclc_executor_spin_some.part.0+0x33e>
 800d10c:	2400      	movs	r4, #0
 800d10e:	46a0      	mov	r8, r4
 800d110:	f240 1991 	movw	r9, #401	@ 0x191
 800d114:	e00a      	b.n	800d12c <rclc_executor_spin_some.part.0+0xac>
 800d116:	f7ff fb7d 	bl	800c814 <_rclc_check_for_new_data>
 800d11a:	4604      	mov	r4, r0
 800d11c:	b110      	cbz	r0, 800d124 <rclc_executor_spin_some.part.0+0xa4>
 800d11e:	4548      	cmp	r0, r9
 800d120:	f040 80b2 	bne.w	800d288 <rclc_executor_spin_some.part.0+0x208>
 800d124:	68ab      	ldr	r3, [r5, #8]
 800d126:	4598      	cmp	r8, r3
 800d128:	f080 8126 	bcs.w	800d378 <rclc_executor_spin_some.part.0+0x2f8>
 800d12c:	686a      	ldr	r2, [r5, #4]
 800d12e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d132:	4631      	mov	r1, r6
 800d134:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d138:	f108 0801 	add.w	r8, r8, #1
 800d13c:	f1bc 0f00 	cmp.w	ip, #0
 800d140:	d1e9      	bne.n	800d116 <rclc_executor_spin_some.part.0+0x96>
 800d142:	4619      	mov	r1, r3
 800d144:	4610      	mov	r0, r2
 800d146:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d14a:	4798      	blx	r3
 800d14c:	2800      	cmp	r0, #0
 800d14e:	f000 809b 	beq.w	800d288 <rclc_executor_spin_some.part.0+0x208>
 800d152:	68ab      	ldr	r3, [r5, #8]
 800d154:	2b00      	cmp	r3, #0
 800d156:	f000 8097 	beq.w	800d288 <rclc_executor_spin_some.part.0+0x208>
 800d15a:	f04f 0800 	mov.w	r8, #0
 800d15e:	f240 1991 	movw	r9, #401	@ 0x191
 800d162:	e009      	b.n	800d178 <rclc_executor_spin_some.part.0+0xf8>
 800d164:	f7ff fba4 	bl	800c8b0 <_rclc_take_new_data>
 800d168:	4604      	mov	r4, r0
 800d16a:	b110      	cbz	r0, 800d172 <rclc_executor_spin_some.part.0+0xf2>
 800d16c:	4548      	cmp	r0, r9
 800d16e:	f040 808b 	bne.w	800d288 <rclc_executor_spin_some.part.0+0x208>
 800d172:	68ab      	ldr	r3, [r5, #8]
 800d174:	4598      	cmp	r8, r3
 800d176:	d209      	bcs.n	800d18c <rclc_executor_spin_some.part.0+0x10c>
 800d178:	6868      	ldr	r0, [r5, #4]
 800d17a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d17e:	4631      	mov	r1, r6
 800d180:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d184:	f108 0801 	add.w	r8, r8, #1
 800d188:	2a00      	cmp	r2, #0
 800d18a:	d1eb      	bne.n	800d164 <rclc_executor_spin_some.part.0+0xe4>
 800d18c:	2600      	movs	r6, #0
 800d18e:	b97b      	cbnz	r3, 800d1b0 <rclc_executor_spin_some.part.0+0x130>
 800d190:	e07a      	b.n	800d288 <rclc_executor_spin_some.part.0+0x208>
 800d192:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d196:	2a08      	cmp	r2, #8
 800d198:	f000 80fd 	beq.w	800d396 <rclc_executor_spin_some.part.0+0x316>
 800d19c:	2a09      	cmp	r2, #9
 800d19e:	f000 80ef 	beq.w	800d380 <rclc_executor_spin_some.part.0+0x300>
 800d1a2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800d1a6:	b98a      	cbnz	r2, 800d1cc <rclc_executor_spin_some.part.0+0x14c>
 800d1a8:	3601      	adds	r6, #1
 800d1aa:	429e      	cmp	r6, r3
 800d1ac:	d262      	bcs.n	800d274 <rclc_executor_spin_some.part.0+0x1f4>
 800d1ae:	2400      	movs	r4, #0
 800d1b0:	686a      	ldr	r2, [r5, #4]
 800d1b2:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d1b6:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d1ba:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800d1be:	2900      	cmp	r1, #0
 800d1c0:	d062      	beq.n	800d288 <rclc_executor_spin_some.part.0+0x208>
 800d1c2:	7841      	ldrb	r1, [r0, #1]
 800d1c4:	2900      	cmp	r1, #0
 800d1c6:	d0e4      	beq.n	800d192 <rclc_executor_spin_some.part.0+0x112>
 800d1c8:	2901      	cmp	r1, #1
 800d1ca:	d1ed      	bne.n	800d1a8 <rclc_executor_spin_some.part.0+0x128>
 800d1cc:	f7ff fce4 	bl	800cb98 <_rclc_execute.part.0>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	f040 80b6 	bne.w	800d342 <rclc_executor_spin_some.part.0+0x2c2>
 800d1d6:	68ab      	ldr	r3, [r5, #8]
 800d1d8:	e7e6      	b.n	800d1a8 <rclc_executor_spin_some.part.0+0x128>
 800d1da:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d1de:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f008 f978 	bl	80154d8 <rcl_wait_set_add_client>
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	f43f af7a 	beq.w	800d0e2 <rclc_executor_spin_some.part.0+0x62>
 800d1ee:	9001      	str	r0, [sp, #4]
 800d1f0:	f000 fa66 	bl	800d6c0 <rcutils_reset_error>
 800d1f4:	9801      	ldr	r0, [sp, #4]
 800d1f6:	4607      	mov	r7, r0
 800d1f8:	e03c      	b.n	800d274 <rclc_executor_spin_some.part.0+0x1f4>
 800d1fa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d1fe:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d202:	4630      	mov	r0, r6
 800d204:	f007 fe20 	bl	8014e48 <rcl_wait_set_add_subscription>
 800d208:	2800      	cmp	r0, #0
 800d20a:	f43f af6a 	beq.w	800d0e2 <rclc_executor_spin_some.part.0+0x62>
 800d20e:	e7ee      	b.n	800d1ee <rclc_executor_spin_some.part.0+0x16e>
 800d210:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d214:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d218:	4630      	mov	r0, r6
 800d21a:	f008 f92d 	bl	8015478 <rcl_wait_set_add_timer>
 800d21e:	2800      	cmp	r0, #0
 800d220:	f43f af5f 	beq.w	800d0e2 <rclc_executor_spin_some.part.0+0x62>
 800d224:	e7e3      	b.n	800d1ee <rclc_executor_spin_some.part.0+0x16e>
 800d226:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d22a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d22e:	4630      	mov	r0, r6
 800d230:	f008 f8f6 	bl	8015420 <rcl_wait_set_add_guard_condition>
 800d234:	2800      	cmp	r0, #0
 800d236:	f43f af54 	beq.w	800d0e2 <rclc_executor_spin_some.part.0+0x62>
 800d23a:	e7d8      	b.n	800d1ee <rclc_executor_spin_some.part.0+0x16e>
 800d23c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d240:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d244:	3110      	adds	r1, #16
 800d246:	4630      	mov	r0, r6
 800d248:	f008 fe76 	bl	8015f38 <rcl_action_wait_set_add_action_server>
 800d24c:	2800      	cmp	r0, #0
 800d24e:	f43f af48 	beq.w	800d0e2 <rclc_executor_spin_some.part.0+0x62>
 800d252:	e7cc      	b.n	800d1ee <rclc_executor_spin_some.part.0+0x16e>
 800d254:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d258:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d25c:	3110      	adds	r1, #16
 800d25e:	2300      	movs	r3, #0
 800d260:	4630      	mov	r0, r6
 800d262:	f008 fc41 	bl	8015ae8 <rcl_action_wait_set_add_action_client>
 800d266:	2800      	cmp	r0, #0
 800d268:	f43f af3b 	beq.w	800d0e2 <rclc_executor_spin_some.part.0+0x62>
 800d26c:	e7bf      	b.n	800d1ee <rclc_executor_spin_some.part.0+0x16e>
 800d26e:	f000 fa27 	bl	800d6c0 <rcutils_reset_error>
 800d272:	2701      	movs	r7, #1
 800d274:	4638      	mov	r0, r7
 800d276:	b003      	add	sp, #12
 800d278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d27c:	f000 fa20 	bl	800d6c0 <rcutils_reset_error>
 800d280:	4638      	mov	r0, r7
 800d282:	b003      	add	sp, #12
 800d284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d288:	4627      	mov	r7, r4
 800d28a:	e7f3      	b.n	800d274 <rclc_executor_spin_some.part.0+0x1f4>
 800d28c:	68ab      	ldr	r3, [r5, #8]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f000 8092 	beq.w	800d3b8 <rclc_executor_spin_some.part.0+0x338>
 800d294:	2400      	movs	r4, #0
 800d296:	46a0      	mov	r8, r4
 800d298:	f240 1991 	movw	r9, #401	@ 0x191
 800d29c:	e008      	b.n	800d2b0 <rclc_executor_spin_some.part.0+0x230>
 800d29e:	f7ff fab9 	bl	800c814 <_rclc_check_for_new_data>
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	b108      	cbz	r0, 800d2aa <rclc_executor_spin_some.part.0+0x22a>
 800d2a6:	4548      	cmp	r0, r9
 800d2a8:	d1ee      	bne.n	800d288 <rclc_executor_spin_some.part.0+0x208>
 800d2aa:	68ab      	ldr	r3, [r5, #8]
 800d2ac:	4598      	cmp	r8, r3
 800d2ae:	d265      	bcs.n	800d37c <rclc_executor_spin_some.part.0+0x2fc>
 800d2b0:	686a      	ldr	r2, [r5, #4]
 800d2b2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d2b6:	4631      	mov	r1, r6
 800d2b8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d2bc:	f108 0801 	add.w	r8, r8, #1
 800d2c0:	f1bc 0f00 	cmp.w	ip, #0
 800d2c4:	d1eb      	bne.n	800d29e <rclc_executor_spin_some.part.0+0x21e>
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	4610      	mov	r0, r2
 800d2ca:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d2ce:	4798      	blx	r3
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	d0d9      	beq.n	800d288 <rclc_executor_spin_some.part.0+0x208>
 800d2d4:	68ab      	ldr	r3, [r5, #8]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d0d6      	beq.n	800d288 <rclc_executor_spin_some.part.0+0x208>
 800d2da:	f04f 0800 	mov.w	r8, #0
 800d2de:	f240 1991 	movw	r9, #401	@ 0x191
 800d2e2:	f240 2a59 	movw	sl, #601	@ 0x259
 800d2e6:	e00e      	b.n	800d306 <rclc_executor_spin_some.part.0+0x286>
 800d2e8:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d2ec:	2b08      	cmp	r3, #8
 800d2ee:	d033      	beq.n	800d358 <rclc_executor_spin_some.part.0+0x2d8>
 800d2f0:	2b09      	cmp	r3, #9
 800d2f2:	d028      	beq.n	800d346 <rclc_executor_spin_some.part.0+0x2c6>
 800d2f4:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800d2f8:	b9fb      	cbnz	r3, 800d33a <rclc_executor_spin_some.part.0+0x2ba>
 800d2fa:	68ab      	ldr	r3, [r5, #8]
 800d2fc:	f108 0801 	add.w	r8, r8, #1
 800d300:	4598      	cmp	r8, r3
 800d302:	d2b7      	bcs.n	800d274 <rclc_executor_spin_some.part.0+0x1f4>
 800d304:	2400      	movs	r4, #0
 800d306:	6868      	ldr	r0, [r5, #4]
 800d308:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d30c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800d310:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d314:	2b00      	cmp	r3, #0
 800d316:	d0b7      	beq.n	800d288 <rclc_executor_spin_some.part.0+0x208>
 800d318:	4631      	mov	r1, r6
 800d31a:	f7ff fac9 	bl	800c8b0 <_rclc_take_new_data>
 800d31e:	b118      	cbz	r0, 800d328 <rclc_executor_spin_some.part.0+0x2a8>
 800d320:	4548      	cmp	r0, r9
 800d322:	d001      	beq.n	800d328 <rclc_executor_spin_some.part.0+0x2a8>
 800d324:	4550      	cmp	r0, sl
 800d326:	d10c      	bne.n	800d342 <rclc_executor_spin_some.part.0+0x2c2>
 800d328:	686b      	ldr	r3, [r5, #4]
 800d32a:	eb13 000b 	adds.w	r0, r3, fp
 800d32e:	d021      	beq.n	800d374 <rclc_executor_spin_some.part.0+0x2f4>
 800d330:	7842      	ldrb	r2, [r0, #1]
 800d332:	2a00      	cmp	r2, #0
 800d334:	d0d8      	beq.n	800d2e8 <rclc_executor_spin_some.part.0+0x268>
 800d336:	2a01      	cmp	r2, #1
 800d338:	d1df      	bne.n	800d2fa <rclc_executor_spin_some.part.0+0x27a>
 800d33a:	f7ff fc2d 	bl	800cb98 <_rclc_execute.part.0>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d0db      	beq.n	800d2fa <rclc_executor_spin_some.part.0+0x27a>
 800d342:	4607      	mov	r7, r0
 800d344:	e796      	b.n	800d274 <rclc_executor_spin_some.part.0+0x1f4>
 800d346:	6843      	ldr	r3, [r0, #4]
 800d348:	6a1a      	ldr	r2, [r3, #32]
 800d34a:	2a00      	cmp	r2, #0
 800d34c:	d1f5      	bne.n	800d33a <rclc_executor_spin_some.part.0+0x2ba>
 800d34e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d352:	2b00      	cmp	r3, #0
 800d354:	d0d1      	beq.n	800d2fa <rclc_executor_spin_some.part.0+0x27a>
 800d356:	e7f0      	b.n	800d33a <rclc_executor_spin_some.part.0+0x2ba>
 800d358:	6843      	ldr	r3, [r0, #4]
 800d35a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d35c:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800d360:	d1eb      	bne.n	800d33a <rclc_executor_spin_some.part.0+0x2ba>
 800d362:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d366:	2a00      	cmp	r2, #0
 800d368:	d1e7      	bne.n	800d33a <rclc_executor_spin_some.part.0+0x2ba>
 800d36a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d0c3      	beq.n	800d2fa <rclc_executor_spin_some.part.0+0x27a>
 800d372:	e7e2      	b.n	800d33a <rclc_executor_spin_some.part.0+0x2ba>
 800d374:	270b      	movs	r7, #11
 800d376:	e77d      	b.n	800d274 <rclc_executor_spin_some.part.0+0x1f4>
 800d378:	686a      	ldr	r2, [r5, #4]
 800d37a:	e6e2      	b.n	800d142 <rclc_executor_spin_some.part.0+0xc2>
 800d37c:	686a      	ldr	r2, [r5, #4]
 800d37e:	e7a2      	b.n	800d2c6 <rclc_executor_spin_some.part.0+0x246>
 800d380:	6842      	ldr	r2, [r0, #4]
 800d382:	6a11      	ldr	r1, [r2, #32]
 800d384:	2900      	cmp	r1, #0
 800d386:	f47f af21 	bne.w	800d1cc <rclc_executor_spin_some.part.0+0x14c>
 800d38a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800d38e:	2a00      	cmp	r2, #0
 800d390:	f43f af0a 	beq.w	800d1a8 <rclc_executor_spin_some.part.0+0x128>
 800d394:	e71a      	b.n	800d1cc <rclc_executor_spin_some.part.0+0x14c>
 800d396:	6842      	ldr	r2, [r0, #4]
 800d398:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800d39a:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800d39e:	f47f af15 	bne.w	800d1cc <rclc_executor_spin_some.part.0+0x14c>
 800d3a2:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800d3a6:	2900      	cmp	r1, #0
 800d3a8:	f47f af10 	bne.w	800d1cc <rclc_executor_spin_some.part.0+0x14c>
 800d3ac:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800d3b0:	2a00      	cmp	r2, #0
 800d3b2:	f43f aef9 	beq.w	800d1a8 <rclc_executor_spin_some.part.0+0x128>
 800d3b6:	e709      	b.n	800d1cc <rclc_executor_spin_some.part.0+0x14c>
 800d3b8:	686a      	ldr	r2, [r5, #4]
 800d3ba:	461c      	mov	r4, r3
 800d3bc:	e783      	b.n	800d2c6 <rclc_executor_spin_some.part.0+0x246>
 800d3be:	686a      	ldr	r2, [r5, #4]
 800d3c0:	461c      	mov	r4, r3
 800d3c2:	e6be      	b.n	800d142 <rclc_executor_spin_some.part.0+0xc2>

0800d3c4 <rclc_executor_spin>:
 800d3c4:	b1d0      	cbz	r0, 800d3fc <rclc_executor_spin+0x38>
 800d3c6:	b510      	push	{r4, lr}
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800d3d0:	6820      	ldr	r0, [r4, #0]
 800d3d2:	e9cd 2300 	strd	r2, r3, [sp]
 800d3d6:	f006 fc3b 	bl	8013c50 <rcl_context_is_valid>
 800d3da:	4601      	mov	r1, r0
 800d3dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	b131      	cbz	r1, 800d3f2 <rclc_executor_spin+0x2e>
 800d3e4:	f7ff fe4c 	bl	800d080 <rclc_executor_spin_some.part.0>
 800d3e8:	f030 0302 	bics.w	r3, r0, #2
 800d3ec:	d0ee      	beq.n	800d3cc <rclc_executor_spin+0x8>
 800d3ee:	b002      	add	sp, #8
 800d3f0:	bd10      	pop	{r4, pc}
 800d3f2:	f000 f965 	bl	800d6c0 <rcutils_reset_error>
 800d3f6:	2001      	movs	r0, #1
 800d3f8:	b002      	add	sp, #8
 800d3fa:	bd10      	pop	{r4, pc}
 800d3fc:	200b      	movs	r0, #11
 800d3fe:	4770      	bx	lr

0800d400 <rclc_executor_handle_counters_zero_init>:
 800d400:	b130      	cbz	r0, 800d410 <rclc_executor_handle_counters_zero_init+0x10>
 800d402:	b508      	push	{r3, lr}
 800d404:	2220      	movs	r2, #32
 800d406:	2100      	movs	r1, #0
 800d408:	f00c fbfa 	bl	8019c00 <memset>
 800d40c:	2000      	movs	r0, #0
 800d40e:	bd08      	pop	{r3, pc}
 800d410:	200b      	movs	r0, #11
 800d412:	4770      	bx	lr
 800d414:	0000      	movs	r0, r0
	...

0800d418 <rclc_executor_handle_init>:
 800d418:	b168      	cbz	r0, 800d436 <rclc_executor_handle_init+0x1e>
 800d41a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800d440 <rclc_executor_handle_init+0x28>
 800d41e:	2300      	movs	r3, #0
 800d420:	220b      	movs	r2, #11
 800d422:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800d426:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d42a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d42e:	8002      	strh	r2, [r0, #0]
 800d430:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d432:	4618      	mov	r0, r3
 800d434:	4770      	bx	lr
 800d436:	200b      	movs	r0, #11
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	f3af 8000 	nop.w
	...

0800d448 <rclc_support_init_with_options>:
 800d448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d44c:	b083      	sub	sp, #12
 800d44e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d450:	b340      	cbz	r0, 800d4a4 <rclc_support_init_with_options+0x5c>
 800d452:	461d      	mov	r5, r3
 800d454:	b333      	cbz	r3, 800d4a4 <rclc_support_init_with_options+0x5c>
 800d456:	b32e      	cbz	r6, 800d4a4 <rclc_support_init_with_options+0x5c>
 800d458:	46e9      	mov	r9, sp
 800d45a:	4604      	mov	r4, r0
 800d45c:	4648      	mov	r0, r9
 800d45e:	460f      	mov	r7, r1
 800d460:	4690      	mov	r8, r2
 800d462:	f006 fbeb 	bl	8013c3c <rcl_get_zero_initialized_context>
 800d466:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d46a:	462a      	mov	r2, r5
 800d46c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d470:	4623      	mov	r3, r4
 800d472:	4641      	mov	r1, r8
 800d474:	4638      	mov	r0, r7
 800d476:	f006 fc51 	bl	8013d1c <rcl_init>
 800d47a:	4605      	mov	r5, r0
 800d47c:	b960      	cbnz	r0, 800d498 <rclc_support_init_with_options+0x50>
 800d47e:	60a6      	str	r6, [r4, #8]
 800d480:	4632      	mov	r2, r6
 800d482:	f104 010c 	add.w	r1, r4, #12
 800d486:	2003      	movs	r0, #3
 800d488:	f007 f88c 	bl	80145a4 <rcl_clock_init>
 800d48c:	4605      	mov	r5, r0
 800d48e:	b918      	cbnz	r0, 800d498 <rclc_support_init_with_options+0x50>
 800d490:	4628      	mov	r0, r5
 800d492:	b003      	add	sp, #12
 800d494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d498:	f000 f912 	bl	800d6c0 <rcutils_reset_error>
 800d49c:	4628      	mov	r0, r5
 800d49e:	b003      	add	sp, #12
 800d4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4a4:	250b      	movs	r5, #11
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	b003      	add	sp, #12
 800d4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4ae:	bf00      	nop

0800d4b0 <rclc_node_init_default>:
 800d4b0:	b3b8      	cbz	r0, 800d522 <rclc_node_init_default+0x72>
 800d4b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4b6:	460d      	mov	r5, r1
 800d4b8:	b0a1      	sub	sp, #132	@ 0x84
 800d4ba:	b329      	cbz	r1, 800d508 <rclc_node_init_default+0x58>
 800d4bc:	4616      	mov	r6, r2
 800d4be:	b31a      	cbz	r2, 800d508 <rclc_node_init_default+0x58>
 800d4c0:	461f      	mov	r7, r3
 800d4c2:	b30b      	cbz	r3, 800d508 <rclc_node_init_default+0x58>
 800d4c4:	f10d 0810 	add.w	r8, sp, #16
 800d4c8:	4604      	mov	r4, r0
 800d4ca:	4640      	mov	r0, r8
 800d4cc:	f006 fd36 	bl	8013f3c <rcl_get_zero_initialized_node>
 800d4d0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d4d4:	f10d 0918 	add.w	r9, sp, #24
 800d4d8:	e884 0003 	stmia.w	r4, {r0, r1}
 800d4dc:	4648      	mov	r0, r9
 800d4de:	f006 fea5 	bl	801422c <rcl_node_get_default_options>
 800d4e2:	4640      	mov	r0, r8
 800d4e4:	f006 fd2a 	bl	8013f3c <rcl_get_zero_initialized_node>
 800d4e8:	f8cd 9000 	str.w	r9, [sp]
 800d4ec:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d4f0:	463b      	mov	r3, r7
 800d4f2:	e884 0003 	stmia.w	r4, {r0, r1}
 800d4f6:	4632      	mov	r2, r6
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f006 fd28 	bl	8013f50 <rcl_node_init>
 800d500:	b930      	cbnz	r0, 800d510 <rclc_node_init_default+0x60>
 800d502:	b021      	add	sp, #132	@ 0x84
 800d504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d508:	200b      	movs	r0, #11
 800d50a:	b021      	add	sp, #132	@ 0x84
 800d50c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d510:	9003      	str	r0, [sp, #12]
 800d512:	f000 f8d5 	bl	800d6c0 <rcutils_reset_error>
 800d516:	f000 f8d3 	bl	800d6c0 <rcutils_reset_error>
 800d51a:	9803      	ldr	r0, [sp, #12]
 800d51c:	b021      	add	sp, #132	@ 0x84
 800d51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d522:	200b      	movs	r0, #11
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop

0800d528 <rclc_publisher_init_best_effort>:
 800d528:	b368      	cbz	r0, 800d586 <rclc_publisher_init_best_effort+0x5e>
 800d52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d52e:	460d      	mov	r5, r1
 800d530:	b0a0      	sub	sp, #128	@ 0x80
 800d532:	b321      	cbz	r1, 800d57e <rclc_publisher_init_best_effort+0x56>
 800d534:	4616      	mov	r6, r2
 800d536:	b312      	cbz	r2, 800d57e <rclc_publisher_init_best_effort+0x56>
 800d538:	461f      	mov	r7, r3
 800d53a:	b303      	cbz	r3, 800d57e <rclc_publisher_init_best_effort+0x56>
 800d53c:	4604      	mov	r4, r0
 800d53e:	f7ff f859 	bl	800c5f4 <rcl_get_zero_initialized_publisher>
 800d542:	f10d 0810 	add.w	r8, sp, #16
 800d546:	6020      	str	r0, [r4, #0]
 800d548:	4640      	mov	r0, r8
 800d54a:	f7ff f8ef 	bl	800c72c <rcl_publisher_get_default_options>
 800d54e:	490f      	ldr	r1, [pc, #60]	@ (800d58c <rclc_publisher_init_best_effort+0x64>)
 800d550:	2250      	movs	r2, #80	@ 0x50
 800d552:	4640      	mov	r0, r8
 800d554:	f00c fc1d 	bl	8019d92 <memcpy>
 800d558:	f8cd 8000 	str.w	r8, [sp]
 800d55c:	463b      	mov	r3, r7
 800d55e:	4632      	mov	r2, r6
 800d560:	4629      	mov	r1, r5
 800d562:	4620      	mov	r0, r4
 800d564:	f7ff f84c 	bl	800c600 <rcl_publisher_init>
 800d568:	b910      	cbnz	r0, 800d570 <rclc_publisher_init_best_effort+0x48>
 800d56a:	b020      	add	sp, #128	@ 0x80
 800d56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d570:	9003      	str	r0, [sp, #12]
 800d572:	f000 f8a5 	bl	800d6c0 <rcutils_reset_error>
 800d576:	9803      	ldr	r0, [sp, #12]
 800d578:	b020      	add	sp, #128	@ 0x80
 800d57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d57e:	200b      	movs	r0, #11
 800d580:	b020      	add	sp, #128	@ 0x80
 800d582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d586:	200b      	movs	r0, #11
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	0801abf8 	.word	0x0801abf8

0800d590 <rclc_timer_init_default>:
 800d590:	b360      	cbz	r0, 800d5ec <rclc_timer_init_default+0x5c>
 800d592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d596:	460e      	mov	r6, r1
 800d598:	b08a      	sub	sp, #40	@ 0x28
 800d59a:	b319      	cbz	r1, 800d5e4 <rclc_timer_init_default+0x54>
 800d59c:	4690      	mov	r8, r2
 800d59e:	461f      	mov	r7, r3
 800d5a0:	4605      	mov	r5, r0
 800d5a2:	f007 f9dd 	bl	8014960 <rcl_get_zero_initialized_timer>
 800d5a6:	68b4      	ldr	r4, [r6, #8]
 800d5a8:	6028      	str	r0, [r5, #0]
 800d5aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5ac:	f10d 0c0c 	add.w	ip, sp, #12
 800d5b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	f8cc 3000 	str.w	r3, [ip]
 800d5ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d5bc:	9302      	str	r3, [sp, #8]
 800d5be:	e9cd 8700 	strd	r8, r7, [sp]
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	4632      	mov	r2, r6
 800d5c6:	f106 010c 	add.w	r1, r6, #12
 800d5ca:	f007 f9d1 	bl	8014970 <rcl_timer_init>
 800d5ce:	b910      	cbnz	r0, 800d5d6 <rclc_timer_init_default+0x46>
 800d5d0:	b00a      	add	sp, #40	@ 0x28
 800d5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d6:	9009      	str	r0, [sp, #36]	@ 0x24
 800d5d8:	f000 f872 	bl	800d6c0 <rcutils_reset_error>
 800d5dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5de:	b00a      	add	sp, #40	@ 0x28
 800d5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e4:	200b      	movs	r0, #11
 800d5e6:	b00a      	add	sp, #40	@ 0x28
 800d5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ec:	200b      	movs	r0, #11
 800d5ee:	4770      	bx	lr

0800d5f0 <__default_zero_allocate>:
 800d5f0:	f00b be16 	b.w	8019220 <calloc>

0800d5f4 <__default_reallocate>:
 800d5f4:	f00b bfb4 	b.w	8019560 <realloc>

0800d5f8 <__default_deallocate>:
 800d5f8:	f00b be90 	b.w	801931c <free>

0800d5fc <__default_allocate>:
 800d5fc:	f00b be86 	b.w	801930c <malloc>

0800d600 <rcutils_get_zero_initialized_allocator>:
 800d600:	b510      	push	{r4, lr}
 800d602:	4c05      	ldr	r4, [pc, #20]	@ (800d618 <rcutils_get_zero_initialized_allocator+0x18>)
 800d604:	4686      	mov	lr, r0
 800d606:	4684      	mov	ip, r0
 800d608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d60a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	f8cc 3000 	str.w	r3, [ip]
 800d614:	4670      	mov	r0, lr
 800d616:	bd10      	pop	{r4, pc}
 800d618:	0801ac48 	.word	0x0801ac48

0800d61c <rcutils_set_default_allocator>:
 800d61c:	b1a8      	cbz	r0, 800d64a <rcutils_set_default_allocator+0x2e>
 800d61e:	6802      	ldr	r2, [r0, #0]
 800d620:	b1a2      	cbz	r2, 800d64c <rcutils_set_default_allocator+0x30>
 800d622:	6841      	ldr	r1, [r0, #4]
 800d624:	b1a1      	cbz	r1, 800d650 <rcutils_set_default_allocator+0x34>
 800d626:	b410      	push	{r4}
 800d628:	68c4      	ldr	r4, [r0, #12]
 800d62a:	b164      	cbz	r4, 800d646 <rcutils_set_default_allocator+0x2a>
 800d62c:	6880      	ldr	r0, [r0, #8]
 800d62e:	b138      	cbz	r0, 800d640 <rcutils_set_default_allocator+0x24>
 800d630:	4b08      	ldr	r3, [pc, #32]	@ (800d654 <rcutils_set_default_allocator+0x38>)
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	2200      	movs	r2, #0
 800d636:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d63a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d63e:	2001      	movs	r0, #1
 800d640:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d644:	4770      	bx	lr
 800d646:	4620      	mov	r0, r4
 800d648:	e7fa      	b.n	800d640 <rcutils_set_default_allocator+0x24>
 800d64a:	4770      	bx	lr
 800d64c:	4610      	mov	r0, r2
 800d64e:	4770      	bx	lr
 800d650:	4608      	mov	r0, r1
 800d652:	4770      	bx	lr
 800d654:	20000048 	.word	0x20000048

0800d658 <rcutils_get_default_allocator>:
 800d658:	b510      	push	{r4, lr}
 800d65a:	4c05      	ldr	r4, [pc, #20]	@ (800d670 <rcutils_get_default_allocator+0x18>)
 800d65c:	4686      	mov	lr, r0
 800d65e:	4684      	mov	ip, r0
 800d660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d662:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d666:	6823      	ldr	r3, [r4, #0]
 800d668:	f8cc 3000 	str.w	r3, [ip]
 800d66c:	4670      	mov	r0, lr
 800d66e:	bd10      	pop	{r4, pc}
 800d670:	20000048 	.word	0x20000048

0800d674 <rcutils_allocator_is_valid>:
 800d674:	b158      	cbz	r0, 800d68e <rcutils_allocator_is_valid+0x1a>
 800d676:	6803      	ldr	r3, [r0, #0]
 800d678:	b143      	cbz	r3, 800d68c <rcutils_allocator_is_valid+0x18>
 800d67a:	6843      	ldr	r3, [r0, #4]
 800d67c:	b133      	cbz	r3, 800d68c <rcutils_allocator_is_valid+0x18>
 800d67e:	68c3      	ldr	r3, [r0, #12]
 800d680:	b123      	cbz	r3, 800d68c <rcutils_allocator_is_valid+0x18>
 800d682:	6880      	ldr	r0, [r0, #8]
 800d684:	3800      	subs	r0, #0
 800d686:	bf18      	it	ne
 800d688:	2001      	movne	r0, #1
 800d68a:	4770      	bx	lr
 800d68c:	4618      	mov	r0, r3
 800d68e:	4770      	bx	lr

0800d690 <rcutils_get_error_string>:
 800d690:	4b06      	ldr	r3, [pc, #24]	@ (800d6ac <rcutils_get_error_string+0x1c>)
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	b13b      	cbz	r3, 800d6a6 <rcutils_get_error_string+0x16>
 800d696:	4b06      	ldr	r3, [pc, #24]	@ (800d6b0 <rcutils_get_error_string+0x20>)
 800d698:	781a      	ldrb	r2, [r3, #0]
 800d69a:	b90a      	cbnz	r2, 800d6a0 <rcutils_get_error_string+0x10>
 800d69c:	2201      	movs	r2, #1
 800d69e:	701a      	strb	r2, [r3, #0]
 800d6a0:	4b04      	ldr	r3, [pc, #16]	@ (800d6b4 <rcutils_get_error_string+0x24>)
 800d6a2:	7818      	ldrb	r0, [r3, #0]
 800d6a4:	4770      	bx	lr
 800d6a6:	4b04      	ldr	r3, [pc, #16]	@ (800d6b8 <rcutils_get_error_string+0x28>)
 800d6a8:	7818      	ldrb	r0, [r3, #0]
 800d6aa:	4770      	bx	lr
 800d6ac:	200065e8 	.word	0x200065e8
 800d6b0:	20006601 	.word	0x20006601
 800d6b4:	20006600 	.word	0x20006600
 800d6b8:	0801ac5c 	.word	0x0801ac5c
 800d6bc:	00000000 	.word	0x00000000

0800d6c0 <rcutils_reset_error>:
 800d6c0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d6e0 <rcutils_reset_error+0x20>
 800d6c4:	4a08      	ldr	r2, [pc, #32]	@ (800d6e8 <rcutils_reset_error+0x28>)
 800d6c6:	4809      	ldr	r0, [pc, #36]	@ (800d6ec <rcutils_reset_error+0x2c>)
 800d6c8:	4909      	ldr	r1, [pc, #36]	@ (800d6f0 <rcutils_reset_error+0x30>)
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	8013      	strh	r3, [r2, #0]
 800d6ce:	ed82 7b02 	vstr	d7, [r2, #8]
 800d6d2:	4a08      	ldr	r2, [pc, #32]	@ (800d6f4 <rcutils_reset_error+0x34>)
 800d6d4:	7003      	strb	r3, [r0, #0]
 800d6d6:	700b      	strb	r3, [r1, #0]
 800d6d8:	7013      	strb	r3, [r2, #0]
 800d6da:	4770      	bx	lr
 800d6dc:	f3af 8000 	nop.w
	...
 800d6e8:	200065f0 	.word	0x200065f0
 800d6ec:	20006601 	.word	0x20006601
 800d6f0:	20006600 	.word	0x20006600
 800d6f4:	200065e8 	.word	0x200065e8

0800d6f8 <rcutils_system_time_now>:
 800d6f8:	b308      	cbz	r0, 800d73e <rcutils_system_time_now+0x46>
 800d6fa:	b570      	push	{r4, r5, r6, lr}
 800d6fc:	b084      	sub	sp, #16
 800d6fe:	4604      	mov	r4, r0
 800d700:	4669      	mov	r1, sp
 800d702:	2001      	movs	r0, #1
 800d704:	f7f4 ff64 	bl	80025d0 <clock_gettime>
 800d708:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d70c:	2d00      	cmp	r5, #0
 800d70e:	db13      	blt.n	800d738 <rcutils_system_time_now+0x40>
 800d710:	9902      	ldr	r1, [sp, #8]
 800d712:	2900      	cmp	r1, #0
 800d714:	db0d      	blt.n	800d732 <rcutils_system_time_now+0x3a>
 800d716:	4e0b      	ldr	r6, [pc, #44]	@ (800d744 <rcutils_system_time_now+0x4c>)
 800d718:	fba3 3206 	umull	r3, r2, r3, r6
 800d71c:	185b      	adds	r3, r3, r1
 800d71e:	fb06 2205 	mla	r2, r6, r5, r2
 800d722:	f04f 0000 	mov.w	r0, #0
 800d726:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d72a:	e9c4 3200 	strd	r3, r2, [r4]
 800d72e:	b004      	add	sp, #16
 800d730:	bd70      	pop	{r4, r5, r6, pc}
 800d732:	ea53 0205 	orrs.w	r2, r3, r5
 800d736:	d1ee      	bne.n	800d716 <rcutils_system_time_now+0x1e>
 800d738:	2002      	movs	r0, #2
 800d73a:	b004      	add	sp, #16
 800d73c:	bd70      	pop	{r4, r5, r6, pc}
 800d73e:	200b      	movs	r0, #11
 800d740:	4770      	bx	lr
 800d742:	bf00      	nop
 800d744:	3b9aca00 	.word	0x3b9aca00

0800d748 <rcutils_steady_time_now>:
 800d748:	b308      	cbz	r0, 800d78e <rcutils_steady_time_now+0x46>
 800d74a:	b570      	push	{r4, r5, r6, lr}
 800d74c:	b084      	sub	sp, #16
 800d74e:	4604      	mov	r4, r0
 800d750:	4669      	mov	r1, sp
 800d752:	2000      	movs	r0, #0
 800d754:	f7f4 ff3c 	bl	80025d0 <clock_gettime>
 800d758:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d75c:	2d00      	cmp	r5, #0
 800d75e:	db13      	blt.n	800d788 <rcutils_steady_time_now+0x40>
 800d760:	9902      	ldr	r1, [sp, #8]
 800d762:	2900      	cmp	r1, #0
 800d764:	db0d      	blt.n	800d782 <rcutils_steady_time_now+0x3a>
 800d766:	4e0b      	ldr	r6, [pc, #44]	@ (800d794 <rcutils_steady_time_now+0x4c>)
 800d768:	fba3 3206 	umull	r3, r2, r3, r6
 800d76c:	185b      	adds	r3, r3, r1
 800d76e:	fb06 2205 	mla	r2, r6, r5, r2
 800d772:	f04f 0000 	mov.w	r0, #0
 800d776:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d77a:	e9c4 3200 	strd	r3, r2, [r4]
 800d77e:	b004      	add	sp, #16
 800d780:	bd70      	pop	{r4, r5, r6, pc}
 800d782:	ea53 0205 	orrs.w	r2, r3, r5
 800d786:	d1ee      	bne.n	800d766 <rcutils_steady_time_now+0x1e>
 800d788:	2002      	movs	r0, #2
 800d78a:	b004      	add	sp, #16
 800d78c:	bd70      	pop	{r4, r5, r6, pc}
 800d78e:	200b      	movs	r0, #11
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	3b9aca00 	.word	0x3b9aca00

0800d798 <rmw_get_zero_initialized_init_options>:
 800d798:	b510      	push	{r4, lr}
 800d79a:	2238      	movs	r2, #56	@ 0x38
 800d79c:	4604      	mov	r4, r0
 800d79e:	2100      	movs	r1, #0
 800d7a0:	f00c fa2e 	bl	8019c00 <memset>
 800d7a4:	f104 0010 	add.w	r0, r4, #16
 800d7a8:	f000 f80a 	bl	800d7c0 <rmw_get_default_security_options>
 800d7ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d7b0:	60e3      	str	r3, [r4, #12]
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	bd10      	pop	{r4, pc}
 800d7b6:	bf00      	nop

0800d7b8 <rmw_get_default_publisher_options>:
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	6002      	str	r2, [r0, #0]
 800d7bc:	7102      	strb	r2, [r0, #4]
 800d7be:	4770      	bx	lr

0800d7c0 <rmw_get_default_security_options>:
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	7002      	strb	r2, [r0, #0]
 800d7c4:	6042      	str	r2, [r0, #4]
 800d7c6:	4770      	bx	lr

0800d7c8 <rmw_uros_set_custom_transport>:
 800d7c8:	b470      	push	{r4, r5, r6}
 800d7ca:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d7ce:	b162      	cbz	r2, 800d7ea <rmw_uros_set_custom_transport+0x22>
 800d7d0:	b15b      	cbz	r3, 800d7ea <rmw_uros_set_custom_transport+0x22>
 800d7d2:	b155      	cbz	r5, 800d7ea <rmw_uros_set_custom_transport+0x22>
 800d7d4:	b14e      	cbz	r6, 800d7ea <rmw_uros_set_custom_transport+0x22>
 800d7d6:	4c06      	ldr	r4, [pc, #24]	@ (800d7f0 <rmw_uros_set_custom_transport+0x28>)
 800d7d8:	7020      	strb	r0, [r4, #0]
 800d7da:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d7de:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d7e2:	6166      	str	r6, [r4, #20]
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	bc70      	pop	{r4, r5, r6}
 800d7e8:	4770      	bx	lr
 800d7ea:	200b      	movs	r0, #11
 800d7ec:	bc70      	pop	{r4, r5, r6}
 800d7ee:	4770      	bx	lr
 800d7f0:	20006604 	.word	0x20006604

0800d7f4 <rmw_init_options_init>:
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7f8:	b083      	sub	sp, #12
 800d7fa:	ad09      	add	r5, sp, #36	@ 0x24
 800d7fc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d800:	b130      	cbz	r0, 800d810 <rmw_init_options_init+0x1c>
 800d802:	4604      	mov	r4, r0
 800d804:	4628      	mov	r0, r5
 800d806:	f7ff ff35 	bl	800d674 <rcutils_allocator_is_valid>
 800d80a:	b108      	cbz	r0, 800d810 <rmw_init_options_init+0x1c>
 800d80c:	68a6      	ldr	r6, [r4, #8]
 800d80e:	b12e      	cbz	r6, 800d81c <rmw_init_options_init+0x28>
 800d810:	200b      	movs	r0, #11
 800d812:	b003      	add	sp, #12
 800d814:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d818:	b004      	add	sp, #16
 800d81a:	4770      	bx	lr
 800d81c:	2200      	movs	r2, #0
 800d81e:	2300      	movs	r3, #0
 800d820:	e9c4 2300 	strd	r2, r3, [r4]
 800d824:	4b20      	ldr	r3, [pc, #128]	@ (800d8a8 <rmw_init_options_init+0xb4>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	60a3      	str	r3, [r4, #8]
 800d82a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d82c:	f104 0c20 	add.w	ip, r4, #32
 800d830:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d834:	466f      	mov	r7, sp
 800d836:	682b      	ldr	r3, [r5, #0]
 800d838:	f8cc 3000 	str.w	r3, [ip]
 800d83c:	4638      	mov	r0, r7
 800d83e:	61e6      	str	r6, [r4, #28]
 800d840:	60e6      	str	r6, [r4, #12]
 800d842:	f7ff ffbd 	bl	800d7c0 <rmw_get_default_security_options>
 800d846:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d84a:	f104 0310 	add.w	r3, r4, #16
 800d84e:	e883 0003 	stmia.w	r3, {r0, r1}
 800d852:	2203      	movs	r2, #3
 800d854:	4815      	ldr	r0, [pc, #84]	@ (800d8ac <rmw_init_options_init+0xb8>)
 800d856:	4916      	ldr	r1, [pc, #88]	@ (800d8b0 <rmw_init_options_init+0xbc>)
 800d858:	7626      	strb	r6, [r4, #24]
 800d85a:	f000 fee9 	bl	800e630 <rmw_uxrce_init_init_options_impl_memory>
 800d85e:	4813      	ldr	r0, [pc, #76]	@ (800d8ac <rmw_init_options_init+0xb8>)
 800d860:	f009 fb8e 	bl	8016f80 <get_memory>
 800d864:	b1f0      	cbz	r0, 800d8a4 <rmw_init_options_init+0xb0>
 800d866:	4a13      	ldr	r2, [pc, #76]	@ (800d8b4 <rmw_init_options_init+0xc0>)
 800d868:	6883      	ldr	r3, [r0, #8]
 800d86a:	6851      	ldr	r1, [r2, #4]
 800d86c:	7810      	ldrb	r0, [r2, #0]
 800d86e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d870:	7418      	strb	r0, [r3, #16]
 800d872:	6159      	str	r1, [r3, #20]
 800d874:	68d1      	ldr	r1, [r2, #12]
 800d876:	61d9      	str	r1, [r3, #28]
 800d878:	6911      	ldr	r1, [r2, #16]
 800d87a:	6219      	str	r1, [r3, #32]
 800d87c:	6951      	ldr	r1, [r2, #20]
 800d87e:	6892      	ldr	r2, [r2, #8]
 800d880:	619a      	str	r2, [r3, #24]
 800d882:	6259      	str	r1, [r3, #36]	@ 0x24
 800d884:	f004 ffee 	bl	8012864 <uxr_nanos>
 800d888:	f00b fdfe 	bl	8019488 <srand>
 800d88c:	f00b fe2a 	bl	80194e4 <rand>
 800d890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d892:	6298      	str	r0, [r3, #40]	@ 0x28
 800d894:	2800      	cmp	r0, #0
 800d896:	d0f9      	beq.n	800d88c <rmw_init_options_init+0x98>
 800d898:	2000      	movs	r0, #0
 800d89a:	b003      	add	sp, #12
 800d89c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d8a0:	b004      	add	sp, #16
 800d8a2:	4770      	bx	lr
 800d8a4:	2001      	movs	r0, #1
 800d8a6:	e7b4      	b.n	800d812 <rmw_init_options_init+0x1e>
 800d8a8:	0801b650 	.word	0x0801b650
 800d8ac:	2000af1c 	.word	0x2000af1c
 800d8b0:	200067b8 	.word	0x200067b8
 800d8b4:	20006604 	.word	0x20006604

0800d8b8 <rmw_init_options_copy>:
 800d8b8:	b570      	push	{r4, r5, r6, lr}
 800d8ba:	b088      	sub	sp, #32
 800d8bc:	b160      	cbz	r0, 800d8d8 <rmw_init_options_copy+0x20>
 800d8be:	460d      	mov	r5, r1
 800d8c0:	b151      	cbz	r1, 800d8d8 <rmw_init_options_copy+0x20>
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	6880      	ldr	r0, [r0, #8]
 800d8c6:	b128      	cbz	r0, 800d8d4 <rmw_init_options_copy+0x1c>
 800d8c8:	4b33      	ldr	r3, [pc, #204]	@ (800d998 <rmw_init_options_copy+0xe0>)
 800d8ca:	6819      	ldr	r1, [r3, #0]
 800d8cc:	f7f2 fca8 	bl	8000220 <strcmp>
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	d154      	bne.n	800d97e <rmw_init_options_copy+0xc6>
 800d8d4:	68ab      	ldr	r3, [r5, #8]
 800d8d6:	b11b      	cbz	r3, 800d8e0 <rmw_init_options_copy+0x28>
 800d8d8:	240b      	movs	r4, #11
 800d8da:	4620      	mov	r0, r4
 800d8dc:	b008      	add	sp, #32
 800d8de:	bd70      	pop	{r4, r5, r6, pc}
 800d8e0:	4623      	mov	r3, r4
 800d8e2:	462a      	mov	r2, r5
 800d8e4:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d8e8:	f8d3 c000 	ldr.w	ip, [r3]
 800d8ec:	6858      	ldr	r0, [r3, #4]
 800d8ee:	6899      	ldr	r1, [r3, #8]
 800d8f0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d8f4:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d8f8:	3310      	adds	r3, #16
 800d8fa:	42b3      	cmp	r3, r6
 800d8fc:	f8c2 c000 	str.w	ip, [r2]
 800d900:	6050      	str	r0, [r2, #4]
 800d902:	6091      	str	r1, [r2, #8]
 800d904:	f102 0210 	add.w	r2, r2, #16
 800d908:	d1ee      	bne.n	800d8e8 <rmw_init_options_copy+0x30>
 800d90a:	6819      	ldr	r1, [r3, #0]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	6053      	str	r3, [r2, #4]
 800d910:	6011      	str	r1, [r2, #0]
 800d912:	f104 0e20 	add.w	lr, r4, #32
 800d916:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d91a:	f10d 0c0c 	add.w	ip, sp, #12
 800d91e:	4666      	mov	r6, ip
 800d920:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d924:	f8de 3000 	ldr.w	r3, [lr]
 800d928:	f8cc 3000 	str.w	r3, [ip]
 800d92c:	4630      	mov	r0, r6
 800d92e:	f7ff fea1 	bl	800d674 <rcutils_allocator_is_valid>
 800d932:	2800      	cmp	r0, #0
 800d934:	d0d0      	beq.n	800d8d8 <rmw_init_options_copy+0x20>
 800d936:	ab08      	add	r3, sp, #32
 800d938:	e913 0003 	ldmdb	r3, {r0, r1}
 800d93c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d940:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d944:	69e0      	ldr	r0, [r4, #28]
 800d946:	f008 feed 	bl	8016724 <rcutils_strdup>
 800d94a:	61e8      	str	r0, [r5, #28]
 800d94c:	69e3      	ldr	r3, [r4, #28]
 800d94e:	b103      	cbz	r3, 800d952 <rmw_init_options_copy+0x9a>
 800d950:	b1f8      	cbz	r0, 800d992 <rmw_init_options_copy+0xda>
 800d952:	4812      	ldr	r0, [pc, #72]	@ (800d99c <rmw_init_options_copy+0xe4>)
 800d954:	f009 fb14 	bl	8016f80 <get_memory>
 800d958:	b1a8      	cbz	r0, 800d986 <rmw_init_options_copy+0xce>
 800d95a:	6883      	ldr	r3, [r0, #8]
 800d95c:	636b      	str	r3, [r5, #52]	@ 0x34
 800d95e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d960:	f102 0c10 	add.w	ip, r2, #16
 800d964:	f103 0510 	add.w	r5, r3, #16
 800d968:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d96c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d96e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d972:	2400      	movs	r4, #0
 800d974:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d978:	4620      	mov	r0, r4
 800d97a:	b008      	add	sp, #32
 800d97c:	bd70      	pop	{r4, r5, r6, pc}
 800d97e:	240c      	movs	r4, #12
 800d980:	4620      	mov	r0, r4
 800d982:	b008      	add	sp, #32
 800d984:	bd70      	pop	{r4, r5, r6, pc}
 800d986:	9b04      	ldr	r3, [sp, #16]
 800d988:	9907      	ldr	r1, [sp, #28]
 800d98a:	69e8      	ldr	r0, [r5, #28]
 800d98c:	4798      	blx	r3
 800d98e:	2401      	movs	r4, #1
 800d990:	e7a3      	b.n	800d8da <rmw_init_options_copy+0x22>
 800d992:	240a      	movs	r4, #10
 800d994:	e7a1      	b.n	800d8da <rmw_init_options_copy+0x22>
 800d996:	bf00      	nop
 800d998:	0801b650 	.word	0x0801b650
 800d99c:	2000af1c 	.word	0x2000af1c

0800d9a0 <rmw_init_options_fini>:
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	d041      	beq.n	800da28 <rmw_init_options_fini+0x88>
 800d9a4:	b510      	push	{r4, lr}
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	b08e      	sub	sp, #56	@ 0x38
 800d9aa:	3020      	adds	r0, #32
 800d9ac:	f7ff fe62 	bl	800d674 <rcutils_allocator_is_valid>
 800d9b0:	b380      	cbz	r0, 800da14 <rmw_init_options_fini+0x74>
 800d9b2:	68a0      	ldr	r0, [r4, #8]
 800d9b4:	b120      	cbz	r0, 800d9c0 <rmw_init_options_fini+0x20>
 800d9b6:	4b1e      	ldr	r3, [pc, #120]	@ (800da30 <rmw_init_options_fini+0x90>)
 800d9b8:	6819      	ldr	r1, [r3, #0]
 800d9ba:	f7f2 fc31 	bl	8000220 <strcmp>
 800d9be:	bb88      	cbnz	r0, 800da24 <rmw_init_options_fini+0x84>
 800d9c0:	4b1c      	ldr	r3, [pc, #112]	@ (800da34 <rmw_init_options_fini+0x94>)
 800d9c2:	6819      	ldr	r1, [r3, #0]
 800d9c4:	b351      	cbz	r1, 800da1c <rmw_init_options_fini+0x7c>
 800d9c6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d9c8:	e001      	b.n	800d9ce <rmw_init_options_fini+0x2e>
 800d9ca:	6849      	ldr	r1, [r1, #4]
 800d9cc:	b331      	cbz	r1, 800da1c <rmw_init_options_fini+0x7c>
 800d9ce:	688b      	ldr	r3, [r1, #8]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d1fa      	bne.n	800d9ca <rmw_init_options_fini+0x2a>
 800d9d4:	4817      	ldr	r0, [pc, #92]	@ (800da34 <rmw_init_options_fini+0x94>)
 800d9d6:	f009 fae3 	bl	8016fa0 <put_memory>
 800d9da:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d9dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d9de:	69e0      	ldr	r0, [r4, #28]
 800d9e0:	4798      	blx	r3
 800d9e2:	4668      	mov	r0, sp
 800d9e4:	f7ff fed8 	bl	800d798 <rmw_get_zero_initialized_init_options>
 800d9e8:	46ee      	mov	lr, sp
 800d9ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d9ee:	46a4      	mov	ip, r4
 800d9f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d9f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d9f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d9fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800da00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da04:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800da08:	e88c 0003 	stmia.w	ip, {r0, r1}
 800da0c:	2300      	movs	r3, #0
 800da0e:	4618      	mov	r0, r3
 800da10:	b00e      	add	sp, #56	@ 0x38
 800da12:	bd10      	pop	{r4, pc}
 800da14:	230b      	movs	r3, #11
 800da16:	4618      	mov	r0, r3
 800da18:	b00e      	add	sp, #56	@ 0x38
 800da1a:	bd10      	pop	{r4, pc}
 800da1c:	2301      	movs	r3, #1
 800da1e:	4618      	mov	r0, r3
 800da20:	b00e      	add	sp, #56	@ 0x38
 800da22:	bd10      	pop	{r4, pc}
 800da24:	230c      	movs	r3, #12
 800da26:	e7f2      	b.n	800da0e <rmw_init_options_fini+0x6e>
 800da28:	230b      	movs	r3, #11
 800da2a:	4618      	mov	r0, r3
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop
 800da30:	0801b650 	.word	0x0801b650
 800da34:	2000af1c 	.word	0x2000af1c

0800da38 <rmw_init>:
 800da38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da3c:	b083      	sub	sp, #12
 800da3e:	2800      	cmp	r0, #0
 800da40:	f000 80d3 	beq.w	800dbea <rmw_init+0x1b2>
 800da44:	460e      	mov	r6, r1
 800da46:	2900      	cmp	r1, #0
 800da48:	f000 80cf 	beq.w	800dbea <rmw_init+0x1b2>
 800da4c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800da4e:	4605      	mov	r5, r0
 800da50:	2b00      	cmp	r3, #0
 800da52:	f000 80ca 	beq.w	800dbea <rmw_init+0x1b2>
 800da56:	4b78      	ldr	r3, [pc, #480]	@ (800dc38 <rmw_init+0x200>)
 800da58:	6880      	ldr	r0, [r0, #8]
 800da5a:	681f      	ldr	r7, [r3, #0]
 800da5c:	b128      	cbz	r0, 800da6a <rmw_init+0x32>
 800da5e:	4639      	mov	r1, r7
 800da60:	f7f2 fbde 	bl	8000220 <strcmp>
 800da64:	2800      	cmp	r0, #0
 800da66:	f040 80ca 	bne.w	800dbfe <rmw_init+0x1c6>
 800da6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da6e:	4c73      	ldr	r4, [pc, #460]	@ (800dc3c <rmw_init+0x204>)
 800da70:	4973      	ldr	r1, [pc, #460]	@ (800dc40 <rmw_init+0x208>)
 800da72:	4874      	ldr	r0, [pc, #464]	@ (800dc44 <rmw_init+0x20c>)
 800da74:	60b7      	str	r7, [r6, #8]
 800da76:	e9c6 2300 	strd	r2, r3, [r6]
 800da7a:	68eb      	ldr	r3, [r5, #12]
 800da7c:	64b3      	str	r3, [r6, #72]	@ 0x48
 800da7e:	2201      	movs	r2, #1
 800da80:	f000 fd76 	bl	800e570 <rmw_uxrce_init_session_memory>
 800da84:	4620      	mov	r0, r4
 800da86:	4970      	ldr	r1, [pc, #448]	@ (800dc48 <rmw_init+0x210>)
 800da88:	2204      	movs	r2, #4
 800da8a:	f000 fdb1 	bl	800e5f0 <rmw_uxrce_init_static_input_buffer_memory>
 800da8e:	f04f 0800 	mov.w	r8, #0
 800da92:	486c      	ldr	r0, [pc, #432]	@ (800dc44 <rmw_init+0x20c>)
 800da94:	f884 800d 	strb.w	r8, [r4, #13]
 800da98:	f009 fa72 	bl	8016f80 <get_memory>
 800da9c:	2800      	cmp	r0, #0
 800da9e:	f000 80a9 	beq.w	800dbf4 <rmw_init+0x1bc>
 800daa2:	6884      	ldr	r4, [r0, #8]
 800daa4:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800daa6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800daa8:	f890 c010 	ldrb.w	ip, [r0, #16]
 800daac:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800dab0:	9101      	str	r1, [sp, #4]
 800dab2:	6a00      	ldr	r0, [r0, #32]
 800dab4:	9000      	str	r0, [sp, #0]
 800dab6:	f104 0910 	add.w	r9, r4, #16
 800daba:	4661      	mov	r1, ip
 800dabc:	4648      	mov	r0, r9
 800dabe:	f002 fe53 	bl	8010768 <uxr_set_custom_transport_callbacks>
 800dac2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800dac6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800daca:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800dace:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800dad2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800dad6:	495d      	ldr	r1, [pc, #372]	@ (800dc4c <rmw_init+0x214>)
 800dad8:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800dadc:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800dae0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800dae4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800dae8:	4859      	ldr	r0, [pc, #356]	@ (800dc50 <rmw_init+0x218>)
 800daea:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800daee:	2201      	movs	r2, #1
 800daf0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800daf2:	f000 fd1d 	bl	800e530 <rmw_uxrce_init_node_memory>
 800daf6:	4957      	ldr	r1, [pc, #348]	@ (800dc54 <rmw_init+0x21c>)
 800daf8:	4857      	ldr	r0, [pc, #348]	@ (800dc58 <rmw_init+0x220>)
 800dafa:	2205      	movs	r2, #5
 800dafc:	f000 fcf8 	bl	800e4f0 <rmw_uxrce_init_subscription_memory>
 800db00:	4956      	ldr	r1, [pc, #344]	@ (800dc5c <rmw_init+0x224>)
 800db02:	4857      	ldr	r0, [pc, #348]	@ (800dc60 <rmw_init+0x228>)
 800db04:	220a      	movs	r2, #10
 800db06:	f000 fcd3 	bl	800e4b0 <rmw_uxrce_init_publisher_memory>
 800db0a:	4956      	ldr	r1, [pc, #344]	@ (800dc64 <rmw_init+0x22c>)
 800db0c:	4856      	ldr	r0, [pc, #344]	@ (800dc68 <rmw_init+0x230>)
 800db0e:	2201      	movs	r2, #1
 800db10:	f000 fc8e 	bl	800e430 <rmw_uxrce_init_service_memory>
 800db14:	4955      	ldr	r1, [pc, #340]	@ (800dc6c <rmw_init+0x234>)
 800db16:	4856      	ldr	r0, [pc, #344]	@ (800dc70 <rmw_init+0x238>)
 800db18:	2201      	movs	r2, #1
 800db1a:	f000 fca9 	bl	800e470 <rmw_uxrce_init_client_memory>
 800db1e:	4955      	ldr	r1, [pc, #340]	@ (800dc74 <rmw_init+0x23c>)
 800db20:	4855      	ldr	r0, [pc, #340]	@ (800dc78 <rmw_init+0x240>)
 800db22:	220f      	movs	r2, #15
 800db24:	f000 fd44 	bl	800e5b0 <rmw_uxrce_init_topic_memory>
 800db28:	4954      	ldr	r1, [pc, #336]	@ (800dc7c <rmw_init+0x244>)
 800db2a:	4855      	ldr	r0, [pc, #340]	@ (800dc80 <rmw_init+0x248>)
 800db2c:	2203      	movs	r2, #3
 800db2e:	f000 fd7f 	bl	800e630 <rmw_uxrce_init_init_options_impl_memory>
 800db32:	4954      	ldr	r1, [pc, #336]	@ (800dc84 <rmw_init+0x24c>)
 800db34:	4854      	ldr	r0, [pc, #336]	@ (800dc88 <rmw_init+0x250>)
 800db36:	2204      	movs	r2, #4
 800db38:	f000 fd9a 	bl	800e670 <rmw_uxrce_init_wait_set_memory>
 800db3c:	4953      	ldr	r1, [pc, #332]	@ (800dc8c <rmw_init+0x254>)
 800db3e:	4854      	ldr	r0, [pc, #336]	@ (800dc90 <rmw_init+0x258>)
 800db40:	2204      	movs	r2, #4
 800db42:	f000 fdb5 	bl	800e6b0 <rmw_uxrce_init_guard_condition_memory>
 800db46:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800db48:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800db4a:	4642      	mov	r2, r8
 800db4c:	f000 fc38 	bl	800e3c0 <rmw_uxrce_transport_init>
 800db50:	4607      	mov	r7, r0
 800db52:	2800      	cmp	r0, #0
 800db54:	d158      	bne.n	800dc08 <rmw_init+0x1d0>
 800db56:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800db58:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800db5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800db5e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800db62:	4628      	mov	r0, r5
 800db64:	f002 fffc 	bl	8010b60 <uxr_init_session>
 800db68:	494a      	ldr	r1, [pc, #296]	@ (800dc94 <rmw_init+0x25c>)
 800db6a:	4622      	mov	r2, r4
 800db6c:	4628      	mov	r0, r5
 800db6e:	f003 f81b 	bl	8010ba8 <uxr_set_topic_callback>
 800db72:	4949      	ldr	r1, [pc, #292]	@ (800dc98 <rmw_init+0x260>)
 800db74:	463a      	mov	r2, r7
 800db76:	4628      	mov	r0, r5
 800db78:	f003 f812 	bl	8010ba0 <uxr_set_status_callback>
 800db7c:	4947      	ldr	r1, [pc, #284]	@ (800dc9c <rmw_init+0x264>)
 800db7e:	463a      	mov	r2, r7
 800db80:	4628      	mov	r0, r5
 800db82:	f003 f815 	bl	8010bb0 <uxr_set_request_callback>
 800db86:	4946      	ldr	r1, [pc, #280]	@ (800dca0 <rmw_init+0x268>)
 800db88:	463a      	mov	r2, r7
 800db8a:	4628      	mov	r0, r5
 800db8c:	f003 f814 	bl	8010bb8 <uxr_set_reply_callback>
 800db90:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800db94:	2304      	movs	r3, #4
 800db96:	0092      	lsls	r2, r2, #2
 800db98:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800db9c:	4628      	mov	r0, r5
 800db9e:	f003 f849 	bl	8010c34 <uxr_create_input_reliable_stream>
 800dba2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800dba6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800dbaa:	0092      	lsls	r2, r2, #2
 800dbac:	2304      	movs	r3, #4
 800dbae:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	f003 f816 	bl	8010be4 <uxr_create_output_reliable_stream>
 800dbb8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800dbbc:	4628      	mov	r0, r5
 800dbbe:	f003 f833 	bl	8010c28 <uxr_create_input_best_effort_stream>
 800dbc2:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800dbc6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800dbca:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800dbce:	3114      	adds	r1, #20
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	f002 fff5 	bl	8010bc0 <uxr_create_output_best_effort_stream>
 800dbd6:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800dbda:	4628      	mov	r0, r5
 800dbdc:	f003 fdd4 	bl	8011788 <uxr_create_session>
 800dbe0:	b1f8      	cbz	r0, 800dc22 <rmw_init+0x1ea>
 800dbe2:	4638      	mov	r0, r7
 800dbe4:	b003      	add	sp, #12
 800dbe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbea:	270b      	movs	r7, #11
 800dbec:	4638      	mov	r0, r7
 800dbee:	b003      	add	sp, #12
 800dbf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbf4:	2701      	movs	r7, #1
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	b003      	add	sp, #12
 800dbfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbfe:	270c      	movs	r7, #12
 800dc00:	4638      	mov	r0, r7
 800dc02:	b003      	add	sp, #12
 800dc04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc08:	4648      	mov	r0, r9
 800dc0a:	f002 fdef 	bl	80107ec <uxr_close_custom_transport>
 800dc0e:	480d      	ldr	r0, [pc, #52]	@ (800dc44 <rmw_init+0x20c>)
 800dc10:	4621      	mov	r1, r4
 800dc12:	f009 f9c5 	bl	8016fa0 <put_memory>
 800dc16:	4638      	mov	r0, r7
 800dc18:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800dc1c:	b003      	add	sp, #12
 800dc1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc22:	4648      	mov	r0, r9
 800dc24:	f002 fde2 	bl	80107ec <uxr_close_custom_transport>
 800dc28:	4806      	ldr	r0, [pc, #24]	@ (800dc44 <rmw_init+0x20c>)
 800dc2a:	4621      	mov	r1, r4
 800dc2c:	f009 f9b8 	bl	8016fa0 <put_memory>
 800dc30:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800dc32:	2701      	movs	r7, #1
 800dc34:	e7d5      	b.n	800dbe2 <rmw_init+0x1aa>
 800dc36:	bf00      	nop
 800dc38:	0801b650 	.word	0x0801b650
 800dc3c:	2000af6c 	.word	0x2000af6c
 800dc40:	20007218 	.word	0x20007218
 800dc44:	2000af5c 	.word	0x2000af5c
 800dc48:	200087c0 	.word	0x200087c0
 800dc4c:	2000683c 	.word	0x2000683c
 800dc50:	2000af2c 	.word	0x2000af2c
 800dc54:	2000a8c0 	.word	0x2000a8c0
 800dc58:	2000af7c 	.word	0x2000af7c
 800dc5c:	200068e0 	.word	0x200068e0
 800dc60:	2000af3c 	.word	0x2000af3c
 800dc64:	20007150 	.word	0x20007150
 800dc68:	2000af4c 	.word	0x2000af4c
 800dc6c:	20006670 	.word	0x20006670
 800dc70:	2000665c 	.word	0x2000665c
 800dc74:	2000acf8 	.word	0x2000acf8
 800dc78:	2000af8c 	.word	0x2000af8c
 800dc7c:	200067b8 	.word	0x200067b8
 800dc80:	2000af1c 	.word	0x2000af1c
 800dc84:	2000ae9c 	.word	0x2000ae9c
 800dc88:	2000af9c 	.word	0x2000af9c
 800dc8c:	20006738 	.word	0x20006738
 800dc90:	2000af0c 	.word	0x2000af0c
 800dc94:	08016db9 	.word	0x08016db9
 800dc98:	08016db1 	.word	0x08016db1
 800dc9c:	08016e51 	.word	0x08016e51
 800dca0:	08016eed 	.word	0x08016eed

0800dca4 <rmw_context_fini>:
 800dca4:	4b17      	ldr	r3, [pc, #92]	@ (800dd04 <rmw_context_fini+0x60>)
 800dca6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800dca8:	b570      	push	{r4, r5, r6, lr}
 800dcaa:	681c      	ldr	r4, [r3, #0]
 800dcac:	4605      	mov	r5, r0
 800dcae:	b334      	cbz	r4, 800dcfe <rmw_context_fini+0x5a>
 800dcb0:	2600      	movs	r6, #0
 800dcb2:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800dcb6:	6902      	ldr	r2, [r0, #16]
 800dcb8:	428a      	cmp	r2, r1
 800dcba:	d018      	beq.n	800dcee <rmw_context_fini+0x4a>
 800dcbc:	2c00      	cmp	r4, #0
 800dcbe:	d1f8      	bne.n	800dcb2 <rmw_context_fini+0xe>
 800dcc0:	b189      	cbz	r1, 800dce6 <rmw_context_fini+0x42>
 800dcc2:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800dcc6:	789b      	ldrb	r3, [r3, #2]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800dcce:	bf14      	ite	ne
 800dcd0:	210a      	movne	r1, #10
 800dcd2:	2100      	moveq	r1, #0
 800dcd4:	f003 fd30 	bl	8011738 <uxr_delete_session_retries>
 800dcd8:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800dcda:	f000 fd09 	bl	800e6f0 <rmw_uxrce_fini_session_memory>
 800dcde:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800dce0:	3010      	adds	r0, #16
 800dce2:	f002 fd83 	bl	80107ec <uxr_close_custom_transport>
 800dce6:	2300      	movs	r3, #0
 800dce8:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800dcea:	4630      	mov	r0, r6
 800dcec:	bd70      	pop	{r4, r5, r6, pc}
 800dcee:	3018      	adds	r0, #24
 800dcf0:	f000 f89c 	bl	800de2c <rmw_destroy_node>
 800dcf4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800dcf6:	4606      	mov	r6, r0
 800dcf8:	2c00      	cmp	r4, #0
 800dcfa:	d1da      	bne.n	800dcb2 <rmw_context_fini+0xe>
 800dcfc:	e7e0      	b.n	800dcc0 <rmw_context_fini+0x1c>
 800dcfe:	4626      	mov	r6, r4
 800dd00:	e7de      	b.n	800dcc0 <rmw_context_fini+0x1c>
 800dd02:	bf00      	nop
 800dd04:	2000af2c 	.word	0x2000af2c

0800dd08 <create_node>:
 800dd08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd0c:	b083      	sub	sp, #12
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d05f      	beq.n	800ddd2 <create_node+0xca>
 800dd12:	4606      	mov	r6, r0
 800dd14:	4835      	ldr	r0, [pc, #212]	@ (800ddec <create_node+0xe4>)
 800dd16:	460f      	mov	r7, r1
 800dd18:	4690      	mov	r8, r2
 800dd1a:	461d      	mov	r5, r3
 800dd1c:	f009 f930 	bl	8016f80 <get_memory>
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d056      	beq.n	800ddd2 <create_node+0xca>
 800dd24:	6884      	ldr	r4, [r0, #8]
 800dd26:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800dd28:	6123      	str	r3, [r4, #16]
 800dd2a:	f009 f991 	bl	8017050 <rmw_get_implementation_identifier>
 800dd2e:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800dd32:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800dd36:	f8c4 9020 	str.w	r9, [r4, #32]
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	f7f2 fa7a 	bl	8000234 <strlen>
 800dd40:	1c42      	adds	r2, r0, #1
 800dd42:	2a3c      	cmp	r2, #60	@ 0x3c
 800dd44:	f104 0518 	add.w	r5, r4, #24
 800dd48:	d840      	bhi.n	800ddcc <create_node+0xc4>
 800dd4a:	4648      	mov	r0, r9
 800dd4c:	4631      	mov	r1, r6
 800dd4e:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800dd52:	f00c f81e 	bl	8019d92 <memcpy>
 800dd56:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800dd5a:	4638      	mov	r0, r7
 800dd5c:	f7f2 fa6a 	bl	8000234 <strlen>
 800dd60:	1c42      	adds	r2, r0, #1
 800dd62:	2a3c      	cmp	r2, #60	@ 0x3c
 800dd64:	d832      	bhi.n	800ddcc <create_node+0xc4>
 800dd66:	4639      	mov	r1, r7
 800dd68:	4648      	mov	r0, r9
 800dd6a:	f00c f812 	bl	8019d92 <memcpy>
 800dd6e:	6923      	ldr	r3, [r4, #16]
 800dd70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd74:	2101      	movs	r1, #1
 800dd76:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800dd7a:	1842      	adds	r2, r0, r1
 800dd7c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800dd80:	f002 fd38 	bl	80107f4 <uxr_object_id>
 800dd84:	6160      	str	r0, [r4, #20]
 800dd86:	783b      	ldrb	r3, [r7, #0]
 800dd88:	2b2f      	cmp	r3, #47	@ 0x2f
 800dd8a:	d127      	bne.n	800dddc <create_node+0xd4>
 800dd8c:	787b      	ldrb	r3, [r7, #1]
 800dd8e:	bb2b      	cbnz	r3, 800dddc <create_node+0xd4>
 800dd90:	4a17      	ldr	r2, [pc, #92]	@ (800ddf0 <create_node+0xe8>)
 800dd92:	4818      	ldr	r0, [pc, #96]	@ (800ddf4 <create_node+0xec>)
 800dd94:	4633      	mov	r3, r6
 800dd96:	213c      	movs	r1, #60	@ 0x3c
 800dd98:	f00b fdbe 	bl	8019918 <sniprintf>
 800dd9c:	6920      	ldr	r0, [r4, #16]
 800dd9e:	4915      	ldr	r1, [pc, #84]	@ (800ddf4 <create_node+0xec>)
 800dda0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800dda4:	9100      	str	r1, [sp, #0]
 800dda6:	2106      	movs	r1, #6
 800dda8:	9101      	str	r1, [sp, #4]
 800ddaa:	6811      	ldr	r1, [r2, #0]
 800ddac:	6962      	ldr	r2, [r4, #20]
 800ddae:	fa1f f388 	uxth.w	r3, r8
 800ddb2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ddb6:	f002 fb4d 	bl	8010454 <uxr_buffer_create_participant_bin>
 800ddba:	4602      	mov	r2, r0
 800ddbc:	6920      	ldr	r0, [r4, #16]
 800ddbe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ddc2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ddc6:	f000 fe09 	bl	800e9dc <run_xrce_session>
 800ddca:	b918      	cbnz	r0, 800ddd4 <create_node+0xcc>
 800ddcc:	4628      	mov	r0, r5
 800ddce:	f000 fc95 	bl	800e6fc <rmw_uxrce_fini_node_memory>
 800ddd2:	2500      	movs	r5, #0
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	b003      	add	sp, #12
 800ddd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dddc:	4a06      	ldr	r2, [pc, #24]	@ (800ddf8 <create_node+0xf0>)
 800ddde:	9600      	str	r6, [sp, #0]
 800dde0:	463b      	mov	r3, r7
 800dde2:	213c      	movs	r1, #60	@ 0x3c
 800dde4:	4803      	ldr	r0, [pc, #12]	@ (800ddf4 <create_node+0xec>)
 800dde6:	f00b fd97 	bl	8019918 <sniprintf>
 800ddea:	e7d7      	b.n	800dd9c <create_node+0x94>
 800ddec:	2000af2c 	.word	0x2000af2c
 800ddf0:	0801ac9c 	.word	0x0801ac9c
 800ddf4:	20006620 	.word	0x20006620
 800ddf8:	0801ac60 	.word	0x0801ac60

0800ddfc <rmw_create_node>:
 800ddfc:	b199      	cbz	r1, 800de26 <rmw_create_node+0x2a>
 800ddfe:	780b      	ldrb	r3, [r1, #0]
 800de00:	468c      	mov	ip, r1
 800de02:	b183      	cbz	r3, 800de26 <rmw_create_node+0x2a>
 800de04:	b410      	push	{r4}
 800de06:	4614      	mov	r4, r2
 800de08:	b14a      	cbz	r2, 800de1e <rmw_create_node+0x22>
 800de0a:	7813      	ldrb	r3, [r2, #0]
 800de0c:	b13b      	cbz	r3, 800de1e <rmw_create_node+0x22>
 800de0e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800de10:	4603      	mov	r3, r0
 800de12:	4621      	mov	r1, r4
 800de14:	4660      	mov	r0, ip
 800de16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de1a:	f7ff bf75 	b.w	800dd08 <create_node>
 800de1e:	2000      	movs	r0, #0
 800de20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de24:	4770      	bx	lr
 800de26:	2000      	movs	r0, #0
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop

0800de2c <rmw_destroy_node>:
 800de2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de2e:	b328      	cbz	r0, 800de7c <rmw_destroy_node+0x50>
 800de30:	4607      	mov	r7, r0
 800de32:	6800      	ldr	r0, [r0, #0]
 800de34:	b120      	cbz	r0, 800de40 <rmw_destroy_node+0x14>
 800de36:	4b36      	ldr	r3, [pc, #216]	@ (800df10 <rmw_destroy_node+0xe4>)
 800de38:	6819      	ldr	r1, [r3, #0]
 800de3a:	f7f2 f9f1 	bl	8000220 <strcmp>
 800de3e:	b9e8      	cbnz	r0, 800de7c <rmw_destroy_node+0x50>
 800de40:	687d      	ldr	r5, [r7, #4]
 800de42:	b1dd      	cbz	r5, 800de7c <rmw_destroy_node+0x50>
 800de44:	4b33      	ldr	r3, [pc, #204]	@ (800df14 <rmw_destroy_node+0xe8>)
 800de46:	681c      	ldr	r4, [r3, #0]
 800de48:	2c00      	cmp	r4, #0
 800de4a:	d05f      	beq.n	800df0c <rmw_destroy_node+0xe0>
 800de4c:	2600      	movs	r6, #0
 800de4e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800de52:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800de56:	429d      	cmp	r5, r3
 800de58:	d013      	beq.n	800de82 <rmw_destroy_node+0x56>
 800de5a:	2c00      	cmp	r4, #0
 800de5c:	d1f7      	bne.n	800de4e <rmw_destroy_node+0x22>
 800de5e:	4b2e      	ldr	r3, [pc, #184]	@ (800df18 <rmw_destroy_node+0xec>)
 800de60:	681c      	ldr	r4, [r3, #0]
 800de62:	b1c4      	cbz	r4, 800de96 <rmw_destroy_node+0x6a>
 800de64:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800de68:	6a0b      	ldr	r3, [r1, #32]
 800de6a:	429d      	cmp	r5, r3
 800de6c:	d1f9      	bne.n	800de62 <rmw_destroy_node+0x36>
 800de6e:	317c      	adds	r1, #124	@ 0x7c
 800de70:	4638      	mov	r0, r7
 800de72:	f000 fa45 	bl	800e300 <rmw_destroy_subscription>
 800de76:	2801      	cmp	r0, #1
 800de78:	4606      	mov	r6, r0
 800de7a:	d1f2      	bne.n	800de62 <rmw_destroy_node+0x36>
 800de7c:	2601      	movs	r6, #1
 800de7e:	4630      	mov	r0, r6
 800de80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de82:	3184      	adds	r1, #132	@ 0x84
 800de84:	4638      	mov	r0, r7
 800de86:	f000 f9a5 	bl	800e1d4 <rmw_destroy_publisher>
 800de8a:	2801      	cmp	r0, #1
 800de8c:	4606      	mov	r6, r0
 800de8e:	d0f5      	beq.n	800de7c <rmw_destroy_node+0x50>
 800de90:	2c00      	cmp	r4, #0
 800de92:	d1dc      	bne.n	800de4e <rmw_destroy_node+0x22>
 800de94:	e7e3      	b.n	800de5e <rmw_destroy_node+0x32>
 800de96:	4b21      	ldr	r3, [pc, #132]	@ (800df1c <rmw_destroy_node+0xf0>)
 800de98:	681c      	ldr	r4, [r3, #0]
 800de9a:	b16c      	cbz	r4, 800deb8 <rmw_destroy_node+0x8c>
 800de9c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dea0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800dea2:	429d      	cmp	r5, r3
 800dea4:	d1f9      	bne.n	800de9a <rmw_destroy_node+0x6e>
 800dea6:	317c      	adds	r1, #124	@ 0x7c
 800dea8:	4638      	mov	r0, r7
 800deaa:	f000 f9e5 	bl	800e278 <rmw_destroy_service>
 800deae:	2801      	cmp	r0, #1
 800deb0:	4606      	mov	r6, r0
 800deb2:	d0e3      	beq.n	800de7c <rmw_destroy_node+0x50>
 800deb4:	2c00      	cmp	r4, #0
 800deb6:	d1f1      	bne.n	800de9c <rmw_destroy_node+0x70>
 800deb8:	4b19      	ldr	r3, [pc, #100]	@ (800df20 <rmw_destroy_node+0xf4>)
 800deba:	681c      	ldr	r4, [r3, #0]
 800debc:	b16c      	cbz	r4, 800deda <rmw_destroy_node+0xae>
 800debe:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dec2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800dec4:	429d      	cmp	r5, r3
 800dec6:	d1f9      	bne.n	800debc <rmw_destroy_node+0x90>
 800dec8:	317c      	adds	r1, #124	@ 0x7c
 800deca:	4638      	mov	r0, r7
 800decc:	f009 f87c 	bl	8016fc8 <rmw_destroy_client>
 800ded0:	2801      	cmp	r0, #1
 800ded2:	4606      	mov	r6, r0
 800ded4:	d0d2      	beq.n	800de7c <rmw_destroy_node+0x50>
 800ded6:	2c00      	cmp	r4, #0
 800ded8:	d1f1      	bne.n	800debe <rmw_destroy_node+0x92>
 800deda:	6928      	ldr	r0, [r5, #16]
 800dedc:	696a      	ldr	r2, [r5, #20]
 800dede:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dee2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dee6:	6819      	ldr	r1, [r3, #0]
 800dee8:	f002 fa68 	bl	80103bc <uxr_buffer_delete_entity>
 800deec:	4602      	mov	r2, r0
 800deee:	6928      	ldr	r0, [r5, #16]
 800def0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800def4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800def8:	f000 fd70 	bl	800e9dc <run_xrce_session>
 800defc:	2800      	cmp	r0, #0
 800defe:	bf08      	it	eq
 800df00:	2602      	moveq	r6, #2
 800df02:	4638      	mov	r0, r7
 800df04:	f000 fbfa 	bl	800e6fc <rmw_uxrce_fini_node_memory>
 800df08:	4630      	mov	r0, r6
 800df0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df0c:	4626      	mov	r6, r4
 800df0e:	e7a6      	b.n	800de5e <rmw_destroy_node+0x32>
 800df10:	0801b650 	.word	0x0801b650
 800df14:	2000af3c 	.word	0x2000af3c
 800df18:	2000af7c 	.word	0x2000af7c
 800df1c:	2000af4c 	.word	0x2000af4c
 800df20:	2000665c 	.word	0x2000665c

0800df24 <rmw_node_get_graph_guard_condition>:
 800df24:	6843      	ldr	r3, [r0, #4]
 800df26:	6918      	ldr	r0, [r3, #16]
 800df28:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop

0800df30 <flush_session>:
 800df30:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800df32:	f003 ba65 	b.w	8011400 <uxr_run_session_until_confirm_delivery>
 800df36:	bf00      	nop

0800df38 <rmw_publish>:
 800df38:	2800      	cmp	r0, #0
 800df3a:	d053      	beq.n	800dfe4 <rmw_publish+0xac>
 800df3c:	b570      	push	{r4, r5, r6, lr}
 800df3e:	460d      	mov	r5, r1
 800df40:	b08e      	sub	sp, #56	@ 0x38
 800df42:	2900      	cmp	r1, #0
 800df44:	d04b      	beq.n	800dfde <rmw_publish+0xa6>
 800df46:	4604      	mov	r4, r0
 800df48:	6800      	ldr	r0, [r0, #0]
 800df4a:	f000 fdc7 	bl	800eadc <is_uxrce_rmw_identifier_valid>
 800df4e:	2800      	cmp	r0, #0
 800df50:	d045      	beq.n	800dfde <rmw_publish+0xa6>
 800df52:	6866      	ldr	r6, [r4, #4]
 800df54:	2e00      	cmp	r6, #0
 800df56:	d042      	beq.n	800dfde <rmw_publish+0xa6>
 800df58:	69b4      	ldr	r4, [r6, #24]
 800df5a:	4628      	mov	r0, r5
 800df5c:	6923      	ldr	r3, [r4, #16]
 800df5e:	4798      	blx	r3
 800df60:	69f3      	ldr	r3, [r6, #28]
 800df62:	9005      	str	r0, [sp, #20]
 800df64:	b113      	cbz	r3, 800df6c <rmw_publish+0x34>
 800df66:	a805      	add	r0, sp, #20
 800df68:	4798      	blx	r3
 800df6a:	9805      	ldr	r0, [sp, #20]
 800df6c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800df70:	691b      	ldr	r3, [r3, #16]
 800df72:	9000      	str	r0, [sp, #0]
 800df74:	6972      	ldr	r2, [r6, #20]
 800df76:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800df78:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800df7c:	ab06      	add	r3, sp, #24
 800df7e:	f004 fd11 	bl	80129a4 <uxr_prepare_output_stream>
 800df82:	b1d8      	cbz	r0, 800dfbc <rmw_publish+0x84>
 800df84:	68a3      	ldr	r3, [r4, #8]
 800df86:	a906      	add	r1, sp, #24
 800df88:	4628      	mov	r0, r5
 800df8a:	4798      	blx	r3
 800df8c:	6a33      	ldr	r3, [r6, #32]
 800df8e:	4604      	mov	r4, r0
 800df90:	b10b      	cbz	r3, 800df96 <rmw_publish+0x5e>
 800df92:	a806      	add	r0, sp, #24
 800df94:	4798      	blx	r3
 800df96:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dfa0:	d022      	beq.n	800dfe8 <rmw_publish+0xb0>
 800dfa2:	6918      	ldr	r0, [r3, #16]
 800dfa4:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800dfa6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dfaa:	f003 fa29 	bl	8011400 <uxr_run_session_until_confirm_delivery>
 800dfae:	4020      	ands	r0, r4
 800dfb0:	b2c4      	uxtb	r4, r0
 800dfb2:	f084 0001 	eor.w	r0, r4, #1
 800dfb6:	b2c0      	uxtb	r0, r0
 800dfb8:	b00e      	add	sp, #56	@ 0x38
 800dfba:	bd70      	pop	{r4, r5, r6, pc}
 800dfbc:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dfc0:	6918      	ldr	r0, [r3, #16]
 800dfc2:	9b05      	ldr	r3, [sp, #20]
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	4b0b      	ldr	r3, [pc, #44]	@ (800dff4 <rmw_publish+0xbc>)
 800dfc8:	9301      	str	r3, [sp, #4]
 800dfca:	9602      	str	r6, [sp, #8]
 800dfcc:	6972      	ldr	r2, [r6, #20]
 800dfce:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dfd0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dfd4:	ab06      	add	r3, sp, #24
 800dfd6:	f004 fd15 	bl	8012a04 <uxr_prepare_output_stream_fragmented>
 800dfda:	2800      	cmp	r0, #0
 800dfdc:	d1d2      	bne.n	800df84 <rmw_publish+0x4c>
 800dfde:	2001      	movs	r0, #1
 800dfe0:	b00e      	add	sp, #56	@ 0x38
 800dfe2:	bd70      	pop	{r4, r5, r6, pc}
 800dfe4:	2001      	movs	r0, #1
 800dfe6:	4770      	bx	lr
 800dfe8:	6918      	ldr	r0, [r3, #16]
 800dfea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dfee:	f002 fe47 	bl	8010c80 <uxr_flash_output_streams>
 800dff2:	e7de      	b.n	800dfb2 <rmw_publish+0x7a>
 800dff4:	0800df31 	.word	0x0800df31

0800dff8 <rmw_create_publisher>:
 800dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffc:	b087      	sub	sp, #28
 800dffe:	2800      	cmp	r0, #0
 800e000:	f000 80cc 	beq.w	800e19c <rmw_create_publisher+0x1a4>
 800e004:	460e      	mov	r6, r1
 800e006:	2900      	cmp	r1, #0
 800e008:	f000 80c8 	beq.w	800e19c <rmw_create_publisher+0x1a4>
 800e00c:	4604      	mov	r4, r0
 800e00e:	6800      	ldr	r0, [r0, #0]
 800e010:	4615      	mov	r5, r2
 800e012:	4698      	mov	r8, r3
 800e014:	f000 fd62 	bl	800eadc <is_uxrce_rmw_identifier_valid>
 800e018:	2800      	cmp	r0, #0
 800e01a:	f000 80bf 	beq.w	800e19c <rmw_create_publisher+0x1a4>
 800e01e:	2d00      	cmp	r5, #0
 800e020:	f000 80bc 	beq.w	800e19c <rmw_create_publisher+0x1a4>
 800e024:	782b      	ldrb	r3, [r5, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	f000 80b8 	beq.w	800e19c <rmw_create_publisher+0x1a4>
 800e02c:	f1b8 0f00 	cmp.w	r8, #0
 800e030:	f000 80b4 	beq.w	800e19c <rmw_create_publisher+0x1a4>
 800e034:	485c      	ldr	r0, [pc, #368]	@ (800e1a8 <rmw_create_publisher+0x1b0>)
 800e036:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e03a:	f008 ffa1 	bl	8016f80 <get_memory>
 800e03e:	2800      	cmp	r0, #0
 800e040:	f000 80ac 	beq.w	800e19c <rmw_create_publisher+0x1a4>
 800e044:	6884      	ldr	r4, [r0, #8]
 800e046:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e04a:	f009 f801 	bl	8017050 <rmw_get_implementation_identifier>
 800e04e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e052:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e056:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e05a:	4628      	mov	r0, r5
 800e05c:	f7f2 f8ea 	bl	8000234 <strlen>
 800e060:	3001      	adds	r0, #1
 800e062:	283c      	cmp	r0, #60	@ 0x3c
 800e064:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e068:	f200 8091 	bhi.w	800e18e <rmw_create_publisher+0x196>
 800e06c:	4a4f      	ldr	r2, [pc, #316]	@ (800e1ac <rmw_create_publisher+0x1b4>)
 800e06e:	462b      	mov	r3, r5
 800e070:	213c      	movs	r1, #60	@ 0x3c
 800e072:	4650      	mov	r0, sl
 800e074:	f00b fc50 	bl	8019918 <sniprintf>
 800e078:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e07c:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e07e:	4641      	mov	r1, r8
 800e080:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e084:	2250      	movs	r2, #80	@ 0x50
 800e086:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e08a:	f00b fe82 	bl	8019d92 <memcpy>
 800e08e:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e092:	4947      	ldr	r1, [pc, #284]	@ (800e1b0 <rmw_create_publisher+0x1b8>)
 800e094:	2b02      	cmp	r3, #2
 800e096:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e09a:	bf0c      	ite	eq
 800e09c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e0a0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e0a4:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e0ac:	4630      	mov	r0, r6
 800e0ae:	f000 fd23 	bl	800eaf8 <get_message_typesupport_handle>
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d06b      	beq.n	800e18e <rmw_create_publisher+0x196>
 800e0b6:	6842      	ldr	r2, [r0, #4]
 800e0b8:	61a2      	str	r2, [r4, #24]
 800e0ba:	2a00      	cmp	r2, #0
 800e0bc:	d067      	beq.n	800e18e <rmw_create_publisher+0x196>
 800e0be:	4629      	mov	r1, r5
 800e0c0:	4643      	mov	r3, r8
 800e0c2:	4648      	mov	r0, r9
 800e0c4:	f008 ffca 	bl	801705c <create_topic>
 800e0c8:	6260      	str	r0, [r4, #36]	@ 0x24
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d063      	beq.n	800e196 <rmw_create_publisher+0x19e>
 800e0ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e0d6:	2103      	movs	r1, #3
 800e0d8:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800e0dc:	1c42      	adds	r2, r0, #1
 800e0de:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800e0e2:	f002 fb87 	bl	80107f4 <uxr_object_id>
 800e0e6:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e0ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0ee:	6120      	str	r0, [r4, #16]
 800e0f0:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e0f4:	6910      	ldr	r0, [r2, #16]
 800e0f6:	2506      	movs	r5, #6
 800e0f8:	9500      	str	r5, [sp, #0]
 800e0fa:	6819      	ldr	r1, [r3, #0]
 800e0fc:	6922      	ldr	r2, [r4, #16]
 800e0fe:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e102:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e106:	f002 fa0d 	bl	8010524 <uxr_buffer_create_publisher_bin>
 800e10a:	4602      	mov	r2, r0
 800e10c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e110:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e114:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e118:	f000 fc60 	bl	800e9dc <run_xrce_session>
 800e11c:	b3b8      	cbz	r0, 800e18e <rmw_create_publisher+0x196>
 800e11e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e126:	2105      	movs	r1, #5
 800e128:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e12c:	1c42      	adds	r2, r0, #1
 800e12e:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e132:	f002 fb5f 	bl	80107f4 <uxr_object_id>
 800e136:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e13a:	6160      	str	r0, [r4, #20]
 800e13c:	691e      	ldr	r6, [r3, #16]
 800e13e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e142:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e146:	f10d 0a10 	add.w	sl, sp, #16
 800e14a:	4641      	mov	r1, r8
 800e14c:	4650      	mov	r0, sl
 800e14e:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e152:	f000 fc5f 	bl	800ea14 <convert_qos_profile>
 800e156:	9503      	str	r5, [sp, #12]
 800e158:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e15c:	9001      	str	r0, [sp, #4]
 800e15e:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e162:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e16c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e170:	f8d8 1000 	ldr.w	r1, [r8]
 800e174:	4630      	mov	r0, r6
 800e176:	f002 fa05 	bl	8010584 <uxr_buffer_create_datawriter_bin>
 800e17a:	4602      	mov	r2, r0
 800e17c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e180:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e184:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e188:	f000 fc28 	bl	800e9dc <run_xrce_session>
 800e18c:	b938      	cbnz	r0, 800e19e <rmw_create_publisher+0x1a6>
 800e18e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e190:	b108      	cbz	r0, 800e196 <rmw_create_publisher+0x19e>
 800e192:	f000 fb23 	bl	800e7dc <rmw_uxrce_fini_topic_memory>
 800e196:	4638      	mov	r0, r7
 800e198:	f000 fac8 	bl	800e72c <rmw_uxrce_fini_publisher_memory>
 800e19c:	2700      	movs	r7, #0
 800e19e:	4638      	mov	r0, r7
 800e1a0:	b007      	add	sp, #28
 800e1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a6:	bf00      	nop
 800e1a8:	2000af3c 	.word	0x2000af3c
 800e1ac:	0801ac9c 	.word	0x0801ac9c
 800e1b0:	0801ac68 	.word	0x0801ac68

0800e1b4 <rmw_publisher_get_actual_qos>:
 800e1b4:	b150      	cbz	r0, 800e1cc <rmw_publisher_get_actual_qos+0x18>
 800e1b6:	b508      	push	{r3, lr}
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	b149      	cbz	r1, 800e1d0 <rmw_publisher_get_actual_qos+0x1c>
 800e1bc:	6841      	ldr	r1, [r0, #4]
 800e1be:	2250      	movs	r2, #80	@ 0x50
 800e1c0:	3128      	adds	r1, #40	@ 0x28
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f00b fde5 	bl	8019d92 <memcpy>
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	bd08      	pop	{r3, pc}
 800e1cc:	200b      	movs	r0, #11
 800e1ce:	4770      	bx	lr
 800e1d0:	200b      	movs	r0, #11
 800e1d2:	bd08      	pop	{r3, pc}

0800e1d4 <rmw_destroy_publisher>:
 800e1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d6:	b128      	cbz	r0, 800e1e4 <rmw_destroy_publisher+0x10>
 800e1d8:	4604      	mov	r4, r0
 800e1da:	6800      	ldr	r0, [r0, #0]
 800e1dc:	460d      	mov	r5, r1
 800e1de:	f000 fc7d 	bl	800eadc <is_uxrce_rmw_identifier_valid>
 800e1e2:	b910      	cbnz	r0, 800e1ea <rmw_destroy_publisher+0x16>
 800e1e4:	2401      	movs	r4, #1
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ea:	6863      	ldr	r3, [r4, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d0f9      	beq.n	800e1e4 <rmw_destroy_publisher+0x10>
 800e1f0:	2d00      	cmp	r5, #0
 800e1f2:	d0f7      	beq.n	800e1e4 <rmw_destroy_publisher+0x10>
 800e1f4:	6828      	ldr	r0, [r5, #0]
 800e1f6:	f000 fc71 	bl	800eadc <is_uxrce_rmw_identifier_valid>
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	d0f2      	beq.n	800e1e4 <rmw_destroy_publisher+0x10>
 800e1fe:	686c      	ldr	r4, [r5, #4]
 800e200:	2c00      	cmp	r4, #0
 800e202:	d0ef      	beq.n	800e1e4 <rmw_destroy_publisher+0x10>
 800e204:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e206:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e20a:	f008 ff77 	bl	80170fc <destroy_topic>
 800e20e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e212:	6962      	ldr	r2, [r4, #20]
 800e214:	6918      	ldr	r0, [r3, #16]
 800e216:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e21a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e21e:	6819      	ldr	r1, [r3, #0]
 800e220:	f002 f8cc 	bl	80103bc <uxr_buffer_delete_entity>
 800e224:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e228:	6922      	ldr	r2, [r4, #16]
 800e22a:	691b      	ldr	r3, [r3, #16]
 800e22c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e230:	4604      	mov	r4, r0
 800e232:	6809      	ldr	r1, [r1, #0]
 800e234:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e238:	f002 f8c0 	bl	80103bc <uxr_buffer_delete_entity>
 800e23c:	693e      	ldr	r6, [r7, #16]
 800e23e:	4622      	mov	r2, r4
 800e240:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e244:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e248:	4604      	mov	r4, r0
 800e24a:	4630      	mov	r0, r6
 800e24c:	f000 fbc6 	bl	800e9dc <run_xrce_session>
 800e250:	693e      	ldr	r6, [r7, #16]
 800e252:	4622      	mov	r2, r4
 800e254:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e258:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e25c:	4604      	mov	r4, r0
 800e25e:	4630      	mov	r0, r6
 800e260:	f000 fbbc 	bl	800e9dc <run_xrce_session>
 800e264:	b12c      	cbz	r4, 800e272 <rmw_destroy_publisher+0x9e>
 800e266:	b120      	cbz	r0, 800e272 <rmw_destroy_publisher+0x9e>
 800e268:	2400      	movs	r4, #0
 800e26a:	4628      	mov	r0, r5
 800e26c:	f000 fa5e 	bl	800e72c <rmw_uxrce_fini_publisher_memory>
 800e270:	e7b9      	b.n	800e1e6 <rmw_destroy_publisher+0x12>
 800e272:	2402      	movs	r4, #2
 800e274:	e7f9      	b.n	800e26a <rmw_destroy_publisher+0x96>
 800e276:	bf00      	nop

0800e278 <rmw_destroy_service>:
 800e278:	b570      	push	{r4, r5, r6, lr}
 800e27a:	b128      	cbz	r0, 800e288 <rmw_destroy_service+0x10>
 800e27c:	4604      	mov	r4, r0
 800e27e:	6800      	ldr	r0, [r0, #0]
 800e280:	460d      	mov	r5, r1
 800e282:	f000 fc2b 	bl	800eadc <is_uxrce_rmw_identifier_valid>
 800e286:	b910      	cbnz	r0, 800e28e <rmw_destroy_service+0x16>
 800e288:	2401      	movs	r4, #1
 800e28a:	4620      	mov	r0, r4
 800e28c:	bd70      	pop	{r4, r5, r6, pc}
 800e28e:	6863      	ldr	r3, [r4, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d0f9      	beq.n	800e288 <rmw_destroy_service+0x10>
 800e294:	2d00      	cmp	r5, #0
 800e296:	d0f7      	beq.n	800e288 <rmw_destroy_service+0x10>
 800e298:	6828      	ldr	r0, [r5, #0]
 800e29a:	f000 fc1f 	bl	800eadc <is_uxrce_rmw_identifier_valid>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d0f2      	beq.n	800e288 <rmw_destroy_service+0x10>
 800e2a2:	686e      	ldr	r6, [r5, #4]
 800e2a4:	2e00      	cmp	r6, #0
 800e2a6:	d0ef      	beq.n	800e288 <rmw_destroy_service+0x10>
 800e2a8:	6864      	ldr	r4, [r4, #4]
 800e2aa:	6932      	ldr	r2, [r6, #16]
 800e2ac:	6920      	ldr	r0, [r4, #16]
 800e2ae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e2b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e2b6:	6819      	ldr	r1, [r3, #0]
 800e2b8:	f002 facc 	bl	8010854 <uxr_buffer_cancel_data>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	6920      	ldr	r0, [r4, #16]
 800e2c0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e2c4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e2c8:	f000 fb88 	bl	800e9dc <run_xrce_session>
 800e2cc:	6920      	ldr	r0, [r4, #16]
 800e2ce:	6932      	ldr	r2, [r6, #16]
 800e2d0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e2d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e2d8:	6819      	ldr	r1, [r3, #0]
 800e2da:	f002 f86f 	bl	80103bc <uxr_buffer_delete_entity>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	6920      	ldr	r0, [r4, #16]
 800e2e2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e2e6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e2ea:	f000 fb77 	bl	800e9dc <run_xrce_session>
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	bf14      	ite	ne
 800e2f4:	2400      	movne	r4, #0
 800e2f6:	2402      	moveq	r4, #2
 800e2f8:	f000 fa44 	bl	800e784 <rmw_uxrce_fini_service_memory>
 800e2fc:	e7c5      	b.n	800e28a <rmw_destroy_service+0x12>
 800e2fe:	bf00      	nop

0800e300 <rmw_destroy_subscription>:
 800e300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e302:	b128      	cbz	r0, 800e310 <rmw_destroy_subscription+0x10>
 800e304:	4604      	mov	r4, r0
 800e306:	6800      	ldr	r0, [r0, #0]
 800e308:	460d      	mov	r5, r1
 800e30a:	f000 fbe7 	bl	800eadc <is_uxrce_rmw_identifier_valid>
 800e30e:	b910      	cbnz	r0, 800e316 <rmw_destroy_subscription+0x16>
 800e310:	2401      	movs	r4, #1
 800e312:	4620      	mov	r0, r4
 800e314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e316:	6863      	ldr	r3, [r4, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d0f9      	beq.n	800e310 <rmw_destroy_subscription+0x10>
 800e31c:	2d00      	cmp	r5, #0
 800e31e:	d0f7      	beq.n	800e310 <rmw_destroy_subscription+0x10>
 800e320:	6828      	ldr	r0, [r5, #0]
 800e322:	f000 fbdb 	bl	800eadc <is_uxrce_rmw_identifier_valid>
 800e326:	2800      	cmp	r0, #0
 800e328:	d0f2      	beq.n	800e310 <rmw_destroy_subscription+0x10>
 800e32a:	686c      	ldr	r4, [r5, #4]
 800e32c:	2c00      	cmp	r4, #0
 800e32e:	d0ef      	beq.n	800e310 <rmw_destroy_subscription+0x10>
 800e330:	6a26      	ldr	r6, [r4, #32]
 800e332:	6962      	ldr	r2, [r4, #20]
 800e334:	6930      	ldr	r0, [r6, #16]
 800e336:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e33a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e33e:	6819      	ldr	r1, [r3, #0]
 800e340:	f002 fa88 	bl	8010854 <uxr_buffer_cancel_data>
 800e344:	4602      	mov	r2, r0
 800e346:	6930      	ldr	r0, [r6, #16]
 800e348:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e34c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e350:	f000 fb44 	bl	800e9dc <run_xrce_session>
 800e354:	69e0      	ldr	r0, [r4, #28]
 800e356:	f008 fed1 	bl	80170fc <destroy_topic>
 800e35a:	6a23      	ldr	r3, [r4, #32]
 800e35c:	6962      	ldr	r2, [r4, #20]
 800e35e:	6918      	ldr	r0, [r3, #16]
 800e360:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e364:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e368:	6819      	ldr	r1, [r3, #0]
 800e36a:	f002 f827 	bl	80103bc <uxr_buffer_delete_entity>
 800e36e:	6a23      	ldr	r3, [r4, #32]
 800e370:	6922      	ldr	r2, [r4, #16]
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e378:	4604      	mov	r4, r0
 800e37a:	6809      	ldr	r1, [r1, #0]
 800e37c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e380:	f002 f81c 	bl	80103bc <uxr_buffer_delete_entity>
 800e384:	6937      	ldr	r7, [r6, #16]
 800e386:	4622      	mov	r2, r4
 800e388:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800e38c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800e390:	4604      	mov	r4, r0
 800e392:	4638      	mov	r0, r7
 800e394:	f000 fb22 	bl	800e9dc <run_xrce_session>
 800e398:	6936      	ldr	r6, [r6, #16]
 800e39a:	4622      	mov	r2, r4
 800e39c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e3a0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	f000 fb18 	bl	800e9dc <run_xrce_session>
 800e3ac:	b12c      	cbz	r4, 800e3ba <rmw_destroy_subscription+0xba>
 800e3ae:	b120      	cbz	r0, 800e3ba <rmw_destroy_subscription+0xba>
 800e3b0:	2400      	movs	r4, #0
 800e3b2:	4628      	mov	r0, r5
 800e3b4:	f000 f9d0 	bl	800e758 <rmw_uxrce_fini_subscription_memory>
 800e3b8:	e7ab      	b.n	800e312 <rmw_destroy_subscription+0x12>
 800e3ba:	2402      	movs	r4, #2
 800e3bc:	e7f9      	b.n	800e3b2 <rmw_destroy_subscription+0xb2>
 800e3be:	bf00      	nop

0800e3c0 <rmw_uxrce_transport_init>:
 800e3c0:	b508      	push	{r3, lr}
 800e3c2:	b108      	cbz	r0, 800e3c8 <rmw_uxrce_transport_init+0x8>
 800e3c4:	f100 0210 	add.w	r2, r0, #16
 800e3c8:	b139      	cbz	r1, 800e3da <rmw_uxrce_transport_init+0x1a>
 800e3ca:	6949      	ldr	r1, [r1, #20]
 800e3cc:	4610      	mov	r0, r2
 800e3ce:	f002 f9d9 	bl	8010784 <uxr_init_custom_transport>
 800e3d2:	f080 0001 	eor.w	r0, r0, #1
 800e3d6:	b2c0      	uxtb	r0, r0
 800e3d8:	bd08      	pop	{r3, pc}
 800e3da:	4b04      	ldr	r3, [pc, #16]	@ (800e3ec <rmw_uxrce_transport_init+0x2c>)
 800e3dc:	4610      	mov	r0, r2
 800e3de:	6859      	ldr	r1, [r3, #4]
 800e3e0:	f002 f9d0 	bl	8010784 <uxr_init_custom_transport>
 800e3e4:	f080 0001 	eor.w	r0, r0, #1
 800e3e8:	b2c0      	uxtb	r0, r0
 800e3ea:	bd08      	pop	{r3, pc}
 800e3ec:	20006604 	.word	0x20006604

0800e3f0 <rmw_uros_epoch_nanos>:
 800e3f0:	4b05      	ldr	r3, [pc, #20]	@ (800e408 <rmw_uros_epoch_nanos+0x18>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	b123      	cbz	r3, 800e400 <rmw_uros_epoch_nanos+0x10>
 800e3f6:	6898      	ldr	r0, [r3, #8]
 800e3f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e3fc:	f002 bc36 	b.w	8010c6c <uxr_epoch_nanos>
 800e400:	2000      	movs	r0, #0
 800e402:	2100      	movs	r1, #0
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop
 800e408:	2000af5c 	.word	0x2000af5c

0800e40c <rmw_uros_sync_session>:
 800e40c:	b508      	push	{r3, lr}
 800e40e:	4b07      	ldr	r3, [pc, #28]	@ (800e42c <rmw_uros_sync_session+0x20>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	b14b      	cbz	r3, 800e428 <rmw_uros_sync_session+0x1c>
 800e414:	4601      	mov	r1, r0
 800e416:	6898      	ldr	r0, [r3, #8]
 800e418:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e41c:	f003 f868 	bl	80114f0 <uxr_sync_session>
 800e420:	f080 0001 	eor.w	r0, r0, #1
 800e424:	b2c0      	uxtb	r0, r0
 800e426:	bd08      	pop	{r3, pc}
 800e428:	2001      	movs	r0, #1
 800e42a:	bd08      	pop	{r3, pc}
 800e42c:	2000af5c 	.word	0x2000af5c

0800e430 <rmw_uxrce_init_service_memory>:
 800e430:	b1e2      	cbz	r2, 800e46c <rmw_uxrce_init_service_memory+0x3c>
 800e432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e436:	7b05      	ldrb	r5, [r0, #12]
 800e438:	4606      	mov	r6, r0
 800e43a:	b9ad      	cbnz	r5, 800e468 <rmw_uxrce_init_service_memory+0x38>
 800e43c:	23c8      	movs	r3, #200	@ 0xc8
 800e43e:	e9c0 5500 	strd	r5, r5, [r0]
 800e442:	6083      	str	r3, [r0, #8]
 800e444:	f240 1301 	movw	r3, #257	@ 0x101
 800e448:	4617      	mov	r7, r2
 800e44a:	8183      	strh	r3, [r0, #12]
 800e44c:	460c      	mov	r4, r1
 800e44e:	46a8      	mov	r8, r5
 800e450:	4621      	mov	r1, r4
 800e452:	4630      	mov	r0, r6
 800e454:	3501      	adds	r5, #1
 800e456:	f008 fda3 	bl	8016fa0 <put_memory>
 800e45a:	42af      	cmp	r7, r5
 800e45c:	60a4      	str	r4, [r4, #8]
 800e45e:	f884 800c 	strb.w	r8, [r4, #12]
 800e462:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e466:	d1f3      	bne.n	800e450 <rmw_uxrce_init_service_memory+0x20>
 800e468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop

0800e470 <rmw_uxrce_init_client_memory>:
 800e470:	b1e2      	cbz	r2, 800e4ac <rmw_uxrce_init_client_memory+0x3c>
 800e472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e476:	7b05      	ldrb	r5, [r0, #12]
 800e478:	4606      	mov	r6, r0
 800e47a:	b9ad      	cbnz	r5, 800e4a8 <rmw_uxrce_init_client_memory+0x38>
 800e47c:	23c8      	movs	r3, #200	@ 0xc8
 800e47e:	e9c0 5500 	strd	r5, r5, [r0]
 800e482:	6083      	str	r3, [r0, #8]
 800e484:	f240 1301 	movw	r3, #257	@ 0x101
 800e488:	4617      	mov	r7, r2
 800e48a:	8183      	strh	r3, [r0, #12]
 800e48c:	460c      	mov	r4, r1
 800e48e:	46a8      	mov	r8, r5
 800e490:	4621      	mov	r1, r4
 800e492:	4630      	mov	r0, r6
 800e494:	3501      	adds	r5, #1
 800e496:	f008 fd83 	bl	8016fa0 <put_memory>
 800e49a:	42af      	cmp	r7, r5
 800e49c:	60a4      	str	r4, [r4, #8]
 800e49e:	f884 800c 	strb.w	r8, [r4, #12]
 800e4a2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e4a6:	d1f3      	bne.n	800e490 <rmw_uxrce_init_client_memory+0x20>
 800e4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop

0800e4b0 <rmw_uxrce_init_publisher_memory>:
 800e4b0:	b1e2      	cbz	r2, 800e4ec <rmw_uxrce_init_publisher_memory+0x3c>
 800e4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b6:	7b05      	ldrb	r5, [r0, #12]
 800e4b8:	4606      	mov	r6, r0
 800e4ba:	b9ad      	cbnz	r5, 800e4e8 <rmw_uxrce_init_publisher_memory+0x38>
 800e4bc:	23d8      	movs	r3, #216	@ 0xd8
 800e4be:	e9c0 5500 	strd	r5, r5, [r0]
 800e4c2:	6083      	str	r3, [r0, #8]
 800e4c4:	f240 1301 	movw	r3, #257	@ 0x101
 800e4c8:	4617      	mov	r7, r2
 800e4ca:	8183      	strh	r3, [r0, #12]
 800e4cc:	460c      	mov	r4, r1
 800e4ce:	46a8      	mov	r8, r5
 800e4d0:	4621      	mov	r1, r4
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	3501      	adds	r5, #1
 800e4d6:	f008 fd63 	bl	8016fa0 <put_memory>
 800e4da:	42af      	cmp	r7, r5
 800e4dc:	60a4      	str	r4, [r4, #8]
 800e4de:	f884 800c 	strb.w	r8, [r4, #12]
 800e4e2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e4e6:	d1f3      	bne.n	800e4d0 <rmw_uxrce_init_publisher_memory+0x20>
 800e4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop

0800e4f0 <rmw_uxrce_init_subscription_memory>:
 800e4f0:	b1e2      	cbz	r2, 800e52c <rmw_uxrce_init_subscription_memory+0x3c>
 800e4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f6:	7b05      	ldrb	r5, [r0, #12]
 800e4f8:	4606      	mov	r6, r0
 800e4fa:	b9ad      	cbnz	r5, 800e528 <rmw_uxrce_init_subscription_memory+0x38>
 800e4fc:	23d8      	movs	r3, #216	@ 0xd8
 800e4fe:	e9c0 5500 	strd	r5, r5, [r0]
 800e502:	6083      	str	r3, [r0, #8]
 800e504:	f240 1301 	movw	r3, #257	@ 0x101
 800e508:	4617      	mov	r7, r2
 800e50a:	8183      	strh	r3, [r0, #12]
 800e50c:	460c      	mov	r4, r1
 800e50e:	46a8      	mov	r8, r5
 800e510:	4621      	mov	r1, r4
 800e512:	4630      	mov	r0, r6
 800e514:	3501      	adds	r5, #1
 800e516:	f008 fd43 	bl	8016fa0 <put_memory>
 800e51a:	42af      	cmp	r7, r5
 800e51c:	60a4      	str	r4, [r4, #8]
 800e51e:	f884 800c 	strb.w	r8, [r4, #12]
 800e522:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e526:	d1f3      	bne.n	800e510 <rmw_uxrce_init_subscription_memory+0x20>
 800e528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop

0800e530 <rmw_uxrce_init_node_memory>:
 800e530:	b1e2      	cbz	r2, 800e56c <rmw_uxrce_init_node_memory+0x3c>
 800e532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e536:	7b05      	ldrb	r5, [r0, #12]
 800e538:	4606      	mov	r6, r0
 800e53a:	b9ad      	cbnz	r5, 800e568 <rmw_uxrce_init_node_memory+0x38>
 800e53c:	23a4      	movs	r3, #164	@ 0xa4
 800e53e:	e9c0 5500 	strd	r5, r5, [r0]
 800e542:	6083      	str	r3, [r0, #8]
 800e544:	f240 1301 	movw	r3, #257	@ 0x101
 800e548:	4617      	mov	r7, r2
 800e54a:	8183      	strh	r3, [r0, #12]
 800e54c:	460c      	mov	r4, r1
 800e54e:	46a8      	mov	r8, r5
 800e550:	4621      	mov	r1, r4
 800e552:	4630      	mov	r0, r6
 800e554:	3501      	adds	r5, #1
 800e556:	f008 fd23 	bl	8016fa0 <put_memory>
 800e55a:	42af      	cmp	r7, r5
 800e55c:	60a4      	str	r4, [r4, #8]
 800e55e:	f884 800c 	strb.w	r8, [r4, #12]
 800e562:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800e566:	d1f3      	bne.n	800e550 <rmw_uxrce_init_node_memory+0x20>
 800e568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop

0800e570 <rmw_uxrce_init_session_memory>:
 800e570:	b1ea      	cbz	r2, 800e5ae <rmw_uxrce_init_session_memory+0x3e>
 800e572:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e576:	7b05      	ldrb	r5, [r0, #12]
 800e578:	4606      	mov	r6, r0
 800e57a:	b9b5      	cbnz	r5, 800e5aa <rmw_uxrce_init_session_memory+0x3a>
 800e57c:	e9c0 5500 	strd	r5, r5, [r0]
 800e580:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800e584:	f240 1301 	movw	r3, #257	@ 0x101
 800e588:	4617      	mov	r7, r2
 800e58a:	f8c0 8008 	str.w	r8, [r0, #8]
 800e58e:	460c      	mov	r4, r1
 800e590:	8183      	strh	r3, [r0, #12]
 800e592:	46a9      	mov	r9, r5
 800e594:	4621      	mov	r1, r4
 800e596:	4630      	mov	r0, r6
 800e598:	3501      	adds	r5, #1
 800e59a:	f008 fd01 	bl	8016fa0 <put_memory>
 800e59e:	42af      	cmp	r7, r5
 800e5a0:	60a4      	str	r4, [r4, #8]
 800e5a2:	f884 900c 	strb.w	r9, [r4, #12]
 800e5a6:	4444      	add	r4, r8
 800e5a8:	d1f4      	bne.n	800e594 <rmw_uxrce_init_session_memory+0x24>
 800e5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5ae:	4770      	bx	lr

0800e5b0 <rmw_uxrce_init_topic_memory>:
 800e5b0:	b1e2      	cbz	r2, 800e5ec <rmw_uxrce_init_topic_memory+0x3c>
 800e5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b6:	7b05      	ldrb	r5, [r0, #12]
 800e5b8:	4606      	mov	r6, r0
 800e5ba:	b9ad      	cbnz	r5, 800e5e8 <rmw_uxrce_init_topic_memory+0x38>
 800e5bc:	231c      	movs	r3, #28
 800e5be:	e9c0 5500 	strd	r5, r5, [r0]
 800e5c2:	6083      	str	r3, [r0, #8]
 800e5c4:	f240 1301 	movw	r3, #257	@ 0x101
 800e5c8:	4617      	mov	r7, r2
 800e5ca:	8183      	strh	r3, [r0, #12]
 800e5cc:	460c      	mov	r4, r1
 800e5ce:	46a8      	mov	r8, r5
 800e5d0:	4621      	mov	r1, r4
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	3501      	adds	r5, #1
 800e5d6:	f008 fce3 	bl	8016fa0 <put_memory>
 800e5da:	42af      	cmp	r7, r5
 800e5dc:	60a4      	str	r4, [r4, #8]
 800e5de:	f884 800c 	strb.w	r8, [r4, #12]
 800e5e2:	f104 041c 	add.w	r4, r4, #28
 800e5e6:	d1f3      	bne.n	800e5d0 <rmw_uxrce_init_topic_memory+0x20>
 800e5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ec:	4770      	bx	lr
 800e5ee:	bf00      	nop

0800e5f0 <rmw_uxrce_init_static_input_buffer_memory>:
 800e5f0:	b1ea      	cbz	r2, 800e62e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f6:	7b05      	ldrb	r5, [r0, #12]
 800e5f8:	4606      	mov	r6, r0
 800e5fa:	b9b5      	cbnz	r5, 800e62a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e5fc:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e600:	e9c0 5500 	strd	r5, r5, [r0]
 800e604:	6083      	str	r3, [r0, #8]
 800e606:	f240 1301 	movw	r3, #257	@ 0x101
 800e60a:	4617      	mov	r7, r2
 800e60c:	8183      	strh	r3, [r0, #12]
 800e60e:	460c      	mov	r4, r1
 800e610:	46a8      	mov	r8, r5
 800e612:	4621      	mov	r1, r4
 800e614:	4630      	mov	r0, r6
 800e616:	3501      	adds	r5, #1
 800e618:	f008 fcc2 	bl	8016fa0 <put_memory>
 800e61c:	42af      	cmp	r7, r5
 800e61e:	60a4      	str	r4, [r4, #8]
 800e620:	f884 800c 	strb.w	r8, [r4, #12]
 800e624:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e628:	d1f3      	bne.n	800e612 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e62e:	4770      	bx	lr

0800e630 <rmw_uxrce_init_init_options_impl_memory>:
 800e630:	b1e2      	cbz	r2, 800e66c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e636:	7b05      	ldrb	r5, [r0, #12]
 800e638:	4606      	mov	r6, r0
 800e63a:	b9ad      	cbnz	r5, 800e668 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e63c:	232c      	movs	r3, #44	@ 0x2c
 800e63e:	e9c0 5500 	strd	r5, r5, [r0]
 800e642:	6083      	str	r3, [r0, #8]
 800e644:	f240 1301 	movw	r3, #257	@ 0x101
 800e648:	4617      	mov	r7, r2
 800e64a:	8183      	strh	r3, [r0, #12]
 800e64c:	460c      	mov	r4, r1
 800e64e:	46a8      	mov	r8, r5
 800e650:	4621      	mov	r1, r4
 800e652:	4630      	mov	r0, r6
 800e654:	3501      	adds	r5, #1
 800e656:	f008 fca3 	bl	8016fa0 <put_memory>
 800e65a:	42af      	cmp	r7, r5
 800e65c:	60a4      	str	r4, [r4, #8]
 800e65e:	f884 800c 	strb.w	r8, [r4, #12]
 800e662:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800e666:	d1f3      	bne.n	800e650 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop

0800e670 <rmw_uxrce_init_wait_set_memory>:
 800e670:	b1e2      	cbz	r2, 800e6ac <rmw_uxrce_init_wait_set_memory+0x3c>
 800e672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e676:	7b05      	ldrb	r5, [r0, #12]
 800e678:	4606      	mov	r6, r0
 800e67a:	b9ad      	cbnz	r5, 800e6a8 <rmw_uxrce_init_wait_set_memory+0x38>
 800e67c:	231c      	movs	r3, #28
 800e67e:	e9c0 5500 	strd	r5, r5, [r0]
 800e682:	6083      	str	r3, [r0, #8]
 800e684:	f240 1301 	movw	r3, #257	@ 0x101
 800e688:	4617      	mov	r7, r2
 800e68a:	8183      	strh	r3, [r0, #12]
 800e68c:	460c      	mov	r4, r1
 800e68e:	46a8      	mov	r8, r5
 800e690:	4621      	mov	r1, r4
 800e692:	4630      	mov	r0, r6
 800e694:	3501      	adds	r5, #1
 800e696:	f008 fc83 	bl	8016fa0 <put_memory>
 800e69a:	42af      	cmp	r7, r5
 800e69c:	60a4      	str	r4, [r4, #8]
 800e69e:	f884 800c 	strb.w	r8, [r4, #12]
 800e6a2:	f104 041c 	add.w	r4, r4, #28
 800e6a6:	d1f3      	bne.n	800e690 <rmw_uxrce_init_wait_set_memory+0x20>
 800e6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop

0800e6b0 <rmw_uxrce_init_guard_condition_memory>:
 800e6b0:	b1e2      	cbz	r2, 800e6ec <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b6:	7b05      	ldrb	r5, [r0, #12]
 800e6b8:	4606      	mov	r6, r0
 800e6ba:	b9ad      	cbnz	r5, 800e6e8 <rmw_uxrce_init_guard_condition_memory+0x38>
 800e6bc:	2320      	movs	r3, #32
 800e6be:	e9c0 5500 	strd	r5, r5, [r0]
 800e6c2:	6083      	str	r3, [r0, #8]
 800e6c4:	f240 1301 	movw	r3, #257	@ 0x101
 800e6c8:	4617      	mov	r7, r2
 800e6ca:	8183      	strh	r3, [r0, #12]
 800e6cc:	460c      	mov	r4, r1
 800e6ce:	46a8      	mov	r8, r5
 800e6d0:	4621      	mov	r1, r4
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	3501      	adds	r5, #1
 800e6d6:	f008 fc63 	bl	8016fa0 <put_memory>
 800e6da:	42af      	cmp	r7, r5
 800e6dc:	60a4      	str	r4, [r4, #8]
 800e6de:	f884 800c 	strb.w	r8, [r4, #12]
 800e6e2:	f104 0420 	add.w	r4, r4, #32
 800e6e6:	d1f3      	bne.n	800e6d0 <rmw_uxrce_init_guard_condition_memory+0x20>
 800e6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop

0800e6f0 <rmw_uxrce_fini_session_memory>:
 800e6f0:	4601      	mov	r1, r0
 800e6f2:	4801      	ldr	r0, [pc, #4]	@ (800e6f8 <rmw_uxrce_fini_session_memory+0x8>)
 800e6f4:	f008 bc54 	b.w	8016fa0 <put_memory>
 800e6f8:	2000af5c 	.word	0x2000af5c

0800e6fc <rmw_uxrce_fini_node_memory>:
 800e6fc:	b538      	push	{r3, r4, r5, lr}
 800e6fe:	4604      	mov	r4, r0
 800e700:	6800      	ldr	r0, [r0, #0]
 800e702:	b128      	cbz	r0, 800e710 <rmw_uxrce_fini_node_memory+0x14>
 800e704:	4b07      	ldr	r3, [pc, #28]	@ (800e724 <rmw_uxrce_fini_node_memory+0x28>)
 800e706:	6819      	ldr	r1, [r3, #0]
 800e708:	f7f1 fd8a 	bl	8000220 <strcmp>
 800e70c:	b940      	cbnz	r0, 800e720 <rmw_uxrce_fini_node_memory+0x24>
 800e70e:	6020      	str	r0, [r4, #0]
 800e710:	6861      	ldr	r1, [r4, #4]
 800e712:	b129      	cbz	r1, 800e720 <rmw_uxrce_fini_node_memory+0x24>
 800e714:	2500      	movs	r5, #0
 800e716:	4804      	ldr	r0, [pc, #16]	@ (800e728 <rmw_uxrce_fini_node_memory+0x2c>)
 800e718:	610d      	str	r5, [r1, #16]
 800e71a:	f008 fc41 	bl	8016fa0 <put_memory>
 800e71e:	6065      	str	r5, [r4, #4]
 800e720:	bd38      	pop	{r3, r4, r5, pc}
 800e722:	bf00      	nop
 800e724:	0801b650 	.word	0x0801b650
 800e728:	2000af2c 	.word	0x2000af2c

0800e72c <rmw_uxrce_fini_publisher_memory>:
 800e72c:	b510      	push	{r4, lr}
 800e72e:	4604      	mov	r4, r0
 800e730:	6800      	ldr	r0, [r0, #0]
 800e732:	b128      	cbz	r0, 800e740 <rmw_uxrce_fini_publisher_memory+0x14>
 800e734:	4b06      	ldr	r3, [pc, #24]	@ (800e750 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e736:	6819      	ldr	r1, [r3, #0]
 800e738:	f7f1 fd72 	bl	8000220 <strcmp>
 800e73c:	b938      	cbnz	r0, 800e74e <rmw_uxrce_fini_publisher_memory+0x22>
 800e73e:	6020      	str	r0, [r4, #0]
 800e740:	6861      	ldr	r1, [r4, #4]
 800e742:	b121      	cbz	r1, 800e74e <rmw_uxrce_fini_publisher_memory+0x22>
 800e744:	4803      	ldr	r0, [pc, #12]	@ (800e754 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e746:	f008 fc2b 	bl	8016fa0 <put_memory>
 800e74a:	2300      	movs	r3, #0
 800e74c:	6063      	str	r3, [r4, #4]
 800e74e:	bd10      	pop	{r4, pc}
 800e750:	0801b650 	.word	0x0801b650
 800e754:	2000af3c 	.word	0x2000af3c

0800e758 <rmw_uxrce_fini_subscription_memory>:
 800e758:	b510      	push	{r4, lr}
 800e75a:	4604      	mov	r4, r0
 800e75c:	6800      	ldr	r0, [r0, #0]
 800e75e:	b128      	cbz	r0, 800e76c <rmw_uxrce_fini_subscription_memory+0x14>
 800e760:	4b06      	ldr	r3, [pc, #24]	@ (800e77c <rmw_uxrce_fini_subscription_memory+0x24>)
 800e762:	6819      	ldr	r1, [r3, #0]
 800e764:	f7f1 fd5c 	bl	8000220 <strcmp>
 800e768:	b938      	cbnz	r0, 800e77a <rmw_uxrce_fini_subscription_memory+0x22>
 800e76a:	6020      	str	r0, [r4, #0]
 800e76c:	6861      	ldr	r1, [r4, #4]
 800e76e:	b121      	cbz	r1, 800e77a <rmw_uxrce_fini_subscription_memory+0x22>
 800e770:	4803      	ldr	r0, [pc, #12]	@ (800e780 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e772:	f008 fc15 	bl	8016fa0 <put_memory>
 800e776:	2300      	movs	r3, #0
 800e778:	6063      	str	r3, [r4, #4]
 800e77a:	bd10      	pop	{r4, pc}
 800e77c:	0801b650 	.word	0x0801b650
 800e780:	2000af7c 	.word	0x2000af7c

0800e784 <rmw_uxrce_fini_service_memory>:
 800e784:	b510      	push	{r4, lr}
 800e786:	4604      	mov	r4, r0
 800e788:	6800      	ldr	r0, [r0, #0]
 800e78a:	b128      	cbz	r0, 800e798 <rmw_uxrce_fini_service_memory+0x14>
 800e78c:	4b06      	ldr	r3, [pc, #24]	@ (800e7a8 <rmw_uxrce_fini_service_memory+0x24>)
 800e78e:	6819      	ldr	r1, [r3, #0]
 800e790:	f7f1 fd46 	bl	8000220 <strcmp>
 800e794:	b938      	cbnz	r0, 800e7a6 <rmw_uxrce_fini_service_memory+0x22>
 800e796:	6020      	str	r0, [r4, #0]
 800e798:	6861      	ldr	r1, [r4, #4]
 800e79a:	b121      	cbz	r1, 800e7a6 <rmw_uxrce_fini_service_memory+0x22>
 800e79c:	4803      	ldr	r0, [pc, #12]	@ (800e7ac <rmw_uxrce_fini_service_memory+0x28>)
 800e79e:	f008 fbff 	bl	8016fa0 <put_memory>
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	6063      	str	r3, [r4, #4]
 800e7a6:	bd10      	pop	{r4, pc}
 800e7a8:	0801b650 	.word	0x0801b650
 800e7ac:	2000af4c 	.word	0x2000af4c

0800e7b0 <rmw_uxrce_fini_client_memory>:
 800e7b0:	b510      	push	{r4, lr}
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	6800      	ldr	r0, [r0, #0]
 800e7b6:	b128      	cbz	r0, 800e7c4 <rmw_uxrce_fini_client_memory+0x14>
 800e7b8:	4b06      	ldr	r3, [pc, #24]	@ (800e7d4 <rmw_uxrce_fini_client_memory+0x24>)
 800e7ba:	6819      	ldr	r1, [r3, #0]
 800e7bc:	f7f1 fd30 	bl	8000220 <strcmp>
 800e7c0:	b938      	cbnz	r0, 800e7d2 <rmw_uxrce_fini_client_memory+0x22>
 800e7c2:	6020      	str	r0, [r4, #0]
 800e7c4:	6861      	ldr	r1, [r4, #4]
 800e7c6:	b121      	cbz	r1, 800e7d2 <rmw_uxrce_fini_client_memory+0x22>
 800e7c8:	4803      	ldr	r0, [pc, #12]	@ (800e7d8 <rmw_uxrce_fini_client_memory+0x28>)
 800e7ca:	f008 fbe9 	bl	8016fa0 <put_memory>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	6063      	str	r3, [r4, #4]
 800e7d2:	bd10      	pop	{r4, pc}
 800e7d4:	0801b650 	.word	0x0801b650
 800e7d8:	2000665c 	.word	0x2000665c

0800e7dc <rmw_uxrce_fini_topic_memory>:
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	4604      	mov	r4, r0
 800e7e0:	4621      	mov	r1, r4
 800e7e2:	4803      	ldr	r0, [pc, #12]	@ (800e7f0 <rmw_uxrce_fini_topic_memory+0x14>)
 800e7e4:	f008 fbdc 	bl	8016fa0 <put_memory>
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	61a3      	str	r3, [r4, #24]
 800e7ec:	bd10      	pop	{r4, pc}
 800e7ee:	bf00      	nop
 800e7f0:	2000af8c 	.word	0x2000af8c

0800e7f4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e7f4:	b082      	sub	sp, #8
 800e7f6:	b530      	push	{r4, r5, lr}
 800e7f8:	4925      	ldr	r1, [pc, #148]	@ (800e890 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e7fa:	680d      	ldr	r5, [r1, #0]
 800e7fc:	ac03      	add	r4, sp, #12
 800e7fe:	e884 000c 	stmia.w	r4, {r2, r3}
 800e802:	461c      	mov	r4, r3
 800e804:	2d00      	cmp	r5, #0
 800e806:	d041      	beq.n	800e88c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800e808:	462b      	mov	r3, r5
 800e80a:	2100      	movs	r1, #0
 800e80c:	689a      	ldr	r2, [r3, #8]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800e814:	4290      	cmp	r0, r2
 800e816:	bf08      	it	eq
 800e818:	3101      	addeq	r1, #1
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d1f6      	bne.n	800e80c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e81e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e822:	2b02      	cmp	r3, #2
 800e824:	d029      	beq.n	800e87a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e826:	d907      	bls.n	800e838 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e828:	2b03      	cmp	r3, #3
 800e82a:	d005      	beq.n	800e838 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e82c:	2100      	movs	r1, #0
 800e82e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e832:	4608      	mov	r0, r1
 800e834:	b002      	add	sp, #8
 800e836:	4770      	bx	lr
 800e838:	b314      	cbz	r4, 800e880 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e83a:	428c      	cmp	r4, r1
 800e83c:	d820      	bhi.n	800e880 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e83e:	2d00      	cmp	r5, #0
 800e840:	d0f4      	beq.n	800e82c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e842:	2100      	movs	r1, #0
 800e844:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800e848:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e84c:	e002      	b.n	800e854 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800e84e:	686d      	ldr	r5, [r5, #4]
 800e850:	2d00      	cmp	r5, #0
 800e852:	d0ec      	beq.n	800e82e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e854:	68ab      	ldr	r3, [r5, #8]
 800e856:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e85a:	4290      	cmp	r0, r2
 800e85c:	d1f7      	bne.n	800e84e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e85e:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e862:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e866:	4562      	cmp	r2, ip
 800e868:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e86c:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e870:	daed      	bge.n	800e84e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e872:	4694      	mov	ip, r2
 800e874:	461c      	mov	r4, r3
 800e876:	4629      	mov	r1, r5
 800e878:	e7e9      	b.n	800e84e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e87a:	b10c      	cbz	r4, 800e880 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e87c:	428c      	cmp	r4, r1
 800e87e:	d9d5      	bls.n	800e82c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e884:	4802      	ldr	r0, [pc, #8]	@ (800e890 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e886:	b002      	add	sp, #8
 800e888:	f008 bb7a 	b.w	8016f80 <get_memory>
 800e88c:	4629      	mov	r1, r5
 800e88e:	e7c6      	b.n	800e81e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e890:	2000af6c 	.word	0x2000af6c

0800e894 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e894:	4b11      	ldr	r3, [pc, #68]	@ (800e8dc <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	b530      	push	{r4, r5, lr}
 800e89a:	b1e3      	cbz	r3, 800e8d6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e89c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800e8a0:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e8a4:	2400      	movs	r4, #0
 800e8a6:	e001      	b.n	800e8ac <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	b193      	cbz	r3, 800e8d2 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800e8ac:	689a      	ldr	r2, [r3, #8]
 800e8ae:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e8b2:	4288      	cmp	r0, r1
 800e8b4:	d1f8      	bne.n	800e8a8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e8b6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e8ba:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e8be:	4571      	cmp	r1, lr
 800e8c0:	eb72 050c 	sbcs.w	r5, r2, ip
 800e8c4:	daf0      	bge.n	800e8a8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e8c6:	461c      	mov	r4, r3
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	468e      	mov	lr, r1
 800e8cc:	4694      	mov	ip, r2
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d1ec      	bne.n	800e8ac <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	bd30      	pop	{r4, r5, pc}
 800e8d6:	461c      	mov	r4, r3
 800e8d8:	4620      	mov	r0, r4
 800e8da:	bd30      	pop	{r4, r5, pc}
 800e8dc:	2000af6c 	.word	0x2000af6c

0800e8e0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e4:	4b3c      	ldr	r3, [pc, #240]	@ (800e9d8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e8e6:	ed2d 8b06 	vpush	{d8-d10}
 800e8ea:	681f      	ldr	r7, [r3, #0]
 800e8ec:	b08d      	sub	sp, #52	@ 0x34
 800e8ee:	f7ff fd7f 	bl	800e3f0 <rmw_uros_epoch_nanos>
 800e8f2:	2f00      	cmp	r7, #0
 800e8f4:	d05d      	beq.n	800e9b2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e8f6:	46b8      	mov	r8, r7
 800e8f8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800e9c0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e8fc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e900:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e904:	2b04      	cmp	r3, #4
 800e906:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800e9c8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e90a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800e9d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e90e:	4681      	mov	r9, r0
 800e910:	468a      	mov	sl, r1
 800e912:	ac04      	add	r4, sp, #16
 800e914:	d03f      	beq.n	800e996 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e916:	2b05      	cmp	r3, #5
 800e918:	d044      	beq.n	800e9a4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e91a:	2b03      	cmp	r3, #3
 800e91c:	d03b      	beq.n	800e996 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e91e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e922:	ed8d ab06 	vstr	d10, [sp, #24]
 800e926:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e92a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e92e:	ab08      	add	r3, sp, #32
 800e930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e932:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e936:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e93a:	f008 f86d 	bl	8016a18 <rmw_time_equal>
 800e93e:	b118      	cbz	r0, 800e948 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e940:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e944:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e948:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e94c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800e950:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800e954:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e958:	f008 f8b2 	bl	8016ac0 <rmw_time_total_nsec>
 800e95c:	1830      	adds	r0, r6, r0
 800e95e:	eb47 0101 	adc.w	r1, r7, r1
 800e962:	4548      	cmp	r0, r9
 800e964:	eb71 030a 	sbcs.w	r3, r1, sl
 800e968:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e96c:	db05      	blt.n	800e97a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e96e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e972:	4591      	cmp	r9, r2
 800e974:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e978:	da03      	bge.n	800e982 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e97a:	4817      	ldr	r0, [pc, #92]	@ (800e9d8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e97c:	4641      	mov	r1, r8
 800e97e:	f008 fb0f 	bl	8016fa0 <put_memory>
 800e982:	f1bb 0f00 	cmp.w	fp, #0
 800e986:	d014      	beq.n	800e9b2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e988:	46d8      	mov	r8, fp
 800e98a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e98e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e992:	2b04      	cmp	r3, #4
 800e994:	d1bf      	bne.n	800e916 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e996:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e99a:	3340      	adds	r3, #64	@ 0x40
 800e99c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e99e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e9a2:	e7c0      	b.n	800e926 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e9a4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e9a8:	3348      	adds	r3, #72	@ 0x48
 800e9aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e9ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e9b0:	e7b9      	b.n	800e926 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e9b2:	b00d      	add	sp, #52	@ 0x34
 800e9b4:	ecbd 8b06 	vpop	{d8-d10}
 800e9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9bc:	f3af 8000 	nop.w
	...
 800e9c8:	00000001 	.word	0x00000001
 800e9cc:	00000000 	.word	0x00000000
 800e9d0:	0000001e 	.word	0x0000001e
 800e9d4:	00000000 	.word	0x00000000
 800e9d8:	2000af6c 	.word	0x2000af6c

0800e9dc <run_xrce_session>:
 800e9dc:	b510      	push	{r4, lr}
 800e9de:	788c      	ldrb	r4, [r1, #2]
 800e9e0:	b086      	sub	sp, #24
 800e9e2:	2c01      	cmp	r4, #1
 800e9e4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e9e8:	d00c      	beq.n	800ea04 <run_xrce_session+0x28>
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	f10d 020e 	add.w	r2, sp, #14
 800e9f4:	f10d 0317 	add.w	r3, sp, #23
 800e9f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e9fc:	f002 fd26 	bl	801144c <uxr_run_session_until_all_status>
 800ea00:	b006      	add	sp, #24
 800ea02:	bd10      	pop	{r4, pc}
 800ea04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea08:	f002 f93a 	bl	8010c80 <uxr_flash_output_streams>
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	b006      	add	sp, #24
 800ea10:	bd10      	pop	{r4, pc}
 800ea12:	bf00      	nop

0800ea14 <convert_qos_profile>:
 800ea14:	7a4a      	ldrb	r2, [r1, #9]
 800ea16:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ea1a:	2a02      	cmp	r2, #2
 800ea1c:	bf18      	it	ne
 800ea1e:	2200      	movne	r2, #0
 800ea20:	7002      	strb	r2, [r0, #0]
 800ea22:	780a      	ldrb	r2, [r1, #0]
 800ea24:	8889      	ldrh	r1, [r1, #4]
 800ea26:	8081      	strh	r1, [r0, #4]
 800ea28:	f1ac 0c02 	sub.w	ip, ip, #2
 800ea2c:	f1a2 0202 	sub.w	r2, r2, #2
 800ea30:	fabc fc8c 	clz	ip, ip
 800ea34:	fab2 f282 	clz	r2, r2
 800ea38:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ea3c:	0952      	lsrs	r2, r2, #5
 800ea3e:	f880 c001 	strb.w	ip, [r0, #1]
 800ea42:	7082      	strb	r2, [r0, #2]
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop

0800ea48 <generate_type_name>:
 800ea48:	b530      	push	{r4, r5, lr}
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	700b      	strb	r3, [r1, #0]
 800ea4e:	6803      	ldr	r3, [r0, #0]
 800ea50:	b087      	sub	sp, #28
 800ea52:	4614      	mov	r4, r2
 800ea54:	b1d3      	cbz	r3, 800ea8c <generate_type_name+0x44>
 800ea56:	4a0f      	ldr	r2, [pc, #60]	@ (800ea94 <generate_type_name+0x4c>)
 800ea58:	4615      	mov	r5, r2
 800ea5a:	9203      	str	r2, [sp, #12]
 800ea5c:	9500      	str	r5, [sp, #0]
 800ea5e:	6842      	ldr	r2, [r0, #4]
 800ea60:	480d      	ldr	r0, [pc, #52]	@ (800ea98 <generate_type_name+0x50>)
 800ea62:	9001      	str	r0, [sp, #4]
 800ea64:	4608      	mov	r0, r1
 800ea66:	490d      	ldr	r1, [pc, #52]	@ (800ea9c <generate_type_name+0x54>)
 800ea68:	9204      	str	r2, [sp, #16]
 800ea6a:	9105      	str	r1, [sp, #20]
 800ea6c:	9102      	str	r1, [sp, #8]
 800ea6e:	4a0c      	ldr	r2, [pc, #48]	@ (800eaa0 <generate_type_name+0x58>)
 800ea70:	4621      	mov	r1, r4
 800ea72:	f00a ff51 	bl	8019918 <sniprintf>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	db05      	blt.n	800ea86 <generate_type_name+0x3e>
 800ea7a:	4284      	cmp	r4, r0
 800ea7c:	bfd4      	ite	le
 800ea7e:	2000      	movle	r0, #0
 800ea80:	2001      	movgt	r0, #1
 800ea82:	b007      	add	sp, #28
 800ea84:	bd30      	pop	{r4, r5, pc}
 800ea86:	2000      	movs	r0, #0
 800ea88:	b007      	add	sp, #28
 800ea8a:	bd30      	pop	{r4, r5, pc}
 800ea8c:	4b05      	ldr	r3, [pc, #20]	@ (800eaa4 <generate_type_name+0x5c>)
 800ea8e:	4a01      	ldr	r2, [pc, #4]	@ (800ea94 <generate_type_name+0x4c>)
 800ea90:	461d      	mov	r5, r3
 800ea92:	e7e2      	b.n	800ea5a <generate_type_name+0x12>
 800ea94:	0801ac8c 	.word	0x0801ac8c
 800ea98:	0801aca4 	.word	0x0801aca4
 800ea9c:	0801aca0 	.word	0x0801aca0
 800eaa0:	0801ac90 	.word	0x0801ac90
 800eaa4:	0801b21c 	.word	0x0801b21c

0800eaa8 <generate_topic_name>:
 800eaa8:	b510      	push	{r4, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	4614      	mov	r4, r2
 800eaae:	9000      	str	r0, [sp, #0]
 800eab0:	4b08      	ldr	r3, [pc, #32]	@ (800ead4 <generate_topic_name+0x2c>)
 800eab2:	4a09      	ldr	r2, [pc, #36]	@ (800ead8 <generate_topic_name+0x30>)
 800eab4:	4608      	mov	r0, r1
 800eab6:	4621      	mov	r1, r4
 800eab8:	f00a ff2e 	bl	8019918 <sniprintf>
 800eabc:	2800      	cmp	r0, #0
 800eabe:	db05      	blt.n	800eacc <generate_topic_name+0x24>
 800eac0:	4284      	cmp	r4, r0
 800eac2:	bfd4      	ite	le
 800eac4:	2000      	movle	r0, #0
 800eac6:	2001      	movgt	r0, #1
 800eac8:	b002      	add	sp, #8
 800eaca:	bd10      	pop	{r4, pc}
 800eacc:	2000      	movs	r0, #0
 800eace:	b002      	add	sp, #8
 800ead0:	bd10      	pop	{r4, pc}
 800ead2:	bf00      	nop
 800ead4:	0801b2c4 	.word	0x0801b2c4
 800ead8:	0801aca8 	.word	0x0801aca8

0800eadc <is_uxrce_rmw_identifier_valid>:
 800eadc:	b510      	push	{r4, lr}
 800eade:	4604      	mov	r4, r0
 800eae0:	b140      	cbz	r0, 800eaf4 <is_uxrce_rmw_identifier_valid+0x18>
 800eae2:	f008 fab5 	bl	8017050 <rmw_get_implementation_identifier>
 800eae6:	4601      	mov	r1, r0
 800eae8:	4620      	mov	r0, r4
 800eaea:	f7f1 fb99 	bl	8000220 <strcmp>
 800eaee:	fab0 f080 	clz	r0, r0
 800eaf2:	0940      	lsrs	r0, r0, #5
 800eaf4:	bd10      	pop	{r4, pc}
 800eaf6:	bf00      	nop

0800eaf8 <get_message_typesupport_handle>:
 800eaf8:	6883      	ldr	r3, [r0, #8]
 800eafa:	4718      	bx	r3

0800eafc <get_message_typesupport_handle_function>:
 800eafc:	b510      	push	{r4, lr}
 800eafe:	4604      	mov	r4, r0
 800eb00:	6800      	ldr	r0, [r0, #0]
 800eb02:	f7f1 fb8d 	bl	8000220 <strcmp>
 800eb06:	2800      	cmp	r0, #0
 800eb08:	bf0c      	ite	eq
 800eb0a:	4620      	moveq	r0, r4
 800eb0c:	2000      	movne	r0, #0
 800eb0e:	bd10      	pop	{r4, pc}

0800eb10 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800eb10:	4b04      	ldr	r3, [pc, #16]	@ (800eb24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	b10a      	cbz	r2, 800eb1a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xa>
 800eb16:	4803      	ldr	r0, [pc, #12]	@ (800eb24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800eb18:	4770      	bx	lr
 800eb1a:	4a03      	ldr	r2, [pc, #12]	@ (800eb28 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x18>)
 800eb1c:	4801      	ldr	r0, [pc, #4]	@ (800eb24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800eb1e:	6812      	ldr	r2, [r2, #0]
 800eb20:	601a      	str	r2, [r3, #0]
 800eb22:	4770      	bx	lr
 800eb24:	20000064 	.word	0x20000064
 800eb28:	200001c8 	.word	0x200001c8

0800eb2c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800eb2c:	4a02      	ldr	r2, [pc, #8]	@ (800eb38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xc>)
 800eb2e:	4b03      	ldr	r3, [pc, #12]	@ (800eb3c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x10>)
 800eb30:	6812      	ldr	r2, [r2, #0]
 800eb32:	601a      	str	r2, [r3, #0]
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	200001c8 	.word	0x200001c8
 800eb3c:	20000064 	.word	0x20000064

0800eb40 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 800eb40:	6840      	ldr	r0, [r0, #4]
 800eb42:	4770      	bx	lr

0800eb44 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 800eb44:	6800      	ldr	r0, [r0, #0]
 800eb46:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800eb4a:	4770      	bx	lr

0800eb4c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 800eb4c:	6803      	ldr	r3, [r0, #0]
 800eb4e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800eb52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb56:	e9c2 0100 	strd	r0, r1, [r2]
 800eb5a:	4770      	bx	lr

0800eb5c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 800eb5c:	6803      	ldr	r3, [r0, #0]
 800eb5e:	ed92 7b00 	vldr	d7, [r2]
 800eb62:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800eb66:	ed81 7b00 	vstr	d7, [r1]
 800eb6a:	4770      	bx	lr

0800eb6c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 800eb6c:	f008 be7e 	b.w	801786c <std_msgs__msg__Float64MultiArray__init>

0800eb70 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 800eb70:	f008 bea0 	b.w	80178b4 <std_msgs__msg__Float64MultiArray__fini>

0800eb74 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 800eb74:	b510      	push	{r4, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	4604      	mov	r4, r0
 800eb7a:	9101      	str	r1, [sp, #4]
 800eb7c:	f008 fe34 	bl	80177e8 <rosidl_runtime_c__double__Sequence__fini>
 800eb80:	9901      	ldr	r1, [sp, #4]
 800eb82:	4620      	mov	r0, r4
 800eb84:	b002      	add	sp, #8
 800eb86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb8a:	f008 be15 	b.w	80177b8 <rosidl_runtime_c__double__Sequence__init>
 800eb8e:	bf00      	nop

0800eb90 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 800eb90:	6800      	ldr	r0, [r0, #0]
 800eb92:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800eb96:	4770      	bx	lr

0800eb98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800eb98:	b508      	push	{r3, lr}
 800eb9a:	f000 f857 	bl	800ec4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800eb9e:	4b06      	ldr	r3, [pc, #24]	@ (800ebb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800eba0:	4906      	ldr	r1, [pc, #24]	@ (800ebbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	60c8      	str	r0, [r1, #12]
 800eba6:	b10a      	cbz	r2, 800ebac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 800eba8:	4803      	ldr	r0, [pc, #12]	@ (800ebb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800ebaa:	bd08      	pop	{r3, pc}
 800ebac:	4a04      	ldr	r2, [pc, #16]	@ (800ebc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 800ebae:	4802      	ldr	r0, [pc, #8]	@ (800ebb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800ebb0:	6812      	ldr	r2, [r2, #0]
 800ebb2:	601a      	str	r2, [r3, #0]
 800ebb4:	bd08      	pop	{r3, pc}
 800ebb6:	bf00      	nop
 800ebb8:	200000e8 	.word	0x200000e8
 800ebbc:	20000070 	.word	0x20000070
 800ebc0:	200001cc 	.word	0x200001cc

0800ebc4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800ebc4:	6840      	ldr	r0, [r0, #4]
 800ebc6:	4770      	bx	lr

0800ebc8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800ebc8:	6800      	ldr	r0, [r0, #0]
 800ebca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ebce:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ebd2:	4770      	bx	lr

0800ebd4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800ebd4:	6803      	ldr	r3, [r0, #0]
 800ebd6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ebda:	b500      	push	{lr}
 800ebdc:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800ebe0:	4694      	mov	ip, r2
 800ebe2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ebe6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebea:	f8de 3000 	ldr.w	r3, [lr]
 800ebee:	f8cc 3000 	str.w	r3, [ip]
 800ebf2:	f85d fb04 	ldr.w	pc, [sp], #4
 800ebf6:	bf00      	nop

0800ebf8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800ebf8:	6803      	ldr	r3, [r0, #0]
 800ebfa:	b500      	push	{lr}
 800ebfc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ec00:	4696      	mov	lr, r2
 800ec02:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800ec06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec0e:	f8de 3000 	ldr.w	r3, [lr]
 800ec12:	f8cc 3000 	str.w	r3, [ip]
 800ec16:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec1a:	bf00      	nop

0800ec1c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800ec1c:	f008 bee0 	b.w	80179e0 <std_msgs__msg__MultiArrayLayout__init>

0800ec20 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800ec20:	f008 bef0 	b.w	8017a04 <std_msgs__msg__MultiArrayLayout__fini>

0800ec24 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800ec24:	b510      	push	{r4, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	4604      	mov	r4, r0
 800ec2a:	9101      	str	r1, [sp, #4]
 800ec2c:	f008 feb0 	bl	8017990 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800ec30:	9901      	ldr	r1, [sp, #4]
 800ec32:	4620      	mov	r0, r4
 800ec34:	b002      	add	sp, #8
 800ec36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec3a:	f008 bea5 	b.w	8017988 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800ec3e:	bf00      	nop

0800ec40 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800ec40:	6800      	ldr	r0, [r0, #0]
 800ec42:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ec46:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ec4a:	4770      	bx	lr

0800ec4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800ec4c:	b508      	push	{r3, lr}
 800ec4e:	f008 fee1 	bl	8017a14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800ec52:	4b06      	ldr	r3, [pc, #24]	@ (800ec6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800ec54:	4906      	ldr	r1, [pc, #24]	@ (800ec70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	60c8      	str	r0, [r1, #12]
 800ec5a:	b10a      	cbz	r2, 800ec60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800ec5c:	4803      	ldr	r0, [pc, #12]	@ (800ec6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800ec5e:	bd08      	pop	{r3, pc}
 800ec60:	4a04      	ldr	r2, [pc, #16]	@ (800ec74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800ec62:	4802      	ldr	r0, [pc, #8]	@ (800ec6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800ec64:	6812      	ldr	r2, [r2, #0]
 800ec66:	601a      	str	r2, [r3, #0]
 800ec68:	bd08      	pop	{r3, pc}
 800ec6a:	bf00      	nop
 800ec6c:	2000016c 	.word	0x2000016c
 800ec70:	200000f4 	.word	0x200000f4
 800ec74:	200001cc 	.word	0x200001cc

0800ec78 <_Float64MultiArray__max_serialized_size>:
 800ec78:	b500      	push	{lr}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	2100      	movs	r1, #0
 800ec80:	f10d 0007 	add.w	r0, sp, #7
 800ec84:	f88d 3007 	strb.w	r3, [sp, #7]
 800ec88:	f000 f91c 	bl	800eec4 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800ec8c:	b003      	add	sp, #12
 800ec8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec92:	bf00      	nop

0800ec94 <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 800ec94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec96:	4604      	mov	r4, r0
 800ec98:	b160      	cbz	r0, 800ecb4 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 800ec9a:	460d      	mov	r5, r1
 800ec9c:	f000 f8b6 	bl	800ee0c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800eca0:	182e      	adds	r6, r5, r0
 800eca2:	4630      	mov	r0, r6
 800eca4:	2104      	movs	r1, #4
 800eca6:	6967      	ldr	r7, [r4, #20]
 800eca8:	f001 fa98 	bl	80101dc <ucdr_alignment>
 800ecac:	1d03      	adds	r3, r0, #4
 800ecae:	441e      	add	r6, r3
 800ecb0:	b90f      	cbnz	r7, 800ecb6 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 800ecb2:	1b70      	subs	r0, r6, r5
 800ecb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	2108      	movs	r1, #8
 800ecba:	f001 fa8f 	bl	80101dc <ucdr_alignment>
 800ecbe:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800ecc2:	181e      	adds	r6, r3, r0
 800ecc4:	1b70      	subs	r0, r6, r5
 800ecc6:	e7f5      	b.n	800ecb4 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

0800ecc8 <_Float64MultiArray__cdr_deserialize>:
 800ecc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecca:	460c      	mov	r4, r1
 800eccc:	b083      	sub	sp, #12
 800ecce:	b1d1      	cbz	r1, 800ed06 <_Float64MultiArray__cdr_deserialize+0x3e>
 800ecd0:	4606      	mov	r6, r0
 800ecd2:	f000 f901 	bl	800eed8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800ecd6:	6843      	ldr	r3, [r0, #4]
 800ecd8:	4621      	mov	r1, r4
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	4630      	mov	r0, r6
 800ecde:	4798      	blx	r3
 800ece0:	69a7      	ldr	r7, [r4, #24]
 800ece2:	6921      	ldr	r1, [r4, #16]
 800ece4:	ab01      	add	r3, sp, #4
 800ece6:	463a      	mov	r2, r7
 800ece8:	4630      	mov	r0, r6
 800ecea:	f001 fb4d 	bl	8010388 <ucdr_deserialize_sequence_double>
 800ecee:	9b01      	ldr	r3, [sp, #4]
 800ecf0:	4605      	mov	r5, r0
 800ecf2:	b920      	cbnz	r0, 800ecfe <_Float64MultiArray__cdr_deserialize+0x36>
 800ecf4:	429f      	cmp	r7, r3
 800ecf6:	d30a      	bcc.n	800ed0e <_Float64MultiArray__cdr_deserialize+0x46>
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	b003      	add	sp, #12
 800ecfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecfe:	4628      	mov	r0, r5
 800ed00:	6163      	str	r3, [r4, #20]
 800ed02:	b003      	add	sp, #12
 800ed04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed06:	460d      	mov	r5, r1
 800ed08:	4628      	mov	r0, r5
 800ed0a:	b003      	add	sp, #12
 800ed0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed0e:	2301      	movs	r3, #1
 800ed10:	75b0      	strb	r0, [r6, #22]
 800ed12:	7573      	strb	r3, [r6, #21]
 800ed14:	4630      	mov	r0, r6
 800ed16:	6165      	str	r5, [r4, #20]
 800ed18:	2108      	movs	r1, #8
 800ed1a:	f001 fa75 	bl	8010208 <ucdr_align_to>
 800ed1e:	9901      	ldr	r1, [sp, #4]
 800ed20:	4630      	mov	r0, r6
 800ed22:	00c9      	lsls	r1, r1, #3
 800ed24:	f001 faa6 	bl	8010274 <ucdr_advance_buffer>
 800ed28:	4628      	mov	r0, r5
 800ed2a:	b003      	add	sp, #12
 800ed2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed2e:	bf00      	nop

0800ed30 <_Float64MultiArray__cdr_serialize>:
 800ed30:	b180      	cbz	r0, 800ed54 <_Float64MultiArray__cdr_serialize+0x24>
 800ed32:	b538      	push	{r3, r4, r5, lr}
 800ed34:	460d      	mov	r5, r1
 800ed36:	4604      	mov	r4, r0
 800ed38:	f000 f8ce 	bl	800eed8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800ed3c:	6843      	ldr	r3, [r0, #4]
 800ed3e:	4629      	mov	r1, r5
 800ed40:	689b      	ldr	r3, [r3, #8]
 800ed42:	4620      	mov	r0, r4
 800ed44:	4798      	blx	r3
 800ed46:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed50:	f001 bb08 	b.w	8010364 <ucdr_serialize_sequence_double>
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop

0800ed58 <_Float64MultiArray__get_serialized_size>:
 800ed58:	b570      	push	{r4, r5, r6, lr}
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	b150      	cbz	r0, 800ed74 <_Float64MultiArray__get_serialized_size+0x1c>
 800ed5e:	2100      	movs	r1, #0
 800ed60:	f000 f854 	bl	800ee0c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800ed64:	2104      	movs	r1, #4
 800ed66:	6966      	ldr	r6, [r4, #20]
 800ed68:	4605      	mov	r5, r0
 800ed6a:	f001 fa37 	bl	80101dc <ucdr_alignment>
 800ed6e:	4428      	add	r0, r5
 800ed70:	1d04      	adds	r4, r0, #4
 800ed72:	b90e      	cbnz	r6, 800ed78 <_Float64MultiArray__get_serialized_size+0x20>
 800ed74:	4620      	mov	r0, r4
 800ed76:	bd70      	pop	{r4, r5, r6, pc}
 800ed78:	4620      	mov	r0, r4
 800ed7a:	2108      	movs	r1, #8
 800ed7c:	f001 fa2e 	bl	80101dc <ucdr_alignment>
 800ed80:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ed84:	4404      	add	r4, r0
 800ed86:	4620      	mov	r0, r4
 800ed88:	bd70      	pop	{r4, r5, r6, pc}
 800ed8a:	bf00      	nop

0800ed8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800ed8c:	4800      	ldr	r0, [pc, #0]	@ (800ed90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 800ed8e:	4770      	bx	lr
 800ed90:	20000178 	.word	0x20000178

0800ed94 <_MultiArrayLayout__max_serialized_size>:
 800ed94:	b508      	push	{r3, lr}
 800ed96:	2104      	movs	r1, #4
 800ed98:	2000      	movs	r0, #0
 800ed9a:	f001 fa1f 	bl	80101dc <ucdr_alignment>
 800ed9e:	3004      	adds	r0, #4
 800eda0:	bd08      	pop	{r3, pc}
 800eda2:	bf00      	nop

0800eda4 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800eda4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eda8:	4689      	mov	r9, r1
 800edaa:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800edae:	4607      	mov	r7, r0
 800edb0:	2104      	movs	r1, #4
 800edb2:	4648      	mov	r0, r9
 800edb4:	f001 fa12 	bl	80101dc <ucdr_alignment>
 800edb8:	f109 0304 	add.w	r3, r9, #4
 800edbc:	18c6      	adds	r6, r0, r3
 800edbe:	f1b8 0f00 	cmp.w	r8, #0
 800edc2:	d018      	beq.n	800edf6 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 800edc4:	2500      	movs	r5, #0
 800edc6:	f008 fec3 	bl	8017b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800edca:	683a      	ldr	r2, [r7, #0]
 800edcc:	6843      	ldr	r3, [r0, #4]
 800edce:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800edd2:	4631      	mov	r1, r6
 800edd4:	695b      	ldr	r3, [r3, #20]
 800edd6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800edda:	4798      	blx	r3
 800eddc:	4604      	mov	r4, r0
 800edde:	2c04      	cmp	r4, #4
 800ede0:	4621      	mov	r1, r4
 800ede2:	4630      	mov	r0, r6
 800ede4:	bf28      	it	cs
 800ede6:	2104      	movcs	r1, #4
 800ede8:	f001 f9f8 	bl	80101dc <ucdr_alignment>
 800edec:	3501      	adds	r5, #1
 800edee:	4404      	add	r4, r0
 800edf0:	45a8      	cmp	r8, r5
 800edf2:	4426      	add	r6, r4
 800edf4:	d1e7      	bne.n	800edc6 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800edf6:	2104      	movs	r1, #4
 800edf8:	4630      	mov	r0, r6
 800edfa:	f001 f9ef 	bl	80101dc <ucdr_alignment>
 800edfe:	f1c9 0904 	rsb	r9, r9, #4
 800ee02:	444e      	add	r6, r9
 800ee04:	4430      	add	r0, r6
 800ee06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee0a:	bf00      	nop

0800ee0c <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800ee0c:	b108      	cbz	r0, 800ee12 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800ee0e:	f7ff bfc9 	b.w	800eda4 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800ee12:	4770      	bx	lr

0800ee14 <_MultiArrayLayout__get_serialized_size>:
 800ee14:	b110      	cbz	r0, 800ee1c <_MultiArrayLayout__get_serialized_size+0x8>
 800ee16:	2100      	movs	r1, #0
 800ee18:	f7ff bfc4 	b.w	800eda4 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop

0800ee20 <_MultiArrayLayout__cdr_deserialize>:
 800ee20:	b349      	cbz	r1, 800ee76 <_MultiArrayLayout__cdr_deserialize+0x56>
 800ee22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee24:	460e      	mov	r6, r1
 800ee26:	b083      	sub	sp, #12
 800ee28:	a901      	add	r1, sp, #4
 800ee2a:	4607      	mov	r7, r0
 800ee2c:	f000 fbcc 	bl	800f5c8 <ucdr_deserialize_uint32_t>
 800ee30:	9b01      	ldr	r3, [sp, #4]
 800ee32:	68b2      	ldr	r2, [r6, #8]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d31b      	bcc.n	800ee70 <_MultiArrayLayout__cdr_deserialize+0x50>
 800ee38:	6073      	str	r3, [r6, #4]
 800ee3a:	b18b      	cbz	r3, 800ee60 <_MultiArrayLayout__cdr_deserialize+0x40>
 800ee3c:	2400      	movs	r4, #0
 800ee3e:	4625      	mov	r5, r4
 800ee40:	e002      	b.n	800ee48 <_MultiArrayLayout__cdr_deserialize+0x28>
 800ee42:	9b01      	ldr	r3, [sp, #4]
 800ee44:	429d      	cmp	r5, r3
 800ee46:	d20b      	bcs.n	800ee60 <_MultiArrayLayout__cdr_deserialize+0x40>
 800ee48:	f008 fe82 	bl	8017b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800ee4c:	6831      	ldr	r1, [r6, #0]
 800ee4e:	6843      	ldr	r3, [r0, #4]
 800ee50:	4421      	add	r1, r4
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	4638      	mov	r0, r7
 800ee56:	4798      	blx	r3
 800ee58:	3501      	adds	r5, #1
 800ee5a:	3414      	adds	r4, #20
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d1f0      	bne.n	800ee42 <_MultiArrayLayout__cdr_deserialize+0x22>
 800ee60:	f106 010c 	add.w	r1, r6, #12
 800ee64:	4638      	mov	r0, r7
 800ee66:	b003      	add	sp, #12
 800ee68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ee6c:	f000 bbac 	b.w	800f5c8 <ucdr_deserialize_uint32_t>
 800ee70:	2000      	movs	r0, #0
 800ee72:	b003      	add	sp, #12
 800ee74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee76:	2000      	movs	r0, #0
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop

0800ee7c <_MultiArrayLayout__cdr_serialize>:
 800ee7c:	b308      	cbz	r0, 800eec2 <_MultiArrayLayout__cdr_serialize+0x46>
 800ee7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee80:	6847      	ldr	r7, [r0, #4]
 800ee82:	460e      	mov	r6, r1
 800ee84:	4605      	mov	r5, r0
 800ee86:	4608      	mov	r0, r1
 800ee88:	4639      	mov	r1, r7
 800ee8a:	f000 fa6d 	bl	800f368 <ucdr_serialize_uint32_t>
 800ee8e:	b190      	cbz	r0, 800eeb6 <_MultiArrayLayout__cdr_serialize+0x3a>
 800ee90:	b18f      	cbz	r7, 800eeb6 <_MultiArrayLayout__cdr_serialize+0x3a>
 800ee92:	2400      	movs	r4, #0
 800ee94:	e001      	b.n	800ee9a <_MultiArrayLayout__cdr_serialize+0x1e>
 800ee96:	42a7      	cmp	r7, r4
 800ee98:	d00d      	beq.n	800eeb6 <_MultiArrayLayout__cdr_serialize+0x3a>
 800ee9a:	f008 fe59 	bl	8017b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800ee9e:	682a      	ldr	r2, [r5, #0]
 800eea0:	6843      	ldr	r3, [r0, #4]
 800eea2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	4631      	mov	r1, r6
 800eeaa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800eeae:	3401      	adds	r4, #1
 800eeb0:	4798      	blx	r3
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	d1ef      	bne.n	800ee96 <_MultiArrayLayout__cdr_serialize+0x1a>
 800eeb6:	68e9      	ldr	r1, [r5, #12]
 800eeb8:	4630      	mov	r0, r6
 800eeba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eebe:	f000 ba53 	b.w	800f368 <ucdr_serialize_uint32_t>
 800eec2:	4770      	bx	lr

0800eec4 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800eec4:	b508      	push	{r3, lr}
 800eec6:	4603      	mov	r3, r0
 800eec8:	2200      	movs	r2, #0
 800eeca:	4608      	mov	r0, r1
 800eecc:	701a      	strb	r2, [r3, #0]
 800eece:	2104      	movs	r1, #4
 800eed0:	f001 f984 	bl	80101dc <ucdr_alignment>
 800eed4:	3004      	adds	r0, #4
 800eed6:	bd08      	pop	{r3, pc}

0800eed8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800eed8:	4800      	ldr	r0, [pc, #0]	@ (800eedc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800eeda:	4770      	bx	lr
 800eedc:	200001a0 	.word	0x200001a0

0800eee0 <ucdr_serialize_bool>:
 800eee0:	b538      	push	{r3, r4, r5, lr}
 800eee2:	460d      	mov	r5, r1
 800eee4:	2101      	movs	r1, #1
 800eee6:	4604      	mov	r4, r0
 800eee8:	f001 f92c 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800eeec:	b148      	cbz	r0, 800ef02 <ucdr_serialize_bool+0x22>
 800eeee:	68a3      	ldr	r3, [r4, #8]
 800eef0:	701d      	strb	r5, [r3, #0]
 800eef2:	68a2      	ldr	r2, [r4, #8]
 800eef4:	6923      	ldr	r3, [r4, #16]
 800eef6:	2101      	movs	r1, #1
 800eef8:	440a      	add	r2, r1
 800eefa:	440b      	add	r3, r1
 800eefc:	60a2      	str	r2, [r4, #8]
 800eefe:	6123      	str	r3, [r4, #16]
 800ef00:	7561      	strb	r1, [r4, #21]
 800ef02:	7da0      	ldrb	r0, [r4, #22]
 800ef04:	f080 0001 	eor.w	r0, r0, #1
 800ef08:	bd38      	pop	{r3, r4, r5, pc}
 800ef0a:	bf00      	nop

0800ef0c <ucdr_deserialize_bool>:
 800ef0c:	b538      	push	{r3, r4, r5, lr}
 800ef0e:	460d      	mov	r5, r1
 800ef10:	2101      	movs	r1, #1
 800ef12:	4604      	mov	r4, r0
 800ef14:	f001 f916 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800ef18:	b160      	cbz	r0, 800ef34 <ucdr_deserialize_bool+0x28>
 800ef1a:	68a2      	ldr	r2, [r4, #8]
 800ef1c:	6923      	ldr	r3, [r4, #16]
 800ef1e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ef22:	3900      	subs	r1, #0
 800ef24:	bf18      	it	ne
 800ef26:	2101      	movne	r1, #1
 800ef28:	7029      	strb	r1, [r5, #0]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	2101      	movs	r1, #1
 800ef2e:	60a2      	str	r2, [r4, #8]
 800ef30:	6123      	str	r3, [r4, #16]
 800ef32:	7561      	strb	r1, [r4, #21]
 800ef34:	7da0      	ldrb	r0, [r4, #22]
 800ef36:	f080 0001 	eor.w	r0, r0, #1
 800ef3a:	bd38      	pop	{r3, r4, r5, pc}

0800ef3c <ucdr_serialize_uint8_t>:
 800ef3c:	b538      	push	{r3, r4, r5, lr}
 800ef3e:	460d      	mov	r5, r1
 800ef40:	2101      	movs	r1, #1
 800ef42:	4604      	mov	r4, r0
 800ef44:	f001 f8fe 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800ef48:	b148      	cbz	r0, 800ef5e <ucdr_serialize_uint8_t+0x22>
 800ef4a:	68a3      	ldr	r3, [r4, #8]
 800ef4c:	701d      	strb	r5, [r3, #0]
 800ef4e:	68a2      	ldr	r2, [r4, #8]
 800ef50:	6923      	ldr	r3, [r4, #16]
 800ef52:	2101      	movs	r1, #1
 800ef54:	440a      	add	r2, r1
 800ef56:	440b      	add	r3, r1
 800ef58:	60a2      	str	r2, [r4, #8]
 800ef5a:	6123      	str	r3, [r4, #16]
 800ef5c:	7561      	strb	r1, [r4, #21]
 800ef5e:	7da0      	ldrb	r0, [r4, #22]
 800ef60:	f080 0001 	eor.w	r0, r0, #1
 800ef64:	bd38      	pop	{r3, r4, r5, pc}
 800ef66:	bf00      	nop

0800ef68 <ucdr_deserialize_uint8_t>:
 800ef68:	b538      	push	{r3, r4, r5, lr}
 800ef6a:	460d      	mov	r5, r1
 800ef6c:	2101      	movs	r1, #1
 800ef6e:	4604      	mov	r4, r0
 800ef70:	f001 f8e8 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800ef74:	b150      	cbz	r0, 800ef8c <ucdr_deserialize_uint8_t+0x24>
 800ef76:	68a3      	ldr	r3, [r4, #8]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	702b      	strb	r3, [r5, #0]
 800ef7c:	68a2      	ldr	r2, [r4, #8]
 800ef7e:	6923      	ldr	r3, [r4, #16]
 800ef80:	2101      	movs	r1, #1
 800ef82:	440a      	add	r2, r1
 800ef84:	440b      	add	r3, r1
 800ef86:	60a2      	str	r2, [r4, #8]
 800ef88:	6123      	str	r3, [r4, #16]
 800ef8a:	7561      	strb	r1, [r4, #21]
 800ef8c:	7da0      	ldrb	r0, [r4, #22]
 800ef8e:	f080 0001 	eor.w	r0, r0, #1
 800ef92:	bd38      	pop	{r3, r4, r5, pc}

0800ef94 <ucdr_serialize_uint16_t>:
 800ef94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef98:	b082      	sub	sp, #8
 800ef9a:	460b      	mov	r3, r1
 800ef9c:	2102      	movs	r1, #2
 800ef9e:	4604      	mov	r4, r0
 800efa0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800efa4:	f001 f922 	bl	80101ec <ucdr_buffer_alignment>
 800efa8:	4601      	mov	r1, r0
 800efaa:	4620      	mov	r0, r4
 800efac:	7d67      	ldrb	r7, [r4, #21]
 800efae:	f001 f961 	bl	8010274 <ucdr_advance_buffer>
 800efb2:	2102      	movs	r1, #2
 800efb4:	4620      	mov	r0, r4
 800efb6:	f001 f8b9 	bl	801012c <ucdr_check_buffer_available_for>
 800efba:	bb78      	cbnz	r0, 800f01c <ucdr_serialize_uint16_t+0x88>
 800efbc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800efc0:	42ab      	cmp	r3, r5
 800efc2:	d926      	bls.n	800f012 <ucdr_serialize_uint16_t+0x7e>
 800efc4:	1b5e      	subs	r6, r3, r5
 800efc6:	60a3      	str	r3, [r4, #8]
 800efc8:	6923      	ldr	r3, [r4, #16]
 800efca:	f1c6 0802 	rsb	r8, r6, #2
 800efce:	4433      	add	r3, r6
 800efd0:	6123      	str	r3, [r4, #16]
 800efd2:	4641      	mov	r1, r8
 800efd4:	4620      	mov	r0, r4
 800efd6:	f001 f8b5 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800efda:	2800      	cmp	r0, #0
 800efdc:	d03b      	beq.n	800f056 <ucdr_serialize_uint16_t+0xc2>
 800efde:	7d23      	ldrb	r3, [r4, #20]
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	d04a      	beq.n	800f07a <ucdr_serialize_uint16_t+0xe6>
 800efe4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800efe8:	702b      	strb	r3, [r5, #0]
 800efea:	2e00      	cmp	r6, #0
 800efec:	d040      	beq.n	800f070 <ucdr_serialize_uint16_t+0xdc>
 800efee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eff2:	706b      	strb	r3, [r5, #1]
 800eff4:	6923      	ldr	r3, [r4, #16]
 800eff6:	68a2      	ldr	r2, [r4, #8]
 800eff8:	7da0      	ldrb	r0, [r4, #22]
 800effa:	3302      	adds	r3, #2
 800effc:	1b9e      	subs	r6, r3, r6
 800effe:	4442      	add	r2, r8
 800f000:	2302      	movs	r3, #2
 800f002:	f080 0001 	eor.w	r0, r0, #1
 800f006:	60a2      	str	r2, [r4, #8]
 800f008:	6126      	str	r6, [r4, #16]
 800f00a:	7563      	strb	r3, [r4, #21]
 800f00c:	b002      	add	sp, #8
 800f00e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f012:	2102      	movs	r1, #2
 800f014:	4620      	mov	r0, r4
 800f016:	f001 f895 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f01a:	b190      	cbz	r0, 800f042 <ucdr_serialize_uint16_t+0xae>
 800f01c:	7d23      	ldrb	r3, [r4, #20]
 800f01e:	2b01      	cmp	r3, #1
 800f020:	68a3      	ldr	r3, [r4, #8]
 800f022:	d014      	beq.n	800f04e <ucdr_serialize_uint16_t+0xba>
 800f024:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f028:	701a      	strb	r2, [r3, #0]
 800f02a:	68a3      	ldr	r3, [r4, #8]
 800f02c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f030:	705a      	strb	r2, [r3, #1]
 800f032:	68a2      	ldr	r2, [r4, #8]
 800f034:	6923      	ldr	r3, [r4, #16]
 800f036:	3202      	adds	r2, #2
 800f038:	3302      	adds	r3, #2
 800f03a:	2102      	movs	r1, #2
 800f03c:	60a2      	str	r2, [r4, #8]
 800f03e:	6123      	str	r3, [r4, #16]
 800f040:	7561      	strb	r1, [r4, #21]
 800f042:	7da0      	ldrb	r0, [r4, #22]
 800f044:	f080 0001 	eor.w	r0, r0, #1
 800f048:	b002      	add	sp, #8
 800f04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f04e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f052:	801a      	strh	r2, [r3, #0]
 800f054:	e7ed      	b.n	800f032 <ucdr_serialize_uint16_t+0x9e>
 800f056:	68a2      	ldr	r2, [r4, #8]
 800f058:	6923      	ldr	r3, [r4, #16]
 800f05a:	7da0      	ldrb	r0, [r4, #22]
 800f05c:	7567      	strb	r7, [r4, #21]
 800f05e:	1b92      	subs	r2, r2, r6
 800f060:	1b9b      	subs	r3, r3, r6
 800f062:	f080 0001 	eor.w	r0, r0, #1
 800f066:	60a2      	str	r2, [r4, #8]
 800f068:	6123      	str	r3, [r4, #16]
 800f06a:	b002      	add	sp, #8
 800f06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f070:	68a3      	ldr	r3, [r4, #8]
 800f072:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f076:	701a      	strb	r2, [r3, #0]
 800f078:	e7bc      	b.n	800eff4 <ucdr_serialize_uint16_t+0x60>
 800f07a:	4628      	mov	r0, r5
 800f07c:	f10d 0506 	add.w	r5, sp, #6
 800f080:	4629      	mov	r1, r5
 800f082:	4632      	mov	r2, r6
 800f084:	f00a fe85 	bl	8019d92 <memcpy>
 800f088:	68a0      	ldr	r0, [r4, #8]
 800f08a:	4642      	mov	r2, r8
 800f08c:	19a9      	adds	r1, r5, r6
 800f08e:	f00a fe80 	bl	8019d92 <memcpy>
 800f092:	e7af      	b.n	800eff4 <ucdr_serialize_uint16_t+0x60>

0800f094 <ucdr_serialize_endian_uint16_t>:
 800f094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f098:	b083      	sub	sp, #12
 800f09a:	460d      	mov	r5, r1
 800f09c:	2102      	movs	r1, #2
 800f09e:	4604      	mov	r4, r0
 800f0a0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f0a4:	f001 f8a2 	bl	80101ec <ucdr_buffer_alignment>
 800f0a8:	4601      	mov	r1, r0
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f0b0:	f001 f8e0 	bl	8010274 <ucdr_advance_buffer>
 800f0b4:	2102      	movs	r1, #2
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f001 f838 	bl	801012c <ucdr_check_buffer_available_for>
 800f0bc:	bb70      	cbnz	r0, 800f11c <ucdr_serialize_endian_uint16_t+0x88>
 800f0be:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f0c2:	42be      	cmp	r6, r7
 800f0c4:	d925      	bls.n	800f112 <ucdr_serialize_endian_uint16_t+0x7e>
 800f0c6:	6923      	ldr	r3, [r4, #16]
 800f0c8:	60a6      	str	r6, [r4, #8]
 800f0ca:	1bf6      	subs	r6, r6, r7
 800f0cc:	4433      	add	r3, r6
 800f0ce:	f1c6 0902 	rsb	r9, r6, #2
 800f0d2:	6123      	str	r3, [r4, #16]
 800f0d4:	4649      	mov	r1, r9
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f001 f834 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	d039      	beq.n	800f154 <ucdr_serialize_endian_uint16_t+0xc0>
 800f0e0:	2d01      	cmp	r5, #1
 800f0e2:	d04a      	beq.n	800f17a <ucdr_serialize_endian_uint16_t+0xe6>
 800f0e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f0e8:	703b      	strb	r3, [r7, #0]
 800f0ea:	2e00      	cmp	r6, #0
 800f0ec:	d040      	beq.n	800f170 <ucdr_serialize_endian_uint16_t+0xdc>
 800f0ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f0f2:	707b      	strb	r3, [r7, #1]
 800f0f4:	6923      	ldr	r3, [r4, #16]
 800f0f6:	68a2      	ldr	r2, [r4, #8]
 800f0f8:	7da0      	ldrb	r0, [r4, #22]
 800f0fa:	3302      	adds	r3, #2
 800f0fc:	444a      	add	r2, r9
 800f0fe:	1b9b      	subs	r3, r3, r6
 800f100:	2102      	movs	r1, #2
 800f102:	f080 0001 	eor.w	r0, r0, #1
 800f106:	60a2      	str	r2, [r4, #8]
 800f108:	6123      	str	r3, [r4, #16]
 800f10a:	7561      	strb	r1, [r4, #21]
 800f10c:	b003      	add	sp, #12
 800f10e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f112:	2102      	movs	r1, #2
 800f114:	4620      	mov	r0, r4
 800f116:	f001 f815 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f11a:	b188      	cbz	r0, 800f140 <ucdr_serialize_endian_uint16_t+0xac>
 800f11c:	2d01      	cmp	r5, #1
 800f11e:	68a3      	ldr	r3, [r4, #8]
 800f120:	d014      	beq.n	800f14c <ucdr_serialize_endian_uint16_t+0xb8>
 800f122:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f126:	701a      	strb	r2, [r3, #0]
 800f128:	68a3      	ldr	r3, [r4, #8]
 800f12a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f12e:	705a      	strb	r2, [r3, #1]
 800f130:	68a2      	ldr	r2, [r4, #8]
 800f132:	6923      	ldr	r3, [r4, #16]
 800f134:	3202      	adds	r2, #2
 800f136:	3302      	adds	r3, #2
 800f138:	2102      	movs	r1, #2
 800f13a:	60a2      	str	r2, [r4, #8]
 800f13c:	6123      	str	r3, [r4, #16]
 800f13e:	7561      	strb	r1, [r4, #21]
 800f140:	7da0      	ldrb	r0, [r4, #22]
 800f142:	f080 0001 	eor.w	r0, r0, #1
 800f146:	b003      	add	sp, #12
 800f148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f14c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f150:	801a      	strh	r2, [r3, #0]
 800f152:	e7ed      	b.n	800f130 <ucdr_serialize_endian_uint16_t+0x9c>
 800f154:	68a2      	ldr	r2, [r4, #8]
 800f156:	6923      	ldr	r3, [r4, #16]
 800f158:	7da0      	ldrb	r0, [r4, #22]
 800f15a:	f884 8015 	strb.w	r8, [r4, #21]
 800f15e:	1b92      	subs	r2, r2, r6
 800f160:	1b9b      	subs	r3, r3, r6
 800f162:	f080 0001 	eor.w	r0, r0, #1
 800f166:	60a2      	str	r2, [r4, #8]
 800f168:	6123      	str	r3, [r4, #16]
 800f16a:	b003      	add	sp, #12
 800f16c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f170:	68a3      	ldr	r3, [r4, #8]
 800f172:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f176:	701a      	strb	r2, [r3, #0]
 800f178:	e7bc      	b.n	800f0f4 <ucdr_serialize_endian_uint16_t+0x60>
 800f17a:	f10d 0506 	add.w	r5, sp, #6
 800f17e:	4629      	mov	r1, r5
 800f180:	4632      	mov	r2, r6
 800f182:	4638      	mov	r0, r7
 800f184:	f00a fe05 	bl	8019d92 <memcpy>
 800f188:	68a0      	ldr	r0, [r4, #8]
 800f18a:	464a      	mov	r2, r9
 800f18c:	19a9      	adds	r1, r5, r6
 800f18e:	f00a fe00 	bl	8019d92 <memcpy>
 800f192:	e7af      	b.n	800f0f4 <ucdr_serialize_endian_uint16_t+0x60>

0800f194 <ucdr_deserialize_uint16_t>:
 800f194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f198:	460d      	mov	r5, r1
 800f19a:	2102      	movs	r1, #2
 800f19c:	4604      	mov	r4, r0
 800f19e:	f001 f825 	bl	80101ec <ucdr_buffer_alignment>
 800f1a2:	4601      	mov	r1, r0
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f1aa:	f001 f863 	bl	8010274 <ucdr_advance_buffer>
 800f1ae:	2102      	movs	r1, #2
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f000 ffbb 	bl	801012c <ucdr_check_buffer_available_for>
 800f1b6:	bb60      	cbnz	r0, 800f212 <ucdr_deserialize_uint16_t+0x7e>
 800f1b8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f1bc:	42be      	cmp	r6, r7
 800f1be:	d923      	bls.n	800f208 <ucdr_deserialize_uint16_t+0x74>
 800f1c0:	6923      	ldr	r3, [r4, #16]
 800f1c2:	60a6      	str	r6, [r4, #8]
 800f1c4:	1bf6      	subs	r6, r6, r7
 800f1c6:	4433      	add	r3, r6
 800f1c8:	f1c6 0902 	rsb	r9, r6, #2
 800f1cc:	6123      	str	r3, [r4, #16]
 800f1ce:	4649      	mov	r1, r9
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	f000 ffb7 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f1d6:	2800      	cmp	r0, #0
 800f1d8:	d034      	beq.n	800f244 <ucdr_deserialize_uint16_t+0xb0>
 800f1da:	7d23      	ldrb	r3, [r4, #20]
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d042      	beq.n	800f266 <ucdr_deserialize_uint16_t+0xd2>
 800f1e0:	787b      	ldrb	r3, [r7, #1]
 800f1e2:	702b      	strb	r3, [r5, #0]
 800f1e4:	2e00      	cmp	r6, #0
 800f1e6:	d03a      	beq.n	800f25e <ucdr_deserialize_uint16_t+0xca>
 800f1e8:	783b      	ldrb	r3, [r7, #0]
 800f1ea:	706b      	strb	r3, [r5, #1]
 800f1ec:	6923      	ldr	r3, [r4, #16]
 800f1ee:	68a2      	ldr	r2, [r4, #8]
 800f1f0:	7da0      	ldrb	r0, [r4, #22]
 800f1f2:	2102      	movs	r1, #2
 800f1f4:	3302      	adds	r3, #2
 800f1f6:	444a      	add	r2, r9
 800f1f8:	1b9b      	subs	r3, r3, r6
 800f1fa:	7561      	strb	r1, [r4, #21]
 800f1fc:	60a2      	str	r2, [r4, #8]
 800f1fe:	6123      	str	r3, [r4, #16]
 800f200:	f080 0001 	eor.w	r0, r0, #1
 800f204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f208:	2102      	movs	r1, #2
 800f20a:	4620      	mov	r0, r4
 800f20c:	f000 ff9a 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f210:	b180      	cbz	r0, 800f234 <ucdr_deserialize_uint16_t+0xa0>
 800f212:	7d23      	ldrb	r3, [r4, #20]
 800f214:	2b01      	cmp	r3, #1
 800f216:	68a3      	ldr	r3, [r4, #8]
 800f218:	d011      	beq.n	800f23e <ucdr_deserialize_uint16_t+0xaa>
 800f21a:	785b      	ldrb	r3, [r3, #1]
 800f21c:	702b      	strb	r3, [r5, #0]
 800f21e:	68a3      	ldr	r3, [r4, #8]
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	706b      	strb	r3, [r5, #1]
 800f224:	68a2      	ldr	r2, [r4, #8]
 800f226:	6923      	ldr	r3, [r4, #16]
 800f228:	3202      	adds	r2, #2
 800f22a:	3302      	adds	r3, #2
 800f22c:	2102      	movs	r1, #2
 800f22e:	60a2      	str	r2, [r4, #8]
 800f230:	6123      	str	r3, [r4, #16]
 800f232:	7561      	strb	r1, [r4, #21]
 800f234:	7da0      	ldrb	r0, [r4, #22]
 800f236:	f080 0001 	eor.w	r0, r0, #1
 800f23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f23e:	881b      	ldrh	r3, [r3, #0]
 800f240:	802b      	strh	r3, [r5, #0]
 800f242:	e7ef      	b.n	800f224 <ucdr_deserialize_uint16_t+0x90>
 800f244:	68a2      	ldr	r2, [r4, #8]
 800f246:	6923      	ldr	r3, [r4, #16]
 800f248:	7da0      	ldrb	r0, [r4, #22]
 800f24a:	f884 8015 	strb.w	r8, [r4, #21]
 800f24e:	1b92      	subs	r2, r2, r6
 800f250:	1b9b      	subs	r3, r3, r6
 800f252:	60a2      	str	r2, [r4, #8]
 800f254:	6123      	str	r3, [r4, #16]
 800f256:	f080 0001 	eor.w	r0, r0, #1
 800f25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f25e:	68a3      	ldr	r3, [r4, #8]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	706b      	strb	r3, [r5, #1]
 800f264:	e7c2      	b.n	800f1ec <ucdr_deserialize_uint16_t+0x58>
 800f266:	4639      	mov	r1, r7
 800f268:	4632      	mov	r2, r6
 800f26a:	4628      	mov	r0, r5
 800f26c:	f00a fd91 	bl	8019d92 <memcpy>
 800f270:	68a1      	ldr	r1, [r4, #8]
 800f272:	464a      	mov	r2, r9
 800f274:	19a8      	adds	r0, r5, r6
 800f276:	f00a fd8c 	bl	8019d92 <memcpy>
 800f27a:	e7b7      	b.n	800f1ec <ucdr_deserialize_uint16_t+0x58>

0800f27c <ucdr_deserialize_endian_uint16_t>:
 800f27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f280:	460e      	mov	r6, r1
 800f282:	2102      	movs	r1, #2
 800f284:	4604      	mov	r4, r0
 800f286:	4615      	mov	r5, r2
 800f288:	f000 ffb0 	bl	80101ec <ucdr_buffer_alignment>
 800f28c:	4601      	mov	r1, r0
 800f28e:	4620      	mov	r0, r4
 800f290:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f294:	f000 ffee 	bl	8010274 <ucdr_advance_buffer>
 800f298:	2102      	movs	r1, #2
 800f29a:	4620      	mov	r0, r4
 800f29c:	f000 ff46 	bl	801012c <ucdr_check_buffer_available_for>
 800f2a0:	bb70      	cbnz	r0, 800f300 <ucdr_deserialize_endian_uint16_t+0x84>
 800f2a2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800f2a6:	4547      	cmp	r7, r8
 800f2a8:	d925      	bls.n	800f2f6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800f2aa:	6923      	ldr	r3, [r4, #16]
 800f2ac:	60a7      	str	r7, [r4, #8]
 800f2ae:	eba7 0708 	sub.w	r7, r7, r8
 800f2b2:	443b      	add	r3, r7
 800f2b4:	f1c7 0a02 	rsb	sl, r7, #2
 800f2b8:	6123      	str	r3, [r4, #16]
 800f2ba:	4651      	mov	r1, sl
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f000 ff41 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f2c2:	2800      	cmp	r0, #0
 800f2c4:	d034      	beq.n	800f330 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f2c6:	2e01      	cmp	r6, #1
 800f2c8:	d043      	beq.n	800f352 <ucdr_deserialize_endian_uint16_t+0xd6>
 800f2ca:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f2ce:	702b      	strb	r3, [r5, #0]
 800f2d0:	2f00      	cmp	r7, #0
 800f2d2:	d03a      	beq.n	800f34a <ucdr_deserialize_endian_uint16_t+0xce>
 800f2d4:	f898 3000 	ldrb.w	r3, [r8]
 800f2d8:	706b      	strb	r3, [r5, #1]
 800f2da:	6923      	ldr	r3, [r4, #16]
 800f2dc:	68a2      	ldr	r2, [r4, #8]
 800f2de:	7da0      	ldrb	r0, [r4, #22]
 800f2e0:	2102      	movs	r1, #2
 800f2e2:	3302      	adds	r3, #2
 800f2e4:	4452      	add	r2, sl
 800f2e6:	1bdb      	subs	r3, r3, r7
 800f2e8:	7561      	strb	r1, [r4, #21]
 800f2ea:	60a2      	str	r2, [r4, #8]
 800f2ec:	6123      	str	r3, [r4, #16]
 800f2ee:	f080 0001 	eor.w	r0, r0, #1
 800f2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2f6:	2102      	movs	r1, #2
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f000 ff23 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f2fe:	b178      	cbz	r0, 800f320 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f300:	2e01      	cmp	r6, #1
 800f302:	68a3      	ldr	r3, [r4, #8]
 800f304:	d011      	beq.n	800f32a <ucdr_deserialize_endian_uint16_t+0xae>
 800f306:	785b      	ldrb	r3, [r3, #1]
 800f308:	702b      	strb	r3, [r5, #0]
 800f30a:	68a3      	ldr	r3, [r4, #8]
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	706b      	strb	r3, [r5, #1]
 800f310:	68a2      	ldr	r2, [r4, #8]
 800f312:	6923      	ldr	r3, [r4, #16]
 800f314:	3202      	adds	r2, #2
 800f316:	3302      	adds	r3, #2
 800f318:	2102      	movs	r1, #2
 800f31a:	60a2      	str	r2, [r4, #8]
 800f31c:	6123      	str	r3, [r4, #16]
 800f31e:	7561      	strb	r1, [r4, #21]
 800f320:	7da0      	ldrb	r0, [r4, #22]
 800f322:	f080 0001 	eor.w	r0, r0, #1
 800f326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f32a:	881b      	ldrh	r3, [r3, #0]
 800f32c:	802b      	strh	r3, [r5, #0]
 800f32e:	e7ef      	b.n	800f310 <ucdr_deserialize_endian_uint16_t+0x94>
 800f330:	68a2      	ldr	r2, [r4, #8]
 800f332:	6923      	ldr	r3, [r4, #16]
 800f334:	7da0      	ldrb	r0, [r4, #22]
 800f336:	f884 9015 	strb.w	r9, [r4, #21]
 800f33a:	1bd2      	subs	r2, r2, r7
 800f33c:	1bdb      	subs	r3, r3, r7
 800f33e:	60a2      	str	r2, [r4, #8]
 800f340:	6123      	str	r3, [r4, #16]
 800f342:	f080 0001 	eor.w	r0, r0, #1
 800f346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f34a:	68a3      	ldr	r3, [r4, #8]
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	706b      	strb	r3, [r5, #1]
 800f350:	e7c3      	b.n	800f2da <ucdr_deserialize_endian_uint16_t+0x5e>
 800f352:	4641      	mov	r1, r8
 800f354:	463a      	mov	r2, r7
 800f356:	4628      	mov	r0, r5
 800f358:	f00a fd1b 	bl	8019d92 <memcpy>
 800f35c:	68a1      	ldr	r1, [r4, #8]
 800f35e:	4652      	mov	r2, sl
 800f360:	19e8      	adds	r0, r5, r7
 800f362:	f00a fd16 	bl	8019d92 <memcpy>
 800f366:	e7b8      	b.n	800f2da <ucdr_deserialize_endian_uint16_t+0x5e>

0800f368 <ucdr_serialize_uint32_t>:
 800f368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f36c:	b082      	sub	sp, #8
 800f36e:	4604      	mov	r4, r0
 800f370:	9101      	str	r1, [sp, #4]
 800f372:	2104      	movs	r1, #4
 800f374:	f000 ff3a 	bl	80101ec <ucdr_buffer_alignment>
 800f378:	4601      	mov	r1, r0
 800f37a:	4620      	mov	r0, r4
 800f37c:	7d67      	ldrb	r7, [r4, #21]
 800f37e:	f000 ff79 	bl	8010274 <ucdr_advance_buffer>
 800f382:	2104      	movs	r1, #4
 800f384:	4620      	mov	r0, r4
 800f386:	f000 fed1 	bl	801012c <ucdr_check_buffer_available_for>
 800f38a:	2800      	cmp	r0, #0
 800f38c:	d139      	bne.n	800f402 <ucdr_serialize_uint32_t+0x9a>
 800f38e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f392:	42ab      	cmp	r3, r5
 800f394:	d930      	bls.n	800f3f8 <ucdr_serialize_uint32_t+0x90>
 800f396:	1b5e      	subs	r6, r3, r5
 800f398:	60a3      	str	r3, [r4, #8]
 800f39a:	6923      	ldr	r3, [r4, #16]
 800f39c:	f1c6 0804 	rsb	r8, r6, #4
 800f3a0:	4433      	add	r3, r6
 800f3a2:	6123      	str	r3, [r4, #16]
 800f3a4:	4641      	mov	r1, r8
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f000 fecc 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d04c      	beq.n	800f44a <ucdr_serialize_uint32_t+0xe2>
 800f3b0:	7d23      	ldrb	r3, [r4, #20]
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d063      	beq.n	800f47e <ucdr_serialize_uint32_t+0x116>
 800f3b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f3ba:	702b      	strb	r3, [r5, #0]
 800f3bc:	2e00      	cmp	r6, #0
 800f3be:	d051      	beq.n	800f464 <ucdr_serialize_uint32_t+0xfc>
 800f3c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f3c4:	706b      	strb	r3, [r5, #1]
 800f3c6:	2e01      	cmp	r6, #1
 800f3c8:	d050      	beq.n	800f46c <ucdr_serialize_uint32_t+0x104>
 800f3ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f3ce:	70ab      	strb	r3, [r5, #2]
 800f3d0:	2e02      	cmp	r6, #2
 800f3d2:	d04f      	beq.n	800f474 <ucdr_serialize_uint32_t+0x10c>
 800f3d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f3d8:	70eb      	strb	r3, [r5, #3]
 800f3da:	6923      	ldr	r3, [r4, #16]
 800f3dc:	68a2      	ldr	r2, [r4, #8]
 800f3de:	7da0      	ldrb	r0, [r4, #22]
 800f3e0:	3304      	adds	r3, #4
 800f3e2:	1b9e      	subs	r6, r3, r6
 800f3e4:	4442      	add	r2, r8
 800f3e6:	2304      	movs	r3, #4
 800f3e8:	f080 0001 	eor.w	r0, r0, #1
 800f3ec:	60a2      	str	r2, [r4, #8]
 800f3ee:	6126      	str	r6, [r4, #16]
 800f3f0:	7563      	strb	r3, [r4, #21]
 800f3f2:	b002      	add	sp, #8
 800f3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3f8:	2104      	movs	r1, #4
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	f000 fea2 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f400:	b1d0      	cbz	r0, 800f438 <ucdr_serialize_uint32_t+0xd0>
 800f402:	7d23      	ldrb	r3, [r4, #20]
 800f404:	2b01      	cmp	r3, #1
 800f406:	68a3      	ldr	r3, [r4, #8]
 800f408:	d01c      	beq.n	800f444 <ucdr_serialize_uint32_t+0xdc>
 800f40a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f40e:	701a      	strb	r2, [r3, #0]
 800f410:	68a3      	ldr	r3, [r4, #8]
 800f412:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f416:	705a      	strb	r2, [r3, #1]
 800f418:	68a3      	ldr	r3, [r4, #8]
 800f41a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f41e:	709a      	strb	r2, [r3, #2]
 800f420:	68a3      	ldr	r3, [r4, #8]
 800f422:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f426:	70da      	strb	r2, [r3, #3]
 800f428:	68a2      	ldr	r2, [r4, #8]
 800f42a:	6923      	ldr	r3, [r4, #16]
 800f42c:	3204      	adds	r2, #4
 800f42e:	3304      	adds	r3, #4
 800f430:	2104      	movs	r1, #4
 800f432:	60a2      	str	r2, [r4, #8]
 800f434:	6123      	str	r3, [r4, #16]
 800f436:	7561      	strb	r1, [r4, #21]
 800f438:	7da0      	ldrb	r0, [r4, #22]
 800f43a:	f080 0001 	eor.w	r0, r0, #1
 800f43e:	b002      	add	sp, #8
 800f440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f444:	9a01      	ldr	r2, [sp, #4]
 800f446:	601a      	str	r2, [r3, #0]
 800f448:	e7ee      	b.n	800f428 <ucdr_serialize_uint32_t+0xc0>
 800f44a:	68a2      	ldr	r2, [r4, #8]
 800f44c:	6923      	ldr	r3, [r4, #16]
 800f44e:	7da0      	ldrb	r0, [r4, #22]
 800f450:	7567      	strb	r7, [r4, #21]
 800f452:	1b92      	subs	r2, r2, r6
 800f454:	1b9b      	subs	r3, r3, r6
 800f456:	f080 0001 	eor.w	r0, r0, #1
 800f45a:	60a2      	str	r2, [r4, #8]
 800f45c:	6123      	str	r3, [r4, #16]
 800f45e:	b002      	add	sp, #8
 800f460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f464:	68a3      	ldr	r3, [r4, #8]
 800f466:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f46a:	701a      	strb	r2, [r3, #0]
 800f46c:	68a3      	ldr	r3, [r4, #8]
 800f46e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f472:	701a      	strb	r2, [r3, #0]
 800f474:	68a3      	ldr	r3, [r4, #8]
 800f476:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f47a:	701a      	strb	r2, [r3, #0]
 800f47c:	e7ad      	b.n	800f3da <ucdr_serialize_uint32_t+0x72>
 800f47e:	4628      	mov	r0, r5
 800f480:	ad01      	add	r5, sp, #4
 800f482:	4629      	mov	r1, r5
 800f484:	4632      	mov	r2, r6
 800f486:	f00a fc84 	bl	8019d92 <memcpy>
 800f48a:	68a0      	ldr	r0, [r4, #8]
 800f48c:	4642      	mov	r2, r8
 800f48e:	19a9      	adds	r1, r5, r6
 800f490:	f00a fc7f 	bl	8019d92 <memcpy>
 800f494:	e7a1      	b.n	800f3da <ucdr_serialize_uint32_t+0x72>
 800f496:	bf00      	nop

0800f498 <ucdr_serialize_endian_uint32_t>:
 800f498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f49c:	b083      	sub	sp, #12
 800f49e:	460d      	mov	r5, r1
 800f4a0:	2104      	movs	r1, #4
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	9201      	str	r2, [sp, #4]
 800f4a6:	f000 fea1 	bl	80101ec <ucdr_buffer_alignment>
 800f4aa:	4601      	mov	r1, r0
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f4b2:	f000 fedf 	bl	8010274 <ucdr_advance_buffer>
 800f4b6:	2104      	movs	r1, #4
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	f000 fe37 	bl	801012c <ucdr_check_buffer_available_for>
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	d138      	bne.n	800f534 <ucdr_serialize_endian_uint32_t+0x9c>
 800f4c2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f4c6:	42b7      	cmp	r7, r6
 800f4c8:	d92f      	bls.n	800f52a <ucdr_serialize_endian_uint32_t+0x92>
 800f4ca:	6923      	ldr	r3, [r4, #16]
 800f4cc:	60a7      	str	r7, [r4, #8]
 800f4ce:	1bbf      	subs	r7, r7, r6
 800f4d0:	443b      	add	r3, r7
 800f4d2:	f1c7 0904 	rsb	r9, r7, #4
 800f4d6:	6123      	str	r3, [r4, #16]
 800f4d8:	4649      	mov	r1, r9
 800f4da:	4620      	mov	r0, r4
 800f4dc:	f000 fe32 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	d04a      	beq.n	800f57a <ucdr_serialize_endian_uint32_t+0xe2>
 800f4e4:	2d01      	cmp	r5, #1
 800f4e6:	d063      	beq.n	800f5b0 <ucdr_serialize_endian_uint32_t+0x118>
 800f4e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f4ec:	7033      	strb	r3, [r6, #0]
 800f4ee:	2f00      	cmp	r7, #0
 800f4f0:	d051      	beq.n	800f596 <ucdr_serialize_endian_uint32_t+0xfe>
 800f4f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f4f6:	7073      	strb	r3, [r6, #1]
 800f4f8:	2f01      	cmp	r7, #1
 800f4fa:	d050      	beq.n	800f59e <ucdr_serialize_endian_uint32_t+0x106>
 800f4fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f500:	70b3      	strb	r3, [r6, #2]
 800f502:	2f02      	cmp	r7, #2
 800f504:	d04f      	beq.n	800f5a6 <ucdr_serialize_endian_uint32_t+0x10e>
 800f506:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f50a:	70f3      	strb	r3, [r6, #3]
 800f50c:	6923      	ldr	r3, [r4, #16]
 800f50e:	68a2      	ldr	r2, [r4, #8]
 800f510:	7da0      	ldrb	r0, [r4, #22]
 800f512:	3304      	adds	r3, #4
 800f514:	444a      	add	r2, r9
 800f516:	1bdb      	subs	r3, r3, r7
 800f518:	2104      	movs	r1, #4
 800f51a:	f080 0001 	eor.w	r0, r0, #1
 800f51e:	60a2      	str	r2, [r4, #8]
 800f520:	6123      	str	r3, [r4, #16]
 800f522:	7561      	strb	r1, [r4, #21]
 800f524:	b003      	add	sp, #12
 800f526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f52a:	2104      	movs	r1, #4
 800f52c:	4620      	mov	r0, r4
 800f52e:	f000 fe09 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f532:	b1c8      	cbz	r0, 800f568 <ucdr_serialize_endian_uint32_t+0xd0>
 800f534:	2d01      	cmp	r5, #1
 800f536:	68a3      	ldr	r3, [r4, #8]
 800f538:	d01c      	beq.n	800f574 <ucdr_serialize_endian_uint32_t+0xdc>
 800f53a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f53e:	701a      	strb	r2, [r3, #0]
 800f540:	68a3      	ldr	r3, [r4, #8]
 800f542:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f546:	705a      	strb	r2, [r3, #1]
 800f548:	68a3      	ldr	r3, [r4, #8]
 800f54a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f54e:	709a      	strb	r2, [r3, #2]
 800f550:	68a3      	ldr	r3, [r4, #8]
 800f552:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f556:	70da      	strb	r2, [r3, #3]
 800f558:	68a2      	ldr	r2, [r4, #8]
 800f55a:	6923      	ldr	r3, [r4, #16]
 800f55c:	3204      	adds	r2, #4
 800f55e:	3304      	adds	r3, #4
 800f560:	2104      	movs	r1, #4
 800f562:	60a2      	str	r2, [r4, #8]
 800f564:	6123      	str	r3, [r4, #16]
 800f566:	7561      	strb	r1, [r4, #21]
 800f568:	7da0      	ldrb	r0, [r4, #22]
 800f56a:	f080 0001 	eor.w	r0, r0, #1
 800f56e:	b003      	add	sp, #12
 800f570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f574:	9a01      	ldr	r2, [sp, #4]
 800f576:	601a      	str	r2, [r3, #0]
 800f578:	e7ee      	b.n	800f558 <ucdr_serialize_endian_uint32_t+0xc0>
 800f57a:	68a2      	ldr	r2, [r4, #8]
 800f57c:	6923      	ldr	r3, [r4, #16]
 800f57e:	7da0      	ldrb	r0, [r4, #22]
 800f580:	f884 8015 	strb.w	r8, [r4, #21]
 800f584:	1bd2      	subs	r2, r2, r7
 800f586:	1bdb      	subs	r3, r3, r7
 800f588:	f080 0001 	eor.w	r0, r0, #1
 800f58c:	60a2      	str	r2, [r4, #8]
 800f58e:	6123      	str	r3, [r4, #16]
 800f590:	b003      	add	sp, #12
 800f592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f596:	68a3      	ldr	r3, [r4, #8]
 800f598:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f59c:	701a      	strb	r2, [r3, #0]
 800f59e:	68a3      	ldr	r3, [r4, #8]
 800f5a0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f5a4:	701a      	strb	r2, [r3, #0]
 800f5a6:	68a3      	ldr	r3, [r4, #8]
 800f5a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f5ac:	701a      	strb	r2, [r3, #0]
 800f5ae:	e7ad      	b.n	800f50c <ucdr_serialize_endian_uint32_t+0x74>
 800f5b0:	ad01      	add	r5, sp, #4
 800f5b2:	4629      	mov	r1, r5
 800f5b4:	463a      	mov	r2, r7
 800f5b6:	4630      	mov	r0, r6
 800f5b8:	f00a fbeb 	bl	8019d92 <memcpy>
 800f5bc:	68a0      	ldr	r0, [r4, #8]
 800f5be:	464a      	mov	r2, r9
 800f5c0:	19e9      	adds	r1, r5, r7
 800f5c2:	f00a fbe6 	bl	8019d92 <memcpy>
 800f5c6:	e7a1      	b.n	800f50c <ucdr_serialize_endian_uint32_t+0x74>

0800f5c8 <ucdr_deserialize_uint32_t>:
 800f5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5cc:	460d      	mov	r5, r1
 800f5ce:	2104      	movs	r1, #4
 800f5d0:	4604      	mov	r4, r0
 800f5d2:	f000 fe0b 	bl	80101ec <ucdr_buffer_alignment>
 800f5d6:	4601      	mov	r1, r0
 800f5d8:	4620      	mov	r0, r4
 800f5da:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f5de:	f000 fe49 	bl	8010274 <ucdr_advance_buffer>
 800f5e2:	2104      	movs	r1, #4
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f000 fda1 	bl	801012c <ucdr_check_buffer_available_for>
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	d138      	bne.n	800f660 <ucdr_deserialize_uint32_t+0x98>
 800f5ee:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f5f2:	42b7      	cmp	r7, r6
 800f5f4:	d92f      	bls.n	800f656 <ucdr_deserialize_uint32_t+0x8e>
 800f5f6:	6923      	ldr	r3, [r4, #16]
 800f5f8:	60a7      	str	r7, [r4, #8]
 800f5fa:	1bbf      	subs	r7, r7, r6
 800f5fc:	443b      	add	r3, r7
 800f5fe:	f1c7 0904 	rsb	r9, r7, #4
 800f602:	6123      	str	r3, [r4, #16]
 800f604:	4649      	mov	r1, r9
 800f606:	4620      	mov	r0, r4
 800f608:	f000 fd9c 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d046      	beq.n	800f69e <ucdr_deserialize_uint32_t+0xd6>
 800f610:	7d23      	ldrb	r3, [r4, #20]
 800f612:	2b01      	cmp	r3, #1
 800f614:	d05c      	beq.n	800f6d0 <ucdr_deserialize_uint32_t+0x108>
 800f616:	78f3      	ldrb	r3, [r6, #3]
 800f618:	702b      	strb	r3, [r5, #0]
 800f61a:	2f00      	cmp	r7, #0
 800f61c:	d04c      	beq.n	800f6b8 <ucdr_deserialize_uint32_t+0xf0>
 800f61e:	78b3      	ldrb	r3, [r6, #2]
 800f620:	706b      	strb	r3, [r5, #1]
 800f622:	2f01      	cmp	r7, #1
 800f624:	f105 0302 	add.w	r3, r5, #2
 800f628:	d04a      	beq.n	800f6c0 <ucdr_deserialize_uint32_t+0xf8>
 800f62a:	7873      	ldrb	r3, [r6, #1]
 800f62c:	70ab      	strb	r3, [r5, #2]
 800f62e:	2f02      	cmp	r7, #2
 800f630:	f105 0303 	add.w	r3, r5, #3
 800f634:	d048      	beq.n	800f6c8 <ucdr_deserialize_uint32_t+0x100>
 800f636:	7833      	ldrb	r3, [r6, #0]
 800f638:	70eb      	strb	r3, [r5, #3]
 800f63a:	6923      	ldr	r3, [r4, #16]
 800f63c:	68a2      	ldr	r2, [r4, #8]
 800f63e:	7da0      	ldrb	r0, [r4, #22]
 800f640:	2104      	movs	r1, #4
 800f642:	3304      	adds	r3, #4
 800f644:	444a      	add	r2, r9
 800f646:	1bdb      	subs	r3, r3, r7
 800f648:	7561      	strb	r1, [r4, #21]
 800f64a:	60a2      	str	r2, [r4, #8]
 800f64c:	6123      	str	r3, [r4, #16]
 800f64e:	f080 0001 	eor.w	r0, r0, #1
 800f652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f656:	2104      	movs	r1, #4
 800f658:	4620      	mov	r0, r4
 800f65a:	f000 fd73 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f65e:	b1b0      	cbz	r0, 800f68e <ucdr_deserialize_uint32_t+0xc6>
 800f660:	7d23      	ldrb	r3, [r4, #20]
 800f662:	2b01      	cmp	r3, #1
 800f664:	68a3      	ldr	r3, [r4, #8]
 800f666:	d017      	beq.n	800f698 <ucdr_deserialize_uint32_t+0xd0>
 800f668:	78db      	ldrb	r3, [r3, #3]
 800f66a:	702b      	strb	r3, [r5, #0]
 800f66c:	68a3      	ldr	r3, [r4, #8]
 800f66e:	789b      	ldrb	r3, [r3, #2]
 800f670:	706b      	strb	r3, [r5, #1]
 800f672:	68a3      	ldr	r3, [r4, #8]
 800f674:	785b      	ldrb	r3, [r3, #1]
 800f676:	70ab      	strb	r3, [r5, #2]
 800f678:	68a3      	ldr	r3, [r4, #8]
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	70eb      	strb	r3, [r5, #3]
 800f67e:	68a2      	ldr	r2, [r4, #8]
 800f680:	6923      	ldr	r3, [r4, #16]
 800f682:	3204      	adds	r2, #4
 800f684:	3304      	adds	r3, #4
 800f686:	2104      	movs	r1, #4
 800f688:	60a2      	str	r2, [r4, #8]
 800f68a:	6123      	str	r3, [r4, #16]
 800f68c:	7561      	strb	r1, [r4, #21]
 800f68e:	7da0      	ldrb	r0, [r4, #22]
 800f690:	f080 0001 	eor.w	r0, r0, #1
 800f694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	602b      	str	r3, [r5, #0]
 800f69c:	e7ef      	b.n	800f67e <ucdr_deserialize_uint32_t+0xb6>
 800f69e:	68a2      	ldr	r2, [r4, #8]
 800f6a0:	6923      	ldr	r3, [r4, #16]
 800f6a2:	7da0      	ldrb	r0, [r4, #22]
 800f6a4:	f884 8015 	strb.w	r8, [r4, #21]
 800f6a8:	1bd2      	subs	r2, r2, r7
 800f6aa:	1bdb      	subs	r3, r3, r7
 800f6ac:	60a2      	str	r2, [r4, #8]
 800f6ae:	6123      	str	r3, [r4, #16]
 800f6b0:	f080 0001 	eor.w	r0, r0, #1
 800f6b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6b8:	68a3      	ldr	r3, [r4, #8]
 800f6ba:	789b      	ldrb	r3, [r3, #2]
 800f6bc:	706b      	strb	r3, [r5, #1]
 800f6be:	1cab      	adds	r3, r5, #2
 800f6c0:	68a2      	ldr	r2, [r4, #8]
 800f6c2:	7852      	ldrb	r2, [r2, #1]
 800f6c4:	f803 2b01 	strb.w	r2, [r3], #1
 800f6c8:	68a2      	ldr	r2, [r4, #8]
 800f6ca:	7812      	ldrb	r2, [r2, #0]
 800f6cc:	701a      	strb	r2, [r3, #0]
 800f6ce:	e7b4      	b.n	800f63a <ucdr_deserialize_uint32_t+0x72>
 800f6d0:	4631      	mov	r1, r6
 800f6d2:	463a      	mov	r2, r7
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	f00a fb5c 	bl	8019d92 <memcpy>
 800f6da:	68a1      	ldr	r1, [r4, #8]
 800f6dc:	464a      	mov	r2, r9
 800f6de:	19e8      	adds	r0, r5, r7
 800f6e0:	f00a fb57 	bl	8019d92 <memcpy>
 800f6e4:	e7a9      	b.n	800f63a <ucdr_deserialize_uint32_t+0x72>
 800f6e6:	bf00      	nop

0800f6e8 <ucdr_deserialize_endian_uint32_t>:
 800f6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6ec:	460e      	mov	r6, r1
 800f6ee:	2104      	movs	r1, #4
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	4615      	mov	r5, r2
 800f6f4:	f000 fd7a 	bl	80101ec <ucdr_buffer_alignment>
 800f6f8:	4601      	mov	r1, r0
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f700:	f000 fdb8 	bl	8010274 <ucdr_advance_buffer>
 800f704:	2104      	movs	r1, #4
 800f706:	4620      	mov	r0, r4
 800f708:	f000 fd10 	bl	801012c <ucdr_check_buffer_available_for>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	d13c      	bne.n	800f78a <ucdr_deserialize_endian_uint32_t+0xa2>
 800f710:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f714:	42bb      	cmp	r3, r7
 800f716:	d933      	bls.n	800f780 <ucdr_deserialize_endian_uint32_t+0x98>
 800f718:	eba3 0807 	sub.w	r8, r3, r7
 800f71c:	60a3      	str	r3, [r4, #8]
 800f71e:	6923      	ldr	r3, [r4, #16]
 800f720:	f1c8 0a04 	rsb	sl, r8, #4
 800f724:	4443      	add	r3, r8
 800f726:	6123      	str	r3, [r4, #16]
 800f728:	4651      	mov	r1, sl
 800f72a:	4620      	mov	r0, r4
 800f72c:	f000 fd0a 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f730:	2800      	cmp	r0, #0
 800f732:	d048      	beq.n	800f7c6 <ucdr_deserialize_endian_uint32_t+0xde>
 800f734:	2e01      	cmp	r6, #1
 800f736:	d061      	beq.n	800f7fc <ucdr_deserialize_endian_uint32_t+0x114>
 800f738:	78fb      	ldrb	r3, [r7, #3]
 800f73a:	702b      	strb	r3, [r5, #0]
 800f73c:	f1b8 0f00 	cmp.w	r8, #0
 800f740:	d050      	beq.n	800f7e4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f742:	78bb      	ldrb	r3, [r7, #2]
 800f744:	706b      	strb	r3, [r5, #1]
 800f746:	f1b8 0f01 	cmp.w	r8, #1
 800f74a:	f105 0302 	add.w	r3, r5, #2
 800f74e:	d04d      	beq.n	800f7ec <ucdr_deserialize_endian_uint32_t+0x104>
 800f750:	787b      	ldrb	r3, [r7, #1]
 800f752:	70ab      	strb	r3, [r5, #2]
 800f754:	f1b8 0f02 	cmp.w	r8, #2
 800f758:	f105 0303 	add.w	r3, r5, #3
 800f75c:	d04a      	beq.n	800f7f4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f75e:	783b      	ldrb	r3, [r7, #0]
 800f760:	70eb      	strb	r3, [r5, #3]
 800f762:	6923      	ldr	r3, [r4, #16]
 800f764:	68a2      	ldr	r2, [r4, #8]
 800f766:	7da0      	ldrb	r0, [r4, #22]
 800f768:	2104      	movs	r1, #4
 800f76a:	3304      	adds	r3, #4
 800f76c:	4452      	add	r2, sl
 800f76e:	eba3 0308 	sub.w	r3, r3, r8
 800f772:	7561      	strb	r1, [r4, #21]
 800f774:	60a2      	str	r2, [r4, #8]
 800f776:	6123      	str	r3, [r4, #16]
 800f778:	f080 0001 	eor.w	r0, r0, #1
 800f77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f780:	2104      	movs	r1, #4
 800f782:	4620      	mov	r0, r4
 800f784:	f000 fcde 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f788:	b1a8      	cbz	r0, 800f7b6 <ucdr_deserialize_endian_uint32_t+0xce>
 800f78a:	2e01      	cmp	r6, #1
 800f78c:	68a3      	ldr	r3, [r4, #8]
 800f78e:	d017      	beq.n	800f7c0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f790:	78db      	ldrb	r3, [r3, #3]
 800f792:	702b      	strb	r3, [r5, #0]
 800f794:	68a3      	ldr	r3, [r4, #8]
 800f796:	789b      	ldrb	r3, [r3, #2]
 800f798:	706b      	strb	r3, [r5, #1]
 800f79a:	68a3      	ldr	r3, [r4, #8]
 800f79c:	785b      	ldrb	r3, [r3, #1]
 800f79e:	70ab      	strb	r3, [r5, #2]
 800f7a0:	68a3      	ldr	r3, [r4, #8]
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	70eb      	strb	r3, [r5, #3]
 800f7a6:	68a2      	ldr	r2, [r4, #8]
 800f7a8:	6923      	ldr	r3, [r4, #16]
 800f7aa:	3204      	adds	r2, #4
 800f7ac:	3304      	adds	r3, #4
 800f7ae:	2104      	movs	r1, #4
 800f7b0:	60a2      	str	r2, [r4, #8]
 800f7b2:	6123      	str	r3, [r4, #16]
 800f7b4:	7561      	strb	r1, [r4, #21]
 800f7b6:	7da0      	ldrb	r0, [r4, #22]
 800f7b8:	f080 0001 	eor.w	r0, r0, #1
 800f7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	602b      	str	r3, [r5, #0]
 800f7c4:	e7ef      	b.n	800f7a6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800f7c6:	68a2      	ldr	r2, [r4, #8]
 800f7c8:	6923      	ldr	r3, [r4, #16]
 800f7ca:	7da0      	ldrb	r0, [r4, #22]
 800f7cc:	f884 9015 	strb.w	r9, [r4, #21]
 800f7d0:	eba2 0208 	sub.w	r2, r2, r8
 800f7d4:	eba3 0308 	sub.w	r3, r3, r8
 800f7d8:	60a2      	str	r2, [r4, #8]
 800f7da:	6123      	str	r3, [r4, #16]
 800f7dc:	f080 0001 	eor.w	r0, r0, #1
 800f7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7e4:	68a3      	ldr	r3, [r4, #8]
 800f7e6:	789b      	ldrb	r3, [r3, #2]
 800f7e8:	706b      	strb	r3, [r5, #1]
 800f7ea:	1cab      	adds	r3, r5, #2
 800f7ec:	68a2      	ldr	r2, [r4, #8]
 800f7ee:	7852      	ldrb	r2, [r2, #1]
 800f7f0:	f803 2b01 	strb.w	r2, [r3], #1
 800f7f4:	68a2      	ldr	r2, [r4, #8]
 800f7f6:	7812      	ldrb	r2, [r2, #0]
 800f7f8:	701a      	strb	r2, [r3, #0]
 800f7fa:	e7b2      	b.n	800f762 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f7fc:	4639      	mov	r1, r7
 800f7fe:	4642      	mov	r2, r8
 800f800:	4628      	mov	r0, r5
 800f802:	f00a fac6 	bl	8019d92 <memcpy>
 800f806:	68a1      	ldr	r1, [r4, #8]
 800f808:	4652      	mov	r2, sl
 800f80a:	eb05 0008 	add.w	r0, r5, r8
 800f80e:	f00a fac0 	bl	8019d92 <memcpy>
 800f812:	e7a6      	b.n	800f762 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f814 <ucdr_serialize_uint64_t>:
 800f814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f818:	2108      	movs	r1, #8
 800f81a:	b082      	sub	sp, #8
 800f81c:	4604      	mov	r4, r0
 800f81e:	e9cd 2300 	strd	r2, r3, [sp]
 800f822:	f000 fce3 	bl	80101ec <ucdr_buffer_alignment>
 800f826:	4601      	mov	r1, r0
 800f828:	4620      	mov	r0, r4
 800f82a:	7d67      	ldrb	r7, [r4, #21]
 800f82c:	f000 fd22 	bl	8010274 <ucdr_advance_buffer>
 800f830:	2108      	movs	r1, #8
 800f832:	4620      	mov	r0, r4
 800f834:	f000 fc7a 	bl	801012c <ucdr_check_buffer_available_for>
 800f838:	2800      	cmp	r0, #0
 800f83a:	d14e      	bne.n	800f8da <ucdr_serialize_uint64_t+0xc6>
 800f83c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f840:	42ab      	cmp	r3, r5
 800f842:	d945      	bls.n	800f8d0 <ucdr_serialize_uint64_t+0xbc>
 800f844:	1b5e      	subs	r6, r3, r5
 800f846:	60a3      	str	r3, [r4, #8]
 800f848:	6923      	ldr	r3, [r4, #16]
 800f84a:	f1c6 0808 	rsb	r8, r6, #8
 800f84e:	4433      	add	r3, r6
 800f850:	6123      	str	r3, [r4, #16]
 800f852:	4641      	mov	r1, r8
 800f854:	4620      	mov	r0, r4
 800f856:	f000 fc75 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f85a:	2800      	cmp	r0, #0
 800f85c:	d074      	beq.n	800f948 <ucdr_serialize_uint64_t+0x134>
 800f85e:	7d23      	ldrb	r3, [r4, #20]
 800f860:	2b01      	cmp	r3, #1
 800f862:	f000 809b 	beq.w	800f99c <ucdr_serialize_uint64_t+0x188>
 800f866:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f86a:	702b      	strb	r3, [r5, #0]
 800f86c:	2e00      	cmp	r6, #0
 800f86e:	d078      	beq.n	800f962 <ucdr_serialize_uint64_t+0x14e>
 800f870:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f874:	706b      	strb	r3, [r5, #1]
 800f876:	2e01      	cmp	r6, #1
 800f878:	d077      	beq.n	800f96a <ucdr_serialize_uint64_t+0x156>
 800f87a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f87e:	70ab      	strb	r3, [r5, #2]
 800f880:	2e02      	cmp	r6, #2
 800f882:	d076      	beq.n	800f972 <ucdr_serialize_uint64_t+0x15e>
 800f884:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f888:	70eb      	strb	r3, [r5, #3]
 800f88a:	2e03      	cmp	r6, #3
 800f88c:	d075      	beq.n	800f97a <ucdr_serialize_uint64_t+0x166>
 800f88e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f892:	712b      	strb	r3, [r5, #4]
 800f894:	2e04      	cmp	r6, #4
 800f896:	d074      	beq.n	800f982 <ucdr_serialize_uint64_t+0x16e>
 800f898:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f89c:	716b      	strb	r3, [r5, #5]
 800f89e:	2e05      	cmp	r6, #5
 800f8a0:	d073      	beq.n	800f98a <ucdr_serialize_uint64_t+0x176>
 800f8a2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f8a6:	71ab      	strb	r3, [r5, #6]
 800f8a8:	2e06      	cmp	r6, #6
 800f8aa:	d072      	beq.n	800f992 <ucdr_serialize_uint64_t+0x17e>
 800f8ac:	f89d 3000 	ldrb.w	r3, [sp]
 800f8b0:	71eb      	strb	r3, [r5, #7]
 800f8b2:	6923      	ldr	r3, [r4, #16]
 800f8b4:	68a2      	ldr	r2, [r4, #8]
 800f8b6:	7da0      	ldrb	r0, [r4, #22]
 800f8b8:	3308      	adds	r3, #8
 800f8ba:	1b9e      	subs	r6, r3, r6
 800f8bc:	4442      	add	r2, r8
 800f8be:	2308      	movs	r3, #8
 800f8c0:	f080 0001 	eor.w	r0, r0, #1
 800f8c4:	60a2      	str	r2, [r4, #8]
 800f8c6:	6126      	str	r6, [r4, #16]
 800f8c8:	7563      	strb	r3, [r4, #21]
 800f8ca:	b002      	add	sp, #8
 800f8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8d0:	2108      	movs	r1, #8
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	f000 fc36 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f8d8:	b350      	cbz	r0, 800f930 <ucdr_serialize_uint64_t+0x11c>
 800f8da:	7d23      	ldrb	r3, [r4, #20]
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	d02d      	beq.n	800f93c <ucdr_serialize_uint64_t+0x128>
 800f8e0:	68a3      	ldr	r3, [r4, #8]
 800f8e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f8e6:	701a      	strb	r2, [r3, #0]
 800f8e8:	68a3      	ldr	r3, [r4, #8]
 800f8ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f8ee:	705a      	strb	r2, [r3, #1]
 800f8f0:	68a3      	ldr	r3, [r4, #8]
 800f8f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f8f6:	709a      	strb	r2, [r3, #2]
 800f8f8:	68a3      	ldr	r3, [r4, #8]
 800f8fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f8fe:	70da      	strb	r2, [r3, #3]
 800f900:	68a3      	ldr	r3, [r4, #8]
 800f902:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f906:	711a      	strb	r2, [r3, #4]
 800f908:	68a3      	ldr	r3, [r4, #8]
 800f90a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f90e:	715a      	strb	r2, [r3, #5]
 800f910:	68a3      	ldr	r3, [r4, #8]
 800f912:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f916:	719a      	strb	r2, [r3, #6]
 800f918:	68a3      	ldr	r3, [r4, #8]
 800f91a:	f89d 2000 	ldrb.w	r2, [sp]
 800f91e:	71da      	strb	r2, [r3, #7]
 800f920:	68a2      	ldr	r2, [r4, #8]
 800f922:	6923      	ldr	r3, [r4, #16]
 800f924:	3208      	adds	r2, #8
 800f926:	3308      	adds	r3, #8
 800f928:	2108      	movs	r1, #8
 800f92a:	60a2      	str	r2, [r4, #8]
 800f92c:	6123      	str	r3, [r4, #16]
 800f92e:	7561      	strb	r1, [r4, #21]
 800f930:	7da0      	ldrb	r0, [r4, #22]
 800f932:	f080 0001 	eor.w	r0, r0, #1
 800f936:	b002      	add	sp, #8
 800f938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93c:	466b      	mov	r3, sp
 800f93e:	cb03      	ldmia	r3!, {r0, r1}
 800f940:	68a3      	ldr	r3, [r4, #8]
 800f942:	6018      	str	r0, [r3, #0]
 800f944:	6059      	str	r1, [r3, #4]
 800f946:	e7eb      	b.n	800f920 <ucdr_serialize_uint64_t+0x10c>
 800f948:	68a2      	ldr	r2, [r4, #8]
 800f94a:	6923      	ldr	r3, [r4, #16]
 800f94c:	7da0      	ldrb	r0, [r4, #22]
 800f94e:	7567      	strb	r7, [r4, #21]
 800f950:	1b92      	subs	r2, r2, r6
 800f952:	1b9b      	subs	r3, r3, r6
 800f954:	f080 0001 	eor.w	r0, r0, #1
 800f958:	60a2      	str	r2, [r4, #8]
 800f95a:	6123      	str	r3, [r4, #16]
 800f95c:	b002      	add	sp, #8
 800f95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f962:	68a3      	ldr	r3, [r4, #8]
 800f964:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f968:	701a      	strb	r2, [r3, #0]
 800f96a:	68a3      	ldr	r3, [r4, #8]
 800f96c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f970:	701a      	strb	r2, [r3, #0]
 800f972:	68a3      	ldr	r3, [r4, #8]
 800f974:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f978:	701a      	strb	r2, [r3, #0]
 800f97a:	68a3      	ldr	r3, [r4, #8]
 800f97c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f980:	701a      	strb	r2, [r3, #0]
 800f982:	68a3      	ldr	r3, [r4, #8]
 800f984:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f988:	701a      	strb	r2, [r3, #0]
 800f98a:	68a3      	ldr	r3, [r4, #8]
 800f98c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f990:	701a      	strb	r2, [r3, #0]
 800f992:	68a3      	ldr	r3, [r4, #8]
 800f994:	f89d 2000 	ldrb.w	r2, [sp]
 800f998:	701a      	strb	r2, [r3, #0]
 800f99a:	e78a      	b.n	800f8b2 <ucdr_serialize_uint64_t+0x9e>
 800f99c:	4628      	mov	r0, r5
 800f99e:	466d      	mov	r5, sp
 800f9a0:	4629      	mov	r1, r5
 800f9a2:	4632      	mov	r2, r6
 800f9a4:	f00a f9f5 	bl	8019d92 <memcpy>
 800f9a8:	68a0      	ldr	r0, [r4, #8]
 800f9aa:	4642      	mov	r2, r8
 800f9ac:	19a9      	adds	r1, r5, r6
 800f9ae:	f00a f9f0 	bl	8019d92 <memcpy>
 800f9b2:	e77e      	b.n	800f8b2 <ucdr_serialize_uint64_t+0x9e>

0800f9b4 <ucdr_serialize_int16_t>:
 800f9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b8:	b082      	sub	sp, #8
 800f9ba:	460b      	mov	r3, r1
 800f9bc:	2102      	movs	r1, #2
 800f9be:	4604      	mov	r4, r0
 800f9c0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f9c4:	f000 fc12 	bl	80101ec <ucdr_buffer_alignment>
 800f9c8:	4601      	mov	r1, r0
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	7d67      	ldrb	r7, [r4, #21]
 800f9ce:	f000 fc51 	bl	8010274 <ucdr_advance_buffer>
 800f9d2:	2102      	movs	r1, #2
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f000 fba9 	bl	801012c <ucdr_check_buffer_available_for>
 800f9da:	bb78      	cbnz	r0, 800fa3c <ucdr_serialize_int16_t+0x88>
 800f9dc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f9e0:	42ab      	cmp	r3, r5
 800f9e2:	d926      	bls.n	800fa32 <ucdr_serialize_int16_t+0x7e>
 800f9e4:	1b5e      	subs	r6, r3, r5
 800f9e6:	60a3      	str	r3, [r4, #8]
 800f9e8:	6923      	ldr	r3, [r4, #16]
 800f9ea:	f1c6 0802 	rsb	r8, r6, #2
 800f9ee:	4433      	add	r3, r6
 800f9f0:	6123      	str	r3, [r4, #16]
 800f9f2:	4641      	mov	r1, r8
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	f000 fba5 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	d03b      	beq.n	800fa76 <ucdr_serialize_int16_t+0xc2>
 800f9fe:	7d23      	ldrb	r3, [r4, #20]
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d04a      	beq.n	800fa9a <ucdr_serialize_int16_t+0xe6>
 800fa04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa08:	702b      	strb	r3, [r5, #0]
 800fa0a:	2e00      	cmp	r6, #0
 800fa0c:	d040      	beq.n	800fa90 <ucdr_serialize_int16_t+0xdc>
 800fa0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fa12:	706b      	strb	r3, [r5, #1]
 800fa14:	6923      	ldr	r3, [r4, #16]
 800fa16:	68a2      	ldr	r2, [r4, #8]
 800fa18:	7da0      	ldrb	r0, [r4, #22]
 800fa1a:	3302      	adds	r3, #2
 800fa1c:	1b9e      	subs	r6, r3, r6
 800fa1e:	4442      	add	r2, r8
 800fa20:	2302      	movs	r3, #2
 800fa22:	f080 0001 	eor.w	r0, r0, #1
 800fa26:	60a2      	str	r2, [r4, #8]
 800fa28:	6126      	str	r6, [r4, #16]
 800fa2a:	7563      	strb	r3, [r4, #21]
 800fa2c:	b002      	add	sp, #8
 800fa2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa32:	2102      	movs	r1, #2
 800fa34:	4620      	mov	r0, r4
 800fa36:	f000 fb85 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800fa3a:	b190      	cbz	r0, 800fa62 <ucdr_serialize_int16_t+0xae>
 800fa3c:	7d23      	ldrb	r3, [r4, #20]
 800fa3e:	2b01      	cmp	r3, #1
 800fa40:	68a3      	ldr	r3, [r4, #8]
 800fa42:	d014      	beq.n	800fa6e <ucdr_serialize_int16_t+0xba>
 800fa44:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fa48:	701a      	strb	r2, [r3, #0]
 800fa4a:	68a3      	ldr	r3, [r4, #8]
 800fa4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa50:	705a      	strb	r2, [r3, #1]
 800fa52:	68a2      	ldr	r2, [r4, #8]
 800fa54:	6923      	ldr	r3, [r4, #16]
 800fa56:	3202      	adds	r2, #2
 800fa58:	3302      	adds	r3, #2
 800fa5a:	2102      	movs	r1, #2
 800fa5c:	60a2      	str	r2, [r4, #8]
 800fa5e:	6123      	str	r3, [r4, #16]
 800fa60:	7561      	strb	r1, [r4, #21]
 800fa62:	7da0      	ldrb	r0, [r4, #22]
 800fa64:	f080 0001 	eor.w	r0, r0, #1
 800fa68:	b002      	add	sp, #8
 800fa6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa6e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fa72:	801a      	strh	r2, [r3, #0]
 800fa74:	e7ed      	b.n	800fa52 <ucdr_serialize_int16_t+0x9e>
 800fa76:	68a2      	ldr	r2, [r4, #8]
 800fa78:	6923      	ldr	r3, [r4, #16]
 800fa7a:	7da0      	ldrb	r0, [r4, #22]
 800fa7c:	7567      	strb	r7, [r4, #21]
 800fa7e:	1b92      	subs	r2, r2, r6
 800fa80:	1b9b      	subs	r3, r3, r6
 800fa82:	f080 0001 	eor.w	r0, r0, #1
 800fa86:	60a2      	str	r2, [r4, #8]
 800fa88:	6123      	str	r3, [r4, #16]
 800fa8a:	b002      	add	sp, #8
 800fa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa90:	68a3      	ldr	r3, [r4, #8]
 800fa92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa96:	701a      	strb	r2, [r3, #0]
 800fa98:	e7bc      	b.n	800fa14 <ucdr_serialize_int16_t+0x60>
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	f10d 0506 	add.w	r5, sp, #6
 800faa0:	4629      	mov	r1, r5
 800faa2:	4632      	mov	r2, r6
 800faa4:	f00a f975 	bl	8019d92 <memcpy>
 800faa8:	68a0      	ldr	r0, [r4, #8]
 800faaa:	4642      	mov	r2, r8
 800faac:	19a9      	adds	r1, r5, r6
 800faae:	f00a f970 	bl	8019d92 <memcpy>
 800fab2:	e7af      	b.n	800fa14 <ucdr_serialize_int16_t+0x60>

0800fab4 <ucdr_deserialize_int16_t>:
 800fab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fab8:	460d      	mov	r5, r1
 800faba:	2102      	movs	r1, #2
 800fabc:	4604      	mov	r4, r0
 800fabe:	f000 fb95 	bl	80101ec <ucdr_buffer_alignment>
 800fac2:	4601      	mov	r1, r0
 800fac4:	4620      	mov	r0, r4
 800fac6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800faca:	f000 fbd3 	bl	8010274 <ucdr_advance_buffer>
 800face:	2102      	movs	r1, #2
 800fad0:	4620      	mov	r0, r4
 800fad2:	f000 fb2b 	bl	801012c <ucdr_check_buffer_available_for>
 800fad6:	bb60      	cbnz	r0, 800fb32 <ucdr_deserialize_int16_t+0x7e>
 800fad8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fadc:	42be      	cmp	r6, r7
 800fade:	d923      	bls.n	800fb28 <ucdr_deserialize_int16_t+0x74>
 800fae0:	6923      	ldr	r3, [r4, #16]
 800fae2:	60a6      	str	r6, [r4, #8]
 800fae4:	1bf6      	subs	r6, r6, r7
 800fae6:	4433      	add	r3, r6
 800fae8:	f1c6 0902 	rsb	r9, r6, #2
 800faec:	6123      	str	r3, [r4, #16]
 800faee:	4649      	mov	r1, r9
 800faf0:	4620      	mov	r0, r4
 800faf2:	f000 fb27 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	d034      	beq.n	800fb64 <ucdr_deserialize_int16_t+0xb0>
 800fafa:	7d23      	ldrb	r3, [r4, #20]
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d042      	beq.n	800fb86 <ucdr_deserialize_int16_t+0xd2>
 800fb00:	787b      	ldrb	r3, [r7, #1]
 800fb02:	702b      	strb	r3, [r5, #0]
 800fb04:	2e00      	cmp	r6, #0
 800fb06:	d03a      	beq.n	800fb7e <ucdr_deserialize_int16_t+0xca>
 800fb08:	783b      	ldrb	r3, [r7, #0]
 800fb0a:	706b      	strb	r3, [r5, #1]
 800fb0c:	6923      	ldr	r3, [r4, #16]
 800fb0e:	68a2      	ldr	r2, [r4, #8]
 800fb10:	7da0      	ldrb	r0, [r4, #22]
 800fb12:	2102      	movs	r1, #2
 800fb14:	3302      	adds	r3, #2
 800fb16:	444a      	add	r2, r9
 800fb18:	1b9b      	subs	r3, r3, r6
 800fb1a:	7561      	strb	r1, [r4, #21]
 800fb1c:	60a2      	str	r2, [r4, #8]
 800fb1e:	6123      	str	r3, [r4, #16]
 800fb20:	f080 0001 	eor.w	r0, r0, #1
 800fb24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb28:	2102      	movs	r1, #2
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	f000 fb0a 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800fb30:	b180      	cbz	r0, 800fb54 <ucdr_deserialize_int16_t+0xa0>
 800fb32:	7d23      	ldrb	r3, [r4, #20]
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	68a3      	ldr	r3, [r4, #8]
 800fb38:	d011      	beq.n	800fb5e <ucdr_deserialize_int16_t+0xaa>
 800fb3a:	785b      	ldrb	r3, [r3, #1]
 800fb3c:	702b      	strb	r3, [r5, #0]
 800fb3e:	68a3      	ldr	r3, [r4, #8]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	706b      	strb	r3, [r5, #1]
 800fb44:	68a2      	ldr	r2, [r4, #8]
 800fb46:	6923      	ldr	r3, [r4, #16]
 800fb48:	3202      	adds	r2, #2
 800fb4a:	3302      	adds	r3, #2
 800fb4c:	2102      	movs	r1, #2
 800fb4e:	60a2      	str	r2, [r4, #8]
 800fb50:	6123      	str	r3, [r4, #16]
 800fb52:	7561      	strb	r1, [r4, #21]
 800fb54:	7da0      	ldrb	r0, [r4, #22]
 800fb56:	f080 0001 	eor.w	r0, r0, #1
 800fb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb5e:	881b      	ldrh	r3, [r3, #0]
 800fb60:	802b      	strh	r3, [r5, #0]
 800fb62:	e7ef      	b.n	800fb44 <ucdr_deserialize_int16_t+0x90>
 800fb64:	68a2      	ldr	r2, [r4, #8]
 800fb66:	6923      	ldr	r3, [r4, #16]
 800fb68:	7da0      	ldrb	r0, [r4, #22]
 800fb6a:	f884 8015 	strb.w	r8, [r4, #21]
 800fb6e:	1b92      	subs	r2, r2, r6
 800fb70:	1b9b      	subs	r3, r3, r6
 800fb72:	60a2      	str	r2, [r4, #8]
 800fb74:	6123      	str	r3, [r4, #16]
 800fb76:	f080 0001 	eor.w	r0, r0, #1
 800fb7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb7e:	68a3      	ldr	r3, [r4, #8]
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	706b      	strb	r3, [r5, #1]
 800fb84:	e7c2      	b.n	800fb0c <ucdr_deserialize_int16_t+0x58>
 800fb86:	4639      	mov	r1, r7
 800fb88:	4632      	mov	r2, r6
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	f00a f901 	bl	8019d92 <memcpy>
 800fb90:	68a1      	ldr	r1, [r4, #8]
 800fb92:	464a      	mov	r2, r9
 800fb94:	19a8      	adds	r0, r5, r6
 800fb96:	f00a f8fc 	bl	8019d92 <memcpy>
 800fb9a:	e7b7      	b.n	800fb0c <ucdr_deserialize_int16_t+0x58>

0800fb9c <ucdr_serialize_int32_t>:
 800fb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fba0:	b082      	sub	sp, #8
 800fba2:	4604      	mov	r4, r0
 800fba4:	9101      	str	r1, [sp, #4]
 800fba6:	2104      	movs	r1, #4
 800fba8:	f000 fb20 	bl	80101ec <ucdr_buffer_alignment>
 800fbac:	4601      	mov	r1, r0
 800fbae:	4620      	mov	r0, r4
 800fbb0:	7d67      	ldrb	r7, [r4, #21]
 800fbb2:	f000 fb5f 	bl	8010274 <ucdr_advance_buffer>
 800fbb6:	2104      	movs	r1, #4
 800fbb8:	4620      	mov	r0, r4
 800fbba:	f000 fab7 	bl	801012c <ucdr_check_buffer_available_for>
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d139      	bne.n	800fc36 <ucdr_serialize_int32_t+0x9a>
 800fbc2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fbc6:	42ab      	cmp	r3, r5
 800fbc8:	d930      	bls.n	800fc2c <ucdr_serialize_int32_t+0x90>
 800fbca:	1b5e      	subs	r6, r3, r5
 800fbcc:	60a3      	str	r3, [r4, #8]
 800fbce:	6923      	ldr	r3, [r4, #16]
 800fbd0:	f1c6 0804 	rsb	r8, r6, #4
 800fbd4:	4433      	add	r3, r6
 800fbd6:	6123      	str	r3, [r4, #16]
 800fbd8:	4641      	mov	r1, r8
 800fbda:	4620      	mov	r0, r4
 800fbdc:	f000 fab2 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	d04c      	beq.n	800fc7e <ucdr_serialize_int32_t+0xe2>
 800fbe4:	7d23      	ldrb	r3, [r4, #20]
 800fbe6:	2b01      	cmp	r3, #1
 800fbe8:	d063      	beq.n	800fcb2 <ucdr_serialize_int32_t+0x116>
 800fbea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fbee:	702b      	strb	r3, [r5, #0]
 800fbf0:	2e00      	cmp	r6, #0
 800fbf2:	d051      	beq.n	800fc98 <ucdr_serialize_int32_t+0xfc>
 800fbf4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fbf8:	706b      	strb	r3, [r5, #1]
 800fbfa:	2e01      	cmp	r6, #1
 800fbfc:	d050      	beq.n	800fca0 <ucdr_serialize_int32_t+0x104>
 800fbfe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fc02:	70ab      	strb	r3, [r5, #2]
 800fc04:	2e02      	cmp	r6, #2
 800fc06:	d04f      	beq.n	800fca8 <ucdr_serialize_int32_t+0x10c>
 800fc08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fc0c:	70eb      	strb	r3, [r5, #3]
 800fc0e:	6923      	ldr	r3, [r4, #16]
 800fc10:	68a2      	ldr	r2, [r4, #8]
 800fc12:	7da0      	ldrb	r0, [r4, #22]
 800fc14:	3304      	adds	r3, #4
 800fc16:	1b9e      	subs	r6, r3, r6
 800fc18:	4442      	add	r2, r8
 800fc1a:	2304      	movs	r3, #4
 800fc1c:	f080 0001 	eor.w	r0, r0, #1
 800fc20:	60a2      	str	r2, [r4, #8]
 800fc22:	6126      	str	r6, [r4, #16]
 800fc24:	7563      	strb	r3, [r4, #21]
 800fc26:	b002      	add	sp, #8
 800fc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc2c:	2104      	movs	r1, #4
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f000 fa88 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800fc34:	b1d0      	cbz	r0, 800fc6c <ucdr_serialize_int32_t+0xd0>
 800fc36:	7d23      	ldrb	r3, [r4, #20]
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	68a3      	ldr	r3, [r4, #8]
 800fc3c:	d01c      	beq.n	800fc78 <ucdr_serialize_int32_t+0xdc>
 800fc3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fc42:	701a      	strb	r2, [r3, #0]
 800fc44:	68a3      	ldr	r3, [r4, #8]
 800fc46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc4a:	705a      	strb	r2, [r3, #1]
 800fc4c:	68a3      	ldr	r3, [r4, #8]
 800fc4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fc52:	709a      	strb	r2, [r3, #2]
 800fc54:	68a3      	ldr	r3, [r4, #8]
 800fc56:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fc5a:	70da      	strb	r2, [r3, #3]
 800fc5c:	68a2      	ldr	r2, [r4, #8]
 800fc5e:	6923      	ldr	r3, [r4, #16]
 800fc60:	3204      	adds	r2, #4
 800fc62:	3304      	adds	r3, #4
 800fc64:	2104      	movs	r1, #4
 800fc66:	60a2      	str	r2, [r4, #8]
 800fc68:	6123      	str	r3, [r4, #16]
 800fc6a:	7561      	strb	r1, [r4, #21]
 800fc6c:	7da0      	ldrb	r0, [r4, #22]
 800fc6e:	f080 0001 	eor.w	r0, r0, #1
 800fc72:	b002      	add	sp, #8
 800fc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc78:	9a01      	ldr	r2, [sp, #4]
 800fc7a:	601a      	str	r2, [r3, #0]
 800fc7c:	e7ee      	b.n	800fc5c <ucdr_serialize_int32_t+0xc0>
 800fc7e:	68a2      	ldr	r2, [r4, #8]
 800fc80:	6923      	ldr	r3, [r4, #16]
 800fc82:	7da0      	ldrb	r0, [r4, #22]
 800fc84:	7567      	strb	r7, [r4, #21]
 800fc86:	1b92      	subs	r2, r2, r6
 800fc88:	1b9b      	subs	r3, r3, r6
 800fc8a:	f080 0001 	eor.w	r0, r0, #1
 800fc8e:	60a2      	str	r2, [r4, #8]
 800fc90:	6123      	str	r3, [r4, #16]
 800fc92:	b002      	add	sp, #8
 800fc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc98:	68a3      	ldr	r3, [r4, #8]
 800fc9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc9e:	701a      	strb	r2, [r3, #0]
 800fca0:	68a3      	ldr	r3, [r4, #8]
 800fca2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fca6:	701a      	strb	r2, [r3, #0]
 800fca8:	68a3      	ldr	r3, [r4, #8]
 800fcaa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fcae:	701a      	strb	r2, [r3, #0]
 800fcb0:	e7ad      	b.n	800fc0e <ucdr_serialize_int32_t+0x72>
 800fcb2:	4628      	mov	r0, r5
 800fcb4:	ad01      	add	r5, sp, #4
 800fcb6:	4629      	mov	r1, r5
 800fcb8:	4632      	mov	r2, r6
 800fcba:	f00a f86a 	bl	8019d92 <memcpy>
 800fcbe:	68a0      	ldr	r0, [r4, #8]
 800fcc0:	4642      	mov	r2, r8
 800fcc2:	19a9      	adds	r1, r5, r6
 800fcc4:	f00a f865 	bl	8019d92 <memcpy>
 800fcc8:	e7a1      	b.n	800fc0e <ucdr_serialize_int32_t+0x72>
 800fcca:	bf00      	nop

0800fccc <ucdr_deserialize_int32_t>:
 800fccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcd0:	460d      	mov	r5, r1
 800fcd2:	2104      	movs	r1, #4
 800fcd4:	4604      	mov	r4, r0
 800fcd6:	f000 fa89 	bl	80101ec <ucdr_buffer_alignment>
 800fcda:	4601      	mov	r1, r0
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fce2:	f000 fac7 	bl	8010274 <ucdr_advance_buffer>
 800fce6:	2104      	movs	r1, #4
 800fce8:	4620      	mov	r0, r4
 800fcea:	f000 fa1f 	bl	801012c <ucdr_check_buffer_available_for>
 800fcee:	2800      	cmp	r0, #0
 800fcf0:	d138      	bne.n	800fd64 <ucdr_deserialize_int32_t+0x98>
 800fcf2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fcf6:	42b7      	cmp	r7, r6
 800fcf8:	d92f      	bls.n	800fd5a <ucdr_deserialize_int32_t+0x8e>
 800fcfa:	6923      	ldr	r3, [r4, #16]
 800fcfc:	60a7      	str	r7, [r4, #8]
 800fcfe:	1bbf      	subs	r7, r7, r6
 800fd00:	443b      	add	r3, r7
 800fd02:	f1c7 0904 	rsb	r9, r7, #4
 800fd06:	6123      	str	r3, [r4, #16]
 800fd08:	4649      	mov	r1, r9
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	f000 fa1a 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800fd10:	2800      	cmp	r0, #0
 800fd12:	d046      	beq.n	800fda2 <ucdr_deserialize_int32_t+0xd6>
 800fd14:	7d23      	ldrb	r3, [r4, #20]
 800fd16:	2b01      	cmp	r3, #1
 800fd18:	d05c      	beq.n	800fdd4 <ucdr_deserialize_int32_t+0x108>
 800fd1a:	78f3      	ldrb	r3, [r6, #3]
 800fd1c:	702b      	strb	r3, [r5, #0]
 800fd1e:	2f00      	cmp	r7, #0
 800fd20:	d04c      	beq.n	800fdbc <ucdr_deserialize_int32_t+0xf0>
 800fd22:	78b3      	ldrb	r3, [r6, #2]
 800fd24:	706b      	strb	r3, [r5, #1]
 800fd26:	2f01      	cmp	r7, #1
 800fd28:	f105 0302 	add.w	r3, r5, #2
 800fd2c:	d04a      	beq.n	800fdc4 <ucdr_deserialize_int32_t+0xf8>
 800fd2e:	7873      	ldrb	r3, [r6, #1]
 800fd30:	70ab      	strb	r3, [r5, #2]
 800fd32:	2f02      	cmp	r7, #2
 800fd34:	f105 0303 	add.w	r3, r5, #3
 800fd38:	d048      	beq.n	800fdcc <ucdr_deserialize_int32_t+0x100>
 800fd3a:	7833      	ldrb	r3, [r6, #0]
 800fd3c:	70eb      	strb	r3, [r5, #3]
 800fd3e:	6923      	ldr	r3, [r4, #16]
 800fd40:	68a2      	ldr	r2, [r4, #8]
 800fd42:	7da0      	ldrb	r0, [r4, #22]
 800fd44:	2104      	movs	r1, #4
 800fd46:	3304      	adds	r3, #4
 800fd48:	444a      	add	r2, r9
 800fd4a:	1bdb      	subs	r3, r3, r7
 800fd4c:	7561      	strb	r1, [r4, #21]
 800fd4e:	60a2      	str	r2, [r4, #8]
 800fd50:	6123      	str	r3, [r4, #16]
 800fd52:	f080 0001 	eor.w	r0, r0, #1
 800fd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd5a:	2104      	movs	r1, #4
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	f000 f9f1 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800fd62:	b1b0      	cbz	r0, 800fd92 <ucdr_deserialize_int32_t+0xc6>
 800fd64:	7d23      	ldrb	r3, [r4, #20]
 800fd66:	2b01      	cmp	r3, #1
 800fd68:	68a3      	ldr	r3, [r4, #8]
 800fd6a:	d017      	beq.n	800fd9c <ucdr_deserialize_int32_t+0xd0>
 800fd6c:	78db      	ldrb	r3, [r3, #3]
 800fd6e:	702b      	strb	r3, [r5, #0]
 800fd70:	68a3      	ldr	r3, [r4, #8]
 800fd72:	789b      	ldrb	r3, [r3, #2]
 800fd74:	706b      	strb	r3, [r5, #1]
 800fd76:	68a3      	ldr	r3, [r4, #8]
 800fd78:	785b      	ldrb	r3, [r3, #1]
 800fd7a:	70ab      	strb	r3, [r5, #2]
 800fd7c:	68a3      	ldr	r3, [r4, #8]
 800fd7e:	781b      	ldrb	r3, [r3, #0]
 800fd80:	70eb      	strb	r3, [r5, #3]
 800fd82:	68a2      	ldr	r2, [r4, #8]
 800fd84:	6923      	ldr	r3, [r4, #16]
 800fd86:	3204      	adds	r2, #4
 800fd88:	3304      	adds	r3, #4
 800fd8a:	2104      	movs	r1, #4
 800fd8c:	60a2      	str	r2, [r4, #8]
 800fd8e:	6123      	str	r3, [r4, #16]
 800fd90:	7561      	strb	r1, [r4, #21]
 800fd92:	7da0      	ldrb	r0, [r4, #22]
 800fd94:	f080 0001 	eor.w	r0, r0, #1
 800fd98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	602b      	str	r3, [r5, #0]
 800fda0:	e7ef      	b.n	800fd82 <ucdr_deserialize_int32_t+0xb6>
 800fda2:	68a2      	ldr	r2, [r4, #8]
 800fda4:	6923      	ldr	r3, [r4, #16]
 800fda6:	7da0      	ldrb	r0, [r4, #22]
 800fda8:	f884 8015 	strb.w	r8, [r4, #21]
 800fdac:	1bd2      	subs	r2, r2, r7
 800fdae:	1bdb      	subs	r3, r3, r7
 800fdb0:	60a2      	str	r2, [r4, #8]
 800fdb2:	6123      	str	r3, [r4, #16]
 800fdb4:	f080 0001 	eor.w	r0, r0, #1
 800fdb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdbc:	68a3      	ldr	r3, [r4, #8]
 800fdbe:	789b      	ldrb	r3, [r3, #2]
 800fdc0:	706b      	strb	r3, [r5, #1]
 800fdc2:	1cab      	adds	r3, r5, #2
 800fdc4:	68a2      	ldr	r2, [r4, #8]
 800fdc6:	7852      	ldrb	r2, [r2, #1]
 800fdc8:	f803 2b01 	strb.w	r2, [r3], #1
 800fdcc:	68a2      	ldr	r2, [r4, #8]
 800fdce:	7812      	ldrb	r2, [r2, #0]
 800fdd0:	701a      	strb	r2, [r3, #0]
 800fdd2:	e7b4      	b.n	800fd3e <ucdr_deserialize_int32_t+0x72>
 800fdd4:	4631      	mov	r1, r6
 800fdd6:	463a      	mov	r2, r7
 800fdd8:	4628      	mov	r0, r5
 800fdda:	f009 ffda 	bl	8019d92 <memcpy>
 800fdde:	68a1      	ldr	r1, [r4, #8]
 800fde0:	464a      	mov	r2, r9
 800fde2:	19e8      	adds	r0, r5, r7
 800fde4:	f009 ffd5 	bl	8019d92 <memcpy>
 800fde8:	e7a9      	b.n	800fd3e <ucdr_deserialize_int32_t+0x72>
 800fdea:	bf00      	nop

0800fdec <ucdr_serialize_endian_double>:
 800fdec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fdf0:	460e      	mov	r6, r1
 800fdf2:	b083      	sub	sp, #12
 800fdf4:	2108      	movs	r1, #8
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	ed8d 0b00 	vstr	d0, [sp]
 800fdfc:	f000 f9f6 	bl	80101ec <ucdr_buffer_alignment>
 800fe00:	4601      	mov	r1, r0
 800fe02:	4620      	mov	r0, r4
 800fe04:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fe08:	f000 fa34 	bl	8010274 <ucdr_advance_buffer>
 800fe0c:	2108      	movs	r1, #8
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f000 f98c 	bl	801012c <ucdr_check_buffer_available_for>
 800fe14:	2800      	cmp	r0, #0
 800fe16:	d14d      	bne.n	800feb4 <ucdr_serialize_endian_double+0xc8>
 800fe18:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800fe1c:	42bd      	cmp	r5, r7
 800fe1e:	d944      	bls.n	800feaa <ucdr_serialize_endian_double+0xbe>
 800fe20:	6923      	ldr	r3, [r4, #16]
 800fe22:	60a5      	str	r5, [r4, #8]
 800fe24:	1bed      	subs	r5, r5, r7
 800fe26:	442b      	add	r3, r5
 800fe28:	f1c5 0908 	rsb	r9, r5, #8
 800fe2c:	6123      	str	r3, [r4, #16]
 800fe2e:	4649      	mov	r1, r9
 800fe30:	4620      	mov	r0, r4
 800fe32:	f000 f987 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800fe36:	2800      	cmp	r0, #0
 800fe38:	d072      	beq.n	800ff20 <ucdr_serialize_endian_double+0x134>
 800fe3a:	2e01      	cmp	r6, #1
 800fe3c:	f000 809b 	beq.w	800ff76 <ucdr_serialize_endian_double+0x18a>
 800fe40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fe44:	703b      	strb	r3, [r7, #0]
 800fe46:	2d00      	cmp	r5, #0
 800fe48:	d078      	beq.n	800ff3c <ucdr_serialize_endian_double+0x150>
 800fe4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fe4e:	707b      	strb	r3, [r7, #1]
 800fe50:	2d01      	cmp	r5, #1
 800fe52:	d077      	beq.n	800ff44 <ucdr_serialize_endian_double+0x158>
 800fe54:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fe58:	70bb      	strb	r3, [r7, #2]
 800fe5a:	2d02      	cmp	r5, #2
 800fe5c:	d076      	beq.n	800ff4c <ucdr_serialize_endian_double+0x160>
 800fe5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fe62:	70fb      	strb	r3, [r7, #3]
 800fe64:	2d03      	cmp	r5, #3
 800fe66:	d075      	beq.n	800ff54 <ucdr_serialize_endian_double+0x168>
 800fe68:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fe6c:	713b      	strb	r3, [r7, #4]
 800fe6e:	2d04      	cmp	r5, #4
 800fe70:	d074      	beq.n	800ff5c <ucdr_serialize_endian_double+0x170>
 800fe72:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fe76:	717b      	strb	r3, [r7, #5]
 800fe78:	2d05      	cmp	r5, #5
 800fe7a:	d073      	beq.n	800ff64 <ucdr_serialize_endian_double+0x178>
 800fe7c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fe80:	71bb      	strb	r3, [r7, #6]
 800fe82:	2d06      	cmp	r5, #6
 800fe84:	d072      	beq.n	800ff6c <ucdr_serialize_endian_double+0x180>
 800fe86:	f89d 3000 	ldrb.w	r3, [sp]
 800fe8a:	71fb      	strb	r3, [r7, #7]
 800fe8c:	6923      	ldr	r3, [r4, #16]
 800fe8e:	68a2      	ldr	r2, [r4, #8]
 800fe90:	7da0      	ldrb	r0, [r4, #22]
 800fe92:	3308      	adds	r3, #8
 800fe94:	1b5d      	subs	r5, r3, r5
 800fe96:	444a      	add	r2, r9
 800fe98:	2308      	movs	r3, #8
 800fe9a:	f080 0001 	eor.w	r0, r0, #1
 800fe9e:	60a2      	str	r2, [r4, #8]
 800fea0:	6125      	str	r5, [r4, #16]
 800fea2:	7563      	strb	r3, [r4, #21]
 800fea4:	b003      	add	sp, #12
 800fea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800feaa:	2108      	movs	r1, #8
 800feac:	4620      	mov	r0, r4
 800feae:	f000 f949 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800feb2:	b348      	cbz	r0, 800ff08 <ucdr_serialize_endian_double+0x11c>
 800feb4:	2e01      	cmp	r6, #1
 800feb6:	d02d      	beq.n	800ff14 <ucdr_serialize_endian_double+0x128>
 800feb8:	68a3      	ldr	r3, [r4, #8]
 800feba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800febe:	701a      	strb	r2, [r3, #0]
 800fec0:	68a3      	ldr	r3, [r4, #8]
 800fec2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fec6:	705a      	strb	r2, [r3, #1]
 800fec8:	68a3      	ldr	r3, [r4, #8]
 800feca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fece:	709a      	strb	r2, [r3, #2]
 800fed0:	68a3      	ldr	r3, [r4, #8]
 800fed2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fed6:	70da      	strb	r2, [r3, #3]
 800fed8:	68a3      	ldr	r3, [r4, #8]
 800feda:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fede:	711a      	strb	r2, [r3, #4]
 800fee0:	68a3      	ldr	r3, [r4, #8]
 800fee2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fee6:	715a      	strb	r2, [r3, #5]
 800fee8:	68a3      	ldr	r3, [r4, #8]
 800feea:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800feee:	719a      	strb	r2, [r3, #6]
 800fef0:	68a3      	ldr	r3, [r4, #8]
 800fef2:	f89d 2000 	ldrb.w	r2, [sp]
 800fef6:	71da      	strb	r2, [r3, #7]
 800fef8:	68a2      	ldr	r2, [r4, #8]
 800fefa:	6923      	ldr	r3, [r4, #16]
 800fefc:	3208      	adds	r2, #8
 800fefe:	3308      	adds	r3, #8
 800ff00:	2108      	movs	r1, #8
 800ff02:	60a2      	str	r2, [r4, #8]
 800ff04:	6123      	str	r3, [r4, #16]
 800ff06:	7561      	strb	r1, [r4, #21]
 800ff08:	7da0      	ldrb	r0, [r4, #22]
 800ff0a:	f080 0001 	eor.w	r0, r0, #1
 800ff0e:	b003      	add	sp, #12
 800ff10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff14:	466b      	mov	r3, sp
 800ff16:	cb03      	ldmia	r3!, {r0, r1}
 800ff18:	68a3      	ldr	r3, [r4, #8]
 800ff1a:	6018      	str	r0, [r3, #0]
 800ff1c:	6059      	str	r1, [r3, #4]
 800ff1e:	e7eb      	b.n	800fef8 <ucdr_serialize_endian_double+0x10c>
 800ff20:	68a2      	ldr	r2, [r4, #8]
 800ff22:	6923      	ldr	r3, [r4, #16]
 800ff24:	7da0      	ldrb	r0, [r4, #22]
 800ff26:	f884 8015 	strb.w	r8, [r4, #21]
 800ff2a:	1b52      	subs	r2, r2, r5
 800ff2c:	1b5b      	subs	r3, r3, r5
 800ff2e:	f080 0001 	eor.w	r0, r0, #1
 800ff32:	60a2      	str	r2, [r4, #8]
 800ff34:	6123      	str	r3, [r4, #16]
 800ff36:	b003      	add	sp, #12
 800ff38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff3c:	68a3      	ldr	r3, [r4, #8]
 800ff3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff42:	701a      	strb	r2, [r3, #0]
 800ff44:	68a3      	ldr	r3, [r4, #8]
 800ff46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ff4a:	701a      	strb	r2, [r3, #0]
 800ff4c:	68a3      	ldr	r3, [r4, #8]
 800ff4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff52:	701a      	strb	r2, [r3, #0]
 800ff54:	68a3      	ldr	r3, [r4, #8]
 800ff56:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ff5a:	701a      	strb	r2, [r3, #0]
 800ff5c:	68a3      	ldr	r3, [r4, #8]
 800ff5e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ff62:	701a      	strb	r2, [r3, #0]
 800ff64:	68a3      	ldr	r3, [r4, #8]
 800ff66:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ff6a:	701a      	strb	r2, [r3, #0]
 800ff6c:	68a3      	ldr	r3, [r4, #8]
 800ff6e:	f89d 2000 	ldrb.w	r2, [sp]
 800ff72:	701a      	strb	r2, [r3, #0]
 800ff74:	e78a      	b.n	800fe8c <ucdr_serialize_endian_double+0xa0>
 800ff76:	466e      	mov	r6, sp
 800ff78:	4631      	mov	r1, r6
 800ff7a:	462a      	mov	r2, r5
 800ff7c:	4638      	mov	r0, r7
 800ff7e:	f009 ff08 	bl	8019d92 <memcpy>
 800ff82:	68a0      	ldr	r0, [r4, #8]
 800ff84:	464a      	mov	r2, r9
 800ff86:	1971      	adds	r1, r6, r5
 800ff88:	f009 ff03 	bl	8019d92 <memcpy>
 800ff8c:	e77e      	b.n	800fe8c <ucdr_serialize_endian_double+0xa0>
 800ff8e:	bf00      	nop

0800ff90 <ucdr_deserialize_endian_double>:
 800ff90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff94:	460f      	mov	r7, r1
 800ff96:	2108      	movs	r1, #8
 800ff98:	4604      	mov	r4, r0
 800ff9a:	4615      	mov	r5, r2
 800ff9c:	f000 f926 	bl	80101ec <ucdr_buffer_alignment>
 800ffa0:	4601      	mov	r1, r0
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ffa8:	f000 f964 	bl	8010274 <ucdr_advance_buffer>
 800ffac:	2108      	movs	r1, #8
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f000 f8bc 	bl	801012c <ucdr_check_buffer_available_for>
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	d159      	bne.n	801006c <ucdr_deserialize_endian_double+0xdc>
 800ffb8:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800ffbc:	4546      	cmp	r6, r8
 800ffbe:	d950      	bls.n	8010062 <ucdr_deserialize_endian_double+0xd2>
 800ffc0:	6923      	ldr	r3, [r4, #16]
 800ffc2:	60a6      	str	r6, [r4, #8]
 800ffc4:	eba6 0608 	sub.w	r6, r6, r8
 800ffc8:	4433      	add	r3, r6
 800ffca:	f1c6 0a08 	rsb	sl, r6, #8
 800ffce:	6123      	str	r3, [r4, #16]
 800ffd0:	4651      	mov	r1, sl
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	f000 f8b6 	bl	8010144 <ucdr_check_final_buffer_behavior>
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	d073      	beq.n	80100c4 <ucdr_deserialize_endian_double+0x134>
 800ffdc:	2f01      	cmp	r7, #1
 800ffde:	f000 809a 	beq.w	8010116 <ucdr_deserialize_endian_double+0x186>
 800ffe2:	f898 3007 	ldrb.w	r3, [r8, #7]
 800ffe6:	702b      	strb	r3, [r5, #0]
 800ffe8:	2e00      	cmp	r6, #0
 800ffea:	d078      	beq.n	80100de <ucdr_deserialize_endian_double+0x14e>
 800ffec:	f898 3006 	ldrb.w	r3, [r8, #6]
 800fff0:	706b      	strb	r3, [r5, #1]
 800fff2:	2e01      	cmp	r6, #1
 800fff4:	f105 0302 	add.w	r3, r5, #2
 800fff8:	d075      	beq.n	80100e6 <ucdr_deserialize_endian_double+0x156>
 800fffa:	f898 3005 	ldrb.w	r3, [r8, #5]
 800fffe:	70ab      	strb	r3, [r5, #2]
 8010000:	2e02      	cmp	r6, #2
 8010002:	f105 0303 	add.w	r3, r5, #3
 8010006:	d072      	beq.n	80100ee <ucdr_deserialize_endian_double+0x15e>
 8010008:	f898 3004 	ldrb.w	r3, [r8, #4]
 801000c:	70eb      	strb	r3, [r5, #3]
 801000e:	2e03      	cmp	r6, #3
 8010010:	f105 0304 	add.w	r3, r5, #4
 8010014:	d06f      	beq.n	80100f6 <ucdr_deserialize_endian_double+0x166>
 8010016:	f898 3003 	ldrb.w	r3, [r8, #3]
 801001a:	712b      	strb	r3, [r5, #4]
 801001c:	2e04      	cmp	r6, #4
 801001e:	f105 0305 	add.w	r3, r5, #5
 8010022:	d06c      	beq.n	80100fe <ucdr_deserialize_endian_double+0x16e>
 8010024:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010028:	716b      	strb	r3, [r5, #5]
 801002a:	2e05      	cmp	r6, #5
 801002c:	f105 0306 	add.w	r3, r5, #6
 8010030:	d069      	beq.n	8010106 <ucdr_deserialize_endian_double+0x176>
 8010032:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010036:	71ab      	strb	r3, [r5, #6]
 8010038:	2e06      	cmp	r6, #6
 801003a:	f105 0307 	add.w	r3, r5, #7
 801003e:	d066      	beq.n	801010e <ucdr_deserialize_endian_double+0x17e>
 8010040:	f898 3000 	ldrb.w	r3, [r8]
 8010044:	71eb      	strb	r3, [r5, #7]
 8010046:	6923      	ldr	r3, [r4, #16]
 8010048:	68a2      	ldr	r2, [r4, #8]
 801004a:	7da0      	ldrb	r0, [r4, #22]
 801004c:	3308      	adds	r3, #8
 801004e:	1b9e      	subs	r6, r3, r6
 8010050:	2308      	movs	r3, #8
 8010052:	4452      	add	r2, sl
 8010054:	7563      	strb	r3, [r4, #21]
 8010056:	60a2      	str	r2, [r4, #8]
 8010058:	6126      	str	r6, [r4, #16]
 801005a:	f080 0001 	eor.w	r0, r0, #1
 801005e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010062:	2108      	movs	r1, #8
 8010064:	4620      	mov	r0, r4
 8010066:	f000 f86d 	bl	8010144 <ucdr_check_final_buffer_behavior>
 801006a:	b308      	cbz	r0, 80100b0 <ucdr_deserialize_endian_double+0x120>
 801006c:	2f01      	cmp	r7, #1
 801006e:	68a3      	ldr	r3, [r4, #8]
 8010070:	d023      	beq.n	80100ba <ucdr_deserialize_endian_double+0x12a>
 8010072:	79db      	ldrb	r3, [r3, #7]
 8010074:	702b      	strb	r3, [r5, #0]
 8010076:	68a3      	ldr	r3, [r4, #8]
 8010078:	799b      	ldrb	r3, [r3, #6]
 801007a:	706b      	strb	r3, [r5, #1]
 801007c:	68a3      	ldr	r3, [r4, #8]
 801007e:	795b      	ldrb	r3, [r3, #5]
 8010080:	70ab      	strb	r3, [r5, #2]
 8010082:	68a3      	ldr	r3, [r4, #8]
 8010084:	791b      	ldrb	r3, [r3, #4]
 8010086:	70eb      	strb	r3, [r5, #3]
 8010088:	68a3      	ldr	r3, [r4, #8]
 801008a:	78db      	ldrb	r3, [r3, #3]
 801008c:	712b      	strb	r3, [r5, #4]
 801008e:	68a3      	ldr	r3, [r4, #8]
 8010090:	789b      	ldrb	r3, [r3, #2]
 8010092:	716b      	strb	r3, [r5, #5]
 8010094:	68a3      	ldr	r3, [r4, #8]
 8010096:	785b      	ldrb	r3, [r3, #1]
 8010098:	71ab      	strb	r3, [r5, #6]
 801009a:	68a3      	ldr	r3, [r4, #8]
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	71eb      	strb	r3, [r5, #7]
 80100a0:	68a2      	ldr	r2, [r4, #8]
 80100a2:	6923      	ldr	r3, [r4, #16]
 80100a4:	3208      	adds	r2, #8
 80100a6:	3308      	adds	r3, #8
 80100a8:	2108      	movs	r1, #8
 80100aa:	60a2      	str	r2, [r4, #8]
 80100ac:	6123      	str	r3, [r4, #16]
 80100ae:	7561      	strb	r1, [r4, #21]
 80100b0:	7da0      	ldrb	r0, [r4, #22]
 80100b2:	f080 0001 	eor.w	r0, r0, #1
 80100b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	606b      	str	r3, [r5, #4]
 80100c0:	602a      	str	r2, [r5, #0]
 80100c2:	e7ed      	b.n	80100a0 <ucdr_deserialize_endian_double+0x110>
 80100c4:	68a2      	ldr	r2, [r4, #8]
 80100c6:	6923      	ldr	r3, [r4, #16]
 80100c8:	7da0      	ldrb	r0, [r4, #22]
 80100ca:	f884 9015 	strb.w	r9, [r4, #21]
 80100ce:	1b92      	subs	r2, r2, r6
 80100d0:	1b9b      	subs	r3, r3, r6
 80100d2:	60a2      	str	r2, [r4, #8]
 80100d4:	6123      	str	r3, [r4, #16]
 80100d6:	f080 0001 	eor.w	r0, r0, #1
 80100da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100de:	68a3      	ldr	r3, [r4, #8]
 80100e0:	799b      	ldrb	r3, [r3, #6]
 80100e2:	706b      	strb	r3, [r5, #1]
 80100e4:	1cab      	adds	r3, r5, #2
 80100e6:	68a2      	ldr	r2, [r4, #8]
 80100e8:	7952      	ldrb	r2, [r2, #5]
 80100ea:	f803 2b01 	strb.w	r2, [r3], #1
 80100ee:	68a2      	ldr	r2, [r4, #8]
 80100f0:	7912      	ldrb	r2, [r2, #4]
 80100f2:	f803 2b01 	strb.w	r2, [r3], #1
 80100f6:	68a2      	ldr	r2, [r4, #8]
 80100f8:	78d2      	ldrb	r2, [r2, #3]
 80100fa:	f803 2b01 	strb.w	r2, [r3], #1
 80100fe:	68a2      	ldr	r2, [r4, #8]
 8010100:	7892      	ldrb	r2, [r2, #2]
 8010102:	f803 2b01 	strb.w	r2, [r3], #1
 8010106:	68a2      	ldr	r2, [r4, #8]
 8010108:	7852      	ldrb	r2, [r2, #1]
 801010a:	f803 2b01 	strb.w	r2, [r3], #1
 801010e:	68a2      	ldr	r2, [r4, #8]
 8010110:	7812      	ldrb	r2, [r2, #0]
 8010112:	701a      	strb	r2, [r3, #0]
 8010114:	e797      	b.n	8010046 <ucdr_deserialize_endian_double+0xb6>
 8010116:	4641      	mov	r1, r8
 8010118:	4632      	mov	r2, r6
 801011a:	4628      	mov	r0, r5
 801011c:	f009 fe39 	bl	8019d92 <memcpy>
 8010120:	68a1      	ldr	r1, [r4, #8]
 8010122:	4652      	mov	r2, sl
 8010124:	19a8      	adds	r0, r5, r6
 8010126:	f009 fe34 	bl	8019d92 <memcpy>
 801012a:	e78c      	b.n	8010046 <ucdr_deserialize_endian_double+0xb6>

0801012c <ucdr_check_buffer_available_for>:
 801012c:	7d83      	ldrb	r3, [r0, #22]
 801012e:	b93b      	cbnz	r3, 8010140 <ucdr_check_buffer_available_for+0x14>
 8010130:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010134:	4419      	add	r1, r3
 8010136:	4288      	cmp	r0, r1
 8010138:	bf34      	ite	cc
 801013a:	2000      	movcc	r0, #0
 801013c:	2001      	movcs	r0, #1
 801013e:	4770      	bx	lr
 8010140:	2000      	movs	r0, #0
 8010142:	4770      	bx	lr

08010144 <ucdr_check_final_buffer_behavior>:
 8010144:	7d83      	ldrb	r3, [r0, #22]
 8010146:	b943      	cbnz	r3, 801015a <ucdr_check_final_buffer_behavior+0x16>
 8010148:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801014c:	4291      	cmp	r1, r2
 801014e:	b510      	push	{r4, lr}
 8010150:	4604      	mov	r4, r0
 8010152:	d205      	bcs.n	8010160 <ucdr_check_final_buffer_behavior+0x1c>
 8010154:	2301      	movs	r3, #1
 8010156:	4618      	mov	r0, r3
 8010158:	bd10      	pop	{r4, pc}
 801015a:	2300      	movs	r3, #0
 801015c:	4618      	mov	r0, r3
 801015e:	4770      	bx	lr
 8010160:	6982      	ldr	r2, [r0, #24]
 8010162:	b13a      	cbz	r2, 8010174 <ucdr_check_final_buffer_behavior+0x30>
 8010164:	69c1      	ldr	r1, [r0, #28]
 8010166:	4790      	blx	r2
 8010168:	f080 0301 	eor.w	r3, r0, #1
 801016c:	b2db      	uxtb	r3, r3
 801016e:	75a0      	strb	r0, [r4, #22]
 8010170:	4618      	mov	r0, r3
 8010172:	bd10      	pop	{r4, pc}
 8010174:	2001      	movs	r0, #1
 8010176:	75a0      	strb	r0, [r4, #22]
 8010178:	e7fa      	b.n	8010170 <ucdr_check_final_buffer_behavior+0x2c>
 801017a:	bf00      	nop

0801017c <ucdr_set_on_full_buffer_callback>:
 801017c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop

08010184 <ucdr_init_buffer_origin_offset_endian>:
 8010184:	b410      	push	{r4}
 8010186:	9c01      	ldr	r4, [sp, #4]
 8010188:	6001      	str	r1, [r0, #0]
 801018a:	440a      	add	r2, r1
 801018c:	6042      	str	r2, [r0, #4]
 801018e:	190a      	adds	r2, r1, r4
 8010190:	441c      	add	r4, r3
 8010192:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8010196:	6082      	str	r2, [r0, #8]
 8010198:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801019c:	7503      	strb	r3, [r0, #20]
 801019e:	2200      	movs	r2, #0
 80101a0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80101a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101a8:	7542      	strb	r2, [r0, #21]
 80101aa:	7582      	strb	r2, [r0, #22]
 80101ac:	4770      	bx	lr
 80101ae:	bf00      	nop

080101b0 <ucdr_init_buffer_origin_offset>:
 80101b0:	b510      	push	{r4, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	9c04      	ldr	r4, [sp, #16]
 80101b6:	9400      	str	r4, [sp, #0]
 80101b8:	2401      	movs	r4, #1
 80101ba:	9401      	str	r4, [sp, #4]
 80101bc:	f7ff ffe2 	bl	8010184 <ucdr_init_buffer_origin_offset_endian>
 80101c0:	b002      	add	sp, #8
 80101c2:	bd10      	pop	{r4, pc}

080101c4 <ucdr_init_buffer_origin>:
 80101c4:	b510      	push	{r4, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	2400      	movs	r4, #0
 80101ca:	9400      	str	r4, [sp, #0]
 80101cc:	f7ff fff0 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 80101d0:	b002      	add	sp, #8
 80101d2:	bd10      	pop	{r4, pc}

080101d4 <ucdr_init_buffer>:
 80101d4:	2300      	movs	r3, #0
 80101d6:	f7ff bff5 	b.w	80101c4 <ucdr_init_buffer_origin>
 80101da:	bf00      	nop

080101dc <ucdr_alignment>:
 80101dc:	fbb0 f3f1 	udiv	r3, r0, r1
 80101e0:	fb03 0011 	mls	r0, r3, r1, r0
 80101e4:	1a08      	subs	r0, r1, r0
 80101e6:	3901      	subs	r1, #1
 80101e8:	4008      	ands	r0, r1
 80101ea:	4770      	bx	lr

080101ec <ucdr_buffer_alignment>:
 80101ec:	7d43      	ldrb	r3, [r0, #21]
 80101ee:	428b      	cmp	r3, r1
 80101f0:	d208      	bcs.n	8010204 <ucdr_buffer_alignment+0x18>
 80101f2:	6900      	ldr	r0, [r0, #16]
 80101f4:	fbb0 f3f1 	udiv	r3, r0, r1
 80101f8:	fb01 0013 	mls	r0, r1, r3, r0
 80101fc:	1a08      	subs	r0, r1, r0
 80101fe:	3901      	subs	r1, #1
 8010200:	4008      	ands	r0, r1
 8010202:	4770      	bx	lr
 8010204:	2000      	movs	r0, #0
 8010206:	4770      	bx	lr

08010208 <ucdr_align_to>:
 8010208:	b538      	push	{r3, r4, r5, lr}
 801020a:	4604      	mov	r4, r0
 801020c:	460d      	mov	r5, r1
 801020e:	f7ff ffed 	bl	80101ec <ucdr_buffer_alignment>
 8010212:	68a3      	ldr	r3, [r4, #8]
 8010214:	6921      	ldr	r1, [r4, #16]
 8010216:	7565      	strb	r5, [r4, #21]
 8010218:	181a      	adds	r2, r3, r0
 801021a:	6863      	ldr	r3, [r4, #4]
 801021c:	4293      	cmp	r3, r2
 801021e:	4408      	add	r0, r1
 8010220:	bf28      	it	cs
 8010222:	4613      	movcs	r3, r2
 8010224:	6120      	str	r0, [r4, #16]
 8010226:	60a3      	str	r3, [r4, #8]
 8010228:	bd38      	pop	{r3, r4, r5, pc}
 801022a:	bf00      	nop

0801022c <ucdr_buffer_length>:
 801022c:	6882      	ldr	r2, [r0, #8]
 801022e:	6800      	ldr	r0, [r0, #0]
 8010230:	1a10      	subs	r0, r2, r0
 8010232:	4770      	bx	lr

08010234 <ucdr_buffer_remaining>:
 8010234:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010238:	1a10      	subs	r0, r2, r0
 801023a:	4770      	bx	lr

0801023c <ucdr_check_final_buffer_behavior_array>:
 801023c:	b538      	push	{r3, r4, r5, lr}
 801023e:	7d83      	ldrb	r3, [r0, #22]
 8010240:	b963      	cbnz	r3, 801025c <ucdr_check_final_buffer_behavior_array+0x20>
 8010242:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010246:	429a      	cmp	r2, r3
 8010248:	4604      	mov	r4, r0
 801024a:	460d      	mov	r5, r1
 801024c:	d308      	bcc.n	8010260 <ucdr_check_final_buffer_behavior_array+0x24>
 801024e:	b139      	cbz	r1, 8010260 <ucdr_check_final_buffer_behavior_array+0x24>
 8010250:	6983      	ldr	r3, [r0, #24]
 8010252:	b163      	cbz	r3, 801026e <ucdr_check_final_buffer_behavior_array+0x32>
 8010254:	69c1      	ldr	r1, [r0, #28]
 8010256:	4798      	blx	r3
 8010258:	75a0      	strb	r0, [r4, #22]
 801025a:	b108      	cbz	r0, 8010260 <ucdr_check_final_buffer_behavior_array+0x24>
 801025c:	2000      	movs	r0, #0
 801025e:	bd38      	pop	{r3, r4, r5, pc}
 8010260:	4620      	mov	r0, r4
 8010262:	f7ff ffe7 	bl	8010234 <ucdr_buffer_remaining>
 8010266:	42a8      	cmp	r0, r5
 8010268:	bf28      	it	cs
 801026a:	4628      	movcs	r0, r5
 801026c:	bd38      	pop	{r3, r4, r5, pc}
 801026e:	2301      	movs	r3, #1
 8010270:	7583      	strb	r3, [r0, #22]
 8010272:	e7f3      	b.n	801025c <ucdr_check_final_buffer_behavior_array+0x20>

08010274 <ucdr_advance_buffer>:
 8010274:	b538      	push	{r3, r4, r5, lr}
 8010276:	4604      	mov	r4, r0
 8010278:	460d      	mov	r5, r1
 801027a:	f7ff ff57 	bl	801012c <ucdr_check_buffer_available_for>
 801027e:	b178      	cbz	r0, 80102a0 <ucdr_advance_buffer+0x2c>
 8010280:	6923      	ldr	r3, [r4, #16]
 8010282:	68a2      	ldr	r2, [r4, #8]
 8010284:	442b      	add	r3, r5
 8010286:	6123      	str	r3, [r4, #16]
 8010288:	2301      	movs	r3, #1
 801028a:	442a      	add	r2, r5
 801028c:	7563      	strb	r3, [r4, #21]
 801028e:	60a2      	str	r2, [r4, #8]
 8010290:	bd38      	pop	{r3, r4, r5, pc}
 8010292:	68a2      	ldr	r2, [r4, #8]
 8010294:	6923      	ldr	r3, [r4, #16]
 8010296:	4402      	add	r2, r0
 8010298:	4403      	add	r3, r0
 801029a:	1a2d      	subs	r5, r5, r0
 801029c:	60a2      	str	r2, [r4, #8]
 801029e:	6123      	str	r3, [r4, #16]
 80102a0:	4629      	mov	r1, r5
 80102a2:	2201      	movs	r2, #1
 80102a4:	4620      	mov	r0, r4
 80102a6:	f7ff ffc9 	bl	801023c <ucdr_check_final_buffer_behavior_array>
 80102aa:	2800      	cmp	r0, #0
 80102ac:	d1f1      	bne.n	8010292 <ucdr_advance_buffer+0x1e>
 80102ae:	2301      	movs	r3, #1
 80102b0:	7563      	strb	r3, [r4, #21]
 80102b2:	bd38      	pop	{r3, r4, r5, pc}

080102b4 <ucdr_serialize_sequence_char>:
 80102b4:	b570      	push	{r4, r5, r6, lr}
 80102b6:	4615      	mov	r5, r2
 80102b8:	460e      	mov	r6, r1
 80102ba:	7d01      	ldrb	r1, [r0, #20]
 80102bc:	4604      	mov	r4, r0
 80102be:	f7ff f8eb 	bl	800f498 <ucdr_serialize_endian_uint32_t>
 80102c2:	b90d      	cbnz	r5, 80102c8 <ucdr_serialize_sequence_char+0x14>
 80102c4:	2001      	movs	r0, #1
 80102c6:	bd70      	pop	{r4, r5, r6, pc}
 80102c8:	7d21      	ldrb	r1, [r4, #20]
 80102ca:	462b      	mov	r3, r5
 80102cc:	4632      	mov	r2, r6
 80102ce:	4620      	mov	r0, r4
 80102d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102d4:	f007 bc40 	b.w	8017b58 <ucdr_serialize_endian_array_char>

080102d8 <ucdr_deserialize_sequence_char>:
 80102d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102dc:	461d      	mov	r5, r3
 80102de:	4616      	mov	r6, r2
 80102e0:	460f      	mov	r7, r1
 80102e2:	461a      	mov	r2, r3
 80102e4:	7d01      	ldrb	r1, [r0, #20]
 80102e6:	4604      	mov	r4, r0
 80102e8:	f7ff f9fe 	bl	800f6e8 <ucdr_deserialize_endian_uint32_t>
 80102ec:	682b      	ldr	r3, [r5, #0]
 80102ee:	429e      	cmp	r6, r3
 80102f0:	bf3c      	itt	cc
 80102f2:	2201      	movcc	r2, #1
 80102f4:	75a2      	strbcc	r2, [r4, #22]
 80102f6:	b913      	cbnz	r3, 80102fe <ucdr_deserialize_sequence_char+0x26>
 80102f8:	2001      	movs	r0, #1
 80102fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102fe:	7d21      	ldrb	r1, [r4, #20]
 8010300:	463a      	mov	r2, r7
 8010302:	4620      	mov	r0, r4
 8010304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010308:	f007 bc58 	b.w	8017bbc <ucdr_deserialize_endian_array_char>

0801030c <ucdr_serialize_sequence_uint8_t>:
 801030c:	b570      	push	{r4, r5, r6, lr}
 801030e:	4615      	mov	r5, r2
 8010310:	460e      	mov	r6, r1
 8010312:	7d01      	ldrb	r1, [r0, #20]
 8010314:	4604      	mov	r4, r0
 8010316:	f7ff f8bf 	bl	800f498 <ucdr_serialize_endian_uint32_t>
 801031a:	b90d      	cbnz	r5, 8010320 <ucdr_serialize_sequence_uint8_t+0x14>
 801031c:	2001      	movs	r0, #1
 801031e:	bd70      	pop	{r4, r5, r6, pc}
 8010320:	7d21      	ldrb	r1, [r4, #20]
 8010322:	462b      	mov	r3, r5
 8010324:	4632      	mov	r2, r6
 8010326:	4620      	mov	r0, r4
 8010328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801032c:	f007 bcaa 	b.w	8017c84 <ucdr_serialize_endian_array_uint8_t>

08010330 <ucdr_deserialize_sequence_uint8_t>:
 8010330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010334:	461d      	mov	r5, r3
 8010336:	4616      	mov	r6, r2
 8010338:	460f      	mov	r7, r1
 801033a:	461a      	mov	r2, r3
 801033c:	7d01      	ldrb	r1, [r0, #20]
 801033e:	4604      	mov	r4, r0
 8010340:	f7ff f9d2 	bl	800f6e8 <ucdr_deserialize_endian_uint32_t>
 8010344:	682b      	ldr	r3, [r5, #0]
 8010346:	429e      	cmp	r6, r3
 8010348:	bf3c      	itt	cc
 801034a:	2201      	movcc	r2, #1
 801034c:	75a2      	strbcc	r2, [r4, #22]
 801034e:	b913      	cbnz	r3, 8010356 <ucdr_deserialize_sequence_uint8_t+0x26>
 8010350:	2001      	movs	r0, #1
 8010352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010356:	7d21      	ldrb	r1, [r4, #20]
 8010358:	463a      	mov	r2, r7
 801035a:	4620      	mov	r0, r4
 801035c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010360:	f007 bcf4 	b.w	8017d4c <ucdr_deserialize_endian_array_uint8_t>

08010364 <ucdr_serialize_sequence_double>:
 8010364:	b570      	push	{r4, r5, r6, lr}
 8010366:	4615      	mov	r5, r2
 8010368:	460e      	mov	r6, r1
 801036a:	7d01      	ldrb	r1, [r0, #20]
 801036c:	4604      	mov	r4, r0
 801036e:	f7ff f893 	bl	800f498 <ucdr_serialize_endian_uint32_t>
 8010372:	b90d      	cbnz	r5, 8010378 <ucdr_serialize_sequence_double+0x14>
 8010374:	2001      	movs	r0, #1
 8010376:	bd70      	pop	{r4, r5, r6, pc}
 8010378:	7d21      	ldrb	r1, [r4, #20]
 801037a:	462b      	mov	r3, r5
 801037c:	4632      	mov	r2, r6
 801037e:	4620      	mov	r0, r4
 8010380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010384:	f007 bd14 	b.w	8017db0 <ucdr_serialize_endian_array_double>

08010388 <ucdr_deserialize_sequence_double>:
 8010388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801038c:	461d      	mov	r5, r3
 801038e:	4616      	mov	r6, r2
 8010390:	460f      	mov	r7, r1
 8010392:	461a      	mov	r2, r3
 8010394:	7d01      	ldrb	r1, [r0, #20]
 8010396:	4604      	mov	r4, r0
 8010398:	f7ff f9a6 	bl	800f6e8 <ucdr_deserialize_endian_uint32_t>
 801039c:	682b      	ldr	r3, [r5, #0]
 801039e:	429e      	cmp	r6, r3
 80103a0:	bf3c      	itt	cc
 80103a2:	2201      	movcc	r2, #1
 80103a4:	75a2      	strbcc	r2, [r4, #22]
 80103a6:	b913      	cbnz	r3, 80103ae <ucdr_deserialize_sequence_double+0x26>
 80103a8:	2001      	movs	r0, #1
 80103aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ae:	7d21      	ldrb	r1, [r4, #20]
 80103b0:	463a      	mov	r2, r7
 80103b2:	4620      	mov	r0, r4
 80103b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103b8:	f007 bd4e 	b.w	8017e58 <ucdr_deserialize_endian_array_double>

080103bc <uxr_buffer_delete_entity>:
 80103bc:	b510      	push	{r4, lr}
 80103be:	2300      	movs	r3, #0
 80103c0:	b08e      	sub	sp, #56	@ 0x38
 80103c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80103c6:	2303      	movs	r3, #3
 80103c8:	9300      	str	r3, [sp, #0]
 80103ca:	2204      	movs	r2, #4
 80103cc:	ab06      	add	r3, sp, #24
 80103ce:	4604      	mov	r4, r0
 80103d0:	9103      	str	r1, [sp, #12]
 80103d2:	f001 fab7 	bl	8011944 <uxr_prepare_stream_to_write_submessage>
 80103d6:	b918      	cbnz	r0, 80103e0 <uxr_buffer_delete_entity+0x24>
 80103d8:	4604      	mov	r4, r0
 80103da:	4620      	mov	r0, r4
 80103dc:	b00e      	add	sp, #56	@ 0x38
 80103de:	bd10      	pop	{r4, pc}
 80103e0:	9902      	ldr	r1, [sp, #8]
 80103e2:	aa05      	add	r2, sp, #20
 80103e4:	4620      	mov	r0, r4
 80103e6:	f001 fbe3 	bl	8011bb0 <uxr_init_base_object_request>
 80103ea:	a905      	add	r1, sp, #20
 80103ec:	4604      	mov	r4, r0
 80103ee:	a806      	add	r0, sp, #24
 80103f0:	f003 f9da 	bl	80137a8 <uxr_serialize_DELETE_Payload>
 80103f4:	4620      	mov	r0, r4
 80103f6:	b00e      	add	sp, #56	@ 0x38
 80103f8:	bd10      	pop	{r4, pc}
 80103fa:	bf00      	nop

080103fc <uxr_common_create_entity>:
 80103fc:	b510      	push	{r4, lr}
 80103fe:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010402:	b08c      	sub	sp, #48	@ 0x30
 8010404:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010408:	f1bc 0f01 	cmp.w	ip, #1
 801040c:	bf0c      	ite	eq
 801040e:	f003 0201 	andeq.w	r2, r3, #1
 8010412:	2200      	movne	r2, #0
 8010414:	330e      	adds	r3, #14
 8010416:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801041a:	9101      	str	r1, [sp, #4]
 801041c:	441a      	add	r2, r3
 801041e:	2301      	movs	r3, #1
 8010420:	9300      	str	r3, [sp, #0]
 8010422:	9903      	ldr	r1, [sp, #12]
 8010424:	ab04      	add	r3, sp, #16
 8010426:	b292      	uxth	r2, r2
 8010428:	4604      	mov	r4, r0
 801042a:	f001 fa8b 	bl	8011944 <uxr_prepare_stream_to_write_submessage>
 801042e:	b918      	cbnz	r0, 8010438 <uxr_common_create_entity+0x3c>
 8010430:	4604      	mov	r4, r0
 8010432:	4620      	mov	r0, r4
 8010434:	b00c      	add	sp, #48	@ 0x30
 8010436:	bd10      	pop	{r4, pc}
 8010438:	9902      	ldr	r1, [sp, #8]
 801043a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801043c:	4620      	mov	r0, r4
 801043e:	f001 fbb7 	bl	8011bb0 <uxr_init_base_object_request>
 8010442:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010444:	4604      	mov	r4, r0
 8010446:	a804      	add	r0, sp, #16
 8010448:	f003 f90a 	bl	8013660 <uxr_serialize_CREATE_Payload>
 801044c:	4620      	mov	r0, r4
 801044e:	b00c      	add	sp, #48	@ 0x30
 8010450:	bd10      	pop	{r4, pc}
 8010452:	bf00      	nop

08010454 <uxr_buffer_create_participant_bin>:
 8010454:	b570      	push	{r4, r5, r6, lr}
 8010456:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801045a:	ac11      	add	r4, sp, #68	@ 0x44
 801045c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010460:	2303      	movs	r3, #3
 8010462:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010466:	7223      	strb	r3, [r4, #8]
 8010468:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801046a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801046e:	2201      	movs	r2, #1
 8010470:	2100      	movs	r1, #0
 8010472:	4605      	mov	r5, r0
 8010474:	7122      	strb	r2, [r4, #4]
 8010476:	f88d 1014 	strb.w	r1, [sp, #20]
 801047a:	b1cb      	cbz	r3, 80104b0 <uxr_buffer_create_participant_bin+0x5c>
 801047c:	f88d 201c 	strb.w	r2, [sp, #28]
 8010480:	9308      	str	r3, [sp, #32]
 8010482:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010486:	a915      	add	r1, sp, #84	@ 0x54
 8010488:	a809      	add	r0, sp, #36	@ 0x24
 801048a:	f7ff fea3 	bl	80101d4 <ucdr_init_buffer>
 801048e:	a905      	add	r1, sp, #20
 8010490:	a809      	add	r0, sp, #36	@ 0x24
 8010492:	f002 fdb3 	bl	8012ffc <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010498:	9600      	str	r6, [sp, #0]
 801049a:	9401      	str	r4, [sp, #4]
 801049c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80104a0:	60e3      	str	r3, [r4, #12]
 80104a2:	4628      	mov	r0, r5
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	f7ff ffa9 	bl	80103fc <uxr_common_create_entity>
 80104aa:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 80104ae:	bd70      	pop	{r4, r5, r6, pc}
 80104b0:	f88d 301c 	strb.w	r3, [sp, #28]
 80104b4:	e7e5      	b.n	8010482 <uxr_buffer_create_participant_bin+0x2e>
 80104b6:	bf00      	nop

080104b8 <uxr_buffer_create_topic_bin>:
 80104b8:	b570      	push	{r4, r5, r6, lr}
 80104ba:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80104be:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80104c2:	9105      	str	r1, [sp, #20]
 80104c4:	4605      	mov	r5, r0
 80104c6:	a997      	add	r1, sp, #604	@ 0x25c
 80104c8:	4618      	mov	r0, r3
 80104ca:	2302      	movs	r3, #2
 80104cc:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80104d0:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80104d4:	f000 f9b0 	bl	8010838 <uxr_object_id_to_raw>
 80104d8:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80104da:	9306      	str	r3, [sp, #24]
 80104dc:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80104de:	930a      	str	r3, [sp, #40]	@ 0x28
 80104e0:	2303      	movs	r3, #3
 80104e2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80104e6:	2301      	movs	r3, #1
 80104e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80104ec:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80104f0:	a917      	add	r1, sp, #92	@ 0x5c
 80104f2:	2300      	movs	r3, #0
 80104f4:	a80b      	add	r0, sp, #44	@ 0x2c
 80104f6:	f88d 301c 	strb.w	r3, [sp, #28]
 80104fa:	f7ff fe6b 	bl	80101d4 <ucdr_init_buffer>
 80104fe:	a906      	add	r1, sp, #24
 8010500:	a80b      	add	r0, sp, #44	@ 0x2c
 8010502:	f002 fd9d 	bl	8013040 <uxr_serialize_OBJK_Topic_Binary>
 8010506:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010508:	9316      	str	r3, [sp, #88]	@ 0x58
 801050a:	ac13      	add	r4, sp, #76	@ 0x4c
 801050c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010510:	9600      	str	r6, [sp, #0]
 8010512:	9401      	str	r4, [sp, #4]
 8010514:	b29b      	uxth	r3, r3
 8010516:	4628      	mov	r0, r5
 8010518:	f7ff ff70 	bl	80103fc <uxr_common_create_entity>
 801051c:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010520:	bd70      	pop	{r4, r5, r6, pc}
 8010522:	bf00      	nop

08010524 <uxr_buffer_create_publisher_bin>:
 8010524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010526:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801052a:	4605      	mov	r5, r0
 801052c:	9105      	str	r1, [sp, #20]
 801052e:	4618      	mov	r0, r3
 8010530:	2603      	movs	r6, #3
 8010532:	a992      	add	r1, sp, #584	@ 0x248
 8010534:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010538:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 801053c:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010540:	f000 f97a 	bl	8010838 <uxr_object_id_to_raw>
 8010544:	2300      	movs	r3, #0
 8010546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801054a:	a912      	add	r1, sp, #72	@ 0x48
 801054c:	a806      	add	r0, sp, #24
 801054e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010552:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010556:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801055a:	f7ff fe3b 	bl	80101d4 <ucdr_init_buffer>
 801055e:	a993      	add	r1, sp, #588	@ 0x24c
 8010560:	a806      	add	r0, sp, #24
 8010562:	f002 fe21 	bl	80131a8 <uxr_serialize_OBJK_Publisher_Binary>
 8010566:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010568:	9311      	str	r3, [sp, #68]	@ 0x44
 801056a:	ac0e      	add	r4, sp, #56	@ 0x38
 801056c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010570:	9700      	str	r7, [sp, #0]
 8010572:	9401      	str	r4, [sp, #4]
 8010574:	b29b      	uxth	r3, r3
 8010576:	4628      	mov	r0, r5
 8010578:	f7ff ff40 	bl	80103fc <uxr_common_create_entity>
 801057c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010582:	bf00      	nop

08010584 <uxr_buffer_create_datawriter_bin>:
 8010584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010588:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801058c:	ac1d      	add	r4, sp, #116	@ 0x74
 801058e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010592:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8010596:	9105      	str	r1, [sp, #20]
 8010598:	4606      	mov	r6, r0
 801059a:	a9a1      	add	r1, sp, #644	@ 0x284
 801059c:	4618      	mov	r0, r3
 801059e:	2305      	movs	r3, #5
 80105a0:	7123      	strb	r3, [r4, #4]
 80105a2:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80105a6:	2703      	movs	r7, #3
 80105a8:	f000 f946 	bl	8010838 <uxr_object_id_to_raw>
 80105ac:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80105ae:	7227      	strb	r7, [r4, #8]
 80105b0:	a90e      	add	r1, sp, #56	@ 0x38
 80105b2:	f000 f941 	bl	8010838 <uxr_object_id_to_raw>
 80105b6:	2300      	movs	r3, #0
 80105b8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80105bc:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 80105c0:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80105c4:	3d00      	subs	r5, #0
 80105c6:	bf18      	it	ne
 80105c8:	2501      	movne	r5, #1
 80105ca:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80105ce:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80105d2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80105d6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80105da:	2301      	movs	r3, #1
 80105dc:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80105e0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80105e4:	bb8a      	cbnz	r2, 801064a <uxr_buffer_create_datawriter_bin+0xc6>
 80105e6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80105ea:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80105ee:	f04f 0c13 	mov.w	ip, #19
 80105f2:	250b      	movs	r5, #11
 80105f4:	2221      	movs	r2, #33	@ 0x21
 80105f6:	2111      	movs	r1, #17
 80105f8:	2009      	movs	r0, #9
 80105fa:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 80105fe:	b923      	cbnz	r3, 801060a <uxr_buffer_create_datawriter_bin+0x86>
 8010600:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010604:	4672      	mov	r2, lr
 8010606:	4661      	mov	r1, ip
 8010608:	4628      	mov	r0, r5
 801060a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801060e:	2b01      	cmp	r3, #1
 8010610:	d025      	beq.n	801065e <uxr_buffer_create_datawriter_bin+0xda>
 8010612:	2b03      	cmp	r3, #3
 8010614:	d029      	beq.n	801066a <uxr_buffer_create_datawriter_bin+0xe6>
 8010616:	b32b      	cbz	r3, 8010664 <uxr_buffer_create_datawriter_bin+0xe0>
 8010618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801061c:	a921      	add	r1, sp, #132	@ 0x84
 801061e:	a806      	add	r0, sp, #24
 8010620:	f7ff fdd8 	bl	80101d4 <ucdr_init_buffer>
 8010624:	a90e      	add	r1, sp, #56	@ 0x38
 8010626:	a806      	add	r0, sp, #24
 8010628:	f002 fe34 	bl	8013294 <uxr_serialize_OBJK_DataWriter_Binary>
 801062c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801062e:	f8cd 8000 	str.w	r8, [sp]
 8010632:	9401      	str	r4, [sp, #4]
 8010634:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010638:	60e3      	str	r3, [r4, #12]
 801063a:	4630      	mov	r0, r6
 801063c:	b29b      	uxth	r3, r3
 801063e:	f7ff fedd 	bl	80103fc <uxr_common_create_entity>
 8010642:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801064a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801064e:	f04f 0c12 	mov.w	ip, #18
 8010652:	250a      	movs	r5, #10
 8010654:	2220      	movs	r2, #32
 8010656:	2110      	movs	r1, #16
 8010658:	2008      	movs	r0, #8
 801065a:	2702      	movs	r7, #2
 801065c:	e7cd      	b.n	80105fa <uxr_buffer_create_datawriter_bin+0x76>
 801065e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010662:	e7d9      	b.n	8010618 <uxr_buffer_create_datawriter_bin+0x94>
 8010664:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010668:	e7d6      	b.n	8010618 <uxr_buffer_create_datawriter_bin+0x94>
 801066a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801066e:	e7d3      	b.n	8010618 <uxr_buffer_create_datawriter_bin+0x94>

08010670 <get_custom_error>:
 8010670:	4b01      	ldr	r3, [pc, #4]	@ (8010678 <get_custom_error+0x8>)
 8010672:	7818      	ldrb	r0, [r3, #0]
 8010674:	4770      	bx	lr
 8010676:	bf00      	nop
 8010678:	2000afac 	.word	0x2000afac

0801067c <recv_custom_msg>:
 801067c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010680:	4693      	mov	fp, r2
 8010682:	b089      	sub	sp, #36	@ 0x24
 8010684:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8010688:	9305      	str	r3, [sp, #20]
 801068a:	468a      	mov	sl, r1
 801068c:	2100      	movs	r1, #0
 801068e:	4604      	mov	r4, r0
 8010690:	f88d 101e 	strb.w	r1, [sp, #30]
 8010694:	b322      	cbz	r2, 80106e0 <recv_custom_msg+0x64>
 8010696:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801069a:	f10d 081f 	add.w	r8, sp, #31
 801069e:	af05      	add	r7, sp, #20
 80106a0:	f10d 061e 	add.w	r6, sp, #30
 80106a4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80106a8:	e002      	b.n	80106b0 <recv_custom_msg+0x34>
 80106aa:	9b05      	ldr	r3, [sp, #20]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	dd0f      	ble.n	80106d0 <recv_custom_msg+0x54>
 80106b0:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80106b4:	4623      	mov	r3, r4
 80106b6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80106ba:	e9cd 5600 	strd	r5, r6, [sp]
 80106be:	4622      	mov	r2, r4
 80106c0:	4648      	mov	r0, r9
 80106c2:	f001 fca3 	bl	801200c <uxr_read_framed_msg>
 80106c6:	2800      	cmp	r0, #0
 80106c8:	d0ef      	beq.n	80106aa <recv_custom_msg+0x2e>
 80106ca:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80106ce:	b1b3      	cbz	r3, 80106fe <recv_custom_msg+0x82>
 80106d0:	4b0f      	ldr	r3, [pc, #60]	@ (8010710 <recv_custom_msg+0x94>)
 80106d2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80106d6:	701a      	strb	r2, [r3, #0]
 80106d8:	2000      	movs	r0, #0
 80106da:	b009      	add	sp, #36	@ 0x24
 80106dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106e0:	f10d 021f 	add.w	r2, sp, #31
 80106e4:	9200      	str	r2, [sp, #0]
 80106e6:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80106ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106ee:	4601      	mov	r1, r0
 80106f0:	47a8      	blx	r5
 80106f2:	2800      	cmp	r0, #0
 80106f4:	d0ec      	beq.n	80106d0 <recv_custom_msg+0x54>
 80106f6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d1e8      	bne.n	80106d0 <recv_custom_msg+0x54>
 80106fe:	f8cb 0000 	str.w	r0, [fp]
 8010702:	2001      	movs	r0, #1
 8010704:	f8ca 4000 	str.w	r4, [sl]
 8010708:	b009      	add	sp, #36	@ 0x24
 801070a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801070e:	bf00      	nop
 8010710:	2000afac 	.word	0x2000afac

08010714 <send_custom_msg>:
 8010714:	b530      	push	{r4, r5, lr}
 8010716:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801071a:	b087      	sub	sp, #28
 801071c:	4615      	mov	r5, r2
 801071e:	b974      	cbnz	r4, 801073e <send_custom_msg+0x2a>
 8010720:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8010724:	f10d 0317 	add.w	r3, sp, #23
 8010728:	47a0      	blx	r4
 801072a:	b108      	cbz	r0, 8010730 <send_custom_msg+0x1c>
 801072c:	42a8      	cmp	r0, r5
 801072e:	d015      	beq.n	801075c <send_custom_msg+0x48>
 8010730:	4b0c      	ldr	r3, [pc, #48]	@ (8010764 <send_custom_msg+0x50>)
 8010732:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010736:	701a      	strb	r2, [r3, #0]
 8010738:	2000      	movs	r0, #0
 801073a:	b007      	add	sp, #28
 801073c:	bd30      	pop	{r4, r5, pc}
 801073e:	460b      	mov	r3, r1
 8010740:	2200      	movs	r2, #0
 8010742:	f10d 0117 	add.w	r1, sp, #23
 8010746:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801074a:	4602      	mov	r2, r0
 801074c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8010750:	9500      	str	r5, [sp, #0]
 8010752:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8010756:	f001 fa61 	bl	8011c1c <uxr_write_framed_msg>
 801075a:	e7e6      	b.n	801072a <send_custom_msg+0x16>
 801075c:	2001      	movs	r0, #1
 801075e:	b007      	add	sp, #28
 8010760:	bd30      	pop	{r4, r5, pc}
 8010762:	bf00      	nop
 8010764:	2000afac 	.word	0x2000afac

08010768 <uxr_set_custom_transport_callbacks>:
 8010768:	b410      	push	{r4}
 801076a:	9c01      	ldr	r4, [sp, #4]
 801076c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8010770:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010774:	9b02      	ldr	r3, [sp, #8]
 8010776:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801077a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801077e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8010782:	4770      	bx	lr

08010784 <uxr_init_custom_transport>:
 8010784:	b538      	push	{r3, r4, r5, lr}
 8010786:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801078a:	b303      	cbz	r3, 80107ce <uxr_init_custom_transport+0x4a>
 801078c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010790:	4604      	mov	r4, r0
 8010792:	b1e2      	cbz	r2, 80107ce <uxr_init_custom_transport+0x4a>
 8010794:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010798:	b1ca      	cbz	r2, 80107ce <uxr_init_custom_transport+0x4a>
 801079a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801079e:	b1b2      	cbz	r2, 80107ce <uxr_init_custom_transport+0x4a>
 80107a0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80107a4:	4798      	blx	r3
 80107a6:	4605      	mov	r5, r0
 80107a8:	b188      	cbz	r0, 80107ce <uxr_init_custom_transport+0x4a>
 80107aa:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80107ae:	b98b      	cbnz	r3, 80107d4 <uxr_init_custom_transport+0x50>
 80107b0:	490b      	ldr	r1, [pc, #44]	@ (80107e0 <uxr_init_custom_transport+0x5c>)
 80107b2:	4b0c      	ldr	r3, [pc, #48]	@ (80107e4 <uxr_init_custom_transport+0x60>)
 80107b4:	4a0c      	ldr	r2, [pc, #48]	@ (80107e8 <uxr_init_custom_transport+0x64>)
 80107b6:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80107ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80107be:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80107c2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80107c6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80107ca:	4628      	mov	r0, r5
 80107cc:	bd38      	pop	{r3, r4, r5, pc}
 80107ce:	2500      	movs	r5, #0
 80107d0:	4628      	mov	r0, r5
 80107d2:	bd38      	pop	{r3, r4, r5, pc}
 80107d4:	2100      	movs	r1, #0
 80107d6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80107da:	f001 fa19 	bl	8011c10 <uxr_init_framing_io>
 80107de:	e7e7      	b.n	80107b0 <uxr_init_custom_transport+0x2c>
 80107e0:	08010715 	.word	0x08010715
 80107e4:	0801067d 	.word	0x0801067d
 80107e8:	08010671 	.word	0x08010671

080107ec <uxr_close_custom_transport>:
 80107ec:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80107f0:	4718      	bx	r3
 80107f2:	bf00      	nop

080107f4 <uxr_object_id>:
 80107f4:	b082      	sub	sp, #8
 80107f6:	2300      	movs	r3, #0
 80107f8:	f88d 1006 	strb.w	r1, [sp, #6]
 80107fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010800:	f360 030f 	bfi	r3, r0, #0, #16
 8010804:	f362 431f 	bfi	r3, r2, #16, #16
 8010808:	4618      	mov	r0, r3
 801080a:	b002      	add	sp, #8
 801080c:	4770      	bx	lr
 801080e:	bf00      	nop

08010810 <uxr_object_id_from_raw>:
 8010810:	7843      	ldrb	r3, [r0, #1]
 8010812:	7801      	ldrb	r1, [r0, #0]
 8010814:	b082      	sub	sp, #8
 8010816:	f003 020f 	and.w	r2, r3, #15
 801081a:	f88d 2006 	strb.w	r2, [sp, #6]
 801081e:	091b      	lsrs	r3, r3, #4
 8010820:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010824:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010828:	2000      	movs	r0, #0
 801082a:	f363 000f 	bfi	r0, r3, #0, #16
 801082e:	f362 401f 	bfi	r0, r2, #16, #16
 8010832:	b002      	add	sp, #8
 8010834:	4770      	bx	lr
 8010836:	bf00      	nop

08010838 <uxr_object_id_to_raw>:
 8010838:	4602      	mov	r2, r0
 801083a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801083e:	b082      	sub	sp, #8
 8010840:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010844:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010848:	f881 c000 	strb.w	ip, [r1]
 801084c:	7048      	strb	r0, [r1, #1]
 801084e:	b002      	add	sp, #8
 8010850:	4770      	bx	lr
 8010852:	bf00      	nop

08010854 <uxr_buffer_cancel_data>:
 8010854:	b510      	push	{r4, lr}
 8010856:	b094      	sub	sp, #80	@ 0x50
 8010858:	2300      	movs	r3, #0
 801085a:	9202      	str	r2, [sp, #8]
 801085c:	9205      	str	r2, [sp, #20]
 801085e:	9301      	str	r3, [sp, #4]
 8010860:	2201      	movs	r2, #1
 8010862:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010866:	f88d 301e 	strb.w	r3, [sp, #30]
 801086a:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801086e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010872:	2308      	movs	r3, #8
 8010874:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8010878:	9300      	str	r3, [sp, #0]
 801087a:	2210      	movs	r2, #16
 801087c:	ab0c      	add	r3, sp, #48	@ 0x30
 801087e:	4604      	mov	r4, r0
 8010880:	9103      	str	r1, [sp, #12]
 8010882:	f001 f85f 	bl	8011944 <uxr_prepare_stream_to_write_submessage>
 8010886:	b918      	cbnz	r0, 8010890 <uxr_buffer_cancel_data+0x3c>
 8010888:	4604      	mov	r4, r0
 801088a:	4620      	mov	r0, r4
 801088c:	b014      	add	sp, #80	@ 0x50
 801088e:	bd10      	pop	{r4, pc}
 8010890:	9905      	ldr	r1, [sp, #20]
 8010892:	aa06      	add	r2, sp, #24
 8010894:	4620      	mov	r0, r4
 8010896:	f001 f98b 	bl	8011bb0 <uxr_init_base_object_request>
 801089a:	a906      	add	r1, sp, #24
 801089c:	4604      	mov	r4, r0
 801089e:	a80c      	add	r0, sp, #48	@ 0x30
 80108a0:	f003 f82c 	bl	80138fc <uxr_serialize_READ_DATA_Payload>
 80108a4:	4620      	mov	r0, r4
 80108a6:	b014      	add	sp, #80	@ 0x50
 80108a8:	bd10      	pop	{r4, pc}
 80108aa:	bf00      	nop

080108ac <read_submessage_format>:
 80108ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108b0:	b095      	sub	sp, #84	@ 0x54
 80108b2:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80108b6:	b113      	cbz	r3, 80108be <read_submessage_format+0x12>
 80108b8:	b015      	add	sp, #84	@ 0x54
 80108ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108be:	460c      	mov	r4, r1
 80108c0:	4615      	mov	r5, r2
 80108c2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80108c6:	4607      	mov	r7, r0
 80108c8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80108ca:	9004      	str	r0, [sp, #16]
 80108cc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80108ce:	9005      	str	r0, [sp, #20]
 80108d0:	1a52      	subs	r2, r2, r1
 80108d2:	a80c      	add	r0, sp, #48	@ 0x30
 80108d4:	4699      	mov	r9, r3
 80108d6:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80108da:	f7ff fc7b 	bl	80101d4 <ucdr_init_buffer>
 80108de:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80108e2:	a80c      	add	r0, sp, #48	@ 0x30
 80108e4:	f7ff fc4a 	bl	801017c <ucdr_set_on_full_buffer_callback>
 80108e8:	69e2      	ldr	r2, [r4, #28]
 80108ea:	b19a      	cbz	r2, 8010914 <read_submessage_format+0x68>
 80108ec:	f1b8 0f07 	cmp.w	r8, #7
 80108f0:	f882 9014 	strb.w	r9, [r2, #20]
 80108f4:	d040      	beq.n	8010978 <read_submessage_format+0xcc>
 80108f6:	f1b8 0f08 	cmp.w	r8, #8
 80108fa:	d02e      	beq.n	801095a <read_submessage_format+0xae>
 80108fc:	f1b8 0f06 	cmp.w	r8, #6
 8010900:	d011      	beq.n	8010926 <read_submessage_format+0x7a>
 8010902:	2301      	movs	r3, #1
 8010904:	7513      	strb	r3, [r2, #20]
 8010906:	4629      	mov	r1, r5
 8010908:	4620      	mov	r0, r4
 801090a:	f7ff fcb3 	bl	8010274 <ucdr_advance_buffer>
 801090e:	b015      	add	sp, #84	@ 0x54
 8010910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010914:	f1b8 0f07 	cmp.w	r8, #7
 8010918:	d02e      	beq.n	8010978 <read_submessage_format+0xcc>
 801091a:	f1b8 0f08 	cmp.w	r8, #8
 801091e:	d01c      	beq.n	801095a <read_submessage_format+0xae>
 8010920:	f1b8 0f06 	cmp.w	r8, #6
 8010924:	d1ef      	bne.n	8010906 <read_submessage_format+0x5a>
 8010926:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 801092a:	f1b8 0f00 	cmp.w	r8, #0
 801092e:	d011      	beq.n	8010954 <read_submessage_format+0xa8>
 8010930:	ab0c      	add	r3, sp, #48	@ 0x30
 8010932:	e9cd 3500 	strd	r3, r5, [sp]
 8010936:	2306      	movs	r3, #6
 8010938:	f88d 3016 	strb.w	r3, [sp, #22]
 801093c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010940:	9302      	str	r3, [sp, #8]
 8010942:	4632      	mov	r2, r6
 8010944:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010948:	4638      	mov	r0, r7
 801094a:	47c0      	blx	r8
 801094c:	2301      	movs	r3, #1
 801094e:	69e2      	ldr	r2, [r4, #28]
 8010950:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010954:	2a00      	cmp	r2, #0
 8010956:	d1d4      	bne.n	8010902 <read_submessage_format+0x56>
 8010958:	e7d5      	b.n	8010906 <read_submessage_format+0x5a>
 801095a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801095e:	2b00      	cmp	r3, #0
 8010960:	d0f8      	beq.n	8010954 <read_submessage_format+0xa8>
 8010962:	a906      	add	r1, sp, #24
 8010964:	a80c      	add	r0, sp, #48	@ 0x30
 8010966:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801096a:	f003 f89b 	bl	8013aa4 <uxr_deserialize_SampleIdentity>
 801096e:	b9a0      	cbnz	r0, 801099a <read_submessage_format+0xee>
 8010970:	69e2      	ldr	r2, [r4, #28]
 8010972:	2a00      	cmp	r2, #0
 8010974:	d1c5      	bne.n	8010902 <read_submessage_format+0x56>
 8010976:	e7c6      	b.n	8010906 <read_submessage_format+0x5a>
 8010978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801097c:	b13b      	cbz	r3, 801098e <read_submessage_format+0xe2>
 801097e:	a906      	add	r1, sp, #24
 8010980:	a80c      	add	r0, sp, #48	@ 0x30
 8010982:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010986:	f002 fd53 	bl	8013430 <uxr_deserialize_BaseObjectRequest>
 801098a:	bb60      	cbnz	r0, 80109e6 <read_submessage_format+0x13a>
 801098c:	69e2      	ldr	r2, [r4, #28]
 801098e:	68a3      	ldr	r3, [r4, #8]
 8010990:	442b      	add	r3, r5
 8010992:	60a3      	str	r3, [r4, #8]
 8010994:	2a00      	cmp	r2, #0
 8010996:	d1b4      	bne.n	8010902 <read_submessage_format+0x56>
 8010998:	e7b5      	b.n	8010906 <read_submessage_format+0x5a>
 801099a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801099e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80109a0:	1a52      	subs	r2, r2, r1
 80109a2:	eba8 0803 	sub.w	r8, r8, r3
 80109a6:	a80c      	add	r0, sp, #48	@ 0x30
 80109a8:	f7ff fc14 	bl	80101d4 <ucdr_init_buffer>
 80109ac:	44a8      	add	r8, r5
 80109ae:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80109b2:	a80c      	add	r0, sp, #48	@ 0x30
 80109b4:	f7ff fbe2 	bl	801017c <ucdr_set_on_full_buffer_callback>
 80109b8:	fa1f f888 	uxth.w	r8, r8
 80109bc:	ab0c      	add	r3, sp, #48	@ 0x30
 80109be:	9300      	str	r3, [sp, #0]
 80109c0:	f8cd 8004 	str.w	r8, [sp, #4]
 80109c4:	2108      	movs	r1, #8
 80109c6:	f88d 1016 	strb.w	r1, [sp, #22]
 80109ca:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80109ce:	9102      	str	r1, [sp, #8]
 80109d0:	ab06      	add	r3, sp, #24
 80109d2:	4632      	mov	r2, r6
 80109d4:	9905      	ldr	r1, [sp, #20]
 80109d6:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 80109da:	4638      	mov	r0, r7
 80109dc:	47b0      	blx	r6
 80109de:	2301      	movs	r3, #1
 80109e0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80109e4:	e7c4      	b.n	8010970 <read_submessage_format+0xc4>
 80109e6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80109ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80109ec:	1a52      	subs	r2, r2, r1
 80109ee:	a80c      	add	r0, sp, #48	@ 0x30
 80109f0:	eba8 0803 	sub.w	r8, r8, r3
 80109f4:	f7ff fbee 	bl	80101d4 <ucdr_init_buffer>
 80109f8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80109fc:	a80c      	add	r0, sp, #48	@ 0x30
 80109fe:	f7ff fbbd 	bl	801017c <ucdr_set_on_full_buffer_callback>
 8010a02:	ab0c      	add	r3, sp, #48	@ 0x30
 8010a04:	9300      	str	r3, [sp, #0]
 8010a06:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010a0a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010a0e:	44a8      	add	r8, r5
 8010a10:	fa1f f888 	uxth.w	r8, r8
 8010a14:	f8cd 8004 	str.w	r8, [sp, #4]
 8010a18:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010a1c:	2107      	movs	r1, #7
 8010a1e:	f88d 1016 	strb.w	r1, [sp, #22]
 8010a22:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8010a26:	9102      	str	r1, [sp, #8]
 8010a28:	4632      	mov	r2, r6
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8010a30:	9905      	ldr	r1, [sp, #20]
 8010a32:	4638      	mov	r0, r7
 8010a34:	47b0      	blx	r6
 8010a36:	2301      	movs	r3, #1
 8010a38:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010a3c:	e7a6      	b.n	801098c <read_submessage_format+0xe0>
 8010a3e:	bf00      	nop

08010a40 <on_get_fragmentation_info>:
 8010a40:	b500      	push	{lr}
 8010a42:	b08b      	sub	sp, #44	@ 0x2c
 8010a44:	4601      	mov	r1, r0
 8010a46:	2204      	movs	r2, #4
 8010a48:	a802      	add	r0, sp, #8
 8010a4a:	f7ff fbc3 	bl	80101d4 <ucdr_init_buffer>
 8010a4e:	f10d 0305 	add.w	r3, sp, #5
 8010a52:	f10d 0206 	add.w	r2, sp, #6
 8010a56:	a901      	add	r1, sp, #4
 8010a58:	a802      	add	r0, sp, #8
 8010a5a:	f001 febd 	bl	80127d8 <uxr_read_submessage_header>
 8010a5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010a62:	2b0d      	cmp	r3, #13
 8010a64:	d003      	beq.n	8010a6e <on_get_fragmentation_info+0x2e>
 8010a66:	2000      	movs	r0, #0
 8010a68:	b00b      	add	sp, #44	@ 0x2c
 8010a6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010a72:	f013 0f02 	tst.w	r3, #2
 8010a76:	bf14      	ite	ne
 8010a78:	2002      	movne	r0, #2
 8010a7a:	2001      	moveq	r0, #1
 8010a7c:	b00b      	add	sp, #44	@ 0x2c
 8010a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a82:	bf00      	nop

08010a84 <read_submessage_get_info>:
 8010a84:	b570      	push	{r4, r5, r6, lr}
 8010a86:	2500      	movs	r5, #0
 8010a88:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010a8c:	4604      	mov	r4, r0
 8010a8e:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010a92:	460e      	mov	r6, r1
 8010a94:	a810      	add	r0, sp, #64	@ 0x40
 8010a96:	4629      	mov	r1, r5
 8010a98:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010a9c:	f009 f8b0 	bl	8019c00 <memset>
 8010aa0:	a903      	add	r1, sp, #12
 8010aa2:	4630      	mov	r0, r6
 8010aa4:	f002 fe6c 	bl	8013780 <uxr_deserialize_GET_INFO_Payload>
 8010aa8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010aac:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	f001 f875 	bl	8011ba0 <uxr_session_header_offset>
 8010ab6:	462b      	mov	r3, r5
 8010ab8:	9000      	str	r0, [sp, #0]
 8010aba:	220c      	movs	r2, #12
 8010abc:	a905      	add	r1, sp, #20
 8010abe:	a808      	add	r0, sp, #32
 8010ac0:	f7ff fb76 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 8010ac4:	a910      	add	r1, sp, #64	@ 0x40
 8010ac6:	a808      	add	r0, sp, #32
 8010ac8:	f002 fecc 	bl	8013864 <uxr_serialize_INFO_Payload>
 8010acc:	9b08      	ldr	r3, [sp, #32]
 8010ace:	462a      	mov	r2, r5
 8010ad0:	4629      	mov	r1, r5
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	f001 f80e 	bl	8011af4 <uxr_stamp_session_header>
 8010ad8:	a808      	add	r0, sp, #32
 8010ada:	f7ff fba7 	bl	801022c <ucdr_buffer_length>
 8010ade:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010ae0:	4602      	mov	r2, r0
 8010ae2:	a905      	add	r1, sp, #20
 8010ae4:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010ae8:	47a0      	blx	r4
 8010aea:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010aee:	bd70      	pop	{r4, r5, r6, pc}

08010af0 <write_submessage_acknack.isra.0>:
 8010af0:	b570      	push	{r4, r5, r6, lr}
 8010af2:	b092      	sub	sp, #72	@ 0x48
 8010af4:	4605      	mov	r5, r0
 8010af6:	460e      	mov	r6, r1
 8010af8:	4614      	mov	r4, r2
 8010afa:	f001 f851 	bl	8011ba0 <uxr_session_header_offset>
 8010afe:	a905      	add	r1, sp, #20
 8010b00:	9000      	str	r0, [sp, #0]
 8010b02:	2300      	movs	r3, #0
 8010b04:	a80a      	add	r0, sp, #40	@ 0x28
 8010b06:	2211      	movs	r2, #17
 8010b08:	f7ff fb52 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 8010b0c:	2218      	movs	r2, #24
 8010b0e:	fb02 5404 	mla	r4, r2, r4, r5
 8010b12:	2300      	movs	r3, #0
 8010b14:	2205      	movs	r2, #5
 8010b16:	3450      	adds	r4, #80	@ 0x50
 8010b18:	210a      	movs	r1, #10
 8010b1a:	a80a      	add	r0, sp, #40	@ 0x28
 8010b1c:	f001 fe42 	bl	80127a4 <uxr_buffer_submessage_header>
 8010b20:	a903      	add	r1, sp, #12
 8010b22:	4620      	mov	r0, r4
 8010b24:	f007 fba8 	bl	8018278 <uxr_compute_acknack>
 8010b28:	ba40      	rev16	r0, r0
 8010b2a:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010b2e:	a903      	add	r1, sp, #12
 8010b30:	a80a      	add	r0, sp, #40	@ 0x28
 8010b32:	f88d 6010 	strb.w	r6, [sp, #16]
 8010b36:	f002 ff05 	bl	8013944 <uxr_serialize_ACKNACK_Payload>
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b3e:	4611      	mov	r1, r2
 8010b40:	4628      	mov	r0, r5
 8010b42:	f000 ffd7 	bl	8011af4 <uxr_stamp_session_header>
 8010b46:	a80a      	add	r0, sp, #40	@ 0x28
 8010b48:	f7ff fb70 	bl	801022c <ucdr_buffer_length>
 8010b4c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010b4e:	4602      	mov	r2, r0
 8010b50:	a905      	add	r1, sp, #20
 8010b52:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010b56:	47a0      	blx	r4
 8010b58:	b012      	add	sp, #72	@ 0x48
 8010b5a:	bd70      	pop	{r4, r5, r6, pc}
 8010b5c:	0000      	movs	r0, r0
	...

08010b60 <uxr_init_session>:
 8010b60:	b510      	push	{r4, lr}
 8010b62:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010b98 <uxr_init_session+0x38>
 8010b66:	2300      	movs	r3, #0
 8010b68:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010b72:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010b76:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8010b7a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010b7e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010b82:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010b86:	2181      	movs	r1, #129	@ 0x81
 8010b88:	f000 ff20 	bl	80119cc <uxr_init_session_info>
 8010b8c:	f104 0008 	add.w	r0, r4, #8
 8010b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b94:	f001 bd22 	b.w	80125dc <uxr_init_stream_storage>
	...

08010ba0 <uxr_set_status_callback>:
 8010ba0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010ba4:	4770      	bx	lr
 8010ba6:	bf00      	nop

08010ba8 <uxr_set_topic_callback>:
 8010ba8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010bac:	4770      	bx	lr
 8010bae:	bf00      	nop

08010bb0 <uxr_set_request_callback>:
 8010bb0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010bb4:	4770      	bx	lr
 8010bb6:	bf00      	nop

08010bb8 <uxr_set_reply_callback>:
 8010bb8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop

08010bc0 <uxr_create_output_best_effort_stream>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	e9cd 2100 	strd	r2, r1, [sp]
 8010bc8:	4604      	mov	r4, r0
 8010bca:	f000 ffe9 	bl	8011ba0 <uxr_session_header_offset>
 8010bce:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	f104 0008 	add.w	r0, r4, #8
 8010bd8:	b004      	add	sp, #16
 8010bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bde:	f001 bd47 	b.w	8012670 <uxr_add_output_best_effort_buffer>
 8010be2:	bf00      	nop

08010be4 <uxr_create_output_reliable_stream>:
 8010be4:	b510      	push	{r4, lr}
 8010be6:	b088      	sub	sp, #32
 8010be8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010bec:	4604      	mov	r4, r0
 8010bee:	9303      	str	r3, [sp, #12]
 8010bf0:	f000 ffd6 	bl	8011ba0 <uxr_session_header_offset>
 8010bf4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010bf8:	9000      	str	r0, [sp, #0]
 8010bfa:	9905      	ldr	r1, [sp, #20]
 8010bfc:	f104 0008 	add.w	r0, r4, #8
 8010c00:	f001 fd4a 	bl	8012698 <uxr_add_output_reliable_buffer>
 8010c04:	2200      	movs	r2, #0
 8010c06:	b2c3      	uxtb	r3, r0
 8010c08:	f363 0207 	bfi	r2, r3, #0, #8
 8010c0c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010c10:	f363 220f 	bfi	r2, r3, #8, #8
 8010c14:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010c18:	f363 4217 	bfi	r2, r3, #16, #8
 8010c1c:	0e03      	lsrs	r3, r0, #24
 8010c1e:	f363 621f 	bfi	r2, r3, #24, #8
 8010c22:	4610      	mov	r0, r2
 8010c24:	b008      	add	sp, #32
 8010c26:	bd10      	pop	{r4, pc}

08010c28 <uxr_create_input_best_effort_stream>:
 8010c28:	b082      	sub	sp, #8
 8010c2a:	3008      	adds	r0, #8
 8010c2c:	b002      	add	sp, #8
 8010c2e:	f001 bd4d 	b.w	80126cc <uxr_add_input_best_effort_buffer>
 8010c32:	bf00      	nop

08010c34 <uxr_create_input_reliable_stream>:
 8010c34:	b510      	push	{r4, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	4c0b      	ldr	r4, [pc, #44]	@ (8010c68 <uxr_create_input_reliable_stream+0x34>)
 8010c3a:	9400      	str	r4, [sp, #0]
 8010c3c:	3008      	adds	r0, #8
 8010c3e:	f001 fd5b 	bl	80126f8 <uxr_add_input_reliable_buffer>
 8010c42:	2200      	movs	r2, #0
 8010c44:	b2c3      	uxtb	r3, r0
 8010c46:	f363 0207 	bfi	r2, r3, #0, #8
 8010c4a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010c4e:	f363 220f 	bfi	r2, r3, #8, #8
 8010c52:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010c56:	f363 4217 	bfi	r2, r3, #16, #8
 8010c5a:	0e03      	lsrs	r3, r0, #24
 8010c5c:	f363 621f 	bfi	r2, r3, #24, #8
 8010c60:	4610      	mov	r0, r2
 8010c62:	b004      	add	sp, #16
 8010c64:	bd10      	pop	{r4, pc}
 8010c66:	bf00      	nop
 8010c68:	08010a41 	.word	0x08010a41

08010c6c <uxr_epoch_nanos>:
 8010c6c:	b510      	push	{r4, lr}
 8010c6e:	4604      	mov	r4, r0
 8010c70:	f001 fdf8 	bl	8012864 <uxr_nanos>
 8010c74:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010c78:	1ac0      	subs	r0, r0, r3
 8010c7a:	eb61 0102 	sbc.w	r1, r1, r2
 8010c7e:	bd10      	pop	{r4, pc}

08010c80 <uxr_flash_output_streams>:
 8010c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c84:	7e03      	ldrb	r3, [r0, #24]
 8010c86:	b084      	sub	sp, #16
 8010c88:	4604      	mov	r4, r0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d035      	beq.n	8010cfa <uxr_flash_output_streams+0x7a>
 8010c8e:	f04f 0900 	mov.w	r9, #0
 8010c92:	4648      	mov	r0, r9
 8010c94:	f10d 0802 	add.w	r8, sp, #2
 8010c98:	af03      	add	r7, sp, #12
 8010c9a:	ae02      	add	r6, sp, #8
 8010c9c:	e006      	b.n	8010cac <uxr_flash_output_streams+0x2c>
 8010c9e:	7e23      	ldrb	r3, [r4, #24]
 8010ca0:	f109 0901 	add.w	r9, r9, #1
 8010ca4:	fa5f f089 	uxtb.w	r0, r9
 8010ca8:	4283      	cmp	r3, r0
 8010caa:	d926      	bls.n	8010cfa <uxr_flash_output_streams+0x7a>
 8010cac:	2201      	movs	r2, #1
 8010cae:	4611      	mov	r1, r2
 8010cb0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010cb4:	f001 fc3e 	bl	8012534 <uxr_stream_id>
 8010cb8:	3508      	adds	r5, #8
 8010cba:	4684      	mov	ip, r0
 8010cbc:	4643      	mov	r3, r8
 8010cbe:	463a      	mov	r2, r7
 8010cc0:	4631      	mov	r1, r6
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	f8cd c004 	str.w	ip, [sp, #4]
 8010cc8:	f007 fb5c 	bl	8018384 <uxr_prepare_best_effort_buffer_to_send>
 8010ccc:	2800      	cmp	r0, #0
 8010cce:	d0e6      	beq.n	8010c9e <uxr_flash_output_streams+0x1e>
 8010cd0:	9b02      	ldr	r3, [sp, #8]
 8010cd2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010cd6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010cda:	4620      	mov	r0, r4
 8010cdc:	f000 ff0a 	bl	8011af4 <uxr_stamp_session_header>
 8010ce0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010ce2:	9a03      	ldr	r2, [sp, #12]
 8010ce4:	685d      	ldr	r5, [r3, #4]
 8010ce6:	6818      	ldr	r0, [r3, #0]
 8010ce8:	9902      	ldr	r1, [sp, #8]
 8010cea:	47a8      	blx	r5
 8010cec:	f109 0901 	add.w	r9, r9, #1
 8010cf0:	7e23      	ldrb	r3, [r4, #24]
 8010cf2:	fa5f f089 	uxtb.w	r0, r9
 8010cf6:	4283      	cmp	r3, r0
 8010cf8:	d8d8      	bhi.n	8010cac <uxr_flash_output_streams+0x2c>
 8010cfa:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010cfe:	b38b      	cbz	r3, 8010d64 <uxr_flash_output_streams+0xe4>
 8010d00:	f04f 0900 	mov.w	r9, #0
 8010d04:	f10d 0802 	add.w	r8, sp, #2
 8010d08:	af03      	add	r7, sp, #12
 8010d0a:	ae02      	add	r6, sp, #8
 8010d0c:	4648      	mov	r0, r9
 8010d0e:	2201      	movs	r2, #1
 8010d10:	2102      	movs	r1, #2
 8010d12:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010d16:	f001 fc0d 	bl	8012534 <uxr_stream_id>
 8010d1a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010d1e:	3520      	adds	r5, #32
 8010d20:	9001      	str	r0, [sp, #4]
 8010d22:	e00d      	b.n	8010d40 <uxr_flash_output_streams+0xc0>
 8010d24:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010d28:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010d2c:	9b02      	ldr	r3, [sp, #8]
 8010d2e:	f000 fee1 	bl	8011af4 <uxr_stamp_session_header>
 8010d32:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d34:	9a03      	ldr	r2, [sp, #12]
 8010d36:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010d3a:	9902      	ldr	r1, [sp, #8]
 8010d3c:	6818      	ldr	r0, [r3, #0]
 8010d3e:	47d0      	blx	sl
 8010d40:	4643      	mov	r3, r8
 8010d42:	463a      	mov	r2, r7
 8010d44:	4631      	mov	r1, r6
 8010d46:	4628      	mov	r0, r5
 8010d48:	f007 fd3a 	bl	80187c0 <uxr_prepare_next_reliable_buffer_to_send>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	4620      	mov	r0, r4
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d1e7      	bne.n	8010d24 <uxr_flash_output_streams+0xa4>
 8010d54:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010d58:	f109 0901 	add.w	r9, r9, #1
 8010d5c:	fa5f f089 	uxtb.w	r0, r9
 8010d60:	4283      	cmp	r3, r0
 8010d62:	d8d4      	bhi.n	8010d0e <uxr_flash_output_streams+0x8e>
 8010d64:	b004      	add	sp, #16
 8010d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d6a:	bf00      	nop

08010d6c <read_submessage_info>:
 8010d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d70:	460d      	mov	r5, r1
 8010d72:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010d76:	4669      	mov	r1, sp
 8010d78:	4607      	mov	r7, r0
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	f002 fc0e 	bl	801359c <uxr_deserialize_BaseObjectReply>
 8010d80:	a902      	add	r1, sp, #8
 8010d82:	4604      	mov	r4, r0
 8010d84:	4628      	mov	r0, r5
 8010d86:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010d8a:	f7fe f8bf 	bl	800ef0c <ucdr_deserialize_bool>
 8010d8e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010d92:	4004      	ands	r4, r0
 8010d94:	b2e4      	uxtb	r4, r4
 8010d96:	b95b      	cbnz	r3, 8010db0 <read_submessage_info+0x44>
 8010d98:	a987      	add	r1, sp, #540	@ 0x21c
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	f7fe f8b6 	bl	800ef0c <ucdr_deserialize_bool>
 8010da0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010da4:	4606      	mov	r6, r0
 8010da6:	b94b      	cbnz	r3, 8010dbc <read_submessage_info+0x50>
 8010da8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db0:	a903      	add	r1, sp, #12
 8010db2:	4628      	mov	r0, r5
 8010db4:	f002 fa9a 	bl	80132ec <uxr_deserialize_ObjectVariant>
 8010db8:	4004      	ands	r4, r0
 8010dba:	e7ed      	b.n	8010d98 <read_submessage_info+0x2c>
 8010dbc:	a988      	add	r1, sp, #544	@ 0x220
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	f7fe f8d2 	bl	800ef68 <ucdr_deserialize_uint8_t>
 8010dc4:	4234      	tst	r4, r6
 8010dc6:	d0ef      	beq.n	8010da8 <read_submessage_info+0x3c>
 8010dc8:	2800      	cmp	r0, #0
 8010dca:	d0ed      	beq.n	8010da8 <read_submessage_info+0x3c>
 8010dcc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010dd0:	2b0d      	cmp	r3, #13
 8010dd2:	d1e9      	bne.n	8010da8 <read_submessage_info+0x3c>
 8010dd4:	a98a      	add	r1, sp, #552	@ 0x228
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	f7fe fe6c 	bl	800fab4 <ucdr_deserialize_int16_t>
 8010ddc:	b140      	cbz	r0, 8010df0 <read_submessage_info+0x84>
 8010dde:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	dd07      	ble.n	8010df6 <read_submessage_info+0x8a>
 8010de6:	f1b8 0f00 	cmp.w	r8, #0
 8010dea:	bf14      	ite	ne
 8010dec:	2001      	movne	r0, #1
 8010dee:	2002      	moveq	r0, #2
 8010df0:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010df4:	e7d8      	b.n	8010da8 <read_submessage_info+0x3c>
 8010df6:	2000      	movs	r0, #0
 8010df8:	e7fa      	b.n	8010df0 <read_submessage_info+0x84>
 8010dfa:	bf00      	nop

08010dfc <read_submessage_list>:
 8010dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e00:	b097      	sub	sp, #92	@ 0x5c
 8010e02:	4ec1      	ldr	r6, [pc, #772]	@ (8011108 <read_submessage_list+0x30c>)
 8010e04:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e06:	4604      	mov	r4, r0
 8010e08:	460d      	mov	r5, r1
 8010e0a:	f04f 0801 	mov.w	r8, #1
 8010e0e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010e12:	aa0c      	add	r2, sp, #48	@ 0x30
 8010e14:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010e18:	4628      	mov	r0, r5
 8010e1a:	f001 fcdd 	bl	80127d8 <uxr_read_submessage_header>
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	f000 813e 	beq.w	80110a0 <read_submessage_list+0x2a4>
 8010e24:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010e28:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010e2c:	3b02      	subs	r3, #2
 8010e2e:	2b0d      	cmp	r3, #13
 8010e30:	d8ed      	bhi.n	8010e0e <read_submessage_list+0x12>
 8010e32:	a101      	add	r1, pc, #4	@ (adr r1, 8010e38 <read_submessage_list+0x3c>)
 8010e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e38:	08011097 	.word	0x08011097
 8010e3c:	08010e0f 	.word	0x08010e0f
 8010e40:	08011087 	.word	0x08011087
 8010e44:	08011025 	.word	0x08011025
 8010e48:	0801101b 	.word	0x0801101b
 8010e4c:	08010e0f 	.word	0x08010e0f
 8010e50:	08010e0f 	.word	0x08010e0f
 8010e54:	08010f7b 	.word	0x08010f7b
 8010e58:	08010f0b 	.word	0x08010f0b
 8010e5c:	08010ecb 	.word	0x08010ecb
 8010e60:	08010e0f 	.word	0x08010e0f
 8010e64:	08010e0f 	.word	0x08010e0f
 8010e68:	08010e0f 	.word	0x08010e0f
 8010e6c:	08010e71 	.word	0x08010e71
 8010e70:	a910      	add	r1, sp, #64	@ 0x40
 8010e72:	4628      	mov	r0, r5
 8010e74:	f002 fdc4 	bl	8013a00 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010e78:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8010e7c:	f1b9 0f00 	cmp.w	r9, #0
 8010e80:	f000 8116 	beq.w	80110b0 <read_submessage_list+0x2b4>
 8010e84:	f001 fcee 	bl	8012864 <uxr_nanos>
 8010e88:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8010e90:	2100      	movs	r1, #0
 8010e92:	468c      	mov	ip, r1
 8010e94:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010e98:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8010e9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010e9e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8010ea0:	468c      	mov	ip, r1
 8010ea2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010ea6:	46e2      	mov	sl, ip
 8010ea8:	46bc      	mov	ip, r7
 8010eaa:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8010eae:	fbc0 7106 	smlal	r7, r1, r0, r6
 8010eb2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8010eb6:	e9cd 7100 	strd	r7, r1, [sp]
 8010eba:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010ebe:	9106      	str	r1, [sp, #24]
 8010ec0:	4620      	mov	r0, r4
 8010ec2:	47c8      	blx	r9
 8010ec4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8010ec8:	e7a1      	b.n	8010e0e <read_submessage_list+0x12>
 8010eca:	a910      	add	r1, sp, #64	@ 0x40
 8010ecc:	4628      	mov	r0, r5
 8010ece:	f002 fd77 	bl	80139c0 <uxr_deserialize_HEARTBEAT_Payload>
 8010ed2:	2100      	movs	r1, #0
 8010ed4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010ed8:	f001 fb56 	bl	8012588 <uxr_stream_id_from_raw>
 8010edc:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010ee0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010ee2:	4639      	mov	r1, r7
 8010ee4:	f104 0008 	add.w	r0, r4, #8
 8010ee8:	f001 fc3c 	bl	8012764 <uxr_get_input_reliable_stream>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	d08e      	beq.n	8010e0e <read_submessage_list+0x12>
 8010ef0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010ef4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010ef8:	f007 f9b2 	bl	8018260 <uxr_process_heartbeat>
 8010efc:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010f00:	463a      	mov	r2, r7
 8010f02:	4620      	mov	r0, r4
 8010f04:	f7ff fdf4 	bl	8010af0 <write_submessage_acknack.isra.0>
 8010f08:	e781      	b.n	8010e0e <read_submessage_list+0x12>
 8010f0a:	a910      	add	r1, sp, #64	@ 0x40
 8010f0c:	4628      	mov	r0, r5
 8010f0e:	f002 fd2f 	bl	8013970 <uxr_deserialize_ACKNACK_Payload>
 8010f12:	2100      	movs	r1, #0
 8010f14:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010f18:	f001 fb36 	bl	8012588 <uxr_stream_id_from_raw>
 8010f1c:	900d      	str	r0, [sp, #52]	@ 0x34
 8010f1e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010f22:	f104 0008 	add.w	r0, r4, #8
 8010f26:	f001 fc09 	bl	801273c <uxr_get_output_reliable_stream>
 8010f2a:	4607      	mov	r7, r0
 8010f2c:	2800      	cmp	r0, #0
 8010f2e:	f43f af6e 	beq.w	8010e0e <read_submessage_list+0x12>
 8010f32:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8010f36:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8010f3a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010f3e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010f42:	b289      	uxth	r1, r1
 8010f44:	f007 fce6 	bl	8018914 <uxr_process_acknack>
 8010f48:	4638      	mov	r0, r7
 8010f4a:	f007 fca3 	bl	8018894 <uxr_begin_output_nack_buffer_it>
 8010f4e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010f52:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8010f56:	e006      	b.n	8010f66 <read_submessage_list+0x16a>
 8010f58:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010f5c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010f60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010f62:	6818      	ldr	r0, [r3, #0]
 8010f64:	47c8      	blx	r9
 8010f66:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8010f6a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8010f6c:	4651      	mov	r1, sl
 8010f6e:	4638      	mov	r0, r7
 8010f70:	f007 fc92 	bl	8018898 <uxr_next_reliable_nack_buffer_to_send>
 8010f74:	2800      	cmp	r0, #0
 8010f76:	d1ef      	bne.n	8010f58 <read_submessage_list+0x15c>
 8010f78:	e749      	b.n	8010e0e <read_submessage_list+0x12>
 8010f7a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8010f7e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8010f82:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010f86:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8010f8a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8010f8e:	4651      	mov	r1, sl
 8010f90:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010f94:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8010f98:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8010f9c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8010fa6:	f002 fa43 	bl	8013430 <uxr_deserialize_BaseObjectRequest>
 8010faa:	4650      	mov	r0, sl
 8010fac:	a90f      	add	r1, sp, #60	@ 0x3c
 8010fae:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010fb2:	f000 fe1b 	bl	8011bec <uxr_parse_base_object_request>
 8010fb6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010fba:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010fbc:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010fc0:	9110      	str	r1, [sp, #64]	@ 0x40
 8010fc2:	3f04      	subs	r7, #4
 8010fc4:	f009 090e 	and.w	r9, r9, #14
 8010fc8:	b2bf      	uxth	r7, r7
 8010fca:	f1bb 0f00 	cmp.w	fp, #0
 8010fce:	d006      	beq.n	8010fde <read_submessage_list+0x1e2>
 8010fd0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010fd4:	9300      	str	r3, [sp, #0]
 8010fd6:	4652      	mov	r2, sl
 8010fd8:	2300      	movs	r3, #0
 8010fda:	4620      	mov	r0, r4
 8010fdc:	47d8      	blx	fp
 8010fde:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010fe0:	b16a      	cbz	r2, 8010ffe <read_submessage_list+0x202>
 8010fe2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010fe4:	2100      	movs	r1, #0
 8010fe6:	3802      	subs	r0, #2
 8010fe8:	e002      	b.n	8010ff0 <read_submessage_list+0x1f4>
 8010fea:	3101      	adds	r1, #1
 8010fec:	4291      	cmp	r1, r2
 8010fee:	d006      	beq.n	8010ffe <read_submessage_list+0x202>
 8010ff0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010ff4:	4553      	cmp	r3, sl
 8010ff6:	d1f8      	bne.n	8010fea <read_submessage_list+0x1ee>
 8010ff8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	545a      	strb	r2, [r3, r1]
 8010ffe:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011002:	9102      	str	r1, [sp, #8]
 8011004:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011006:	9101      	str	r1, [sp, #4]
 8011008:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801100a:	9100      	str	r1, [sp, #0]
 801100c:	464b      	mov	r3, r9
 801100e:	463a      	mov	r2, r7
 8011010:	4629      	mov	r1, r5
 8011012:	4620      	mov	r0, r4
 8011014:	f7ff fc4a 	bl	80108ac <read_submessage_format>
 8011018:	e6f9      	b.n	8010e0e <read_submessage_list+0x12>
 801101a:	4629      	mov	r1, r5
 801101c:	4620      	mov	r0, r4
 801101e:	f7ff fea5 	bl	8010d6c <read_submessage_info>
 8011022:	e6f4      	b.n	8010e0e <read_submessage_list+0x12>
 8011024:	2a00      	cmp	r2, #0
 8011026:	d03e      	beq.n	80110a6 <read_submessage_list+0x2aa>
 8011028:	a910      	add	r1, sp, #64	@ 0x40
 801102a:	4628      	mov	r0, r5
 801102c:	f002 fbfc 	bl	8013828 <uxr_deserialize_STATUS_Payload>
 8011030:	a90e      	add	r1, sp, #56	@ 0x38
 8011032:	aa0d      	add	r2, sp, #52	@ 0x34
 8011034:	a810      	add	r0, sp, #64	@ 0x40
 8011036:	f000 fdd9 	bl	8011bec <uxr_parse_base_object_request>
 801103a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801103e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011040:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8011044:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011048:	910f      	str	r1, [sp, #60]	@ 0x3c
 801104a:	f1ba 0f00 	cmp.w	sl, #0
 801104e:	d006      	beq.n	801105e <read_submessage_list+0x262>
 8011050:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011054:	9300      	str	r3, [sp, #0]
 8011056:	463a      	mov	r2, r7
 8011058:	464b      	mov	r3, r9
 801105a:	4620      	mov	r0, r4
 801105c:	47d0      	blx	sl
 801105e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011060:	2a00      	cmp	r2, #0
 8011062:	f43f aed4 	beq.w	8010e0e <read_submessage_list+0x12>
 8011066:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011068:	2100      	movs	r1, #0
 801106a:	3802      	subs	r0, #2
 801106c:	e003      	b.n	8011076 <read_submessage_list+0x27a>
 801106e:	3101      	adds	r1, #1
 8011070:	4291      	cmp	r1, r2
 8011072:	f43f aecc 	beq.w	8010e0e <read_submessage_list+0x12>
 8011076:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801107a:	42bb      	cmp	r3, r7
 801107c:	d1f7      	bne.n	801106e <read_submessage_list+0x272>
 801107e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011080:	f803 9001 	strb.w	r9, [r3, r1]
 8011084:	e6c3      	b.n	8010e0e <read_submessage_list+0x12>
 8011086:	2a00      	cmp	r2, #0
 8011088:	f47f aec1 	bne.w	8010e0e <read_submessage_list+0x12>
 801108c:	4629      	mov	r1, r5
 801108e:	4620      	mov	r0, r4
 8011090:	f000 fcf2 	bl	8011a78 <uxr_read_create_session_status>
 8011094:	e6bb      	b.n	8010e0e <read_submessage_list+0x12>
 8011096:	4629      	mov	r1, r5
 8011098:	4620      	mov	r0, r4
 801109a:	f7ff fcf3 	bl	8010a84 <read_submessage_get_info>
 801109e:	e6b6      	b.n	8010e0e <read_submessage_list+0x12>
 80110a0:	b017      	add	sp, #92	@ 0x5c
 80110a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110a6:	4629      	mov	r1, r5
 80110a8:	4620      	mov	r0, r4
 80110aa:	f000 fcf1 	bl	8011a90 <uxr_read_delete_session_status>
 80110ae:	e6ae      	b.n	8010e0e <read_submessage_list+0x12>
 80110b0:	f001 fbd8 	bl	8012864 <uxr_nanos>
 80110b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80110b6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80110b8:	464f      	mov	r7, r9
 80110ba:	fbc3 2706 	smlal	r2, r7, r3, r6
 80110be:	1812      	adds	r2, r2, r0
 80110c0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80110c2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80110c4:	eb47 0101 	adc.w	r1, r7, r1
 80110c8:	464f      	mov	r7, r9
 80110ca:	fbc3 0706 	smlal	r0, r7, r3, r6
 80110ce:	463b      	mov	r3, r7
 80110d0:	4684      	mov	ip, r0
 80110d2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80110d6:	fbc7 0906 	smlal	r0, r9, r7, r6
 80110da:	eb1c 0c00 	adds.w	ip, ip, r0
 80110de:	464f      	mov	r7, r9
 80110e0:	eb43 0307 	adc.w	r3, r3, r7
 80110e4:	ebb2 0c0c 	subs.w	ip, r2, ip
 80110e8:	eb61 0303 	sbc.w	r3, r1, r3
 80110ec:	0fda      	lsrs	r2, r3, #31
 80110ee:	eb12 020c 	adds.w	r2, r2, ip
 80110f2:	f143 0300 	adc.w	r3, r3, #0
 80110f6:	0852      	lsrs	r2, r2, #1
 80110f8:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80110fc:	105b      	asrs	r3, r3, #1
 80110fe:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8011102:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8011106:	e6dd      	b.n	8010ec4 <read_submessage_list+0xc8>
 8011108:	3b9aca00 	.word	0x3b9aca00

0801110c <listen_message_reliably>:
 801110c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011110:	1e0b      	subs	r3, r1, #0
 8011112:	b09d      	sub	sp, #116	@ 0x74
 8011114:	bfb8      	it	lt
 8011116:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801111a:	4680      	mov	r8, r0
 801111c:	9305      	str	r3, [sp, #20]
 801111e:	f001 fb87 	bl	8012830 <uxr_millis>
 8011122:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8011126:	4681      	mov	r9, r0
 8011128:	2a00      	cmp	r2, #0
 801112a:	f000 80a1 	beq.w	8011270 <listen_message_reliably+0x164>
 801112e:	2600      	movs	r6, #0
 8011130:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011134:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011138:	9303      	str	r3, [sp, #12]
 801113a:	4630      	mov	r0, r6
 801113c:	460f      	mov	r7, r1
 801113e:	e00f      	b.n	8011160 <listen_message_reliably+0x54>
 8011140:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011144:	9903      	ldr	r1, [sp, #12]
 8011146:	455a      	cmp	r2, fp
 8011148:	f106 0601 	add.w	r6, r6, #1
 801114c:	eb73 0101 	sbcs.w	r1, r3, r1
 8011150:	b2f0      	uxtb	r0, r6
 8011152:	da01      	bge.n	8011158 <listen_message_reliably+0x4c>
 8011154:	4693      	mov	fp, r2
 8011156:	9303      	str	r3, [sp, #12]
 8011158:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801115c:	4283      	cmp	r3, r0
 801115e:	d960      	bls.n	8011222 <listen_message_reliably+0x116>
 8011160:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011164:	2102      	movs	r1, #2
 8011166:	2201      	movs	r2, #1
 8011168:	f001 f9e4 	bl	8012534 <uxr_stream_id>
 801116c:	00e4      	lsls	r4, r4, #3
 801116e:	f104 0520 	add.w	r5, r4, #32
 8011172:	4445      	add	r5, r8
 8011174:	4601      	mov	r1, r0
 8011176:	463b      	mov	r3, r7
 8011178:	464a      	mov	r2, r9
 801117a:	4628      	mov	r0, r5
 801117c:	9109      	str	r1, [sp, #36]	@ 0x24
 801117e:	f007 fb5f 	bl	8018840 <uxr_update_output_stream_heartbeat_timestamp>
 8011182:	eb08 0304 	add.w	r3, r8, r4
 8011186:	2800      	cmp	r0, #0
 8011188:	d0da      	beq.n	8011140 <listen_message_reliably+0x34>
 801118a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801118e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8011192:	9304      	str	r3, [sp, #16]
 8011194:	4640      	mov	r0, r8
 8011196:	f000 fd03 	bl	8011ba0 <uxr_session_header_offset>
 801119a:	3501      	adds	r5, #1
 801119c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80111a0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80111a4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80111a8:	2300      	movs	r3, #0
 80111aa:	2211      	movs	r2, #17
 80111ac:	9000      	str	r0, [sp, #0]
 80111ae:	a90c      	add	r1, sp, #48	@ 0x30
 80111b0:	4650      	mov	r0, sl
 80111b2:	f7fe fffd 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 80111b6:	2300      	movs	r3, #0
 80111b8:	2205      	movs	r2, #5
 80111ba:	210b      	movs	r1, #11
 80111bc:	4650      	mov	r0, sl
 80111be:	f001 faf1 	bl	80127a4 <uxr_buffer_submessage_header>
 80111c2:	8968      	ldrh	r0, [r5, #10]
 80111c4:	2101      	movs	r1, #1
 80111c6:	f007 fbfd 	bl	80189c4 <uxr_seq_num_add>
 80111ca:	892b      	ldrh	r3, [r5, #8]
 80111cc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80111d0:	4602      	mov	r2, r0
 80111d2:	9b04      	ldr	r3, [sp, #16]
 80111d4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80111d8:	a90a      	add	r1, sp, #40	@ 0x28
 80111da:	4650      	mov	r0, sl
 80111dc:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80111e0:	f002 fbda 	bl	8013998 <uxr_serialize_HEARTBEAT_Payload>
 80111e4:	2200      	movs	r2, #0
 80111e6:	4611      	mov	r1, r2
 80111e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80111ea:	4640      	mov	r0, r8
 80111ec:	f000 fc82 	bl	8011af4 <uxr_stamp_session_header>
 80111f0:	4650      	mov	r0, sl
 80111f2:	f7ff f81b 	bl	801022c <ucdr_buffer_length>
 80111f6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80111fa:	4602      	mov	r2, r0
 80111fc:	a90c      	add	r1, sp, #48	@ 0x30
 80111fe:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011202:	4444      	add	r4, r8
 8011204:	47a8      	blx	r5
 8011206:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801120a:	9903      	ldr	r1, [sp, #12]
 801120c:	455a      	cmp	r2, fp
 801120e:	f106 0601 	add.w	r6, r6, #1
 8011212:	eb73 0101 	sbcs.w	r1, r3, r1
 8011216:	b2f0      	uxtb	r0, r6
 8011218:	db9c      	blt.n	8011154 <listen_message_reliably+0x48>
 801121a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801121e:	4283      	cmp	r3, r0
 8011220:	d89e      	bhi.n	8011160 <listen_message_reliably+0x54>
 8011222:	9a03      	ldr	r2, [sp, #12]
 8011224:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011228:	429a      	cmp	r2, r3
 801122a:	bf08      	it	eq
 801122c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011230:	d01e      	beq.n	8011270 <listen_message_reliably+0x164>
 8011232:	ebab 0309 	sub.w	r3, fp, r9
 8011236:	9905      	ldr	r1, [sp, #20]
 8011238:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 801123c:	2b00      	cmp	r3, #0
 801123e:	bf08      	it	eq
 8011240:	2301      	moveq	r3, #1
 8011242:	4299      	cmp	r1, r3
 8011244:	bfa8      	it	ge
 8011246:	4619      	movge	r1, r3
 8011248:	6894      	ldr	r4, [r2, #8]
 801124a:	6810      	ldr	r0, [r2, #0]
 801124c:	4689      	mov	r9, r1
 801124e:	460b      	mov	r3, r1
 8011250:	aa08      	add	r2, sp, #32
 8011252:	a907      	add	r1, sp, #28
 8011254:	47a0      	blx	r4
 8011256:	b968      	cbnz	r0, 8011274 <listen_message_reliably+0x168>
 8011258:	9b05      	ldr	r3, [sp, #20]
 801125a:	eba3 0309 	sub.w	r3, r3, r9
 801125e:	2b00      	cmp	r3, #0
 8011260:	9305      	str	r3, [sp, #20]
 8011262:	f73f af5c 	bgt.w	801111e <listen_message_reliably+0x12>
 8011266:	4604      	mov	r4, r0
 8011268:	4620      	mov	r0, r4
 801126a:	b01d      	add	sp, #116	@ 0x74
 801126c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011270:	9b05      	ldr	r3, [sp, #20]
 8011272:	e7e0      	b.n	8011236 <listen_message_reliably+0x12a>
 8011274:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011278:	4604      	mov	r4, r0
 801127a:	a80c      	add	r0, sp, #48	@ 0x30
 801127c:	f7fe ffaa 	bl	80101d4 <ucdr_init_buffer>
 8011280:	2500      	movs	r5, #0
 8011282:	f10d 031a 	add.w	r3, sp, #26
 8011286:	aa06      	add	r2, sp, #24
 8011288:	a90c      	add	r1, sp, #48	@ 0x30
 801128a:	4640      	mov	r0, r8
 801128c:	f88d 5018 	strb.w	r5, [sp, #24]
 8011290:	f000 fc44 	bl	8011b1c <uxr_read_session_header>
 8011294:	b918      	cbnz	r0, 801129e <listen_message_reliably+0x192>
 8011296:	4620      	mov	r0, r4
 8011298:	b01d      	add	sp, #116	@ 0x74
 801129a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801129e:	4629      	mov	r1, r5
 80112a0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80112a4:	f001 f970 	bl	8012588 <uxr_stream_id_from_raw>
 80112a8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80112ac:	2d01      	cmp	r5, #1
 80112ae:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80112b2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80112b6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80112ba:	d04b      	beq.n	8011354 <listen_message_reliably+0x248>
 80112bc:	2d02      	cmp	r5, #2
 80112be:	d00f      	beq.n	80112e0 <listen_message_reliably+0x1d4>
 80112c0:	2d00      	cmp	r5, #0
 80112c2:	d1e8      	bne.n	8011296 <listen_message_reliably+0x18a>
 80112c4:	4629      	mov	r1, r5
 80112c6:	4628      	mov	r0, r5
 80112c8:	f001 f95e 	bl	8012588 <uxr_stream_id_from_raw>
 80112cc:	a90c      	add	r1, sp, #48	@ 0x30
 80112ce:	4602      	mov	r2, r0
 80112d0:	4640      	mov	r0, r8
 80112d2:	920a      	str	r2, [sp, #40]	@ 0x28
 80112d4:	f7ff fd92 	bl	8010dfc <read_submessage_list>
 80112d8:	4620      	mov	r0, r4
 80112da:	b01d      	add	sp, #116	@ 0x74
 80112dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112e0:	4631      	mov	r1, r6
 80112e2:	f108 0008 	add.w	r0, r8, #8
 80112e6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80112ea:	f001 fa3b 	bl	8012764 <uxr_get_input_reliable_stream>
 80112ee:	4607      	mov	r7, r0
 80112f0:	b338      	cbz	r0, 8011342 <listen_message_reliably+0x236>
 80112f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80112f4:	9203      	str	r2, [sp, #12]
 80112f6:	a80c      	add	r0, sp, #48	@ 0x30
 80112f8:	f7fe ff9c 	bl	8010234 <ucdr_buffer_remaining>
 80112fc:	4603      	mov	r3, r0
 80112fe:	f10d 0019 	add.w	r0, sp, #25
 8011302:	9000      	str	r0, [sp, #0]
 8011304:	9a03      	ldr	r2, [sp, #12]
 8011306:	4651      	mov	r1, sl
 8011308:	4638      	mov	r0, r7
 801130a:	f006 feaf 	bl	801806c <uxr_receive_reliable_message>
 801130e:	b1c0      	cbz	r0, 8011342 <listen_message_reliably+0x236>
 8011310:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011314:	b393      	cbz	r3, 801137c <listen_message_reliably+0x270>
 8011316:	ad14      	add	r5, sp, #80	@ 0x50
 8011318:	f04f 0a02 	mov.w	sl, #2
 801131c:	e00a      	b.n	8011334 <listen_message_reliably+0x228>
 801131e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011322:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8011326:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801132a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801132c:	4629      	mov	r1, r5
 801132e:	4640      	mov	r0, r8
 8011330:	f7ff fd64 	bl	8010dfc <read_submessage_list>
 8011334:	2204      	movs	r2, #4
 8011336:	4629      	mov	r1, r5
 8011338:	4638      	mov	r0, r7
 801133a:	f006 ff17 	bl	801816c <uxr_next_input_reliable_buffer_available>
 801133e:	2800      	cmp	r0, #0
 8011340:	d1ed      	bne.n	801131e <listen_message_reliably+0x212>
 8011342:	4640      	mov	r0, r8
 8011344:	4632      	mov	r2, r6
 8011346:	4649      	mov	r1, r9
 8011348:	f7ff fbd2 	bl	8010af0 <write_submessage_acknack.isra.0>
 801134c:	4620      	mov	r0, r4
 801134e:	b01d      	add	sp, #116	@ 0x74
 8011350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011354:	4631      	mov	r1, r6
 8011356:	f108 0008 	add.w	r0, r8, #8
 801135a:	f001 f9f9 	bl	8012750 <uxr_get_input_best_effort_stream>
 801135e:	2800      	cmp	r0, #0
 8011360:	d099      	beq.n	8011296 <listen_message_reliably+0x18a>
 8011362:	4651      	mov	r1, sl
 8011364:	f006 fdee 	bl	8017f44 <uxr_receive_best_effort_message>
 8011368:	2800      	cmp	r0, #0
 801136a:	d094      	beq.n	8011296 <listen_message_reliably+0x18a>
 801136c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011370:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011372:	a90c      	add	r1, sp, #48	@ 0x30
 8011374:	4640      	mov	r0, r8
 8011376:	f7ff fd41 	bl	8010dfc <read_submessage_list>
 801137a:	e78c      	b.n	8011296 <listen_message_reliably+0x18a>
 801137c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011380:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011382:	a90c      	add	r1, sp, #48	@ 0x30
 8011384:	4640      	mov	r0, r8
 8011386:	f7ff fd39 	bl	8010dfc <read_submessage_list>
 801138a:	e7c4      	b.n	8011316 <listen_message_reliably+0x20a>

0801138c <uxr_run_session_timeout>:
 801138c:	b570      	push	{r4, r5, r6, lr}
 801138e:	4604      	mov	r4, r0
 8011390:	460d      	mov	r5, r1
 8011392:	f001 fa4d 	bl	8012830 <uxr_millis>
 8011396:	4606      	mov	r6, r0
 8011398:	4620      	mov	r0, r4
 801139a:	f7ff fc71 	bl	8010c80 <uxr_flash_output_streams>
 801139e:	4629      	mov	r1, r5
 80113a0:	4620      	mov	r0, r4
 80113a2:	f7ff feb3 	bl	801110c <listen_message_reliably>
 80113a6:	f001 fa43 	bl	8012830 <uxr_millis>
 80113aa:	1b83      	subs	r3, r0, r6
 80113ac:	1ae9      	subs	r1, r5, r3
 80113ae:	2900      	cmp	r1, #0
 80113b0:	dcf6      	bgt.n	80113a0 <uxr_run_session_timeout+0x14>
 80113b2:	f104 0008 	add.w	r0, r4, #8
 80113b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113ba:	f001 b9dd 	b.w	8012778 <uxr_output_streams_confirmed>
 80113be:	bf00      	nop

080113c0 <uxr_run_session_until_data>:
 80113c0:	b570      	push	{r4, r5, r6, lr}
 80113c2:	4604      	mov	r4, r0
 80113c4:	460d      	mov	r5, r1
 80113c6:	f001 fa33 	bl	8012830 <uxr_millis>
 80113ca:	4606      	mov	r6, r0
 80113cc:	4620      	mov	r0, r4
 80113ce:	f7ff fc57 	bl	8010c80 <uxr_flash_output_streams>
 80113d2:	2300      	movs	r3, #0
 80113d4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80113d8:	4629      	mov	r1, r5
 80113da:	e005      	b.n	80113e8 <uxr_run_session_until_data+0x28>
 80113dc:	f001 fa28 	bl	8012830 <uxr_millis>
 80113e0:	1b83      	subs	r3, r0, r6
 80113e2:	1ae9      	subs	r1, r5, r3
 80113e4:	2900      	cmp	r1, #0
 80113e6:	dd07      	ble.n	80113f8 <uxr_run_session_until_data+0x38>
 80113e8:	4620      	mov	r0, r4
 80113ea:	f7ff fe8f 	bl	801110c <listen_message_reliably>
 80113ee:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80113f2:	2800      	cmp	r0, #0
 80113f4:	d0f2      	beq.n	80113dc <uxr_run_session_until_data+0x1c>
 80113f6:	bd70      	pop	{r4, r5, r6, pc}
 80113f8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80113fc:	bd70      	pop	{r4, r5, r6, pc}
 80113fe:	bf00      	nop

08011400 <uxr_run_session_until_confirm_delivery>:
 8011400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011404:	4606      	mov	r6, r0
 8011406:	460d      	mov	r5, r1
 8011408:	f001 fa12 	bl	8012830 <uxr_millis>
 801140c:	4607      	mov	r7, r0
 801140e:	4630      	mov	r0, r6
 8011410:	f7ff fc36 	bl	8010c80 <uxr_flash_output_streams>
 8011414:	2d00      	cmp	r5, #0
 8011416:	f106 0808 	add.w	r8, r6, #8
 801141a:	bfa8      	it	ge
 801141c:	462c      	movge	r4, r5
 801141e:	da07      	bge.n	8011430 <uxr_run_session_until_confirm_delivery+0x30>
 8011420:	e00e      	b.n	8011440 <uxr_run_session_until_confirm_delivery+0x40>
 8011422:	f7ff fe73 	bl	801110c <listen_message_reliably>
 8011426:	f001 fa03 	bl	8012830 <uxr_millis>
 801142a:	1bc3      	subs	r3, r0, r7
 801142c:	1aec      	subs	r4, r5, r3
 801142e:	d407      	bmi.n	8011440 <uxr_run_session_until_confirm_delivery+0x40>
 8011430:	4640      	mov	r0, r8
 8011432:	f001 f9a1 	bl	8012778 <uxr_output_streams_confirmed>
 8011436:	4603      	mov	r3, r0
 8011438:	4621      	mov	r1, r4
 801143a:	4630      	mov	r0, r6
 801143c:	2b00      	cmp	r3, #0
 801143e:	d0f0      	beq.n	8011422 <uxr_run_session_until_confirm_delivery+0x22>
 8011440:	4640      	mov	r0, r8
 8011442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011446:	f001 b997 	b.w	8012778 <uxr_output_streams_confirmed>
 801144a:	bf00      	nop

0801144c <uxr_run_session_until_all_status>:
 801144c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011450:	9c08      	ldr	r4, [sp, #32]
 8011452:	4606      	mov	r6, r0
 8011454:	460f      	mov	r7, r1
 8011456:	4691      	mov	r9, r2
 8011458:	461d      	mov	r5, r3
 801145a:	f7ff fc11 	bl	8010c80 <uxr_flash_output_streams>
 801145e:	b124      	cbz	r4, 801146a <uxr_run_session_until_all_status+0x1e>
 8011460:	4622      	mov	r2, r4
 8011462:	21ff      	movs	r1, #255	@ 0xff
 8011464:	4628      	mov	r0, r5
 8011466:	f008 fbcb 	bl	8019c00 <memset>
 801146a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 801146e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011470:	f001 f9de 	bl	8012830 <uxr_millis>
 8011474:	3d01      	subs	r5, #1
 8011476:	f1a9 0902 	sub.w	r9, r9, #2
 801147a:	4680      	mov	r8, r0
 801147c:	4639      	mov	r1, r7
 801147e:	4630      	mov	r0, r6
 8011480:	f7ff fe44 	bl	801110c <listen_message_reliably>
 8011484:	f001 f9d4 	bl	8012830 <uxr_millis>
 8011488:	eba0 0008 	sub.w	r0, r0, r8
 801148c:	1a39      	subs	r1, r7, r0
 801148e:	b344      	cbz	r4, 80114e2 <uxr_run_session_until_all_status+0x96>
 8011490:	4628      	mov	r0, r5
 8011492:	46ac      	mov	ip, r5
 8011494:	2301      	movs	r3, #1
 8011496:	e002      	b.n	801149e <uxr_run_session_until_all_status+0x52>
 8011498:	42a3      	cmp	r3, r4
 801149a:	d20d      	bcs.n	80114b8 <uxr_run_session_until_all_status+0x6c>
 801149c:	3301      	adds	r3, #1
 801149e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80114a2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80114a6:	d1f7      	bne.n	8011498 <uxr_run_session_until_all_status+0x4c>
 80114a8:	42a3      	cmp	r3, r4
 80114aa:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80114ae:	d213      	bcs.n	80114d8 <uxr_run_session_until_all_status+0x8c>
 80114b0:	2a00      	cmp	r2, #0
 80114b2:	d0f3      	beq.n	801149c <uxr_run_session_until_all_status+0x50>
 80114b4:	2900      	cmp	r1, #0
 80114b6:	dce2      	bgt.n	801147e <uxr_run_session_until_all_status+0x32>
 80114b8:	2300      	movs	r3, #0
 80114ba:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80114bc:	442c      	add	r4, r5
 80114be:	e001      	b.n	80114c4 <uxr_run_session_until_all_status+0x78>
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d812      	bhi.n	80114ea <uxr_run_session_until_all_status+0x9e>
 80114c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80114c8:	4284      	cmp	r4, r0
 80114ca:	d1f9      	bne.n	80114c0 <uxr_run_session_until_all_status+0x74>
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	bf8c      	ite	hi
 80114d0:	2000      	movhi	r0, #0
 80114d2:	2001      	movls	r0, #1
 80114d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114d8:	2900      	cmp	r1, #0
 80114da:	dded      	ble.n	80114b8 <uxr_run_session_until_all_status+0x6c>
 80114dc:	2a00      	cmp	r2, #0
 80114de:	d1ce      	bne.n	801147e <uxr_run_session_until_all_status+0x32>
 80114e0:	e7ea      	b.n	80114b8 <uxr_run_session_until_all_status+0x6c>
 80114e2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80114e4:	2001      	movs	r0, #1
 80114e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114ea:	2000      	movs	r0, #0
 80114ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080114f0 <uxr_sync_session>:
 80114f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114f2:	b093      	sub	sp, #76	@ 0x4c
 80114f4:	4604      	mov	r4, r0
 80114f6:	460d      	mov	r5, r1
 80114f8:	f000 fb52 	bl	8011ba0 <uxr_session_header_offset>
 80114fc:	2214      	movs	r2, #20
 80114fe:	eb0d 0102 	add.w	r1, sp, r2
 8011502:	9000      	str	r0, [sp, #0]
 8011504:	2300      	movs	r3, #0
 8011506:	a80a      	add	r0, sp, #40	@ 0x28
 8011508:	f7fe fe52 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 801150c:	2300      	movs	r3, #0
 801150e:	2208      	movs	r2, #8
 8011510:	210e      	movs	r1, #14
 8011512:	a80a      	add	r0, sp, #40	@ 0x28
 8011514:	f001 f946 	bl	80127a4 <uxr_buffer_submessage_header>
 8011518:	f001 f9a4 	bl	8012864 <uxr_nanos>
 801151c:	a31c      	add	r3, pc, #112	@ (adr r3, 8011590 <uxr_sync_session+0xa0>)
 801151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011522:	460e      	mov	r6, r1
 8011524:	4607      	mov	r7, r0
 8011526:	f7ef fab1 	bl	8000a8c <__aeabi_ldivmod>
 801152a:	4631      	mov	r1, r6
 801152c:	9003      	str	r0, [sp, #12]
 801152e:	a318      	add	r3, pc, #96	@ (adr r3, 8011590 <uxr_sync_session+0xa0>)
 8011530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011534:	4638      	mov	r0, r7
 8011536:	f7ef faa9 	bl	8000a8c <__aeabi_ldivmod>
 801153a:	a903      	add	r1, sp, #12
 801153c:	a80a      	add	r0, sp, #40	@ 0x28
 801153e:	9204      	str	r2, [sp, #16]
 8011540:	f002 fa50 	bl	80139e4 <uxr_serialize_TIMESTAMP_Payload>
 8011544:	2200      	movs	r2, #0
 8011546:	4611      	mov	r1, r2
 8011548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801154a:	4620      	mov	r0, r4
 801154c:	f000 fad2 	bl	8011af4 <uxr_stamp_session_header>
 8011550:	a80a      	add	r0, sp, #40	@ 0x28
 8011552:	f7fe fe6b 	bl	801022c <ucdr_buffer_length>
 8011556:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011558:	4602      	mov	r2, r0
 801155a:	a905      	add	r1, sp, #20
 801155c:	e9d3 0600 	ldrd	r0, r6, [r3]
 8011560:	47b0      	blx	r6
 8011562:	f001 f965 	bl	8012830 <uxr_millis>
 8011566:	2300      	movs	r3, #0
 8011568:	4606      	mov	r6, r0
 801156a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801156e:	4629      	mov	r1, r5
 8011570:	e000      	b.n	8011574 <uxr_sync_session+0x84>
 8011572:	b950      	cbnz	r0, 801158a <uxr_sync_session+0x9a>
 8011574:	4620      	mov	r0, r4
 8011576:	f7ff fdc9 	bl	801110c <listen_message_reliably>
 801157a:	f001 f959 	bl	8012830 <uxr_millis>
 801157e:	1b83      	subs	r3, r0, r6
 8011580:	1ae9      	subs	r1, r5, r3
 8011582:	2900      	cmp	r1, #0
 8011584:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8011588:	dcf3      	bgt.n	8011572 <uxr_sync_session+0x82>
 801158a:	b013      	add	sp, #76	@ 0x4c
 801158c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801158e:	bf00      	nop
 8011590:	3b9aca00 	.word	0x3b9aca00
 8011594:	00000000 	.word	0x00000000

08011598 <wait_session_status>:
 8011598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801159c:	4604      	mov	r4, r0
 801159e:	b09d      	sub	sp, #116	@ 0x74
 80115a0:	20ff      	movs	r0, #255	@ 0xff
 80115a2:	7160      	strb	r0, [r4, #5]
 80115a4:	9303      	str	r3, [sp, #12]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	f000 80b6 	beq.w	8011718 <wait_session_status+0x180>
 80115ac:	468a      	mov	sl, r1
 80115ae:	4691      	mov	r9, r2
 80115b0:	f04f 0b00 	mov.w	fp, #0
 80115b4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80115b6:	464a      	mov	r2, r9
 80115b8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80115bc:	4651      	mov	r1, sl
 80115be:	47a8      	blx	r5
 80115c0:	f001 f936 	bl	8012830 <uxr_millis>
 80115c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80115c8:	4605      	mov	r5, r0
 80115ca:	e009      	b.n	80115e0 <wait_session_status+0x48>
 80115cc:	f001 f930 	bl	8012830 <uxr_millis>
 80115d0:	1b40      	subs	r0, r0, r5
 80115d2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	dd40      	ble.n	801165c <wait_session_status+0xc4>
 80115da:	7960      	ldrb	r0, [r4, #5]
 80115dc:	28ff      	cmp	r0, #255	@ 0xff
 80115de:	d145      	bne.n	801166c <wait_session_status+0xd4>
 80115e0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80115e2:	a908      	add	r1, sp, #32
 80115e4:	6896      	ldr	r6, [r2, #8]
 80115e6:	6810      	ldr	r0, [r2, #0]
 80115e8:	aa09      	add	r2, sp, #36	@ 0x24
 80115ea:	47b0      	blx	r6
 80115ec:	2800      	cmp	r0, #0
 80115ee:	d0ed      	beq.n	80115cc <wait_session_status+0x34>
 80115f0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80115f4:	a80c      	add	r0, sp, #48	@ 0x30
 80115f6:	f7fe fded 	bl	80101d4 <ucdr_init_buffer>
 80115fa:	2600      	movs	r6, #0
 80115fc:	f10d 031e 	add.w	r3, sp, #30
 8011600:	aa07      	add	r2, sp, #28
 8011602:	a90c      	add	r1, sp, #48	@ 0x30
 8011604:	4620      	mov	r0, r4
 8011606:	f88d 601c 	strb.w	r6, [sp, #28]
 801160a:	f000 fa87 	bl	8011b1c <uxr_read_session_header>
 801160e:	2800      	cmp	r0, #0
 8011610:	d0dc      	beq.n	80115cc <wait_session_status+0x34>
 8011612:	4631      	mov	r1, r6
 8011614:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011618:	f000 ffb6 	bl	8012588 <uxr_stream_id_from_raw>
 801161c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011620:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011624:	9302      	str	r3, [sp, #8]
 8011626:	2f01      	cmp	r7, #1
 8011628:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801162c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011630:	d05c      	beq.n	80116ec <wait_session_status+0x154>
 8011632:	2f02      	cmp	r7, #2
 8011634:	d020      	beq.n	8011678 <wait_session_status+0xe0>
 8011636:	2f00      	cmp	r7, #0
 8011638:	d1c8      	bne.n	80115cc <wait_session_status+0x34>
 801163a:	4639      	mov	r1, r7
 801163c:	4638      	mov	r0, r7
 801163e:	f000 ffa3 	bl	8012588 <uxr_stream_id_from_raw>
 8011642:	a90c      	add	r1, sp, #48	@ 0x30
 8011644:	4602      	mov	r2, r0
 8011646:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011648:	4620      	mov	r0, r4
 801164a:	f7ff fbd7 	bl	8010dfc <read_submessage_list>
 801164e:	f001 f8ef 	bl	8012830 <uxr_millis>
 8011652:	1b40      	subs	r0, r0, r5
 8011654:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011658:	2b00      	cmp	r3, #0
 801165a:	dcbe      	bgt.n	80115da <wait_session_status+0x42>
 801165c:	9b03      	ldr	r3, [sp, #12]
 801165e:	7960      	ldrb	r0, [r4, #5]
 8011660:	f10b 0b01 	add.w	fp, fp, #1
 8011664:	455b      	cmp	r3, fp
 8011666:	d001      	beq.n	801166c <wait_session_status+0xd4>
 8011668:	28ff      	cmp	r0, #255	@ 0xff
 801166a:	d0a3      	beq.n	80115b4 <wait_session_status+0x1c>
 801166c:	38ff      	subs	r0, #255	@ 0xff
 801166e:	bf18      	it	ne
 8011670:	2001      	movne	r0, #1
 8011672:	b01d      	add	sp, #116	@ 0x74
 8011674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011678:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801167c:	9304      	str	r3, [sp, #16]
 801167e:	4631      	mov	r1, r6
 8011680:	f104 0008 	add.w	r0, r4, #8
 8011684:	f001 f86e 	bl	8012764 <uxr_get_input_reliable_stream>
 8011688:	4680      	mov	r8, r0
 801168a:	b348      	cbz	r0, 80116e0 <wait_session_status+0x148>
 801168c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801168e:	9205      	str	r2, [sp, #20]
 8011690:	a80c      	add	r0, sp, #48	@ 0x30
 8011692:	f7fe fdcf 	bl	8010234 <ucdr_buffer_remaining>
 8011696:	4603      	mov	r3, r0
 8011698:	f10d 001d 	add.w	r0, sp, #29
 801169c:	9000      	str	r0, [sp, #0]
 801169e:	9a05      	ldr	r2, [sp, #20]
 80116a0:	9902      	ldr	r1, [sp, #8]
 80116a2:	4640      	mov	r0, r8
 80116a4:	f006 fce2 	bl	801806c <uxr_receive_reliable_message>
 80116a8:	b1d0      	cbz	r0, 80116e0 <wait_session_status+0x148>
 80116aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d03a      	beq.n	8011728 <wait_session_status+0x190>
 80116b2:	9f04      	ldr	r7, [sp, #16]
 80116b4:	e00a      	b.n	80116cc <wait_session_status+0x134>
 80116b6:	f04f 0302 	mov.w	r3, #2
 80116ba:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80116be:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80116c2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80116c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80116c8:	f7ff fb98 	bl	8010dfc <read_submessage_list>
 80116cc:	a914      	add	r1, sp, #80	@ 0x50
 80116ce:	2204      	movs	r2, #4
 80116d0:	4640      	mov	r0, r8
 80116d2:	f006 fd4b 	bl	801816c <uxr_next_input_reliable_buffer_available>
 80116d6:	4603      	mov	r3, r0
 80116d8:	a914      	add	r1, sp, #80	@ 0x50
 80116da:	4620      	mov	r0, r4
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d1ea      	bne.n	80116b6 <wait_session_status+0x11e>
 80116e0:	9904      	ldr	r1, [sp, #16]
 80116e2:	4632      	mov	r2, r6
 80116e4:	4620      	mov	r0, r4
 80116e6:	f7ff fa03 	bl	8010af0 <write_submessage_acknack.isra.0>
 80116ea:	e76f      	b.n	80115cc <wait_session_status+0x34>
 80116ec:	4631      	mov	r1, r6
 80116ee:	f104 0008 	add.w	r0, r4, #8
 80116f2:	f001 f82d 	bl	8012750 <uxr_get_input_best_effort_stream>
 80116f6:	2800      	cmp	r0, #0
 80116f8:	f43f af68 	beq.w	80115cc <wait_session_status+0x34>
 80116fc:	9902      	ldr	r1, [sp, #8]
 80116fe:	f006 fc21 	bl	8017f44 <uxr_receive_best_effort_message>
 8011702:	2800      	cmp	r0, #0
 8011704:	f43f af62 	beq.w	80115cc <wait_session_status+0x34>
 8011708:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801170c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801170e:	a90c      	add	r1, sp, #48	@ 0x30
 8011710:	4620      	mov	r0, r4
 8011712:	f7ff fb73 	bl	8010dfc <read_submessage_list>
 8011716:	e759      	b.n	80115cc <wait_session_status+0x34>
 8011718:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801171a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801171e:	47a0      	blx	r4
 8011720:	2001      	movs	r0, #1
 8011722:	b01d      	add	sp, #116	@ 0x74
 8011724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011728:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801172c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801172e:	a90c      	add	r1, sp, #48	@ 0x30
 8011730:	4620      	mov	r0, r4
 8011732:	f7ff fb63 	bl	8010dfc <read_submessage_list>
 8011736:	e7bc      	b.n	80116b2 <wait_session_status+0x11a>

08011738 <uxr_delete_session_retries>:
 8011738:	b530      	push	{r4, r5, lr}
 801173a:	b08f      	sub	sp, #60	@ 0x3c
 801173c:	4604      	mov	r4, r0
 801173e:	460d      	mov	r5, r1
 8011740:	f000 fa2e 	bl	8011ba0 <uxr_session_header_offset>
 8011744:	2300      	movs	r3, #0
 8011746:	2210      	movs	r2, #16
 8011748:	9000      	str	r0, [sp, #0]
 801174a:	a902      	add	r1, sp, #8
 801174c:	a806      	add	r0, sp, #24
 801174e:	f7fe fd2f 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 8011752:	a906      	add	r1, sp, #24
 8011754:	4620      	mov	r0, r4
 8011756:	f000 f973 	bl	8011a40 <uxr_buffer_delete_session>
 801175a:	2200      	movs	r2, #0
 801175c:	4611      	mov	r1, r2
 801175e:	9b06      	ldr	r3, [sp, #24]
 8011760:	4620      	mov	r0, r4
 8011762:	f000 f9c7 	bl	8011af4 <uxr_stamp_session_header>
 8011766:	a806      	add	r0, sp, #24
 8011768:	f7fe fd60 	bl	801022c <ucdr_buffer_length>
 801176c:	462b      	mov	r3, r5
 801176e:	4602      	mov	r2, r0
 8011770:	a902      	add	r1, sp, #8
 8011772:	4620      	mov	r0, r4
 8011774:	f7ff ff10 	bl	8011598 <wait_session_status>
 8011778:	b118      	cbz	r0, 8011782 <uxr_delete_session_retries+0x4a>
 801177a:	7960      	ldrb	r0, [r4, #5]
 801177c:	fab0 f080 	clz	r0, r0
 8011780:	0940      	lsrs	r0, r0, #5
 8011782:	b00f      	add	sp, #60	@ 0x3c
 8011784:	bd30      	pop	{r4, r5, pc}
 8011786:	bf00      	nop

08011788 <uxr_create_session>:
 8011788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801178c:	f100 0b08 	add.w	fp, r0, #8
 8011790:	b0ab      	sub	sp, #172	@ 0xac
 8011792:	4604      	mov	r4, r0
 8011794:	4658      	mov	r0, fp
 8011796:	f000 ff2b 	bl	80125f0 <uxr_reset_stream_storage>
 801179a:	4620      	mov	r0, r4
 801179c:	f000 fa00 	bl	8011ba0 <uxr_session_header_offset>
 80117a0:	2300      	movs	r3, #0
 80117a2:	9000      	str	r0, [sp, #0]
 80117a4:	221c      	movs	r2, #28
 80117a6:	a90b      	add	r1, sp, #44	@ 0x2c
 80117a8:	a812      	add	r0, sp, #72	@ 0x48
 80117aa:	f7fe fd01 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 80117ae:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80117b0:	8a1a      	ldrh	r2, [r3, #16]
 80117b2:	3a04      	subs	r2, #4
 80117b4:	b292      	uxth	r2, r2
 80117b6:	a912      	add	r1, sp, #72	@ 0x48
 80117b8:	4620      	mov	r0, r4
 80117ba:	f000 f917 	bl	80119ec <uxr_buffer_create_session>
 80117be:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80117c0:	4620      	mov	r0, r4
 80117c2:	f000 f983 	bl	8011acc <uxr_stamp_create_session_header>
 80117c6:	a812      	add	r0, sp, #72	@ 0x48
 80117c8:	f7fe fd30 	bl	801022c <ucdr_buffer_length>
 80117cc:	23ff      	movs	r3, #255	@ 0xff
 80117ce:	7163      	strb	r3, [r4, #5]
 80117d0:	230a      	movs	r3, #10
 80117d2:	46da      	mov	sl, fp
 80117d4:	9303      	str	r3, [sp, #12]
 80117d6:	4683      	mov	fp, r0
 80117d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80117da:	465a      	mov	r2, fp
 80117dc:	e9d3 0500 	ldrd	r0, r5, [r3]
 80117e0:	a90b      	add	r1, sp, #44	@ 0x2c
 80117e2:	47a8      	blx	r5
 80117e4:	f001 f824 	bl	8012830 <uxr_millis>
 80117e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80117ec:	4605      	mov	r5, r0
 80117ee:	e009      	b.n	8011804 <uxr_create_session+0x7c>
 80117f0:	f001 f81e 	bl	8012830 <uxr_millis>
 80117f4:	1b40      	subs	r0, r0, r5
 80117f6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	7962      	ldrb	r2, [r4, #5]
 80117fe:	dd38      	ble.n	8011872 <uxr_create_session+0xea>
 8011800:	2aff      	cmp	r2, #255	@ 0xff
 8011802:	d13c      	bne.n	801187e <uxr_create_session+0xf6>
 8011804:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011806:	a907      	add	r1, sp, #28
 8011808:	6896      	ldr	r6, [r2, #8]
 801180a:	6810      	ldr	r0, [r2, #0]
 801180c:	aa08      	add	r2, sp, #32
 801180e:	47b0      	blx	r6
 8011810:	2800      	cmp	r0, #0
 8011812:	d0ed      	beq.n	80117f0 <uxr_create_session+0x68>
 8011814:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011818:	a81a      	add	r0, sp, #104	@ 0x68
 801181a:	f7fe fcdb 	bl	80101d4 <ucdr_init_buffer>
 801181e:	2600      	movs	r6, #0
 8011820:	f10d 031a 	add.w	r3, sp, #26
 8011824:	aa06      	add	r2, sp, #24
 8011826:	a91a      	add	r1, sp, #104	@ 0x68
 8011828:	4620      	mov	r0, r4
 801182a:	f88d 6018 	strb.w	r6, [sp, #24]
 801182e:	f000 f975 	bl	8011b1c <uxr_read_session_header>
 8011832:	2800      	cmp	r0, #0
 8011834:	d0dc      	beq.n	80117f0 <uxr_create_session+0x68>
 8011836:	4631      	mov	r1, r6
 8011838:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801183c:	f000 fea4 	bl	8012588 <uxr_stream_id_from_raw>
 8011840:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011844:	2e01      	cmp	r6, #1
 8011846:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801184a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801184e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011852:	d053      	beq.n	80118fc <uxr_create_session+0x174>
 8011854:	2e02      	cmp	r6, #2
 8011856:	d018      	beq.n	801188a <uxr_create_session+0x102>
 8011858:	2e00      	cmp	r6, #0
 801185a:	d1c9      	bne.n	80117f0 <uxr_create_session+0x68>
 801185c:	4631      	mov	r1, r6
 801185e:	4630      	mov	r0, r6
 8011860:	f000 fe92 	bl	8012588 <uxr_stream_id_from_raw>
 8011864:	a91a      	add	r1, sp, #104	@ 0x68
 8011866:	4602      	mov	r2, r0
 8011868:	900a      	str	r0, [sp, #40]	@ 0x28
 801186a:	4620      	mov	r0, r4
 801186c:	f7ff fac6 	bl	8010dfc <read_submessage_list>
 8011870:	e7be      	b.n	80117f0 <uxr_create_session+0x68>
 8011872:	9b03      	ldr	r3, [sp, #12]
 8011874:	3b01      	subs	r3, #1
 8011876:	9303      	str	r3, [sp, #12]
 8011878:	d001      	beq.n	801187e <uxr_create_session+0xf6>
 801187a:	2aff      	cmp	r2, #255	@ 0xff
 801187c:	d0ac      	beq.n	80117d8 <uxr_create_session+0x50>
 801187e:	2a00      	cmp	r2, #0
 8011880:	d051      	beq.n	8011926 <uxr_create_session+0x19e>
 8011882:	2000      	movs	r0, #0
 8011884:	b02b      	add	sp, #172	@ 0xac
 8011886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801188a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801188e:	9304      	str	r3, [sp, #16]
 8011890:	4639      	mov	r1, r7
 8011892:	4650      	mov	r0, sl
 8011894:	f000 ff66 	bl	8012764 <uxr_get_input_reliable_stream>
 8011898:	4680      	mov	r8, r0
 801189a:	b348      	cbz	r0, 80118f0 <uxr_create_session+0x168>
 801189c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801189e:	9205      	str	r2, [sp, #20]
 80118a0:	a81a      	add	r0, sp, #104	@ 0x68
 80118a2:	f7fe fcc7 	bl	8010234 <ucdr_buffer_remaining>
 80118a6:	4603      	mov	r3, r0
 80118a8:	f10d 0019 	add.w	r0, sp, #25
 80118ac:	9000      	str	r0, [sp, #0]
 80118ae:	9a05      	ldr	r2, [sp, #20]
 80118b0:	4649      	mov	r1, r9
 80118b2:	4640      	mov	r0, r8
 80118b4:	f006 fbda 	bl	801806c <uxr_receive_reliable_message>
 80118b8:	b1d0      	cbz	r0, 80118f0 <uxr_create_session+0x168>
 80118ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d038      	beq.n	8011934 <uxr_create_session+0x1ac>
 80118c2:	9e04      	ldr	r6, [sp, #16]
 80118c4:	e00a      	b.n	80118dc <uxr_create_session+0x154>
 80118c6:	f04f 0302 	mov.w	r3, #2
 80118ca:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80118ce:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 80118d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80118d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80118d8:	f7ff fa90 	bl	8010dfc <read_submessage_list>
 80118dc:	a922      	add	r1, sp, #136	@ 0x88
 80118de:	2204      	movs	r2, #4
 80118e0:	4640      	mov	r0, r8
 80118e2:	f006 fc43 	bl	801816c <uxr_next_input_reliable_buffer_available>
 80118e6:	4603      	mov	r3, r0
 80118e8:	a922      	add	r1, sp, #136	@ 0x88
 80118ea:	4620      	mov	r0, r4
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d1ea      	bne.n	80118c6 <uxr_create_session+0x13e>
 80118f0:	9904      	ldr	r1, [sp, #16]
 80118f2:	463a      	mov	r2, r7
 80118f4:	4620      	mov	r0, r4
 80118f6:	f7ff f8fb 	bl	8010af0 <write_submessage_acknack.isra.0>
 80118fa:	e779      	b.n	80117f0 <uxr_create_session+0x68>
 80118fc:	4639      	mov	r1, r7
 80118fe:	4650      	mov	r0, sl
 8011900:	f000 ff26 	bl	8012750 <uxr_get_input_best_effort_stream>
 8011904:	2800      	cmp	r0, #0
 8011906:	f43f af73 	beq.w	80117f0 <uxr_create_session+0x68>
 801190a:	4649      	mov	r1, r9
 801190c:	f006 fb1a 	bl	8017f44 <uxr_receive_best_effort_message>
 8011910:	2800      	cmp	r0, #0
 8011912:	f43f af6d 	beq.w	80117f0 <uxr_create_session+0x68>
 8011916:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801191a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801191c:	a91a      	add	r1, sp, #104	@ 0x68
 801191e:	4620      	mov	r0, r4
 8011920:	f7ff fa6c 	bl	8010dfc <read_submessage_list>
 8011924:	e764      	b.n	80117f0 <uxr_create_session+0x68>
 8011926:	4650      	mov	r0, sl
 8011928:	f000 fe62 	bl	80125f0 <uxr_reset_stream_storage>
 801192c:	2001      	movs	r0, #1
 801192e:	b02b      	add	sp, #172	@ 0xac
 8011930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011934:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011938:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801193a:	a91a      	add	r1, sp, #104	@ 0x68
 801193c:	4620      	mov	r0, r4
 801193e:	f7ff fa5d 	bl	8010dfc <read_submessage_list>
 8011942:	e7be      	b.n	80118c2 <uxr_create_session+0x13a>

08011944 <uxr_prepare_stream_to_write_submessage>:
 8011944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011948:	b082      	sub	sp, #8
 801194a:	4682      	mov	sl, r0
 801194c:	4610      	mov	r0, r2
 801194e:	4615      	mov	r5, r2
 8011950:	461e      	mov	r6, r3
 8011952:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8011956:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801195a:	9101      	str	r1, [sp, #4]
 801195c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011960:	f000 ff60 	bl	8012824 <uxr_submessage_padding>
 8011964:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011968:	f105 0904 	add.w	r9, r5, #4
 801196c:	2b01      	cmp	r3, #1
 801196e:	4481      	add	r9, r0
 8011970:	d01d      	beq.n	80119ae <uxr_prepare_stream_to_write_submessage+0x6a>
 8011972:	2b02      	cmp	r3, #2
 8011974:	d116      	bne.n	80119a4 <uxr_prepare_stream_to_write_submessage+0x60>
 8011976:	4621      	mov	r1, r4
 8011978:	f10a 0008 	add.w	r0, sl, #8
 801197c:	f000 fede 	bl	801273c <uxr_get_output_reliable_stream>
 8011980:	4604      	mov	r4, r0
 8011982:	b158      	cbz	r0, 801199c <uxr_prepare_stream_to_write_submessage+0x58>
 8011984:	4649      	mov	r1, r9
 8011986:	4632      	mov	r2, r6
 8011988:	f006 fdac 	bl	80184e4 <uxr_prepare_reliable_buffer_to_write>
 801198c:	4604      	mov	r4, r0
 801198e:	b12c      	cbz	r4, 801199c <uxr_prepare_stream_to_write_submessage+0x58>
 8011990:	4643      	mov	r3, r8
 8011992:	b2aa      	uxth	r2, r5
 8011994:	4639      	mov	r1, r7
 8011996:	4630      	mov	r0, r6
 8011998:	f000 ff04 	bl	80127a4 <uxr_buffer_submessage_header>
 801199c:	4620      	mov	r0, r4
 801199e:	b002      	add	sp, #8
 80119a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119a4:	2400      	movs	r4, #0
 80119a6:	4620      	mov	r0, r4
 80119a8:	b002      	add	sp, #8
 80119aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119ae:	4621      	mov	r1, r4
 80119b0:	f10a 0008 	add.w	r0, sl, #8
 80119b4:	f000 feba 	bl	801272c <uxr_get_output_best_effort_stream>
 80119b8:	4604      	mov	r4, r0
 80119ba:	2800      	cmp	r0, #0
 80119bc:	d0ee      	beq.n	801199c <uxr_prepare_stream_to_write_submessage+0x58>
 80119be:	4649      	mov	r1, r9
 80119c0:	4632      	mov	r2, r6
 80119c2:	f006 fcbf 	bl	8018344 <uxr_prepare_best_effort_buffer_to_write>
 80119c6:	4604      	mov	r4, r0
 80119c8:	e7e1      	b.n	801198e <uxr_prepare_stream_to_write_submessage+0x4a>
 80119ca:	bf00      	nop

080119cc <uxr_init_session_info>:
 80119cc:	0e13      	lsrs	r3, r2, #24
 80119ce:	7043      	strb	r3, [r0, #1]
 80119d0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80119d4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80119d8:	7001      	strb	r1, [r0, #0]
 80119da:	70c3      	strb	r3, [r0, #3]
 80119dc:	2109      	movs	r1, #9
 80119de:	23ff      	movs	r3, #255	@ 0xff
 80119e0:	f880 c002 	strb.w	ip, [r0, #2]
 80119e4:	7102      	strb	r2, [r0, #4]
 80119e6:	80c1      	strh	r1, [r0, #6]
 80119e8:	7143      	strb	r3, [r0, #5]
 80119ea:	4770      	bx	lr

080119ec <uxr_buffer_create_session>:
 80119ec:	b530      	push	{r4, r5, lr}
 80119ee:	b089      	sub	sp, #36	@ 0x24
 80119f0:	2300      	movs	r3, #0
 80119f2:	4d12      	ldr	r5, [pc, #72]	@ (8011a3c <uxr_buffer_create_session+0x50>)
 80119f4:	9307      	str	r3, [sp, #28]
 80119f6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80119fa:	2201      	movs	r2, #1
 80119fc:	9301      	str	r3, [sp, #4]
 80119fe:	80c2      	strh	r2, [r0, #6]
 8011a00:	f88d 2004 	strb.w	r2, [sp, #4]
 8011a04:	682a      	ldr	r2, [r5, #0]
 8011a06:	9200      	str	r2, [sp, #0]
 8011a08:	88aa      	ldrh	r2, [r5, #4]
 8011a0a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011a0e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011a12:	9202      	str	r2, [sp, #8]
 8011a14:	460c      	mov	r4, r1
 8011a16:	7802      	ldrb	r2, [r0, #0]
 8011a18:	9303      	str	r3, [sp, #12]
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	f88d 200c 	strb.w	r2, [sp, #12]
 8011a20:	4620      	mov	r0, r4
 8011a22:	2210      	movs	r2, #16
 8011a24:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011a28:	9306      	str	r3, [sp, #24]
 8011a2a:	f000 febb 	bl	80127a4 <uxr_buffer_submessage_header>
 8011a2e:	4669      	mov	r1, sp
 8011a30:	4620      	mov	r0, r4
 8011a32:	f001 fe13 	bl	801365c <uxr_serialize_CREATE_CLIENT_Payload>
 8011a36:	b009      	add	sp, #36	@ 0x24
 8011a38:	bd30      	pop	{r4, r5, pc}
 8011a3a:	bf00      	nop
 8011a3c:	0801aa98 	.word	0x0801aa98

08011a40 <uxr_buffer_delete_session>:
 8011a40:	b510      	push	{r4, lr}
 8011a42:	4b0c      	ldr	r3, [pc, #48]	@ (8011a74 <uxr_buffer_delete_session+0x34>)
 8011a44:	b082      	sub	sp, #8
 8011a46:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8011a4a:	f8ad c006 	strh.w	ip, [sp, #6]
 8011a4e:	460c      	mov	r4, r1
 8011a50:	2202      	movs	r2, #2
 8011a52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011a56:	80c2      	strh	r2, [r0, #6]
 8011a58:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011a5c:	2204      	movs	r2, #4
 8011a5e:	2300      	movs	r3, #0
 8011a60:	2103      	movs	r1, #3
 8011a62:	4620      	mov	r0, r4
 8011a64:	f000 fe9e 	bl	80127a4 <uxr_buffer_submessage_header>
 8011a68:	a901      	add	r1, sp, #4
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	f001 fe9c 	bl	80137a8 <uxr_serialize_DELETE_Payload>
 8011a70:	b002      	add	sp, #8
 8011a72:	bd10      	pop	{r4, pc}
 8011a74:	0801aa98 	.word	0x0801aa98

08011a78 <uxr_read_create_session_status>:
 8011a78:	b510      	push	{r4, lr}
 8011a7a:	b088      	sub	sp, #32
 8011a7c:	4604      	mov	r4, r0
 8011a7e:	4608      	mov	r0, r1
 8011a80:	a901      	add	r1, sp, #4
 8011a82:	f001 fea1 	bl	80137c8 <uxr_deserialize_STATUS_AGENT_Payload>
 8011a86:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011a8a:	7163      	strb	r3, [r4, #5]
 8011a8c:	b008      	add	sp, #32
 8011a8e:	bd10      	pop	{r4, pc}

08011a90 <uxr_read_delete_session_status>:
 8011a90:	b510      	push	{r4, lr}
 8011a92:	4604      	mov	r4, r0
 8011a94:	b084      	sub	sp, #16
 8011a96:	4608      	mov	r0, r1
 8011a98:	a902      	add	r1, sp, #8
 8011a9a:	f001 fec5 	bl	8013828 <uxr_deserialize_STATUS_Payload>
 8011a9e:	88e3      	ldrh	r3, [r4, #6]
 8011aa0:	2b02      	cmp	r3, #2
 8011aa2:	d001      	beq.n	8011aa8 <uxr_read_delete_session_status+0x18>
 8011aa4:	b004      	add	sp, #16
 8011aa6:	bd10      	pop	{r4, pc}
 8011aa8:	f10d 000a 	add.w	r0, sp, #10
 8011aac:	f7fe feb0 	bl	8010810 <uxr_object_id_from_raw>
 8011ab0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011ab4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011ab8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011abc:	b29b      	uxth	r3, r3
 8011abe:	2b02      	cmp	r3, #2
 8011ac0:	bf04      	itt	eq
 8011ac2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011ac6:	7163      	strbeq	r3, [r4, #5]
 8011ac8:	b004      	add	sp, #16
 8011aca:	bd10      	pop	{r4, pc}

08011acc <uxr_stamp_create_session_header>:
 8011acc:	b510      	push	{r4, lr}
 8011ace:	2208      	movs	r2, #8
 8011ad0:	b08a      	sub	sp, #40	@ 0x28
 8011ad2:	4604      	mov	r4, r0
 8011ad4:	eb0d 0002 	add.w	r0, sp, r2
 8011ad8:	f7fe fb7c 	bl	80101d4 <ucdr_init_buffer>
 8011adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ae0:	9400      	str	r4, [sp, #0]
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	461a      	mov	r2, r3
 8011ae6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011aea:	a802      	add	r0, sp, #8
 8011aec:	f001 f854 	bl	8012b98 <uxr_serialize_message_header>
 8011af0:	b00a      	add	sp, #40	@ 0x28
 8011af2:	bd10      	pop	{r4, pc}

08011af4 <uxr_stamp_session_header>:
 8011af4:	b530      	push	{r4, r5, lr}
 8011af6:	b08d      	sub	sp, #52	@ 0x34
 8011af8:	4604      	mov	r4, r0
 8011afa:	460d      	mov	r5, r1
 8011afc:	9203      	str	r2, [sp, #12]
 8011afe:	4619      	mov	r1, r3
 8011b00:	a804      	add	r0, sp, #16
 8011b02:	2208      	movs	r2, #8
 8011b04:	f7fe fb66 	bl	80101d4 <ucdr_init_buffer>
 8011b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b0c:	9b03      	ldr	r3, [sp, #12]
 8011b0e:	9400      	str	r4, [sp, #0]
 8011b10:	462a      	mov	r2, r5
 8011b12:	a804      	add	r0, sp, #16
 8011b14:	f001 f840 	bl	8012b98 <uxr_serialize_message_header>
 8011b18:	b00d      	add	sp, #52	@ 0x34
 8011b1a:	bd30      	pop	{r4, r5, pc}

08011b1c <uxr_read_session_header>:
 8011b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b20:	4607      	mov	r7, r0
 8011b22:	b084      	sub	sp, #16
 8011b24:	4608      	mov	r0, r1
 8011b26:	460c      	mov	r4, r1
 8011b28:	4615      	mov	r5, r2
 8011b2a:	461e      	mov	r6, r3
 8011b2c:	f7fe fb82 	bl	8010234 <ucdr_buffer_remaining>
 8011b30:	2808      	cmp	r0, #8
 8011b32:	d803      	bhi.n	8011b3c <uxr_read_session_header+0x20>
 8011b34:	2000      	movs	r0, #0
 8011b36:	b004      	add	sp, #16
 8011b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b3c:	f10d 080c 	add.w	r8, sp, #12
 8011b40:	4633      	mov	r3, r6
 8011b42:	462a      	mov	r2, r5
 8011b44:	f8cd 8000 	str.w	r8, [sp]
 8011b48:	4620      	mov	r0, r4
 8011b4a:	f10d 010b 	add.w	r1, sp, #11
 8011b4e:	f001 f841 	bl	8012bd4 <uxr_deserialize_message_header>
 8011b52:	783a      	ldrb	r2, [r7, #0]
 8011b54:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011b58:	4293      	cmp	r3, r2
 8011b5a:	d1eb      	bne.n	8011b34 <uxr_read_session_header+0x18>
 8011b5c:	061b      	lsls	r3, r3, #24
 8011b5e:	d41c      	bmi.n	8011b9a <uxr_read_session_header+0x7e>
 8011b60:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011b64:	787b      	ldrb	r3, [r7, #1]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d003      	beq.n	8011b72 <uxr_read_session_header+0x56>
 8011b6a:	2001      	movs	r0, #1
 8011b6c:	f080 0001 	eor.w	r0, r0, #1
 8011b70:	e7e1      	b.n	8011b36 <uxr_read_session_header+0x1a>
 8011b72:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011b76:	78bb      	ldrb	r3, [r7, #2]
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	f107 0102 	add.w	r1, r7, #2
 8011b7e:	d1f4      	bne.n	8011b6a <uxr_read_session_header+0x4e>
 8011b80:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011b84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	d1ee      	bne.n	8011b6a <uxr_read_session_header+0x4e>
 8011b8c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011b90:	784b      	ldrb	r3, [r1, #1]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d1e9      	bne.n	8011b6a <uxr_read_session_header+0x4e>
 8011b96:	2000      	movs	r0, #0
 8011b98:	e7e8      	b.n	8011b6c <uxr_read_session_header+0x50>
 8011b9a:	2001      	movs	r0, #1
 8011b9c:	e7cb      	b.n	8011b36 <uxr_read_session_header+0x1a>
 8011b9e:	bf00      	nop

08011ba0 <uxr_session_header_offset>:
 8011ba0:	f990 3000 	ldrsb.w	r3, [r0]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	bfac      	ite	ge
 8011ba8:	2008      	movge	r0, #8
 8011baa:	2004      	movlt	r0, #4
 8011bac:	4770      	bx	lr
 8011bae:	bf00      	nop

08011bb0 <uxr_init_base_object_request>:
 8011bb0:	b510      	push	{r4, lr}
 8011bb2:	88c3      	ldrh	r3, [r0, #6]
 8011bb4:	b082      	sub	sp, #8
 8011bb6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011bba:	9101      	str	r1, [sp, #4]
 8011bbc:	f1a3 010a 	sub.w	r1, r3, #10
 8011bc0:	b289      	uxth	r1, r1
 8011bc2:	42a1      	cmp	r1, r4
 8011bc4:	d80e      	bhi.n	8011be4 <uxr_init_base_object_request+0x34>
 8011bc6:	3301      	adds	r3, #1
 8011bc8:	b29c      	uxth	r4, r3
 8011bca:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011bce:	b2db      	uxtb	r3, r3
 8011bd0:	80c4      	strh	r4, [r0, #6]
 8011bd2:	9801      	ldr	r0, [sp, #4]
 8011bd4:	7011      	strb	r1, [r2, #0]
 8011bd6:	7053      	strb	r3, [r2, #1]
 8011bd8:	1c91      	adds	r1, r2, #2
 8011bda:	f7fe fe2d 	bl	8010838 <uxr_object_id_to_raw>
 8011bde:	4620      	mov	r0, r4
 8011be0:	b002      	add	sp, #8
 8011be2:	bd10      	pop	{r4, pc}
 8011be4:	230a      	movs	r3, #10
 8011be6:	2100      	movs	r1, #0
 8011be8:	461c      	mov	r4, r3
 8011bea:	e7f1      	b.n	8011bd0 <uxr_init_base_object_request+0x20>

08011bec <uxr_parse_base_object_request>:
 8011bec:	b570      	push	{r4, r5, r6, lr}
 8011bee:	4604      	mov	r4, r0
 8011bf0:	3002      	adds	r0, #2
 8011bf2:	460d      	mov	r5, r1
 8011bf4:	4616      	mov	r6, r2
 8011bf6:	f7fe fe0b 	bl	8010810 <uxr_object_id_from_raw>
 8011bfa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011bfe:	8028      	strh	r0, [r5, #0]
 8011c00:	806b      	strh	r3, [r5, #2]
 8011c02:	7822      	ldrb	r2, [r4, #0]
 8011c04:	7863      	ldrb	r3, [r4, #1]
 8011c06:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011c0a:	8033      	strh	r3, [r6, #0]
 8011c0c:	bd70      	pop	{r4, r5, r6, pc}
 8011c0e:	bf00      	nop

08011c10 <uxr_init_framing_io>:
 8011c10:	2300      	movs	r3, #0
 8011c12:	7041      	strb	r1, [r0, #1]
 8011c14:	7003      	strb	r3, [r0, #0]
 8011c16:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011c18:	4770      	bx	lr
 8011c1a:	bf00      	nop

08011c1c <uxr_write_framed_msg>:
 8011c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c20:	4617      	mov	r7, r2
 8011c22:	7842      	ldrb	r2, [r0, #1]
 8011c24:	b083      	sub	sp, #12
 8011c26:	460e      	mov	r6, r1
 8011c28:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011c2c:	469a      	mov	sl, r3
 8011c2e:	2901      	cmp	r1, #1
 8011c30:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8011c34:	4604      	mov	r4, r0
 8011c36:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8011c3a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011c3e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8011c42:	f240 8137 	bls.w	8011eb4 <uxr_write_framed_msg+0x298>
 8011c46:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011c4a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8011c4e:	2901      	cmp	r1, #1
 8011c50:	f04f 0202 	mov.w	r2, #2
 8011c54:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011c58:	f240 808f 	bls.w	8011d7a <uxr_write_framed_msg+0x15e>
 8011c5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c5e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8011c62:	b2dd      	uxtb	r5, r3
 8011c64:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011c68:	2203      	movs	r2, #3
 8011c6a:	2901      	cmp	r1, #1
 8011c6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011c70:	f240 809a 	bls.w	8011da8 <uxr_write_framed_msg+0x18c>
 8011c74:	18a1      	adds	r1, r4, r2
 8011c76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c78:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8011c7c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011c80:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011c84:	3201      	adds	r2, #1
 8011c86:	2801      	cmp	r0, #1
 8011c88:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011c8c:	f240 80a0 	bls.w	8011dd0 <uxr_write_framed_msg+0x1b4>
 8011c90:	18a0      	adds	r0, r4, r2
 8011c92:	3201      	adds	r2, #1
 8011c94:	b2d2      	uxtb	r2, r2
 8011c96:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011c9a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	f000 80a9 	beq.w	8011df6 <uxr_write_framed_msg+0x1da>
 8011ca4:	f04f 0900 	mov.w	r9, #0
 8011ca8:	46c8      	mov	r8, r9
 8011caa:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011cae:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011cb2:	2901      	cmp	r1, #1
 8011cb4:	f240 80c3 	bls.w	8011e3e <uxr_write_framed_msg+0x222>
 8011cb8:	2a29      	cmp	r2, #41	@ 0x29
 8011cba:	f200 809f 	bhi.w	8011dfc <uxr_write_framed_msg+0x1e0>
 8011cbe:	18a1      	adds	r1, r4, r2
 8011cc0:	3201      	adds	r2, #1
 8011cc2:	b2d2      	uxtb	r2, r2
 8011cc4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011cc8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011ccc:	ea89 0303 	eor.w	r3, r9, r3
 8011cd0:	498c      	ldr	r1, [pc, #560]	@ (8011f04 <uxr_write_framed_msg+0x2e8>)
 8011cd2:	b2db      	uxtb	r3, r3
 8011cd4:	f108 0801 	add.w	r8, r8, #1
 8011cd8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011cdc:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011ce0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ce2:	4543      	cmp	r3, r8
 8011ce4:	d8e1      	bhi.n	8011caa <uxr_write_framed_msg+0x8e>
 8011ce6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011cea:	fa5f f889 	uxtb.w	r8, r9
 8011cee:	9301      	str	r3, [sp, #4]
 8011cf0:	f04f 0900 	mov.w	r9, #0
 8011cf4:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8011cf8:	fa5f f18a 	uxtb.w	r1, sl
 8011cfc:	2901      	cmp	r1, #1
 8011cfe:	d921      	bls.n	8011d44 <uxr_write_framed_msg+0x128>
 8011d00:	2a29      	cmp	r2, #41	@ 0x29
 8011d02:	f240 80af 	bls.w	8011e64 <uxr_write_framed_msg+0x248>
 8011d06:	2500      	movs	r5, #0
 8011d08:	e000      	b.n	8011d0c <uxr_write_framed_msg+0xf0>
 8011d0a:	b160      	cbz	r0, 8011d26 <uxr_write_framed_msg+0x10a>
 8011d0c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011d10:	1b52      	subs	r2, r2, r5
 8011d12:	465b      	mov	r3, fp
 8011d14:	4421      	add	r1, r4
 8011d16:	4638      	mov	r0, r7
 8011d18:	47b0      	blx	r6
 8011d1a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011d1e:	4405      	add	r5, r0
 8011d20:	4295      	cmp	r5, r2
 8011d22:	d3f2      	bcc.n	8011d0a <uxr_write_framed_msg+0xee>
 8011d24:	d003      	beq.n	8011d2e <uxr_write_framed_msg+0x112>
 8011d26:	2000      	movs	r0, #0
 8011d28:	b003      	add	sp, #12
 8011d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d2e:	fa5f f18a 	uxtb.w	r1, sl
 8011d32:	f04f 0300 	mov.w	r3, #0
 8011d36:	2901      	cmp	r1, #1
 8011d38:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011d3c:	f04f 0200 	mov.w	r2, #0
 8011d40:	f200 8090 	bhi.w	8011e64 <uxr_write_framed_msg+0x248>
 8011d44:	1c51      	adds	r1, r2, #1
 8011d46:	b2c9      	uxtb	r1, r1
 8011d48:	2929      	cmp	r1, #41	@ 0x29
 8011d4a:	d8dc      	bhi.n	8011d06 <uxr_write_framed_msg+0xea>
 8011d4c:	18a5      	adds	r5, r4, r2
 8011d4e:	4421      	add	r1, r4
 8011d50:	3202      	adds	r2, #2
 8011d52:	f088 0820 	eor.w	r8, r8, #32
 8011d56:	4648      	mov	r0, r9
 8011d58:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011d5c:	b2d2      	uxtb	r2, r2
 8011d5e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8011d62:	f04f 0901 	mov.w	r9, #1
 8011d66:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011d6a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011d6e:	2800      	cmp	r0, #0
 8011d70:	f040 8085 	bne.w	8011e7e <uxr_write_framed_msg+0x262>
 8011d74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011d78:	e7bc      	b.n	8011cf4 <uxr_write_framed_msg+0xd8>
 8011d7a:	4611      	mov	r1, r2
 8011d7c:	f04f 0c03 	mov.w	ip, #3
 8011d80:	2204      	movs	r2, #4
 8011d82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d84:	4421      	add	r1, r4
 8011d86:	b2dd      	uxtb	r5, r3
 8011d88:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8011d8c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8011d90:	44a4      	add	ip, r4
 8011d92:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011d96:	f080 0020 	eor.w	r0, r0, #32
 8011d9a:	2901      	cmp	r1, #1
 8011d9c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8011da0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011da4:	f63f af66 	bhi.w	8011c74 <uxr_write_framed_msg+0x58>
 8011da8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011daa:	18a0      	adds	r0, r4, r2
 8011dac:	f085 0520 	eor.w	r5, r5, #32
 8011db0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011db4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011db8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8011dbc:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8011dc0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011dc4:	3202      	adds	r2, #2
 8011dc6:	2801      	cmp	r0, #1
 8011dc8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011dcc:	f63f af60 	bhi.w	8011c90 <uxr_write_framed_msg+0x74>
 8011dd0:	1c50      	adds	r0, r2, #1
 8011dd2:	18a5      	adds	r5, r4, r2
 8011dd4:	fa54 f080 	uxtab	r0, r4, r0
 8011dd8:	3202      	adds	r2, #2
 8011dda:	f081 0120 	eor.w	r1, r1, #32
 8011dde:	b2d2      	uxtb	r2, r2
 8011de0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011de4:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8011de8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011dec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	f47f af57 	bne.w	8011ca4 <uxr_write_framed_msg+0x88>
 8011df6:	9301      	str	r3, [sp, #4]
 8011df8:	4698      	mov	r8, r3
 8011dfa:	e779      	b.n	8011cf0 <uxr_write_framed_msg+0xd4>
 8011dfc:	2500      	movs	r5, #0
 8011dfe:	e001      	b.n	8011e04 <uxr_write_framed_msg+0x1e8>
 8011e00:	2800      	cmp	r0, #0
 8011e02:	d090      	beq.n	8011d26 <uxr_write_framed_msg+0x10a>
 8011e04:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011e08:	1b52      	subs	r2, r2, r5
 8011e0a:	465b      	mov	r3, fp
 8011e0c:	4421      	add	r1, r4
 8011e0e:	4638      	mov	r0, r7
 8011e10:	47b0      	blx	r6
 8011e12:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011e16:	4405      	add	r5, r0
 8011e18:	4295      	cmp	r5, r2
 8011e1a:	d3f1      	bcc.n	8011e00 <uxr_write_framed_msg+0x1e4>
 8011e1c:	d183      	bne.n	8011d26 <uxr_write_framed_msg+0x10a>
 8011e1e:	f04f 0300 	mov.w	r3, #0
 8011e22:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011e26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e28:	4543      	cmp	r3, r8
 8011e2a:	d964      	bls.n	8011ef6 <uxr_write_framed_msg+0x2da>
 8011e2c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011e30:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011e34:	2901      	cmp	r1, #1
 8011e36:	f04f 0200 	mov.w	r2, #0
 8011e3a:	f63f af3d 	bhi.w	8011cb8 <uxr_write_framed_msg+0x9c>
 8011e3e:	1c51      	adds	r1, r2, #1
 8011e40:	b2c9      	uxtb	r1, r1
 8011e42:	2929      	cmp	r1, #41	@ 0x29
 8011e44:	d8da      	bhi.n	8011dfc <uxr_write_framed_msg+0x1e0>
 8011e46:	18a0      	adds	r0, r4, r2
 8011e48:	4421      	add	r1, r4
 8011e4a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8011e4e:	3202      	adds	r2, #2
 8011e50:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8011e54:	b2d2      	uxtb	r2, r2
 8011e56:	f083 0020 	eor.w	r0, r3, #32
 8011e5a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011e5e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e62:	e733      	b.n	8011ccc <uxr_write_framed_msg+0xb0>
 8011e64:	18a1      	adds	r1, r4, r2
 8011e66:	3201      	adds	r2, #1
 8011e68:	4648      	mov	r0, r9
 8011e6a:	b2d2      	uxtb	r2, r2
 8011e6c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011e70:	f04f 0901 	mov.w	r9, #1
 8011e74:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e78:	2800      	cmp	r0, #0
 8011e7a:	f43f af7b 	beq.w	8011d74 <uxr_write_framed_msg+0x158>
 8011e7e:	2500      	movs	r5, #0
 8011e80:	e002      	b.n	8011e88 <uxr_write_framed_msg+0x26c>
 8011e82:	2800      	cmp	r0, #0
 8011e84:	f43f af4f 	beq.w	8011d26 <uxr_write_framed_msg+0x10a>
 8011e88:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011e8c:	1b52      	subs	r2, r2, r5
 8011e8e:	465b      	mov	r3, fp
 8011e90:	4421      	add	r1, r4
 8011e92:	4638      	mov	r0, r7
 8011e94:	47b0      	blx	r6
 8011e96:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011e9a:	4405      	add	r5, r0
 8011e9c:	4295      	cmp	r5, r2
 8011e9e:	d3f0      	bcc.n	8011e82 <uxr_write_framed_msg+0x266>
 8011ea0:	f47f af41 	bne.w	8011d26 <uxr_write_framed_msg+0x10a>
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011eaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011eac:	b298      	uxth	r0, r3
 8011eae:	b003      	add	sp, #12
 8011eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eb4:	217d      	movs	r1, #125	@ 0x7d
 8011eb6:	f082 0220 	eor.w	r2, r2, #32
 8011eba:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8011ebe:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011ec2:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8011ec6:	2901      	cmp	r1, #1
 8011ec8:	f04f 0203 	mov.w	r2, #3
 8011ecc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011ed0:	d804      	bhi.n	8011edc <uxr_write_framed_msg+0x2c0>
 8011ed2:	4611      	mov	r1, r2
 8011ed4:	f04f 0c04 	mov.w	ip, #4
 8011ed8:	2205      	movs	r2, #5
 8011eda:	e752      	b.n	8011d82 <uxr_write_framed_msg+0x166>
 8011edc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ede:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8011ee2:	b2dd      	uxtb	r5, r3
 8011ee4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011ee8:	2204      	movs	r2, #4
 8011eea:	2901      	cmp	r1, #1
 8011eec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011ef0:	f63f aec0 	bhi.w	8011c74 <uxr_write_framed_msg+0x58>
 8011ef4:	e758      	b.n	8011da8 <uxr_write_framed_msg+0x18c>
 8011ef6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011efa:	fa5f f889 	uxtb.w	r8, r9
 8011efe:	9301      	str	r3, [sp, #4]
 8011f00:	2200      	movs	r2, #0
 8011f02:	e6f5      	b.n	8011cf0 <uxr_write_framed_msg+0xd4>
 8011f04:	0801b324 	.word	0x0801b324

08011f08 <uxr_framing_read_transport>:
 8011f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f0c:	4604      	mov	r4, r0
 8011f0e:	b083      	sub	sp, #12
 8011f10:	461f      	mov	r7, r3
 8011f12:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8011f16:	4689      	mov	r9, r1
 8011f18:	4692      	mov	sl, r2
 8011f1a:	f000 fc89 	bl	8012830 <uxr_millis>
 8011f1e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011f22:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8011f26:	42b3      	cmp	r3, r6
 8011f28:	4680      	mov	r8, r0
 8011f2a:	d061      	beq.n	8011ff0 <uxr_framing_read_transport+0xe8>
 8011f2c:	d81c      	bhi.n	8011f68 <uxr_framing_read_transport+0x60>
 8011f2e:	1e75      	subs	r5, r6, #1
 8011f30:	1aed      	subs	r5, r5, r3
 8011f32:	b2ed      	uxtb	r5, r5
 8011f34:	2600      	movs	r6, #0
 8011f36:	455d      	cmp	r5, fp
 8011f38:	d81f      	bhi.n	8011f7a <uxr_framing_read_transport+0x72>
 8011f3a:	19ab      	adds	r3, r5, r6
 8011f3c:	455b      	cmp	r3, fp
 8011f3e:	bf84      	itt	hi
 8011f40:	ebab 0605 	subhi.w	r6, fp, r5
 8011f44:	b2f6      	uxtbhi	r6, r6
 8011f46:	b9ed      	cbnz	r5, 8011f84 <uxr_framing_read_transport+0x7c>
 8011f48:	f04f 0b00 	mov.w	fp, #0
 8011f4c:	f000 fc70 	bl	8012830 <uxr_millis>
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	eba0 0808 	sub.w	r8, r0, r8
 8011f56:	eba3 0308 	sub.w	r3, r3, r8
 8011f5a:	4658      	mov	r0, fp
 8011f5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011f60:	603b      	str	r3, [r7, #0]
 8011f62:	b003      	add	sp, #12
 8011f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f68:	2e00      	cmp	r6, #0
 8011f6a:	d049      	beq.n	8012000 <uxr_framing_read_transport+0xf8>
 8011f6c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8011f70:	b2ed      	uxtb	r5, r5
 8011f72:	3e01      	subs	r6, #1
 8011f74:	455d      	cmp	r5, fp
 8011f76:	b2f6      	uxtb	r6, r6
 8011f78:	d9df      	bls.n	8011f3a <uxr_framing_read_transport+0x32>
 8011f7a:	fa5f f58b 	uxtb.w	r5, fp
 8011f7e:	2600      	movs	r6, #0
 8011f80:	2d00      	cmp	r5, #0
 8011f82:	d0e1      	beq.n	8011f48 <uxr_framing_read_transport+0x40>
 8011f84:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011f88:	3102      	adds	r1, #2
 8011f8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f8c:	9300      	str	r3, [sp, #0]
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	4421      	add	r1, r4
 8011f92:	462a      	mov	r2, r5
 8011f94:	4650      	mov	r0, sl
 8011f96:	47c8      	blx	r9
 8011f98:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8012008 <uxr_framing_read_transport+0x100>)
 8011f9e:	4403      	add	r3, r0
 8011fa0:	0859      	lsrs	r1, r3, #1
 8011fa2:	fba2 2101 	umull	r2, r1, r2, r1
 8011fa6:	0889      	lsrs	r1, r1, #2
 8011fa8:	222a      	movs	r2, #42	@ 0x2a
 8011faa:	fb02 3111 	mls	r1, r2, r1, r3
 8011fae:	4683      	mov	fp, r0
 8011fb0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	d0c7      	beq.n	8011f48 <uxr_framing_read_transport+0x40>
 8011fb8:	42a8      	cmp	r0, r5
 8011fba:	d1c7      	bne.n	8011f4c <uxr_framing_read_transport+0x44>
 8011fbc:	2e00      	cmp	r6, #0
 8011fbe:	d0c5      	beq.n	8011f4c <uxr_framing_read_transport+0x44>
 8011fc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	3102      	adds	r1, #2
 8011fc6:	4632      	mov	r2, r6
 8011fc8:	4421      	add	r1, r4
 8011fca:	2300      	movs	r3, #0
 8011fcc:	4650      	mov	r0, sl
 8011fce:	47c8      	blx	r9
 8011fd0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8012008 <uxr_framing_read_transport+0x100>)
 8011fd6:	180b      	adds	r3, r1, r0
 8011fd8:	0859      	lsrs	r1, r3, #1
 8011fda:	fba2 1201 	umull	r1, r2, r2, r1
 8011fde:	0892      	lsrs	r2, r2, #2
 8011fe0:	212a      	movs	r1, #42	@ 0x2a
 8011fe2:	fb01 3312 	mls	r3, r1, r2, r3
 8011fe6:	eb00 0b05 	add.w	fp, r0, r5
 8011fea:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8011fee:	e7ad      	b.n	8011f4c <uxr_framing_read_transport+0x44>
 8011ff0:	2600      	movs	r6, #0
 8011ff2:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8011ff6:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8011ff8:	d9bf      	bls.n	8011f7a <uxr_framing_read_transport+0x72>
 8011ffa:	2102      	movs	r1, #2
 8011ffc:	2529      	movs	r5, #41	@ 0x29
 8011ffe:	e7c4      	b.n	8011f8a <uxr_framing_read_transport+0x82>
 8012000:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8012004:	b2ed      	uxtb	r5, r5
 8012006:	e796      	b.n	8011f36 <uxr_framing_read_transport+0x2e>
 8012008:	30c30c31 	.word	0x30c30c31

0801200c <uxr_read_framed_msg>:
 801200c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012010:	461e      	mov	r6, r3
 8012012:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012016:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801201a:	429d      	cmp	r5, r3
 801201c:	b083      	sub	sp, #12
 801201e:	4604      	mov	r4, r0
 8012020:	4688      	mov	r8, r1
 8012022:	4691      	mov	r9, r2
 8012024:	f000 8188 	beq.w	8012338 <uxr_read_framed_msg+0x32c>
 8012028:	7823      	ldrb	r3, [r4, #0]
 801202a:	4dc1      	ldr	r5, [pc, #772]	@ (8012330 <uxr_read_framed_msg+0x324>)
 801202c:	4fc1      	ldr	r7, [pc, #772]	@ (8012334 <uxr_read_framed_msg+0x328>)
 801202e:	2b07      	cmp	r3, #7
 8012030:	d8fd      	bhi.n	801202e <uxr_read_framed_msg+0x22>
 8012032:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012036:	0115      	.short	0x0115
 8012038:	00d600f6 	.word	0x00d600f6
 801203c:	009000b9 	.word	0x009000b9
 8012040:	0030004d 	.word	0x0030004d
 8012044:	0008      	.short	0x0008
 8012046:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801204a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801204e:	4299      	cmp	r1, r3
 8012050:	f000 814a 	beq.w	80122e8 <uxr_read_framed_msg+0x2dc>
 8012054:	18e2      	adds	r2, r4, r3
 8012056:	7892      	ldrb	r2, [r2, #2]
 8012058:	2a7d      	cmp	r2, #125	@ 0x7d
 801205a:	f000 8199 	beq.w	8012390 <uxr_read_framed_msg+0x384>
 801205e:	3301      	adds	r3, #1
 8012060:	0858      	lsrs	r0, r3, #1
 8012062:	fba5 1000 	umull	r1, r0, r5, r0
 8012066:	0880      	lsrs	r0, r0, #2
 8012068:	212a      	movs	r1, #42	@ 0x2a
 801206a:	fb01 3310 	mls	r3, r1, r0, r3
 801206e:	2a7e      	cmp	r2, #126	@ 0x7e
 8012070:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012074:	f000 8252 	beq.w	801251c <uxr_read_framed_msg+0x510>
 8012078:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801207a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801207c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012080:	b29b      	uxth	r3, r3
 8012082:	2200      	movs	r2, #0
 8012084:	4299      	cmp	r1, r3
 8012086:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8012088:	7022      	strb	r2, [r4, #0]
 801208a:	f000 8179 	beq.w	8012380 <uxr_read_framed_msg+0x374>
 801208e:	2000      	movs	r0, #0
 8012090:	b003      	add	sp, #12
 8012092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012096:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801209a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801209e:	4299      	cmp	r1, r3
 80120a0:	f000 8131 	beq.w	8012306 <uxr_read_framed_msg+0x2fa>
 80120a4:	18e2      	adds	r2, r4, r3
 80120a6:	7890      	ldrb	r0, [r2, #2]
 80120a8:	287d      	cmp	r0, #125	@ 0x7d
 80120aa:	f000 8190 	beq.w	80123ce <uxr_read_framed_msg+0x3c2>
 80120ae:	3301      	adds	r3, #1
 80120b0:	085a      	lsrs	r2, r3, #1
 80120b2:	fba5 1202 	umull	r1, r2, r5, r2
 80120b6:	0892      	lsrs	r2, r2, #2
 80120b8:	212a      	movs	r1, #42	@ 0x2a
 80120ba:	fb01 3312 	mls	r3, r1, r2, r3
 80120be:	287e      	cmp	r0, #126	@ 0x7e
 80120c0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80120c4:	f000 821a 	beq.w	80124fc <uxr_read_framed_msg+0x4f0>
 80120c8:	2307      	movs	r3, #7
 80120ca:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80120cc:	7023      	strb	r3, [r4, #0]
 80120ce:	e7ae      	b.n	801202e <uxr_read_framed_msg+0x22>
 80120d0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80120d2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80120d6:	459e      	cmp	lr, r3
 80120d8:	d938      	bls.n	801214c <uxr_read_framed_msg+0x140>
 80120da:	ee07 8a90 	vmov	s15, r8
 80120de:	212a      	movs	r1, #42	@ 0x2a
 80120e0:	e020      	b.n	8012124 <uxr_read_framed_msg+0x118>
 80120e2:	f89b c002 	ldrb.w	ip, [fp, #2]
 80120e6:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80120ea:	f000 80d4 	beq.w	8012296 <uxr_read_framed_msg+0x28a>
 80120ee:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80120f2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80120f6:	f000 8219 	beq.w	801252c <uxr_read_framed_msg+0x520>
 80120fa:	f806 c003 	strb.w	ip, [r6, r3]
 80120fe:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8012102:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012104:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012108:	ea8a 000c 	eor.w	r0, sl, ip
 801210c:	b2c0      	uxtb	r0, r0
 801210e:	3301      	adds	r3, #1
 8012110:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8012114:	b29b      	uxth	r3, r3
 8012116:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801211a:	4573      	cmp	r3, lr
 801211c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801211e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012120:	f080 8120 	bcs.w	8012364 <uxr_read_framed_msg+0x358>
 8012124:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012128:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801212c:	f100 0c01 	add.w	ip, r0, #1
 8012130:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012134:	fba5 8202 	umull	r8, r2, r5, r2
 8012138:	0892      	lsrs	r2, r2, #2
 801213a:	4582      	cmp	sl, r0
 801213c:	eb04 0b00 	add.w	fp, r4, r0
 8012140:	fb01 c212 	mls	r2, r1, r2, ip
 8012144:	d1cd      	bne.n	80120e2 <uxr_read_framed_msg+0xd6>
 8012146:	ee17 8a90 	vmov	r8, s15
 801214a:	459e      	cmp	lr, r3
 801214c:	f040 8111 	bne.w	8012372 <uxr_read_framed_msg+0x366>
 8012150:	2306      	movs	r3, #6
 8012152:	7023      	strb	r3, [r4, #0]
 8012154:	e76b      	b.n	801202e <uxr_read_framed_msg+0x22>
 8012156:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801215a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801215e:	4298      	cmp	r0, r3
 8012160:	f000 80c2 	beq.w	80122e8 <uxr_read_framed_msg+0x2dc>
 8012164:	18e2      	adds	r2, r4, r3
 8012166:	7891      	ldrb	r1, [r2, #2]
 8012168:	297d      	cmp	r1, #125	@ 0x7d
 801216a:	f000 814c 	beq.w	8012406 <uxr_read_framed_msg+0x3fa>
 801216e:	3301      	adds	r3, #1
 8012170:	085a      	lsrs	r2, r3, #1
 8012172:	fba5 0202 	umull	r0, r2, r5, r2
 8012176:	0892      	lsrs	r2, r2, #2
 8012178:	202a      	movs	r0, #42	@ 0x2a
 801217a:	fb00 3312 	mls	r3, r0, r2, r3
 801217e:	297e      	cmp	r1, #126	@ 0x7e
 8012180:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012184:	f000 81ca 	beq.w	801251c <uxr_read_framed_msg+0x510>
 8012188:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801218a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801218e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012190:	b29b      	uxth	r3, r3
 8012192:	2000      	movs	r0, #0
 8012194:	428b      	cmp	r3, r1
 8012196:	8623      	strh	r3, [r4, #48]	@ 0x30
 8012198:	8660      	strh	r0, [r4, #50]	@ 0x32
 801219a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801219c:	f240 80df 	bls.w	801235e <uxr_read_framed_msg+0x352>
 80121a0:	7020      	strb	r0, [r4, #0]
 80121a2:	b003      	add	sp, #12
 80121a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121a8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80121ac:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80121b0:	4299      	cmp	r1, r3
 80121b2:	f000 80a8 	beq.w	8012306 <uxr_read_framed_msg+0x2fa>
 80121b6:	18e2      	adds	r2, r4, r3
 80121b8:	7890      	ldrb	r0, [r2, #2]
 80121ba:	287d      	cmp	r0, #125	@ 0x7d
 80121bc:	f000 8164 	beq.w	8012488 <uxr_read_framed_msg+0x47c>
 80121c0:	3301      	adds	r3, #1
 80121c2:	085a      	lsrs	r2, r3, #1
 80121c4:	fba5 1202 	umull	r1, r2, r5, r2
 80121c8:	0892      	lsrs	r2, r2, #2
 80121ca:	212a      	movs	r1, #42	@ 0x2a
 80121cc:	fb01 3312 	mls	r3, r1, r2, r3
 80121d0:	287e      	cmp	r0, #126	@ 0x7e
 80121d2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80121d6:	f000 8191 	beq.w	80124fc <uxr_read_framed_msg+0x4f0>
 80121da:	2304      	movs	r3, #4
 80121dc:	8620      	strh	r0, [r4, #48]	@ 0x30
 80121de:	7023      	strb	r3, [r4, #0]
 80121e0:	e725      	b.n	801202e <uxr_read_framed_msg+0x22>
 80121e2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80121e6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80121ea:	4290      	cmp	r0, r2
 80121ec:	f000 80b3 	beq.w	8012356 <uxr_read_framed_msg+0x34a>
 80121f0:	18a3      	adds	r3, r4, r2
 80121f2:	7899      	ldrb	r1, [r3, #2]
 80121f4:	297d      	cmp	r1, #125	@ 0x7d
 80121f6:	f000 8164 	beq.w	80124c2 <uxr_read_framed_msg+0x4b6>
 80121fa:	3201      	adds	r2, #1
 80121fc:	0850      	lsrs	r0, r2, #1
 80121fe:	fba5 3000 	umull	r3, r0, r5, r0
 8012202:	0880      	lsrs	r0, r0, #2
 8012204:	232a      	movs	r3, #42	@ 0x2a
 8012206:	fb03 2210 	mls	r2, r3, r0, r2
 801220a:	297e      	cmp	r1, #126	@ 0x7e
 801220c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012210:	f000 8188 	beq.w	8012524 <uxr_read_framed_msg+0x518>
 8012214:	7863      	ldrb	r3, [r4, #1]
 8012216:	428b      	cmp	r3, r1
 8012218:	bf0c      	ite	eq
 801221a:	2303      	moveq	r3, #3
 801221c:	2300      	movne	r3, #0
 801221e:	7023      	strb	r3, [r4, #0]
 8012220:	e705      	b.n	801202e <uxr_read_framed_msg+0x22>
 8012222:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012226:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801222a:	2200      	movs	r2, #0
 801222c:	4299      	cmp	r1, r3
 801222e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8012232:	d06c      	beq.n	801230e <uxr_read_framed_msg+0x302>
 8012234:	18e2      	adds	r2, r4, r3
 8012236:	7890      	ldrb	r0, [r2, #2]
 8012238:	287d      	cmp	r0, #125	@ 0x7d
 801223a:	f000 8101 	beq.w	8012440 <uxr_read_framed_msg+0x434>
 801223e:	3301      	adds	r3, #1
 8012240:	085a      	lsrs	r2, r3, #1
 8012242:	fba5 1202 	umull	r1, r2, r5, r2
 8012246:	0892      	lsrs	r2, r2, #2
 8012248:	212a      	movs	r1, #42	@ 0x2a
 801224a:	fb01 3312 	mls	r3, r1, r2, r3
 801224e:	287e      	cmp	r0, #126	@ 0x7e
 8012250:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8012254:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012258:	d059      	beq.n	801230e <uxr_read_framed_msg+0x302>
 801225a:	2302      	movs	r3, #2
 801225c:	7023      	strb	r3, [r4, #0]
 801225e:	e6e6      	b.n	801202e <uxr_read_framed_msg+0x22>
 8012260:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012264:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012268:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801226c:	1c51      	adds	r1, r2, #1
 801226e:	084b      	lsrs	r3, r1, #1
 8012270:	fba5 c303 	umull	ip, r3, r5, r3
 8012274:	089b      	lsrs	r3, r3, #2
 8012276:	fb0e 1313 	mls	r3, lr, r3, r1
 801227a:	4592      	cmp	sl, r2
 801227c:	eb04 0002 	add.w	r0, r4, r2
 8012280:	b2da      	uxtb	r2, r3
 8012282:	f43f af04 	beq.w	801208e <uxr_read_framed_msg+0x82>
 8012286:	7883      	ldrb	r3, [r0, #2]
 8012288:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801228c:	2b7e      	cmp	r3, #126	@ 0x7e
 801228e:	d1ed      	bne.n	801226c <uxr_read_framed_msg+0x260>
 8012290:	2301      	movs	r3, #1
 8012292:	7023      	strb	r3, [r4, #0]
 8012294:	e6cb      	b.n	801202e <uxr_read_framed_msg+0x22>
 8012296:	f100 0c01 	add.w	ip, r0, #1
 801229a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801229e:	fba5 8202 	umull	r8, r2, r5, r2
 80122a2:	0892      	lsrs	r2, r2, #2
 80122a4:	fb01 c212 	mls	r2, r1, r2, ip
 80122a8:	eb04 0c02 	add.w	ip, r4, r2
 80122ac:	b2d2      	uxtb	r2, r2
 80122ae:	4592      	cmp	sl, r2
 80122b0:	f100 0002 	add.w	r0, r0, #2
 80122b4:	f43f af47 	beq.w	8012146 <uxr_read_framed_msg+0x13a>
 80122b8:	0842      	lsrs	r2, r0, #1
 80122ba:	f89c a002 	ldrb.w	sl, [ip, #2]
 80122be:	fba5 8202 	umull	r8, r2, r5, r2
 80122c2:	0892      	lsrs	r2, r2, #2
 80122c4:	fb01 0012 	mls	r0, r1, r2, r0
 80122c8:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 80122cc:	f08a 0c20 	eor.w	ip, sl, #32
 80122d0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80122d4:	f47f af11 	bne.w	80120fa <uxr_read_framed_msg+0xee>
 80122d8:	459e      	cmp	lr, r3
 80122da:	ee17 8a90 	vmov	r8, s15
 80122de:	f43f af37 	beq.w	8012150 <uxr_read_framed_msg+0x144>
 80122e2:	2301      	movs	r3, #1
 80122e4:	7023      	strb	r3, [r4, #0]
 80122e6:	e6a2      	b.n	801202e <uxr_read_framed_msg+0x22>
 80122e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122ea:	9300      	str	r3, [sp, #0]
 80122ec:	2301      	movs	r3, #1
 80122ee:	9301      	str	r3, [sp, #4]
 80122f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122f2:	464a      	mov	r2, r9
 80122f4:	4641      	mov	r1, r8
 80122f6:	4620      	mov	r0, r4
 80122f8:	f7ff fe06 	bl	8011f08 <uxr_framing_read_transport>
 80122fc:	2800      	cmp	r0, #0
 80122fe:	f43f aec6 	beq.w	801208e <uxr_read_framed_msg+0x82>
 8012302:	7823      	ldrb	r3, [r4, #0]
 8012304:	e693      	b.n	801202e <uxr_read_framed_msg+0x22>
 8012306:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012308:	9300      	str	r3, [sp, #0]
 801230a:	2302      	movs	r3, #2
 801230c:	e7ef      	b.n	80122ee <uxr_read_framed_msg+0x2e2>
 801230e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012310:	9300      	str	r3, [sp, #0]
 8012312:	2304      	movs	r3, #4
 8012314:	9301      	str	r3, [sp, #4]
 8012316:	464a      	mov	r2, r9
 8012318:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801231a:	4641      	mov	r1, r8
 801231c:	4620      	mov	r0, r4
 801231e:	f7ff fdf3 	bl	8011f08 <uxr_framing_read_transport>
 8012322:	2800      	cmp	r0, #0
 8012324:	d1ed      	bne.n	8012302 <uxr_read_framed_msg+0x2f6>
 8012326:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801232a:	2b7e      	cmp	r3, #126	@ 0x7e
 801232c:	d0e9      	beq.n	8012302 <uxr_read_framed_msg+0x2f6>
 801232e:	e6ae      	b.n	801208e <uxr_read_framed_msg+0x82>
 8012330:	30c30c31 	.word	0x30c30c31
 8012334:	0801b324 	.word	0x0801b324
 8012338:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801233a:	9300      	str	r3, [sp, #0]
 801233c:	2305      	movs	r3, #5
 801233e:	9301      	str	r3, [sp, #4]
 8012340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012342:	f7ff fde1 	bl	8011f08 <uxr_framing_read_transport>
 8012346:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801234a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801234e:	429a      	cmp	r2, r3
 8012350:	f43f ae9d 	beq.w	801208e <uxr_read_framed_msg+0x82>
 8012354:	e668      	b.n	8012028 <uxr_read_framed_msg+0x1c>
 8012356:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012358:	9300      	str	r3, [sp, #0]
 801235a:	2303      	movs	r3, #3
 801235c:	e7c7      	b.n	80122ee <uxr_read_framed_msg+0x2e2>
 801235e:	2305      	movs	r3, #5
 8012360:	7023      	strb	r3, [r4, #0]
 8012362:	e664      	b.n	801202e <uxr_read_framed_msg+0x22>
 8012364:	ee17 8a90 	vmov	r8, s15
 8012368:	f43f aef2 	beq.w	8012150 <uxr_read_framed_msg+0x144>
 801236c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012370:	d08e      	beq.n	8012290 <uxr_read_framed_msg+0x284>
 8012372:	ebae 0303 	sub.w	r3, lr, r3
 8012376:	3302      	adds	r3, #2
 8012378:	9301      	str	r3, [sp, #4]
 801237a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801237c:	9300      	str	r3, [sp, #0]
 801237e:	e7b7      	b.n	80122f0 <uxr_read_framed_msg+0x2e4>
 8012380:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012382:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012386:	7013      	strb	r3, [r2, #0]
 8012388:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801238a:	b003      	add	sp, #12
 801238c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012390:	f103 0c01 	add.w	ip, r3, #1
 8012394:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012398:	fba5 0202 	umull	r0, r2, r5, r2
 801239c:	0892      	lsrs	r2, r2, #2
 801239e:	202a      	movs	r0, #42	@ 0x2a
 80123a0:	fb00 c212 	mls	r2, r0, r2, ip
 80123a4:	fa5f fc82 	uxtb.w	ip, r2
 80123a8:	4561      	cmp	r1, ip
 80123aa:	d09d      	beq.n	80122e8 <uxr_read_framed_msg+0x2dc>
 80123ac:	3302      	adds	r3, #2
 80123ae:	4422      	add	r2, r4
 80123b0:	0859      	lsrs	r1, r3, #1
 80123b2:	7892      	ldrb	r2, [r2, #2]
 80123b4:	fba5 c101 	umull	ip, r1, r5, r1
 80123b8:	0889      	lsrs	r1, r1, #2
 80123ba:	fb00 3311 	mls	r3, r0, r1, r3
 80123be:	2a7e      	cmp	r2, #126	@ 0x7e
 80123c0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80123c4:	f000 80aa 	beq.w	801251c <uxr_read_framed_msg+0x510>
 80123c8:	f082 0220 	eor.w	r2, r2, #32
 80123cc:	e654      	b.n	8012078 <uxr_read_framed_msg+0x6c>
 80123ce:	1c58      	adds	r0, r3, #1
 80123d0:	0842      	lsrs	r2, r0, #1
 80123d2:	fba5 c202 	umull	ip, r2, r5, r2
 80123d6:	0892      	lsrs	r2, r2, #2
 80123d8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80123dc:	fb0c 0212 	mls	r2, ip, r2, r0
 80123e0:	b2d0      	uxtb	r0, r2
 80123e2:	4281      	cmp	r1, r0
 80123e4:	d08f      	beq.n	8012306 <uxr_read_framed_msg+0x2fa>
 80123e6:	4422      	add	r2, r4
 80123e8:	3302      	adds	r3, #2
 80123ea:	7890      	ldrb	r0, [r2, #2]
 80123ec:	085a      	lsrs	r2, r3, #1
 80123ee:	fba5 1202 	umull	r1, r2, r5, r2
 80123f2:	0892      	lsrs	r2, r2, #2
 80123f4:	fb0c 3312 	mls	r3, ip, r2, r3
 80123f8:	287e      	cmp	r0, #126	@ 0x7e
 80123fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80123fe:	d07d      	beq.n	80124fc <uxr_read_framed_msg+0x4f0>
 8012400:	f080 0020 	eor.w	r0, r0, #32
 8012404:	e660      	b.n	80120c8 <uxr_read_framed_msg+0xbc>
 8012406:	1c59      	adds	r1, r3, #1
 8012408:	084a      	lsrs	r2, r1, #1
 801240a:	fba5 c202 	umull	ip, r2, r5, r2
 801240e:	0892      	lsrs	r2, r2, #2
 8012410:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012414:	fb0c 1212 	mls	r2, ip, r2, r1
 8012418:	b2d1      	uxtb	r1, r2
 801241a:	4288      	cmp	r0, r1
 801241c:	f43f af64 	beq.w	80122e8 <uxr_read_framed_msg+0x2dc>
 8012420:	4422      	add	r2, r4
 8012422:	3302      	adds	r3, #2
 8012424:	7891      	ldrb	r1, [r2, #2]
 8012426:	085a      	lsrs	r2, r3, #1
 8012428:	fba5 0202 	umull	r0, r2, r5, r2
 801242c:	0892      	lsrs	r2, r2, #2
 801242e:	fb0c 3312 	mls	r3, ip, r2, r3
 8012432:	297e      	cmp	r1, #126	@ 0x7e
 8012434:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012438:	d070      	beq.n	801251c <uxr_read_framed_msg+0x510>
 801243a:	f081 0120 	eor.w	r1, r1, #32
 801243e:	e6a3      	b.n	8012188 <uxr_read_framed_msg+0x17c>
 8012440:	f103 0c01 	add.w	ip, r3, #1
 8012444:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012448:	fba5 0202 	umull	r0, r2, r5, r2
 801244c:	0892      	lsrs	r2, r2, #2
 801244e:	202a      	movs	r0, #42	@ 0x2a
 8012450:	fb00 c212 	mls	r2, r0, r2, ip
 8012454:	fa5f fc82 	uxtb.w	ip, r2
 8012458:	4561      	cmp	r1, ip
 801245a:	f43f af58 	beq.w	801230e <uxr_read_framed_msg+0x302>
 801245e:	4422      	add	r2, r4
 8012460:	3302      	adds	r3, #2
 8012462:	7891      	ldrb	r1, [r2, #2]
 8012464:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012468:	085a      	lsrs	r2, r3, #1
 801246a:	fba5 c202 	umull	ip, r2, r5, r2
 801246e:	0892      	lsrs	r2, r2, #2
 8012470:	fb00 3312 	mls	r3, r0, r2, r3
 8012474:	297e      	cmp	r1, #126	@ 0x7e
 8012476:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801247a:	f43f af48 	beq.w	801230e <uxr_read_framed_msg+0x302>
 801247e:	f081 0120 	eor.w	r1, r1, #32
 8012482:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012486:	e6e8      	b.n	801225a <uxr_read_framed_msg+0x24e>
 8012488:	1c58      	adds	r0, r3, #1
 801248a:	0842      	lsrs	r2, r0, #1
 801248c:	fba5 c202 	umull	ip, r2, r5, r2
 8012490:	0892      	lsrs	r2, r2, #2
 8012492:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012496:	fb0c 0212 	mls	r2, ip, r2, r0
 801249a:	b2d0      	uxtb	r0, r2
 801249c:	4281      	cmp	r1, r0
 801249e:	f43f af32 	beq.w	8012306 <uxr_read_framed_msg+0x2fa>
 80124a2:	4422      	add	r2, r4
 80124a4:	3302      	adds	r3, #2
 80124a6:	7890      	ldrb	r0, [r2, #2]
 80124a8:	085a      	lsrs	r2, r3, #1
 80124aa:	fba5 1202 	umull	r1, r2, r5, r2
 80124ae:	0892      	lsrs	r2, r2, #2
 80124b0:	fb0c 3312 	mls	r3, ip, r2, r3
 80124b4:	287e      	cmp	r0, #126	@ 0x7e
 80124b6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80124ba:	d01f      	beq.n	80124fc <uxr_read_framed_msg+0x4f0>
 80124bc:	f080 0020 	eor.w	r0, r0, #32
 80124c0:	e68b      	b.n	80121da <uxr_read_framed_msg+0x1ce>
 80124c2:	1c51      	adds	r1, r2, #1
 80124c4:	084b      	lsrs	r3, r1, #1
 80124c6:	fba5 c303 	umull	ip, r3, r5, r3
 80124ca:	089b      	lsrs	r3, r3, #2
 80124cc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80124d0:	fb0c 1313 	mls	r3, ip, r3, r1
 80124d4:	b2d9      	uxtb	r1, r3
 80124d6:	4288      	cmp	r0, r1
 80124d8:	f43f af3d 	beq.w	8012356 <uxr_read_framed_msg+0x34a>
 80124dc:	3202      	adds	r2, #2
 80124de:	4423      	add	r3, r4
 80124e0:	0850      	lsrs	r0, r2, #1
 80124e2:	789b      	ldrb	r3, [r3, #2]
 80124e4:	fba5 1000 	umull	r1, r0, r5, r0
 80124e8:	0880      	lsrs	r0, r0, #2
 80124ea:	fb0c 2210 	mls	r2, ip, r0, r2
 80124ee:	2b7e      	cmp	r3, #126	@ 0x7e
 80124f0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80124f4:	d016      	beq.n	8012524 <uxr_read_framed_msg+0x518>
 80124f6:	f083 0120 	eor.w	r1, r3, #32
 80124fa:	e68b      	b.n	8012214 <uxr_read_framed_msg+0x208>
 80124fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124fe:	9300      	str	r3, [sp, #0]
 8012500:	2302      	movs	r3, #2
 8012502:	9301      	str	r3, [sp, #4]
 8012504:	464a      	mov	r2, r9
 8012506:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012508:	4641      	mov	r1, r8
 801250a:	4620      	mov	r0, r4
 801250c:	f7ff fcfc 	bl	8011f08 <uxr_framing_read_transport>
 8012510:	2800      	cmp	r0, #0
 8012512:	f47f aef6 	bne.w	8012302 <uxr_read_framed_msg+0x2f6>
 8012516:	2301      	movs	r3, #1
 8012518:	7023      	strb	r3, [r4, #0]
 801251a:	e588      	b.n	801202e <uxr_read_framed_msg+0x22>
 801251c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801251e:	9300      	str	r3, [sp, #0]
 8012520:	2301      	movs	r3, #1
 8012522:	e7ee      	b.n	8012502 <uxr_read_framed_msg+0x4f6>
 8012524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012526:	9300      	str	r3, [sp, #0]
 8012528:	2303      	movs	r3, #3
 801252a:	e7ea      	b.n	8012502 <uxr_read_framed_msg+0x4f6>
 801252c:	ee17 8a90 	vmov	r8, s15
 8012530:	e6ae      	b.n	8012290 <uxr_read_framed_msg+0x284>
 8012532:	bf00      	nop

08012534 <uxr_stream_id>:
 8012534:	2901      	cmp	r1, #1
 8012536:	b082      	sub	sp, #8
 8012538:	d01d      	beq.n	8012576 <uxr_stream_id+0x42>
 801253a:	2902      	cmp	r1, #2
 801253c:	f04f 0c00 	mov.w	ip, #0
 8012540:	d01e      	beq.n	8012580 <uxr_stream_id+0x4c>
 8012542:	2300      	movs	r3, #0
 8012544:	f36c 0307 	bfi	r3, ip, #0, #8
 8012548:	f360 230f 	bfi	r3, r0, #8, #8
 801254c:	f361 4317 	bfi	r3, r1, #16, #8
 8012550:	f362 631f 	bfi	r3, r2, #24, #8
 8012554:	b2da      	uxtb	r2, r3
 8012556:	2000      	movs	r0, #0
 8012558:	f362 0007 	bfi	r0, r2, #0, #8
 801255c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012560:	f362 200f 	bfi	r0, r2, #8, #8
 8012564:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012568:	f362 4017 	bfi	r0, r2, #16, #8
 801256c:	0e1b      	lsrs	r3, r3, #24
 801256e:	f363 601f 	bfi	r0, r3, #24, #8
 8012572:	b002      	add	sp, #8
 8012574:	4770      	bx	lr
 8012576:	f100 0c01 	add.w	ip, r0, #1
 801257a:	fa5f fc8c 	uxtb.w	ip, ip
 801257e:	e7e0      	b.n	8012542 <uxr_stream_id+0xe>
 8012580:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8012584:	e7dd      	b.n	8012542 <uxr_stream_id+0xe>
 8012586:	bf00      	nop

08012588 <uxr_stream_id_from_raw>:
 8012588:	b082      	sub	sp, #8
 801258a:	b130      	cbz	r0, 801259a <uxr_stream_id_from_raw+0x12>
 801258c:	0603      	lsls	r3, r0, #24
 801258e:	d420      	bmi.n	80125d2 <uxr_stream_id_from_raw+0x4a>
 8012590:	1e42      	subs	r2, r0, #1
 8012592:	b2d2      	uxtb	r2, r2
 8012594:	f04f 0c01 	mov.w	ip, #1
 8012598:	e001      	b.n	801259e <uxr_stream_id_from_raw+0x16>
 801259a:	4684      	mov	ip, r0
 801259c:	4602      	mov	r2, r0
 801259e:	2300      	movs	r3, #0
 80125a0:	f360 0307 	bfi	r3, r0, #0, #8
 80125a4:	f362 230f 	bfi	r3, r2, #8, #8
 80125a8:	f36c 4317 	bfi	r3, ip, #16, #8
 80125ac:	f361 631f 	bfi	r3, r1, #24, #8
 80125b0:	b2da      	uxtb	r2, r3
 80125b2:	2000      	movs	r0, #0
 80125b4:	f362 0007 	bfi	r0, r2, #0, #8
 80125b8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80125bc:	f362 200f 	bfi	r0, r2, #8, #8
 80125c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80125c4:	f362 4017 	bfi	r0, r2, #16, #8
 80125c8:	0e1b      	lsrs	r3, r3, #24
 80125ca:	f363 601f 	bfi	r0, r3, #24, #8
 80125ce:	b002      	add	sp, #8
 80125d0:	4770      	bx	lr
 80125d2:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80125d6:	f04f 0c02 	mov.w	ip, #2
 80125da:	e7e0      	b.n	801259e <uxr_stream_id_from_raw+0x16>

080125dc <uxr_init_stream_storage>:
 80125dc:	2300      	movs	r3, #0
 80125de:	7403      	strb	r3, [r0, #16]
 80125e0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80125e4:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80125e8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop

080125f0 <uxr_reset_stream_storage>:
 80125f0:	b570      	push	{r4, r5, r6, lr}
 80125f2:	7c03      	ldrb	r3, [r0, #16]
 80125f4:	4604      	mov	r4, r0
 80125f6:	b153      	cbz	r3, 801260e <uxr_reset_stream_storage+0x1e>
 80125f8:	4606      	mov	r6, r0
 80125fa:	2500      	movs	r5, #0
 80125fc:	4630      	mov	r0, r6
 80125fe:	f005 fe9b 	bl	8018338 <uxr_reset_output_best_effort_stream>
 8012602:	7c23      	ldrb	r3, [r4, #16]
 8012604:	3501      	adds	r5, #1
 8012606:	42ab      	cmp	r3, r5
 8012608:	f106 0610 	add.w	r6, r6, #16
 801260c:	d8f6      	bhi.n	80125fc <uxr_reset_stream_storage+0xc>
 801260e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012612:	b163      	cbz	r3, 801262e <uxr_reset_stream_storage+0x3e>
 8012614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012618:	2500      	movs	r5, #0
 801261a:	4630      	mov	r0, r6
 801261c:	f005 fc8e 	bl	8017f3c <uxr_reset_input_best_effort_stream>
 8012620:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012624:	3501      	adds	r5, #1
 8012626:	42ab      	cmp	r3, r5
 8012628:	f106 0602 	add.w	r6, r6, #2
 801262c:	d8f5      	bhi.n	801261a <uxr_reset_stream_storage+0x2a>
 801262e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012632:	b163      	cbz	r3, 801264e <uxr_reset_stream_storage+0x5e>
 8012634:	f104 0618 	add.w	r6, r4, #24
 8012638:	2500      	movs	r5, #0
 801263a:	4630      	mov	r0, r6
 801263c:	f005 ff28 	bl	8018490 <uxr_reset_output_reliable_stream>
 8012640:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012644:	3501      	adds	r5, #1
 8012646:	42ab      	cmp	r3, r5
 8012648:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 801264c:	d8f5      	bhi.n	801263a <uxr_reset_stream_storage+0x4a>
 801264e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012652:	b163      	cbz	r3, 801266e <uxr_reset_stream_storage+0x7e>
 8012654:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8012658:	2500      	movs	r5, #0
 801265a:	4630      	mov	r0, r6
 801265c:	f005 fce2 	bl	8018024 <uxr_reset_input_reliable_stream>
 8012660:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012664:	3501      	adds	r5, #1
 8012666:	42ab      	cmp	r3, r5
 8012668:	f106 0618 	add.w	r6, r6, #24
 801266c:	d8f5      	bhi.n	801265a <uxr_reset_stream_storage+0x6a>
 801266e:	bd70      	pop	{r4, r5, r6, pc}

08012670 <uxr_add_output_best_effort_buffer>:
 8012670:	b510      	push	{r4, lr}
 8012672:	7c04      	ldrb	r4, [r0, #16]
 8012674:	f104 0c01 	add.w	ip, r4, #1
 8012678:	b082      	sub	sp, #8
 801267a:	f880 c010 	strb.w	ip, [r0, #16]
 801267e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8012682:	f005 fe4f 	bl	8018324 <uxr_init_output_best_effort_stream>
 8012686:	2201      	movs	r2, #1
 8012688:	4611      	mov	r1, r2
 801268a:	4620      	mov	r0, r4
 801268c:	b002      	add	sp, #8
 801268e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012692:	f7ff bf4f 	b.w	8012534 <uxr_stream_id>
 8012696:	bf00      	nop

08012698 <uxr_add_output_reliable_buffer>:
 8012698:	b510      	push	{r4, lr}
 801269a:	b084      	sub	sp, #16
 801269c:	4684      	mov	ip, r0
 801269e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80126a2:	9000      	str	r0, [sp, #0]
 80126a4:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80126a8:	2028      	movs	r0, #40	@ 0x28
 80126aa:	fb00 c004 	mla	r0, r0, r4, ip
 80126ae:	f104 0e01 	add.w	lr, r4, #1
 80126b2:	3018      	adds	r0, #24
 80126b4:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80126b8:	f005 feb2 	bl	8018420 <uxr_init_output_reliable_stream>
 80126bc:	2201      	movs	r2, #1
 80126be:	2102      	movs	r1, #2
 80126c0:	4620      	mov	r0, r4
 80126c2:	b004      	add	sp, #16
 80126c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126c8:	f7ff bf34 	b.w	8012534 <uxr_stream_id>

080126cc <uxr_add_input_best_effort_buffer>:
 80126cc:	b510      	push	{r4, lr}
 80126ce:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80126d2:	4603      	mov	r3, r0
 80126d4:	1c62      	adds	r2, r4, #1
 80126d6:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80126da:	b082      	sub	sp, #8
 80126dc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80126e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80126e4:	f005 fc26 	bl	8017f34 <uxr_init_input_best_effort_stream>
 80126e8:	2200      	movs	r2, #0
 80126ea:	2101      	movs	r1, #1
 80126ec:	4620      	mov	r0, r4
 80126ee:	b002      	add	sp, #8
 80126f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126f4:	f7ff bf1e 	b.w	8012534 <uxr_stream_id>

080126f8 <uxr_add_input_reliable_buffer>:
 80126f8:	b510      	push	{r4, lr}
 80126fa:	b084      	sub	sp, #16
 80126fc:	4684      	mov	ip, r0
 80126fe:	9806      	ldr	r0, [sp, #24]
 8012700:	9000      	str	r0, [sp, #0]
 8012702:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8012706:	2018      	movs	r0, #24
 8012708:	fb00 c004 	mla	r0, r0, r4, ip
 801270c:	f104 0e01 	add.w	lr, r4, #1
 8012710:	3048      	adds	r0, #72	@ 0x48
 8012712:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8012716:	f005 fc59 	bl	8017fcc <uxr_init_input_reliable_stream>
 801271a:	2200      	movs	r2, #0
 801271c:	2102      	movs	r1, #2
 801271e:	4620      	mov	r0, r4
 8012720:	b004      	add	sp, #16
 8012722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012726:	f7ff bf05 	b.w	8012534 <uxr_stream_id>
 801272a:	bf00      	nop

0801272c <uxr_get_output_best_effort_stream>:
 801272c:	7c03      	ldrb	r3, [r0, #16]
 801272e:	428b      	cmp	r3, r1
 8012730:	bf8c      	ite	hi
 8012732:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012736:	2000      	movls	r0, #0
 8012738:	4770      	bx	lr
 801273a:	bf00      	nop

0801273c <uxr_get_output_reliable_stream>:
 801273c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012740:	428b      	cmp	r3, r1
 8012742:	bf83      	ittte	hi
 8012744:	2328      	movhi	r3, #40	@ 0x28
 8012746:	fb03 0001 	mlahi	r0, r3, r1, r0
 801274a:	3018      	addhi	r0, #24
 801274c:	2000      	movls	r0, #0
 801274e:	4770      	bx	lr

08012750 <uxr_get_input_best_effort_stream>:
 8012750:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012754:	428b      	cmp	r3, r1
 8012756:	bf86      	itte	hi
 8012758:	3121      	addhi	r1, #33	@ 0x21
 801275a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801275e:	2000      	movls	r0, #0
 8012760:	4770      	bx	lr
 8012762:	bf00      	nop

08012764 <uxr_get_input_reliable_stream>:
 8012764:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8012768:	428b      	cmp	r3, r1
 801276a:	bf83      	ittte	hi
 801276c:	2318      	movhi	r3, #24
 801276e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012772:	3048      	addhi	r0, #72	@ 0x48
 8012774:	2000      	movls	r0, #0
 8012776:	4770      	bx	lr

08012778 <uxr_output_streams_confirmed>:
 8012778:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801277c:	b183      	cbz	r3, 80127a0 <uxr_output_streams_confirmed+0x28>
 801277e:	b570      	push	{r4, r5, r6, lr}
 8012780:	4606      	mov	r6, r0
 8012782:	f100 0518 	add.w	r5, r0, #24
 8012786:	2400      	movs	r4, #0
 8012788:	e001      	b.n	801278e <uxr_output_streams_confirmed+0x16>
 801278a:	3528      	adds	r5, #40	@ 0x28
 801278c:	b138      	cbz	r0, 801279e <uxr_output_streams_confirmed+0x26>
 801278e:	4628      	mov	r0, r5
 8012790:	f006 f8ee 	bl	8018970 <uxr_is_output_up_to_date>
 8012794:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012798:	3401      	adds	r4, #1
 801279a:	42a3      	cmp	r3, r4
 801279c:	d8f5      	bhi.n	801278a <uxr_output_streams_confirmed+0x12>
 801279e:	bd70      	pop	{r4, r5, r6, pc}
 80127a0:	2001      	movs	r0, #1
 80127a2:	4770      	bx	lr

080127a4 <uxr_buffer_submessage_header>:
 80127a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127a6:	4604      	mov	r4, r0
 80127a8:	460e      	mov	r6, r1
 80127aa:	2104      	movs	r1, #4
 80127ac:	4615      	mov	r5, r2
 80127ae:	461f      	mov	r7, r3
 80127b0:	f7fd fd2a 	bl	8010208 <ucdr_align_to>
 80127b4:	2301      	movs	r3, #1
 80127b6:	ea47 0203 	orr.w	r2, r7, r3
 80127ba:	4631      	mov	r1, r6
 80127bc:	7523      	strb	r3, [r4, #20]
 80127be:	4620      	mov	r0, r4
 80127c0:	462b      	mov	r3, r5
 80127c2:	f000 fa27 	bl	8012c14 <uxr_serialize_submessage_header>
 80127c6:	4620      	mov	r0, r4
 80127c8:	f7fd fd34 	bl	8010234 <ucdr_buffer_remaining>
 80127cc:	42a8      	cmp	r0, r5
 80127ce:	bf34      	ite	cc
 80127d0:	2000      	movcc	r0, #0
 80127d2:	2001      	movcs	r0, #1
 80127d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127d6:	bf00      	nop

080127d8 <uxr_read_submessage_header>:
 80127d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127dc:	4604      	mov	r4, r0
 80127de:	460d      	mov	r5, r1
 80127e0:	2104      	movs	r1, #4
 80127e2:	4616      	mov	r6, r2
 80127e4:	4698      	mov	r8, r3
 80127e6:	f7fd fd0f 	bl	8010208 <ucdr_align_to>
 80127ea:	4620      	mov	r0, r4
 80127ec:	f7fd fd22 	bl	8010234 <ucdr_buffer_remaining>
 80127f0:	2803      	cmp	r0, #3
 80127f2:	bf8c      	ite	hi
 80127f4:	2701      	movhi	r7, #1
 80127f6:	2700      	movls	r7, #0
 80127f8:	d802      	bhi.n	8012800 <uxr_read_submessage_header+0x28>
 80127fa:	4638      	mov	r0, r7
 80127fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012800:	4633      	mov	r3, r6
 8012802:	4642      	mov	r2, r8
 8012804:	4620      	mov	r0, r4
 8012806:	4629      	mov	r1, r5
 8012808:	f000 fa18 	bl	8012c3c <uxr_deserialize_submessage_header>
 801280c:	f898 3000 	ldrb.w	r3, [r8]
 8012810:	f003 0201 	and.w	r2, r3, #1
 8012814:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012818:	f888 3000 	strb.w	r3, [r8]
 801281c:	7522      	strb	r2, [r4, #20]
 801281e:	4638      	mov	r0, r7
 8012820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012824 <uxr_submessage_padding>:
 8012824:	f010 0003 	ands.w	r0, r0, #3
 8012828:	bf18      	it	ne
 801282a:	f1c0 0004 	rsbne	r0, r0, #4
 801282e:	4770      	bx	lr

08012830 <uxr_millis>:
 8012830:	b510      	push	{r4, lr}
 8012832:	b084      	sub	sp, #16
 8012834:	4669      	mov	r1, sp
 8012836:	2001      	movs	r0, #1
 8012838:	f7ef feca 	bl	80025d0 <clock_gettime>
 801283c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012840:	4906      	ldr	r1, [pc, #24]	@ (801285c <uxr_millis+0x2c>)
 8012842:	fba0 0301 	umull	r0, r3, r0, r1
 8012846:	1900      	adds	r0, r0, r4
 8012848:	fb01 3102 	mla	r1, r1, r2, r3
 801284c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012850:	4a03      	ldr	r2, [pc, #12]	@ (8012860 <uxr_millis+0x30>)
 8012852:	2300      	movs	r3, #0
 8012854:	f7ee f91a 	bl	8000a8c <__aeabi_ldivmod>
 8012858:	b004      	add	sp, #16
 801285a:	bd10      	pop	{r4, pc}
 801285c:	3b9aca00 	.word	0x3b9aca00
 8012860:	000f4240 	.word	0x000f4240

08012864 <uxr_nanos>:
 8012864:	b510      	push	{r4, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	4669      	mov	r1, sp
 801286a:	2001      	movs	r0, #1
 801286c:	f7ef feb0 	bl	80025d0 <clock_gettime>
 8012870:	4a06      	ldr	r2, [pc, #24]	@ (801288c <uxr_nanos+0x28>)
 8012872:	9800      	ldr	r0, [sp, #0]
 8012874:	9902      	ldr	r1, [sp, #8]
 8012876:	9c01      	ldr	r4, [sp, #4]
 8012878:	fba0 0302 	umull	r0, r3, r0, r2
 801287c:	1840      	adds	r0, r0, r1
 801287e:	fb02 3304 	mla	r3, r2, r4, r3
 8012882:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8012886:	b004      	add	sp, #16
 8012888:	bd10      	pop	{r4, pc}
 801288a:	bf00      	nop
 801288c:	3b9aca00 	.word	0x3b9aca00

08012890 <on_full_output_buffer_fragmented>:
 8012890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012894:	460c      	mov	r4, r1
 8012896:	b08a      	sub	sp, #40	@ 0x28
 8012898:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801289c:	4606      	mov	r6, r0
 801289e:	f104 0008 	add.w	r0, r4, #8
 80128a2:	f7ff ff4b 	bl	801273c <uxr_get_output_reliable_stream>
 80128a6:	4605      	mov	r5, r0
 80128a8:	f006 f86c 	bl	8018984 <get_available_free_slots>
 80128ac:	b968      	cbnz	r0, 80128ca <on_full_output_buffer_fragmented+0x3a>
 80128ae:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80128b2:	4620      	mov	r0, r4
 80128b4:	4798      	blx	r3
 80128b6:	b918      	cbnz	r0, 80128c0 <on_full_output_buffer_fragmented+0x30>
 80128b8:	2001      	movs	r0, #1
 80128ba:	b00a      	add	sp, #40	@ 0x28
 80128bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128c0:	4628      	mov	r0, r5
 80128c2:	f006 f85f 	bl	8018984 <get_available_free_slots>
 80128c6:	2800      	cmp	r0, #0
 80128c8:	d0f6      	beq.n	80128b8 <on_full_output_buffer_fragmented+0x28>
 80128ca:	8929      	ldrh	r1, [r5, #8]
 80128cc:	89eb      	ldrh	r3, [r5, #14]
 80128ce:	7b28      	ldrb	r0, [r5, #12]
 80128d0:	686a      	ldr	r2, [r5, #4]
 80128d2:	fbb2 f8f1 	udiv	r8, r2, r1
 80128d6:	fbb3 f2f1 	udiv	r2, r3, r1
 80128da:	fb01 3112 	mls	r1, r1, r2, r3
 80128de:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 80128e2:	b289      	uxth	r1, r1
 80128e4:	fb08 f101 	mul.w	r1, r8, r1
 80128e8:	30fc      	adds	r0, #252	@ 0xfc
 80128ea:	f1a8 0804 	sub.w	r8, r8, #4
 80128ee:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80128f2:	4440      	add	r0, r8
 80128f4:	b287      	uxth	r7, r0
 80128f6:	1bdb      	subs	r3, r3, r7
 80128f8:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80128fc:	682b      	ldr	r3, [r5, #0]
 80128fe:	3104      	adds	r1, #4
 8012900:	4419      	add	r1, r3
 8012902:	4642      	mov	r2, r8
 8012904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012908:	9300      	str	r3, [sp, #0]
 801290a:	a802      	add	r0, sp, #8
 801290c:	2300      	movs	r3, #0
 801290e:	f7fd fc4f 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 8012912:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012916:	f102 0308 	add.w	r3, r2, #8
 801291a:	4543      	cmp	r3, r8
 801291c:	d928      	bls.n	8012970 <on_full_output_buffer_fragmented+0xe0>
 801291e:	463a      	mov	r2, r7
 8012920:	2300      	movs	r3, #0
 8012922:	210d      	movs	r1, #13
 8012924:	a802      	add	r0, sp, #8
 8012926:	f7ff ff3d 	bl	80127a4 <uxr_buffer_submessage_header>
 801292a:	8929      	ldrh	r1, [r5, #8]
 801292c:	89eb      	ldrh	r3, [r5, #14]
 801292e:	fbb3 f2f1 	udiv	r2, r3, r1
 8012932:	fb01 3312 	mls	r3, r1, r2, r3
 8012936:	b29b      	uxth	r3, r3
 8012938:	686a      	ldr	r2, [r5, #4]
 801293a:	fbb2 f2f1 	udiv	r2, r2, r1
 801293e:	fb02 f303 	mul.w	r3, r2, r3
 8012942:	682a      	ldr	r2, [r5, #0]
 8012944:	f842 8003 	str.w	r8, [r2, r3]
 8012948:	89e8      	ldrh	r0, [r5, #14]
 801294a:	2101      	movs	r1, #1
 801294c:	f006 f83a 	bl	80189c4 <uxr_seq_num_add>
 8012950:	9904      	ldr	r1, [sp, #16]
 8012952:	9a03      	ldr	r2, [sp, #12]
 8012954:	81e8      	strh	r0, [r5, #14]
 8012956:	1a52      	subs	r2, r2, r1
 8012958:	4630      	mov	r0, r6
 801295a:	f7fd fc3b 	bl	80101d4 <ucdr_init_buffer>
 801295e:	4630      	mov	r0, r6
 8012960:	490f      	ldr	r1, [pc, #60]	@ (80129a0 <on_full_output_buffer_fragmented+0x110>)
 8012962:	4622      	mov	r2, r4
 8012964:	f7fd fc0a 	bl	801017c <ucdr_set_on_full_buffer_callback>
 8012968:	2000      	movs	r0, #0
 801296a:	b00a      	add	sp, #40	@ 0x28
 801296c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012970:	b292      	uxth	r2, r2
 8012972:	2302      	movs	r3, #2
 8012974:	210d      	movs	r1, #13
 8012976:	a802      	add	r0, sp, #8
 8012978:	f7ff ff14 	bl	80127a4 <uxr_buffer_submessage_header>
 801297c:	8928      	ldrh	r0, [r5, #8]
 801297e:	89eb      	ldrh	r3, [r5, #14]
 8012980:	fbb3 f1f0 	udiv	r1, r3, r0
 8012984:	fb00 3311 	mls	r3, r0, r1, r3
 8012988:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801298c:	6869      	ldr	r1, [r5, #4]
 801298e:	fbb1 f1f0 	udiv	r1, r1, r0
 8012992:	b29b      	uxth	r3, r3
 8012994:	fb01 f303 	mul.w	r3, r1, r3
 8012998:	6829      	ldr	r1, [r5, #0]
 801299a:	3208      	adds	r2, #8
 801299c:	50ca      	str	r2, [r1, r3]
 801299e:	e7d3      	b.n	8012948 <on_full_output_buffer_fragmented+0xb8>
 80129a0:	08012891 	.word	0x08012891

080129a4 <uxr_prepare_output_stream>:
 80129a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129a6:	b087      	sub	sp, #28
 80129a8:	2707      	movs	r7, #7
 80129aa:	9202      	str	r2, [sp, #8]
 80129ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80129ae:	9103      	str	r1, [sp, #12]
 80129b0:	2500      	movs	r5, #0
 80129b2:	3204      	adds	r2, #4
 80129b4:	e9cd 7500 	strd	r7, r5, [sp]
 80129b8:	461c      	mov	r4, r3
 80129ba:	4606      	mov	r6, r0
 80129bc:	f7fe ffc2 	bl	8011944 <uxr_prepare_stream_to_write_submessage>
 80129c0:	f080 0201 	eor.w	r2, r0, #1
 80129c4:	b2d2      	uxtb	r2, r2
 80129c6:	75a2      	strb	r2, [r4, #22]
 80129c8:	b112      	cbz	r2, 80129d0 <uxr_prepare_output_stream+0x2c>
 80129ca:	4628      	mov	r0, r5
 80129cc:	b007      	add	sp, #28
 80129ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129d0:	aa05      	add	r2, sp, #20
 80129d2:	9902      	ldr	r1, [sp, #8]
 80129d4:	4630      	mov	r0, r6
 80129d6:	f7ff f8eb 	bl	8011bb0 <uxr_init_base_object_request>
 80129da:	a905      	add	r1, sp, #20
 80129dc:	4605      	mov	r5, r0
 80129de:	4620      	mov	r0, r4
 80129e0:	f000 ffa0 	bl	8013924 <uxr_serialize_WRITE_DATA_Payload_Data>
 80129e4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80129e8:	69a6      	ldr	r6, [r4, #24]
 80129ea:	69e7      	ldr	r7, [r4, #28]
 80129ec:	1a52      	subs	r2, r2, r1
 80129ee:	4620      	mov	r0, r4
 80129f0:	f7fd fbf0 	bl	80101d4 <ucdr_init_buffer>
 80129f4:	4620      	mov	r0, r4
 80129f6:	463a      	mov	r2, r7
 80129f8:	4631      	mov	r1, r6
 80129fa:	f7fd fbbf 	bl	801017c <ucdr_set_on_full_buffer_callback>
 80129fe:	4628      	mov	r0, r5
 8012a00:	b007      	add	sp, #28
 8012a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012a04 <uxr_prepare_output_stream_fragmented>:
 8012a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a08:	b091      	sub	sp, #68	@ 0x44
 8012a0a:	4605      	mov	r5, r0
 8012a0c:	9105      	str	r1, [sp, #20]
 8012a0e:	3008      	adds	r0, #8
 8012a10:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012a14:	461e      	mov	r6, r3
 8012a16:	9204      	str	r2, [sp, #16]
 8012a18:	f7ff fe90 	bl	801273c <uxr_get_output_reliable_stream>
 8012a1c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012a20:	2b01      	cmp	r3, #1
 8012a22:	f000 8091 	beq.w	8012b48 <uxr_prepare_output_stream_fragmented+0x144>
 8012a26:	4604      	mov	r4, r0
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	f000 808d 	beq.w	8012b48 <uxr_prepare_output_stream_fragmented+0x144>
 8012a2e:	f005 ffa9 	bl	8018984 <get_available_free_slots>
 8012a32:	2800      	cmp	r0, #0
 8012a34:	f000 8083 	beq.w	8012b3e <uxr_prepare_output_stream_fragmented+0x13a>
 8012a38:	8922      	ldrh	r2, [r4, #8]
 8012a3a:	89e7      	ldrh	r7, [r4, #14]
 8012a3c:	fbb7 f9f2 	udiv	r9, r7, r2
 8012a40:	fb02 7919 	mls	r9, r2, r9, r7
 8012a44:	fa1f f989 	uxth.w	r9, r9
 8012a48:	6863      	ldr	r3, [r4, #4]
 8012a4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8012a4e:	6823      	ldr	r3, [r4, #0]
 8012a50:	9203      	str	r2, [sp, #12]
 8012a52:	fb02 f909 	mul.w	r9, r2, r9
 8012a56:	f109 0904 	add.w	r9, r9, #4
 8012a5a:	4499      	add	r9, r3
 8012a5c:	7b23      	ldrb	r3, [r4, #12]
 8012a5e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012a62:	4543      	cmp	r3, r8
 8012a64:	f1a2 0b04 	sub.w	fp, r2, #4
 8012a68:	d37a      	bcc.n	8012b60 <uxr_prepare_output_stream_fragmented+0x15c>
 8012a6a:	f1ab 0a04 	sub.w	sl, fp, #4
 8012a6e:	ebaa 0a03 	sub.w	sl, sl, r3
 8012a72:	465a      	mov	r2, fp
 8012a74:	2300      	movs	r3, #0
 8012a76:	4649      	mov	r1, r9
 8012a78:	a808      	add	r0, sp, #32
 8012a7a:	f8cd 8000 	str.w	r8, [sp]
 8012a7e:	f7fd fb97 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 8012a82:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012a84:	fa1f fa8a 	uxth.w	sl, sl
 8012a88:	4652      	mov	r2, sl
 8012a8a:	f103 0a08 	add.w	sl, r3, #8
 8012a8e:	45da      	cmp	sl, fp
 8012a90:	bf34      	ite	cc
 8012a92:	2302      	movcc	r3, #2
 8012a94:	2300      	movcs	r3, #0
 8012a96:	210d      	movs	r1, #13
 8012a98:	a808      	add	r0, sp, #32
 8012a9a:	f7ff fe83 	bl	80127a4 <uxr_buffer_submessage_header>
 8012a9e:	8921      	ldrh	r1, [r4, #8]
 8012aa0:	fbb7 f2f1 	udiv	r2, r7, r1
 8012aa4:	fb01 7212 	mls	r2, r1, r2, r7
 8012aa8:	b292      	uxth	r2, r2
 8012aaa:	6863      	ldr	r3, [r4, #4]
 8012aac:	fbb3 f3f1 	udiv	r3, r3, r1
 8012ab0:	fb02 f303 	mul.w	r3, r2, r3
 8012ab4:	6822      	ldr	r2, [r4, #0]
 8012ab6:	4638      	mov	r0, r7
 8012ab8:	f842 b003 	str.w	fp, [r2, r3]
 8012abc:	2101      	movs	r1, #1
 8012abe:	f005 ff81 	bl	80189c4 <uxr_seq_num_add>
 8012ac2:	9b03      	ldr	r3, [sp, #12]
 8012ac4:	f108 0104 	add.w	r1, r8, #4
 8012ac8:	f1a3 0208 	sub.w	r2, r3, #8
 8012acc:	eba2 0208 	sub.w	r2, r2, r8
 8012ad0:	4449      	add	r1, r9
 8012ad2:	4607      	mov	r7, r0
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	f7fd fb7d 	bl	80101d4 <ucdr_init_buffer>
 8012ada:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012adc:	81e7      	strh	r7, [r4, #14]
 8012ade:	1d1a      	adds	r2, r3, #4
 8012ae0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012ae4:	bf28      	it	cs
 8012ae6:	2200      	movcs	r2, #0
 8012ae8:	2300      	movs	r3, #0
 8012aea:	b292      	uxth	r2, r2
 8012aec:	2107      	movs	r1, #7
 8012aee:	4630      	mov	r0, r6
 8012af0:	f7ff fe58 	bl	80127a4 <uxr_buffer_submessage_header>
 8012af4:	9904      	ldr	r1, [sp, #16]
 8012af6:	aa07      	add	r2, sp, #28
 8012af8:	4628      	mov	r0, r5
 8012afa:	f7ff f859 	bl	8011bb0 <uxr_init_base_object_request>
 8012afe:	4604      	mov	r4, r0
 8012b00:	b318      	cbz	r0, 8012b4a <uxr_prepare_output_stream_fragmented+0x146>
 8012b02:	a907      	add	r1, sp, #28
 8012b04:	4630      	mov	r0, r6
 8012b06:	f000 ff0d 	bl	8013924 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012b0a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012b0e:	4630      	mov	r0, r6
 8012b10:	1a52      	subs	r2, r2, r1
 8012b12:	f7fd fb5f 	bl	80101d4 <ucdr_init_buffer>
 8012b16:	9b05      	ldr	r3, [sp, #20]
 8012b18:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012b1c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012b1e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012b22:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012b24:	491b      	ldr	r1, [pc, #108]	@ (8012b94 <uxr_prepare_output_stream_fragmented+0x190>)
 8012b26:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012b30:	462a      	mov	r2, r5
 8012b32:	f7fd fb23 	bl	801017c <ucdr_set_on_full_buffer_callback>
 8012b36:	4620      	mov	r0, r4
 8012b38:	b011      	add	sp, #68	@ 0x44
 8012b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b3e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8012b40:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012b42:	4628      	mov	r0, r5
 8012b44:	4798      	blx	r3
 8012b46:	b920      	cbnz	r0, 8012b52 <uxr_prepare_output_stream_fragmented+0x14e>
 8012b48:	2400      	movs	r4, #0
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	b011      	add	sp, #68	@ 0x44
 8012b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b52:	4620      	mov	r0, r4
 8012b54:	f005 ff16 	bl	8018984 <get_available_free_slots>
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	f47f af6d 	bne.w	8012a38 <uxr_prepare_output_stream_fragmented+0x34>
 8012b5e:	e7f3      	b.n	8012b48 <uxr_prepare_output_stream_fragmented+0x144>
 8012b60:	4638      	mov	r0, r7
 8012b62:	2101      	movs	r1, #1
 8012b64:	f005 ff2e 	bl	80189c4 <uxr_seq_num_add>
 8012b68:	8921      	ldrh	r1, [r4, #8]
 8012b6a:	fbb0 f2f1 	udiv	r2, r0, r1
 8012b6e:	fb01 0912 	mls	r9, r1, r2, r0
 8012b72:	fa1f f289 	uxth.w	r2, r9
 8012b76:	6863      	ldr	r3, [r4, #4]
 8012b78:	fbb3 f9f1 	udiv	r9, r3, r1
 8012b7c:	6823      	ldr	r3, [r4, #0]
 8012b7e:	fb02 f909 	mul.w	r9, r2, r9
 8012b82:	f109 0904 	add.w	r9, r9, #4
 8012b86:	4499      	add	r9, r3
 8012b88:	4607      	mov	r7, r0
 8012b8a:	7b23      	ldrb	r3, [r4, #12]
 8012b8c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012b90:	e76b      	b.n	8012a6a <uxr_prepare_output_stream_fragmented+0x66>
 8012b92:	bf00      	nop
 8012b94:	08012891 	.word	0x08012891

08012b98 <uxr_serialize_message_header>:
 8012b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	4616      	mov	r6, r2
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	9301      	str	r3, [sp, #4]
 8012ba2:	460d      	mov	r5, r1
 8012ba4:	9f08      	ldr	r7, [sp, #32]
 8012ba6:	f7fc f9c9 	bl	800ef3c <ucdr_serialize_uint8_t>
 8012baa:	4631      	mov	r1, r6
 8012bac:	4620      	mov	r0, r4
 8012bae:	f7fc f9c5 	bl	800ef3c <ucdr_serialize_uint8_t>
 8012bb2:	9a01      	ldr	r2, [sp, #4]
 8012bb4:	2101      	movs	r1, #1
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	f7fc fa6c 	bl	800f094 <ucdr_serialize_endian_uint16_t>
 8012bbc:	062b      	lsls	r3, r5, #24
 8012bbe:	d501      	bpl.n	8012bc4 <uxr_serialize_message_header+0x2c>
 8012bc0:	b003      	add	sp, #12
 8012bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bc4:	2204      	movs	r2, #4
 8012bc6:	4639      	mov	r1, r7
 8012bc8:	4620      	mov	r0, r4
 8012bca:	b003      	add	sp, #12
 8012bcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012bd0:	f005 b826 	b.w	8017c20 <ucdr_serialize_array_uint8_t>

08012bd4 <uxr_deserialize_message_header>:
 8012bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bd6:	b083      	sub	sp, #12
 8012bd8:	4616      	mov	r6, r2
 8012bda:	4604      	mov	r4, r0
 8012bdc:	9301      	str	r3, [sp, #4]
 8012bde:	460d      	mov	r5, r1
 8012be0:	9f08      	ldr	r7, [sp, #32]
 8012be2:	f7fc f9c1 	bl	800ef68 <ucdr_deserialize_uint8_t>
 8012be6:	4631      	mov	r1, r6
 8012be8:	4620      	mov	r0, r4
 8012bea:	f7fc f9bd 	bl	800ef68 <ucdr_deserialize_uint8_t>
 8012bee:	9a01      	ldr	r2, [sp, #4]
 8012bf0:	2101      	movs	r1, #1
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	f7fc fb42 	bl	800f27c <ucdr_deserialize_endian_uint16_t>
 8012bf8:	f995 3000 	ldrsb.w	r3, [r5]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	da01      	bge.n	8012c04 <uxr_deserialize_message_header+0x30>
 8012c00:	b003      	add	sp, #12
 8012c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c04:	2204      	movs	r2, #4
 8012c06:	4639      	mov	r1, r7
 8012c08:	4620      	mov	r0, r4
 8012c0a:	b003      	add	sp, #12
 8012c0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012c10:	f005 b86a 	b.w	8017ce8 <ucdr_deserialize_array_uint8_t>

08012c14 <uxr_serialize_submessage_header>:
 8012c14:	b530      	push	{r4, r5, lr}
 8012c16:	b083      	sub	sp, #12
 8012c18:	4615      	mov	r5, r2
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	9301      	str	r3, [sp, #4]
 8012c1e:	f7fc f98d 	bl	800ef3c <ucdr_serialize_uint8_t>
 8012c22:	4629      	mov	r1, r5
 8012c24:	4620      	mov	r0, r4
 8012c26:	f7fc f989 	bl	800ef3c <ucdr_serialize_uint8_t>
 8012c2a:	9a01      	ldr	r2, [sp, #4]
 8012c2c:	2101      	movs	r1, #1
 8012c2e:	4620      	mov	r0, r4
 8012c30:	b003      	add	sp, #12
 8012c32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c36:	f7fc ba2d 	b.w	800f094 <ucdr_serialize_endian_uint16_t>
 8012c3a:	bf00      	nop

08012c3c <uxr_deserialize_submessage_header>:
 8012c3c:	b530      	push	{r4, r5, lr}
 8012c3e:	b083      	sub	sp, #12
 8012c40:	4615      	mov	r5, r2
 8012c42:	4604      	mov	r4, r0
 8012c44:	9301      	str	r3, [sp, #4]
 8012c46:	f7fc f98f 	bl	800ef68 <ucdr_deserialize_uint8_t>
 8012c4a:	4629      	mov	r1, r5
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f7fc f98b 	bl	800ef68 <ucdr_deserialize_uint8_t>
 8012c52:	9a01      	ldr	r2, [sp, #4]
 8012c54:	2101      	movs	r1, #1
 8012c56:	4620      	mov	r0, r4
 8012c58:	b003      	add	sp, #12
 8012c5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c5e:	f7fc bb0d 	b.w	800f27c <ucdr_deserialize_endian_uint16_t>
 8012c62:	bf00      	nop

08012c64 <uxr_serialize_CLIENT_Representation>:
 8012c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c68:	2204      	movs	r2, #4
 8012c6a:	460e      	mov	r6, r1
 8012c6c:	4605      	mov	r5, r0
 8012c6e:	f004 ffd7 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8012c72:	2202      	movs	r2, #2
 8012c74:	4607      	mov	r7, r0
 8012c76:	1d31      	adds	r1, r6, #4
 8012c78:	4628      	mov	r0, r5
 8012c7a:	f004 ffd1 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8012c7e:	4038      	ands	r0, r7
 8012c80:	2202      	movs	r2, #2
 8012c82:	1db1      	adds	r1, r6, #6
 8012c84:	b2c7      	uxtb	r7, r0
 8012c86:	4628      	mov	r0, r5
 8012c88:	f004 ffca 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8012c8c:	2204      	movs	r2, #4
 8012c8e:	4007      	ands	r7, r0
 8012c90:	f106 0108 	add.w	r1, r6, #8
 8012c94:	4628      	mov	r0, r5
 8012c96:	f004 ffc3 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8012c9a:	7b31      	ldrb	r1, [r6, #12]
 8012c9c:	4007      	ands	r7, r0
 8012c9e:	4628      	mov	r0, r5
 8012ca0:	f7fc f94c 	bl	800ef3c <ucdr_serialize_uint8_t>
 8012ca4:	7b71      	ldrb	r1, [r6, #13]
 8012ca6:	4007      	ands	r7, r0
 8012ca8:	4628      	mov	r0, r5
 8012caa:	f7fc f919 	bl	800eee0 <ucdr_serialize_bool>
 8012cae:	7b73      	ldrb	r3, [r6, #13]
 8012cb0:	ea07 0800 	and.w	r8, r7, r0
 8012cb4:	b93b      	cbnz	r3, 8012cc6 <uxr_serialize_CLIENT_Representation+0x62>
 8012cb6:	8bb1      	ldrh	r1, [r6, #28]
 8012cb8:	4628      	mov	r0, r5
 8012cba:	f7fc f96b 	bl	800ef94 <ucdr_serialize_uint16_t>
 8012cbe:	ea08 0000 	and.w	r0, r8, r0
 8012cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cc6:	6931      	ldr	r1, [r6, #16]
 8012cc8:	4628      	mov	r0, r5
 8012cca:	f7fc fb4d 	bl	800f368 <ucdr_serialize_uint32_t>
 8012cce:	6933      	ldr	r3, [r6, #16]
 8012cd0:	b1e3      	cbz	r3, 8012d0c <uxr_serialize_CLIENT_Representation+0xa8>
 8012cd2:	b1c0      	cbz	r0, 8012d06 <uxr_serialize_CLIENT_Representation+0xa2>
 8012cd4:	4637      	mov	r7, r6
 8012cd6:	f04f 0900 	mov.w	r9, #0
 8012cda:	e001      	b.n	8012ce0 <uxr_serialize_CLIENT_Representation+0x7c>
 8012cdc:	3708      	adds	r7, #8
 8012cde:	b194      	cbz	r4, 8012d06 <uxr_serialize_CLIENT_Representation+0xa2>
 8012ce0:	6979      	ldr	r1, [r7, #20]
 8012ce2:	4628      	mov	r0, r5
 8012ce4:	f005 f90e 	bl	8017f04 <ucdr_serialize_string>
 8012ce8:	69b9      	ldr	r1, [r7, #24]
 8012cea:	4604      	mov	r4, r0
 8012cec:	4628      	mov	r0, r5
 8012cee:	f005 f909 	bl	8017f04 <ucdr_serialize_string>
 8012cf2:	6933      	ldr	r3, [r6, #16]
 8012cf4:	f109 0901 	add.w	r9, r9, #1
 8012cf8:	4004      	ands	r4, r0
 8012cfa:	4599      	cmp	r9, r3
 8012cfc:	b2e4      	uxtb	r4, r4
 8012cfe:	d3ed      	bcc.n	8012cdc <uxr_serialize_CLIENT_Representation+0x78>
 8012d00:	ea08 0804 	and.w	r8, r8, r4
 8012d04:	e7d7      	b.n	8012cb6 <uxr_serialize_CLIENT_Representation+0x52>
 8012d06:	f04f 0800 	mov.w	r8, #0
 8012d0a:	e7d4      	b.n	8012cb6 <uxr_serialize_CLIENT_Representation+0x52>
 8012d0c:	ea08 0800 	and.w	r8, r8, r0
 8012d10:	e7d1      	b.n	8012cb6 <uxr_serialize_CLIENT_Representation+0x52>
 8012d12:	bf00      	nop

08012d14 <uxr_deserialize_CLIENT_Representation>:
 8012d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d18:	2204      	movs	r2, #4
 8012d1a:	460c      	mov	r4, r1
 8012d1c:	4605      	mov	r5, r0
 8012d1e:	f004 ffe3 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8012d22:	2202      	movs	r2, #2
 8012d24:	4607      	mov	r7, r0
 8012d26:	1d21      	adds	r1, r4, #4
 8012d28:	4628      	mov	r0, r5
 8012d2a:	f004 ffdd 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8012d2e:	4038      	ands	r0, r7
 8012d30:	2202      	movs	r2, #2
 8012d32:	1da1      	adds	r1, r4, #6
 8012d34:	b2c6      	uxtb	r6, r0
 8012d36:	4628      	mov	r0, r5
 8012d38:	f004 ffd6 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8012d3c:	2204      	movs	r2, #4
 8012d3e:	4006      	ands	r6, r0
 8012d40:	f104 0108 	add.w	r1, r4, #8
 8012d44:	4628      	mov	r0, r5
 8012d46:	f004 ffcf 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8012d4a:	f104 010c 	add.w	r1, r4, #12
 8012d4e:	4006      	ands	r6, r0
 8012d50:	4628      	mov	r0, r5
 8012d52:	f7fc f909 	bl	800ef68 <ucdr_deserialize_uint8_t>
 8012d56:	f104 010d 	add.w	r1, r4, #13
 8012d5a:	ea06 0700 	and.w	r7, r6, r0
 8012d5e:	4628      	mov	r0, r5
 8012d60:	f7fc f8d4 	bl	800ef0c <ucdr_deserialize_bool>
 8012d64:	7b63      	ldrb	r3, [r4, #13]
 8012d66:	4007      	ands	r7, r0
 8012d68:	b93b      	cbnz	r3, 8012d7a <uxr_deserialize_CLIENT_Representation+0x66>
 8012d6a:	f104 011c 	add.w	r1, r4, #28
 8012d6e:	4628      	mov	r0, r5
 8012d70:	f7fc fa10 	bl	800f194 <ucdr_deserialize_uint16_t>
 8012d74:	4038      	ands	r0, r7
 8012d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d7a:	f104 0110 	add.w	r1, r4, #16
 8012d7e:	4628      	mov	r0, r5
 8012d80:	f7fc fc22 	bl	800f5c8 <ucdr_deserialize_uint32_t>
 8012d84:	6923      	ldr	r3, [r4, #16]
 8012d86:	2b01      	cmp	r3, #1
 8012d88:	d903      	bls.n	8012d92 <uxr_deserialize_CLIENT_Representation+0x7e>
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	75ab      	strb	r3, [r5, #22]
 8012d8e:	2700      	movs	r7, #0
 8012d90:	e7eb      	b.n	8012d6a <uxr_deserialize_CLIENT_Representation+0x56>
 8012d92:	b30b      	cbz	r3, 8012dd8 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012d94:	2800      	cmp	r0, #0
 8012d96:	d0fa      	beq.n	8012d8e <uxr_deserialize_CLIENT_Representation+0x7a>
 8012d98:	46a0      	mov	r8, r4
 8012d9a:	f04f 0900 	mov.w	r9, #0
 8012d9e:	e001      	b.n	8012da4 <uxr_deserialize_CLIENT_Representation+0x90>
 8012da0:	2e00      	cmp	r6, #0
 8012da2:	d0f4      	beq.n	8012d8e <uxr_deserialize_CLIENT_Representation+0x7a>
 8012da4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012da8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012dac:	4628      	mov	r0, r5
 8012dae:	f005 f8b9 	bl	8017f24 <ucdr_deserialize_string>
 8012db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012db6:	4606      	mov	r6, r0
 8012db8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012dbc:	4628      	mov	r0, r5
 8012dbe:	f005 f8b1 	bl	8017f24 <ucdr_deserialize_string>
 8012dc2:	6923      	ldr	r3, [r4, #16]
 8012dc4:	f109 0901 	add.w	r9, r9, #1
 8012dc8:	4006      	ands	r6, r0
 8012dca:	4599      	cmp	r9, r3
 8012dcc:	f108 0808 	add.w	r8, r8, #8
 8012dd0:	b2f6      	uxtb	r6, r6
 8012dd2:	d3e5      	bcc.n	8012da0 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012dd4:	4037      	ands	r7, r6
 8012dd6:	e7c8      	b.n	8012d6a <uxr_deserialize_CLIENT_Representation+0x56>
 8012dd8:	4007      	ands	r7, r0
 8012dda:	e7c6      	b.n	8012d6a <uxr_deserialize_CLIENT_Representation+0x56>

08012ddc <uxr_serialize_AGENT_Representation>:
 8012ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012de0:	2204      	movs	r2, #4
 8012de2:	460f      	mov	r7, r1
 8012de4:	4605      	mov	r5, r0
 8012de6:	f004 ff1b 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8012dea:	2202      	movs	r2, #2
 8012dec:	4604      	mov	r4, r0
 8012dee:	1d39      	adds	r1, r7, #4
 8012df0:	4628      	mov	r0, r5
 8012df2:	f004 ff15 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8012df6:	4020      	ands	r0, r4
 8012df8:	2202      	movs	r2, #2
 8012dfa:	1db9      	adds	r1, r7, #6
 8012dfc:	b2c4      	uxtb	r4, r0
 8012dfe:	4628      	mov	r0, r5
 8012e00:	f004 ff0e 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8012e04:	7a39      	ldrb	r1, [r7, #8]
 8012e06:	4004      	ands	r4, r0
 8012e08:	4628      	mov	r0, r5
 8012e0a:	f7fc f869 	bl	800eee0 <ucdr_serialize_bool>
 8012e0e:	7a3b      	ldrb	r3, [r7, #8]
 8012e10:	ea00 0804 	and.w	r8, r0, r4
 8012e14:	b913      	cbnz	r3, 8012e1c <uxr_serialize_AGENT_Representation+0x40>
 8012e16:	4640      	mov	r0, r8
 8012e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e1c:	68f9      	ldr	r1, [r7, #12]
 8012e1e:	4628      	mov	r0, r5
 8012e20:	f7fc faa2 	bl	800f368 <ucdr_serialize_uint32_t>
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	b303      	cbz	r3, 8012e6a <uxr_serialize_AGENT_Representation+0x8e>
 8012e28:	b1d0      	cbz	r0, 8012e60 <uxr_serialize_AGENT_Representation+0x84>
 8012e2a:	463e      	mov	r6, r7
 8012e2c:	f04f 0900 	mov.w	r9, #0
 8012e30:	e001      	b.n	8012e36 <uxr_serialize_AGENT_Representation+0x5a>
 8012e32:	3608      	adds	r6, #8
 8012e34:	b1a4      	cbz	r4, 8012e60 <uxr_serialize_AGENT_Representation+0x84>
 8012e36:	6931      	ldr	r1, [r6, #16]
 8012e38:	4628      	mov	r0, r5
 8012e3a:	f005 f863 	bl	8017f04 <ucdr_serialize_string>
 8012e3e:	6971      	ldr	r1, [r6, #20]
 8012e40:	4604      	mov	r4, r0
 8012e42:	4628      	mov	r0, r5
 8012e44:	f005 f85e 	bl	8017f04 <ucdr_serialize_string>
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	f109 0901 	add.w	r9, r9, #1
 8012e4e:	4004      	ands	r4, r0
 8012e50:	4599      	cmp	r9, r3
 8012e52:	b2e4      	uxtb	r4, r4
 8012e54:	d3ed      	bcc.n	8012e32 <uxr_serialize_AGENT_Representation+0x56>
 8012e56:	ea08 0804 	and.w	r8, r8, r4
 8012e5a:	4640      	mov	r0, r8
 8012e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e60:	f04f 0800 	mov.w	r8, #0
 8012e64:	4640      	mov	r0, r8
 8012e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e6a:	ea08 0800 	and.w	r8, r8, r0
 8012e6e:	e7d2      	b.n	8012e16 <uxr_serialize_AGENT_Representation+0x3a>

08012e70 <uxr_serialize_DATAWRITER_Representation>:
 8012e70:	b570      	push	{r4, r5, r6, lr}
 8012e72:	460d      	mov	r5, r1
 8012e74:	7809      	ldrb	r1, [r1, #0]
 8012e76:	4606      	mov	r6, r0
 8012e78:	f7fc f860 	bl	800ef3c <ucdr_serialize_uint8_t>
 8012e7c:	4604      	mov	r4, r0
 8012e7e:	b130      	cbz	r0, 8012e8e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012e80:	782b      	ldrb	r3, [r5, #0]
 8012e82:	2b02      	cmp	r3, #2
 8012e84:	d00c      	beq.n	8012ea0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012e86:	2b03      	cmp	r3, #3
 8012e88:	d010      	beq.n	8012eac <uxr_serialize_DATAWRITER_Representation+0x3c>
 8012e8a:	2b01      	cmp	r3, #1
 8012e8c:	d008      	beq.n	8012ea0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012e8e:	2202      	movs	r2, #2
 8012e90:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012e94:	4630      	mov	r0, r6
 8012e96:	f004 fec3 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8012e9a:	4020      	ands	r0, r4
 8012e9c:	b2c0      	uxtb	r0, r0
 8012e9e:	bd70      	pop	{r4, r5, r6, pc}
 8012ea0:	6869      	ldr	r1, [r5, #4]
 8012ea2:	4630      	mov	r0, r6
 8012ea4:	f005 f82e 	bl	8017f04 <ucdr_serialize_string>
 8012ea8:	4604      	mov	r4, r0
 8012eaa:	e7f0      	b.n	8012e8e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012eac:	4629      	mov	r1, r5
 8012eae:	4630      	mov	r0, r6
 8012eb0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012eb4:	3104      	adds	r1, #4
 8012eb6:	f7fd fa29 	bl	801030c <ucdr_serialize_sequence_uint8_t>
 8012eba:	4604      	mov	r4, r0
 8012ebc:	e7e7      	b.n	8012e8e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012ebe:	bf00      	nop

08012ec0 <uxr_serialize_ObjectVariant.part.0>:
 8012ec0:	b570      	push	{r4, r5, r6, lr}
 8012ec2:	780b      	ldrb	r3, [r1, #0]
 8012ec4:	3b01      	subs	r3, #1
 8012ec6:	460c      	mov	r4, r1
 8012ec8:	4605      	mov	r5, r0
 8012eca:	2b0d      	cmp	r3, #13
 8012ecc:	d854      	bhi.n	8012f78 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012ece:	e8df f003 	tbb	[pc, r3]
 8012ed2:	0730      	.short	0x0730
 8012ed4:	07071b1b 	.word	0x07071b1b
 8012ed8:	0c530707 	.word	0x0c530707
 8012edc:	494e0c0c 	.word	0x494e0c0c
 8012ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ee4:	3104      	adds	r1, #4
 8012ee6:	f7ff bfc3 	b.w	8012e70 <uxr_serialize_DATAWRITER_Representation>
 8012eea:	7909      	ldrb	r1, [r1, #4]
 8012eec:	f7fc f826 	bl	800ef3c <ucdr_serialize_uint8_t>
 8012ef0:	b1e8      	cbz	r0, 8012f2e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8012ef2:	7923      	ldrb	r3, [r4, #4]
 8012ef4:	2b01      	cmp	r3, #1
 8012ef6:	d001      	beq.n	8012efc <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012ef8:	2b02      	cmp	r3, #2
 8012efa:	d13d      	bne.n	8012f78 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012efc:	68a1      	ldr	r1, [r4, #8]
 8012efe:	4628      	mov	r0, r5
 8012f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f04:	f004 bffe 	b.w	8017f04 <ucdr_serialize_string>
 8012f08:	7909      	ldrb	r1, [r1, #4]
 8012f0a:	f7fc f817 	bl	800ef3c <ucdr_serialize_uint8_t>
 8012f0e:	4606      	mov	r6, r0
 8012f10:	b120      	cbz	r0, 8012f1c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012f12:	7923      	ldrb	r3, [r4, #4]
 8012f14:	2b02      	cmp	r3, #2
 8012f16:	d039      	beq.n	8012f8c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012f18:	2b03      	cmp	r3, #3
 8012f1a:	d02f      	beq.n	8012f7c <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012f1c:	2202      	movs	r2, #2
 8012f1e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8012f22:	4628      	mov	r0, r5
 8012f24:	f004 fe7c 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8012f28:	4030      	ands	r0, r6
 8012f2a:	b2c0      	uxtb	r0, r0
 8012f2c:	bd70      	pop	{r4, r5, r6, pc}
 8012f2e:	2000      	movs	r0, #0
 8012f30:	bd70      	pop	{r4, r5, r6, pc}
 8012f32:	7909      	ldrb	r1, [r1, #4]
 8012f34:	f7fc f802 	bl	800ef3c <ucdr_serialize_uint8_t>
 8012f38:	4606      	mov	r6, r0
 8012f3a:	b158      	cbz	r0, 8012f54 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012f3c:	7923      	ldrb	r3, [r4, #4]
 8012f3e:	2b02      	cmp	r3, #2
 8012f40:	d003      	beq.n	8012f4a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8012f42:	2b03      	cmp	r3, #3
 8012f44:	d028      	beq.n	8012f98 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8012f46:	2b01      	cmp	r3, #1
 8012f48:	d104      	bne.n	8012f54 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012f4a:	68a1      	ldr	r1, [r4, #8]
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	f004 ffd9 	bl	8017f04 <ucdr_serialize_string>
 8012f52:	4606      	mov	r6, r0
 8012f54:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8012f58:	4628      	mov	r0, r5
 8012f5a:	f7fc fd2b 	bl	800f9b4 <ucdr_serialize_int16_t>
 8012f5e:	4030      	ands	r0, r6
 8012f60:	b2c0      	uxtb	r0, r0
 8012f62:	bd70      	pop	{r4, r5, r6, pc}
 8012f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f68:	3104      	adds	r1, #4
 8012f6a:	f7ff be7b 	b.w	8012c64 <uxr_serialize_CLIENT_Representation>
 8012f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f72:	3104      	adds	r1, #4
 8012f74:	f7ff bf32 	b.w	8012ddc <uxr_serialize_AGENT_Representation>
 8012f78:	2001      	movs	r0, #1
 8012f7a:	bd70      	pop	{r4, r5, r6, pc}
 8012f7c:	68a2      	ldr	r2, [r4, #8]
 8012f7e:	f104 010c 	add.w	r1, r4, #12
 8012f82:	4628      	mov	r0, r5
 8012f84:	f7fd f9c2 	bl	801030c <ucdr_serialize_sequence_uint8_t>
 8012f88:	4606      	mov	r6, r0
 8012f8a:	e7c7      	b.n	8012f1c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012f8c:	68a1      	ldr	r1, [r4, #8]
 8012f8e:	4628      	mov	r0, r5
 8012f90:	f004 ffb8 	bl	8017f04 <ucdr_serialize_string>
 8012f94:	4606      	mov	r6, r0
 8012f96:	e7c1      	b.n	8012f1c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012f98:	68a2      	ldr	r2, [r4, #8]
 8012f9a:	f104 010c 	add.w	r1, r4, #12
 8012f9e:	4628      	mov	r0, r5
 8012fa0:	f7fd f9b4 	bl	801030c <ucdr_serialize_sequence_uint8_t>
 8012fa4:	4606      	mov	r6, r0
 8012fa6:	e7d5      	b.n	8012f54 <uxr_serialize_ObjectVariant.part.0+0x94>

08012fa8 <uxr_deserialize_DATAWRITER_Representation>:
 8012fa8:	b570      	push	{r4, r5, r6, lr}
 8012faa:	4606      	mov	r6, r0
 8012fac:	460d      	mov	r5, r1
 8012fae:	f7fb ffdb 	bl	800ef68 <ucdr_deserialize_uint8_t>
 8012fb2:	4604      	mov	r4, r0
 8012fb4:	b130      	cbz	r0, 8012fc4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012fb6:	782b      	ldrb	r3, [r5, #0]
 8012fb8:	2b02      	cmp	r3, #2
 8012fba:	d00c      	beq.n	8012fd6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012fbc:	2b03      	cmp	r3, #3
 8012fbe:	d012      	beq.n	8012fe6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012fc0:	2b01      	cmp	r3, #1
 8012fc2:	d008      	beq.n	8012fd6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012fc4:	2202      	movs	r2, #2
 8012fc6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012fca:	4630      	mov	r0, r6
 8012fcc:	f004 fe8c 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8012fd0:	4020      	ands	r0, r4
 8012fd2:	b2c0      	uxtb	r0, r0
 8012fd4:	bd70      	pop	{r4, r5, r6, pc}
 8012fd6:	6869      	ldr	r1, [r5, #4]
 8012fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012fdc:	4630      	mov	r0, r6
 8012fde:	f004 ffa1 	bl	8017f24 <ucdr_deserialize_string>
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	e7ee      	b.n	8012fc4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012fe6:	1d2b      	adds	r3, r5, #4
 8012fe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012fec:	f105 0108 	add.w	r1, r5, #8
 8012ff0:	4630      	mov	r0, r6
 8012ff2:	f7fd f99d 	bl	8010330 <ucdr_deserialize_sequence_uint8_t>
 8012ff6:	4604      	mov	r4, r0
 8012ff8:	e7e4      	b.n	8012fc4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012ffa:	bf00      	nop

08012ffc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012ffc:	b570      	push	{r4, r5, r6, lr}
 8012ffe:	460d      	mov	r5, r1
 8013000:	7809      	ldrb	r1, [r1, #0]
 8013002:	4606      	mov	r6, r0
 8013004:	f7fb ff6c 	bl	800eee0 <ucdr_serialize_bool>
 8013008:	782b      	ldrb	r3, [r5, #0]
 801300a:	4604      	mov	r4, r0
 801300c:	b94b      	cbnz	r3, 8013022 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801300e:	7a29      	ldrb	r1, [r5, #8]
 8013010:	4630      	mov	r0, r6
 8013012:	f7fb ff65 	bl	800eee0 <ucdr_serialize_bool>
 8013016:	7a2b      	ldrb	r3, [r5, #8]
 8013018:	4004      	ands	r4, r0
 801301a:	b2e4      	uxtb	r4, r4
 801301c:	b943      	cbnz	r3, 8013030 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801301e:	4620      	mov	r0, r4
 8013020:	bd70      	pop	{r4, r5, r6, pc}
 8013022:	6869      	ldr	r1, [r5, #4]
 8013024:	4630      	mov	r0, r6
 8013026:	f004 ff6d 	bl	8017f04 <ucdr_serialize_string>
 801302a:	4004      	ands	r4, r0
 801302c:	b2e4      	uxtb	r4, r4
 801302e:	e7ee      	b.n	801300e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013030:	68e9      	ldr	r1, [r5, #12]
 8013032:	4630      	mov	r0, r6
 8013034:	f004 ff66 	bl	8017f04 <ucdr_serialize_string>
 8013038:	4004      	ands	r4, r0
 801303a:	4620      	mov	r0, r4
 801303c:	bd70      	pop	{r4, r5, r6, pc}
 801303e:	bf00      	nop

08013040 <uxr_serialize_OBJK_Topic_Binary>:
 8013040:	b570      	push	{r4, r5, r6, lr}
 8013042:	460d      	mov	r5, r1
 8013044:	6809      	ldr	r1, [r1, #0]
 8013046:	4606      	mov	r6, r0
 8013048:	f004 ff5c 	bl	8017f04 <ucdr_serialize_string>
 801304c:	7929      	ldrb	r1, [r5, #4]
 801304e:	4604      	mov	r4, r0
 8013050:	4630      	mov	r0, r6
 8013052:	f7fb ff45 	bl	800eee0 <ucdr_serialize_bool>
 8013056:	792b      	ldrb	r3, [r5, #4]
 8013058:	4004      	ands	r4, r0
 801305a:	b2e4      	uxtb	r4, r4
 801305c:	b943      	cbnz	r3, 8013070 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801305e:	7b29      	ldrb	r1, [r5, #12]
 8013060:	4630      	mov	r0, r6
 8013062:	f7fb ff3d 	bl	800eee0 <ucdr_serialize_bool>
 8013066:	7b2b      	ldrb	r3, [r5, #12]
 8013068:	4004      	ands	r4, r0
 801306a:	b93b      	cbnz	r3, 801307c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801306c:	4620      	mov	r0, r4
 801306e:	bd70      	pop	{r4, r5, r6, pc}
 8013070:	68a9      	ldr	r1, [r5, #8]
 8013072:	4630      	mov	r0, r6
 8013074:	f004 ff46 	bl	8017f04 <ucdr_serialize_string>
 8013078:	4004      	ands	r4, r0
 801307a:	e7f0      	b.n	801305e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801307c:	6929      	ldr	r1, [r5, #16]
 801307e:	4630      	mov	r0, r6
 8013080:	f004 ff40 	bl	8017f04 <ucdr_serialize_string>
 8013084:	4004      	ands	r4, r0
 8013086:	b2e4      	uxtb	r4, r4
 8013088:	4620      	mov	r0, r4
 801308a:	bd70      	pop	{r4, r5, r6, pc}

0801308c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801308c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013090:	460c      	mov	r4, r1
 8013092:	7809      	ldrb	r1, [r1, #0]
 8013094:	4606      	mov	r6, r0
 8013096:	f7fb ff23 	bl	800eee0 <ucdr_serialize_bool>
 801309a:	7823      	ldrb	r3, [r4, #0]
 801309c:	4605      	mov	r5, r0
 801309e:	b96b      	cbnz	r3, 80130bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80130a0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80130a4:	4630      	mov	r0, r6
 80130a6:	f7fb ff1b 	bl	800eee0 <ucdr_serialize_bool>
 80130aa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80130ae:	4005      	ands	r5, r0
 80130b0:	b2ed      	uxtb	r5, r5
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d169      	bne.n	801318a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80130b6:	4628      	mov	r0, r5
 80130b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130bc:	6861      	ldr	r1, [r4, #4]
 80130be:	4630      	mov	r0, r6
 80130c0:	f7fc f952 	bl	800f368 <ucdr_serialize_uint32_t>
 80130c4:	6863      	ldr	r3, [r4, #4]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d06b      	beq.n	80131a2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80130ca:	2800      	cmp	r0, #0
 80130cc:	d067      	beq.n	801319e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80130ce:	68a1      	ldr	r1, [r4, #8]
 80130d0:	4630      	mov	r0, r6
 80130d2:	f004 ff17 	bl	8017f04 <ucdr_serialize_string>
 80130d6:	6863      	ldr	r3, [r4, #4]
 80130d8:	2b01      	cmp	r3, #1
 80130da:	d953      	bls.n	8013184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80130dc:	2800      	cmp	r0, #0
 80130de:	d05e      	beq.n	801319e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80130e0:	68e1      	ldr	r1, [r4, #12]
 80130e2:	4630      	mov	r0, r6
 80130e4:	f004 ff0e 	bl	8017f04 <ucdr_serialize_string>
 80130e8:	6863      	ldr	r3, [r4, #4]
 80130ea:	2b02      	cmp	r3, #2
 80130ec:	d94a      	bls.n	8013184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80130ee:	2800      	cmp	r0, #0
 80130f0:	d055      	beq.n	801319e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80130f2:	6921      	ldr	r1, [r4, #16]
 80130f4:	4630      	mov	r0, r6
 80130f6:	f004 ff05 	bl	8017f04 <ucdr_serialize_string>
 80130fa:	6863      	ldr	r3, [r4, #4]
 80130fc:	2b03      	cmp	r3, #3
 80130fe:	d941      	bls.n	8013184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013100:	2800      	cmp	r0, #0
 8013102:	d04c      	beq.n	801319e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013104:	6961      	ldr	r1, [r4, #20]
 8013106:	4630      	mov	r0, r6
 8013108:	f004 fefc 	bl	8017f04 <ucdr_serialize_string>
 801310c:	6863      	ldr	r3, [r4, #4]
 801310e:	2b04      	cmp	r3, #4
 8013110:	d938      	bls.n	8013184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013112:	2800      	cmp	r0, #0
 8013114:	d043      	beq.n	801319e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013116:	69a1      	ldr	r1, [r4, #24]
 8013118:	4630      	mov	r0, r6
 801311a:	f004 fef3 	bl	8017f04 <ucdr_serialize_string>
 801311e:	6863      	ldr	r3, [r4, #4]
 8013120:	2b05      	cmp	r3, #5
 8013122:	d92f      	bls.n	8013184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013124:	2800      	cmp	r0, #0
 8013126:	d03a      	beq.n	801319e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013128:	69e1      	ldr	r1, [r4, #28]
 801312a:	4630      	mov	r0, r6
 801312c:	f004 feea 	bl	8017f04 <ucdr_serialize_string>
 8013130:	6863      	ldr	r3, [r4, #4]
 8013132:	2b06      	cmp	r3, #6
 8013134:	d926      	bls.n	8013184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013136:	b390      	cbz	r0, 801319e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013138:	6a21      	ldr	r1, [r4, #32]
 801313a:	4630      	mov	r0, r6
 801313c:	f004 fee2 	bl	8017f04 <ucdr_serialize_string>
 8013140:	6863      	ldr	r3, [r4, #4]
 8013142:	2b07      	cmp	r3, #7
 8013144:	d91e      	bls.n	8013184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013146:	b350      	cbz	r0, 801319e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013148:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801314a:	4630      	mov	r0, r6
 801314c:	f004 feda 	bl	8017f04 <ucdr_serialize_string>
 8013150:	6863      	ldr	r3, [r4, #4]
 8013152:	2b08      	cmp	r3, #8
 8013154:	d916      	bls.n	8013184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013156:	b310      	cbz	r0, 801319e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013158:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801315a:	4630      	mov	r0, r6
 801315c:	f004 fed2 	bl	8017f04 <ucdr_serialize_string>
 8013160:	6863      	ldr	r3, [r4, #4]
 8013162:	2b09      	cmp	r3, #9
 8013164:	d90e      	bls.n	8013184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013166:	b1d0      	cbz	r0, 801319e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013168:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801316c:	2709      	movs	r7, #9
 801316e:	e000      	b.n	8013172 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013170:	b1a8      	cbz	r0, 801319e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013172:	f858 1b04 	ldr.w	r1, [r8], #4
 8013176:	4630      	mov	r0, r6
 8013178:	f004 fec4 	bl	8017f04 <ucdr_serialize_string>
 801317c:	6862      	ldr	r2, [r4, #4]
 801317e:	3701      	adds	r7, #1
 8013180:	4297      	cmp	r7, r2
 8013182:	d3f5      	bcc.n	8013170 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013184:	4005      	ands	r5, r0
 8013186:	b2ed      	uxtb	r5, r5
 8013188:	e78a      	b.n	80130a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801318a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801318c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013190:	4630      	mov	r0, r6
 8013192:	f7fd f8bb 	bl	801030c <ucdr_serialize_sequence_uint8_t>
 8013196:	4005      	ands	r5, r0
 8013198:	4628      	mov	r0, r5
 801319a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801319e:	2500      	movs	r5, #0
 80131a0:	e77e      	b.n	80130a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80131a2:	4028      	ands	r0, r5
 80131a4:	b2c5      	uxtb	r5, r0
 80131a6:	e77b      	b.n	80130a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080131a8 <uxr_serialize_OBJK_Publisher_Binary>:
 80131a8:	b570      	push	{r4, r5, r6, lr}
 80131aa:	460d      	mov	r5, r1
 80131ac:	7809      	ldrb	r1, [r1, #0]
 80131ae:	4606      	mov	r6, r0
 80131b0:	f7fb fe96 	bl	800eee0 <ucdr_serialize_bool>
 80131b4:	782b      	ldrb	r3, [r5, #0]
 80131b6:	4604      	mov	r4, r0
 80131b8:	b94b      	cbnz	r3, 80131ce <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80131ba:	7a29      	ldrb	r1, [r5, #8]
 80131bc:	4630      	mov	r0, r6
 80131be:	f7fb fe8f 	bl	800eee0 <ucdr_serialize_bool>
 80131c2:	7a2b      	ldrb	r3, [r5, #8]
 80131c4:	4004      	ands	r4, r0
 80131c6:	b2e4      	uxtb	r4, r4
 80131c8:	b943      	cbnz	r3, 80131dc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80131ca:	4620      	mov	r0, r4
 80131cc:	bd70      	pop	{r4, r5, r6, pc}
 80131ce:	6869      	ldr	r1, [r5, #4]
 80131d0:	4630      	mov	r0, r6
 80131d2:	f004 fe97 	bl	8017f04 <ucdr_serialize_string>
 80131d6:	4004      	ands	r4, r0
 80131d8:	b2e4      	uxtb	r4, r4
 80131da:	e7ee      	b.n	80131ba <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80131dc:	f105 010c 	add.w	r1, r5, #12
 80131e0:	4630      	mov	r0, r6
 80131e2:	f7ff ff53 	bl	801308c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80131e6:	4004      	ands	r4, r0
 80131e8:	4620      	mov	r0, r4
 80131ea:	bd70      	pop	{r4, r5, r6, pc}

080131ec <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80131ec:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80131f0:	4688      	mov	r8, r1
 80131f2:	8809      	ldrh	r1, [r1, #0]
 80131f4:	4681      	mov	r9, r0
 80131f6:	f7fb fecd 	bl	800ef94 <ucdr_serialize_uint16_t>
 80131fa:	f898 1002 	ldrb.w	r1, [r8, #2]
 80131fe:	4606      	mov	r6, r0
 8013200:	4648      	mov	r0, r9
 8013202:	f7fb fe6d 	bl	800eee0 <ucdr_serialize_bool>
 8013206:	f898 3002 	ldrb.w	r3, [r8, #2]
 801320a:	4006      	ands	r6, r0
 801320c:	b2f5      	uxtb	r5, r6
 801320e:	b9eb      	cbnz	r3, 801324c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013210:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013214:	4648      	mov	r0, r9
 8013216:	f7fb fe63 	bl	800eee0 <ucdr_serialize_bool>
 801321a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801321e:	4005      	ands	r5, r0
 8013220:	bb7b      	cbnz	r3, 8013282 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013222:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013226:	4648      	mov	r0, r9
 8013228:	f7fb fe5a 	bl	800eee0 <ucdr_serialize_bool>
 801322c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013230:	4005      	ands	r5, r0
 8013232:	b9f3      	cbnz	r3, 8013272 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013234:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013238:	4648      	mov	r0, r9
 801323a:	f7fb fe51 	bl	800eee0 <ucdr_serialize_bool>
 801323e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013242:	4005      	ands	r5, r0
 8013244:	b94b      	cbnz	r3, 801325a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013246:	4628      	mov	r0, r5
 8013248:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801324c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013250:	4648      	mov	r0, r9
 8013252:	f7fb fe9f 	bl	800ef94 <ucdr_serialize_uint16_t>
 8013256:	4005      	ands	r5, r0
 8013258:	e7da      	b.n	8013210 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801325a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801325e:	f108 011c 	add.w	r1, r8, #28
 8013262:	4648      	mov	r0, r9
 8013264:	f7fd f852 	bl	801030c <ucdr_serialize_sequence_uint8_t>
 8013268:	4028      	ands	r0, r5
 801326a:	b2c5      	uxtb	r5, r0
 801326c:	4628      	mov	r0, r5
 801326e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013272:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013276:	4648      	mov	r0, r9
 8013278:	f7fc f876 	bl	800f368 <ucdr_serialize_uint32_t>
 801327c:	4028      	ands	r0, r5
 801327e:	b2c5      	uxtb	r5, r0
 8013280:	e7d8      	b.n	8013234 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013282:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013286:	4648      	mov	r0, r9
 8013288:	f7fc f86e 	bl	800f368 <ucdr_serialize_uint32_t>
 801328c:	4028      	ands	r0, r5
 801328e:	b2c5      	uxtb	r5, r0
 8013290:	e7c7      	b.n	8013222 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013292:	bf00      	nop

08013294 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013296:	2202      	movs	r2, #2
 8013298:	460d      	mov	r5, r1
 801329a:	4606      	mov	r6, r0
 801329c:	f004 fcc0 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 80132a0:	78a9      	ldrb	r1, [r5, #2]
 80132a2:	4604      	mov	r4, r0
 80132a4:	4630      	mov	r0, r6
 80132a6:	f7fb fe1b 	bl	800eee0 <ucdr_serialize_bool>
 80132aa:	78ab      	ldrb	r3, [r5, #2]
 80132ac:	4004      	ands	r4, r0
 80132ae:	b2e4      	uxtb	r4, r4
 80132b0:	b90b      	cbnz	r3, 80132b6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80132b2:	4620      	mov	r0, r4
 80132b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132b6:	f105 0108 	add.w	r1, r5, #8
 80132ba:	4630      	mov	r0, r6
 80132bc:	f7ff ff96 	bl	80131ec <uxr_serialize_OBJK_Endpoint_QosBinary>
 80132c0:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80132c4:	4607      	mov	r7, r0
 80132c6:	4630      	mov	r0, r6
 80132c8:	f7fb fe0a 	bl	800eee0 <ucdr_serialize_bool>
 80132cc:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80132d0:	4038      	ands	r0, r7
 80132d2:	b2c7      	uxtb	r7, r0
 80132d4:	b913      	cbnz	r3, 80132dc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80132d6:	403c      	ands	r4, r7
 80132d8:	4620      	mov	r0, r4
 80132da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132dc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80132e0:	4630      	mov	r0, r6
 80132e2:	f7fc fa97 	bl	800f814 <ucdr_serialize_uint64_t>
 80132e6:	4007      	ands	r7, r0
 80132e8:	e7f5      	b.n	80132d6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80132ea:	bf00      	nop

080132ec <uxr_deserialize_ObjectVariant>:
 80132ec:	b570      	push	{r4, r5, r6, lr}
 80132ee:	4605      	mov	r5, r0
 80132f0:	460e      	mov	r6, r1
 80132f2:	f7fb fe39 	bl	800ef68 <ucdr_deserialize_uint8_t>
 80132f6:	b168      	cbz	r0, 8013314 <uxr_deserialize_ObjectVariant+0x28>
 80132f8:	7833      	ldrb	r3, [r6, #0]
 80132fa:	3b01      	subs	r3, #1
 80132fc:	4604      	mov	r4, r0
 80132fe:	2b0d      	cmp	r3, #13
 8013300:	d809      	bhi.n	8013316 <uxr_deserialize_ObjectVariant+0x2a>
 8013302:	e8df f003 	tbb	[pc, r3]
 8013306:	0a41      	.short	0x0a41
 8013308:	0a0a2323 	.word	0x0a0a2323
 801330c:	10080a0a 	.word	0x10080a0a
 8013310:	565c1010 	.word	0x565c1010
 8013314:	2400      	movs	r4, #0
 8013316:	4620      	mov	r0, r4
 8013318:	bd70      	pop	{r4, r5, r6, pc}
 801331a:	1d31      	adds	r1, r6, #4
 801331c:	4628      	mov	r0, r5
 801331e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013322:	f7ff be41 	b.w	8012fa8 <uxr_deserialize_DATAWRITER_Representation>
 8013326:	1d31      	adds	r1, r6, #4
 8013328:	4628      	mov	r0, r5
 801332a:	f7fb fe1d 	bl	800ef68 <ucdr_deserialize_uint8_t>
 801332e:	2800      	cmp	r0, #0
 8013330:	d0f0      	beq.n	8013314 <uxr_deserialize_ObjectVariant+0x28>
 8013332:	7933      	ldrb	r3, [r6, #4]
 8013334:	2b01      	cmp	r3, #1
 8013336:	d001      	beq.n	801333c <uxr_deserialize_ObjectVariant+0x50>
 8013338:	2b02      	cmp	r3, #2
 801333a:	d1ec      	bne.n	8013316 <uxr_deserialize_ObjectVariant+0x2a>
 801333c:	68b1      	ldr	r1, [r6, #8]
 801333e:	4628      	mov	r0, r5
 8013340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013348:	f004 bdec 	b.w	8017f24 <ucdr_deserialize_string>
 801334c:	1d31      	adds	r1, r6, #4
 801334e:	4628      	mov	r0, r5
 8013350:	f7fb fe0a 	bl	800ef68 <ucdr_deserialize_uint8_t>
 8013354:	4604      	mov	r4, r0
 8013356:	b170      	cbz	r0, 8013376 <uxr_deserialize_ObjectVariant+0x8a>
 8013358:	7933      	ldrb	r3, [r6, #4]
 801335a:	2b02      	cmp	r3, #2
 801335c:	d04c      	beq.n	80133f8 <uxr_deserialize_ObjectVariant+0x10c>
 801335e:	2b03      	cmp	r3, #3
 8013360:	d109      	bne.n	8013376 <uxr_deserialize_ObjectVariant+0x8a>
 8013362:	f106 0308 	add.w	r3, r6, #8
 8013366:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801336a:	f106 010c 	add.w	r1, r6, #12
 801336e:	4628      	mov	r0, r5
 8013370:	f7fc ffde 	bl	8010330 <ucdr_deserialize_sequence_uint8_t>
 8013374:	4604      	mov	r4, r0
 8013376:	2202      	movs	r2, #2
 8013378:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801337c:	4628      	mov	r0, r5
 801337e:	f004 fcb3 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8013382:	4020      	ands	r0, r4
 8013384:	b2c4      	uxtb	r4, r0
 8013386:	e7c6      	b.n	8013316 <uxr_deserialize_ObjectVariant+0x2a>
 8013388:	1d31      	adds	r1, r6, #4
 801338a:	4628      	mov	r0, r5
 801338c:	f7fb fdec 	bl	800ef68 <ucdr_deserialize_uint8_t>
 8013390:	4604      	mov	r4, r0
 8013392:	b130      	cbz	r0, 80133a2 <uxr_deserialize_ObjectVariant+0xb6>
 8013394:	7933      	ldrb	r3, [r6, #4]
 8013396:	2b02      	cmp	r3, #2
 8013398:	d036      	beq.n	8013408 <uxr_deserialize_ObjectVariant+0x11c>
 801339a:	2b03      	cmp	r3, #3
 801339c:	d03c      	beq.n	8013418 <uxr_deserialize_ObjectVariant+0x12c>
 801339e:	2b01      	cmp	r3, #1
 80133a0:	d032      	beq.n	8013408 <uxr_deserialize_ObjectVariant+0x11c>
 80133a2:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80133a6:	4628      	mov	r0, r5
 80133a8:	f7fc fb84 	bl	800fab4 <ucdr_deserialize_int16_t>
 80133ac:	4020      	ands	r0, r4
 80133ae:	b2c4      	uxtb	r4, r0
 80133b0:	e7b1      	b.n	8013316 <uxr_deserialize_ObjectVariant+0x2a>
 80133b2:	1d31      	adds	r1, r6, #4
 80133b4:	4628      	mov	r0, r5
 80133b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133ba:	f7ff bcab 	b.w	8012d14 <uxr_deserialize_CLIENT_Representation>
 80133be:	2204      	movs	r2, #4
 80133c0:	18b1      	adds	r1, r6, r2
 80133c2:	4628      	mov	r0, r5
 80133c4:	f004 fc90 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 80133c8:	2202      	movs	r2, #2
 80133ca:	f106 0108 	add.w	r1, r6, #8
 80133ce:	4604      	mov	r4, r0
 80133d0:	4628      	mov	r0, r5
 80133d2:	f004 fc89 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 80133d6:	2202      	movs	r2, #2
 80133d8:	4004      	ands	r4, r0
 80133da:	f106 010a 	add.w	r1, r6, #10
 80133de:	4628      	mov	r0, r5
 80133e0:	f004 fc82 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 80133e4:	b2e4      	uxtb	r4, r4
 80133e6:	4603      	mov	r3, r0
 80133e8:	f106 010c 	add.w	r1, r6, #12
 80133ec:	4628      	mov	r0, r5
 80133ee:	401c      	ands	r4, r3
 80133f0:	f7fb fd8c 	bl	800ef0c <ucdr_deserialize_bool>
 80133f4:	4004      	ands	r4, r0
 80133f6:	e78e      	b.n	8013316 <uxr_deserialize_ObjectVariant+0x2a>
 80133f8:	68b1      	ldr	r1, [r6, #8]
 80133fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80133fe:	4628      	mov	r0, r5
 8013400:	f004 fd90 	bl	8017f24 <ucdr_deserialize_string>
 8013404:	4604      	mov	r4, r0
 8013406:	e7b6      	b.n	8013376 <uxr_deserialize_ObjectVariant+0x8a>
 8013408:	68b1      	ldr	r1, [r6, #8]
 801340a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801340e:	4628      	mov	r0, r5
 8013410:	f004 fd88 	bl	8017f24 <ucdr_deserialize_string>
 8013414:	4604      	mov	r4, r0
 8013416:	e7c4      	b.n	80133a2 <uxr_deserialize_ObjectVariant+0xb6>
 8013418:	f106 0308 	add.w	r3, r6, #8
 801341c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013420:	f106 010c 	add.w	r1, r6, #12
 8013424:	4628      	mov	r0, r5
 8013426:	f7fc ff83 	bl	8010330 <ucdr_deserialize_sequence_uint8_t>
 801342a:	4604      	mov	r4, r0
 801342c:	e7b9      	b.n	80133a2 <uxr_deserialize_ObjectVariant+0xb6>
 801342e:	bf00      	nop

08013430 <uxr_deserialize_BaseObjectRequest>:
 8013430:	b570      	push	{r4, r5, r6, lr}
 8013432:	2202      	movs	r2, #2
 8013434:	4605      	mov	r5, r0
 8013436:	460e      	mov	r6, r1
 8013438:	f004 fc56 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 801343c:	2202      	movs	r2, #2
 801343e:	4604      	mov	r4, r0
 8013440:	18b1      	adds	r1, r6, r2
 8013442:	4628      	mov	r0, r5
 8013444:	f004 fc50 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8013448:	4020      	ands	r0, r4
 801344a:	b2c0      	uxtb	r0, r0
 801344c:	bd70      	pop	{r4, r5, r6, pc}
 801344e:	bf00      	nop

08013450 <uxr_serialize_ActivityInfoVariant>:
 8013450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013454:	460d      	mov	r5, r1
 8013456:	7809      	ldrb	r1, [r1, #0]
 8013458:	4607      	mov	r7, r0
 801345a:	f7fb fd6f 	bl	800ef3c <ucdr_serialize_uint8_t>
 801345e:	4681      	mov	r9, r0
 8013460:	b138      	cbz	r0, 8013472 <uxr_serialize_ActivityInfoVariant+0x22>
 8013462:	782b      	ldrb	r3, [r5, #0]
 8013464:	2b06      	cmp	r3, #6
 8013466:	f000 8082 	beq.w	801356e <uxr_serialize_ActivityInfoVariant+0x11e>
 801346a:	2b0d      	cmp	r3, #13
 801346c:	d016      	beq.n	801349c <uxr_serialize_ActivityInfoVariant+0x4c>
 801346e:	2b05      	cmp	r3, #5
 8013470:	d002      	beq.n	8013478 <uxr_serialize_ActivityInfoVariant+0x28>
 8013472:	4648      	mov	r0, r9
 8013474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013478:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801347c:	4638      	mov	r0, r7
 801347e:	f7fc fa99 	bl	800f9b4 <ucdr_serialize_int16_t>
 8013482:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013486:	4681      	mov	r9, r0
 8013488:	4638      	mov	r0, r7
 801348a:	f7fc f9c3 	bl	800f814 <ucdr_serialize_uint64_t>
 801348e:	ea09 0000 	and.w	r0, r9, r0
 8013492:	fa5f f980 	uxtb.w	r9, r0
 8013496:	4648      	mov	r0, r9
 8013498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801349c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80134a0:	4638      	mov	r0, r7
 80134a2:	f7fc fa87 	bl	800f9b4 <ucdr_serialize_int16_t>
 80134a6:	68e9      	ldr	r1, [r5, #12]
 80134a8:	4681      	mov	r9, r0
 80134aa:	4638      	mov	r0, r7
 80134ac:	f7fb ff5c 	bl	800f368 <ucdr_serialize_uint32_t>
 80134b0:	68eb      	ldr	r3, [r5, #12]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d0eb      	beq.n	801348e <uxr_serialize_ActivityInfoVariant+0x3e>
 80134b6:	b320      	cbz	r0, 8013502 <uxr_serialize_ActivityInfoVariant+0xb2>
 80134b8:	f105 080c 	add.w	r8, r5, #12
 80134bc:	2600      	movs	r6, #0
 80134be:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80134c2:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80134c6:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80134ca:	4638      	mov	r0, r7
 80134cc:	f7fb fd36 	bl	800ef3c <ucdr_serialize_uint8_t>
 80134d0:	2800      	cmp	r0, #0
 80134d2:	d053      	beq.n	801357c <uxr_serialize_ActivityInfoVariant+0x12c>
 80134d4:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80134d8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80134dc:	0074      	lsls	r4, r6, #1
 80134de:	00c9      	lsls	r1, r1, #3
 80134e0:	2b03      	cmp	r3, #3
 80134e2:	d854      	bhi.n	801358e <uxr_serialize_ActivityInfoVariant+0x13e>
 80134e4:	e8df f003 	tbb	[pc, r3]
 80134e8:	02102132 	.word	0x02102132
 80134ec:	4441      	add	r1, r8
 80134ee:	4638      	mov	r0, r7
 80134f0:	6889      	ldr	r1, [r1, #8]
 80134f2:	f004 fd07 	bl	8017f04 <ucdr_serialize_string>
 80134f6:	68ea      	ldr	r2, [r5, #12]
 80134f8:	3601      	adds	r6, #1
 80134fa:	4296      	cmp	r6, r2
 80134fc:	d242      	bcs.n	8013584 <uxr_serialize_ActivityInfoVariant+0x134>
 80134fe:	2800      	cmp	r0, #0
 8013500:	d1dd      	bne.n	80134be <uxr_serialize_ActivityInfoVariant+0x6e>
 8013502:	f04f 0900 	mov.w	r9, #0
 8013506:	e7b4      	b.n	8013472 <uxr_serialize_ActivityInfoVariant+0x22>
 8013508:	3108      	adds	r1, #8
 801350a:	4441      	add	r1, r8
 801350c:	2210      	movs	r2, #16
 801350e:	4638      	mov	r0, r7
 8013510:	f004 fb86 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8013514:	4434      	add	r4, r6
 8013516:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801351a:	4604      	mov	r4, r0
 801351c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801351e:	4638      	mov	r0, r7
 8013520:	f7fb ff22 	bl	800f368 <ucdr_serialize_uint32_t>
 8013524:	4020      	ands	r0, r4
 8013526:	b2c0      	uxtb	r0, r0
 8013528:	e7e5      	b.n	80134f6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801352a:	3108      	adds	r1, #8
 801352c:	4441      	add	r1, r8
 801352e:	2204      	movs	r2, #4
 8013530:	4638      	mov	r0, r7
 8013532:	f004 fb75 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8013536:	4434      	add	r4, r6
 8013538:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801353c:	4604      	mov	r4, r0
 801353e:	8b19      	ldrh	r1, [r3, #24]
 8013540:	4638      	mov	r0, r7
 8013542:	f7fb fd27 	bl	800ef94 <ucdr_serialize_uint16_t>
 8013546:	4020      	ands	r0, r4
 8013548:	b2c0      	uxtb	r0, r0
 801354a:	e7d4      	b.n	80134f6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801354c:	3108      	adds	r1, #8
 801354e:	4441      	add	r1, r8
 8013550:	2202      	movs	r2, #2
 8013552:	4638      	mov	r0, r7
 8013554:	f004 fb64 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8013558:	4434      	add	r4, r6
 801355a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801355e:	4604      	mov	r4, r0
 8013560:	7d99      	ldrb	r1, [r3, #22]
 8013562:	4638      	mov	r0, r7
 8013564:	f7fb fcea 	bl	800ef3c <ucdr_serialize_uint8_t>
 8013568:	4020      	ands	r0, r4
 801356a:	b2c0      	uxtb	r0, r0
 801356c:	e7c3      	b.n	80134f6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801356e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013572:	4638      	mov	r0, r7
 8013574:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013578:	f7fc ba1c 	b.w	800f9b4 <ucdr_serialize_int16_t>
 801357c:	68ea      	ldr	r2, [r5, #12]
 801357e:	3601      	adds	r6, #1
 8013580:	42b2      	cmp	r2, r6
 8013582:	d8be      	bhi.n	8013502 <uxr_serialize_ActivityInfoVariant+0xb2>
 8013584:	ea09 0900 	and.w	r9, r9, r0
 8013588:	fa5f f989 	uxtb.w	r9, r9
 801358c:	e771      	b.n	8013472 <uxr_serialize_ActivityInfoVariant+0x22>
 801358e:	68eb      	ldr	r3, [r5, #12]
 8013590:	3601      	adds	r6, #1
 8013592:	429e      	cmp	r6, r3
 8013594:	f10a 0a18 	add.w	sl, sl, #24
 8013598:	d395      	bcc.n	80134c6 <uxr_serialize_ActivityInfoVariant+0x76>
 801359a:	e76a      	b.n	8013472 <uxr_serialize_ActivityInfoVariant+0x22>

0801359c <uxr_deserialize_BaseObjectReply>:
 801359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135a0:	2202      	movs	r2, #2
 80135a2:	4606      	mov	r6, r0
 80135a4:	460f      	mov	r7, r1
 80135a6:	f004 fb9f 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 80135aa:	2202      	movs	r2, #2
 80135ac:	18b9      	adds	r1, r7, r2
 80135ae:	4605      	mov	r5, r0
 80135b0:	4630      	mov	r0, r6
 80135b2:	f004 fb99 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 80135b6:	1d39      	adds	r1, r7, #4
 80135b8:	4680      	mov	r8, r0
 80135ba:	4630      	mov	r0, r6
 80135bc:	f7fb fcd4 	bl	800ef68 <ucdr_deserialize_uint8_t>
 80135c0:	1d79      	adds	r1, r7, #5
 80135c2:	4604      	mov	r4, r0
 80135c4:	4630      	mov	r0, r6
 80135c6:	f7fb fccf 	bl	800ef68 <ucdr_deserialize_uint8_t>
 80135ca:	ea05 0508 	and.w	r5, r5, r8
 80135ce:	402c      	ands	r4, r5
 80135d0:	4020      	ands	r0, r4
 80135d2:	b2c0      	uxtb	r0, r0
 80135d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080135d8 <uxr_serialize_ReadSpecification>:
 80135d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135dc:	460e      	mov	r6, r1
 80135de:	7809      	ldrb	r1, [r1, #0]
 80135e0:	4607      	mov	r7, r0
 80135e2:	f7fb fcab 	bl	800ef3c <ucdr_serialize_uint8_t>
 80135e6:	7871      	ldrb	r1, [r6, #1]
 80135e8:	4604      	mov	r4, r0
 80135ea:	4638      	mov	r0, r7
 80135ec:	f7fb fca6 	bl	800ef3c <ucdr_serialize_uint8_t>
 80135f0:	78b1      	ldrb	r1, [r6, #2]
 80135f2:	4004      	ands	r4, r0
 80135f4:	4638      	mov	r0, r7
 80135f6:	f7fb fc73 	bl	800eee0 <ucdr_serialize_bool>
 80135fa:	78b3      	ldrb	r3, [r6, #2]
 80135fc:	b2e4      	uxtb	r4, r4
 80135fe:	4004      	ands	r4, r0
 8013600:	b94b      	cbnz	r3, 8013616 <uxr_serialize_ReadSpecification+0x3e>
 8013602:	7a31      	ldrb	r1, [r6, #8]
 8013604:	4638      	mov	r0, r7
 8013606:	f7fb fc6b 	bl	800eee0 <ucdr_serialize_bool>
 801360a:	7a33      	ldrb	r3, [r6, #8]
 801360c:	4004      	ands	r4, r0
 801360e:	b943      	cbnz	r3, 8013622 <uxr_serialize_ReadSpecification+0x4a>
 8013610:	4620      	mov	r0, r4
 8013612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013616:	6871      	ldr	r1, [r6, #4]
 8013618:	4638      	mov	r0, r7
 801361a:	f004 fc73 	bl	8017f04 <ucdr_serialize_string>
 801361e:	4004      	ands	r4, r0
 8013620:	e7ef      	b.n	8013602 <uxr_serialize_ReadSpecification+0x2a>
 8013622:	8971      	ldrh	r1, [r6, #10]
 8013624:	4638      	mov	r0, r7
 8013626:	f7fb fcb5 	bl	800ef94 <ucdr_serialize_uint16_t>
 801362a:	89b1      	ldrh	r1, [r6, #12]
 801362c:	4605      	mov	r5, r0
 801362e:	4638      	mov	r0, r7
 8013630:	f7fb fcb0 	bl	800ef94 <ucdr_serialize_uint16_t>
 8013634:	89f1      	ldrh	r1, [r6, #14]
 8013636:	4005      	ands	r5, r0
 8013638:	4638      	mov	r0, r7
 801363a:	f7fb fcab 	bl	800ef94 <ucdr_serialize_uint16_t>
 801363e:	8a31      	ldrh	r1, [r6, #16]
 8013640:	4680      	mov	r8, r0
 8013642:	4638      	mov	r0, r7
 8013644:	f7fb fca6 	bl	800ef94 <ucdr_serialize_uint16_t>
 8013648:	b2ed      	uxtb	r5, r5
 801364a:	4025      	ands	r5, r4
 801364c:	ea08 0505 	and.w	r5, r8, r5
 8013650:	ea00 0405 	and.w	r4, r0, r5
 8013654:	4620      	mov	r0, r4
 8013656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801365a:	bf00      	nop

0801365c <uxr_serialize_CREATE_CLIENT_Payload>:
 801365c:	f7ff bb02 	b.w	8012c64 <uxr_serialize_CLIENT_Representation>

08013660 <uxr_serialize_CREATE_Payload>:
 8013660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013662:	2202      	movs	r2, #2
 8013664:	4607      	mov	r7, r0
 8013666:	460e      	mov	r6, r1
 8013668:	f004 fada 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 801366c:	2202      	movs	r2, #2
 801366e:	18b1      	adds	r1, r6, r2
 8013670:	4605      	mov	r5, r0
 8013672:	4638      	mov	r0, r7
 8013674:	f004 fad4 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8013678:	7931      	ldrb	r1, [r6, #4]
 801367a:	4604      	mov	r4, r0
 801367c:	4638      	mov	r0, r7
 801367e:	f7fb fc5d 	bl	800ef3c <ucdr_serialize_uint8_t>
 8013682:	b170      	cbz	r0, 80136a2 <uxr_serialize_CREATE_Payload+0x42>
 8013684:	7933      	ldrb	r3, [r6, #4]
 8013686:	402c      	ands	r4, r5
 8013688:	3b01      	subs	r3, #1
 801368a:	b2e4      	uxtb	r4, r4
 801368c:	2b0d      	cmp	r3, #13
 801368e:	d809      	bhi.n	80136a4 <uxr_serialize_CREATE_Payload+0x44>
 8013690:	e8df f003 	tbb	[pc, r3]
 8013694:	23230a4c 	.word	0x23230a4c
 8013698:	0a0a0a0a 	.word	0x0a0a0a0a
 801369c:	12121208 	.word	0x12121208
 80136a0:	3e45      	.short	0x3e45
 80136a2:	2400      	movs	r4, #0
 80136a4:	4620      	mov	r0, r4
 80136a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136a8:	f106 0108 	add.w	r1, r6, #8
 80136ac:	4638      	mov	r0, r7
 80136ae:	f7ff fbdf 	bl	8012e70 <uxr_serialize_DATAWRITER_Representation>
 80136b2:	4004      	ands	r4, r0
 80136b4:	4620      	mov	r0, r4
 80136b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136b8:	7a31      	ldrb	r1, [r6, #8]
 80136ba:	4638      	mov	r0, r7
 80136bc:	f7fb fc3e 	bl	800ef3c <ucdr_serialize_uint8_t>
 80136c0:	2800      	cmp	r0, #0
 80136c2:	d0ee      	beq.n	80136a2 <uxr_serialize_CREATE_Payload+0x42>
 80136c4:	7a33      	ldrb	r3, [r6, #8]
 80136c6:	2b01      	cmp	r3, #1
 80136c8:	d001      	beq.n	80136ce <uxr_serialize_CREATE_Payload+0x6e>
 80136ca:	2b02      	cmp	r3, #2
 80136cc:	d1ea      	bne.n	80136a4 <uxr_serialize_CREATE_Payload+0x44>
 80136ce:	68f1      	ldr	r1, [r6, #12]
 80136d0:	4638      	mov	r0, r7
 80136d2:	f004 fc17 	bl	8017f04 <ucdr_serialize_string>
 80136d6:	4004      	ands	r4, r0
 80136d8:	e7e4      	b.n	80136a4 <uxr_serialize_CREATE_Payload+0x44>
 80136da:	7a31      	ldrb	r1, [r6, #8]
 80136dc:	4638      	mov	r0, r7
 80136de:	f7fb fc2d 	bl	800ef3c <ucdr_serialize_uint8_t>
 80136e2:	4605      	mov	r5, r0
 80136e4:	b158      	cbz	r0, 80136fe <uxr_serialize_CREATE_Payload+0x9e>
 80136e6:	7a33      	ldrb	r3, [r6, #8]
 80136e8:	2b02      	cmp	r3, #2
 80136ea:	d034      	beq.n	8013756 <uxr_serialize_CREATE_Payload+0xf6>
 80136ec:	2b03      	cmp	r3, #3
 80136ee:	d106      	bne.n	80136fe <uxr_serialize_CREATE_Payload+0x9e>
 80136f0:	68f2      	ldr	r2, [r6, #12]
 80136f2:	f106 0110 	add.w	r1, r6, #16
 80136f6:	4638      	mov	r0, r7
 80136f8:	f7fc fe08 	bl	801030c <ucdr_serialize_sequence_uint8_t>
 80136fc:	4605      	mov	r5, r0
 80136fe:	2202      	movs	r2, #2
 8013700:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8013704:	4638      	mov	r0, r7
 8013706:	f004 fa8b 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 801370a:	4028      	ands	r0, r5
 801370c:	4004      	ands	r4, r0
 801370e:	e7c9      	b.n	80136a4 <uxr_serialize_CREATE_Payload+0x44>
 8013710:	f106 0108 	add.w	r1, r6, #8
 8013714:	4638      	mov	r0, r7
 8013716:	f7ff faa5 	bl	8012c64 <uxr_serialize_CLIENT_Representation>
 801371a:	4004      	ands	r4, r0
 801371c:	e7c2      	b.n	80136a4 <uxr_serialize_CREATE_Payload+0x44>
 801371e:	f106 0108 	add.w	r1, r6, #8
 8013722:	4638      	mov	r0, r7
 8013724:	f7ff fb5a 	bl	8012ddc <uxr_serialize_AGENT_Representation>
 8013728:	4004      	ands	r4, r0
 801372a:	e7bb      	b.n	80136a4 <uxr_serialize_CREATE_Payload+0x44>
 801372c:	7a31      	ldrb	r1, [r6, #8]
 801372e:	4638      	mov	r0, r7
 8013730:	f7fb fc04 	bl	800ef3c <ucdr_serialize_uint8_t>
 8013734:	4605      	mov	r5, r0
 8013736:	b130      	cbz	r0, 8013746 <uxr_serialize_CREATE_Payload+0xe6>
 8013738:	7a33      	ldrb	r3, [r6, #8]
 801373a:	2b02      	cmp	r3, #2
 801373c:	d011      	beq.n	8013762 <uxr_serialize_CREATE_Payload+0x102>
 801373e:	2b03      	cmp	r3, #3
 8013740:	d015      	beq.n	801376e <uxr_serialize_CREATE_Payload+0x10e>
 8013742:	2b01      	cmp	r3, #1
 8013744:	d00d      	beq.n	8013762 <uxr_serialize_CREATE_Payload+0x102>
 8013746:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801374a:	4638      	mov	r0, r7
 801374c:	f7fc f932 	bl	800f9b4 <ucdr_serialize_int16_t>
 8013750:	4028      	ands	r0, r5
 8013752:	4004      	ands	r4, r0
 8013754:	e7a6      	b.n	80136a4 <uxr_serialize_CREATE_Payload+0x44>
 8013756:	68f1      	ldr	r1, [r6, #12]
 8013758:	4638      	mov	r0, r7
 801375a:	f004 fbd3 	bl	8017f04 <ucdr_serialize_string>
 801375e:	4605      	mov	r5, r0
 8013760:	e7cd      	b.n	80136fe <uxr_serialize_CREATE_Payload+0x9e>
 8013762:	68f1      	ldr	r1, [r6, #12]
 8013764:	4638      	mov	r0, r7
 8013766:	f004 fbcd 	bl	8017f04 <ucdr_serialize_string>
 801376a:	4605      	mov	r5, r0
 801376c:	e7eb      	b.n	8013746 <uxr_serialize_CREATE_Payload+0xe6>
 801376e:	68f2      	ldr	r2, [r6, #12]
 8013770:	f106 0110 	add.w	r1, r6, #16
 8013774:	4638      	mov	r0, r7
 8013776:	f7fc fdc9 	bl	801030c <ucdr_serialize_sequence_uint8_t>
 801377a:	4605      	mov	r5, r0
 801377c:	e7e3      	b.n	8013746 <uxr_serialize_CREATE_Payload+0xe6>
 801377e:	bf00      	nop

08013780 <uxr_deserialize_GET_INFO_Payload>:
 8013780:	b570      	push	{r4, r5, r6, lr}
 8013782:	2202      	movs	r2, #2
 8013784:	4605      	mov	r5, r0
 8013786:	460e      	mov	r6, r1
 8013788:	f004 faae 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 801378c:	2202      	movs	r2, #2
 801378e:	18b1      	adds	r1, r6, r2
 8013790:	4604      	mov	r4, r0
 8013792:	4628      	mov	r0, r5
 8013794:	f004 faa8 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8013798:	1d31      	adds	r1, r6, #4
 801379a:	4004      	ands	r4, r0
 801379c:	4628      	mov	r0, r5
 801379e:	f7fb ff13 	bl	800f5c8 <ucdr_deserialize_uint32_t>
 80137a2:	b2e4      	uxtb	r4, r4
 80137a4:	4020      	ands	r0, r4
 80137a6:	bd70      	pop	{r4, r5, r6, pc}

080137a8 <uxr_serialize_DELETE_Payload>:
 80137a8:	b570      	push	{r4, r5, r6, lr}
 80137aa:	2202      	movs	r2, #2
 80137ac:	4605      	mov	r5, r0
 80137ae:	460e      	mov	r6, r1
 80137b0:	f004 fa36 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 80137b4:	2202      	movs	r2, #2
 80137b6:	4604      	mov	r4, r0
 80137b8:	18b1      	adds	r1, r6, r2
 80137ba:	4628      	mov	r0, r5
 80137bc:	f004 fa30 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 80137c0:	4020      	ands	r0, r4
 80137c2:	b2c0      	uxtb	r0, r0
 80137c4:	bd70      	pop	{r4, r5, r6, pc}
 80137c6:	bf00      	nop

080137c8 <uxr_deserialize_STATUS_AGENT_Payload>:
 80137c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137cc:	4605      	mov	r5, r0
 80137ce:	460e      	mov	r6, r1
 80137d0:	f7fb fbca 	bl	800ef68 <ucdr_deserialize_uint8_t>
 80137d4:	1c71      	adds	r1, r6, #1
 80137d6:	4604      	mov	r4, r0
 80137d8:	4628      	mov	r0, r5
 80137da:	f7fb fbc5 	bl	800ef68 <ucdr_deserialize_uint8_t>
 80137de:	2204      	movs	r2, #4
 80137e0:	18b1      	adds	r1, r6, r2
 80137e2:	4680      	mov	r8, r0
 80137e4:	4628      	mov	r0, r5
 80137e6:	f004 fa7f 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 80137ea:	f106 0108 	add.w	r1, r6, #8
 80137ee:	4607      	mov	r7, r0
 80137f0:	2202      	movs	r2, #2
 80137f2:	4628      	mov	r0, r5
 80137f4:	f004 fa78 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 80137f8:	ea04 0308 	and.w	r3, r4, r8
 80137fc:	b2db      	uxtb	r3, r3
 80137fe:	ea03 0407 	and.w	r4, r3, r7
 8013802:	2202      	movs	r2, #2
 8013804:	4607      	mov	r7, r0
 8013806:	f106 010a 	add.w	r1, r6, #10
 801380a:	4628      	mov	r0, r5
 801380c:	f004 fa6c 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8013810:	f106 010c 	add.w	r1, r6, #12
 8013814:	4603      	mov	r3, r0
 8013816:	4628      	mov	r0, r5
 8013818:	461d      	mov	r5, r3
 801381a:	f7fb fb77 	bl	800ef0c <ucdr_deserialize_bool>
 801381e:	403c      	ands	r4, r7
 8013820:	4025      	ands	r5, r4
 8013822:	4028      	ands	r0, r5
 8013824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013828 <uxr_deserialize_STATUS_Payload>:
 8013828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801382c:	2202      	movs	r2, #2
 801382e:	4606      	mov	r6, r0
 8013830:	460f      	mov	r7, r1
 8013832:	f004 fa59 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8013836:	2202      	movs	r2, #2
 8013838:	18b9      	adds	r1, r7, r2
 801383a:	4605      	mov	r5, r0
 801383c:	4630      	mov	r0, r6
 801383e:	f004 fa53 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8013842:	1d39      	adds	r1, r7, #4
 8013844:	4680      	mov	r8, r0
 8013846:	4630      	mov	r0, r6
 8013848:	f7fb fb8e 	bl	800ef68 <ucdr_deserialize_uint8_t>
 801384c:	1d79      	adds	r1, r7, #5
 801384e:	4604      	mov	r4, r0
 8013850:	4630      	mov	r0, r6
 8013852:	f7fb fb89 	bl	800ef68 <ucdr_deserialize_uint8_t>
 8013856:	ea05 0508 	and.w	r5, r5, r8
 801385a:	402c      	ands	r4, r5
 801385c:	4020      	ands	r0, r4
 801385e:	b2c0      	uxtb	r0, r0
 8013860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013864 <uxr_serialize_INFO_Payload>:
 8013864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013868:	2202      	movs	r2, #2
 801386a:	460c      	mov	r4, r1
 801386c:	4605      	mov	r5, r0
 801386e:	f004 f9d7 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8013872:	2202      	movs	r2, #2
 8013874:	18a1      	adds	r1, r4, r2
 8013876:	4680      	mov	r8, r0
 8013878:	4628      	mov	r0, r5
 801387a:	f004 f9d1 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 801387e:	7921      	ldrb	r1, [r4, #4]
 8013880:	4607      	mov	r7, r0
 8013882:	4628      	mov	r0, r5
 8013884:	f7fb fb5a 	bl	800ef3c <ucdr_serialize_uint8_t>
 8013888:	7961      	ldrb	r1, [r4, #5]
 801388a:	4606      	mov	r6, r0
 801388c:	4628      	mov	r0, r5
 801388e:	f7fb fb55 	bl	800ef3c <ucdr_serialize_uint8_t>
 8013892:	ea08 0807 	and.w	r8, r8, r7
 8013896:	ea06 0608 	and.w	r6, r6, r8
 801389a:	4006      	ands	r6, r0
 801389c:	7a21      	ldrb	r1, [r4, #8]
 801389e:	4628      	mov	r0, r5
 80138a0:	f7fb fb1e 	bl	800eee0 <ucdr_serialize_bool>
 80138a4:	7a23      	ldrb	r3, [r4, #8]
 80138a6:	b2f7      	uxtb	r7, r6
 80138a8:	4606      	mov	r6, r0
 80138aa:	b96b      	cbnz	r3, 80138c8 <uxr_serialize_INFO_Payload+0x64>
 80138ac:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80138b0:	4628      	mov	r0, r5
 80138b2:	f7fb fb15 	bl	800eee0 <ucdr_serialize_bool>
 80138b6:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80138ba:	4030      	ands	r0, r6
 80138bc:	b2c6      	uxtb	r6, r0
 80138be:	b983      	cbnz	r3, 80138e2 <uxr_serialize_INFO_Payload+0x7e>
 80138c0:	ea06 0007 	and.w	r0, r6, r7
 80138c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138c8:	7b21      	ldrb	r1, [r4, #12]
 80138ca:	4628      	mov	r0, r5
 80138cc:	f7fb fb36 	bl	800ef3c <ucdr_serialize_uint8_t>
 80138d0:	b188      	cbz	r0, 80138f6 <uxr_serialize_INFO_Payload+0x92>
 80138d2:	f104 010c 	add.w	r1, r4, #12
 80138d6:	4628      	mov	r0, r5
 80138d8:	f7ff faf2 	bl	8012ec0 <uxr_serialize_ObjectVariant.part.0>
 80138dc:	4030      	ands	r0, r6
 80138de:	b2c6      	uxtb	r6, r0
 80138e0:	e7e4      	b.n	80138ac <uxr_serialize_INFO_Payload+0x48>
 80138e2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80138e6:	4628      	mov	r0, r5
 80138e8:	f7ff fdb2 	bl	8013450 <uxr_serialize_ActivityInfoVariant>
 80138ec:	4006      	ands	r6, r0
 80138ee:	ea06 0007 	and.w	r0, r6, r7
 80138f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138f6:	4606      	mov	r6, r0
 80138f8:	e7d8      	b.n	80138ac <uxr_serialize_INFO_Payload+0x48>
 80138fa:	bf00      	nop

080138fc <uxr_serialize_READ_DATA_Payload>:
 80138fc:	b570      	push	{r4, r5, r6, lr}
 80138fe:	2202      	movs	r2, #2
 8013900:	4605      	mov	r5, r0
 8013902:	460e      	mov	r6, r1
 8013904:	f004 f98c 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8013908:	2202      	movs	r2, #2
 801390a:	18b1      	adds	r1, r6, r2
 801390c:	4604      	mov	r4, r0
 801390e:	4628      	mov	r0, r5
 8013910:	f004 f986 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8013914:	1d31      	adds	r1, r6, #4
 8013916:	4004      	ands	r4, r0
 8013918:	4628      	mov	r0, r5
 801391a:	f7ff fe5d 	bl	80135d8 <uxr_serialize_ReadSpecification>
 801391e:	b2e4      	uxtb	r4, r4
 8013920:	4020      	ands	r0, r4
 8013922:	bd70      	pop	{r4, r5, r6, pc}

08013924 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013924:	b570      	push	{r4, r5, r6, lr}
 8013926:	2202      	movs	r2, #2
 8013928:	4605      	mov	r5, r0
 801392a:	460e      	mov	r6, r1
 801392c:	f004 f978 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8013930:	2202      	movs	r2, #2
 8013932:	4604      	mov	r4, r0
 8013934:	18b1      	adds	r1, r6, r2
 8013936:	4628      	mov	r0, r5
 8013938:	f004 f972 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 801393c:	4020      	ands	r0, r4
 801393e:	b2c0      	uxtb	r0, r0
 8013940:	bd70      	pop	{r4, r5, r6, pc}
 8013942:	bf00      	nop

08013944 <uxr_serialize_ACKNACK_Payload>:
 8013944:	b570      	push	{r4, r5, r6, lr}
 8013946:	460c      	mov	r4, r1
 8013948:	460e      	mov	r6, r1
 801394a:	f834 1b02 	ldrh.w	r1, [r4], #2
 801394e:	4605      	mov	r5, r0
 8013950:	f7fb fb20 	bl	800ef94 <ucdr_serialize_uint16_t>
 8013954:	2202      	movs	r2, #2
 8013956:	4621      	mov	r1, r4
 8013958:	4604      	mov	r4, r0
 801395a:	4628      	mov	r0, r5
 801395c:	f004 f960 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8013960:	7931      	ldrb	r1, [r6, #4]
 8013962:	4004      	ands	r4, r0
 8013964:	4628      	mov	r0, r5
 8013966:	f7fb fae9 	bl	800ef3c <ucdr_serialize_uint8_t>
 801396a:	b2e4      	uxtb	r4, r4
 801396c:	4020      	ands	r0, r4
 801396e:	bd70      	pop	{r4, r5, r6, pc}

08013970 <uxr_deserialize_ACKNACK_Payload>:
 8013970:	b570      	push	{r4, r5, r6, lr}
 8013972:	4605      	mov	r5, r0
 8013974:	460e      	mov	r6, r1
 8013976:	f7fb fc0d 	bl	800f194 <ucdr_deserialize_uint16_t>
 801397a:	2202      	movs	r2, #2
 801397c:	18b1      	adds	r1, r6, r2
 801397e:	4604      	mov	r4, r0
 8013980:	4628      	mov	r0, r5
 8013982:	f004 f9b1 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8013986:	1d31      	adds	r1, r6, #4
 8013988:	4004      	ands	r4, r0
 801398a:	4628      	mov	r0, r5
 801398c:	f7fb faec 	bl	800ef68 <ucdr_deserialize_uint8_t>
 8013990:	b2e4      	uxtb	r4, r4
 8013992:	4020      	ands	r0, r4
 8013994:	bd70      	pop	{r4, r5, r6, pc}
 8013996:	bf00      	nop

08013998 <uxr_serialize_HEARTBEAT_Payload>:
 8013998:	b570      	push	{r4, r5, r6, lr}
 801399a:	460d      	mov	r5, r1
 801399c:	8809      	ldrh	r1, [r1, #0]
 801399e:	4606      	mov	r6, r0
 80139a0:	f7fb faf8 	bl	800ef94 <ucdr_serialize_uint16_t>
 80139a4:	8869      	ldrh	r1, [r5, #2]
 80139a6:	4604      	mov	r4, r0
 80139a8:	4630      	mov	r0, r6
 80139aa:	f7fb faf3 	bl	800ef94 <ucdr_serialize_uint16_t>
 80139ae:	7929      	ldrb	r1, [r5, #4]
 80139b0:	4004      	ands	r4, r0
 80139b2:	4630      	mov	r0, r6
 80139b4:	f7fb fac2 	bl	800ef3c <ucdr_serialize_uint8_t>
 80139b8:	b2e4      	uxtb	r4, r4
 80139ba:	4020      	ands	r0, r4
 80139bc:	bd70      	pop	{r4, r5, r6, pc}
 80139be:	bf00      	nop

080139c0 <uxr_deserialize_HEARTBEAT_Payload>:
 80139c0:	b570      	push	{r4, r5, r6, lr}
 80139c2:	4605      	mov	r5, r0
 80139c4:	460e      	mov	r6, r1
 80139c6:	f7fb fbe5 	bl	800f194 <ucdr_deserialize_uint16_t>
 80139ca:	1cb1      	adds	r1, r6, #2
 80139cc:	4604      	mov	r4, r0
 80139ce:	4628      	mov	r0, r5
 80139d0:	f7fb fbe0 	bl	800f194 <ucdr_deserialize_uint16_t>
 80139d4:	1d31      	adds	r1, r6, #4
 80139d6:	4004      	ands	r4, r0
 80139d8:	4628      	mov	r0, r5
 80139da:	f7fb fac5 	bl	800ef68 <ucdr_deserialize_uint8_t>
 80139de:	b2e4      	uxtb	r4, r4
 80139e0:	4020      	ands	r0, r4
 80139e2:	bd70      	pop	{r4, r5, r6, pc}

080139e4 <uxr_serialize_TIMESTAMP_Payload>:
 80139e4:	b570      	push	{r4, r5, r6, lr}
 80139e6:	460d      	mov	r5, r1
 80139e8:	6809      	ldr	r1, [r1, #0]
 80139ea:	4606      	mov	r6, r0
 80139ec:	f7fc f8d6 	bl	800fb9c <ucdr_serialize_int32_t>
 80139f0:	6869      	ldr	r1, [r5, #4]
 80139f2:	4604      	mov	r4, r0
 80139f4:	4630      	mov	r0, r6
 80139f6:	f7fb fcb7 	bl	800f368 <ucdr_serialize_uint32_t>
 80139fa:	4020      	ands	r0, r4
 80139fc:	b2c0      	uxtb	r0, r0
 80139fe:	bd70      	pop	{r4, r5, r6, pc}

08013a00 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a04:	4605      	mov	r5, r0
 8013a06:	460e      	mov	r6, r1
 8013a08:	f7fc f960 	bl	800fccc <ucdr_deserialize_int32_t>
 8013a0c:	1d31      	adds	r1, r6, #4
 8013a0e:	4607      	mov	r7, r0
 8013a10:	4628      	mov	r0, r5
 8013a12:	f7fb fdd9 	bl	800f5c8 <ucdr_deserialize_uint32_t>
 8013a16:	f106 0108 	add.w	r1, r6, #8
 8013a1a:	4680      	mov	r8, r0
 8013a1c:	4628      	mov	r0, r5
 8013a1e:	f7fc f955 	bl	800fccc <ucdr_deserialize_int32_t>
 8013a22:	f106 010c 	add.w	r1, r6, #12
 8013a26:	4604      	mov	r4, r0
 8013a28:	4628      	mov	r0, r5
 8013a2a:	f7fb fdcd 	bl	800f5c8 <ucdr_deserialize_uint32_t>
 8013a2e:	ea07 0708 	and.w	r7, r7, r8
 8013a32:	403c      	ands	r4, r7
 8013a34:	f106 0110 	add.w	r1, r6, #16
 8013a38:	4004      	ands	r4, r0
 8013a3a:	4628      	mov	r0, r5
 8013a3c:	f7fc f946 	bl	800fccc <ucdr_deserialize_int32_t>
 8013a40:	f106 0114 	add.w	r1, r6, #20
 8013a44:	4607      	mov	r7, r0
 8013a46:	4628      	mov	r0, r5
 8013a48:	f7fb fdbe 	bl	800f5c8 <ucdr_deserialize_uint32_t>
 8013a4c:	b2e4      	uxtb	r4, r4
 8013a4e:	403c      	ands	r4, r7
 8013a50:	4020      	ands	r0, r4
 8013a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a56:	bf00      	nop

08013a58 <uxr_serialize_SampleIdentity>:
 8013a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a5c:	220c      	movs	r2, #12
 8013a5e:	4604      	mov	r4, r0
 8013a60:	460d      	mov	r5, r1
 8013a62:	f004 f8dd 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8013a66:	2203      	movs	r2, #3
 8013a68:	f105 010c 	add.w	r1, r5, #12
 8013a6c:	4607      	mov	r7, r0
 8013a6e:	4620      	mov	r0, r4
 8013a70:	f004 f8d6 	bl	8017c20 <ucdr_serialize_array_uint8_t>
 8013a74:	7be9      	ldrb	r1, [r5, #15]
 8013a76:	4680      	mov	r8, r0
 8013a78:	4620      	mov	r0, r4
 8013a7a:	f7fb fa5f 	bl	800ef3c <ucdr_serialize_uint8_t>
 8013a7e:	6929      	ldr	r1, [r5, #16]
 8013a80:	4606      	mov	r6, r0
 8013a82:	4620      	mov	r0, r4
 8013a84:	f7fc f88a 	bl	800fb9c <ucdr_serialize_int32_t>
 8013a88:	6969      	ldr	r1, [r5, #20]
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	ea07 0708 	and.w	r7, r7, r8
 8013a92:	461c      	mov	r4, r3
 8013a94:	f7fb fc68 	bl	800f368 <ucdr_serialize_uint32_t>
 8013a98:	403e      	ands	r6, r7
 8013a9a:	4034      	ands	r4, r6
 8013a9c:	4020      	ands	r0, r4
 8013a9e:	b2c0      	uxtb	r0, r0
 8013aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013aa4 <uxr_deserialize_SampleIdentity>:
 8013aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa8:	220c      	movs	r2, #12
 8013aaa:	4604      	mov	r4, r0
 8013aac:	460d      	mov	r5, r1
 8013aae:	f004 f91b 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8013ab2:	2203      	movs	r2, #3
 8013ab4:	f105 010c 	add.w	r1, r5, #12
 8013ab8:	4607      	mov	r7, r0
 8013aba:	4620      	mov	r0, r4
 8013abc:	f004 f914 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8013ac0:	f105 010f 	add.w	r1, r5, #15
 8013ac4:	4680      	mov	r8, r0
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f7fb fa4e 	bl	800ef68 <ucdr_deserialize_uint8_t>
 8013acc:	f105 0110 	add.w	r1, r5, #16
 8013ad0:	4606      	mov	r6, r0
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	f7fc f8fa 	bl	800fccc <ucdr_deserialize_int32_t>
 8013ad8:	f105 0114 	add.w	r1, r5, #20
 8013adc:	4603      	mov	r3, r0
 8013ade:	4620      	mov	r0, r4
 8013ae0:	ea07 0708 	and.w	r7, r7, r8
 8013ae4:	461c      	mov	r4, r3
 8013ae6:	f7fb fd6f 	bl	800f5c8 <ucdr_deserialize_uint32_t>
 8013aea:	403e      	ands	r6, r7
 8013aec:	4034      	ands	r4, r6
 8013aee:	4020      	ands	r0, r4
 8013af0:	b2c0      	uxtb	r0, r0
 8013af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013af6:	bf00      	nop

08013af8 <rcl_client_get_rmw_handle>:
 8013af8:	b118      	cbz	r0, 8013b02 <rcl_client_get_rmw_handle+0xa>
 8013afa:	6800      	ldr	r0, [r0, #0]
 8013afc:	b108      	cbz	r0, 8013b02 <rcl_client_get_rmw_handle+0xa>
 8013afe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013b02:	4770      	bx	lr

08013b04 <rcl_send_request>:
 8013b04:	b570      	push	{r4, r5, r6, lr}
 8013b06:	b082      	sub	sp, #8
 8013b08:	b1e8      	cbz	r0, 8013b46 <rcl_send_request+0x42>
 8013b0a:	4604      	mov	r4, r0
 8013b0c:	6800      	ldr	r0, [r0, #0]
 8013b0e:	b1d0      	cbz	r0, 8013b46 <rcl_send_request+0x42>
 8013b10:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8013b14:	b1bb      	cbz	r3, 8013b46 <rcl_send_request+0x42>
 8013b16:	460e      	mov	r6, r1
 8013b18:	b1d1      	cbz	r1, 8013b50 <rcl_send_request+0x4c>
 8013b1a:	4615      	mov	r5, r2
 8013b1c:	b1c2      	cbz	r2, 8013b50 <rcl_send_request+0x4c>
 8013b1e:	2105      	movs	r1, #5
 8013b20:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013b24:	f002 fc28 	bl	8016378 <__atomic_load_8>
 8013b28:	6823      	ldr	r3, [r4, #0]
 8013b2a:	e9c5 0100 	strd	r0, r1, [r5]
 8013b2e:	462a      	mov	r2, r5
 8013b30:	4631      	mov	r1, r6
 8013b32:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013b36:	f003 fb03 	bl	8017140 <rmw_send_request>
 8013b3a:	4606      	mov	r6, r0
 8013b3c:	b160      	cbz	r0, 8013b58 <rcl_send_request+0x54>
 8013b3e:	2601      	movs	r6, #1
 8013b40:	4630      	mov	r0, r6
 8013b42:	b002      	add	sp, #8
 8013b44:	bd70      	pop	{r4, r5, r6, pc}
 8013b46:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8013b4a:	4630      	mov	r0, r6
 8013b4c:	b002      	add	sp, #8
 8013b4e:	bd70      	pop	{r4, r5, r6, pc}
 8013b50:	260b      	movs	r6, #11
 8013b52:	4630      	mov	r0, r6
 8013b54:	b002      	add	sp, #8
 8013b56:	bd70      	pop	{r4, r5, r6, pc}
 8013b58:	6820      	ldr	r0, [r4, #0]
 8013b5a:	2105      	movs	r1, #5
 8013b5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b60:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013b64:	9100      	str	r1, [sp, #0]
 8013b66:	f002 fc73 	bl	8016450 <__atomic_exchange_8>
 8013b6a:	4630      	mov	r0, r6
 8013b6c:	b002      	add	sp, #8
 8013b6e:	bd70      	pop	{r4, r5, r6, pc}

08013b70 <rcl_take_response>:
 8013b70:	b570      	push	{r4, r5, r6, lr}
 8013b72:	468e      	mov	lr, r1
 8013b74:	460c      	mov	r4, r1
 8013b76:	4616      	mov	r6, r2
 8013b78:	4605      	mov	r5, r0
 8013b7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b7e:	b08c      	sub	sp, #48	@ 0x30
 8013b80:	f10d 0c18 	add.w	ip, sp, #24
 8013b84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b88:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013b8c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013b90:	b35d      	cbz	r5, 8013bea <rcl_take_response+0x7a>
 8013b92:	682b      	ldr	r3, [r5, #0]
 8013b94:	b34b      	cbz	r3, 8013bea <rcl_take_response+0x7a>
 8013b96:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013b9a:	b330      	cbz	r0, 8013bea <rcl_take_response+0x7a>
 8013b9c:	b346      	cbz	r6, 8013bf0 <rcl_take_response+0x80>
 8013b9e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8013bf8 <rcl_take_response+0x88>
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	f88d 3007 	strb.w	r3, [sp, #7]
 8013ba8:	4632      	mov	r2, r6
 8013baa:	f10d 0307 	add.w	r3, sp, #7
 8013bae:	a902      	add	r1, sp, #8
 8013bb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013bb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013bb8:	f003 fbca 	bl	8017350 <rmw_take_response>
 8013bbc:	4605      	mov	r5, r0
 8013bbe:	b9c8      	cbnz	r0, 8013bf4 <rcl_take_response+0x84>
 8013bc0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013bc4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8013bc8:	2a00      	cmp	r2, #0
 8013bca:	bf08      	it	eq
 8013bcc:	461d      	moveq	r5, r3
 8013bce:	f10d 0e18 	add.w	lr, sp, #24
 8013bd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013bd6:	46a4      	mov	ip, r4
 8013bd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013bdc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013be0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013be4:	4628      	mov	r0, r5
 8013be6:	b00c      	add	sp, #48	@ 0x30
 8013be8:	bd70      	pop	{r4, r5, r6, pc}
 8013bea:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8013bee:	e7ee      	b.n	8013bce <rcl_take_response+0x5e>
 8013bf0:	250b      	movs	r5, #11
 8013bf2:	e7ec      	b.n	8013bce <rcl_take_response+0x5e>
 8013bf4:	2501      	movs	r5, #1
 8013bf6:	e7ea      	b.n	8013bce <rcl_take_response+0x5e>
	...

08013c00 <rcl_client_is_valid>:
 8013c00:	b130      	cbz	r0, 8013c10 <rcl_client_is_valid+0x10>
 8013c02:	6800      	ldr	r0, [r0, #0]
 8013c04:	b120      	cbz	r0, 8013c10 <rcl_client_is_valid+0x10>
 8013c06:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013c0a:	3800      	subs	r0, #0
 8013c0c:	bf18      	it	ne
 8013c0e:	2001      	movne	r0, #1
 8013c10:	4770      	bx	lr
 8013c12:	bf00      	nop

08013c14 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013c14:	280b      	cmp	r0, #11
 8013c16:	dc0d      	bgt.n	8013c34 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	db09      	blt.n	8013c30 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013c1c:	280b      	cmp	r0, #11
 8013c1e:	d807      	bhi.n	8013c30 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013c20:	e8df f000 	tbb	[pc, r0]
 8013c24:	07060607 	.word	0x07060607
 8013c28:	06060606 	.word	0x06060606
 8013c2c:	07070606 	.word	0x07070606
 8013c30:	2001      	movs	r0, #1
 8013c32:	4770      	bx	lr
 8013c34:	28cb      	cmp	r0, #203	@ 0xcb
 8013c36:	bf18      	it	ne
 8013c38:	2001      	movne	r0, #1
 8013c3a:	4770      	bx	lr

08013c3c <rcl_get_zero_initialized_context>:
 8013c3c:	4a03      	ldr	r2, [pc, #12]	@ (8013c4c <rcl_get_zero_initialized_context+0x10>)
 8013c3e:	4603      	mov	r3, r0
 8013c40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013c44:	e883 0003 	stmia.w	r3, {r0, r1}
 8013c48:	4618      	mov	r0, r3
 8013c4a:	4770      	bx	lr
 8013c4c:	0801b524 	.word	0x0801b524

08013c50 <rcl_context_is_valid>:
 8013c50:	b118      	cbz	r0, 8013c5a <rcl_context_is_valid+0xa>
 8013c52:	6840      	ldr	r0, [r0, #4]
 8013c54:	3800      	subs	r0, #0
 8013c56:	bf18      	it	ne
 8013c58:	2001      	movne	r0, #1
 8013c5a:	4770      	bx	lr

08013c5c <__cleanup_context>:
 8013c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c60:	4606      	mov	r6, r0
 8013c62:	6800      	ldr	r0, [r0, #0]
 8013c64:	2300      	movs	r3, #0
 8013c66:	6073      	str	r3, [r6, #4]
 8013c68:	2800      	cmp	r0, #0
 8013c6a:	d049      	beq.n	8013d00 <__cleanup_context+0xa4>
 8013c6c:	6947      	ldr	r7, [r0, #20]
 8013c6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013c72:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8013c76:	b137      	cbz	r7, 8013c86 <__cleanup_context+0x2a>
 8013c78:	3014      	adds	r0, #20
 8013c7a:	f7f8 fc1d 	bl	800c4b8 <rcl_init_options_fini>
 8013c7e:	4607      	mov	r7, r0
 8013c80:	2800      	cmp	r0, #0
 8013c82:	d144      	bne.n	8013d0e <__cleanup_context+0xb2>
 8013c84:	6830      	ldr	r0, [r6, #0]
 8013c86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013c88:	b143      	cbz	r3, 8013c9c <__cleanup_context+0x40>
 8013c8a:	3028      	adds	r0, #40	@ 0x28
 8013c8c:	f7fa f80a 	bl	800dca4 <rmw_context_fini>
 8013c90:	b118      	cbz	r0, 8013c9a <__cleanup_context+0x3e>
 8013c92:	2f00      	cmp	r7, #0
 8013c94:	d03e      	beq.n	8013d14 <__cleanup_context+0xb8>
 8013c96:	f7f9 fd13 	bl	800d6c0 <rcutils_reset_error>
 8013c9a:	6830      	ldr	r0, [r6, #0]
 8013c9c:	6a03      	ldr	r3, [r0, #32]
 8013c9e:	b1db      	cbz	r3, 8013cd8 <__cleanup_context+0x7c>
 8013ca0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8013ca4:	2a01      	cmp	r2, #1
 8013ca6:	f17c 0100 	sbcs.w	r1, ip, #0
 8013caa:	db11      	blt.n	8013cd0 <__cleanup_context+0x74>
 8013cac:	2400      	movs	r4, #0
 8013cae:	4625      	mov	r5, r4
 8013cb0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013cb4:	4649      	mov	r1, r9
 8013cb6:	b1b8      	cbz	r0, 8013ce8 <__cleanup_context+0x8c>
 8013cb8:	47c0      	blx	r8
 8013cba:	6833      	ldr	r3, [r6, #0]
 8013cbc:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8013cc0:	3401      	adds	r4, #1
 8013cc2:	f145 0500 	adc.w	r5, r5, #0
 8013cc6:	4294      	cmp	r4, r2
 8013cc8:	eb75 010c 	sbcs.w	r1, r5, ip
 8013ccc:	6a1b      	ldr	r3, [r3, #32]
 8013cce:	dbef      	blt.n	8013cb0 <__cleanup_context+0x54>
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	4649      	mov	r1, r9
 8013cd4:	47c0      	blx	r8
 8013cd6:	6830      	ldr	r0, [r6, #0]
 8013cd8:	4649      	mov	r1, r9
 8013cda:	47c0      	blx	r8
 8013cdc:	2300      	movs	r3, #0
 8013cde:	e9c6 3300 	strd	r3, r3, [r6]
 8013ce2:	4638      	mov	r0, r7
 8013ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ce8:	3401      	adds	r4, #1
 8013cea:	f145 0500 	adc.w	r5, r5, #0
 8013cee:	4294      	cmp	r4, r2
 8013cf0:	eb75 010c 	sbcs.w	r1, r5, ip
 8013cf4:	dbdc      	blt.n	8013cb0 <__cleanup_context+0x54>
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	4649      	mov	r1, r9
 8013cfa:	47c0      	blx	r8
 8013cfc:	6830      	ldr	r0, [r6, #0]
 8013cfe:	e7eb      	b.n	8013cd8 <__cleanup_context+0x7c>
 8013d00:	4607      	mov	r7, r0
 8013d02:	2300      	movs	r3, #0
 8013d04:	e9c6 3300 	strd	r3, r3, [r6]
 8013d08:	4638      	mov	r0, r7
 8013d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d0e:	f7f9 fcd7 	bl	800d6c0 <rcutils_reset_error>
 8013d12:	e7b7      	b.n	8013c84 <__cleanup_context+0x28>
 8013d14:	f7ff ff7e 	bl	8013c14 <rcl_convert_rmw_ret_to_rcl_ret>
 8013d18:	4607      	mov	r7, r0
 8013d1a:	e7bc      	b.n	8013c96 <__cleanup_context+0x3a>

08013d1c <rcl_init>:
 8013d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d20:	1e05      	subs	r5, r0, #0
 8013d22:	b09c      	sub	sp, #112	@ 0x70
 8013d24:	460e      	mov	r6, r1
 8013d26:	4690      	mov	r8, r2
 8013d28:	461f      	mov	r7, r3
 8013d2a:	f340 8099 	ble.w	8013e60 <rcl_init+0x144>
 8013d2e:	2900      	cmp	r1, #0
 8013d30:	f000 8099 	beq.w	8013e66 <rcl_init+0x14a>
 8013d34:	f1a1 0e04 	sub.w	lr, r1, #4
 8013d38:	f04f 0c00 	mov.w	ip, #0
 8013d3c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8013d40:	f10c 0c01 	add.w	ip, ip, #1
 8013d44:	2c00      	cmp	r4, #0
 8013d46:	f000 808e 	beq.w	8013e66 <rcl_init+0x14a>
 8013d4a:	4565      	cmp	r5, ip
 8013d4c:	d1f6      	bne.n	8013d3c <rcl_init+0x20>
 8013d4e:	f1b8 0f00 	cmp.w	r8, #0
 8013d52:	f000 8088 	beq.w	8013e66 <rcl_init+0x14a>
 8013d56:	f8d8 4000 	ldr.w	r4, [r8]
 8013d5a:	2c00      	cmp	r4, #0
 8013d5c:	f000 8083 	beq.w	8013e66 <rcl_init+0x14a>
 8013d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d62:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8013d66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d6a:	6823      	ldr	r3, [r4, #0]
 8013d6c:	f8cc 3000 	str.w	r3, [ip]
 8013d70:	a817      	add	r0, sp, #92	@ 0x5c
 8013d72:	f7f9 fc7f 	bl	800d674 <rcutils_allocator_is_valid>
 8013d76:	2800      	cmp	r0, #0
 8013d78:	d075      	beq.n	8013e66 <rcl_init+0x14a>
 8013d7a:	2f00      	cmp	r7, #0
 8013d7c:	d073      	beq.n	8013e66 <rcl_init+0x14a>
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d175      	bne.n	8013e70 <rcl_init+0x154>
 8013d84:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8013d88:	2178      	movs	r1, #120	@ 0x78
 8013d8a:	2001      	movs	r0, #1
 8013d8c:	4798      	blx	r3
 8013d8e:	4604      	mov	r4, r0
 8013d90:	6038      	str	r0, [r7, #0]
 8013d92:	2800      	cmp	r0, #0
 8013d94:	f000 80a0 	beq.w	8013ed8 <rcl_init+0x1bc>
 8013d98:	a802      	add	r0, sp, #8
 8013d9a:	f002 fe2d 	bl	80169f8 <rmw_get_zero_initialized_context>
 8013d9e:	a902      	add	r1, sp, #8
 8013da0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013da4:	2250      	movs	r2, #80	@ 0x50
 8013da6:	ac17      	add	r4, sp, #92	@ 0x5c
 8013da8:	f005 fff3 	bl	8019d92 <memcpy>
 8013dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013dae:	f8d7 e000 	ldr.w	lr, [r7]
 8013db2:	46f4      	mov	ip, lr
 8013db4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013db8:	6823      	ldr	r3, [r4, #0]
 8013dba:	f8cc 3000 	str.w	r3, [ip]
 8013dbe:	f10e 0114 	add.w	r1, lr, #20
 8013dc2:	4640      	mov	r0, r8
 8013dc4:	f7f8 fba2 	bl	800c50c <rcl_init_options_copy>
 8013dc8:	4604      	mov	r4, r0
 8013dca:	2800      	cmp	r0, #0
 8013dcc:	d144      	bne.n	8013e58 <rcl_init+0x13c>
 8013dce:	f8d7 9000 	ldr.w	r9, [r7]
 8013dd2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8013dd6:	f8c9 0020 	str.w	r0, [r9, #32]
 8013dda:	f8c9 5018 	str.w	r5, [r9, #24]
 8013dde:	f8c9 801c 	str.w	r8, [r9, #28]
 8013de2:	2d00      	cmp	r5, #0
 8013de4:	d04b      	beq.n	8013e7e <rcl_init+0x162>
 8013de6:	2e00      	cmp	r6, #0
 8013de8:	d049      	beq.n	8013e7e <rcl_init+0x162>
 8013dea:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8013dee:	2104      	movs	r1, #4
 8013df0:	4628      	mov	r0, r5
 8013df2:	4798      	blx	r3
 8013df4:	f8c9 0020 	str.w	r0, [r9, #32]
 8013df8:	f8d7 9000 	ldr.w	r9, [r7]
 8013dfc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013e00:	46ca      	mov	sl, r9
 8013e02:	b343      	cbz	r3, 8013e56 <rcl_init+0x13a>
 8013e04:	2d01      	cmp	r5, #1
 8013e06:	f178 0300 	sbcs.w	r3, r8, #0
 8013e0a:	db38      	blt.n	8013e7e <rcl_init+0x162>
 8013e0c:	2400      	movs	r4, #0
 8013e0e:	3e04      	subs	r6, #4
 8013e10:	46a1      	mov	r9, r4
 8013e12:	e00b      	b.n	8013e2c <rcl_init+0x110>
 8013e14:	6831      	ldr	r1, [r6, #0]
 8013e16:	f005 ffbc 	bl	8019d92 <memcpy>
 8013e1a:	3401      	adds	r4, #1
 8013e1c:	f149 0900 	adc.w	r9, r9, #0
 8013e20:	45c8      	cmp	r8, r9
 8013e22:	bf08      	it	eq
 8013e24:	42a5      	cmpeq	r5, r4
 8013e26:	d028      	beq.n	8013e7a <rcl_init+0x15e>
 8013e28:	f8d7 a000 	ldr.w	sl, [r7]
 8013e2c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013e30:	f7ec fa00 	bl	8000234 <strlen>
 8013e34:	1c42      	adds	r2, r0, #1
 8013e36:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013e38:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013e3a:	f8da a020 	ldr.w	sl, [sl, #32]
 8013e3e:	9201      	str	r2, [sp, #4]
 8013e40:	4610      	mov	r0, r2
 8013e42:	4798      	blx	r3
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8013e4a:	6a1b      	ldr	r3, [r3, #32]
 8013e4c:	9a01      	ldr	r2, [sp, #4]
 8013e4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013e52:	2800      	cmp	r0, #0
 8013e54:	d1de      	bne.n	8013e14 <rcl_init+0xf8>
 8013e56:	240a      	movs	r4, #10
 8013e58:	4638      	mov	r0, r7
 8013e5a:	f7ff feff 	bl	8013c5c <__cleanup_context>
 8013e5e:	e003      	b.n	8013e68 <rcl_init+0x14c>
 8013e60:	2900      	cmp	r1, #0
 8013e62:	f43f af74 	beq.w	8013d4e <rcl_init+0x32>
 8013e66:	240b      	movs	r4, #11
 8013e68:	4620      	mov	r0, r4
 8013e6a:	b01c      	add	sp, #112	@ 0x70
 8013e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e70:	2464      	movs	r4, #100	@ 0x64
 8013e72:	4620      	mov	r0, r4
 8013e74:	b01c      	add	sp, #112	@ 0x70
 8013e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e7a:	f8d7 9000 	ldr.w	r9, [r7]
 8013e7e:	491d      	ldr	r1, [pc, #116]	@ (8013ef4 <rcl_init+0x1d8>)
 8013e80:	680b      	ldr	r3, [r1, #0]
 8013e82:	3301      	adds	r3, #1
 8013e84:	d023      	beq.n	8013ece <rcl_init+0x1b2>
 8013e86:	600b      	str	r3, [r1, #0]
 8013e88:	461a      	mov	r2, r3
 8013e8a:	2400      	movs	r4, #0
 8013e8c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013e90:	607b      	str	r3, [r7, #4]
 8013e92:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013e94:	6182      	str	r2, [r0, #24]
 8013e96:	3301      	adds	r3, #1
 8013e98:	61c4      	str	r4, [r0, #28]
 8013e9a:	d01f      	beq.n	8013edc <rcl_init+0x1c0>
 8013e9c:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8013ea0:	b94b      	cbnz	r3, 8013eb6 <rcl_init+0x19a>
 8013ea2:	3030      	adds	r0, #48	@ 0x30
 8013ea4:	f000 f828 	bl	8013ef8 <rcl_get_localhost_only>
 8013ea8:	4604      	mov	r4, r0
 8013eaa:	2800      	cmp	r0, #0
 8013eac:	d1d4      	bne.n	8013e58 <rcl_init+0x13c>
 8013eae:	f8d7 9000 	ldr.w	r9, [r7]
 8013eb2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013eb6:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8013eba:	3018      	adds	r0, #24
 8013ebc:	f7f9 fdbc 	bl	800da38 <rmw_init>
 8013ec0:	4604      	mov	r4, r0
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	d0d0      	beq.n	8013e68 <rcl_init+0x14c>
 8013ec6:	f7ff fea5 	bl	8013c14 <rcl_convert_rmw_ret_to_rcl_ret>
 8013eca:	4604      	mov	r4, r0
 8013ecc:	e7c4      	b.n	8013e58 <rcl_init+0x13c>
 8013ece:	2201      	movs	r2, #1
 8013ed0:	461c      	mov	r4, r3
 8013ed2:	600a      	str	r2, [r1, #0]
 8013ed4:	4613      	mov	r3, r2
 8013ed6:	e7d9      	b.n	8013e8c <rcl_init+0x170>
 8013ed8:	240a      	movs	r4, #10
 8013eda:	e7c5      	b.n	8013e68 <rcl_init+0x14c>
 8013edc:	3024      	adds	r0, #36	@ 0x24
 8013ede:	f004 fd91 	bl	8018a04 <rcl_get_default_domain_id>
 8013ee2:	4604      	mov	r4, r0
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	d1b7      	bne.n	8013e58 <rcl_init+0x13c>
 8013ee8:	f8d7 9000 	ldr.w	r9, [r7]
 8013eec:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013ef0:	e7d4      	b.n	8013e9c <rcl_init+0x180>
 8013ef2:	bf00      	nop
 8013ef4:	2000afb0 	.word	0x2000afb0

08013ef8 <rcl_get_localhost_only>:
 8013ef8:	b510      	push	{r4, lr}
 8013efa:	b082      	sub	sp, #8
 8013efc:	2300      	movs	r3, #0
 8013efe:	9301      	str	r3, [sp, #4]
 8013f00:	b1b8      	cbz	r0, 8013f32 <rcl_get_localhost_only+0x3a>
 8013f02:	4604      	mov	r4, r0
 8013f04:	a901      	add	r1, sp, #4
 8013f06:	480c      	ldr	r0, [pc, #48]	@ (8013f38 <rcl_get_localhost_only+0x40>)
 8013f08:	f002 fada 	bl	80164c0 <rcutils_get_env>
 8013f0c:	b110      	cbz	r0, 8013f14 <rcl_get_localhost_only+0x1c>
 8013f0e:	2001      	movs	r0, #1
 8013f10:	b002      	add	sp, #8
 8013f12:	bd10      	pop	{r4, pc}
 8013f14:	9b01      	ldr	r3, [sp, #4]
 8013f16:	b113      	cbz	r3, 8013f1e <rcl_get_localhost_only+0x26>
 8013f18:	781a      	ldrb	r2, [r3, #0]
 8013f1a:	2a31      	cmp	r2, #49	@ 0x31
 8013f1c:	d004      	beq.n	8013f28 <rcl_get_localhost_only+0x30>
 8013f1e:	2302      	movs	r3, #2
 8013f20:	2000      	movs	r0, #0
 8013f22:	7023      	strb	r3, [r4, #0]
 8013f24:	b002      	add	sp, #8
 8013f26:	bd10      	pop	{r4, pc}
 8013f28:	785b      	ldrb	r3, [r3, #1]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d1f7      	bne.n	8013f1e <rcl_get_localhost_only+0x26>
 8013f2e:	2301      	movs	r3, #1
 8013f30:	e7f6      	b.n	8013f20 <rcl_get_localhost_only+0x28>
 8013f32:	200b      	movs	r0, #11
 8013f34:	b002      	add	sp, #8
 8013f36:	bd10      	pop	{r4, pc}
 8013f38:	0801ae04 	.word	0x0801ae04

08013f3c <rcl_get_zero_initialized_node>:
 8013f3c:	4a03      	ldr	r2, [pc, #12]	@ (8013f4c <rcl_get_zero_initialized_node+0x10>)
 8013f3e:	4603      	mov	r3, r0
 8013f40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f44:	e883 0003 	stmia.w	r3, {r0, r1}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	4770      	bx	lr
 8013f4c:	0801b52c 	.word	0x0801b52c

08013f50 <rcl_node_init>:
 8013f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f54:	b0a9      	sub	sp, #164	@ 0xa4
 8013f56:	4604      	mov	r4, r0
 8013f58:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8013f5c:	a823      	add	r0, sp, #140	@ 0x8c
 8013f5e:	460e      	mov	r6, r1
 8013f60:	4615      	mov	r5, r2
 8013f62:	461f      	mov	r7, r3
 8013f64:	f004 ffc2 	bl	8018eec <rcl_guard_condition_get_default_options>
 8013f68:	f1b8 0f00 	cmp.w	r8, #0
 8013f6c:	f000 80e6 	beq.w	801413c <rcl_node_init+0x1ec>
 8013f70:	4640      	mov	r0, r8
 8013f72:	f7f9 fb7f 	bl	800d674 <rcutils_allocator_is_valid>
 8013f76:	2800      	cmp	r0, #0
 8013f78:	f000 80e0 	beq.w	801413c <rcl_node_init+0x1ec>
 8013f7c:	2e00      	cmp	r6, #0
 8013f7e:	f000 80dd 	beq.w	801413c <rcl_node_init+0x1ec>
 8013f82:	2d00      	cmp	r5, #0
 8013f84:	f000 80da 	beq.w	801413c <rcl_node_init+0x1ec>
 8013f88:	2c00      	cmp	r4, #0
 8013f8a:	f000 80d7 	beq.w	801413c <rcl_node_init+0x1ec>
 8013f8e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013f92:	f1b9 0f00 	cmp.w	r9, #0
 8013f96:	f040 80fd 	bne.w	8014194 <rcl_node_init+0x244>
 8013f9a:	2f00      	cmp	r7, #0
 8013f9c:	f000 80ce 	beq.w	801413c <rcl_node_init+0x1ec>
 8013fa0:	4638      	mov	r0, r7
 8013fa2:	f7ff fe55 	bl	8013c50 <rcl_context_is_valid>
 8013fa6:	4682      	mov	sl, r0
 8013fa8:	2800      	cmp	r0, #0
 8013faa:	f000 80cd 	beq.w	8014148 <rcl_node_init+0x1f8>
 8013fae:	464a      	mov	r2, r9
 8013fb0:	a922      	add	r1, sp, #136	@ 0x88
 8013fb2:	4630      	mov	r0, r6
 8013fb4:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8013fb8:	f002 fe9c 	bl	8016cf4 <rmw_validate_node_name>
 8013fbc:	4681      	mov	r9, r0
 8013fbe:	2800      	cmp	r0, #0
 8013fc0:	f040 80be 	bne.w	8014140 <rcl_node_init+0x1f0>
 8013fc4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	f040 80f0 	bne.w	80141ac <rcl_node_init+0x25c>
 8013fcc:	4628      	mov	r0, r5
 8013fce:	f7ec f931 	bl	8000234 <strlen>
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	f040 80bb 	bne.w	801414e <rcl_node_init+0x1fe>
 8013fd8:	4d7c      	ldr	r5, [pc, #496]	@ (80141cc <rcl_node_init+0x27c>)
 8013fda:	a922      	add	r1, sp, #136	@ 0x88
 8013fdc:	2200      	movs	r2, #0
 8013fde:	4628      	mov	r0, r5
 8013fe0:	f002 fe6a 	bl	8016cb8 <rmw_validate_namespace>
 8013fe4:	4681      	mov	r9, r0
 8013fe6:	2800      	cmp	r0, #0
 8013fe8:	f040 80aa 	bne.w	8014140 <rcl_node_init+0x1f0>
 8013fec:	4682      	mov	sl, r0
 8013fee:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013ff0:	2800      	cmp	r0, #0
 8013ff2:	f040 80e0 	bne.w	80141b6 <rcl_node_init+0x266>
 8013ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8013ffa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013ffe:	2078      	movs	r0, #120	@ 0x78
 8014000:	4798      	blx	r3
 8014002:	4681      	mov	r9, r0
 8014004:	6060      	str	r0, [r4, #4]
 8014006:	2800      	cmp	r0, #0
 8014008:	f000 80ca 	beq.w	80141a0 <rcl_node_init+0x250>
 801400c:	2200      	movs	r2, #0
 801400e:	2300      	movs	r3, #0
 8014010:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8014014:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8014018:	a808      	add	r0, sp, #32
 801401a:	f000 f907 	bl	801422c <rcl_node_get_default_options>
 801401e:	a908      	add	r1, sp, #32
 8014020:	4648      	mov	r0, r9
 8014022:	2268      	movs	r2, #104	@ 0x68
 8014024:	f005 feb5 	bl	8019d92 <memcpy>
 8014028:	6861      	ldr	r1, [r4, #4]
 801402a:	6027      	str	r7, [r4, #0]
 801402c:	4640      	mov	r0, r8
 801402e:	f000 f90b 	bl	8014248 <rcl_node_options_copy>
 8014032:	2800      	cmp	r0, #0
 8014034:	d158      	bne.n	80140e8 <rcl_node_init+0x198>
 8014036:	4628      	mov	r0, r5
 8014038:	f7ec f8fc 	bl	8000234 <strlen>
 801403c:	4428      	add	r0, r5
 801403e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8014042:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8014046:	2b2f      	cmp	r3, #47	@ 0x2f
 8014048:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801404c:	9300      	str	r3, [sp, #0]
 801404e:	bf0c      	ite	eq
 8014050:	4b5f      	ldreq	r3, [pc, #380]	@ (80141d0 <rcl_node_init+0x280>)
 8014052:	4b60      	ldrne	r3, [pc, #384]	@ (80141d4 <rcl_node_init+0x284>)
 8014054:	9302      	str	r3, [sp, #8]
 8014056:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801405a:	9301      	str	r3, [sp, #4]
 801405c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014060:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014064:	f002 fa44 	bl	80164f0 <rcutils_format_string_limit>
 8014068:	6823      	ldr	r3, [r4, #0]
 801406a:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801406e:	6818      	ldr	r0, [r3, #0]
 8014070:	4631      	mov	r1, r6
 8014072:	3028      	adds	r0, #40	@ 0x28
 8014074:	462a      	mov	r2, r5
 8014076:	6866      	ldr	r6, [r4, #4]
 8014078:	f7f9 fec0 	bl	800ddfc <rmw_create_node>
 801407c:	6863      	ldr	r3, [r4, #4]
 801407e:	66b0      	str	r0, [r6, #104]	@ 0x68
 8014080:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014082:	2800      	cmp	r0, #0
 8014084:	d032      	beq.n	80140ec <rcl_node_init+0x19c>
 8014086:	f7f9 ff4d 	bl	800df24 <rmw_node_get_graph_guard_condition>
 801408a:	4681      	mov	r9, r0
 801408c:	b360      	cbz	r0, 80140e8 <rcl_node_init+0x198>
 801408e:	f8d8 3000 	ldr.w	r3, [r8]
 8014092:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014096:	6866      	ldr	r6, [r4, #4]
 8014098:	2008      	movs	r0, #8
 801409a:	4798      	blx	r3
 801409c:	6863      	ldr	r3, [r4, #4]
 801409e:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80140a0:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80140a4:	f1bb 0f00 	cmp.w	fp, #0
 80140a8:	d020      	beq.n	80140ec <rcl_node_init+0x19c>
 80140aa:	a806      	add	r0, sp, #24
 80140ac:	f004 fe42 	bl	8018d34 <rcl_get_zero_initialized_guard_condition>
 80140b0:	a806      	add	r0, sp, #24
 80140b2:	c803      	ldmia	r0, {r0, r1}
 80140b4:	6863      	ldr	r3, [r4, #4]
 80140b6:	46c4      	mov	ip, r8
 80140b8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80140bc:	e88b 0003 	stmia.w	fp, {r0, r1}
 80140c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80140c4:	ae23      	add	r6, sp, #140	@ 0x8c
 80140c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80140c8:	f8dc 3000 	ldr.w	r3, [ip]
 80140cc:	6033      	str	r3, [r6, #0]
 80140ce:	ab28      	add	r3, sp, #160	@ 0xa0
 80140d0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80140d4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80140d8:	4649      	mov	r1, r9
 80140da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80140dc:	463a      	mov	r2, r7
 80140de:	4670      	mov	r0, lr
 80140e0:	f004 fe7e 	bl	8018de0 <rcl_guard_condition_init_from_rmw>
 80140e4:	4681      	mov	r9, r0
 80140e6:	b328      	cbz	r0, 8014134 <rcl_node_init+0x1e4>
 80140e8:	6863      	ldr	r3, [r4, #4]
 80140ea:	b1f3      	cbz	r3, 801412a <rcl_node_init+0x1da>
 80140ec:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80140ee:	b128      	cbz	r0, 80140fc <rcl_node_init+0x1ac>
 80140f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80140f4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80140f8:	4798      	blx	r3
 80140fa:	6863      	ldr	r3, [r4, #4]
 80140fc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80140fe:	b110      	cbz	r0, 8014106 <rcl_node_init+0x1b6>
 8014100:	f7f9 fe94 	bl	800de2c <rmw_destroy_node>
 8014104:	6863      	ldr	r3, [r4, #4]
 8014106:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014108:	b148      	cbz	r0, 801411e <rcl_node_init+0x1ce>
 801410a:	f004 fec9 	bl	8018ea0 <rcl_guard_condition_fini>
 801410e:	6863      	ldr	r3, [r4, #4]
 8014110:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014114:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014116:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801411a:	4798      	blx	r3
 801411c:	6863      	ldr	r3, [r4, #4]
 801411e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014122:	4618      	mov	r0, r3
 8014124:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014128:	4798      	blx	r3
 801412a:	2300      	movs	r3, #0
 801412c:	e9c4 3300 	strd	r3, r3, [r4]
 8014130:	f04f 0901 	mov.w	r9, #1
 8014134:	f1ba 0f00 	cmp.w	sl, #0
 8014138:	d125      	bne.n	8014186 <rcl_node_init+0x236>
 801413a:	e001      	b.n	8014140 <rcl_node_init+0x1f0>
 801413c:	f04f 090b 	mov.w	r9, #11
 8014140:	4648      	mov	r0, r9
 8014142:	b029      	add	sp, #164	@ 0xa4
 8014144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014148:	f04f 0965 	mov.w	r9, #101	@ 0x65
 801414c:	e7f8      	b.n	8014140 <rcl_node_init+0x1f0>
 801414e:	782b      	ldrb	r3, [r5, #0]
 8014150:	2b2f      	cmp	r3, #47	@ 0x2f
 8014152:	f43f af42 	beq.w	8013fda <rcl_node_init+0x8a>
 8014156:	9503      	str	r5, [sp, #12]
 8014158:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801415c:	9300      	str	r3, [sp, #0]
 801415e:	4b1e      	ldr	r3, [pc, #120]	@ (80141d8 <rcl_node_init+0x288>)
 8014160:	9302      	str	r3, [sp, #8]
 8014162:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014166:	9301      	str	r3, [sp, #4]
 8014168:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801416c:	f002 f9c0 	bl	80164f0 <rcutils_format_string_limit>
 8014170:	4605      	mov	r5, r0
 8014172:	b340      	cbz	r0, 80141c6 <rcl_node_init+0x276>
 8014174:	2200      	movs	r2, #0
 8014176:	a922      	add	r1, sp, #136	@ 0x88
 8014178:	9222      	str	r2, [sp, #136]	@ 0x88
 801417a:	f002 fd9d 	bl	8016cb8 <rmw_validate_namespace>
 801417e:	4681      	mov	r9, r0
 8014180:	2800      	cmp	r0, #0
 8014182:	f43f af34 	beq.w	8013fee <rcl_node_init+0x9e>
 8014186:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801418a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801418e:	4628      	mov	r0, r5
 8014190:	4798      	blx	r3
 8014192:	e7d5      	b.n	8014140 <rcl_node_init+0x1f0>
 8014194:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8014198:	4648      	mov	r0, r9
 801419a:	b029      	add	sp, #164	@ 0xa4
 801419c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141a0:	f04f 090a 	mov.w	r9, #10
 80141a4:	f1ba 0f00 	cmp.w	sl, #0
 80141a8:	d1ed      	bne.n	8014186 <rcl_node_init+0x236>
 80141aa:	e7c9      	b.n	8014140 <rcl_node_init+0x1f0>
 80141ac:	f002 fdf4 	bl	8016d98 <rmw_node_name_validation_result_string>
 80141b0:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80141b4:	e7c4      	b.n	8014140 <rcl_node_init+0x1f0>
 80141b6:	f002 fd91 	bl	8016cdc <rmw_namespace_validation_result_string>
 80141ba:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80141be:	f1ba 0f00 	cmp.w	sl, #0
 80141c2:	d1e0      	bne.n	8014186 <rcl_node_init+0x236>
 80141c4:	e7bc      	b.n	8014140 <rcl_node_init+0x1f0>
 80141c6:	f04f 090a 	mov.w	r9, #10
 80141ca:	e7b9      	b.n	8014140 <rcl_node_init+0x1f0>
 80141cc:	0801ae1c 	.word	0x0801ae1c
 80141d0:	0801aca8 	.word	0x0801aca8
 80141d4:	0801ac60 	.word	0x0801ac60
 80141d8:	0801ae20 	.word	0x0801ae20

080141dc <rcl_node_is_valid>:
 80141dc:	b130      	cbz	r0, 80141ec <rcl_node_is_valid+0x10>
 80141de:	6843      	ldr	r3, [r0, #4]
 80141e0:	b123      	cbz	r3, 80141ec <rcl_node_is_valid+0x10>
 80141e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80141e4:	b113      	cbz	r3, 80141ec <rcl_node_is_valid+0x10>
 80141e6:	6800      	ldr	r0, [r0, #0]
 80141e8:	f7ff bd32 	b.w	8013c50 <rcl_context_is_valid>
 80141ec:	2000      	movs	r0, #0
 80141ee:	4770      	bx	lr

080141f0 <rcl_node_get_name>:
 80141f0:	b120      	cbz	r0, 80141fc <rcl_node_get_name+0xc>
 80141f2:	6840      	ldr	r0, [r0, #4]
 80141f4:	b110      	cbz	r0, 80141fc <rcl_node_get_name+0xc>
 80141f6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80141f8:	b100      	cbz	r0, 80141fc <rcl_node_get_name+0xc>
 80141fa:	6880      	ldr	r0, [r0, #8]
 80141fc:	4770      	bx	lr
 80141fe:	bf00      	nop

08014200 <rcl_node_get_namespace>:
 8014200:	b120      	cbz	r0, 801420c <rcl_node_get_namespace+0xc>
 8014202:	6840      	ldr	r0, [r0, #4]
 8014204:	b110      	cbz	r0, 801420c <rcl_node_get_namespace+0xc>
 8014206:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014208:	b100      	cbz	r0, 801420c <rcl_node_get_namespace+0xc>
 801420a:	68c0      	ldr	r0, [r0, #12]
 801420c:	4770      	bx	lr
 801420e:	bf00      	nop

08014210 <rcl_node_get_options>:
 8014210:	b128      	cbz	r0, 801421e <rcl_node_get_options+0xe>
 8014212:	6840      	ldr	r0, [r0, #4]
 8014214:	b118      	cbz	r0, 801421e <rcl_node_get_options+0xe>
 8014216:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8014218:	2b00      	cmp	r3, #0
 801421a:	bf08      	it	eq
 801421c:	2000      	moveq	r0, #0
 801421e:	4770      	bx	lr

08014220 <rcl_node_get_rmw_handle>:
 8014220:	b110      	cbz	r0, 8014228 <rcl_node_get_rmw_handle+0x8>
 8014222:	6840      	ldr	r0, [r0, #4]
 8014224:	b100      	cbz	r0, 8014228 <rcl_node_get_rmw_handle+0x8>
 8014226:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014228:	4770      	bx	lr
 801422a:	bf00      	nop

0801422c <rcl_node_get_default_options>:
 801422c:	b510      	push	{r4, lr}
 801422e:	2268      	movs	r2, #104	@ 0x68
 8014230:	4604      	mov	r4, r0
 8014232:	2100      	movs	r1, #0
 8014234:	f005 fce4 	bl	8019c00 <memset>
 8014238:	4620      	mov	r0, r4
 801423a:	f7f9 fa0d 	bl	800d658 <rcutils_get_default_allocator>
 801423e:	2301      	movs	r3, #1
 8014240:	7523      	strb	r3, [r4, #20]
 8014242:	4620      	mov	r0, r4
 8014244:	bd10      	pop	{r4, pc}
 8014246:	bf00      	nop

08014248 <rcl_node_options_copy>:
 8014248:	b1d0      	cbz	r0, 8014280 <rcl_node_options_copy+0x38>
 801424a:	b570      	push	{r4, r5, r6, lr}
 801424c:	460c      	mov	r4, r1
 801424e:	b1a9      	cbz	r1, 801427c <rcl_node_options_copy+0x34>
 8014250:	4288      	cmp	r0, r1
 8014252:	4684      	mov	ip, r0
 8014254:	d012      	beq.n	801427c <rcl_node_options_copy+0x34>
 8014256:	4605      	mov	r5, r0
 8014258:	8a86      	ldrh	r6, [r0, #20]
 801425a:	468e      	mov	lr, r1
 801425c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801425e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014262:	682b      	ldr	r3, [r5, #0]
 8014264:	f8ce 3000 	str.w	r3, [lr]
 8014268:	f10c 0118 	add.w	r1, ip, #24
 801426c:	2250      	movs	r2, #80	@ 0x50
 801426e:	82a6      	strh	r6, [r4, #20]
 8014270:	f104 0018 	add.w	r0, r4, #24
 8014274:	f005 fd8d 	bl	8019d92 <memcpy>
 8014278:	2000      	movs	r0, #0
 801427a:	bd70      	pop	{r4, r5, r6, pc}
 801427c:	200b      	movs	r0, #11
 801427e:	bd70      	pop	{r4, r5, r6, pc}
 8014280:	200b      	movs	r0, #11
 8014282:	4770      	bx	lr

08014284 <rcl_node_resolve_name>:
 8014284:	b082      	sub	sp, #8
 8014286:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801428a:	b091      	sub	sp, #68	@ 0x44
 801428c:	ac1a      	add	r4, sp, #104	@ 0x68
 801428e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014292:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8014296:	2800      	cmp	r0, #0
 8014298:	d03b      	beq.n	8014312 <rcl_node_resolve_name+0x8e>
 801429a:	460c      	mov	r4, r1
 801429c:	4605      	mov	r5, r0
 801429e:	f7ff ffb7 	bl	8014210 <rcl_node_get_options>
 80142a2:	2800      	cmp	r0, #0
 80142a4:	d037      	beq.n	8014316 <rcl_node_resolve_name+0x92>
 80142a6:	4628      	mov	r0, r5
 80142a8:	f7ff ffa2 	bl	80141f0 <rcl_node_get_name>
 80142ac:	4606      	mov	r6, r0
 80142ae:	4628      	mov	r0, r5
 80142b0:	f7ff ffa6 	bl	8014200 <rcl_node_get_namespace>
 80142b4:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80142b8:	4681      	mov	r9, r0
 80142ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80142be:	ad0b      	add	r5, sp, #44	@ 0x2c
 80142c0:	46ac      	mov	ip, r5
 80142c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142c6:	f8de 3000 	ldr.w	r3, [lr]
 80142ca:	f8cc 3000 	str.w	r3, [ip]
 80142ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80142d0:	b1fb      	cbz	r3, 8014312 <rcl_node_resolve_name+0x8e>
 80142d2:	468a      	mov	sl, r1
 80142d4:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80142d8:	f002 fa62 	bl	80167a0 <rcutils_get_zero_initialized_string_map>
 80142dc:	ab10      	add	r3, sp, #64	@ 0x40
 80142de:	9008      	str	r0, [sp, #32]
 80142e0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80142e4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80142e8:	2100      	movs	r1, #0
 80142ea:	e895 000c 	ldmia.w	r5, {r2, r3}
 80142ee:	a808      	add	r0, sp, #32
 80142f0:	f002 face 	bl	8016890 <rcutils_string_map_init>
 80142f4:	4607      	mov	r7, r0
 80142f6:	b180      	cbz	r0, 801431a <rcl_node_resolve_name+0x96>
 80142f8:	f7f9 f9ca 	bl	800d690 <rcutils_get_error_string>
 80142fc:	f7f9 f9e0 	bl	800d6c0 <rcutils_reset_error>
 8014300:	2f0a      	cmp	r7, #10
 8014302:	bf18      	it	ne
 8014304:	2701      	movne	r7, #1
 8014306:	4638      	mov	r0, r7
 8014308:	b011      	add	sp, #68	@ 0x44
 801430a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801430e:	b002      	add	sp, #8
 8014310:	4770      	bx	lr
 8014312:	270b      	movs	r7, #11
 8014314:	e7f7      	b.n	8014306 <rcl_node_resolve_name+0x82>
 8014316:	2701      	movs	r7, #1
 8014318:	e7f5      	b.n	8014306 <rcl_node_resolve_name+0x82>
 801431a:	9009      	str	r0, [sp, #36]	@ 0x24
 801431c:	9007      	str	r0, [sp, #28]
 801431e:	a808      	add	r0, sp, #32
 8014320:	f004 fd02 	bl	8018d28 <rcl_get_default_topic_name_substitutions>
 8014324:	4607      	mov	r7, r0
 8014326:	b1a8      	cbz	r0, 8014354 <rcl_node_resolve_name+0xd0>
 8014328:	280a      	cmp	r0, #10
 801432a:	9c07      	ldr	r4, [sp, #28]
 801432c:	d000      	beq.n	8014330 <rcl_node_resolve_name+0xac>
 801432e:	2701      	movs	r7, #1
 8014330:	a808      	add	r0, sp, #32
 8014332:	f002 faed 	bl	8016910 <rcutils_string_map_fini>
 8014336:	2800      	cmp	r0, #0
 8014338:	d13d      	bne.n	80143b6 <rcl_node_resolve_name+0x132>
 801433a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801433c:	4659      	mov	r1, fp
 801433e:	47d0      	blx	sl
 8014340:	4659      	mov	r1, fp
 8014342:	4620      	mov	r0, r4
 8014344:	47d0      	blx	sl
 8014346:	f1b8 0f00 	cmp.w	r8, #0
 801434a:	d0dc      	beq.n	8014306 <rcl_node_resolve_name+0x82>
 801434c:	2f67      	cmp	r7, #103	@ 0x67
 801434e:	bf08      	it	eq
 8014350:	2768      	moveq	r7, #104	@ 0x68
 8014352:	e7d8      	b.n	8014306 <rcl_node_resolve_name+0x82>
 8014354:	ab09      	add	r3, sp, #36	@ 0x24
 8014356:	9305      	str	r3, [sp, #20]
 8014358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801435a:	46ec      	mov	ip, sp
 801435c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014360:	682b      	ldr	r3, [r5, #0]
 8014362:	f8cc 3000 	str.w	r3, [ip]
 8014366:	464a      	mov	r2, r9
 8014368:	4631      	mov	r1, r6
 801436a:	4620      	mov	r0, r4
 801436c:	ab08      	add	r3, sp, #32
 801436e:	f004 fb7d 	bl	8018a6c <rcl_expand_topic_name>
 8014372:	4607      	mov	r7, r0
 8014374:	b9b8      	cbnz	r0, 80143a6 <rcl_node_resolve_name+0x122>
 8014376:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014378:	9009      	str	r0, [sp, #36]	@ 0x24
 801437a:	4602      	mov	r2, r0
 801437c:	a90a      	add	r1, sp, #40	@ 0x28
 801437e:	4620      	mov	r0, r4
 8014380:	f002 fbd6 	bl	8016b30 <rmw_validate_full_topic_name>
 8014384:	b988      	cbnz	r0, 80143aa <rcl_node_resolve_name+0x126>
 8014386:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014388:	b9d5      	cbnz	r5, 80143c0 <rcl_node_resolve_name+0x13c>
 801438a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801438c:	a808      	add	r0, sp, #32
 801438e:	601c      	str	r4, [r3, #0]
 8014390:	f002 fabe 	bl	8016910 <rcutils_string_map_fini>
 8014394:	4607      	mov	r7, r0
 8014396:	b1a8      	cbz	r0, 80143c4 <rcl_node_resolve_name+0x140>
 8014398:	f7f9 f97a 	bl	800d690 <rcutils_get_error_string>
 801439c:	462c      	mov	r4, r5
 801439e:	f7f9 f98f 	bl	800d6c0 <rcutils_reset_error>
 80143a2:	2701      	movs	r7, #1
 80143a4:	e7c9      	b.n	801433a <rcl_node_resolve_name+0xb6>
 80143a6:	9c07      	ldr	r4, [sp, #28]
 80143a8:	e7c2      	b.n	8014330 <rcl_node_resolve_name+0xac>
 80143aa:	f7f9 f971 	bl	800d690 <rcutils_get_error_string>
 80143ae:	2701      	movs	r7, #1
 80143b0:	f7f9 f986 	bl	800d6c0 <rcutils_reset_error>
 80143b4:	e7bc      	b.n	8014330 <rcl_node_resolve_name+0xac>
 80143b6:	f7f9 f96b 	bl	800d690 <rcutils_get_error_string>
 80143ba:	f7f9 f981 	bl	800d6c0 <rcutils_reset_error>
 80143be:	e7bc      	b.n	801433a <rcl_node_resolve_name+0xb6>
 80143c0:	2767      	movs	r7, #103	@ 0x67
 80143c2:	e7b5      	b.n	8014330 <rcl_node_resolve_name+0xac>
 80143c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80143c6:	4659      	mov	r1, fp
 80143c8:	47d0      	blx	sl
 80143ca:	4659      	mov	r1, fp
 80143cc:	4638      	mov	r0, r7
 80143ce:	47d0      	blx	sl
 80143d0:	e799      	b.n	8014306 <rcl_node_resolve_name+0x82>
 80143d2:	bf00      	nop

080143d4 <rcl_service_get_rmw_handle>:
 80143d4:	b118      	cbz	r0, 80143de <rcl_service_get_rmw_handle+0xa>
 80143d6:	6800      	ldr	r0, [r0, #0]
 80143d8:	b108      	cbz	r0, 80143de <rcl_service_get_rmw_handle+0xa>
 80143da:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80143de:	4770      	bx	lr

080143e0 <rcl_take_request>:
 80143e0:	b570      	push	{r4, r5, r6, lr}
 80143e2:	468e      	mov	lr, r1
 80143e4:	460c      	mov	r4, r1
 80143e6:	4616      	mov	r6, r2
 80143e8:	4605      	mov	r5, r0
 80143ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80143ee:	b08c      	sub	sp, #48	@ 0x30
 80143f0:	f10d 0c18 	add.w	ip, sp, #24
 80143f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80143f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80143fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014400:	b30d      	cbz	r5, 8014446 <rcl_take_request+0x66>
 8014402:	682b      	ldr	r3, [r5, #0]
 8014404:	b1fb      	cbz	r3, 8014446 <rcl_take_request+0x66>
 8014406:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801440a:	b1e0      	cbz	r0, 8014446 <rcl_take_request+0x66>
 801440c:	b336      	cbz	r6, 801445c <rcl_take_request+0x7c>
 801440e:	2300      	movs	r3, #0
 8014410:	f88d 3007 	strb.w	r3, [sp, #7]
 8014414:	4632      	mov	r2, r6
 8014416:	f10d 0307 	add.w	r3, sp, #7
 801441a:	a902      	add	r1, sp, #8
 801441c:	f002 fede 	bl	80171dc <rmw_take_request>
 8014420:	4605      	mov	r5, r0
 8014422:	b198      	cbz	r0, 801444c <rcl_take_request+0x6c>
 8014424:	280a      	cmp	r0, #10
 8014426:	bf18      	it	ne
 8014428:	2501      	movne	r5, #1
 801442a:	f10d 0e18 	add.w	lr, sp, #24
 801442e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014432:	46a4      	mov	ip, r4
 8014434:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014438:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801443c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014440:	4628      	mov	r0, r5
 8014442:	b00c      	add	sp, #48	@ 0x30
 8014444:	bd70      	pop	{r4, r5, r6, pc}
 8014446:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801444a:	e7ee      	b.n	801442a <rcl_take_request+0x4a>
 801444c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014450:	f240 2359 	movw	r3, #601	@ 0x259
 8014454:	2a00      	cmp	r2, #0
 8014456:	bf08      	it	eq
 8014458:	461d      	moveq	r5, r3
 801445a:	e7e6      	b.n	801442a <rcl_take_request+0x4a>
 801445c:	250b      	movs	r5, #11
 801445e:	e7e4      	b.n	801442a <rcl_take_request+0x4a>

08014460 <rcl_send_response>:
 8014460:	b170      	cbz	r0, 8014480 <rcl_send_response+0x20>
 8014462:	6800      	ldr	r0, [r0, #0]
 8014464:	b160      	cbz	r0, 8014480 <rcl_send_response+0x20>
 8014466:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801446a:	b148      	cbz	r0, 8014480 <rcl_send_response+0x20>
 801446c:	b159      	cbz	r1, 8014486 <rcl_send_response+0x26>
 801446e:	b510      	push	{r4, lr}
 8014470:	b15a      	cbz	r2, 801448a <rcl_send_response+0x2a>
 8014472:	f002 ff11 	bl	8017298 <rmw_send_response>
 8014476:	b110      	cbz	r0, 801447e <rcl_send_response+0x1e>
 8014478:	2802      	cmp	r0, #2
 801447a:	bf18      	it	ne
 801447c:	2001      	movne	r0, #1
 801447e:	bd10      	pop	{r4, pc}
 8014480:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014484:	4770      	bx	lr
 8014486:	200b      	movs	r0, #11
 8014488:	4770      	bx	lr
 801448a:	200b      	movs	r0, #11
 801448c:	bd10      	pop	{r4, pc}
 801448e:	bf00      	nop

08014490 <rcl_service_is_valid>:
 8014490:	b130      	cbz	r0, 80144a0 <rcl_service_is_valid+0x10>
 8014492:	6800      	ldr	r0, [r0, #0]
 8014494:	b120      	cbz	r0, 80144a0 <rcl_service_is_valid+0x10>
 8014496:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801449a:	3800      	subs	r0, #0
 801449c:	bf18      	it	ne
 801449e:	2001      	movne	r0, #1
 80144a0:	4770      	bx	lr
 80144a2:	bf00      	nop

080144a4 <rcl_take>:
 80144a4:	2800      	cmp	r0, #0
 80144a6:	d04a      	beq.n	801453e <rcl_take+0x9a>
 80144a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144ac:	4604      	mov	r4, r0
 80144ae:	6800      	ldr	r0, [r0, #0]
 80144b0:	b0a4      	sub	sp, #144	@ 0x90
 80144b2:	2800      	cmp	r0, #0
 80144b4:	d03b      	beq.n	801452e <rcl_take+0x8a>
 80144b6:	461f      	mov	r7, r3
 80144b8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d036      	beq.n	801452e <rcl_take+0x8a>
 80144c0:	460e      	mov	r6, r1
 80144c2:	2900      	cmp	r1, #0
 80144c4:	d039      	beq.n	801453a <rcl_take+0x96>
 80144c6:	4615      	mov	r5, r2
 80144c8:	2a00      	cmp	r2, #0
 80144ca:	d03c      	beq.n	8014546 <rcl_take+0xa2>
 80144cc:	a802      	add	r0, sp, #8
 80144ce:	f002 fb27 	bl	8016b20 <rmw_get_zero_initialized_message_info>
 80144d2:	f10d 0c08 	add.w	ip, sp, #8
 80144d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144da:	46ae      	mov	lr, r5
 80144dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80144e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80144e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80144f0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80144f4:	f04f 0800 	mov.w	r8, #0
 80144f8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80144fc:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8014500:	6822      	ldr	r2, [r4, #0]
 8014502:	462b      	mov	r3, r5
 8014504:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8014508:	9700      	str	r7, [sp, #0]
 801450a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801450e:	4631      	mov	r1, r6
 8014510:	f002 ff68 	bl	80173e4 <rmw_take_with_info>
 8014514:	4603      	mov	r3, r0
 8014516:	b9c0      	cbnz	r0, 801454a <rcl_take+0xa6>
 8014518:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801451c:	f240 1291 	movw	r2, #401	@ 0x191
 8014520:	2900      	cmp	r1, #0
 8014522:	bf08      	it	eq
 8014524:	4613      	moveq	r3, r2
 8014526:	4618      	mov	r0, r3
 8014528:	b024      	add	sp, #144	@ 0x90
 801452a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801452e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014532:	4618      	mov	r0, r3
 8014534:	b024      	add	sp, #144	@ 0x90
 8014536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801453a:	230b      	movs	r3, #11
 801453c:	e7f3      	b.n	8014526 <rcl_take+0x82>
 801453e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014542:	4618      	mov	r0, r3
 8014544:	4770      	bx	lr
 8014546:	ad14      	add	r5, sp, #80	@ 0x50
 8014548:	e7c0      	b.n	80144cc <rcl_take+0x28>
 801454a:	f7ff fb63 	bl	8013c14 <rcl_convert_rmw_ret_to_rcl_ret>
 801454e:	4603      	mov	r3, r0
 8014550:	e7e9      	b.n	8014526 <rcl_take+0x82>
 8014552:	bf00      	nop

08014554 <rcl_subscription_get_rmw_handle>:
 8014554:	b118      	cbz	r0, 801455e <rcl_subscription_get_rmw_handle+0xa>
 8014556:	6800      	ldr	r0, [r0, #0]
 8014558:	b108      	cbz	r0, 801455e <rcl_subscription_get_rmw_handle+0xa>
 801455a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801455e:	4770      	bx	lr

08014560 <rcl_subscription_is_valid>:
 8014560:	b130      	cbz	r0, 8014570 <rcl_subscription_is_valid+0x10>
 8014562:	6800      	ldr	r0, [r0, #0]
 8014564:	b120      	cbz	r0, 8014570 <rcl_subscription_is_valid+0x10>
 8014566:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801456a:	3800      	subs	r0, #0
 801456c:	bf18      	it	ne
 801456e:	2001      	movne	r0, #1
 8014570:	4770      	bx	lr
 8014572:	bf00      	nop

08014574 <rcl_get_system_time>:
 8014574:	4608      	mov	r0, r1
 8014576:	f7f9 b8bf 	b.w	800d6f8 <rcutils_system_time_now>
 801457a:	bf00      	nop

0801457c <rcl_get_steady_time>:
 801457c:	4608      	mov	r0, r1
 801457e:	f7f9 b8e3 	b.w	800d748 <rcutils_steady_time_now>
 8014582:	bf00      	nop

08014584 <rcl_get_ros_time>:
 8014584:	7a03      	ldrb	r3, [r0, #8]
 8014586:	b510      	push	{r4, lr}
 8014588:	460c      	mov	r4, r1
 801458a:	b133      	cbz	r3, 801459a <rcl_get_ros_time+0x16>
 801458c:	2105      	movs	r1, #5
 801458e:	f001 fef3 	bl	8016378 <__atomic_load_8>
 8014592:	e9c4 0100 	strd	r0, r1, [r4]
 8014596:	2000      	movs	r0, #0
 8014598:	bd10      	pop	{r4, pc}
 801459a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801459e:	4608      	mov	r0, r1
 80145a0:	f7f9 b8aa 	b.w	800d6f8 <rcutils_system_time_now>

080145a4 <rcl_clock_init>:
 80145a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145a6:	4605      	mov	r5, r0
 80145a8:	4610      	mov	r0, r2
 80145aa:	4614      	mov	r4, r2
 80145ac:	460e      	mov	r6, r1
 80145ae:	f7f9 f861 	bl	800d674 <rcutils_allocator_is_valid>
 80145b2:	b128      	cbz	r0, 80145c0 <rcl_clock_init+0x1c>
 80145b4:	2d03      	cmp	r5, #3
 80145b6:	d803      	bhi.n	80145c0 <rcl_clock_init+0x1c>
 80145b8:	e8df f005 	tbb	[pc, r5]
 80145bc:	06532e1d 	.word	0x06532e1d
 80145c0:	f04f 0c0b 	mov.w	ip, #11
 80145c4:	4660      	mov	r0, ip
 80145c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145c8:	2e00      	cmp	r6, #0
 80145ca:	d0f9      	beq.n	80145c0 <rcl_clock_init+0x1c>
 80145cc:	2c00      	cmp	r4, #0
 80145ce:	d0f7      	beq.n	80145c0 <rcl_clock_init+0x1c>
 80145d0:	2300      	movs	r3, #0
 80145d2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80145d6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 801468c <rcl_clock_init+0xe8>
 80145da:	6133      	str	r3, [r6, #16]
 80145dc:	f106 0514 	add.w	r5, r6, #20
 80145e0:	469c      	mov	ip, r3
 80145e2:	2703      	movs	r7, #3
 80145e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80145e8:	6823      	ldr	r3, [r4, #0]
 80145ea:	602b      	str	r3, [r5, #0]
 80145ec:	7037      	strb	r7, [r6, #0]
 80145ee:	f8c6 e00c 	str.w	lr, [r6, #12]
 80145f2:	4660      	mov	r0, ip
 80145f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145f6:	2e00      	cmp	r6, #0
 80145f8:	d0e2      	beq.n	80145c0 <rcl_clock_init+0x1c>
 80145fa:	2300      	movs	r3, #0
 80145fc:	7033      	strb	r3, [r6, #0]
 80145fe:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014602:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014606:	469c      	mov	ip, r3
 8014608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801460a:	f106 0514 	add.w	r5, r6, #20
 801460e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014610:	6823      	ldr	r3, [r4, #0]
 8014612:	602b      	str	r3, [r5, #0]
 8014614:	4660      	mov	r0, ip
 8014616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014618:	2e00      	cmp	r6, #0
 801461a:	d0d1      	beq.n	80145c0 <rcl_clock_init+0x1c>
 801461c:	2c00      	cmp	r4, #0
 801461e:	d0cf      	beq.n	80145c0 <rcl_clock_init+0x1c>
 8014620:	2700      	movs	r7, #0
 8014622:	7037      	strb	r7, [r6, #0]
 8014624:	46a4      	mov	ip, r4
 8014626:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801462a:	f106 0514 	add.w	r5, r6, #20
 801462e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014632:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014638:	f8dc 3000 	ldr.w	r3, [ip]
 801463c:	602b      	str	r3, [r5, #0]
 801463e:	6921      	ldr	r1, [r4, #16]
 8014640:	6823      	ldr	r3, [r4, #0]
 8014642:	2010      	movs	r0, #16
 8014644:	4798      	blx	r3
 8014646:	6130      	str	r0, [r6, #16]
 8014648:	b1d0      	cbz	r0, 8014680 <rcl_clock_init+0xdc>
 801464a:	2200      	movs	r2, #0
 801464c:	2300      	movs	r3, #0
 801464e:	e9c0 2300 	strd	r2, r3, [r0]
 8014652:	2301      	movs	r3, #1
 8014654:	7207      	strb	r7, [r0, #8]
 8014656:	4a0c      	ldr	r2, [pc, #48]	@ (8014688 <rcl_clock_init+0xe4>)
 8014658:	7033      	strb	r3, [r6, #0]
 801465a:	46bc      	mov	ip, r7
 801465c:	60f2      	str	r2, [r6, #12]
 801465e:	4660      	mov	r0, ip
 8014660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014662:	2e00      	cmp	r6, #0
 8014664:	d0ac      	beq.n	80145c0 <rcl_clock_init+0x1c>
 8014666:	2c00      	cmp	r4, #0
 8014668:	d0aa      	beq.n	80145c0 <rcl_clock_init+0x1c>
 801466a:	2300      	movs	r3, #0
 801466c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014670:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8014690 <rcl_clock_init+0xec>
 8014674:	6133      	str	r3, [r6, #16]
 8014676:	f106 0514 	add.w	r5, r6, #20
 801467a:	469c      	mov	ip, r3
 801467c:	2702      	movs	r7, #2
 801467e:	e7b1      	b.n	80145e4 <rcl_clock_init+0x40>
 8014680:	f04f 0c0a 	mov.w	ip, #10
 8014684:	e79e      	b.n	80145c4 <rcl_clock_init+0x20>
 8014686:	bf00      	nop
 8014688:	08014585 	.word	0x08014585
 801468c:	0801457d 	.word	0x0801457d
 8014690:	08014575 	.word	0x08014575

08014694 <rcl_clock_get_now>:
 8014694:	b140      	cbz	r0, 80146a8 <rcl_clock_get_now+0x14>
 8014696:	b139      	cbz	r1, 80146a8 <rcl_clock_get_now+0x14>
 8014698:	7803      	ldrb	r3, [r0, #0]
 801469a:	b11b      	cbz	r3, 80146a4 <rcl_clock_get_now+0x10>
 801469c:	68c3      	ldr	r3, [r0, #12]
 801469e:	b10b      	cbz	r3, 80146a4 <rcl_clock_get_now+0x10>
 80146a0:	6900      	ldr	r0, [r0, #16]
 80146a2:	4718      	bx	r3
 80146a4:	2001      	movs	r0, #1
 80146a6:	4770      	bx	lr
 80146a8:	200b      	movs	r0, #11
 80146aa:	4770      	bx	lr

080146ac <rcl_clock_add_jump_callback>:
 80146ac:	b082      	sub	sp, #8
 80146ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146b2:	a906      	add	r1, sp, #24
 80146b4:	e881 000c 	stmia.w	r1, {r2, r3}
 80146b8:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80146bc:	b320      	cbz	r0, 8014708 <rcl_clock_add_jump_callback+0x5c>
 80146be:	4604      	mov	r4, r0
 80146c0:	3014      	adds	r0, #20
 80146c2:	f7f8 ffd7 	bl	800d674 <rcutils_allocator_is_valid>
 80146c6:	b1f8      	cbz	r0, 8014708 <rcl_clock_add_jump_callback+0x5c>
 80146c8:	b1f6      	cbz	r6, 8014708 <rcl_clock_add_jump_callback+0x5c>
 80146ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	db1b      	blt.n	8014708 <rcl_clock_add_jump_callback+0x5c>
 80146d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80146d4:	2a01      	cmp	r2, #1
 80146d6:	f173 0300 	sbcs.w	r3, r3, #0
 80146da:	da15      	bge.n	8014708 <rcl_clock_add_jump_callback+0x5c>
 80146dc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80146e0:	2f00      	cmp	r7, #0
 80146e2:	d042      	beq.n	801476a <rcl_clock_add_jump_callback+0xbe>
 80146e4:	2300      	movs	r3, #0
 80146e6:	4602      	mov	r2, r0
 80146e8:	e003      	b.n	80146f2 <rcl_clock_add_jump_callback+0x46>
 80146ea:	42bb      	cmp	r3, r7
 80146ec:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80146f0:	d011      	beq.n	8014716 <rcl_clock_add_jump_callback+0x6a>
 80146f2:	6811      	ldr	r1, [r2, #0]
 80146f4:	42b1      	cmp	r1, r6
 80146f6:	f103 0301 	add.w	r3, r3, #1
 80146fa:	d1f6      	bne.n	80146ea <rcl_clock_add_jump_callback+0x3e>
 80146fc:	6a11      	ldr	r1, [r2, #32]
 80146fe:	42a9      	cmp	r1, r5
 8014700:	d1f3      	bne.n	80146ea <rcl_clock_add_jump_callback+0x3e>
 8014702:	f04f 0e01 	mov.w	lr, #1
 8014706:	e001      	b.n	801470c <rcl_clock_add_jump_callback+0x60>
 8014708:	f04f 0e0b 	mov.w	lr, #11
 801470c:	4670      	mov	r0, lr
 801470e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014712:	b002      	add	sp, #8
 8014714:	4770      	bx	lr
 8014716:	3301      	adds	r3, #1
 8014718:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801471c:	00d9      	lsls	r1, r3, #3
 801471e:	69e3      	ldr	r3, [r4, #28]
 8014720:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014722:	4798      	blx	r3
 8014724:	b1f0      	cbz	r0, 8014764 <rcl_clock_add_jump_callback+0xb8>
 8014726:	68a3      	ldr	r3, [r4, #8]
 8014728:	6060      	str	r0, [r4, #4]
 801472a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801472e:	f10d 0c18 	add.w	ip, sp, #24
 8014732:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8014736:	f103 0801 	add.w	r8, r3, #1
 801473a:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801473e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014742:	f106 0708 	add.w	r7, r6, #8
 8014746:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014748:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801474c:	f04f 0e00 	mov.w	lr, #0
 8014750:	e887 0003 	stmia.w	r7, {r0, r1}
 8014754:	6235      	str	r5, [r6, #32]
 8014756:	4670      	mov	r0, lr
 8014758:	f8c4 8008 	str.w	r8, [r4, #8]
 801475c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014760:	b002      	add	sp, #8
 8014762:	4770      	bx	lr
 8014764:	f04f 0e0a 	mov.w	lr, #10
 8014768:	e7d0      	b.n	801470c <rcl_clock_add_jump_callback+0x60>
 801476a:	2128      	movs	r1, #40	@ 0x28
 801476c:	e7d7      	b.n	801471e <rcl_clock_add_jump_callback+0x72>
 801476e:	bf00      	nop

08014770 <rcl_clock_remove_jump_callback>:
 8014770:	2800      	cmp	r0, #0
 8014772:	d057      	beq.n	8014824 <rcl_clock_remove_jump_callback+0xb4>
 8014774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014778:	4605      	mov	r5, r0
 801477a:	3014      	adds	r0, #20
 801477c:	4688      	mov	r8, r1
 801477e:	4692      	mov	sl, r2
 8014780:	f7f8 ff78 	bl	800d674 <rcutils_allocator_is_valid>
 8014784:	2800      	cmp	r0, #0
 8014786:	d03b      	beq.n	8014800 <rcl_clock_remove_jump_callback+0x90>
 8014788:	f1b8 0f00 	cmp.w	r8, #0
 801478c:	d038      	beq.n	8014800 <rcl_clock_remove_jump_callback+0x90>
 801478e:	68ae      	ldr	r6, [r5, #8]
 8014790:	b166      	cbz	r6, 80147ac <rcl_clock_remove_jump_callback+0x3c>
 8014792:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014796:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801479a:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801479e:	464c      	mov	r4, r9
 80147a0:	6823      	ldr	r3, [r4, #0]
 80147a2:	4543      	cmp	r3, r8
 80147a4:	d005      	beq.n	80147b2 <rcl_clock_remove_jump_callback+0x42>
 80147a6:	3428      	adds	r4, #40	@ 0x28
 80147a8:	42a7      	cmp	r7, r4
 80147aa:	d1f9      	bne.n	80147a0 <rcl_clock_remove_jump_callback+0x30>
 80147ac:	2001      	movs	r0, #1
 80147ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147b2:	6a23      	ldr	r3, [r4, #32]
 80147b4:	3428      	adds	r4, #40	@ 0x28
 80147b6:	42bc      	cmp	r4, r7
 80147b8:	d02d      	beq.n	8014816 <rcl_clock_remove_jump_callback+0xa6>
 80147ba:	4553      	cmp	r3, sl
 80147bc:	d1f0      	bne.n	80147a0 <rcl_clock_remove_jump_callback+0x30>
 80147be:	46a6      	mov	lr, r4
 80147c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80147c4:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80147c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80147d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147d4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80147d8:	3428      	adds	r4, #40	@ 0x28
 80147da:	42a7      	cmp	r7, r4
 80147dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80147e0:	d1ed      	bne.n	80147be <rcl_clock_remove_jump_callback+0x4e>
 80147e2:	3e01      	subs	r6, #1
 80147e4:	60ae      	str	r6, [r5, #8]
 80147e6:	b176      	cbz	r6, 8014806 <rcl_clock_remove_jump_callback+0x96>
 80147e8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80147ec:	69eb      	ldr	r3, [r5, #28]
 80147ee:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80147f0:	00f1      	lsls	r1, r6, #3
 80147f2:	4648      	mov	r0, r9
 80147f4:	4798      	blx	r3
 80147f6:	b1b8      	cbz	r0, 8014828 <rcl_clock_remove_jump_callback+0xb8>
 80147f8:	6068      	str	r0, [r5, #4]
 80147fa:	2000      	movs	r0, #0
 80147fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014800:	200b      	movs	r0, #11
 8014802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014806:	4648      	mov	r0, r9
 8014808:	69ab      	ldr	r3, [r5, #24]
 801480a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801480c:	4798      	blx	r3
 801480e:	606e      	str	r6, [r5, #4]
 8014810:	4630      	mov	r0, r6
 8014812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014816:	4553      	cmp	r3, sl
 8014818:	d1c8      	bne.n	80147ac <rcl_clock_remove_jump_callback+0x3c>
 801481a:	3e01      	subs	r6, #1
 801481c:	60ae      	str	r6, [r5, #8]
 801481e:	2e00      	cmp	r6, #0
 8014820:	d1e2      	bne.n	80147e8 <rcl_clock_remove_jump_callback+0x78>
 8014822:	e7f0      	b.n	8014806 <rcl_clock_remove_jump_callback+0x96>
 8014824:	200b      	movs	r0, #11
 8014826:	4770      	bx	lr
 8014828:	200a      	movs	r0, #10
 801482a:	e7ea      	b.n	8014802 <rcl_clock_remove_jump_callback+0x92>

0801482c <_rcl_timer_time_jump>:
 801482c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014830:	4605      	mov	r5, r0
 8014832:	b084      	sub	sp, #16
 8014834:	4614      	mov	r4, r2
 8014836:	b131      	cbz	r1, 8014846 <_rcl_timer_time_jump+0x1a>
 8014838:	7803      	ldrb	r3, [r0, #0]
 801483a:	3b02      	subs	r3, #2
 801483c:	2b01      	cmp	r3, #1
 801483e:	d93f      	bls.n	80148c0 <_rcl_timer_time_jump+0x94>
 8014840:	b004      	add	sp, #16
 8014842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014846:	6813      	ldr	r3, [r2, #0]
 8014848:	a902      	add	r1, sp, #8
 801484a:	6818      	ldr	r0, [r3, #0]
 801484c:	f7ff ff22 	bl	8014694 <rcl_clock_get_now>
 8014850:	2800      	cmp	r0, #0
 8014852:	d1f5      	bne.n	8014840 <_rcl_timer_time_jump+0x14>
 8014854:	6820      	ldr	r0, [r4, #0]
 8014856:	2105      	movs	r1, #5
 8014858:	3020      	adds	r0, #32
 801485a:	f001 fd8d 	bl	8016378 <__atomic_load_8>
 801485e:	6823      	ldr	r3, [r4, #0]
 8014860:	4681      	mov	r9, r0
 8014862:	4688      	mov	r8, r1
 8014864:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8014868:	2105      	movs	r1, #5
 801486a:	f001 fd85 	bl	8016378 <__atomic_load_8>
 801486e:	4607      	mov	r7, r0
 8014870:	6820      	ldr	r0, [r4, #0]
 8014872:	460e      	mov	r6, r1
 8014874:	3018      	adds	r0, #24
 8014876:	2105      	movs	r1, #5
 8014878:	f001 fd7e 	bl	8016378 <__atomic_load_8>
 801487c:	782b      	ldrb	r3, [r5, #0]
 801487e:	9a02      	ldr	r2, [sp, #8]
 8014880:	3b02      	subs	r3, #2
 8014882:	2b01      	cmp	r3, #1
 8014884:	460d      	mov	r5, r1
 8014886:	9b03      	ldr	r3, [sp, #12]
 8014888:	4682      	mov	sl, r0
 801488a:	d937      	bls.n	80148fc <_rcl_timer_time_jump+0xd0>
 801488c:	42ba      	cmp	r2, r7
 801488e:	eb73 0106 	sbcs.w	r1, r3, r6
 8014892:	da5f      	bge.n	8014954 <_rcl_timer_time_jump+0x128>
 8014894:	454a      	cmp	r2, r9
 8014896:	eb73 0108 	sbcs.w	r1, r3, r8
 801489a:	dad1      	bge.n	8014840 <_rcl_timer_time_jump+0x14>
 801489c:	6820      	ldr	r0, [r4, #0]
 801489e:	eb1a 0202 	adds.w	r2, sl, r2
 80148a2:	eb43 0305 	adc.w	r3, r3, r5
 80148a6:	2505      	movs	r5, #5
 80148a8:	3028      	adds	r0, #40	@ 0x28
 80148aa:	9500      	str	r5, [sp, #0]
 80148ac:	f001 fd9a 	bl	80163e4 <__atomic_store_8>
 80148b0:	6820      	ldr	r0, [r4, #0]
 80148b2:	9500      	str	r5, [sp, #0]
 80148b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148b8:	3020      	adds	r0, #32
 80148ba:	f001 fd93 	bl	80163e4 <__atomic_store_8>
 80148be:	e7bf      	b.n	8014840 <_rcl_timer_time_jump+0x14>
 80148c0:	6813      	ldr	r3, [r2, #0]
 80148c2:	a902      	add	r1, sp, #8
 80148c4:	6818      	ldr	r0, [r3, #0]
 80148c6:	f7ff fee5 	bl	8014694 <rcl_clock_get_now>
 80148ca:	2800      	cmp	r0, #0
 80148cc:	d1b8      	bne.n	8014840 <_rcl_timer_time_jump+0x14>
 80148ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148d2:	4313      	orrs	r3, r2
 80148d4:	d0b4      	beq.n	8014840 <_rcl_timer_time_jump+0x14>
 80148d6:	6820      	ldr	r0, [r4, #0]
 80148d8:	2105      	movs	r1, #5
 80148da:	3028      	adds	r0, #40	@ 0x28
 80148dc:	f001 fd4c 	bl	8016378 <__atomic_load_8>
 80148e0:	9d02      	ldr	r5, [sp, #8]
 80148e2:	9b03      	ldr	r3, [sp, #12]
 80148e4:	4602      	mov	r2, r0
 80148e6:	6820      	ldr	r0, [r4, #0]
 80148e8:	1b52      	subs	r2, r2, r5
 80148ea:	f04f 0405 	mov.w	r4, #5
 80148ee:	9400      	str	r4, [sp, #0]
 80148f0:	eb61 0303 	sbc.w	r3, r1, r3
 80148f4:	3030      	adds	r0, #48	@ 0x30
 80148f6:	f001 fd75 	bl	80163e4 <__atomic_store_8>
 80148fa:	e7a1      	b.n	8014840 <_rcl_timer_time_jump+0x14>
 80148fc:	4313      	orrs	r3, r2
 80148fe:	d09f      	beq.n	8014840 <_rcl_timer_time_jump+0x14>
 8014900:	6820      	ldr	r0, [r4, #0]
 8014902:	f04f 0805 	mov.w	r8, #5
 8014906:	2300      	movs	r3, #0
 8014908:	f8cd 8000 	str.w	r8, [sp]
 801490c:	3030      	adds	r0, #48	@ 0x30
 801490e:	2200      	movs	r2, #0
 8014910:	f001 fd9e 	bl	8016450 <__atomic_exchange_8>
 8014914:	ea51 0300 	orrs.w	r3, r1, r0
 8014918:	4606      	mov	r6, r0
 801491a:	460f      	mov	r7, r1
 801491c:	d090      	beq.n	8014840 <_rcl_timer_time_jump+0x14>
 801491e:	9a02      	ldr	r2, [sp, #8]
 8014920:	9b03      	ldr	r3, [sp, #12]
 8014922:	f8cd 8000 	str.w	r8, [sp]
 8014926:	1a12      	subs	r2, r2, r0
 8014928:	6820      	ldr	r0, [r4, #0]
 801492a:	eb63 0301 	sbc.w	r3, r3, r1
 801492e:	eb12 020a 	adds.w	r2, r2, sl
 8014932:	eb43 0305 	adc.w	r3, r3, r5
 8014936:	3028      	adds	r0, #40	@ 0x28
 8014938:	f001 fd54 	bl	80163e4 <__atomic_store_8>
 801493c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014940:	f8cd 8000 	str.w	r8, [sp]
 8014944:	6820      	ldr	r0, [r4, #0]
 8014946:	1b92      	subs	r2, r2, r6
 8014948:	eb63 0307 	sbc.w	r3, r3, r7
 801494c:	3020      	adds	r0, #32
 801494e:	f001 fd49 	bl	80163e4 <__atomic_store_8>
 8014952:	e775      	b.n	8014840 <_rcl_timer_time_jump+0x14>
 8014954:	6820      	ldr	r0, [r4, #0]
 8014956:	3008      	adds	r0, #8
 8014958:	f004 fae4 	bl	8018f24 <rcl_trigger_guard_condition>
 801495c:	e770      	b.n	8014840 <_rcl_timer_time_jump+0x14>
 801495e:	bf00      	nop

08014960 <rcl_get_zero_initialized_timer>:
 8014960:	4b01      	ldr	r3, [pc, #4]	@ (8014968 <rcl_get_zero_initialized_timer+0x8>)
 8014962:	6818      	ldr	r0, [r3, #0]
 8014964:	4770      	bx	lr
 8014966:	bf00      	nop
 8014968:	0801b534 	.word	0x0801b534
 801496c:	00000000 	.word	0x00000000

08014970 <rcl_timer_init>:
 8014970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014974:	b0aa      	sub	sp, #168	@ 0xa8
 8014976:	4604      	mov	r4, r0
 8014978:	a835      	add	r0, sp, #212	@ 0xd4
 801497a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 801497e:	460d      	mov	r5, r1
 8014980:	4692      	mov	sl, r2
 8014982:	f7f8 fe77 	bl	800d674 <rcutils_allocator_is_valid>
 8014986:	2800      	cmp	r0, #0
 8014988:	d064      	beq.n	8014a54 <rcl_timer_init+0xe4>
 801498a:	2c00      	cmp	r4, #0
 801498c:	d062      	beq.n	8014a54 <rcl_timer_init+0xe4>
 801498e:	2d00      	cmp	r5, #0
 8014990:	d060      	beq.n	8014a54 <rcl_timer_init+0xe4>
 8014992:	2f00      	cmp	r7, #0
 8014994:	db5e      	blt.n	8014a54 <rcl_timer_init+0xe4>
 8014996:	6823      	ldr	r3, [r4, #0]
 8014998:	b123      	cbz	r3, 80149a4 <rcl_timer_init+0x34>
 801499a:	2664      	movs	r6, #100	@ 0x64
 801499c:	4630      	mov	r0, r6
 801499e:	b02a      	add	sp, #168	@ 0xa8
 80149a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149a4:	a908      	add	r1, sp, #32
 80149a6:	4628      	mov	r0, r5
 80149a8:	f7ff fe74 	bl	8014694 <rcl_clock_get_now>
 80149ac:	4606      	mov	r6, r0
 80149ae:	2800      	cmp	r0, #0
 80149b0:	d1f4      	bne.n	801499c <rcl_timer_init+0x2c>
 80149b2:	ae06      	add	r6, sp, #24
 80149b4:	4630      	mov	r0, r6
 80149b6:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80149ba:	f004 f9bb 	bl	8018d34 <rcl_get_zero_initialized_guard_condition>
 80149be:	e896 0003 	ldmia.w	r6, {r0, r1}
 80149c2:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80149c6:	ae0b      	add	r6, sp, #44	@ 0x2c
 80149c8:	e889 0003 	stmia.w	r9, {r0, r1}
 80149cc:	4630      	mov	r0, r6
 80149ce:	f004 fa8d 	bl	8018eec <rcl_guard_condition_get_default_options>
 80149d2:	ab0d      	add	r3, sp, #52	@ 0x34
 80149d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80149d8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80149dc:	4651      	mov	r1, sl
 80149de:	e896 000c 	ldmia.w	r6, {r2, r3}
 80149e2:	4648      	mov	r0, r9
 80149e4:	f004 f9b0 	bl	8018d48 <rcl_guard_condition_init>
 80149e8:	4606      	mov	r6, r0
 80149ea:	2800      	cmp	r0, #0
 80149ec:	d1d6      	bne.n	801499c <rcl_timer_init+0x2c>
 80149ee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80149f0:	781b      	ldrb	r3, [r3, #0]
 80149f2:	2b01      	cmp	r3, #1
 80149f4:	d033      	beq.n	8014a5e <rcl_timer_init+0xee>
 80149f6:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80149f8:	911a      	str	r1, [sp, #104]	@ 0x68
 80149fa:	4642      	mov	r2, r8
 80149fc:	463b      	mov	r3, r7
 80149fe:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8014a02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014a06:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8014ab8 <rcl_timer_init+0x148>
 8014a0a:	eb12 0008 	adds.w	r0, r2, r8
 8014a0e:	eb47 0103 	adc.w	r1, r7, r3
 8014a12:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8014a16:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8014a1a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8014a1e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8014a22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a26:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8014a2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a2e:	f8de 3000 	ldr.w	r3, [lr]
 8014a32:	f8cc 3000 	str.w	r3, [ip]
 8014a36:	f04f 0a00 	mov.w	sl, #0
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8014a40:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8014a42:	2050      	movs	r0, #80	@ 0x50
 8014a44:	4798      	blx	r3
 8014a46:	6020      	str	r0, [r4, #0]
 8014a48:	b358      	cbz	r0, 8014aa2 <rcl_timer_init+0x132>
 8014a4a:	2250      	movs	r2, #80	@ 0x50
 8014a4c:	a916      	add	r1, sp, #88	@ 0x58
 8014a4e:	f005 f9a0 	bl	8019d92 <memcpy>
 8014a52:	e7a3      	b.n	801499c <rcl_timer_init+0x2c>
 8014a54:	260b      	movs	r6, #11
 8014a56:	4630      	mov	r0, r6
 8014a58:	b02a      	add	sp, #168	@ 0xa8
 8014a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a5e:	2001      	movs	r0, #1
 8014a60:	2100      	movs	r1, #0
 8014a62:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8014a66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a6a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8014a6e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8014a72:	4a13      	ldr	r2, [pc, #76]	@ (8014ac0 <rcl_timer_init+0x150>)
 8014a74:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8014a78:	9405      	str	r4, [sp, #20]
 8014a7a:	9204      	str	r2, [sp, #16]
 8014a7c:	ab12      	add	r3, sp, #72	@ 0x48
 8014a7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a80:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014a84:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014a88:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8014a8c:	4628      	mov	r0, r5
 8014a8e:	f7ff fe0d 	bl	80146ac <rcl_clock_add_jump_callback>
 8014a92:	4682      	mov	sl, r0
 8014a94:	2800      	cmp	r0, #0
 8014a96:	d0ae      	beq.n	80149f6 <rcl_timer_init+0x86>
 8014a98:	4648      	mov	r0, r9
 8014a9a:	f004 fa01 	bl	8018ea0 <rcl_guard_condition_fini>
 8014a9e:	4656      	mov	r6, sl
 8014aa0:	e77c      	b.n	801499c <rcl_timer_init+0x2c>
 8014aa2:	4648      	mov	r0, r9
 8014aa4:	f004 f9fc 	bl	8018ea0 <rcl_guard_condition_fini>
 8014aa8:	4905      	ldr	r1, [pc, #20]	@ (8014ac0 <rcl_timer_init+0x150>)
 8014aaa:	4622      	mov	r2, r4
 8014aac:	4628      	mov	r0, r5
 8014aae:	f7ff fe5f 	bl	8014770 <rcl_clock_remove_jump_callback>
 8014ab2:	260a      	movs	r6, #10
 8014ab4:	e772      	b.n	801499c <rcl_timer_init+0x2c>
 8014ab6:	bf00      	nop
	...
 8014ac0:	0801482d 	.word	0x0801482d

08014ac4 <rcl_timer_call>:
 8014ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac8:	b087      	sub	sp, #28
 8014aca:	2800      	cmp	r0, #0
 8014acc:	d06d      	beq.n	8014baa <rcl_timer_call+0xe6>
 8014ace:	6803      	ldr	r3, [r0, #0]
 8014ad0:	4604      	mov	r4, r0
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d063      	beq.n	8014b9e <rcl_timer_call+0xda>
 8014ad6:	f3bf 8f5b 	dmb	ish
 8014ada:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014ade:	f3bf 8f5b 	dmb	ish
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d150      	bne.n	8014b88 <rcl_timer_call+0xc4>
 8014ae6:	6803      	ldr	r3, [r0, #0]
 8014ae8:	a904      	add	r1, sp, #16
 8014aea:	6818      	ldr	r0, [r3, #0]
 8014aec:	f7ff fdd2 	bl	8014694 <rcl_clock_get_now>
 8014af0:	4605      	mov	r5, r0
 8014af2:	2800      	cmp	r0, #0
 8014af4:	d14a      	bne.n	8014b8c <rcl_timer_call+0xc8>
 8014af6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	db4a      	blt.n	8014b94 <rcl_timer_call+0xd0>
 8014afe:	6820      	ldr	r0, [r4, #0]
 8014b00:	f04f 0a05 	mov.w	sl, #5
 8014b04:	f8cd a000 	str.w	sl, [sp]
 8014b08:	3020      	adds	r0, #32
 8014b0a:	f001 fca1 	bl	8016450 <__atomic_exchange_8>
 8014b0e:	6823      	ldr	r3, [r4, #0]
 8014b10:	f3bf 8f5b 	dmb	ish
 8014b14:	4680      	mov	r8, r0
 8014b16:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8014b1a:	f3bf 8f5b 	dmb	ish
 8014b1e:	6820      	ldr	r0, [r4, #0]
 8014b20:	4689      	mov	r9, r1
 8014b22:	3028      	adds	r0, #40	@ 0x28
 8014b24:	4651      	mov	r1, sl
 8014b26:	f001 fc27 	bl	8016378 <__atomic_load_8>
 8014b2a:	4606      	mov	r6, r0
 8014b2c:	6820      	ldr	r0, [r4, #0]
 8014b2e:	460f      	mov	r7, r1
 8014b30:	3018      	adds	r0, #24
 8014b32:	4651      	mov	r1, sl
 8014b34:	f001 fc20 	bl	8016378 <__atomic_load_8>
 8014b38:	1836      	adds	r6, r6, r0
 8014b3a:	4602      	mov	r2, r0
 8014b3c:	4682      	mov	sl, r0
 8014b3e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8014b42:	eb47 0701 	adc.w	r7, r7, r1
 8014b46:	4286      	cmp	r6, r0
 8014b48:	460b      	mov	r3, r1
 8014b4a:	eb77 010c 	sbcs.w	r1, r7, ip
 8014b4e:	da04      	bge.n	8014b5a <rcl_timer_call+0x96>
 8014b50:	ea53 0102 	orrs.w	r1, r3, r2
 8014b54:	d12e      	bne.n	8014bb4 <rcl_timer_call+0xf0>
 8014b56:	4606      	mov	r6, r0
 8014b58:	4667      	mov	r7, ip
 8014b5a:	6820      	ldr	r0, [r4, #0]
 8014b5c:	2105      	movs	r1, #5
 8014b5e:	4632      	mov	r2, r6
 8014b60:	463b      	mov	r3, r7
 8014b62:	3028      	adds	r0, #40	@ 0x28
 8014b64:	9100      	str	r1, [sp, #0]
 8014b66:	f001 fc3d 	bl	80163e4 <__atomic_store_8>
 8014b6a:	f1bb 0f00 	cmp.w	fp, #0
 8014b6e:	d00d      	beq.n	8014b8c <rcl_timer_call+0xc8>
 8014b70:	9a04      	ldr	r2, [sp, #16]
 8014b72:	9b05      	ldr	r3, [sp, #20]
 8014b74:	ebb2 0208 	subs.w	r2, r2, r8
 8014b78:	4620      	mov	r0, r4
 8014b7a:	eb63 0309 	sbc.w	r3, r3, r9
 8014b7e:	47d8      	blx	fp
 8014b80:	4628      	mov	r0, r5
 8014b82:	b007      	add	sp, #28
 8014b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b88:	f240 3521 	movw	r5, #801	@ 0x321
 8014b8c:	4628      	mov	r0, r5
 8014b8e:	b007      	add	sp, #28
 8014b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b94:	2501      	movs	r5, #1
 8014b96:	4628      	mov	r0, r5
 8014b98:	b007      	add	sp, #28
 8014b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b9e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8014ba2:	4628      	mov	r0, r5
 8014ba4:	b007      	add	sp, #28
 8014ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014baa:	250b      	movs	r5, #11
 8014bac:	4628      	mov	r0, r5
 8014bae:	b007      	add	sp, #28
 8014bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bb4:	1b80      	subs	r0, r0, r6
 8014bb6:	eb6c 0107 	sbc.w	r1, ip, r7
 8014bba:	3801      	subs	r0, #1
 8014bbc:	f161 0100 	sbc.w	r1, r1, #0
 8014bc0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014bc4:	f7eb ff62 	bl	8000a8c <__aeabi_ldivmod>
 8014bc8:	9b02      	ldr	r3, [sp, #8]
 8014bca:	3001      	adds	r0, #1
 8014bcc:	f141 0100 	adc.w	r1, r1, #0
 8014bd0:	fb00 f303 	mul.w	r3, r0, r3
 8014bd4:	fb01 330a 	mla	r3, r1, sl, r3
 8014bd8:	fba0 0a0a 	umull	r0, sl, r0, sl
 8014bdc:	1986      	adds	r6, r0, r6
 8014bde:	4453      	add	r3, sl
 8014be0:	eb43 0707 	adc.w	r7, r3, r7
 8014be4:	e7b9      	b.n	8014b5a <rcl_timer_call+0x96>
 8014be6:	bf00      	nop

08014be8 <rcl_timer_is_ready>:
 8014be8:	b570      	push	{r4, r5, r6, lr}
 8014bea:	b082      	sub	sp, #8
 8014bec:	b378      	cbz	r0, 8014c4e <rcl_timer_is_ready+0x66>
 8014bee:	6803      	ldr	r3, [r0, #0]
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	b383      	cbz	r3, 8014c56 <rcl_timer_is_ready+0x6e>
 8014bf4:	460d      	mov	r5, r1
 8014bf6:	b351      	cbz	r1, 8014c4e <rcl_timer_is_ready+0x66>
 8014bf8:	f3bf 8f5b 	dmb	ish
 8014bfc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014c00:	f3bf 8f5b 	dmb	ish
 8014c04:	b953      	cbnz	r3, 8014c1c <rcl_timer_is_ready+0x34>
 8014c06:	6803      	ldr	r3, [r0, #0]
 8014c08:	4669      	mov	r1, sp
 8014c0a:	6818      	ldr	r0, [r3, #0]
 8014c0c:	f7ff fd42 	bl	8014694 <rcl_clock_get_now>
 8014c10:	4606      	mov	r6, r0
 8014c12:	b140      	cbz	r0, 8014c26 <rcl_timer_is_ready+0x3e>
 8014c14:	f240 3321 	movw	r3, #801	@ 0x321
 8014c18:	4298      	cmp	r0, r3
 8014c1a:	d101      	bne.n	8014c20 <rcl_timer_is_ready+0x38>
 8014c1c:	2600      	movs	r6, #0
 8014c1e:	702e      	strb	r6, [r5, #0]
 8014c20:	4630      	mov	r0, r6
 8014c22:	b002      	add	sp, #8
 8014c24:	bd70      	pop	{r4, r5, r6, pc}
 8014c26:	6820      	ldr	r0, [r4, #0]
 8014c28:	2105      	movs	r1, #5
 8014c2a:	3028      	adds	r0, #40	@ 0x28
 8014c2c:	f001 fba4 	bl	8016378 <__atomic_load_8>
 8014c30:	9b00      	ldr	r3, [sp, #0]
 8014c32:	1ac0      	subs	r0, r0, r3
 8014c34:	9b01      	ldr	r3, [sp, #4]
 8014c36:	eb61 0103 	sbc.w	r1, r1, r3
 8014c3a:	2801      	cmp	r0, #1
 8014c3c:	f171 0300 	sbcs.w	r3, r1, #0
 8014c40:	bfb4      	ite	lt
 8014c42:	2301      	movlt	r3, #1
 8014c44:	2300      	movge	r3, #0
 8014c46:	4630      	mov	r0, r6
 8014c48:	702b      	strb	r3, [r5, #0]
 8014c4a:	b002      	add	sp, #8
 8014c4c:	bd70      	pop	{r4, r5, r6, pc}
 8014c4e:	260b      	movs	r6, #11
 8014c50:	4630      	mov	r0, r6
 8014c52:	b002      	add	sp, #8
 8014c54:	bd70      	pop	{r4, r5, r6, pc}
 8014c56:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8014c5a:	e7e1      	b.n	8014c20 <rcl_timer_is_ready+0x38>

08014c5c <rcl_timer_get_time_until_next_call>:
 8014c5c:	b570      	push	{r4, r5, r6, lr}
 8014c5e:	b082      	sub	sp, #8
 8014c60:	b330      	cbz	r0, 8014cb0 <rcl_timer_get_time_until_next_call+0x54>
 8014c62:	6803      	ldr	r3, [r0, #0]
 8014c64:	4604      	mov	r4, r0
 8014c66:	b33b      	cbz	r3, 8014cb8 <rcl_timer_get_time_until_next_call+0x5c>
 8014c68:	460d      	mov	r5, r1
 8014c6a:	b309      	cbz	r1, 8014cb0 <rcl_timer_get_time_until_next_call+0x54>
 8014c6c:	f3bf 8f5b 	dmb	ish
 8014c70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014c74:	f3bf 8f5b 	dmb	ish
 8014c78:	b9ab      	cbnz	r3, 8014ca6 <rcl_timer_get_time_until_next_call+0x4a>
 8014c7a:	6803      	ldr	r3, [r0, #0]
 8014c7c:	4669      	mov	r1, sp
 8014c7e:	6818      	ldr	r0, [r3, #0]
 8014c80:	f7ff fd08 	bl	8014694 <rcl_clock_get_now>
 8014c84:	4606      	mov	r6, r0
 8014c86:	b958      	cbnz	r0, 8014ca0 <rcl_timer_get_time_until_next_call+0x44>
 8014c88:	6820      	ldr	r0, [r4, #0]
 8014c8a:	2105      	movs	r1, #5
 8014c8c:	3028      	adds	r0, #40	@ 0x28
 8014c8e:	f001 fb73 	bl	8016378 <__atomic_load_8>
 8014c92:	9b00      	ldr	r3, [sp, #0]
 8014c94:	1ac0      	subs	r0, r0, r3
 8014c96:	9b01      	ldr	r3, [sp, #4]
 8014c98:	6028      	str	r0, [r5, #0]
 8014c9a:	eb61 0103 	sbc.w	r1, r1, r3
 8014c9e:	6069      	str	r1, [r5, #4]
 8014ca0:	4630      	mov	r0, r6
 8014ca2:	b002      	add	sp, #8
 8014ca4:	bd70      	pop	{r4, r5, r6, pc}
 8014ca6:	f240 3621 	movw	r6, #801	@ 0x321
 8014caa:	4630      	mov	r0, r6
 8014cac:	b002      	add	sp, #8
 8014cae:	bd70      	pop	{r4, r5, r6, pc}
 8014cb0:	260b      	movs	r6, #11
 8014cb2:	4630      	mov	r0, r6
 8014cb4:	b002      	add	sp, #8
 8014cb6:	bd70      	pop	{r4, r5, r6, pc}
 8014cb8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8014cbc:	e7f0      	b.n	8014ca0 <rcl_timer_get_time_until_next_call+0x44>
 8014cbe:	bf00      	nop

08014cc0 <rcl_timer_get_guard_condition>:
 8014cc0:	b130      	cbz	r0, 8014cd0 <rcl_timer_get_guard_condition+0x10>
 8014cc2:	6800      	ldr	r0, [r0, #0]
 8014cc4:	b120      	cbz	r0, 8014cd0 <rcl_timer_get_guard_condition+0x10>
 8014cc6:	68c3      	ldr	r3, [r0, #12]
 8014cc8:	b10b      	cbz	r3, 8014cce <rcl_timer_get_guard_condition+0xe>
 8014cca:	3008      	adds	r0, #8
 8014ccc:	4770      	bx	lr
 8014cce:	4618      	mov	r0, r3
 8014cd0:	4770      	bx	lr
 8014cd2:	bf00      	nop

08014cd4 <rcl_get_zero_initialized_wait_set>:
 8014cd4:	b510      	push	{r4, lr}
 8014cd6:	4c08      	ldr	r4, [pc, #32]	@ (8014cf8 <rcl_get_zero_initialized_wait_set+0x24>)
 8014cd8:	4686      	mov	lr, r0
 8014cda:	4684      	mov	ip, r0
 8014cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014cde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ce4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014cea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014cee:	6823      	ldr	r3, [r4, #0]
 8014cf0:	f8cc 3000 	str.w	r3, [ip]
 8014cf4:	4670      	mov	r0, lr
 8014cf6:	bd10      	pop	{r4, pc}
 8014cf8:	0801b538 	.word	0x0801b538

08014cfc <rcl_wait_set_is_valid>:
 8014cfc:	b118      	cbz	r0, 8014d06 <rcl_wait_set_is_valid+0xa>
 8014cfe:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014d00:	3800      	subs	r0, #0
 8014d02:	bf18      	it	ne
 8014d04:	2001      	movne	r0, #1
 8014d06:	4770      	bx	lr

08014d08 <rcl_wait_set_fini>:
 8014d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d0c:	b082      	sub	sp, #8
 8014d0e:	2800      	cmp	r0, #0
 8014d10:	f000 8095 	beq.w	8014e3e <rcl_wait_set_fini+0x136>
 8014d14:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014d16:	4604      	mov	r4, r0
 8014d18:	2e00      	cmp	r6, #0
 8014d1a:	f000 808c 	beq.w	8014e36 <rcl_wait_set_fini+0x12e>
 8014d1e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014d20:	f002 fd36 	bl	8017790 <rmw_destroy_wait_set>
 8014d24:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014d26:	1e06      	subs	r6, r0, #0
 8014d28:	bf18      	it	ne
 8014d2a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8014d2e:	2d00      	cmp	r5, #0
 8014d30:	f000 8081 	beq.w	8014e36 <rcl_wait_set_fini+0x12e>
 8014d34:	6820      	ldr	r0, [r4, #0]
 8014d36:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014d3a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014d3c:	2700      	movs	r7, #0
 8014d3e:	6067      	str	r7, [r4, #4]
 8014d40:	602f      	str	r7, [r5, #0]
 8014d42:	b120      	cbz	r0, 8014d4e <rcl_wait_set_fini+0x46>
 8014d44:	9101      	str	r1, [sp, #4]
 8014d46:	47c0      	blx	r8
 8014d48:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014d4a:	9901      	ldr	r1, [sp, #4]
 8014d4c:	6027      	str	r7, [r4, #0]
 8014d4e:	68a8      	ldr	r0, [r5, #8]
 8014d50:	b120      	cbz	r0, 8014d5c <rcl_wait_set_fini+0x54>
 8014d52:	47c0      	blx	r8
 8014d54:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014d56:	2300      	movs	r3, #0
 8014d58:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014d5c:	68a0      	ldr	r0, [r4, #8]
 8014d5e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014d60:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014d62:	f04f 0800 	mov.w	r8, #0
 8014d66:	f8c4 800c 	str.w	r8, [r4, #12]
 8014d6a:	f8c5 800c 	str.w	r8, [r5, #12]
 8014d6e:	b128      	cbz	r0, 8014d7c <rcl_wait_set_fini+0x74>
 8014d70:	47b8      	blx	r7
 8014d72:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014d74:	f8c4 8008 	str.w	r8, [r4, #8]
 8014d78:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014d7a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014d7c:	6968      	ldr	r0, [r5, #20]
 8014d7e:	f04f 0800 	mov.w	r8, #0
 8014d82:	f8c5 8010 	str.w	r8, [r5, #16]
 8014d86:	b128      	cbz	r0, 8014d94 <rcl_wait_set_fini+0x8c>
 8014d88:	47b8      	blx	r7
 8014d8a:	f8c5 8014 	str.w	r8, [r5, #20]
 8014d8e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014d90:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014d92:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014d94:	6920      	ldr	r0, [r4, #16]
 8014d96:	f04f 0800 	mov.w	r8, #0
 8014d9a:	f8c4 8014 	str.w	r8, [r4, #20]
 8014d9e:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8014da2:	b128      	cbz	r0, 8014db0 <rcl_wait_set_fini+0xa8>
 8014da4:	47b8      	blx	r7
 8014da6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014da8:	f8c4 8010 	str.w	r8, [r4, #16]
 8014dac:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014dae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014db0:	69a0      	ldr	r0, [r4, #24]
 8014db2:	f04f 0800 	mov.w	r8, #0
 8014db6:	f8c4 801c 	str.w	r8, [r4, #28]
 8014dba:	f8c5 8018 	str.w	r8, [r5, #24]
 8014dbe:	b128      	cbz	r0, 8014dcc <rcl_wait_set_fini+0xc4>
 8014dc0:	9101      	str	r1, [sp, #4]
 8014dc2:	47b8      	blx	r7
 8014dc4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014dc6:	9901      	ldr	r1, [sp, #4]
 8014dc8:	f8c4 8018 	str.w	r8, [r4, #24]
 8014dcc:	6a28      	ldr	r0, [r5, #32]
 8014dce:	b120      	cbz	r0, 8014dda <rcl_wait_set_fini+0xd2>
 8014dd0:	47b8      	blx	r7
 8014dd2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014dda:	6a20      	ldr	r0, [r4, #32]
 8014ddc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014de0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014de2:	2700      	movs	r7, #0
 8014de4:	6267      	str	r7, [r4, #36]	@ 0x24
 8014de6:	626f      	str	r7, [r5, #36]	@ 0x24
 8014de8:	b120      	cbz	r0, 8014df4 <rcl_wait_set_fini+0xec>
 8014dea:	9101      	str	r1, [sp, #4]
 8014dec:	47c0      	blx	r8
 8014dee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014df0:	9901      	ldr	r1, [sp, #4]
 8014df2:	6227      	str	r7, [r4, #32]
 8014df4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8014df6:	b120      	cbz	r0, 8014e02 <rcl_wait_set_fini+0xfa>
 8014df8:	47c0      	blx	r8
 8014dfa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014e02:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014e04:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014e08:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014e0a:	2700      	movs	r7, #0
 8014e0c:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8014e0e:	632f      	str	r7, [r5, #48]	@ 0x30
 8014e10:	b120      	cbz	r0, 8014e1c <rcl_wait_set_fini+0x114>
 8014e12:	9101      	str	r1, [sp, #4]
 8014e14:	47c0      	blx	r8
 8014e16:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014e18:	9901      	ldr	r1, [sp, #4]
 8014e1a:	62a7      	str	r7, [r4, #40]	@ 0x28
 8014e1c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8014e1e:	b120      	cbz	r0, 8014e2a <rcl_wait_set_fini+0x122>
 8014e20:	47c0      	blx	r8
 8014e22:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014e24:	2300      	movs	r3, #0
 8014e26:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8014e2a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014e2c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014e2e:	4628      	mov	r0, r5
 8014e30:	4798      	blx	r3
 8014e32:	2300      	movs	r3, #0
 8014e34:	6323      	str	r3, [r4, #48]	@ 0x30
 8014e36:	4630      	mov	r0, r6
 8014e38:	b002      	add	sp, #8
 8014e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e3e:	260b      	movs	r6, #11
 8014e40:	4630      	mov	r0, r6
 8014e42:	b002      	add	sp, #8
 8014e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e48 <rcl_wait_set_add_subscription>:
 8014e48:	b318      	cbz	r0, 8014e92 <rcl_wait_set_add_subscription+0x4a>
 8014e4a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014e4c:	b570      	push	{r4, r5, r6, lr}
 8014e4e:	4604      	mov	r4, r0
 8014e50:	b30b      	cbz	r3, 8014e96 <rcl_wait_set_add_subscription+0x4e>
 8014e52:	b319      	cbz	r1, 8014e9c <rcl_wait_set_add_subscription+0x54>
 8014e54:	681d      	ldr	r5, [r3, #0]
 8014e56:	6840      	ldr	r0, [r0, #4]
 8014e58:	4285      	cmp	r5, r0
 8014e5a:	d217      	bcs.n	8014e8c <rcl_wait_set_add_subscription+0x44>
 8014e5c:	6820      	ldr	r0, [r4, #0]
 8014e5e:	1c6e      	adds	r6, r5, #1
 8014e60:	601e      	str	r6, [r3, #0]
 8014e62:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014e66:	b102      	cbz	r2, 8014e6a <rcl_wait_set_add_subscription+0x22>
 8014e68:	6015      	str	r5, [r2, #0]
 8014e6a:	4608      	mov	r0, r1
 8014e6c:	f7ff fb72 	bl	8014554 <rcl_subscription_get_rmw_handle>
 8014e70:	b150      	cbz	r0, 8014e88 <rcl_wait_set_add_subscription+0x40>
 8014e72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e74:	6842      	ldr	r2, [r0, #4]
 8014e76:	689b      	ldr	r3, [r3, #8]
 8014e78:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014e7c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014e7e:	6853      	ldr	r3, [r2, #4]
 8014e80:	3301      	adds	r3, #1
 8014e82:	2000      	movs	r0, #0
 8014e84:	6053      	str	r3, [r2, #4]
 8014e86:	bd70      	pop	{r4, r5, r6, pc}
 8014e88:	2001      	movs	r0, #1
 8014e8a:	bd70      	pop	{r4, r5, r6, pc}
 8014e8c:	f240 3086 	movw	r0, #902	@ 0x386
 8014e90:	bd70      	pop	{r4, r5, r6, pc}
 8014e92:	200b      	movs	r0, #11
 8014e94:	4770      	bx	lr
 8014e96:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014e9a:	bd70      	pop	{r4, r5, r6, pc}
 8014e9c:	200b      	movs	r0, #11
 8014e9e:	bd70      	pop	{r4, r5, r6, pc}

08014ea0 <rcl_wait_set_clear>:
 8014ea0:	2800      	cmp	r0, #0
 8014ea2:	d073      	beq.n	8014f8c <rcl_wait_set_clear+0xec>
 8014ea4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014ea6:	b510      	push	{r4, lr}
 8014ea8:	4604      	mov	r4, r0
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d070      	beq.n	8014f90 <rcl_wait_set_clear+0xf0>
 8014eae:	6800      	ldr	r0, [r0, #0]
 8014eb0:	b138      	cbz	r0, 8014ec2 <rcl_wait_set_clear+0x22>
 8014eb2:	6862      	ldr	r2, [r4, #4]
 8014eb4:	2100      	movs	r1, #0
 8014eb6:	0092      	lsls	r2, r2, #2
 8014eb8:	f004 fea2 	bl	8019c00 <memset>
 8014ebc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	601a      	str	r2, [r3, #0]
 8014ec2:	68a0      	ldr	r0, [r4, #8]
 8014ec4:	b138      	cbz	r0, 8014ed6 <rcl_wait_set_clear+0x36>
 8014ec6:	68e2      	ldr	r2, [r4, #12]
 8014ec8:	2100      	movs	r1, #0
 8014eca:	0092      	lsls	r2, r2, #2
 8014ecc:	f004 fe98 	bl	8019c00 <memset>
 8014ed0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	60da      	str	r2, [r3, #12]
 8014ed6:	69a0      	ldr	r0, [r4, #24]
 8014ed8:	b138      	cbz	r0, 8014eea <rcl_wait_set_clear+0x4a>
 8014eda:	69e2      	ldr	r2, [r4, #28]
 8014edc:	2100      	movs	r1, #0
 8014ede:	0092      	lsls	r2, r2, #2
 8014ee0:	f004 fe8e 	bl	8019c00 <memset>
 8014ee4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	619a      	str	r2, [r3, #24]
 8014eea:	6a20      	ldr	r0, [r4, #32]
 8014eec:	b138      	cbz	r0, 8014efe <rcl_wait_set_clear+0x5e>
 8014eee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014ef0:	2100      	movs	r1, #0
 8014ef2:	0092      	lsls	r2, r2, #2
 8014ef4:	f004 fe84 	bl	8019c00 <memset>
 8014ef8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014efa:	2200      	movs	r2, #0
 8014efc:	625a      	str	r2, [r3, #36]	@ 0x24
 8014efe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014f00:	b138      	cbz	r0, 8014f12 <rcl_wait_set_clear+0x72>
 8014f02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014f04:	2100      	movs	r1, #0
 8014f06:	0092      	lsls	r2, r2, #2
 8014f08:	f004 fe7a 	bl	8019c00 <memset>
 8014f0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f0e:	2200      	movs	r2, #0
 8014f10:	631a      	str	r2, [r3, #48]	@ 0x30
 8014f12:	6920      	ldr	r0, [r4, #16]
 8014f14:	b138      	cbz	r0, 8014f26 <rcl_wait_set_clear+0x86>
 8014f16:	6962      	ldr	r2, [r4, #20]
 8014f18:	2100      	movs	r1, #0
 8014f1a:	0092      	lsls	r2, r2, #2
 8014f1c:	f004 fe70 	bl	8019c00 <memset>
 8014f20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f22:	2200      	movs	r2, #0
 8014f24:	641a      	str	r2, [r3, #64]	@ 0x40
 8014f26:	6898      	ldr	r0, [r3, #8]
 8014f28:	b138      	cbz	r0, 8014f3a <rcl_wait_set_clear+0x9a>
 8014f2a:	685a      	ldr	r2, [r3, #4]
 8014f2c:	2100      	movs	r1, #0
 8014f2e:	0092      	lsls	r2, r2, #2
 8014f30:	f004 fe66 	bl	8019c00 <memset>
 8014f34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f36:	2200      	movs	r2, #0
 8014f38:	605a      	str	r2, [r3, #4]
 8014f3a:	6958      	ldr	r0, [r3, #20]
 8014f3c:	b138      	cbz	r0, 8014f4e <rcl_wait_set_clear+0xae>
 8014f3e:	691a      	ldr	r2, [r3, #16]
 8014f40:	2100      	movs	r1, #0
 8014f42:	0092      	lsls	r2, r2, #2
 8014f44:	f004 fe5c 	bl	8019c00 <memset>
 8014f48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	611a      	str	r2, [r3, #16]
 8014f4e:	6a18      	ldr	r0, [r3, #32]
 8014f50:	b138      	cbz	r0, 8014f62 <rcl_wait_set_clear+0xc2>
 8014f52:	69da      	ldr	r2, [r3, #28]
 8014f54:	2100      	movs	r1, #0
 8014f56:	0092      	lsls	r2, r2, #2
 8014f58:	f004 fe52 	bl	8019c00 <memset>
 8014f5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f5e:	2200      	movs	r2, #0
 8014f60:	61da      	str	r2, [r3, #28]
 8014f62:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8014f64:	b138      	cbz	r0, 8014f76 <rcl_wait_set_clear+0xd6>
 8014f66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014f68:	2100      	movs	r1, #0
 8014f6a:	0092      	lsls	r2, r2, #2
 8014f6c:	f004 fe48 	bl	8019c00 <memset>
 8014f70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f72:	2200      	movs	r2, #0
 8014f74:	629a      	str	r2, [r3, #40]	@ 0x28
 8014f76:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014f78:	b138      	cbz	r0, 8014f8a <rcl_wait_set_clear+0xea>
 8014f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014f7c:	2100      	movs	r1, #0
 8014f7e:	0092      	lsls	r2, r2, #2
 8014f80:	f004 fe3e 	bl	8019c00 <memset>
 8014f84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f86:	2000      	movs	r0, #0
 8014f88:	6358      	str	r0, [r3, #52]	@ 0x34
 8014f8a:	bd10      	pop	{r4, pc}
 8014f8c:	200b      	movs	r0, #11
 8014f8e:	4770      	bx	lr
 8014f90:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f94:	bd10      	pop	{r4, pc}
 8014f96:	bf00      	nop

08014f98 <rcl_wait_set_resize>:
 8014f98:	2800      	cmp	r0, #0
 8014f9a:	f000 8185 	beq.w	80152a8 <rcl_wait_set_resize+0x310>
 8014f9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8014fa4:	b083      	sub	sp, #12
 8014fa6:	4605      	mov	r5, r0
 8014fa8:	2c00      	cmp	r4, #0
 8014faa:	f000 817f 	beq.w	80152ac <rcl_wait_set_resize+0x314>
 8014fae:	f04f 0900 	mov.w	r9, #0
 8014fb2:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8014fb6:	461f      	mov	r7, r3
 8014fb8:	4688      	mov	r8, r1
 8014fba:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8014fbe:	4616      	mov	r6, r2
 8014fc0:	f8c0 9004 	str.w	r9, [r0, #4]
 8014fc4:	f8c4 9000 	str.w	r9, [r4]
 8014fc8:	2900      	cmp	r1, #0
 8014fca:	f000 80bd 	beq.w	8015148 <rcl_wait_set_resize+0x1b0>
 8014fce:	008c      	lsls	r4, r1, #2
 8014fd0:	6800      	ldr	r0, [r0, #0]
 8014fd2:	9301      	str	r3, [sp, #4]
 8014fd4:	4652      	mov	r2, sl
 8014fd6:	4621      	mov	r1, r4
 8014fd8:	4798      	blx	r3
 8014fda:	9b01      	ldr	r3, [sp, #4]
 8014fdc:	6028      	str	r0, [r5, #0]
 8014fde:	2800      	cmp	r0, #0
 8014fe0:	f000 80cb 	beq.w	801517a <rcl_wait_set_resize+0x1e2>
 8014fe4:	4622      	mov	r2, r4
 8014fe6:	4649      	mov	r1, r9
 8014fe8:	9301      	str	r3, [sp, #4]
 8014fea:	f004 fe09 	bl	8019c00 <memset>
 8014fee:	f8c5 8004 	str.w	r8, [r5, #4]
 8014ff2:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8014ff6:	9b01      	ldr	r3, [sp, #4]
 8014ff8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014ffc:	f8c8 9004 	str.w	r9, [r8, #4]
 8015000:	4652      	mov	r2, sl
 8015002:	4621      	mov	r1, r4
 8015004:	4798      	blx	r3
 8015006:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015008:	f8c8 0008 	str.w	r0, [r8, #8]
 801500c:	689b      	ldr	r3, [r3, #8]
 801500e:	2b00      	cmp	r3, #0
 8015010:	f000 80ac 	beq.w	801516c <rcl_wait_set_resize+0x1d4>
 8015014:	4622      	mov	r2, r4
 8015016:	4649      	mov	r1, r9
 8015018:	4618      	mov	r0, r3
 801501a:	f004 fdf1 	bl	8019c00 <memset>
 801501e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015020:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015024:	f04f 0800 	mov.w	r8, #0
 8015028:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801502c:	f8c5 800c 	str.w	r8, [r5, #12]
 8015030:	f8c4 800c 	str.w	r8, [r4, #12]
 8015034:	2e00      	cmp	r6, #0
 8015036:	f040 80a4 	bne.w	8015182 <rcl_wait_set_resize+0x1ea>
 801503a:	68a8      	ldr	r0, [r5, #8]
 801503c:	b128      	cbz	r0, 801504a <rcl_wait_set_resize+0xb2>
 801503e:	4649      	mov	r1, r9
 8015040:	4790      	blx	r2
 8015042:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015044:	60ae      	str	r6, [r5, #8]
 8015046:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801504a:	f04f 0800 	mov.w	r8, #0
 801504e:	19f6      	adds	r6, r6, r7
 8015050:	f8c4 8010 	str.w	r8, [r4, #16]
 8015054:	f040 80ac 	bne.w	80151b0 <rcl_wait_set_resize+0x218>
 8015058:	6960      	ldr	r0, [r4, #20]
 801505a:	b130      	cbz	r0, 801506a <rcl_wait_set_resize+0xd2>
 801505c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801505e:	4649      	mov	r1, r9
 8015060:	4798      	blx	r3
 8015062:	6166      	str	r6, [r4, #20]
 8015064:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015066:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801506a:	2600      	movs	r6, #0
 801506c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015070:	616e      	str	r6, [r5, #20]
 8015072:	6426      	str	r6, [r4, #64]	@ 0x40
 8015074:	2f00      	cmp	r7, #0
 8015076:	f040 80ad 	bne.w	80151d4 <rcl_wait_set_resize+0x23c>
 801507a:	6928      	ldr	r0, [r5, #16]
 801507c:	b138      	cbz	r0, 801508e <rcl_wait_set_resize+0xf6>
 801507e:	4649      	mov	r1, r9
 8015080:	47d0      	blx	sl
 8015082:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015084:	612f      	str	r7, [r5, #16]
 8015086:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801508a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801508e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015090:	2600      	movs	r6, #0
 8015092:	61ee      	str	r6, [r5, #28]
 8015094:	61a6      	str	r6, [r4, #24]
 8015096:	2b00      	cmp	r3, #0
 8015098:	f040 80af 	bne.w	80151fa <rcl_wait_set_resize+0x262>
 801509c:	69a8      	ldr	r0, [r5, #24]
 801509e:	b120      	cbz	r0, 80150aa <rcl_wait_set_resize+0x112>
 80150a0:	4649      	mov	r1, r9
 80150a2:	47d0      	blx	sl
 80150a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80150a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80150a8:	61ab      	str	r3, [r5, #24]
 80150aa:	6a20      	ldr	r0, [r4, #32]
 80150ac:	b128      	cbz	r0, 80150ba <rcl_wait_set_resize+0x122>
 80150ae:	4649      	mov	r1, r9
 80150b0:	47d0      	blx	sl
 80150b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80150b4:	2300      	movs	r3, #0
 80150b6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80150ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80150bc:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80150be:	2600      	movs	r6, #0
 80150c0:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80150c4:	626e      	str	r6, [r5, #36]	@ 0x24
 80150c6:	6266      	str	r6, [r4, #36]	@ 0x24
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	f000 80b6 	beq.w	801523a <rcl_wait_set_resize+0x2a2>
 80150ce:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80150d2:	6a28      	ldr	r0, [r5, #32]
 80150d4:	463a      	mov	r2, r7
 80150d6:	4651      	mov	r1, sl
 80150d8:	47c8      	blx	r9
 80150da:	6228      	str	r0, [r5, #32]
 80150dc:	2800      	cmp	r0, #0
 80150de:	d04c      	beq.n	801517a <rcl_wait_set_resize+0x1e2>
 80150e0:	4652      	mov	r2, sl
 80150e2:	4631      	mov	r1, r6
 80150e4:	f004 fd8c 	bl	8019c00 <memset>
 80150e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80150ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80150ec:	626b      	str	r3, [r5, #36]	@ 0x24
 80150ee:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80150f0:	62a6      	str	r6, [r4, #40]	@ 0x28
 80150f2:	463a      	mov	r2, r7
 80150f4:	4651      	mov	r1, sl
 80150f6:	47c8      	blx	r9
 80150f8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80150fa:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80150fc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80150fe:	2c00      	cmp	r4, #0
 8015100:	f000 80f0 	beq.w	80152e4 <rcl_wait_set_resize+0x34c>
 8015104:	4620      	mov	r0, r4
 8015106:	4652      	mov	r2, sl
 8015108:	4631      	mov	r1, r6
 801510a:	f004 fd79 	bl	8019c00 <memset>
 801510e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015110:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015112:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015114:	2600      	movs	r6, #0
 8015116:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801511a:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801511c:	6326      	str	r6, [r4, #48]	@ 0x30
 801511e:	2b00      	cmp	r3, #0
 8015120:	f040 809d 	bne.w	801525e <rcl_wait_set_resize+0x2c6>
 8015124:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015126:	b120      	cbz	r0, 8015132 <rcl_wait_set_resize+0x19a>
 8015128:	4639      	mov	r1, r7
 801512a:	47c0      	blx	r8
 801512c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801512e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015130:	62ab      	str	r3, [r5, #40]	@ 0x28
 8015132:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015134:	b310      	cbz	r0, 801517c <rcl_wait_set_resize+0x1e4>
 8015136:	4639      	mov	r1, r7
 8015138:	47c0      	blx	r8
 801513a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801513c:	2000      	movs	r0, #0
 801513e:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8015142:	b003      	add	sp, #12
 8015144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015148:	6800      	ldr	r0, [r0, #0]
 801514a:	b120      	cbz	r0, 8015156 <rcl_wait_set_resize+0x1be>
 801514c:	4651      	mov	r1, sl
 801514e:	47d8      	blx	fp
 8015150:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015152:	f8c5 8000 	str.w	r8, [r5]
 8015156:	68a0      	ldr	r0, [r4, #8]
 8015158:	2800      	cmp	r0, #0
 801515a:	f43f af61 	beq.w	8015020 <rcl_wait_set_resize+0x88>
 801515e:	4651      	mov	r1, sl
 8015160:	47d8      	blx	fp
 8015162:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015164:	2300      	movs	r3, #0
 8015166:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801516a:	e759      	b.n	8015020 <rcl_wait_set_resize+0x88>
 801516c:	6828      	ldr	r0, [r5, #0]
 801516e:	9301      	str	r3, [sp, #4]
 8015170:	4651      	mov	r1, sl
 8015172:	47d8      	blx	fp
 8015174:	9b01      	ldr	r3, [sp, #4]
 8015176:	e9c5 3300 	strd	r3, r3, [r5]
 801517a:	200a      	movs	r0, #10
 801517c:	b003      	add	sp, #12
 801517e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015182:	00b4      	lsls	r4, r6, #2
 8015184:	68a8      	ldr	r0, [r5, #8]
 8015186:	464a      	mov	r2, r9
 8015188:	4621      	mov	r1, r4
 801518a:	4798      	blx	r3
 801518c:	60a8      	str	r0, [r5, #8]
 801518e:	2800      	cmp	r0, #0
 8015190:	d0f3      	beq.n	801517a <rcl_wait_set_resize+0x1e2>
 8015192:	4622      	mov	r2, r4
 8015194:	4641      	mov	r1, r8
 8015196:	f004 fd33 	bl	8019c00 <memset>
 801519a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801519c:	60ee      	str	r6, [r5, #12]
 801519e:	f04f 0800 	mov.w	r8, #0
 80151a2:	19f6      	adds	r6, r6, r7
 80151a4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80151a8:	f8c4 8010 	str.w	r8, [r4, #16]
 80151ac:	f43f af54 	beq.w	8015058 <rcl_wait_set_resize+0xc0>
 80151b0:	00b6      	lsls	r6, r6, #2
 80151b2:	464a      	mov	r2, r9
 80151b4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80151b6:	6960      	ldr	r0, [r4, #20]
 80151b8:	4631      	mov	r1, r6
 80151ba:	4798      	blx	r3
 80151bc:	4681      	mov	r9, r0
 80151be:	6160      	str	r0, [r4, #20]
 80151c0:	2800      	cmp	r0, #0
 80151c2:	d076      	beq.n	80152b2 <rcl_wait_set_resize+0x31a>
 80151c4:	4632      	mov	r2, r6
 80151c6:	4641      	mov	r1, r8
 80151c8:	f004 fd1a 	bl	8019c00 <memset>
 80151cc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80151ce:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80151d2:	e74a      	b.n	801506a <rcl_wait_set_resize+0xd2>
 80151d4:	00bc      	lsls	r4, r7, #2
 80151d6:	6928      	ldr	r0, [r5, #16]
 80151d8:	464a      	mov	r2, r9
 80151da:	4621      	mov	r1, r4
 80151dc:	47c0      	blx	r8
 80151de:	6128      	str	r0, [r5, #16]
 80151e0:	2800      	cmp	r0, #0
 80151e2:	d0ca      	beq.n	801517a <rcl_wait_set_resize+0x1e2>
 80151e4:	4622      	mov	r2, r4
 80151e6:	4631      	mov	r1, r6
 80151e8:	f004 fd0a 	bl	8019c00 <memset>
 80151ec:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80151ee:	616f      	str	r7, [r5, #20]
 80151f0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80151f4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80151f8:	e749      	b.n	801508e <rcl_wait_set_resize+0xf6>
 80151fa:	009c      	lsls	r4, r3, #2
 80151fc:	69a8      	ldr	r0, [r5, #24]
 80151fe:	464a      	mov	r2, r9
 8015200:	4621      	mov	r1, r4
 8015202:	47c0      	blx	r8
 8015204:	61a8      	str	r0, [r5, #24]
 8015206:	2800      	cmp	r0, #0
 8015208:	d0b7      	beq.n	801517a <rcl_wait_set_resize+0x1e2>
 801520a:	4622      	mov	r2, r4
 801520c:	4631      	mov	r1, r6
 801520e:	f004 fcf7 	bl	8019c00 <memset>
 8015212:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8015214:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015216:	61eb      	str	r3, [r5, #28]
 8015218:	6a38      	ldr	r0, [r7, #32]
 801521a:	61fe      	str	r6, [r7, #28]
 801521c:	464a      	mov	r2, r9
 801521e:	4621      	mov	r1, r4
 8015220:	47c0      	blx	r8
 8015222:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015224:	6238      	str	r0, [r7, #32]
 8015226:	6a1f      	ldr	r7, [r3, #32]
 8015228:	2f00      	cmp	r7, #0
 801522a:	d054      	beq.n	80152d6 <rcl_wait_set_resize+0x33e>
 801522c:	4622      	mov	r2, r4
 801522e:	4631      	mov	r1, r6
 8015230:	4638      	mov	r0, r7
 8015232:	f004 fce5 	bl	8019c00 <memset>
 8015236:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015238:	e73f      	b.n	80150ba <rcl_wait_set_resize+0x122>
 801523a:	6a28      	ldr	r0, [r5, #32]
 801523c:	b120      	cbz	r0, 8015248 <rcl_wait_set_resize+0x2b0>
 801523e:	4639      	mov	r1, r7
 8015240:	47c0      	blx	r8
 8015242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015244:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015246:	622b      	str	r3, [r5, #32]
 8015248:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801524a:	2800      	cmp	r0, #0
 801524c:	f43f af60 	beq.w	8015110 <rcl_wait_set_resize+0x178>
 8015250:	4639      	mov	r1, r7
 8015252:	47c0      	blx	r8
 8015254:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015256:	2300      	movs	r3, #0
 8015258:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801525c:	e758      	b.n	8015110 <rcl_wait_set_resize+0x178>
 801525e:	009c      	lsls	r4, r3, #2
 8015260:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015262:	463a      	mov	r2, r7
 8015264:	4621      	mov	r1, r4
 8015266:	47c8      	blx	r9
 8015268:	62a8      	str	r0, [r5, #40]	@ 0x28
 801526a:	2800      	cmp	r0, #0
 801526c:	d085      	beq.n	801517a <rcl_wait_set_resize+0x1e2>
 801526e:	4622      	mov	r2, r4
 8015270:	4631      	mov	r1, r6
 8015272:	f004 fcc5 	bl	8019c00 <memset>
 8015276:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801527a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801527c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801527e:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015282:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8015286:	463a      	mov	r2, r7
 8015288:	4621      	mov	r1, r4
 801528a:	47c8      	blx	r9
 801528c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801528e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8015292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015294:	b36b      	cbz	r3, 80152f2 <rcl_wait_set_resize+0x35a>
 8015296:	4622      	mov	r2, r4
 8015298:	4631      	mov	r1, r6
 801529a:	4618      	mov	r0, r3
 801529c:	f004 fcb0 	bl	8019c00 <memset>
 80152a0:	4630      	mov	r0, r6
 80152a2:	b003      	add	sp, #12
 80152a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152a8:	200b      	movs	r0, #11
 80152aa:	4770      	bx	lr
 80152ac:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80152b0:	e764      	b.n	801517c <rcl_wait_set_resize+0x1e4>
 80152b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80152b4:	68a8      	ldr	r0, [r5, #8]
 80152b6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80152b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80152ba:	4798      	blx	r3
 80152bc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80152be:	6928      	ldr	r0, [r5, #16]
 80152c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80152c2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80152c4:	f8c5 900c 	str.w	r9, [r5, #12]
 80152c8:	f8c5 9008 	str.w	r9, [r5, #8]
 80152cc:	4790      	blx	r2
 80152ce:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80152d2:	200a      	movs	r0, #10
 80152d4:	e752      	b.n	801517c <rcl_wait_set_resize+0x1e4>
 80152d6:	69a8      	ldr	r0, [r5, #24]
 80152d8:	4649      	mov	r1, r9
 80152da:	47d0      	blx	sl
 80152dc:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80152e0:	200a      	movs	r0, #10
 80152e2:	e74b      	b.n	801517c <rcl_wait_set_resize+0x1e4>
 80152e4:	6a28      	ldr	r0, [r5, #32]
 80152e6:	4639      	mov	r1, r7
 80152e8:	47c0      	blx	r8
 80152ea:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80152ee:	200a      	movs	r0, #10
 80152f0:	e744      	b.n	801517c <rcl_wait_set_resize+0x1e4>
 80152f2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80152f4:	9301      	str	r3, [sp, #4]
 80152f6:	4639      	mov	r1, r7
 80152f8:	47c0      	blx	r8
 80152fa:	9b01      	ldr	r3, [sp, #4]
 80152fc:	200a      	movs	r0, #10
 80152fe:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8015302:	e73b      	b.n	801517c <rcl_wait_set_resize+0x1e4>

08015304 <rcl_wait_set_init>:
 8015304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015308:	b084      	sub	sp, #16
 801530a:	4604      	mov	r4, r0
 801530c:	a810      	add	r0, sp, #64	@ 0x40
 801530e:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8015312:	460f      	mov	r7, r1
 8015314:	4690      	mov	r8, r2
 8015316:	4699      	mov	r9, r3
 8015318:	f7f8 f9ac 	bl	800d674 <rcutils_allocator_is_valid>
 801531c:	2800      	cmp	r0, #0
 801531e:	d06b      	beq.n	80153f8 <rcl_wait_set_init+0xf4>
 8015320:	2c00      	cmp	r4, #0
 8015322:	d069      	beq.n	80153f8 <rcl_wait_set_init+0xf4>
 8015324:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015326:	b125      	cbz	r5, 8015332 <rcl_wait_set_init+0x2e>
 8015328:	2564      	movs	r5, #100	@ 0x64
 801532a:	4628      	mov	r0, r5
 801532c:	b004      	add	sp, #16
 801532e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015332:	f1ba 0f00 	cmp.w	sl, #0
 8015336:	d05f      	beq.n	80153f8 <rcl_wait_set_init+0xf4>
 8015338:	4650      	mov	r0, sl
 801533a:	f7fe fc89 	bl	8013c50 <rcl_context_is_valid>
 801533e:	2800      	cmp	r0, #0
 8015340:	d067      	beq.n	8015412 <rcl_wait_set_init+0x10e>
 8015342:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015344:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015346:	205c      	movs	r0, #92	@ 0x5c
 8015348:	4798      	blx	r3
 801534a:	6320      	str	r0, [r4, #48]	@ 0x30
 801534c:	2800      	cmp	r0, #0
 801534e:	d062      	beq.n	8015416 <rcl_wait_set_init+0x112>
 8015350:	4629      	mov	r1, r5
 8015352:	225c      	movs	r2, #92	@ 0x5c
 8015354:	f004 fc54 	bl	8019c00 <memset>
 8015358:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 801535c:	eb03 0e02 	add.w	lr, r3, r2
 8015360:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015362:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015364:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015368:	449e      	add	lr, r3
 801536a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801536e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8015372:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8015376:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801537a:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801537e:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8015382:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8015386:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801538a:	f8da a000 	ldr.w	sl, [sl]
 801538e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015390:	44c6      	add	lr, r8
 8015392:	f8dc 3000 	ldr.w	r3, [ip]
 8015396:	602b      	str	r3, [r5, #0]
 8015398:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 801539c:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80153a0:	f002 f9ec 	bl	801777c <rmw_create_wait_set>
 80153a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80153a6:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80153a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80153aa:	b350      	cbz	r0, 8015402 <rcl_wait_set_init+0xfe>
 80153ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153ae:	9302      	str	r3, [sp, #8]
 80153b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80153b2:	9301      	str	r3, [sp, #4]
 80153b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80153b6:	9300      	str	r3, [sp, #0]
 80153b8:	4642      	mov	r2, r8
 80153ba:	464b      	mov	r3, r9
 80153bc:	4639      	mov	r1, r7
 80153be:	4620      	mov	r0, r4
 80153c0:	f7ff fdea 	bl	8014f98 <rcl_wait_set_resize>
 80153c4:	4605      	mov	r5, r0
 80153c6:	2800      	cmp	r0, #0
 80153c8:	d0af      	beq.n	801532a <rcl_wait_set_init+0x26>
 80153ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80153cc:	bb2b      	cbnz	r3, 801541a <rcl_wait_set_init+0x116>
 80153ce:	2600      	movs	r6, #0
 80153d0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80153d4:	9600      	str	r6, [sp, #0]
 80153d6:	4633      	mov	r3, r6
 80153d8:	4632      	mov	r2, r6
 80153da:	4631      	mov	r1, r6
 80153dc:	4620      	mov	r0, r4
 80153de:	f7ff fddb 	bl	8014f98 <rcl_wait_set_resize>
 80153e2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80153e4:	2800      	cmp	r0, #0
 80153e6:	d0a0      	beq.n	801532a <rcl_wait_set_init+0x26>
 80153e8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80153ea:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80153ec:	4798      	blx	r3
 80153ee:	4628      	mov	r0, r5
 80153f0:	6326      	str	r6, [r4, #48]	@ 0x30
 80153f2:	b004      	add	sp, #16
 80153f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153f8:	250b      	movs	r5, #11
 80153fa:	4628      	mov	r0, r5
 80153fc:	b004      	add	sp, #16
 80153fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015402:	2501      	movs	r5, #1
 8015404:	f002 f9c4 	bl	8017790 <rmw_destroy_wait_set>
 8015408:	2800      	cmp	r0, #0
 801540a:	bf18      	it	ne
 801540c:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8015410:	e7dd      	b.n	80153ce <rcl_wait_set_init+0xca>
 8015412:	2565      	movs	r5, #101	@ 0x65
 8015414:	e789      	b.n	801532a <rcl_wait_set_init+0x26>
 8015416:	250a      	movs	r5, #10
 8015418:	e787      	b.n	801532a <rcl_wait_set_init+0x26>
 801541a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801541c:	e7f2      	b.n	8015404 <rcl_wait_set_init+0x100>
 801541e:	bf00      	nop

08015420 <rcl_wait_set_add_guard_condition>:
 8015420:	b318      	cbz	r0, 801546a <rcl_wait_set_add_guard_condition+0x4a>
 8015422:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015424:	b570      	push	{r4, r5, r6, lr}
 8015426:	4604      	mov	r4, r0
 8015428:	b30b      	cbz	r3, 801546e <rcl_wait_set_add_guard_condition+0x4e>
 801542a:	b319      	cbz	r1, 8015474 <rcl_wait_set_add_guard_condition+0x54>
 801542c:	68dd      	ldr	r5, [r3, #12]
 801542e:	68c0      	ldr	r0, [r0, #12]
 8015430:	4285      	cmp	r5, r0
 8015432:	d217      	bcs.n	8015464 <rcl_wait_set_add_guard_condition+0x44>
 8015434:	68a0      	ldr	r0, [r4, #8]
 8015436:	1c6e      	adds	r6, r5, #1
 8015438:	60de      	str	r6, [r3, #12]
 801543a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801543e:	b102      	cbz	r2, 8015442 <rcl_wait_set_add_guard_condition+0x22>
 8015440:	6015      	str	r5, [r2, #0]
 8015442:	4608      	mov	r0, r1
 8015444:	f003 fd7e 	bl	8018f44 <rcl_guard_condition_get_rmw_handle>
 8015448:	b150      	cbz	r0, 8015460 <rcl_wait_set_add_guard_condition+0x40>
 801544a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801544c:	6842      	ldr	r2, [r0, #4]
 801544e:	695b      	ldr	r3, [r3, #20]
 8015450:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015454:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015456:	6913      	ldr	r3, [r2, #16]
 8015458:	3301      	adds	r3, #1
 801545a:	2000      	movs	r0, #0
 801545c:	6113      	str	r3, [r2, #16]
 801545e:	bd70      	pop	{r4, r5, r6, pc}
 8015460:	2001      	movs	r0, #1
 8015462:	bd70      	pop	{r4, r5, r6, pc}
 8015464:	f240 3086 	movw	r0, #902	@ 0x386
 8015468:	bd70      	pop	{r4, r5, r6, pc}
 801546a:	200b      	movs	r0, #11
 801546c:	4770      	bx	lr
 801546e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015472:	bd70      	pop	{r4, r5, r6, pc}
 8015474:	200b      	movs	r0, #11
 8015476:	bd70      	pop	{r4, r5, r6, pc}

08015478 <rcl_wait_set_add_timer>:
 8015478:	b328      	cbz	r0, 80154c6 <rcl_wait_set_add_timer+0x4e>
 801547a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801547c:	b570      	push	{r4, r5, r6, lr}
 801547e:	4604      	mov	r4, r0
 8015480:	b31b      	cbz	r3, 80154ca <rcl_wait_set_add_timer+0x52>
 8015482:	b329      	cbz	r1, 80154d0 <rcl_wait_set_add_timer+0x58>
 8015484:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8015486:	6965      	ldr	r5, [r4, #20]
 8015488:	42a8      	cmp	r0, r5
 801548a:	d219      	bcs.n	80154c0 <rcl_wait_set_add_timer+0x48>
 801548c:	6925      	ldr	r5, [r4, #16]
 801548e:	1c46      	adds	r6, r0, #1
 8015490:	641e      	str	r6, [r3, #64]	@ 0x40
 8015492:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8015496:	b102      	cbz	r2, 801549a <rcl_wait_set_add_timer+0x22>
 8015498:	6010      	str	r0, [r2, #0]
 801549a:	4608      	mov	r0, r1
 801549c:	f7ff fc10 	bl	8014cc0 <rcl_timer_get_guard_condition>
 80154a0:	b168      	cbz	r0, 80154be <rcl_wait_set_add_timer+0x46>
 80154a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80154a4:	68e3      	ldr	r3, [r4, #12]
 80154a6:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80154a8:	3b01      	subs	r3, #1
 80154aa:	441d      	add	r5, r3
 80154ac:	f003 fd4a 	bl	8018f44 <rcl_guard_condition_get_rmw_handle>
 80154b0:	b180      	cbz	r0, 80154d4 <rcl_wait_set_add_timer+0x5c>
 80154b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154b4:	6842      	ldr	r2, [r0, #4]
 80154b6:	695b      	ldr	r3, [r3, #20]
 80154b8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80154bc:	2000      	movs	r0, #0
 80154be:	bd70      	pop	{r4, r5, r6, pc}
 80154c0:	f240 3086 	movw	r0, #902	@ 0x386
 80154c4:	bd70      	pop	{r4, r5, r6, pc}
 80154c6:	200b      	movs	r0, #11
 80154c8:	4770      	bx	lr
 80154ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80154ce:	bd70      	pop	{r4, r5, r6, pc}
 80154d0:	200b      	movs	r0, #11
 80154d2:	bd70      	pop	{r4, r5, r6, pc}
 80154d4:	2001      	movs	r0, #1
 80154d6:	bd70      	pop	{r4, r5, r6, pc}

080154d8 <rcl_wait_set_add_client>:
 80154d8:	b318      	cbz	r0, 8015522 <rcl_wait_set_add_client+0x4a>
 80154da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80154dc:	b570      	push	{r4, r5, r6, lr}
 80154de:	4604      	mov	r4, r0
 80154e0:	b30b      	cbz	r3, 8015526 <rcl_wait_set_add_client+0x4e>
 80154e2:	b319      	cbz	r1, 801552c <rcl_wait_set_add_client+0x54>
 80154e4:	699d      	ldr	r5, [r3, #24]
 80154e6:	69c0      	ldr	r0, [r0, #28]
 80154e8:	4285      	cmp	r5, r0
 80154ea:	d217      	bcs.n	801551c <rcl_wait_set_add_client+0x44>
 80154ec:	69a0      	ldr	r0, [r4, #24]
 80154ee:	1c6e      	adds	r6, r5, #1
 80154f0:	619e      	str	r6, [r3, #24]
 80154f2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80154f6:	b102      	cbz	r2, 80154fa <rcl_wait_set_add_client+0x22>
 80154f8:	6015      	str	r5, [r2, #0]
 80154fa:	4608      	mov	r0, r1
 80154fc:	f7fe fafc 	bl	8013af8 <rcl_client_get_rmw_handle>
 8015500:	b150      	cbz	r0, 8015518 <rcl_wait_set_add_client+0x40>
 8015502:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015504:	6842      	ldr	r2, [r0, #4]
 8015506:	6a1b      	ldr	r3, [r3, #32]
 8015508:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801550c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801550e:	69d3      	ldr	r3, [r2, #28]
 8015510:	3301      	adds	r3, #1
 8015512:	2000      	movs	r0, #0
 8015514:	61d3      	str	r3, [r2, #28]
 8015516:	bd70      	pop	{r4, r5, r6, pc}
 8015518:	2001      	movs	r0, #1
 801551a:	bd70      	pop	{r4, r5, r6, pc}
 801551c:	f240 3086 	movw	r0, #902	@ 0x386
 8015520:	bd70      	pop	{r4, r5, r6, pc}
 8015522:	200b      	movs	r0, #11
 8015524:	4770      	bx	lr
 8015526:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801552a:	bd70      	pop	{r4, r5, r6, pc}
 801552c:	200b      	movs	r0, #11
 801552e:	bd70      	pop	{r4, r5, r6, pc}

08015530 <rcl_wait_set_add_service>:
 8015530:	b318      	cbz	r0, 801557a <rcl_wait_set_add_service+0x4a>
 8015532:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015534:	b570      	push	{r4, r5, r6, lr}
 8015536:	4604      	mov	r4, r0
 8015538:	b30b      	cbz	r3, 801557e <rcl_wait_set_add_service+0x4e>
 801553a:	b319      	cbz	r1, 8015584 <rcl_wait_set_add_service+0x54>
 801553c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801553e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8015540:	4285      	cmp	r5, r0
 8015542:	d217      	bcs.n	8015574 <rcl_wait_set_add_service+0x44>
 8015544:	6a20      	ldr	r0, [r4, #32]
 8015546:	1c6e      	adds	r6, r5, #1
 8015548:	625e      	str	r6, [r3, #36]	@ 0x24
 801554a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801554e:	b102      	cbz	r2, 8015552 <rcl_wait_set_add_service+0x22>
 8015550:	6015      	str	r5, [r2, #0]
 8015552:	4608      	mov	r0, r1
 8015554:	f7fe ff3e 	bl	80143d4 <rcl_service_get_rmw_handle>
 8015558:	b150      	cbz	r0, 8015570 <rcl_wait_set_add_service+0x40>
 801555a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801555c:	6842      	ldr	r2, [r0, #4]
 801555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015560:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015564:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015566:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015568:	3301      	adds	r3, #1
 801556a:	2000      	movs	r0, #0
 801556c:	6293      	str	r3, [r2, #40]	@ 0x28
 801556e:	bd70      	pop	{r4, r5, r6, pc}
 8015570:	2001      	movs	r0, #1
 8015572:	bd70      	pop	{r4, r5, r6, pc}
 8015574:	f240 3086 	movw	r0, #902	@ 0x386
 8015578:	bd70      	pop	{r4, r5, r6, pc}
 801557a:	200b      	movs	r0, #11
 801557c:	4770      	bx	lr
 801557e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015582:	bd70      	pop	{r4, r5, r6, pc}
 8015584:	200b      	movs	r0, #11
 8015586:	bd70      	pop	{r4, r5, r6, pc}

08015588 <rcl_wait>:
 8015588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801558c:	ed2d 8b02 	vpush	{d8}
 8015590:	b08d      	sub	sp, #52	@ 0x34
 8015592:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015596:	2800      	cmp	r0, #0
 8015598:	f000 8143 	beq.w	8015822 <rcl_wait+0x29a>
 801559c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801559e:	4605      	mov	r5, r0
 80155a0:	2e00      	cmp	r6, #0
 80155a2:	f000 8112 	beq.w	80157ca <rcl_wait+0x242>
 80155a6:	6843      	ldr	r3, [r0, #4]
 80155a8:	b983      	cbnz	r3, 80155cc <rcl_wait+0x44>
 80155aa:	68eb      	ldr	r3, [r5, #12]
 80155ac:	b973      	cbnz	r3, 80155cc <rcl_wait+0x44>
 80155ae:	696b      	ldr	r3, [r5, #20]
 80155b0:	b963      	cbnz	r3, 80155cc <rcl_wait+0x44>
 80155b2:	69eb      	ldr	r3, [r5, #28]
 80155b4:	b953      	cbnz	r3, 80155cc <rcl_wait+0x44>
 80155b6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80155b8:	b943      	cbnz	r3, 80155cc <rcl_wait+0x44>
 80155ba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80155bc:	b933      	cbnz	r3, 80155cc <rcl_wait+0x44>
 80155be:	f240 3085 	movw	r0, #901	@ 0x385
 80155c2:	b00d      	add	sp, #52	@ 0x34
 80155c4:	ecbd 8b02 	vpop	{d8}
 80155c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155cc:	9b04      	ldr	r3, [sp, #16]
 80155ce:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80155d0:	2b01      	cmp	r3, #1
 80155d2:	9b05      	ldr	r3, [sp, #20]
 80155d4:	f173 0300 	sbcs.w	r3, r3, #0
 80155d8:	f2c0 80f0 	blt.w	80157bc <rcl_wait+0x234>
 80155dc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80155e0:	4643      	mov	r3, r8
 80155e2:	2a00      	cmp	r2, #0
 80155e4:	f000 8133 	beq.w	801584e <rcl_wait+0x2c6>
 80155e8:	2400      	movs	r4, #0
 80155ea:	4613      	mov	r3, r2
 80155ec:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8015860 <rcl_wait+0x2d8>
 80155f0:	46a2      	mov	sl, r4
 80155f2:	46a3      	mov	fp, r4
 80155f4:	f240 3921 	movw	r9, #801	@ 0x321
 80155f8:	4632      	mov	r2, r6
 80155fa:	e014      	b.n	8015626 <rcl_wait+0x9e>
 80155fc:	2800      	cmp	r0, #0
 80155fe:	d1e0      	bne.n	80155c2 <rcl_wait+0x3a>
 8015600:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015604:	4542      	cmp	r2, r8
 8015606:	eb73 0107 	sbcs.w	r1, r3, r7
 801560a:	da03      	bge.n	8015614 <rcl_wait+0x8c>
 801560c:	4690      	mov	r8, r2
 801560e:	461f      	mov	r7, r3
 8015610:	f04f 0b01 	mov.w	fp, #1
 8015614:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015616:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015618:	3401      	adds	r4, #1
 801561a:	f14a 0a00 	adc.w	sl, sl, #0
 801561e:	429c      	cmp	r4, r3
 8015620:	f17a 0100 	sbcs.w	r1, sl, #0
 8015624:	d228      	bcs.n	8015678 <rcl_wait+0xf0>
 8015626:	6928      	ldr	r0, [r5, #16]
 8015628:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801562c:	a908      	add	r1, sp, #32
 801562e:	00a6      	lsls	r6, r4, #2
 8015630:	2800      	cmp	r0, #0
 8015632:	d0f1      	beq.n	8015618 <rcl_wait+0x90>
 8015634:	68eb      	ldr	r3, [r5, #12]
 8015636:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801563a:	4423      	add	r3, r4
 801563c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015640:	f1be 0f00 	cmp.w	lr, #0
 8015644:	d006      	beq.n	8015654 <rcl_wait+0xcc>
 8015646:	6913      	ldr	r3, [r2, #16]
 8015648:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801564c:	3301      	adds	r3, #1
 801564e:	6113      	str	r3, [r2, #16]
 8015650:	692b      	ldr	r3, [r5, #16]
 8015652:	5998      	ldr	r0, [r3, r6]
 8015654:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015658:	f7ff fb00 	bl	8014c5c <rcl_timer_get_time_until_next_call>
 801565c:	4548      	cmp	r0, r9
 801565e:	d1cd      	bne.n	80155fc <rcl_wait+0x74>
 8015660:	692b      	ldr	r3, [r5, #16]
 8015662:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015664:	2100      	movs	r1, #0
 8015666:	5199      	str	r1, [r3, r6]
 8015668:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801566a:	3401      	adds	r4, #1
 801566c:	f14a 0a00 	adc.w	sl, sl, #0
 8015670:	429c      	cmp	r4, r3
 8015672:	f17a 0100 	sbcs.w	r1, sl, #0
 8015676:	d3d6      	bcc.n	8015626 <rcl_wait+0x9e>
 8015678:	4616      	mov	r6, r2
 801567a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801567e:	4313      	orrs	r3, r2
 8015680:	46d9      	mov	r9, fp
 8015682:	f040 80a9 	bne.w	80157d8 <rcl_wait+0x250>
 8015686:	2300      	movs	r3, #0
 8015688:	2200      	movs	r2, #0
 801568a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801568e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015692:	ab08      	add	r3, sp, #32
 8015694:	9302      	str	r3, [sp, #8]
 8015696:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8015698:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801569c:	e9cd 3200 	strd	r3, r2, [sp]
 80156a0:	f106 0110 	add.w	r1, r6, #16
 80156a4:	f106 031c 	add.w	r3, r6, #28
 80156a8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80156ac:	1d30      	adds	r0, r6, #4
 80156ae:	f001 feed 	bl	801748c <rmw_wait>
 80156b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80156b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80156b6:	4680      	mov	r8, r0
 80156b8:	b1ca      	cbz	r2, 80156ee <rcl_wait+0x166>
 80156ba:	2400      	movs	r4, #0
 80156bc:	4627      	mov	r7, r4
 80156be:	692a      	ldr	r2, [r5, #16]
 80156c0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80156c4:	f10d 011f 	add.w	r1, sp, #31
 80156c8:	00a6      	lsls	r6, r4, #2
 80156ca:	b160      	cbz	r0, 80156e6 <rcl_wait+0x15e>
 80156cc:	f88d 701f 	strb.w	r7, [sp, #31]
 80156d0:	f7ff fa8a 	bl	8014be8 <rcl_timer_is_ready>
 80156d4:	2800      	cmp	r0, #0
 80156d6:	f47f af74 	bne.w	80155c2 <rcl_wait+0x3a>
 80156da:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80156de:	b90b      	cbnz	r3, 80156e4 <rcl_wait+0x15c>
 80156e0:	692a      	ldr	r2, [r5, #16]
 80156e2:	5193      	str	r3, [r2, r6]
 80156e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80156e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80156e8:	3401      	adds	r4, #1
 80156ea:	42a2      	cmp	r2, r4
 80156ec:	d8e7      	bhi.n	80156be <rcl_wait+0x136>
 80156ee:	f038 0002 	bics.w	r0, r8, #2
 80156f2:	f040 8090 	bne.w	8015816 <rcl_wait+0x28e>
 80156f6:	686e      	ldr	r6, [r5, #4]
 80156f8:	4602      	mov	r2, r0
 80156fa:	b91e      	cbnz	r6, 8015704 <rcl_wait+0x17c>
 80156fc:	e00d      	b.n	801571a <rcl_wait+0x192>
 80156fe:	3201      	adds	r2, #1
 8015700:	42b2      	cmp	r2, r6
 8015702:	d00a      	beq.n	801571a <rcl_wait+0x192>
 8015704:	6899      	ldr	r1, [r3, #8]
 8015706:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801570a:	2900      	cmp	r1, #0
 801570c:	d1f7      	bne.n	80156fe <rcl_wait+0x176>
 801570e:	682c      	ldr	r4, [r5, #0]
 8015710:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015714:	3201      	adds	r2, #1
 8015716:	42b2      	cmp	r2, r6
 8015718:	d1f4      	bne.n	8015704 <rcl_wait+0x17c>
 801571a:	68ee      	ldr	r6, [r5, #12]
 801571c:	2200      	movs	r2, #0
 801571e:	b91e      	cbnz	r6, 8015728 <rcl_wait+0x1a0>
 8015720:	e00d      	b.n	801573e <rcl_wait+0x1b6>
 8015722:	3201      	adds	r2, #1
 8015724:	42b2      	cmp	r2, r6
 8015726:	d00a      	beq.n	801573e <rcl_wait+0x1b6>
 8015728:	6959      	ldr	r1, [r3, #20]
 801572a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801572e:	2900      	cmp	r1, #0
 8015730:	d1f7      	bne.n	8015722 <rcl_wait+0x19a>
 8015732:	68ac      	ldr	r4, [r5, #8]
 8015734:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015738:	3201      	adds	r2, #1
 801573a:	42b2      	cmp	r2, r6
 801573c:	d1f4      	bne.n	8015728 <rcl_wait+0x1a0>
 801573e:	69ee      	ldr	r6, [r5, #28]
 8015740:	2200      	movs	r2, #0
 8015742:	b91e      	cbnz	r6, 801574c <rcl_wait+0x1c4>
 8015744:	e00d      	b.n	8015762 <rcl_wait+0x1da>
 8015746:	3201      	adds	r2, #1
 8015748:	42b2      	cmp	r2, r6
 801574a:	d00a      	beq.n	8015762 <rcl_wait+0x1da>
 801574c:	6a19      	ldr	r1, [r3, #32]
 801574e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015752:	2900      	cmp	r1, #0
 8015754:	d1f7      	bne.n	8015746 <rcl_wait+0x1be>
 8015756:	69ac      	ldr	r4, [r5, #24]
 8015758:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801575c:	3201      	adds	r2, #1
 801575e:	42b2      	cmp	r2, r6
 8015760:	d1f4      	bne.n	801574c <rcl_wait+0x1c4>
 8015762:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8015764:	2200      	movs	r2, #0
 8015766:	b91e      	cbnz	r6, 8015770 <rcl_wait+0x1e8>
 8015768:	e00d      	b.n	8015786 <rcl_wait+0x1fe>
 801576a:	3201      	adds	r2, #1
 801576c:	4296      	cmp	r6, r2
 801576e:	d00a      	beq.n	8015786 <rcl_wait+0x1fe>
 8015770:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015772:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015776:	2900      	cmp	r1, #0
 8015778:	d1f7      	bne.n	801576a <rcl_wait+0x1e2>
 801577a:	6a2c      	ldr	r4, [r5, #32]
 801577c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015780:	3201      	adds	r2, #1
 8015782:	4296      	cmp	r6, r2
 8015784:	d1f4      	bne.n	8015770 <rcl_wait+0x1e8>
 8015786:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8015788:	2200      	movs	r2, #0
 801578a:	b91e      	cbnz	r6, 8015794 <rcl_wait+0x20c>
 801578c:	e00d      	b.n	80157aa <rcl_wait+0x222>
 801578e:	3201      	adds	r2, #1
 8015790:	42b2      	cmp	r2, r6
 8015792:	d00a      	beq.n	80157aa <rcl_wait+0x222>
 8015794:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015796:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801579a:	2900      	cmp	r1, #0
 801579c:	d1f7      	bne.n	801578e <rcl_wait+0x206>
 801579e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80157a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80157a4:	3201      	adds	r2, #1
 80157a6:	42b2      	cmp	r2, r6
 80157a8:	d1f4      	bne.n	8015794 <rcl_wait+0x20c>
 80157aa:	f1b8 0f02 	cmp.w	r8, #2
 80157ae:	f47f af08 	bne.w	80155c2 <rcl_wait+0x3a>
 80157b2:	464b      	mov	r3, r9
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	bf08      	it	eq
 80157b8:	2002      	moveq	r0, #2
 80157ba:	e702      	b.n	80155c2 <rcl_wait+0x3a>
 80157bc:	2a00      	cmp	r2, #0
 80157be:	d03a      	beq.n	8015836 <rcl_wait+0x2ae>
 80157c0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80157c4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80157c8:	e70e      	b.n	80155e8 <rcl_wait+0x60>
 80157ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80157ce:	b00d      	add	sp, #52	@ 0x34
 80157d0:	ecbd 8b02 	vpop	{d8}
 80157d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157d8:	9b04      	ldr	r3, [sp, #16]
 80157da:	2b01      	cmp	r3, #1
 80157dc:	9b05      	ldr	r3, [sp, #20]
 80157de:	f173 0300 	sbcs.w	r3, r3, #0
 80157e2:	db24      	blt.n	801582e <rcl_wait+0x2a6>
 80157e4:	2f00      	cmp	r7, #0
 80157e6:	bfbc      	itt	lt
 80157e8:	f04f 0800 	movlt.w	r8, #0
 80157ec:	4647      	movlt	r7, r8
 80157ee:	a31e      	add	r3, pc, #120	@ (adr r3, 8015868 <rcl_wait+0x2e0>)
 80157f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157f4:	4640      	mov	r0, r8
 80157f6:	4639      	mov	r1, r7
 80157f8:	f7eb f948 	bl	8000a8c <__aeabi_ldivmod>
 80157fc:	a31a      	add	r3, pc, #104	@ (adr r3, 8015868 <rcl_wait+0x2e0>)
 80157fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015802:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015806:	4640      	mov	r0, r8
 8015808:	4639      	mov	r1, r7
 801580a:	f7eb f93f 	bl	8000a8c <__aeabi_ldivmod>
 801580e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015812:	ab08      	add	r3, sp, #32
 8015814:	e73e      	b.n	8015694 <rcl_wait+0x10c>
 8015816:	2001      	movs	r0, #1
 8015818:	b00d      	add	sp, #52	@ 0x34
 801581a:	ecbd 8b02 	vpop	{d8}
 801581e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015822:	200b      	movs	r0, #11
 8015824:	b00d      	add	sp, #52	@ 0x34
 8015826:	ecbd 8b02 	vpop	{d8}
 801582a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801582e:	465b      	mov	r3, fp
 8015830:	2b00      	cmp	r3, #0
 8015832:	d1d7      	bne.n	80157e4 <rcl_wait+0x25c>
 8015834:	e72e      	b.n	8015694 <rcl_wait+0x10c>
 8015836:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801583a:	430b      	orrs	r3, r1
 801583c:	bf08      	it	eq
 801583e:	4691      	moveq	r9, r2
 8015840:	f43f af21 	beq.w	8015686 <rcl_wait+0xfe>
 8015844:	9b04      	ldr	r3, [sp, #16]
 8015846:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801584a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801584e:	2b01      	cmp	r3, #1
 8015850:	9b05      	ldr	r3, [sp, #20]
 8015852:	f173 0300 	sbcs.w	r3, r3, #0
 8015856:	f04f 0300 	mov.w	r3, #0
 801585a:	4699      	mov	r9, r3
 801585c:	dac2      	bge.n	80157e4 <rcl_wait+0x25c>
 801585e:	e719      	b.n	8015694 <rcl_wait+0x10c>
 8015860:	ffffffff 	.word	0xffffffff
 8015864:	7fffffff 	.word	0x7fffffff
 8015868:	3b9aca00 	.word	0x3b9aca00
 801586c:	00000000 	.word	0x00000000

08015870 <rcl_action_take_goal_response>:
 8015870:	2800      	cmp	r0, #0
 8015872:	d039      	beq.n	80158e8 <rcl_action_take_goal_response+0x78>
 8015874:	b570      	push	{r4, r5, r6, lr}
 8015876:	4604      	mov	r4, r0
 8015878:	6800      	ldr	r0, [r0, #0]
 801587a:	b380      	cbz	r0, 80158de <rcl_action_take_goal_response+0x6e>
 801587c:	460d      	mov	r5, r1
 801587e:	4616      	mov	r6, r2
 8015880:	f7fe f9be 	bl	8013c00 <rcl_client_is_valid>
 8015884:	b330      	cbz	r0, 80158d4 <rcl_action_take_goal_response+0x64>
 8015886:	6820      	ldr	r0, [r4, #0]
 8015888:	3004      	adds	r0, #4
 801588a:	f7fe f9b9 	bl	8013c00 <rcl_client_is_valid>
 801588e:	b308      	cbz	r0, 80158d4 <rcl_action_take_goal_response+0x64>
 8015890:	6820      	ldr	r0, [r4, #0]
 8015892:	3008      	adds	r0, #8
 8015894:	f7fe f9b4 	bl	8013c00 <rcl_client_is_valid>
 8015898:	b1e0      	cbz	r0, 80158d4 <rcl_action_take_goal_response+0x64>
 801589a:	6820      	ldr	r0, [r4, #0]
 801589c:	300c      	adds	r0, #12
 801589e:	f7fe fe5f 	bl	8014560 <rcl_subscription_is_valid>
 80158a2:	b1b8      	cbz	r0, 80158d4 <rcl_action_take_goal_response+0x64>
 80158a4:	6820      	ldr	r0, [r4, #0]
 80158a6:	3010      	adds	r0, #16
 80158a8:	f7fe fe5a 	bl	8014560 <rcl_subscription_is_valid>
 80158ac:	b190      	cbz	r0, 80158d4 <rcl_action_take_goal_response+0x64>
 80158ae:	b1cd      	cbz	r5, 80158e4 <rcl_action_take_goal_response+0x74>
 80158b0:	b1c6      	cbz	r6, 80158e4 <rcl_action_take_goal_response+0x74>
 80158b2:	6820      	ldr	r0, [r4, #0]
 80158b4:	4632      	mov	r2, r6
 80158b6:	4629      	mov	r1, r5
 80158b8:	f7fe f95a 	bl	8013b70 <rcl_take_response>
 80158bc:	b148      	cbz	r0, 80158d2 <rcl_action_take_goal_response+0x62>
 80158be:	280a      	cmp	r0, #10
 80158c0:	d007      	beq.n	80158d2 <rcl_action_take_goal_response+0x62>
 80158c2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80158c6:	f640 0337 	movw	r3, #2103	@ 0x837
 80158ca:	4290      	cmp	r0, r2
 80158cc:	bf0c      	ite	eq
 80158ce:	4618      	moveq	r0, r3
 80158d0:	2001      	movne	r0, #1
 80158d2:	bd70      	pop	{r4, r5, r6, pc}
 80158d4:	f7f7 fef4 	bl	800d6c0 <rcutils_reset_error>
 80158d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80158dc:	bd70      	pop	{r4, r5, r6, pc}
 80158de:	f640 0036 	movw	r0, #2102	@ 0x836
 80158e2:	bd70      	pop	{r4, r5, r6, pc}
 80158e4:	200b      	movs	r0, #11
 80158e6:	bd70      	pop	{r4, r5, r6, pc}
 80158e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80158ec:	4770      	bx	lr
 80158ee:	bf00      	nop

080158f0 <rcl_action_send_result_request>:
 80158f0:	b390      	cbz	r0, 8015958 <rcl_action_send_result_request+0x68>
 80158f2:	b570      	push	{r4, r5, r6, lr}
 80158f4:	4604      	mov	r4, r0
 80158f6:	6800      	ldr	r0, [r0, #0]
 80158f8:	b348      	cbz	r0, 801594e <rcl_action_send_result_request+0x5e>
 80158fa:	460d      	mov	r5, r1
 80158fc:	4616      	mov	r6, r2
 80158fe:	f7fe f97f 	bl	8013c00 <rcl_client_is_valid>
 8015902:	b1f8      	cbz	r0, 8015944 <rcl_action_send_result_request+0x54>
 8015904:	6820      	ldr	r0, [r4, #0]
 8015906:	3004      	adds	r0, #4
 8015908:	f7fe f97a 	bl	8013c00 <rcl_client_is_valid>
 801590c:	b1d0      	cbz	r0, 8015944 <rcl_action_send_result_request+0x54>
 801590e:	6820      	ldr	r0, [r4, #0]
 8015910:	3008      	adds	r0, #8
 8015912:	f7fe f975 	bl	8013c00 <rcl_client_is_valid>
 8015916:	b1a8      	cbz	r0, 8015944 <rcl_action_send_result_request+0x54>
 8015918:	6820      	ldr	r0, [r4, #0]
 801591a:	300c      	adds	r0, #12
 801591c:	f7fe fe20 	bl	8014560 <rcl_subscription_is_valid>
 8015920:	b180      	cbz	r0, 8015944 <rcl_action_send_result_request+0x54>
 8015922:	6820      	ldr	r0, [r4, #0]
 8015924:	3010      	adds	r0, #16
 8015926:	f7fe fe1b 	bl	8014560 <rcl_subscription_is_valid>
 801592a:	b158      	cbz	r0, 8015944 <rcl_action_send_result_request+0x54>
 801592c:	b195      	cbz	r5, 8015954 <rcl_action_send_result_request+0x64>
 801592e:	b18e      	cbz	r6, 8015954 <rcl_action_send_result_request+0x64>
 8015930:	6820      	ldr	r0, [r4, #0]
 8015932:	4632      	mov	r2, r6
 8015934:	4629      	mov	r1, r5
 8015936:	3008      	adds	r0, #8
 8015938:	f7fe f8e4 	bl	8013b04 <rcl_send_request>
 801593c:	3800      	subs	r0, #0
 801593e:	bf18      	it	ne
 8015940:	2001      	movne	r0, #1
 8015942:	bd70      	pop	{r4, r5, r6, pc}
 8015944:	f7f7 febc 	bl	800d6c0 <rcutils_reset_error>
 8015948:	f640 0036 	movw	r0, #2102	@ 0x836
 801594c:	bd70      	pop	{r4, r5, r6, pc}
 801594e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015952:	bd70      	pop	{r4, r5, r6, pc}
 8015954:	200b      	movs	r0, #11
 8015956:	bd70      	pop	{r4, r5, r6, pc}
 8015958:	f640 0036 	movw	r0, #2102	@ 0x836
 801595c:	4770      	bx	lr
 801595e:	bf00      	nop

08015960 <rcl_action_take_result_response>:
 8015960:	2800      	cmp	r0, #0
 8015962:	d03a      	beq.n	80159da <rcl_action_take_result_response+0x7a>
 8015964:	b570      	push	{r4, r5, r6, lr}
 8015966:	4604      	mov	r4, r0
 8015968:	6800      	ldr	r0, [r0, #0]
 801596a:	b388      	cbz	r0, 80159d0 <rcl_action_take_result_response+0x70>
 801596c:	460d      	mov	r5, r1
 801596e:	4616      	mov	r6, r2
 8015970:	f7fe f946 	bl	8013c00 <rcl_client_is_valid>
 8015974:	b338      	cbz	r0, 80159c6 <rcl_action_take_result_response+0x66>
 8015976:	6820      	ldr	r0, [r4, #0]
 8015978:	3004      	adds	r0, #4
 801597a:	f7fe f941 	bl	8013c00 <rcl_client_is_valid>
 801597e:	b310      	cbz	r0, 80159c6 <rcl_action_take_result_response+0x66>
 8015980:	6820      	ldr	r0, [r4, #0]
 8015982:	3008      	adds	r0, #8
 8015984:	f7fe f93c 	bl	8013c00 <rcl_client_is_valid>
 8015988:	b1e8      	cbz	r0, 80159c6 <rcl_action_take_result_response+0x66>
 801598a:	6820      	ldr	r0, [r4, #0]
 801598c:	300c      	adds	r0, #12
 801598e:	f7fe fde7 	bl	8014560 <rcl_subscription_is_valid>
 8015992:	b1c0      	cbz	r0, 80159c6 <rcl_action_take_result_response+0x66>
 8015994:	6820      	ldr	r0, [r4, #0]
 8015996:	3010      	adds	r0, #16
 8015998:	f7fe fde2 	bl	8014560 <rcl_subscription_is_valid>
 801599c:	b198      	cbz	r0, 80159c6 <rcl_action_take_result_response+0x66>
 801599e:	b1d5      	cbz	r5, 80159d6 <rcl_action_take_result_response+0x76>
 80159a0:	b1ce      	cbz	r6, 80159d6 <rcl_action_take_result_response+0x76>
 80159a2:	6820      	ldr	r0, [r4, #0]
 80159a4:	4632      	mov	r2, r6
 80159a6:	4629      	mov	r1, r5
 80159a8:	3008      	adds	r0, #8
 80159aa:	f7fe f8e1 	bl	8013b70 <rcl_take_response>
 80159ae:	b148      	cbz	r0, 80159c4 <rcl_action_take_result_response+0x64>
 80159b0:	280a      	cmp	r0, #10
 80159b2:	d007      	beq.n	80159c4 <rcl_action_take_result_response+0x64>
 80159b4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80159b8:	f640 0337 	movw	r3, #2103	@ 0x837
 80159bc:	4290      	cmp	r0, r2
 80159be:	bf0c      	ite	eq
 80159c0:	4618      	moveq	r0, r3
 80159c2:	2001      	movne	r0, #1
 80159c4:	bd70      	pop	{r4, r5, r6, pc}
 80159c6:	f7f7 fe7b 	bl	800d6c0 <rcutils_reset_error>
 80159ca:	f640 0036 	movw	r0, #2102	@ 0x836
 80159ce:	bd70      	pop	{r4, r5, r6, pc}
 80159d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80159d4:	bd70      	pop	{r4, r5, r6, pc}
 80159d6:	200b      	movs	r0, #11
 80159d8:	bd70      	pop	{r4, r5, r6, pc}
 80159da:	f640 0036 	movw	r0, #2102	@ 0x836
 80159de:	4770      	bx	lr

080159e0 <rcl_action_take_cancel_response>:
 80159e0:	2800      	cmp	r0, #0
 80159e2:	d03a      	beq.n	8015a5a <rcl_action_take_cancel_response+0x7a>
 80159e4:	b570      	push	{r4, r5, r6, lr}
 80159e6:	4604      	mov	r4, r0
 80159e8:	6800      	ldr	r0, [r0, #0]
 80159ea:	b388      	cbz	r0, 8015a50 <rcl_action_take_cancel_response+0x70>
 80159ec:	460d      	mov	r5, r1
 80159ee:	4616      	mov	r6, r2
 80159f0:	f7fe f906 	bl	8013c00 <rcl_client_is_valid>
 80159f4:	b338      	cbz	r0, 8015a46 <rcl_action_take_cancel_response+0x66>
 80159f6:	6820      	ldr	r0, [r4, #0]
 80159f8:	3004      	adds	r0, #4
 80159fa:	f7fe f901 	bl	8013c00 <rcl_client_is_valid>
 80159fe:	b310      	cbz	r0, 8015a46 <rcl_action_take_cancel_response+0x66>
 8015a00:	6820      	ldr	r0, [r4, #0]
 8015a02:	3008      	adds	r0, #8
 8015a04:	f7fe f8fc 	bl	8013c00 <rcl_client_is_valid>
 8015a08:	b1e8      	cbz	r0, 8015a46 <rcl_action_take_cancel_response+0x66>
 8015a0a:	6820      	ldr	r0, [r4, #0]
 8015a0c:	300c      	adds	r0, #12
 8015a0e:	f7fe fda7 	bl	8014560 <rcl_subscription_is_valid>
 8015a12:	b1c0      	cbz	r0, 8015a46 <rcl_action_take_cancel_response+0x66>
 8015a14:	6820      	ldr	r0, [r4, #0]
 8015a16:	3010      	adds	r0, #16
 8015a18:	f7fe fda2 	bl	8014560 <rcl_subscription_is_valid>
 8015a1c:	b198      	cbz	r0, 8015a46 <rcl_action_take_cancel_response+0x66>
 8015a1e:	b1d5      	cbz	r5, 8015a56 <rcl_action_take_cancel_response+0x76>
 8015a20:	b1ce      	cbz	r6, 8015a56 <rcl_action_take_cancel_response+0x76>
 8015a22:	6820      	ldr	r0, [r4, #0]
 8015a24:	4632      	mov	r2, r6
 8015a26:	4629      	mov	r1, r5
 8015a28:	3004      	adds	r0, #4
 8015a2a:	f7fe f8a1 	bl	8013b70 <rcl_take_response>
 8015a2e:	b148      	cbz	r0, 8015a44 <rcl_action_take_cancel_response+0x64>
 8015a30:	280a      	cmp	r0, #10
 8015a32:	d007      	beq.n	8015a44 <rcl_action_take_cancel_response+0x64>
 8015a34:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015a38:	f640 0337 	movw	r3, #2103	@ 0x837
 8015a3c:	4290      	cmp	r0, r2
 8015a3e:	bf0c      	ite	eq
 8015a40:	4618      	moveq	r0, r3
 8015a42:	2001      	movne	r0, #1
 8015a44:	bd70      	pop	{r4, r5, r6, pc}
 8015a46:	f7f7 fe3b 	bl	800d6c0 <rcutils_reset_error>
 8015a4a:	f640 0036 	movw	r0, #2102	@ 0x836
 8015a4e:	bd70      	pop	{r4, r5, r6, pc}
 8015a50:	f640 0036 	movw	r0, #2102	@ 0x836
 8015a54:	bd70      	pop	{r4, r5, r6, pc}
 8015a56:	200b      	movs	r0, #11
 8015a58:	bd70      	pop	{r4, r5, r6, pc}
 8015a5a:	f640 0036 	movw	r0, #2102	@ 0x836
 8015a5e:	4770      	bx	lr

08015a60 <rcl_action_take_feedback>:
 8015a60:	2800      	cmp	r0, #0
 8015a62:	d038      	beq.n	8015ad6 <rcl_action_take_feedback+0x76>
 8015a64:	b530      	push	{r4, r5, lr}
 8015a66:	4604      	mov	r4, r0
 8015a68:	6800      	ldr	r0, [r0, #0]
 8015a6a:	b091      	sub	sp, #68	@ 0x44
 8015a6c:	b378      	cbz	r0, 8015ace <rcl_action_take_feedback+0x6e>
 8015a6e:	460d      	mov	r5, r1
 8015a70:	f7fe f8c6 	bl	8013c00 <rcl_client_is_valid>
 8015a74:	b328      	cbz	r0, 8015ac2 <rcl_action_take_feedback+0x62>
 8015a76:	6820      	ldr	r0, [r4, #0]
 8015a78:	3004      	adds	r0, #4
 8015a7a:	f7fe f8c1 	bl	8013c00 <rcl_client_is_valid>
 8015a7e:	b300      	cbz	r0, 8015ac2 <rcl_action_take_feedback+0x62>
 8015a80:	6820      	ldr	r0, [r4, #0]
 8015a82:	3008      	adds	r0, #8
 8015a84:	f7fe f8bc 	bl	8013c00 <rcl_client_is_valid>
 8015a88:	b1d8      	cbz	r0, 8015ac2 <rcl_action_take_feedback+0x62>
 8015a8a:	6820      	ldr	r0, [r4, #0]
 8015a8c:	300c      	adds	r0, #12
 8015a8e:	f7fe fd67 	bl	8014560 <rcl_subscription_is_valid>
 8015a92:	b1b0      	cbz	r0, 8015ac2 <rcl_action_take_feedback+0x62>
 8015a94:	6820      	ldr	r0, [r4, #0]
 8015a96:	3010      	adds	r0, #16
 8015a98:	f7fe fd62 	bl	8014560 <rcl_subscription_is_valid>
 8015a9c:	b188      	cbz	r0, 8015ac2 <rcl_action_take_feedback+0x62>
 8015a9e:	b1ed      	cbz	r5, 8015adc <rcl_action_take_feedback+0x7c>
 8015aa0:	6820      	ldr	r0, [r4, #0]
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	466a      	mov	r2, sp
 8015aa6:	4629      	mov	r1, r5
 8015aa8:	300c      	adds	r0, #12
 8015aaa:	f7fe fcfb 	bl	80144a4 <rcl_take>
 8015aae:	b160      	cbz	r0, 8015aca <rcl_action_take_feedback+0x6a>
 8015ab0:	f240 1391 	movw	r3, #401	@ 0x191
 8015ab4:	4298      	cmp	r0, r3
 8015ab6:	d014      	beq.n	8015ae2 <rcl_action_take_feedback+0x82>
 8015ab8:	280a      	cmp	r0, #10
 8015aba:	bf18      	it	ne
 8015abc:	2001      	movne	r0, #1
 8015abe:	b011      	add	sp, #68	@ 0x44
 8015ac0:	bd30      	pop	{r4, r5, pc}
 8015ac2:	f7f7 fdfd 	bl	800d6c0 <rcutils_reset_error>
 8015ac6:	f640 0036 	movw	r0, #2102	@ 0x836
 8015aca:	b011      	add	sp, #68	@ 0x44
 8015acc:	bd30      	pop	{r4, r5, pc}
 8015ace:	f640 0036 	movw	r0, #2102	@ 0x836
 8015ad2:	b011      	add	sp, #68	@ 0x44
 8015ad4:	bd30      	pop	{r4, r5, pc}
 8015ad6:	f640 0036 	movw	r0, #2102	@ 0x836
 8015ada:	4770      	bx	lr
 8015adc:	200b      	movs	r0, #11
 8015ade:	b011      	add	sp, #68	@ 0x44
 8015ae0:	bd30      	pop	{r4, r5, pc}
 8015ae2:	f640 0037 	movw	r0, #2103	@ 0x837
 8015ae6:	e7f0      	b.n	8015aca <rcl_action_take_feedback+0x6a>

08015ae8 <rcl_action_wait_set_add_action_client>:
 8015ae8:	2800      	cmp	r0, #0
 8015aea:	d048      	beq.n	8015b7e <rcl_action_wait_set_add_action_client+0x96>
 8015aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aee:	460c      	mov	r4, r1
 8015af0:	2900      	cmp	r1, #0
 8015af2:	d03c      	beq.n	8015b6e <rcl_action_wait_set_add_action_client+0x86>
 8015af4:	4605      	mov	r5, r0
 8015af6:	6808      	ldr	r0, [r1, #0]
 8015af8:	2800      	cmp	r0, #0
 8015afa:	d038      	beq.n	8015b6e <rcl_action_wait_set_add_action_client+0x86>
 8015afc:	4617      	mov	r7, r2
 8015afe:	461e      	mov	r6, r3
 8015b00:	f7fe f87e 	bl	8013c00 <rcl_client_is_valid>
 8015b04:	b3b0      	cbz	r0, 8015b74 <rcl_action_wait_set_add_action_client+0x8c>
 8015b06:	6820      	ldr	r0, [r4, #0]
 8015b08:	3004      	adds	r0, #4
 8015b0a:	f7fe f879 	bl	8013c00 <rcl_client_is_valid>
 8015b0e:	b388      	cbz	r0, 8015b74 <rcl_action_wait_set_add_action_client+0x8c>
 8015b10:	6820      	ldr	r0, [r4, #0]
 8015b12:	3008      	adds	r0, #8
 8015b14:	f7fe f874 	bl	8013c00 <rcl_client_is_valid>
 8015b18:	b360      	cbz	r0, 8015b74 <rcl_action_wait_set_add_action_client+0x8c>
 8015b1a:	6820      	ldr	r0, [r4, #0]
 8015b1c:	300c      	adds	r0, #12
 8015b1e:	f7fe fd1f 	bl	8014560 <rcl_subscription_is_valid>
 8015b22:	b338      	cbz	r0, 8015b74 <rcl_action_wait_set_add_action_client+0x8c>
 8015b24:	6820      	ldr	r0, [r4, #0]
 8015b26:	3010      	adds	r0, #16
 8015b28:	f7fe fd1a 	bl	8014560 <rcl_subscription_is_valid>
 8015b2c:	b310      	cbz	r0, 8015b74 <rcl_action_wait_set_add_action_client+0x8c>
 8015b2e:	6821      	ldr	r1, [r4, #0]
 8015b30:	4628      	mov	r0, r5
 8015b32:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8015b36:	f7ff fccf 	bl	80154d8 <rcl_wait_set_add_client>
 8015b3a:	b9b8      	cbnz	r0, 8015b6c <rcl_action_wait_set_add_action_client+0x84>
 8015b3c:	6821      	ldr	r1, [r4, #0]
 8015b3e:	4628      	mov	r0, r5
 8015b40:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8015b44:	3104      	adds	r1, #4
 8015b46:	f7ff fcc7 	bl	80154d8 <rcl_wait_set_add_client>
 8015b4a:	b978      	cbnz	r0, 8015b6c <rcl_action_wait_set_add_action_client+0x84>
 8015b4c:	6821      	ldr	r1, [r4, #0]
 8015b4e:	4628      	mov	r0, r5
 8015b50:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8015b54:	3108      	adds	r1, #8
 8015b56:	f7ff fcbf 	bl	80154d8 <rcl_wait_set_add_client>
 8015b5a:	b938      	cbnz	r0, 8015b6c <rcl_action_wait_set_add_action_client+0x84>
 8015b5c:	6821      	ldr	r1, [r4, #0]
 8015b5e:	4628      	mov	r0, r5
 8015b60:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8015b64:	310c      	adds	r1, #12
 8015b66:	f7ff f96f 	bl	8014e48 <rcl_wait_set_add_subscription>
 8015b6a:	b158      	cbz	r0, 8015b84 <rcl_action_wait_set_add_action_client+0x9c>
 8015b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b6e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b74:	f7f7 fda4 	bl	800d6c0 <rcutils_reset_error>
 8015b78:	f640 0036 	movw	r0, #2102	@ 0x836
 8015b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b7e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015b82:	4770      	bx	lr
 8015b84:	6821      	ldr	r1, [r4, #0]
 8015b86:	4628      	mov	r0, r5
 8015b88:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8015b8c:	3110      	adds	r1, #16
 8015b8e:	f7ff f95b 	bl	8014e48 <rcl_wait_set_add_subscription>
 8015b92:	2800      	cmp	r0, #0
 8015b94:	d1ea      	bne.n	8015b6c <rcl_action_wait_set_add_action_client+0x84>
 8015b96:	b11f      	cbz	r7, 8015ba0 <rcl_action_wait_set_add_action_client+0xb8>
 8015b98:	6823      	ldr	r3, [r4, #0]
 8015b9a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8015b9e:	603b      	str	r3, [r7, #0]
 8015ba0:	2e00      	cmp	r6, #0
 8015ba2:	d0e3      	beq.n	8015b6c <rcl_action_wait_set_add_action_client+0x84>
 8015ba4:	6823      	ldr	r3, [r4, #0]
 8015ba6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8015baa:	6033      	str	r3, [r6, #0]
 8015bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bae:	bf00      	nop

08015bb0 <rcl_action_client_wait_set_get_entities_ready>:
 8015bb0:	2800      	cmp	r0, #0
 8015bb2:	f000 808d 	beq.w	8015cd0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8015bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bba:	460c      	mov	r4, r1
 8015bbc:	2900      	cmp	r1, #0
 8015bbe:	d077      	beq.n	8015cb0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015bc0:	4605      	mov	r5, r0
 8015bc2:	6808      	ldr	r0, [r1, #0]
 8015bc4:	2800      	cmp	r0, #0
 8015bc6:	d073      	beq.n	8015cb0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015bc8:	4616      	mov	r6, r2
 8015bca:	461f      	mov	r7, r3
 8015bcc:	f7fe f818 	bl	8013c00 <rcl_client_is_valid>
 8015bd0:	2800      	cmp	r0, #0
 8015bd2:	d071      	beq.n	8015cb8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015bd4:	6820      	ldr	r0, [r4, #0]
 8015bd6:	3004      	adds	r0, #4
 8015bd8:	f7fe f812 	bl	8013c00 <rcl_client_is_valid>
 8015bdc:	2800      	cmp	r0, #0
 8015bde:	d06b      	beq.n	8015cb8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015be0:	6820      	ldr	r0, [r4, #0]
 8015be2:	3008      	adds	r0, #8
 8015be4:	f7fe f80c 	bl	8013c00 <rcl_client_is_valid>
 8015be8:	2800      	cmp	r0, #0
 8015bea:	d065      	beq.n	8015cb8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015bec:	6820      	ldr	r0, [r4, #0]
 8015bee:	300c      	adds	r0, #12
 8015bf0:	f7fe fcb6 	bl	8014560 <rcl_subscription_is_valid>
 8015bf4:	2800      	cmp	r0, #0
 8015bf6:	d05f      	beq.n	8015cb8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015bf8:	6820      	ldr	r0, [r4, #0]
 8015bfa:	3010      	adds	r0, #16
 8015bfc:	f7fe fcb0 	bl	8014560 <rcl_subscription_is_valid>
 8015c00:	2800      	cmp	r0, #0
 8015c02:	d059      	beq.n	8015cb8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015c04:	2e00      	cmp	r6, #0
 8015c06:	d060      	beq.n	8015cca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015c08:	2f00      	cmp	r7, #0
 8015c0a:	d05e      	beq.n	8015cca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015c0c:	9b06      	ldr	r3, [sp, #24]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d05b      	beq.n	8015cca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015c12:	9b07      	ldr	r3, [sp, #28]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d058      	beq.n	8015cca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015c18:	9b08      	ldr	r3, [sp, #32]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d055      	beq.n	8015cca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015c1e:	6823      	ldr	r3, [r4, #0]
 8015c20:	686a      	ldr	r2, [r5, #4]
 8015c22:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8015c26:	428a      	cmp	r2, r1
 8015c28:	d94c      	bls.n	8015cc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015c2a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8015c2e:	4282      	cmp	r2, r0
 8015c30:	d948      	bls.n	8015cc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015c32:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8015c36:	69ea      	ldr	r2, [r5, #28]
 8015c38:	42a2      	cmp	r2, r4
 8015c3a:	d943      	bls.n	8015cc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015c3c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8015c40:	4562      	cmp	r2, ip
 8015c42:	d93f      	bls.n	8015cc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015c44:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8015c48:	4572      	cmp	r2, lr
 8015c4a:	d93b      	bls.n	8015cc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015c4c:	69aa      	ldr	r2, [r5, #24]
 8015c4e:	682d      	ldr	r5, [r5, #0]
 8015c50:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8015c54:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8015c58:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8015c5c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8015c60:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8015c64:	f103 0c0c 	add.w	ip, r3, #12
 8015c68:	eba5 050c 	sub.w	r5, r5, ip
 8015c6c:	fab5 f585 	clz	r5, r5
 8015c70:	096d      	lsrs	r5, r5, #5
 8015c72:	7035      	strb	r5, [r6, #0]
 8015c74:	f103 0510 	add.w	r5, r3, #16
 8015c78:	1b64      	subs	r4, r4, r5
 8015c7a:	fab4 f484 	clz	r4, r4
 8015c7e:	0964      	lsrs	r4, r4, #5
 8015c80:	703c      	strb	r4, [r7, #0]
 8015c82:	eba3 0008 	sub.w	r0, r3, r8
 8015c86:	1d1c      	adds	r4, r3, #4
 8015c88:	3308      	adds	r3, #8
 8015c8a:	1ad3      	subs	r3, r2, r3
 8015c8c:	fab0 f080 	clz	r0, r0
 8015c90:	9a06      	ldr	r2, [sp, #24]
 8015c92:	0940      	lsrs	r0, r0, #5
 8015c94:	1b09      	subs	r1, r1, r4
 8015c96:	7010      	strb	r0, [r2, #0]
 8015c98:	fab1 f181 	clz	r1, r1
 8015c9c:	9a07      	ldr	r2, [sp, #28]
 8015c9e:	0949      	lsrs	r1, r1, #5
 8015ca0:	7011      	strb	r1, [r2, #0]
 8015ca2:	fab3 f383 	clz	r3, r3
 8015ca6:	9a08      	ldr	r2, [sp, #32]
 8015ca8:	095b      	lsrs	r3, r3, #5
 8015caa:	2000      	movs	r0, #0
 8015cac:	7013      	strb	r3, [r2, #0]
 8015cae:	e001      	b.n	8015cb4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8015cb0:	f640 0036 	movw	r0, #2102	@ 0x836
 8015cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cb8:	f7f7 fd02 	bl	800d6c0 <rcutils_reset_error>
 8015cbc:	f640 0036 	movw	r0, #2102	@ 0x836
 8015cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cc4:	2001      	movs	r0, #1
 8015cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cca:	200b      	movs	r0, #11
 8015ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cd0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015cd4:	4770      	bx	lr
 8015cd6:	bf00      	nop

08015cd8 <rcl_action_take_goal_request>:
 8015cd8:	2800      	cmp	r0, #0
 8015cda:	d039      	beq.n	8015d50 <rcl_action_take_goal_request+0x78>
 8015cdc:	b570      	push	{r4, r5, r6, lr}
 8015cde:	4604      	mov	r4, r0
 8015ce0:	6800      	ldr	r0, [r0, #0]
 8015ce2:	b380      	cbz	r0, 8015d46 <rcl_action_take_goal_request+0x6e>
 8015ce4:	460d      	mov	r5, r1
 8015ce6:	4616      	mov	r6, r2
 8015ce8:	f7fe fbd2 	bl	8014490 <rcl_service_is_valid>
 8015cec:	b330      	cbz	r0, 8015d3c <rcl_action_take_goal_request+0x64>
 8015cee:	6820      	ldr	r0, [r4, #0]
 8015cf0:	3004      	adds	r0, #4
 8015cf2:	f7fe fbcd 	bl	8014490 <rcl_service_is_valid>
 8015cf6:	b308      	cbz	r0, 8015d3c <rcl_action_take_goal_request+0x64>
 8015cf8:	6820      	ldr	r0, [r4, #0]
 8015cfa:	3008      	adds	r0, #8
 8015cfc:	f7fe fbc8 	bl	8014490 <rcl_service_is_valid>
 8015d00:	b1e0      	cbz	r0, 8015d3c <rcl_action_take_goal_request+0x64>
 8015d02:	6820      	ldr	r0, [r4, #0]
 8015d04:	300c      	adds	r0, #12
 8015d06:	f7f6 fd63 	bl	800c7d0 <rcl_publisher_is_valid>
 8015d0a:	b1b8      	cbz	r0, 8015d3c <rcl_action_take_goal_request+0x64>
 8015d0c:	6820      	ldr	r0, [r4, #0]
 8015d0e:	3010      	adds	r0, #16
 8015d10:	f7f6 fd5e 	bl	800c7d0 <rcl_publisher_is_valid>
 8015d14:	b190      	cbz	r0, 8015d3c <rcl_action_take_goal_request+0x64>
 8015d16:	b1cd      	cbz	r5, 8015d4c <rcl_action_take_goal_request+0x74>
 8015d18:	b1c6      	cbz	r6, 8015d4c <rcl_action_take_goal_request+0x74>
 8015d1a:	6820      	ldr	r0, [r4, #0]
 8015d1c:	4632      	mov	r2, r6
 8015d1e:	4629      	mov	r1, r5
 8015d20:	f7fe fb5e 	bl	80143e0 <rcl_take_request>
 8015d24:	b148      	cbz	r0, 8015d3a <rcl_action_take_goal_request+0x62>
 8015d26:	280a      	cmp	r0, #10
 8015d28:	d007      	beq.n	8015d3a <rcl_action_take_goal_request+0x62>
 8015d2a:	f240 2259 	movw	r2, #601	@ 0x259
 8015d2e:	f640 0399 	movw	r3, #2201	@ 0x899
 8015d32:	4290      	cmp	r0, r2
 8015d34:	bf0c      	ite	eq
 8015d36:	4618      	moveq	r0, r3
 8015d38:	2001      	movne	r0, #1
 8015d3a:	bd70      	pop	{r4, r5, r6, pc}
 8015d3c:	f7f7 fcc0 	bl	800d6c0 <rcutils_reset_error>
 8015d40:	f640 0098 	movw	r0, #2200	@ 0x898
 8015d44:	bd70      	pop	{r4, r5, r6, pc}
 8015d46:	f640 0098 	movw	r0, #2200	@ 0x898
 8015d4a:	bd70      	pop	{r4, r5, r6, pc}
 8015d4c:	200b      	movs	r0, #11
 8015d4e:	bd70      	pop	{r4, r5, r6, pc}
 8015d50:	f640 0098 	movw	r0, #2200	@ 0x898
 8015d54:	4770      	bx	lr
 8015d56:	bf00      	nop

08015d58 <rcl_action_send_goal_response>:
 8015d58:	b390      	cbz	r0, 8015dc0 <rcl_action_send_goal_response+0x68>
 8015d5a:	b570      	push	{r4, r5, r6, lr}
 8015d5c:	4604      	mov	r4, r0
 8015d5e:	6800      	ldr	r0, [r0, #0]
 8015d60:	b348      	cbz	r0, 8015db6 <rcl_action_send_goal_response+0x5e>
 8015d62:	460d      	mov	r5, r1
 8015d64:	4616      	mov	r6, r2
 8015d66:	f7fe fb93 	bl	8014490 <rcl_service_is_valid>
 8015d6a:	b1f8      	cbz	r0, 8015dac <rcl_action_send_goal_response+0x54>
 8015d6c:	6820      	ldr	r0, [r4, #0]
 8015d6e:	3004      	adds	r0, #4
 8015d70:	f7fe fb8e 	bl	8014490 <rcl_service_is_valid>
 8015d74:	b1d0      	cbz	r0, 8015dac <rcl_action_send_goal_response+0x54>
 8015d76:	6820      	ldr	r0, [r4, #0]
 8015d78:	3008      	adds	r0, #8
 8015d7a:	f7fe fb89 	bl	8014490 <rcl_service_is_valid>
 8015d7e:	b1a8      	cbz	r0, 8015dac <rcl_action_send_goal_response+0x54>
 8015d80:	6820      	ldr	r0, [r4, #0]
 8015d82:	300c      	adds	r0, #12
 8015d84:	f7f6 fd24 	bl	800c7d0 <rcl_publisher_is_valid>
 8015d88:	b180      	cbz	r0, 8015dac <rcl_action_send_goal_response+0x54>
 8015d8a:	6820      	ldr	r0, [r4, #0]
 8015d8c:	3010      	adds	r0, #16
 8015d8e:	f7f6 fd1f 	bl	800c7d0 <rcl_publisher_is_valid>
 8015d92:	b158      	cbz	r0, 8015dac <rcl_action_send_goal_response+0x54>
 8015d94:	b195      	cbz	r5, 8015dbc <rcl_action_send_goal_response+0x64>
 8015d96:	b18e      	cbz	r6, 8015dbc <rcl_action_send_goal_response+0x64>
 8015d98:	6820      	ldr	r0, [r4, #0]
 8015d9a:	4632      	mov	r2, r6
 8015d9c:	4629      	mov	r1, r5
 8015d9e:	f7fe fb5f 	bl	8014460 <rcl_send_response>
 8015da2:	b110      	cbz	r0, 8015daa <rcl_action_send_goal_response+0x52>
 8015da4:	2802      	cmp	r0, #2
 8015da6:	bf18      	it	ne
 8015da8:	2001      	movne	r0, #1
 8015daa:	bd70      	pop	{r4, r5, r6, pc}
 8015dac:	f7f7 fc88 	bl	800d6c0 <rcutils_reset_error>
 8015db0:	f640 0098 	movw	r0, #2200	@ 0x898
 8015db4:	bd70      	pop	{r4, r5, r6, pc}
 8015db6:	f640 0098 	movw	r0, #2200	@ 0x898
 8015dba:	bd70      	pop	{r4, r5, r6, pc}
 8015dbc:	200b      	movs	r0, #11
 8015dbe:	bd70      	pop	{r4, r5, r6, pc}
 8015dc0:	f640 0098 	movw	r0, #2200	@ 0x898
 8015dc4:	4770      	bx	lr
 8015dc6:	bf00      	nop

08015dc8 <rcl_action_take_result_request>:
 8015dc8:	2800      	cmp	r0, #0
 8015dca:	d03a      	beq.n	8015e42 <rcl_action_take_result_request+0x7a>
 8015dcc:	b570      	push	{r4, r5, r6, lr}
 8015dce:	4604      	mov	r4, r0
 8015dd0:	6800      	ldr	r0, [r0, #0]
 8015dd2:	b388      	cbz	r0, 8015e38 <rcl_action_take_result_request+0x70>
 8015dd4:	460d      	mov	r5, r1
 8015dd6:	4616      	mov	r6, r2
 8015dd8:	f7fe fb5a 	bl	8014490 <rcl_service_is_valid>
 8015ddc:	b338      	cbz	r0, 8015e2e <rcl_action_take_result_request+0x66>
 8015dde:	6820      	ldr	r0, [r4, #0]
 8015de0:	3004      	adds	r0, #4
 8015de2:	f7fe fb55 	bl	8014490 <rcl_service_is_valid>
 8015de6:	b310      	cbz	r0, 8015e2e <rcl_action_take_result_request+0x66>
 8015de8:	6820      	ldr	r0, [r4, #0]
 8015dea:	3008      	adds	r0, #8
 8015dec:	f7fe fb50 	bl	8014490 <rcl_service_is_valid>
 8015df0:	b1e8      	cbz	r0, 8015e2e <rcl_action_take_result_request+0x66>
 8015df2:	6820      	ldr	r0, [r4, #0]
 8015df4:	300c      	adds	r0, #12
 8015df6:	f7f6 fceb 	bl	800c7d0 <rcl_publisher_is_valid>
 8015dfa:	b1c0      	cbz	r0, 8015e2e <rcl_action_take_result_request+0x66>
 8015dfc:	6820      	ldr	r0, [r4, #0]
 8015dfe:	3010      	adds	r0, #16
 8015e00:	f7f6 fce6 	bl	800c7d0 <rcl_publisher_is_valid>
 8015e04:	b198      	cbz	r0, 8015e2e <rcl_action_take_result_request+0x66>
 8015e06:	b1d5      	cbz	r5, 8015e3e <rcl_action_take_result_request+0x76>
 8015e08:	b1ce      	cbz	r6, 8015e3e <rcl_action_take_result_request+0x76>
 8015e0a:	6820      	ldr	r0, [r4, #0]
 8015e0c:	4632      	mov	r2, r6
 8015e0e:	4629      	mov	r1, r5
 8015e10:	3008      	adds	r0, #8
 8015e12:	f7fe fae5 	bl	80143e0 <rcl_take_request>
 8015e16:	b148      	cbz	r0, 8015e2c <rcl_action_take_result_request+0x64>
 8015e18:	280a      	cmp	r0, #10
 8015e1a:	d007      	beq.n	8015e2c <rcl_action_take_result_request+0x64>
 8015e1c:	f240 2259 	movw	r2, #601	@ 0x259
 8015e20:	f640 0399 	movw	r3, #2201	@ 0x899
 8015e24:	4290      	cmp	r0, r2
 8015e26:	bf0c      	ite	eq
 8015e28:	4618      	moveq	r0, r3
 8015e2a:	2001      	movne	r0, #1
 8015e2c:	bd70      	pop	{r4, r5, r6, pc}
 8015e2e:	f7f7 fc47 	bl	800d6c0 <rcutils_reset_error>
 8015e32:	f640 0098 	movw	r0, #2200	@ 0x898
 8015e36:	bd70      	pop	{r4, r5, r6, pc}
 8015e38:	f640 0098 	movw	r0, #2200	@ 0x898
 8015e3c:	bd70      	pop	{r4, r5, r6, pc}
 8015e3e:	200b      	movs	r0, #11
 8015e40:	bd70      	pop	{r4, r5, r6, pc}
 8015e42:	f640 0098 	movw	r0, #2200	@ 0x898
 8015e46:	4770      	bx	lr

08015e48 <rcl_action_take_cancel_request>:
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	d03a      	beq.n	8015ec2 <rcl_action_take_cancel_request+0x7a>
 8015e4c:	b570      	push	{r4, r5, r6, lr}
 8015e4e:	4604      	mov	r4, r0
 8015e50:	6800      	ldr	r0, [r0, #0]
 8015e52:	b388      	cbz	r0, 8015eb8 <rcl_action_take_cancel_request+0x70>
 8015e54:	460d      	mov	r5, r1
 8015e56:	4616      	mov	r6, r2
 8015e58:	f7fe fb1a 	bl	8014490 <rcl_service_is_valid>
 8015e5c:	b338      	cbz	r0, 8015eae <rcl_action_take_cancel_request+0x66>
 8015e5e:	6820      	ldr	r0, [r4, #0]
 8015e60:	3004      	adds	r0, #4
 8015e62:	f7fe fb15 	bl	8014490 <rcl_service_is_valid>
 8015e66:	b310      	cbz	r0, 8015eae <rcl_action_take_cancel_request+0x66>
 8015e68:	6820      	ldr	r0, [r4, #0]
 8015e6a:	3008      	adds	r0, #8
 8015e6c:	f7fe fb10 	bl	8014490 <rcl_service_is_valid>
 8015e70:	b1e8      	cbz	r0, 8015eae <rcl_action_take_cancel_request+0x66>
 8015e72:	6820      	ldr	r0, [r4, #0]
 8015e74:	300c      	adds	r0, #12
 8015e76:	f7f6 fcab 	bl	800c7d0 <rcl_publisher_is_valid>
 8015e7a:	b1c0      	cbz	r0, 8015eae <rcl_action_take_cancel_request+0x66>
 8015e7c:	6820      	ldr	r0, [r4, #0]
 8015e7e:	3010      	adds	r0, #16
 8015e80:	f7f6 fca6 	bl	800c7d0 <rcl_publisher_is_valid>
 8015e84:	b198      	cbz	r0, 8015eae <rcl_action_take_cancel_request+0x66>
 8015e86:	b1d5      	cbz	r5, 8015ebe <rcl_action_take_cancel_request+0x76>
 8015e88:	b1ce      	cbz	r6, 8015ebe <rcl_action_take_cancel_request+0x76>
 8015e8a:	6820      	ldr	r0, [r4, #0]
 8015e8c:	4632      	mov	r2, r6
 8015e8e:	4629      	mov	r1, r5
 8015e90:	3004      	adds	r0, #4
 8015e92:	f7fe faa5 	bl	80143e0 <rcl_take_request>
 8015e96:	b148      	cbz	r0, 8015eac <rcl_action_take_cancel_request+0x64>
 8015e98:	280a      	cmp	r0, #10
 8015e9a:	d007      	beq.n	8015eac <rcl_action_take_cancel_request+0x64>
 8015e9c:	f240 2259 	movw	r2, #601	@ 0x259
 8015ea0:	f640 0399 	movw	r3, #2201	@ 0x899
 8015ea4:	4290      	cmp	r0, r2
 8015ea6:	bf0c      	ite	eq
 8015ea8:	4618      	moveq	r0, r3
 8015eaa:	2001      	movne	r0, #1
 8015eac:	bd70      	pop	{r4, r5, r6, pc}
 8015eae:	f7f7 fc07 	bl	800d6c0 <rcutils_reset_error>
 8015eb2:	f640 0098 	movw	r0, #2200	@ 0x898
 8015eb6:	bd70      	pop	{r4, r5, r6, pc}
 8015eb8:	f640 0098 	movw	r0, #2200	@ 0x898
 8015ebc:	bd70      	pop	{r4, r5, r6, pc}
 8015ebe:	200b      	movs	r0, #11
 8015ec0:	bd70      	pop	{r4, r5, r6, pc}
 8015ec2:	f640 0098 	movw	r0, #2200	@ 0x898
 8015ec6:	4770      	bx	lr

08015ec8 <rcl_action_send_cancel_response>:
 8015ec8:	b398      	cbz	r0, 8015f32 <rcl_action_send_cancel_response+0x6a>
 8015eca:	b570      	push	{r4, r5, r6, lr}
 8015ecc:	4604      	mov	r4, r0
 8015ece:	6800      	ldr	r0, [r0, #0]
 8015ed0:	b350      	cbz	r0, 8015f28 <rcl_action_send_cancel_response+0x60>
 8015ed2:	460d      	mov	r5, r1
 8015ed4:	4616      	mov	r6, r2
 8015ed6:	f7fe fadb 	bl	8014490 <rcl_service_is_valid>
 8015eda:	b300      	cbz	r0, 8015f1e <rcl_action_send_cancel_response+0x56>
 8015edc:	6820      	ldr	r0, [r4, #0]
 8015ede:	3004      	adds	r0, #4
 8015ee0:	f7fe fad6 	bl	8014490 <rcl_service_is_valid>
 8015ee4:	b1d8      	cbz	r0, 8015f1e <rcl_action_send_cancel_response+0x56>
 8015ee6:	6820      	ldr	r0, [r4, #0]
 8015ee8:	3008      	adds	r0, #8
 8015eea:	f7fe fad1 	bl	8014490 <rcl_service_is_valid>
 8015eee:	b1b0      	cbz	r0, 8015f1e <rcl_action_send_cancel_response+0x56>
 8015ef0:	6820      	ldr	r0, [r4, #0]
 8015ef2:	300c      	adds	r0, #12
 8015ef4:	f7f6 fc6c 	bl	800c7d0 <rcl_publisher_is_valid>
 8015ef8:	b188      	cbz	r0, 8015f1e <rcl_action_send_cancel_response+0x56>
 8015efa:	6820      	ldr	r0, [r4, #0]
 8015efc:	3010      	adds	r0, #16
 8015efe:	f7f6 fc67 	bl	800c7d0 <rcl_publisher_is_valid>
 8015f02:	b160      	cbz	r0, 8015f1e <rcl_action_send_cancel_response+0x56>
 8015f04:	b19d      	cbz	r5, 8015f2e <rcl_action_send_cancel_response+0x66>
 8015f06:	b196      	cbz	r6, 8015f2e <rcl_action_send_cancel_response+0x66>
 8015f08:	6820      	ldr	r0, [r4, #0]
 8015f0a:	4632      	mov	r2, r6
 8015f0c:	4629      	mov	r1, r5
 8015f0e:	3004      	adds	r0, #4
 8015f10:	f7fe faa6 	bl	8014460 <rcl_send_response>
 8015f14:	b110      	cbz	r0, 8015f1c <rcl_action_send_cancel_response+0x54>
 8015f16:	2802      	cmp	r0, #2
 8015f18:	bf18      	it	ne
 8015f1a:	2001      	movne	r0, #1
 8015f1c:	bd70      	pop	{r4, r5, r6, pc}
 8015f1e:	f7f7 fbcf 	bl	800d6c0 <rcutils_reset_error>
 8015f22:	f640 0098 	movw	r0, #2200	@ 0x898
 8015f26:	bd70      	pop	{r4, r5, r6, pc}
 8015f28:	f640 0098 	movw	r0, #2200	@ 0x898
 8015f2c:	bd70      	pop	{r4, r5, r6, pc}
 8015f2e:	200b      	movs	r0, #11
 8015f30:	bd70      	pop	{r4, r5, r6, pc}
 8015f32:	f640 0098 	movw	r0, #2200	@ 0x898
 8015f36:	4770      	bx	lr

08015f38 <rcl_action_wait_set_add_action_server>:
 8015f38:	2800      	cmp	r0, #0
 8015f3a:	d04d      	beq.n	8015fd8 <rcl_action_wait_set_add_action_server+0xa0>
 8015f3c:	b570      	push	{r4, r5, r6, lr}
 8015f3e:	460c      	mov	r4, r1
 8015f40:	b159      	cbz	r1, 8015f5a <rcl_action_wait_set_add_action_server+0x22>
 8015f42:	4605      	mov	r5, r0
 8015f44:	6808      	ldr	r0, [r1, #0]
 8015f46:	b140      	cbz	r0, 8015f5a <rcl_action_wait_set_add_action_server+0x22>
 8015f48:	4616      	mov	r6, r2
 8015f4a:	f7fe faa1 	bl	8014490 <rcl_service_is_valid>
 8015f4e:	b120      	cbz	r0, 8015f5a <rcl_action_wait_set_add_action_server+0x22>
 8015f50:	6820      	ldr	r0, [r4, #0]
 8015f52:	3004      	adds	r0, #4
 8015f54:	f7fe fa9c 	bl	8014490 <rcl_service_is_valid>
 8015f58:	b910      	cbnz	r0, 8015f60 <rcl_action_wait_set_add_action_server+0x28>
 8015f5a:	f640 0098 	movw	r0, #2200	@ 0x898
 8015f5e:	bd70      	pop	{r4, r5, r6, pc}
 8015f60:	6820      	ldr	r0, [r4, #0]
 8015f62:	3008      	adds	r0, #8
 8015f64:	f7fe fa94 	bl	8014490 <rcl_service_is_valid>
 8015f68:	2800      	cmp	r0, #0
 8015f6a:	d0f6      	beq.n	8015f5a <rcl_action_wait_set_add_action_server+0x22>
 8015f6c:	6820      	ldr	r0, [r4, #0]
 8015f6e:	300c      	adds	r0, #12
 8015f70:	f7f6 fc46 	bl	800c800 <rcl_publisher_is_valid_except_context>
 8015f74:	2800      	cmp	r0, #0
 8015f76:	d0f0      	beq.n	8015f5a <rcl_action_wait_set_add_action_server+0x22>
 8015f78:	6820      	ldr	r0, [r4, #0]
 8015f7a:	3010      	adds	r0, #16
 8015f7c:	f7f6 fc40 	bl	800c800 <rcl_publisher_is_valid_except_context>
 8015f80:	2800      	cmp	r0, #0
 8015f82:	d0ea      	beq.n	8015f5a <rcl_action_wait_set_add_action_server+0x22>
 8015f84:	6821      	ldr	r1, [r4, #0]
 8015f86:	4628      	mov	r0, r5
 8015f88:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8015f8c:	f7ff fad0 	bl	8015530 <rcl_wait_set_add_service>
 8015f90:	2800      	cmp	r0, #0
 8015f92:	d1e4      	bne.n	8015f5e <rcl_action_wait_set_add_action_server+0x26>
 8015f94:	6821      	ldr	r1, [r4, #0]
 8015f96:	4628      	mov	r0, r5
 8015f98:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8015f9c:	3104      	adds	r1, #4
 8015f9e:	f7ff fac7 	bl	8015530 <rcl_wait_set_add_service>
 8015fa2:	2800      	cmp	r0, #0
 8015fa4:	d1db      	bne.n	8015f5e <rcl_action_wait_set_add_action_server+0x26>
 8015fa6:	6821      	ldr	r1, [r4, #0]
 8015fa8:	4628      	mov	r0, r5
 8015faa:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8015fae:	3108      	adds	r1, #8
 8015fb0:	f7ff fabe 	bl	8015530 <rcl_wait_set_add_service>
 8015fb4:	2800      	cmp	r0, #0
 8015fb6:	d1d2      	bne.n	8015f5e <rcl_action_wait_set_add_action_server+0x26>
 8015fb8:	6821      	ldr	r1, [r4, #0]
 8015fba:	4628      	mov	r0, r5
 8015fbc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8015fc0:	3114      	adds	r1, #20
 8015fc2:	f7ff fa59 	bl	8015478 <rcl_wait_set_add_timer>
 8015fc6:	2800      	cmp	r0, #0
 8015fc8:	d1c9      	bne.n	8015f5e <rcl_action_wait_set_add_action_server+0x26>
 8015fca:	2e00      	cmp	r6, #0
 8015fcc:	d0c7      	beq.n	8015f5e <rcl_action_wait_set_add_action_server+0x26>
 8015fce:	6823      	ldr	r3, [r4, #0]
 8015fd0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8015fd4:	6033      	str	r3, [r6, #0]
 8015fd6:	bd70      	pop	{r4, r5, r6, pc}
 8015fd8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015fdc:	4770      	bx	lr
 8015fde:	bf00      	nop

08015fe0 <rcl_action_server_wait_set_get_entities_ready>:
 8015fe0:	2800      	cmp	r0, #0
 8015fe2:	d05a      	beq.n	801609a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8015fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fe6:	460c      	mov	r4, r1
 8015fe8:	b161      	cbz	r1, 8016004 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015fea:	4605      	mov	r5, r0
 8015fec:	6808      	ldr	r0, [r1, #0]
 8015fee:	b148      	cbz	r0, 8016004 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015ff0:	4616      	mov	r6, r2
 8015ff2:	461f      	mov	r7, r3
 8015ff4:	f7fe fa4c 	bl	8014490 <rcl_service_is_valid>
 8015ff8:	b120      	cbz	r0, 8016004 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015ffa:	6820      	ldr	r0, [r4, #0]
 8015ffc:	3004      	adds	r0, #4
 8015ffe:	f7fe fa47 	bl	8014490 <rcl_service_is_valid>
 8016002:	b910      	cbnz	r0, 801600a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8016004:	f640 0098 	movw	r0, #2200	@ 0x898
 8016008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801600a:	6820      	ldr	r0, [r4, #0]
 801600c:	3008      	adds	r0, #8
 801600e:	f7fe fa3f 	bl	8014490 <rcl_service_is_valid>
 8016012:	2800      	cmp	r0, #0
 8016014:	d0f6      	beq.n	8016004 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016016:	6820      	ldr	r0, [r4, #0]
 8016018:	300c      	adds	r0, #12
 801601a:	f7f6 fbf1 	bl	800c800 <rcl_publisher_is_valid_except_context>
 801601e:	2800      	cmp	r0, #0
 8016020:	d0f0      	beq.n	8016004 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016022:	6820      	ldr	r0, [r4, #0]
 8016024:	3010      	adds	r0, #16
 8016026:	f7f6 fbeb 	bl	800c800 <rcl_publisher_is_valid_except_context>
 801602a:	2800      	cmp	r0, #0
 801602c:	d0ea      	beq.n	8016004 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801602e:	b3be      	cbz	r6, 80160a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016030:	b3b7      	cbz	r7, 80160a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016032:	9b06      	ldr	r3, [sp, #24]
 8016034:	b3a3      	cbz	r3, 80160a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016036:	9b07      	ldr	r3, [sp, #28]
 8016038:	b393      	cbz	r3, 80160a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801603a:	6821      	ldr	r1, [r4, #0]
 801603c:	692a      	ldr	r2, [r5, #16]
 801603e:	6a2c      	ldr	r4, [r5, #32]
 8016040:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8016044:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8016048:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801604c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016050:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8016054:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8016058:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801605c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016060:	1a64      	subs	r4, r4, r1
 8016062:	fab4 f484 	clz	r4, r4
 8016066:	0964      	lsrs	r4, r4, #5
 8016068:	7034      	strb	r4, [r6, #0]
 801606a:	1d0c      	adds	r4, r1, #4
 801606c:	1b1b      	subs	r3, r3, r4
 801606e:	fab3 f383 	clz	r3, r3
 8016072:	095b      	lsrs	r3, r3, #5
 8016074:	f101 0408 	add.w	r4, r1, #8
 8016078:	703b      	strb	r3, [r7, #0]
 801607a:	f101 0314 	add.w	r3, r1, #20
 801607e:	1b01      	subs	r1, r0, r4
 8016080:	1ad3      	subs	r3, r2, r3
 8016082:	fab1 f181 	clz	r1, r1
 8016086:	9a06      	ldr	r2, [sp, #24]
 8016088:	0949      	lsrs	r1, r1, #5
 801608a:	7011      	strb	r1, [r2, #0]
 801608c:	fab3 f383 	clz	r3, r3
 8016090:	9a07      	ldr	r2, [sp, #28]
 8016092:	095b      	lsrs	r3, r3, #5
 8016094:	2000      	movs	r0, #0
 8016096:	7013      	strb	r3, [r2, #0]
 8016098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801609a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801609e:	4770      	bx	lr
 80160a0:	200b      	movs	r0, #11
 80160a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080160a4 <_execute_event_handler>:
 80160a4:	2002      	movs	r0, #2
 80160a6:	4770      	bx	lr

080160a8 <_cancel_goal_event_handler>:
 80160a8:	2003      	movs	r0, #3
 80160aa:	4770      	bx	lr

080160ac <_succeed_event_handler>:
 80160ac:	2004      	movs	r0, #4
 80160ae:	4770      	bx	lr

080160b0 <_abort_event_handler>:
 80160b0:	2006      	movs	r0, #6
 80160b2:	4770      	bx	lr

080160b4 <_canceled_event_handler>:
 80160b4:	2005      	movs	r0, #5
 80160b6:	4770      	bx	lr

080160b8 <rcl_action_transition_goal_state>:
 80160b8:	b2c2      	uxtb	r2, r0
 80160ba:	2a06      	cmp	r2, #6
 80160bc:	d80c      	bhi.n	80160d8 <rcl_action_transition_goal_state+0x20>
 80160be:	2904      	cmp	r1, #4
 80160c0:	d80a      	bhi.n	80160d8 <rcl_action_transition_goal_state+0x20>
 80160c2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80160c6:	b410      	push	{r4}
 80160c8:	1853      	adds	r3, r2, r1
 80160ca:	4c06      	ldr	r4, [pc, #24]	@ (80160e4 <rcl_action_transition_goal_state+0x2c>)
 80160cc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80160d0:	b123      	cbz	r3, 80160dc <rcl_action_transition_goal_state+0x24>
 80160d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160d6:	4718      	bx	r3
 80160d8:	2000      	movs	r0, #0
 80160da:	4770      	bx	lr
 80160dc:	2000      	movs	r0, #0
 80160de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160e2:	4770      	bx	lr
 80160e4:	0801b56c 	.word	0x0801b56c

080160e8 <rcl_action_get_zero_initialized_cancel_response>:
 80160e8:	b510      	push	{r4, lr}
 80160ea:	4c07      	ldr	r4, [pc, #28]	@ (8016108 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80160ec:	4686      	mov	lr, r0
 80160ee:	4684      	mov	ip, r0
 80160f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80160f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80160fc:	6823      	ldr	r3, [r4, #0]
 80160fe:	f8cc 3000 	str.w	r3, [ip]
 8016102:	4670      	mov	r0, lr
 8016104:	bd10      	pop	{r4, pc}
 8016106:	bf00      	nop
 8016108:	0801b5f8 	.word	0x0801b5f8

0801610c <rclc_action_send_result_request>:
 801610c:	b1d0      	cbz	r0, 8016144 <rclc_action_send_result_request+0x38>
 801610e:	b500      	push	{lr}
 8016110:	4684      	mov	ip, r0
 8016112:	b087      	sub	sp, #28
 8016114:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8016118:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801611c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8016120:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8016124:	f10d 0e08 	add.w	lr, sp, #8
 8016128:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801612c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016130:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8016134:	a902      	add	r1, sp, #8
 8016136:	3010      	adds	r0, #16
 8016138:	f7ff fbda 	bl	80158f0 <rcl_action_send_result_request>
 801613c:	b920      	cbnz	r0, 8016148 <rclc_action_send_result_request+0x3c>
 801613e:	b007      	add	sp, #28
 8016140:	f85d fb04 	ldr.w	pc, [sp], #4
 8016144:	200b      	movs	r0, #11
 8016146:	4770      	bx	lr
 8016148:	9001      	str	r0, [sp, #4]
 801614a:	f7f7 fab9 	bl	800d6c0 <rcutils_reset_error>
 801614e:	9801      	ldr	r0, [sp, #4]
 8016150:	b007      	add	sp, #28
 8016152:	f85d fb04 	ldr.w	pc, [sp], #4
 8016156:	bf00      	nop

08016158 <rclc_action_take_goal_handle>:
 8016158:	b160      	cbz	r0, 8016174 <rclc_action_take_goal_handle+0x1c>
 801615a:	6883      	ldr	r3, [r0, #8]
 801615c:	b143      	cbz	r3, 8016170 <rclc_action_take_goal_handle+0x18>
 801615e:	6819      	ldr	r1, [r3, #0]
 8016160:	6081      	str	r1, [r0, #8]
 8016162:	2200      	movs	r2, #0
 8016164:	721a      	strb	r2, [r3, #8]
 8016166:	68c1      	ldr	r1, [r0, #12]
 8016168:	6019      	str	r1, [r3, #0]
 801616a:	621a      	str	r2, [r3, #32]
 801616c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801616e:	60c3      	str	r3, [r0, #12]
 8016170:	4618      	mov	r0, r3
 8016172:	4770      	bx	lr
 8016174:	4603      	mov	r3, r0
 8016176:	e7fb      	b.n	8016170 <rclc_action_take_goal_handle+0x18>

08016178 <rclc_action_remove_used_goal_handle>:
 8016178:	b180      	cbz	r0, 801619c <rclc_action_remove_used_goal_handle+0x24>
 801617a:	b179      	cbz	r1, 801619c <rclc_action_remove_used_goal_handle+0x24>
 801617c:	68c3      	ldr	r3, [r0, #12]
 801617e:	4299      	cmp	r1, r3
 8016180:	d00d      	beq.n	801619e <rclc_action_remove_used_goal_handle+0x26>
 8016182:	b12b      	cbz	r3, 8016190 <rclc_action_remove_used_goal_handle+0x18>
 8016184:	681a      	ldr	r2, [r3, #0]
 8016186:	4291      	cmp	r1, r2
 8016188:	d003      	beq.n	8016192 <rclc_action_remove_used_goal_handle+0x1a>
 801618a:	4613      	mov	r3, r2
 801618c:	2b00      	cmp	r3, #0
 801618e:	d1f9      	bne.n	8016184 <rclc_action_remove_used_goal_handle+0xc>
 8016190:	4770      	bx	lr
 8016192:	680a      	ldr	r2, [r1, #0]
 8016194:	601a      	str	r2, [r3, #0]
 8016196:	6883      	ldr	r3, [r0, #8]
 8016198:	600b      	str	r3, [r1, #0]
 801619a:	6081      	str	r1, [r0, #8]
 801619c:	4770      	bx	lr
 801619e:	680b      	ldr	r3, [r1, #0]
 80161a0:	60c3      	str	r3, [r0, #12]
 80161a2:	e7f8      	b.n	8016196 <rclc_action_remove_used_goal_handle+0x1e>

080161a4 <rclc_action_find_goal_handle_by_uuid>:
 80161a4:	b538      	push	{r3, r4, r5, lr}
 80161a6:	b180      	cbz	r0, 80161ca <rclc_action_find_goal_handle_by_uuid+0x26>
 80161a8:	460d      	mov	r5, r1
 80161aa:	b181      	cbz	r1, 80161ce <rclc_action_find_goal_handle_by_uuid+0x2a>
 80161ac:	68c4      	ldr	r4, [r0, #12]
 80161ae:	b914      	cbnz	r4, 80161b6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80161b0:	e009      	b.n	80161c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80161b2:	6824      	ldr	r4, [r4, #0]
 80161b4:	b13c      	cbz	r4, 80161c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80161b6:	f104 0009 	add.w	r0, r4, #9
 80161ba:	2210      	movs	r2, #16
 80161bc:	4629      	mov	r1, r5
 80161be:	f003 fcf5 	bl	8019bac <memcmp>
 80161c2:	2800      	cmp	r0, #0
 80161c4:	d1f5      	bne.n	80161b2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80161c6:	4620      	mov	r0, r4
 80161c8:	bd38      	pop	{r3, r4, r5, pc}
 80161ca:	4604      	mov	r4, r0
 80161cc:	e7fb      	b.n	80161c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80161ce:	460c      	mov	r4, r1
 80161d0:	e7f9      	b.n	80161c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80161d2:	bf00      	nop

080161d4 <rclc_action_find_first_handle_by_status>:
 80161d4:	b140      	cbz	r0, 80161e8 <rclc_action_find_first_handle_by_status+0x14>
 80161d6:	68c0      	ldr	r0, [r0, #12]
 80161d8:	b910      	cbnz	r0, 80161e0 <rclc_action_find_first_handle_by_status+0xc>
 80161da:	e005      	b.n	80161e8 <rclc_action_find_first_handle_by_status+0x14>
 80161dc:	6800      	ldr	r0, [r0, #0]
 80161de:	b118      	cbz	r0, 80161e8 <rclc_action_find_first_handle_by_status+0x14>
 80161e0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80161e4:	428b      	cmp	r3, r1
 80161e6:	d1f9      	bne.n	80161dc <rclc_action_find_first_handle_by_status+0x8>
 80161e8:	4770      	bx	lr
 80161ea:	bf00      	nop

080161ec <rclc_action_find_first_terminated_handle>:
 80161ec:	b140      	cbz	r0, 8016200 <rclc_action_find_first_terminated_handle+0x14>
 80161ee:	68c0      	ldr	r0, [r0, #12]
 80161f0:	b910      	cbnz	r0, 80161f8 <rclc_action_find_first_terminated_handle+0xc>
 80161f2:	e005      	b.n	8016200 <rclc_action_find_first_terminated_handle+0x14>
 80161f4:	6800      	ldr	r0, [r0, #0]
 80161f6:	b118      	cbz	r0, 8016200 <rclc_action_find_first_terminated_handle+0x14>
 80161f8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80161fc:	2b03      	cmp	r3, #3
 80161fe:	ddf9      	ble.n	80161f4 <rclc_action_find_first_terminated_handle+0x8>
 8016200:	4770      	bx	lr
 8016202:	bf00      	nop

08016204 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8016204:	b170      	cbz	r0, 8016224 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016206:	68c0      	ldr	r0, [r0, #12]
 8016208:	b160      	cbz	r0, 8016224 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801620a:	b410      	push	{r4}
 801620c:	e001      	b.n	8016212 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801620e:	6800      	ldr	r0, [r0, #0]
 8016210:	b128      	cbz	r0, 801621e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8016212:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8016216:	4299      	cmp	r1, r3
 8016218:	bf08      	it	eq
 801621a:	4294      	cmpeq	r4, r2
 801621c:	d1f7      	bne.n	801620e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801621e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016222:	4770      	bx	lr
 8016224:	4770      	bx	lr
 8016226:	bf00      	nop

08016228 <rclc_action_find_handle_by_result_request_sequence_number>:
 8016228:	b170      	cbz	r0, 8016248 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801622a:	68c0      	ldr	r0, [r0, #12]
 801622c:	b160      	cbz	r0, 8016248 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801622e:	b410      	push	{r4}
 8016230:	e001      	b.n	8016236 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8016232:	6800      	ldr	r0, [r0, #0]
 8016234:	b128      	cbz	r0, 8016242 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8016236:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801623a:	4299      	cmp	r1, r3
 801623c:	bf08      	it	eq
 801623e:	4294      	cmpeq	r4, r2
 8016240:	d1f7      	bne.n	8016232 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8016242:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016246:	4770      	bx	lr
 8016248:	4770      	bx	lr
 801624a:	bf00      	nop

0801624c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801624c:	b170      	cbz	r0, 801626c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801624e:	68c0      	ldr	r0, [r0, #12]
 8016250:	b160      	cbz	r0, 801626c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016252:	b410      	push	{r4}
 8016254:	e001      	b.n	801625a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8016256:	6800      	ldr	r0, [r0, #0]
 8016258:	b128      	cbz	r0, 8016266 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801625a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801625e:	4299      	cmp	r1, r3
 8016260:	bf08      	it	eq
 8016262:	4294      	cmpeq	r4, r2
 8016264:	d1f7      	bne.n	8016256 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8016266:	f85d 4b04 	ldr.w	r4, [sp], #4
 801626a:	4770      	bx	lr
 801626c:	4770      	bx	lr
 801626e:	bf00      	nop

08016270 <rclc_action_find_first_handle_with_goal_response>:
 8016270:	b140      	cbz	r0, 8016284 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016272:	68c0      	ldr	r0, [r0, #12]
 8016274:	b910      	cbnz	r0, 801627c <rclc_action_find_first_handle_with_goal_response+0xc>
 8016276:	e005      	b.n	8016284 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016278:	6800      	ldr	r0, [r0, #0]
 801627a:	b118      	cbz	r0, 8016284 <rclc_action_find_first_handle_with_goal_response+0x14>
 801627c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d0f9      	beq.n	8016278 <rclc_action_find_first_handle_with_goal_response+0x8>
 8016284:	4770      	bx	lr
 8016286:	bf00      	nop

08016288 <rclc_action_find_first_handle_with_result_response>:
 8016288:	b140      	cbz	r0, 801629c <rclc_action_find_first_handle_with_result_response+0x14>
 801628a:	68c0      	ldr	r0, [r0, #12]
 801628c:	b910      	cbnz	r0, 8016294 <rclc_action_find_first_handle_with_result_response+0xc>
 801628e:	e005      	b.n	801629c <rclc_action_find_first_handle_with_result_response+0x14>
 8016290:	6800      	ldr	r0, [r0, #0]
 8016292:	b118      	cbz	r0, 801629c <rclc_action_find_first_handle_with_result_response+0x14>
 8016294:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8016298:	2b00      	cmp	r3, #0
 801629a:	d0f9      	beq.n	8016290 <rclc_action_find_first_handle_with_result_response+0x8>
 801629c:	4770      	bx	lr
 801629e:	bf00      	nop

080162a0 <rclc_action_server_response_goal_request>:
 80162a0:	b198      	cbz	r0, 80162ca <rclc_action_server_response_goal_request+0x2a>
 80162a2:	b510      	push	{r4, lr}
 80162a4:	6844      	ldr	r4, [r0, #4]
 80162a6:	b086      	sub	sp, #24
 80162a8:	2200      	movs	r2, #0
 80162aa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80162ae:	460b      	mov	r3, r1
 80162b0:	9205      	str	r2, [sp, #20]
 80162b2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80162b6:	aa03      	add	r2, sp, #12
 80162b8:	f104 0010 	add.w	r0, r4, #16
 80162bc:	f88d 300c 	strb.w	r3, [sp, #12]
 80162c0:	f7ff fd4a 	bl	8015d58 <rcl_action_send_goal_response>
 80162c4:	b918      	cbnz	r0, 80162ce <rclc_action_server_response_goal_request+0x2e>
 80162c6:	b006      	add	sp, #24
 80162c8:	bd10      	pop	{r4, pc}
 80162ca:	200b      	movs	r0, #11
 80162cc:	4770      	bx	lr
 80162ce:	9001      	str	r0, [sp, #4]
 80162d0:	f7f7 f9f6 	bl	800d6c0 <rcutils_reset_error>
 80162d4:	9801      	ldr	r0, [sp, #4]
 80162d6:	b006      	add	sp, #24
 80162d8:	bd10      	pop	{r4, pc}
 80162da:	bf00      	nop
 80162dc:	0000      	movs	r0, r0
	...

080162e0 <rclc_action_server_goal_cancel_accept>:
 80162e0:	b310      	cbz	r0, 8016328 <rclc_action_server_goal_cancel_accept+0x48>
 80162e2:	b510      	push	{r4, lr}
 80162e4:	b090      	sub	sp, #64	@ 0x40
 80162e6:	4604      	mov	r4, r0
 80162e8:	a806      	add	r0, sp, #24
 80162ea:	f7ff fefd 	bl	80160e8 <rcl_action_get_zero_initialized_cancel_response>
 80162ee:	2300      	movs	r3, #0
 80162f0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80162f4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80162f8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80162fc:	f88d 3018 	strb.w	r3, [sp, #24]
 8016300:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8016304:	f8cd d01c 	str.w	sp, [sp, #28]
 8016308:	46ec      	mov	ip, sp
 801630a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801630e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016330 <rclc_action_server_goal_cancel_accept+0x50>
 8016312:	6860      	ldr	r0, [r4, #4]
 8016314:	aa06      	add	r2, sp, #24
 8016316:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801631a:	3010      	adds	r0, #16
 801631c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016320:	f7ff fdd2 	bl	8015ec8 <rcl_action_send_cancel_response>
 8016324:	b010      	add	sp, #64	@ 0x40
 8016326:	bd10      	pop	{r4, pc}
 8016328:	200b      	movs	r0, #11
 801632a:	4770      	bx	lr
 801632c:	f3af 8000 	nop.w
 8016330:	00000001 	.word	0x00000001
 8016334:	00000001 	.word	0x00000001

08016338 <rclc_action_server_goal_cancel_reject>:
 8016338:	b082      	sub	sp, #8
 801633a:	b530      	push	{r4, r5, lr}
 801633c:	b08b      	sub	sp, #44	@ 0x2c
 801633e:	ac0e      	add	r4, sp, #56	@ 0x38
 8016340:	e884 000c 	stmia.w	r4, {r2, r3}
 8016344:	b188      	cbz	r0, 801636a <rclc_action_server_goal_cancel_reject+0x32>
 8016346:	4604      	mov	r4, r0
 8016348:	a801      	add	r0, sp, #4
 801634a:	460d      	mov	r5, r1
 801634c:	f7ff fecc 	bl	80160e8 <rcl_action_get_zero_initialized_cancel_response>
 8016350:	aa01      	add	r2, sp, #4
 8016352:	a90e      	add	r1, sp, #56	@ 0x38
 8016354:	f104 0010 	add.w	r0, r4, #16
 8016358:	f88d 5004 	strb.w	r5, [sp, #4]
 801635c:	f7ff fdb4 	bl	8015ec8 <rcl_action_send_cancel_response>
 8016360:	b00b      	add	sp, #44	@ 0x2c
 8016362:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016366:	b002      	add	sp, #8
 8016368:	4770      	bx	lr
 801636a:	200b      	movs	r0, #11
 801636c:	b00b      	add	sp, #44	@ 0x2c
 801636e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016372:	b002      	add	sp, #8
 8016374:	4770      	bx	lr
 8016376:	bf00      	nop

08016378 <__atomic_load_8>:
 8016378:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801637c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016380:	4a15      	ldr	r2, [pc, #84]	@ (80163d8 <__atomic_load_8+0x60>)
 8016382:	4b16      	ldr	r3, [pc, #88]	@ (80163dc <__atomic_load_8+0x64>)
 8016384:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016388:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801638c:	fb02 f101 	mul.w	r1, r2, r1
 8016390:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016394:	fba3 2301 	umull	r2, r3, r3, r1
 8016398:	091b      	lsrs	r3, r3, #4
 801639a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801639e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80163a2:	b4d0      	push	{r4, r6, r7}
 80163a4:	4c0e      	ldr	r4, [pc, #56]	@ (80163e0 <__atomic_load_8+0x68>)
 80163a6:	1ac9      	subs	r1, r1, r3
 80163a8:	1862      	adds	r2, r4, r1
 80163aa:	f04f 0c01 	mov.w	ip, #1
 80163ae:	e8d2 3f4f 	ldrexb	r3, [r2]
 80163b2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80163b6:	2e00      	cmp	r6, #0
 80163b8:	d1f9      	bne.n	80163ae <__atomic_load_8+0x36>
 80163ba:	f3bf 8f5b 	dmb	ish
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d1f4      	bne.n	80163ae <__atomic_load_8+0x36>
 80163c4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80163c8:	f3bf 8f5b 	dmb	ish
 80163cc:	5463      	strb	r3, [r4, r1]
 80163ce:	4630      	mov	r0, r6
 80163d0:	4639      	mov	r1, r7
 80163d2:	bcd0      	pop	{r4, r6, r7}
 80163d4:	4770      	bx	lr
 80163d6:	bf00      	nop
 80163d8:	27d4eb2d 	.word	0x27d4eb2d
 80163dc:	b21642c9 	.word	0xb21642c9
 80163e0:	2000afb4 	.word	0x2000afb4

080163e4 <__atomic_store_8>:
 80163e4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80163e8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80163ec:	b570      	push	{r4, r5, r6, lr}
 80163ee:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80163f2:	4c14      	ldr	r4, [pc, #80]	@ (8016444 <__atomic_store_8+0x60>)
 80163f4:	4d14      	ldr	r5, [pc, #80]	@ (8016448 <__atomic_store_8+0x64>)
 80163f6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80163fa:	fb04 f101 	mul.w	r1, r4, r1
 80163fe:	4c13      	ldr	r4, [pc, #76]	@ (801644c <__atomic_store_8+0x68>)
 8016400:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016404:	fba4 4e01 	umull	r4, lr, r4, r1
 8016408:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801640c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8016410:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8016414:	eba1 0e0e 	sub.w	lr, r1, lr
 8016418:	eb05 0c0e 	add.w	ip, r5, lr
 801641c:	f04f 0401 	mov.w	r4, #1
 8016420:	e8dc 1f4f 	ldrexb	r1, [ip]
 8016424:	e8cc 4f46 	strexb	r6, r4, [ip]
 8016428:	2e00      	cmp	r6, #0
 801642a:	d1f9      	bne.n	8016420 <__atomic_store_8+0x3c>
 801642c:	f3bf 8f5b 	dmb	ish
 8016430:	b2c9      	uxtb	r1, r1
 8016432:	2900      	cmp	r1, #0
 8016434:	d1f4      	bne.n	8016420 <__atomic_store_8+0x3c>
 8016436:	e9c0 2300 	strd	r2, r3, [r0]
 801643a:	f3bf 8f5b 	dmb	ish
 801643e:	f805 100e 	strb.w	r1, [r5, lr]
 8016442:	bd70      	pop	{r4, r5, r6, pc}
 8016444:	27d4eb2d 	.word	0x27d4eb2d
 8016448:	2000afb4 	.word	0x2000afb4
 801644c:	b21642c9 	.word	0xb21642c9

08016450 <__atomic_exchange_8>:
 8016450:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8016454:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8016458:	4916      	ldr	r1, [pc, #88]	@ (80164b4 <__atomic_exchange_8+0x64>)
 801645a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801645e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8016462:	fb01 fc0c 	mul.w	ip, r1, ip
 8016466:	4914      	ldr	r1, [pc, #80]	@ (80164b8 <__atomic_exchange_8+0x68>)
 8016468:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801646c:	b570      	push	{r4, r5, r6, lr}
 801646e:	4605      	mov	r5, r0
 8016470:	fba1 010c 	umull	r0, r1, r1, ip
 8016474:	0909      	lsrs	r1, r1, #4
 8016476:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801647a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801647e:	4e0f      	ldr	r6, [pc, #60]	@ (80164bc <__atomic_exchange_8+0x6c>)
 8016480:	ebac 0c01 	sub.w	ip, ip, r1
 8016484:	eb06 010c 	add.w	r1, r6, ip
 8016488:	f04f 0e01 	mov.w	lr, #1
 801648c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8016490:	e8c1 ef40 	strexb	r0, lr, [r1]
 8016494:	2800      	cmp	r0, #0
 8016496:	d1f9      	bne.n	801648c <__atomic_exchange_8+0x3c>
 8016498:	f3bf 8f5b 	dmb	ish
 801649c:	b2e4      	uxtb	r4, r4
 801649e:	2c00      	cmp	r4, #0
 80164a0:	d1f4      	bne.n	801648c <__atomic_exchange_8+0x3c>
 80164a2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80164a6:	e9c5 2300 	strd	r2, r3, [r5]
 80164aa:	f3bf 8f5b 	dmb	ish
 80164ae:	f806 400c 	strb.w	r4, [r6, ip]
 80164b2:	bd70      	pop	{r4, r5, r6, pc}
 80164b4:	27d4eb2d 	.word	0x27d4eb2d
 80164b8:	b21642c9 	.word	0xb21642c9
 80164bc:	2000afb4 	.word	0x2000afb4

080164c0 <rcutils_get_env>:
 80164c0:	b168      	cbz	r0, 80164de <rcutils_get_env+0x1e>
 80164c2:	b510      	push	{r4, lr}
 80164c4:	460c      	mov	r4, r1
 80164c6:	b129      	cbz	r1, 80164d4 <rcutils_get_env+0x14>
 80164c8:	f002 fed8 	bl	801927c <getenv>
 80164cc:	b120      	cbz	r0, 80164d8 <rcutils_get_env+0x18>
 80164ce:	6020      	str	r0, [r4, #0]
 80164d0:	2000      	movs	r0, #0
 80164d2:	bd10      	pop	{r4, pc}
 80164d4:	4803      	ldr	r0, [pc, #12]	@ (80164e4 <rcutils_get_env+0x24>)
 80164d6:	bd10      	pop	{r4, pc}
 80164d8:	4b03      	ldr	r3, [pc, #12]	@ (80164e8 <rcutils_get_env+0x28>)
 80164da:	6023      	str	r3, [r4, #0]
 80164dc:	bd10      	pop	{r4, pc}
 80164de:	4803      	ldr	r0, [pc, #12]	@ (80164ec <rcutils_get_env+0x2c>)
 80164e0:	4770      	bx	lr
 80164e2:	bf00      	nop
 80164e4:	0801ae40 	.word	0x0801ae40
 80164e8:	0801b21c 	.word	0x0801b21c
 80164ec:	0801ae24 	.word	0x0801ae24

080164f0 <rcutils_format_string_limit>:
 80164f0:	b40f      	push	{r0, r1, r2, r3}
 80164f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164f4:	b083      	sub	sp, #12
 80164f6:	ac08      	add	r4, sp, #32
 80164f8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80164fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80164fe:	b34e      	cbz	r6, 8016554 <rcutils_format_string_limit+0x64>
 8016500:	a808      	add	r0, sp, #32
 8016502:	f7f7 f8b7 	bl	800d674 <rcutils_allocator_is_valid>
 8016506:	b328      	cbz	r0, 8016554 <rcutils_format_string_limit+0x64>
 8016508:	2100      	movs	r1, #0
 801650a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801650c:	4632      	mov	r2, r6
 801650e:	4608      	mov	r0, r1
 8016510:	e9cd 3300 	strd	r3, r3, [sp]
 8016514:	f000 f8f4 	bl	8016700 <rcutils_vsnprintf>
 8016518:	1c43      	adds	r3, r0, #1
 801651a:	4605      	mov	r5, r0
 801651c:	d01a      	beq.n	8016554 <rcutils_format_string_limit+0x64>
 801651e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016520:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016522:	1c47      	adds	r7, r0, #1
 8016524:	429f      	cmp	r7, r3
 8016526:	bf84      	itt	hi
 8016528:	461f      	movhi	r7, r3
 801652a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801652e:	4638      	mov	r0, r7
 8016530:	9b08      	ldr	r3, [sp, #32]
 8016532:	4798      	blx	r3
 8016534:	4604      	mov	r4, r0
 8016536:	b168      	cbz	r0, 8016554 <rcutils_format_string_limit+0x64>
 8016538:	9b01      	ldr	r3, [sp, #4]
 801653a:	4632      	mov	r2, r6
 801653c:	4639      	mov	r1, r7
 801653e:	f000 f8df 	bl	8016700 <rcutils_vsnprintf>
 8016542:	2800      	cmp	r0, #0
 8016544:	db02      	blt.n	801654c <rcutils_format_string_limit+0x5c>
 8016546:	2300      	movs	r3, #0
 8016548:	5563      	strb	r3, [r4, r5]
 801654a:	e004      	b.n	8016556 <rcutils_format_string_limit+0x66>
 801654c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801654e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016550:	4620      	mov	r0, r4
 8016552:	4798      	blx	r3
 8016554:	2400      	movs	r4, #0
 8016556:	4620      	mov	r0, r4
 8016558:	b003      	add	sp, #12
 801655a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801655e:	b004      	add	sp, #16
 8016560:	4770      	bx	lr
 8016562:	bf00      	nop

08016564 <rcutils_repl_str>:
 8016564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016568:	ed2d 8b02 	vpush	{d8}
 801656c:	b087      	sub	sp, #28
 801656e:	4680      	mov	r8, r0
 8016570:	4608      	mov	r0, r1
 8016572:	f8cd 8004 	str.w	r8, [sp, #4]
 8016576:	ee08 2a10 	vmov	s16, r2
 801657a:	468a      	mov	sl, r1
 801657c:	4699      	mov	r9, r3
 801657e:	f7e9 fe59 	bl	8000234 <strlen>
 8016582:	2600      	movs	r6, #0
 8016584:	4647      	mov	r7, r8
 8016586:	9002      	str	r0, [sp, #8]
 8016588:	46b3      	mov	fp, r6
 801658a:	2510      	movs	r5, #16
 801658c:	46b0      	mov	r8, r6
 801658e:	e01d      	b.n	80165cc <rcutils_repl_str+0x68>
 8016590:	f10b 0b01 	add.w	fp, fp, #1
 8016594:	455e      	cmp	r6, fp
 8016596:	d211      	bcs.n	80165bc <rcutils_repl_str+0x58>
 8016598:	442e      	add	r6, r5
 801659a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801659e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80165a2:	00b1      	lsls	r1, r6, #2
 80165a4:	4798      	blx	r3
 80165a6:	2800      	cmp	r0, #0
 80165a8:	f000 8088 	beq.w	80166bc <rcutils_repl_str+0x158>
 80165ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80165b0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80165b4:	4680      	mov	r8, r0
 80165b6:	bf28      	it	cs
 80165b8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80165bc:	9a01      	ldr	r2, [sp, #4]
 80165be:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80165c2:	1aa2      	subs	r2, r4, r2
 80165c4:	f843 2c04 	str.w	r2, [r3, #-4]
 80165c8:	9b02      	ldr	r3, [sp, #8]
 80165ca:	18e7      	adds	r7, r4, r3
 80165cc:	4651      	mov	r1, sl
 80165ce:	4638      	mov	r0, r7
 80165d0:	f003 fb3d 	bl	8019c4e <strstr>
 80165d4:	4604      	mov	r4, r0
 80165d6:	4640      	mov	r0, r8
 80165d8:	2c00      	cmp	r4, #0
 80165da:	d1d9      	bne.n	8016590 <rcutils_repl_str+0x2c>
 80165dc:	46b8      	mov	r8, r7
 80165de:	4607      	mov	r7, r0
 80165e0:	4640      	mov	r0, r8
 80165e2:	f7e9 fe27 	bl	8000234 <strlen>
 80165e6:	9b01      	ldr	r3, [sp, #4]
 80165e8:	eba8 0303 	sub.w	r3, r8, r3
 80165ec:	181c      	adds	r4, r3, r0
 80165ee:	9404      	str	r4, [sp, #16]
 80165f0:	f1bb 0f00 	cmp.w	fp, #0
 80165f4:	d04a      	beq.n	801668c <rcutils_repl_str+0x128>
 80165f6:	ee18 0a10 	vmov	r0, s16
 80165fa:	f7e9 fe1b 	bl	8000234 <strlen>
 80165fe:	9b02      	ldr	r3, [sp, #8]
 8016600:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016604:	1ac3      	subs	r3, r0, r3
 8016606:	fb0b 4303 	mla	r3, fp, r3, r4
 801660a:	461a      	mov	r2, r3
 801660c:	9305      	str	r3, [sp, #20]
 801660e:	4606      	mov	r6, r0
 8016610:	f8d9 3000 	ldr.w	r3, [r9]
 8016614:	1c50      	adds	r0, r2, #1
 8016616:	4798      	blx	r3
 8016618:	9003      	str	r0, [sp, #12]
 801661a:	2800      	cmp	r0, #0
 801661c:	d04f      	beq.n	80166be <rcutils_repl_str+0x15a>
 801661e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016622:	683a      	ldr	r2, [r7, #0]
 8016624:	4641      	mov	r1, r8
 8016626:	f003 fbb4 	bl	8019d92 <memcpy>
 801662a:	683d      	ldr	r5, [r7, #0]
 801662c:	9b03      	ldr	r3, [sp, #12]
 801662e:	9701      	str	r7, [sp, #4]
 8016630:	46ba      	mov	sl, r7
 8016632:	441d      	add	r5, r3
 8016634:	9f02      	ldr	r7, [sp, #8]
 8016636:	f8cd 9008 	str.w	r9, [sp, #8]
 801663a:	2401      	movs	r4, #1
 801663c:	46d1      	mov	r9, sl
 801663e:	ee18 aa10 	vmov	sl, s16
 8016642:	e00a      	b.n	801665a <rcutils_repl_str+0xf6>
 8016644:	f8d9 5000 	ldr.w	r5, [r9]
 8016648:	1aaa      	subs	r2, r5, r2
 801664a:	1885      	adds	r5, r0, r2
 801664c:	f003 fba1 	bl	8019d92 <memcpy>
 8016650:	45a3      	cmp	fp, r4
 8016652:	f104 0201 	add.w	r2, r4, #1
 8016656:	d935      	bls.n	80166c4 <rcutils_repl_str+0x160>
 8016658:	4614      	mov	r4, r2
 801665a:	4632      	mov	r2, r6
 801665c:	4651      	mov	r1, sl
 801665e:	4628      	mov	r0, r5
 8016660:	f003 fb97 	bl	8019d92 <memcpy>
 8016664:	f859 2b04 	ldr.w	r2, [r9], #4
 8016668:	45a3      	cmp	fp, r4
 801666a:	443a      	add	r2, r7
 801666c:	eb05 0006 	add.w	r0, r5, r6
 8016670:	eb08 0102 	add.w	r1, r8, r2
 8016674:	d1e6      	bne.n	8016644 <rcutils_repl_str+0xe0>
 8016676:	9b04      	ldr	r3, [sp, #16]
 8016678:	1a9a      	subs	r2, r3, r2
 801667a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801667e:	f003 fb88 	bl	8019d92 <memcpy>
 8016682:	9a03      	ldr	r2, [sp, #12]
 8016684:	9905      	ldr	r1, [sp, #20]
 8016686:	2300      	movs	r3, #0
 8016688:	5453      	strb	r3, [r2, r1]
 801668a:	e00b      	b.n	80166a4 <rcutils_repl_str+0x140>
 801668c:	4620      	mov	r0, r4
 801668e:	f8d9 3000 	ldr.w	r3, [r9]
 8016692:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016696:	3001      	adds	r0, #1
 8016698:	4798      	blx	r3
 801669a:	9003      	str	r0, [sp, #12]
 801669c:	b110      	cbz	r0, 80166a4 <rcutils_repl_str+0x140>
 801669e:	9901      	ldr	r1, [sp, #4]
 80166a0:	f003 fb6f 	bl	8019d82 <strcpy>
 80166a4:	4638      	mov	r0, r7
 80166a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80166aa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80166ae:	4798      	blx	r3
 80166b0:	9803      	ldr	r0, [sp, #12]
 80166b2:	b007      	add	sp, #28
 80166b4:	ecbd 8b02 	vpop	{d8}
 80166b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166bc:	4647      	mov	r7, r8
 80166be:	2300      	movs	r3, #0
 80166c0:	9303      	str	r3, [sp, #12]
 80166c2:	e7ef      	b.n	80166a4 <rcutils_repl_str+0x140>
 80166c4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80166c8:	e7db      	b.n	8016682 <rcutils_repl_str+0x11e>
 80166ca:	bf00      	nop

080166cc <rcutils_snprintf>:
 80166cc:	b40c      	push	{r2, r3}
 80166ce:	b530      	push	{r4, r5, lr}
 80166d0:	b083      	sub	sp, #12
 80166d2:	ab06      	add	r3, sp, #24
 80166d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80166d8:	9301      	str	r3, [sp, #4]
 80166da:	b152      	cbz	r2, 80166f2 <rcutils_snprintf+0x26>
 80166dc:	b138      	cbz	r0, 80166ee <rcutils_snprintf+0x22>
 80166de:	b141      	cbz	r1, 80166f2 <rcutils_snprintf+0x26>
 80166e0:	f003 f9c2 	bl	8019a68 <vsniprintf>
 80166e4:	b003      	add	sp, #12
 80166e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80166ea:	b002      	add	sp, #8
 80166ec:	4770      	bx	lr
 80166ee:	2900      	cmp	r1, #0
 80166f0:	d0f6      	beq.n	80166e0 <rcutils_snprintf+0x14>
 80166f2:	f003 fb19 	bl	8019d28 <__errno>
 80166f6:	2316      	movs	r3, #22
 80166f8:	6003      	str	r3, [r0, #0]
 80166fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80166fe:	e7f1      	b.n	80166e4 <rcutils_snprintf+0x18>

08016700 <rcutils_vsnprintf>:
 8016700:	b570      	push	{r4, r5, r6, lr}
 8016702:	b13a      	cbz	r2, 8016714 <rcutils_vsnprintf+0x14>
 8016704:	b120      	cbz	r0, 8016710 <rcutils_vsnprintf+0x10>
 8016706:	b129      	cbz	r1, 8016714 <rcutils_vsnprintf+0x14>
 8016708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801670c:	f003 b9ac 	b.w	8019a68 <vsniprintf>
 8016710:	2900      	cmp	r1, #0
 8016712:	d0f9      	beq.n	8016708 <rcutils_vsnprintf+0x8>
 8016714:	f003 fb08 	bl	8019d28 <__errno>
 8016718:	2316      	movs	r3, #22
 801671a:	6003      	str	r3, [r0, #0]
 801671c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016720:	bd70      	pop	{r4, r5, r6, pc}
 8016722:	bf00      	nop

08016724 <rcutils_strdup>:
 8016724:	b084      	sub	sp, #16
 8016726:	b570      	push	{r4, r5, r6, lr}
 8016728:	b082      	sub	sp, #8
 801672a:	ac07      	add	r4, sp, #28
 801672c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016730:	4605      	mov	r5, r0
 8016732:	b1b0      	cbz	r0, 8016762 <rcutils_strdup+0x3e>
 8016734:	f7e9 fd7e 	bl	8000234 <strlen>
 8016738:	1c42      	adds	r2, r0, #1
 801673a:	9b07      	ldr	r3, [sp, #28]
 801673c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801673e:	9201      	str	r2, [sp, #4]
 8016740:	4606      	mov	r6, r0
 8016742:	4610      	mov	r0, r2
 8016744:	4798      	blx	r3
 8016746:	4604      	mov	r4, r0
 8016748:	b128      	cbz	r0, 8016756 <rcutils_strdup+0x32>
 801674a:	9a01      	ldr	r2, [sp, #4]
 801674c:	4629      	mov	r1, r5
 801674e:	f003 fb20 	bl	8019d92 <memcpy>
 8016752:	2300      	movs	r3, #0
 8016754:	55a3      	strb	r3, [r4, r6]
 8016756:	4620      	mov	r0, r4
 8016758:	b002      	add	sp, #8
 801675a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801675e:	b004      	add	sp, #16
 8016760:	4770      	bx	lr
 8016762:	4604      	mov	r4, r0
 8016764:	e7f7      	b.n	8016756 <rcutils_strdup+0x32>
 8016766:	bf00      	nop

08016768 <rcutils_strndup>:
 8016768:	b082      	sub	sp, #8
 801676a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801676c:	ac06      	add	r4, sp, #24
 801676e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016772:	4605      	mov	r5, r0
 8016774:	b188      	cbz	r0, 801679a <rcutils_strndup+0x32>
 8016776:	1c4f      	adds	r7, r1, #1
 8016778:	460e      	mov	r6, r1
 801677a:	4638      	mov	r0, r7
 801677c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801677e:	4790      	blx	r2
 8016780:	4604      	mov	r4, r0
 8016782:	b128      	cbz	r0, 8016790 <rcutils_strndup+0x28>
 8016784:	463a      	mov	r2, r7
 8016786:	4629      	mov	r1, r5
 8016788:	f003 fb03 	bl	8019d92 <memcpy>
 801678c:	2300      	movs	r3, #0
 801678e:	55a3      	strb	r3, [r4, r6]
 8016790:	4620      	mov	r0, r4
 8016792:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016796:	b002      	add	sp, #8
 8016798:	4770      	bx	lr
 801679a:	4604      	mov	r4, r0
 801679c:	e7f8      	b.n	8016790 <rcutils_strndup+0x28>
 801679e:	bf00      	nop

080167a0 <rcutils_get_zero_initialized_string_map>:
 80167a0:	4b01      	ldr	r3, [pc, #4]	@ (80167a8 <rcutils_get_zero_initialized_string_map+0x8>)
 80167a2:	2000      	movs	r0, #0
 80167a4:	6018      	str	r0, [r3, #0]
 80167a6:	4770      	bx	lr
 80167a8:	2000afcc 	.word	0x2000afcc

080167ac <rcutils_string_map_reserve>:
 80167ac:	2800      	cmp	r0, #0
 80167ae:	d05f      	beq.n	8016870 <rcutils_string_map_reserve+0xc4>
 80167b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167b4:	460c      	mov	r4, r1
 80167b6:	6801      	ldr	r1, [r0, #0]
 80167b8:	b082      	sub	sp, #8
 80167ba:	4605      	mov	r5, r0
 80167bc:	b129      	cbz	r1, 80167ca <rcutils_string_map_reserve+0x1e>
 80167be:	68cb      	ldr	r3, [r1, #12]
 80167c0:	42a3      	cmp	r3, r4
 80167c2:	d906      	bls.n	80167d2 <rcutils_string_map_reserve+0x26>
 80167c4:	461c      	mov	r4, r3
 80167c6:	2900      	cmp	r1, #0
 80167c8:	d1f9      	bne.n	80167be <rcutils_string_map_reserve+0x12>
 80167ca:	201f      	movs	r0, #31
 80167cc:	b002      	add	sp, #8
 80167ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167d2:	688b      	ldr	r3, [r1, #8]
 80167d4:	42a3      	cmp	r3, r4
 80167d6:	d047      	beq.n	8016868 <rcutils_string_map_reserve+0xbc>
 80167d8:	6a0e      	ldr	r6, [r1, #32]
 80167da:	2c00      	cmp	r4, #0
 80167dc:	d034      	beq.n	8016848 <rcutils_string_map_reserve+0x9c>
 80167de:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80167e2:	d243      	bcs.n	801686c <rcutils_string_map_reserve+0xc0>
 80167e4:	00a7      	lsls	r7, r4, #2
 80167e6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80167ea:	6808      	ldr	r0, [r1, #0]
 80167ec:	4632      	mov	r2, r6
 80167ee:	4639      	mov	r1, r7
 80167f0:	47c0      	blx	r8
 80167f2:	2800      	cmp	r0, #0
 80167f4:	d03a      	beq.n	801686c <rcutils_string_map_reserve+0xc0>
 80167f6:	682b      	ldr	r3, [r5, #0]
 80167f8:	4632      	mov	r2, r6
 80167fa:	6018      	str	r0, [r3, #0]
 80167fc:	4639      	mov	r1, r7
 80167fe:	6858      	ldr	r0, [r3, #4]
 8016800:	47c0      	blx	r8
 8016802:	2800      	cmp	r0, #0
 8016804:	d032      	beq.n	801686c <rcutils_string_map_reserve+0xc0>
 8016806:	682d      	ldr	r5, [r5, #0]
 8016808:	68ab      	ldr	r3, [r5, #8]
 801680a:	6068      	str	r0, [r5, #4]
 801680c:	42a3      	cmp	r3, r4
 801680e:	d226      	bcs.n	801685e <rcutils_string_map_reserve+0xb2>
 8016810:	682a      	ldr	r2, [r5, #0]
 8016812:	eb00 0c07 	add.w	ip, r0, r7
 8016816:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801681a:	45e6      	cmp	lr, ip
 801681c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016820:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8016824:	d203      	bcs.n	801682e <rcutils_string_map_reserve+0x82>
 8016826:	eb02 0c07 	add.w	ip, r2, r7
 801682a:	4566      	cmp	r6, ip
 801682c:	d322      	bcc.n	8016874 <rcutils_string_map_reserve+0xc8>
 801682e:	1ae3      	subs	r3, r4, r3
 8016830:	009a      	lsls	r2, r3, #2
 8016832:	4670      	mov	r0, lr
 8016834:	2100      	movs	r1, #0
 8016836:	9201      	str	r2, [sp, #4]
 8016838:	f003 f9e2 	bl	8019c00 <memset>
 801683c:	9a01      	ldr	r2, [sp, #4]
 801683e:	2100      	movs	r1, #0
 8016840:	4630      	mov	r0, r6
 8016842:	f003 f9dd 	bl	8019c00 <memset>
 8016846:	e00a      	b.n	801685e <rcutils_string_map_reserve+0xb2>
 8016848:	694f      	ldr	r7, [r1, #20]
 801684a:	6808      	ldr	r0, [r1, #0]
 801684c:	4631      	mov	r1, r6
 801684e:	47b8      	blx	r7
 8016850:	682b      	ldr	r3, [r5, #0]
 8016852:	4631      	mov	r1, r6
 8016854:	6858      	ldr	r0, [r3, #4]
 8016856:	601c      	str	r4, [r3, #0]
 8016858:	47b8      	blx	r7
 801685a:	682d      	ldr	r5, [r5, #0]
 801685c:	606c      	str	r4, [r5, #4]
 801685e:	2000      	movs	r0, #0
 8016860:	60ac      	str	r4, [r5, #8]
 8016862:	b002      	add	sp, #8
 8016864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016868:	2000      	movs	r0, #0
 801686a:	e7af      	b.n	80167cc <rcutils_string_map_reserve+0x20>
 801686c:	200a      	movs	r0, #10
 801686e:	e7ad      	b.n	80167cc <rcutils_string_map_reserve+0x20>
 8016870:	200b      	movs	r0, #11
 8016872:	4770      	bx	lr
 8016874:	1f0b      	subs	r3, r1, #4
 8016876:	4418      	add	r0, r3
 8016878:	4413      	add	r3, r2
 801687a:	3a04      	subs	r2, #4
 801687c:	4417      	add	r7, r2
 801687e:	2200      	movs	r2, #0
 8016880:	f843 2f04 	str.w	r2, [r3, #4]!
 8016884:	42bb      	cmp	r3, r7
 8016886:	f840 2f04 	str.w	r2, [r0, #4]!
 801688a:	d1f9      	bne.n	8016880 <rcutils_string_map_reserve+0xd4>
 801688c:	e7e7      	b.n	801685e <rcutils_string_map_reserve+0xb2>
 801688e:	bf00      	nop

08016890 <rcutils_string_map_init>:
 8016890:	b082      	sub	sp, #8
 8016892:	b570      	push	{r4, r5, r6, lr}
 8016894:	ac04      	add	r4, sp, #16
 8016896:	e884 000c 	stmia.w	r4, {r2, r3}
 801689a:	b380      	cbz	r0, 80168fe <rcutils_string_map_init+0x6e>
 801689c:	6806      	ldr	r6, [r0, #0]
 801689e:	4604      	mov	r4, r0
 80168a0:	b12e      	cbz	r6, 80168ae <rcutils_string_map_init+0x1e>
 80168a2:	251e      	movs	r5, #30
 80168a4:	4628      	mov	r0, r5
 80168a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168aa:	b002      	add	sp, #8
 80168ac:	4770      	bx	lr
 80168ae:	a804      	add	r0, sp, #16
 80168b0:	460d      	mov	r5, r1
 80168b2:	f7f6 fedf 	bl	800d674 <rcutils_allocator_is_valid>
 80168b6:	b310      	cbz	r0, 80168fe <rcutils_string_map_init+0x6e>
 80168b8:	9b04      	ldr	r3, [sp, #16]
 80168ba:	9908      	ldr	r1, [sp, #32]
 80168bc:	2024      	movs	r0, #36	@ 0x24
 80168be:	4798      	blx	r3
 80168c0:	6020      	str	r0, [r4, #0]
 80168c2:	b310      	cbz	r0, 801690a <rcutils_string_map_init+0x7a>
 80168c4:	f10d 0e10 	add.w	lr, sp, #16
 80168c8:	e9c0 6600 	strd	r6, r6, [r0]
 80168cc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80168d0:	f100 0c10 	add.w	ip, r0, #16
 80168d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80168d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80168dc:	f8de 3000 	ldr.w	r3, [lr]
 80168e0:	f8cc 3000 	str.w	r3, [ip]
 80168e4:	4629      	mov	r1, r5
 80168e6:	4620      	mov	r0, r4
 80168e8:	f7ff ff60 	bl	80167ac <rcutils_string_map_reserve>
 80168ec:	4605      	mov	r5, r0
 80168ee:	2800      	cmp	r0, #0
 80168f0:	d0d8      	beq.n	80168a4 <rcutils_string_map_init+0x14>
 80168f2:	9b05      	ldr	r3, [sp, #20]
 80168f4:	9908      	ldr	r1, [sp, #32]
 80168f6:	6820      	ldr	r0, [r4, #0]
 80168f8:	4798      	blx	r3
 80168fa:	6026      	str	r6, [r4, #0]
 80168fc:	e7d2      	b.n	80168a4 <rcutils_string_map_init+0x14>
 80168fe:	250b      	movs	r5, #11
 8016900:	4628      	mov	r0, r5
 8016902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016906:	b002      	add	sp, #8
 8016908:	4770      	bx	lr
 801690a:	250a      	movs	r5, #10
 801690c:	e7ca      	b.n	80168a4 <rcutils_string_map_init+0x14>
 801690e:	bf00      	nop

08016910 <rcutils_string_map_fini>:
 8016910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016914:	b082      	sub	sp, #8
 8016916:	2800      	cmp	r0, #0
 8016918:	d03a      	beq.n	8016990 <rcutils_string_map_fini+0x80>
 801691a:	6804      	ldr	r4, [r0, #0]
 801691c:	4606      	mov	r6, r0
 801691e:	2c00      	cmp	r4, #0
 8016920:	d032      	beq.n	8016988 <rcutils_string_map_fini+0x78>
 8016922:	68a3      	ldr	r3, [r4, #8]
 8016924:	b32b      	cbz	r3, 8016972 <rcutils_string_map_fini+0x62>
 8016926:	2500      	movs	r5, #0
 8016928:	6822      	ldr	r2, [r4, #0]
 801692a:	462f      	mov	r7, r5
 801692c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016930:	b1e0      	cbz	r0, 801696c <rcutils_string_map_fini+0x5c>
 8016932:	6a21      	ldr	r1, [r4, #32]
 8016934:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016938:	9101      	str	r1, [sp, #4]
 801693a:	47c0      	blx	r8
 801693c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016940:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016944:	9901      	ldr	r1, [sp, #4]
 8016946:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801694a:	47c0      	blx	r8
 801694c:	68e3      	ldr	r3, [r4, #12]
 801694e:	6862      	ldr	r2, [r4, #4]
 8016950:	3b01      	subs	r3, #1
 8016952:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016956:	60e3      	str	r3, [r4, #12]
 8016958:	6834      	ldr	r4, [r6, #0]
 801695a:	68a3      	ldr	r3, [r4, #8]
 801695c:	3501      	adds	r5, #1
 801695e:	429d      	cmp	r5, r3
 8016960:	d207      	bcs.n	8016972 <rcutils_string_map_fini+0x62>
 8016962:	6822      	ldr	r2, [r4, #0]
 8016964:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016968:	2800      	cmp	r0, #0
 801696a:	d1e2      	bne.n	8016932 <rcutils_string_map_fini+0x22>
 801696c:	3501      	adds	r5, #1
 801696e:	429d      	cmp	r5, r3
 8016970:	d3dc      	bcc.n	801692c <rcutils_string_map_fini+0x1c>
 8016972:	2100      	movs	r1, #0
 8016974:	4630      	mov	r0, r6
 8016976:	f7ff ff19 	bl	80167ac <rcutils_string_map_reserve>
 801697a:	4604      	mov	r4, r0
 801697c:	b920      	cbnz	r0, 8016988 <rcutils_string_map_fini+0x78>
 801697e:	6830      	ldr	r0, [r6, #0]
 8016980:	6943      	ldr	r3, [r0, #20]
 8016982:	6a01      	ldr	r1, [r0, #32]
 8016984:	4798      	blx	r3
 8016986:	6034      	str	r4, [r6, #0]
 8016988:	4620      	mov	r0, r4
 801698a:	b002      	add	sp, #8
 801698c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016990:	240b      	movs	r4, #11
 8016992:	4620      	mov	r0, r4
 8016994:	b002      	add	sp, #8
 8016996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801699a:	bf00      	nop

0801699c <rcutils_string_map_getn>:
 801699c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169a0:	b300      	cbz	r0, 80169e4 <rcutils_string_map_getn+0x48>
 80169a2:	6807      	ldr	r7, [r0, #0]
 80169a4:	b1ff      	cbz	r7, 80169e6 <rcutils_string_map_getn+0x4a>
 80169a6:	4688      	mov	r8, r1
 80169a8:	b1e1      	cbz	r1, 80169e4 <rcutils_string_map_getn+0x48>
 80169aa:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80169ae:	683e      	ldr	r6, [r7, #0]
 80169b0:	f1ba 0f00 	cmp.w	sl, #0
 80169b4:	d016      	beq.n	80169e4 <rcutils_string_map_getn+0x48>
 80169b6:	4691      	mov	r9, r2
 80169b8:	3e04      	subs	r6, #4
 80169ba:	2400      	movs	r4, #0
 80169bc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80169c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80169c4:	4628      	mov	r0, r5
 80169c6:	3401      	adds	r4, #1
 80169c8:	b155      	cbz	r5, 80169e0 <rcutils_string_map_getn+0x44>
 80169ca:	f7e9 fc33 	bl	8000234 <strlen>
 80169ce:	4548      	cmp	r0, r9
 80169d0:	4602      	mov	r2, r0
 80169d2:	4629      	mov	r1, r5
 80169d4:	bf38      	it	cc
 80169d6:	464a      	movcc	r2, r9
 80169d8:	4640      	mov	r0, r8
 80169da:	f003 f926 	bl	8019c2a <strncmp>
 80169de:	b128      	cbz	r0, 80169ec <rcutils_string_map_getn+0x50>
 80169e0:	45a2      	cmp	sl, r4
 80169e2:	d1eb      	bne.n	80169bc <rcutils_string_map_getn+0x20>
 80169e4:	2700      	movs	r7, #0
 80169e6:	4638      	mov	r0, r7
 80169e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f853 700b 	ldr.w	r7, [r3, fp]
 80169f2:	4638      	mov	r0, r7
 80169f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080169f8 <rmw_get_zero_initialized_context>:
 80169f8:	b510      	push	{r4, lr}
 80169fa:	4604      	mov	r4, r0
 80169fc:	3010      	adds	r0, #16
 80169fe:	f7f6 fecb 	bl	800d798 <rmw_get_zero_initialized_init_options>
 8016a02:	2300      	movs	r3, #0
 8016a04:	2000      	movs	r0, #0
 8016a06:	2100      	movs	r1, #0
 8016a08:	e9c4 0100 	strd	r0, r1, [r4]
 8016a0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8016a10:	60a3      	str	r3, [r4, #8]
 8016a12:	4620      	mov	r0, r4
 8016a14:	bd10      	pop	{r4, pc}
 8016a16:	bf00      	nop

08016a18 <rmw_time_equal>:
 8016a18:	b4f0      	push	{r4, r5, r6, r7}
 8016a1a:	b084      	sub	sp, #16
 8016a1c:	ac04      	add	r4, sp, #16
 8016a1e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016a22:	4603      	mov	r3, r0
 8016a24:	4924      	ldr	r1, [pc, #144]	@ (8016ab8 <rmw_time_equal+0xa0>)
 8016a26:	9e03      	ldr	r6, [sp, #12]
 8016a28:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016a2c:	2202      	movs	r2, #2
 8016a2e:	4299      	cmp	r1, r3
 8016a30:	41aa      	sbcs	r2, r5
 8016a32:	d330      	bcc.n	8016a96 <rmw_time_equal+0x7e>
 8016a34:	4c21      	ldr	r4, [pc, #132]	@ (8016abc <rmw_time_equal+0xa4>)
 8016a36:	fba3 3204 	umull	r3, r2, r3, r4
 8016a3a:	fb04 2205 	mla	r2, r4, r5, r2
 8016a3e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016a42:	43dd      	mvns	r5, r3
 8016a44:	1a8c      	subs	r4, r1, r2
 8016a46:	4285      	cmp	r5, r0
 8016a48:	41b4      	sbcs	r4, r6
 8016a4a:	d332      	bcc.n	8016ab2 <rmw_time_equal+0x9a>
 8016a4c:	eb10 0c03 	adds.w	ip, r0, r3
 8016a50:	eb42 0106 	adc.w	r1, r2, r6
 8016a54:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8016a58:	4817      	ldr	r0, [pc, #92]	@ (8016ab8 <rmw_time_equal+0xa0>)
 8016a5a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016a5c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016a5e:	2202      	movs	r2, #2
 8016a60:	4298      	cmp	r0, r3
 8016a62:	41b2      	sbcs	r2, r6
 8016a64:	d31c      	bcc.n	8016aa0 <rmw_time_equal+0x88>
 8016a66:	4c15      	ldr	r4, [pc, #84]	@ (8016abc <rmw_time_equal+0xa4>)
 8016a68:	fba3 3204 	umull	r3, r2, r3, r4
 8016a6c:	fb04 2206 	mla	r2, r4, r6, r2
 8016a70:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016a74:	43de      	mvns	r6, r3
 8016a76:	1a84      	subs	r4, r0, r2
 8016a78:	42ae      	cmp	r6, r5
 8016a7a:	41bc      	sbcs	r4, r7
 8016a7c:	d315      	bcc.n	8016aaa <rmw_time_equal+0x92>
 8016a7e:	195b      	adds	r3, r3, r5
 8016a80:	eb42 0207 	adc.w	r2, r2, r7
 8016a84:	428a      	cmp	r2, r1
 8016a86:	bf08      	it	eq
 8016a88:	4563      	cmpeq	r3, ip
 8016a8a:	bf0c      	ite	eq
 8016a8c:	2001      	moveq	r0, #1
 8016a8e:	2000      	movne	r0, #0
 8016a90:	b004      	add	sp, #16
 8016a92:	bcf0      	pop	{r4, r5, r6, r7}
 8016a94:	4770      	bx	lr
 8016a96:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016a9a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016a9e:	e7d9      	b.n	8016a54 <rmw_time_equal+0x3c>
 8016aa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016aa4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016aa8:	e7ec      	b.n	8016a84 <rmw_time_equal+0x6c>
 8016aaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016aae:	4602      	mov	r2, r0
 8016ab0:	e7e8      	b.n	8016a84 <rmw_time_equal+0x6c>
 8016ab2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016ab6:	e7cd      	b.n	8016a54 <rmw_time_equal+0x3c>
 8016ab8:	25c17d04 	.word	0x25c17d04
 8016abc:	3b9aca00 	.word	0x3b9aca00

08016ac0 <rmw_time_total_nsec>:
 8016ac0:	b470      	push	{r4, r5, r6}
 8016ac2:	b085      	sub	sp, #20
 8016ac4:	ac04      	add	r4, sp, #16
 8016ac6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016aca:	4603      	mov	r3, r0
 8016acc:	4912      	ldr	r1, [pc, #72]	@ (8016b18 <rmw_time_total_nsec+0x58>)
 8016ace:	9e03      	ldr	r6, [sp, #12]
 8016ad0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016ad4:	2202      	movs	r2, #2
 8016ad6:	4299      	cmp	r1, r3
 8016ad8:	41aa      	sbcs	r2, r5
 8016ada:	d311      	bcc.n	8016b00 <rmw_time_total_nsec+0x40>
 8016adc:	4c0f      	ldr	r4, [pc, #60]	@ (8016b1c <rmw_time_total_nsec+0x5c>)
 8016ade:	fba3 3204 	umull	r3, r2, r3, r4
 8016ae2:	fb04 2205 	mla	r2, r4, r5, r2
 8016ae6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016aea:	43dd      	mvns	r5, r3
 8016aec:	1a8c      	subs	r4, r1, r2
 8016aee:	4285      	cmp	r5, r0
 8016af0:	41b4      	sbcs	r4, r6
 8016af2:	d30c      	bcc.n	8016b0e <rmw_time_total_nsec+0x4e>
 8016af4:	1818      	adds	r0, r3, r0
 8016af6:	eb42 0106 	adc.w	r1, r2, r6
 8016afa:	b005      	add	sp, #20
 8016afc:	bc70      	pop	{r4, r5, r6}
 8016afe:	4770      	bx	lr
 8016b00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016b04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016b08:	b005      	add	sp, #20
 8016b0a:	bc70      	pop	{r4, r5, r6}
 8016b0c:	4770      	bx	lr
 8016b0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016b12:	b005      	add	sp, #20
 8016b14:	bc70      	pop	{r4, r5, r6}
 8016b16:	4770      	bx	lr
 8016b18:	25c17d04 	.word	0x25c17d04
 8016b1c:	3b9aca00 	.word	0x3b9aca00

08016b20 <rmw_get_zero_initialized_message_info>:
 8016b20:	b510      	push	{r4, lr}
 8016b22:	2240      	movs	r2, #64	@ 0x40
 8016b24:	4604      	mov	r4, r0
 8016b26:	2100      	movs	r1, #0
 8016b28:	f003 f86a 	bl	8019c00 <memset>
 8016b2c:	4620      	mov	r0, r4
 8016b2e:	bd10      	pop	{r4, pc}

08016b30 <rmw_validate_full_topic_name>:
 8016b30:	2800      	cmp	r0, #0
 8016b32:	d057      	beq.n	8016be4 <rmw_validate_full_topic_name+0xb4>
 8016b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b38:	460d      	mov	r5, r1
 8016b3a:	2900      	cmp	r1, #0
 8016b3c:	d054      	beq.n	8016be8 <rmw_validate_full_topic_name+0xb8>
 8016b3e:	4616      	mov	r6, r2
 8016b40:	4604      	mov	r4, r0
 8016b42:	f7e9 fb77 	bl	8000234 <strlen>
 8016b46:	b148      	cbz	r0, 8016b5c <rmw_validate_full_topic_name+0x2c>
 8016b48:	7823      	ldrb	r3, [r4, #0]
 8016b4a:	2b2f      	cmp	r3, #47	@ 0x2f
 8016b4c:	d00d      	beq.n	8016b6a <rmw_validate_full_topic_name+0x3a>
 8016b4e:	2302      	movs	r3, #2
 8016b50:	602b      	str	r3, [r5, #0]
 8016b52:	b13e      	cbz	r6, 8016b64 <rmw_validate_full_topic_name+0x34>
 8016b54:	2000      	movs	r0, #0
 8016b56:	6030      	str	r0, [r6, #0]
 8016b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b5c:	2301      	movs	r3, #1
 8016b5e:	602b      	str	r3, [r5, #0]
 8016b60:	2e00      	cmp	r6, #0
 8016b62:	d1f7      	bne.n	8016b54 <rmw_validate_full_topic_name+0x24>
 8016b64:	2000      	movs	r0, #0
 8016b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b6a:	1e43      	subs	r3, r0, #1
 8016b6c:	5ce2      	ldrb	r2, [r4, r3]
 8016b6e:	2a2f      	cmp	r2, #47	@ 0x2f
 8016b70:	d03c      	beq.n	8016bec <rmw_validate_full_topic_name+0xbc>
 8016b72:	1e63      	subs	r3, r4, #1
 8016b74:	eb03 0800 	add.w	r8, r3, r0
 8016b78:	f1c4 0e01 	rsb	lr, r4, #1
 8016b7c:	eb0e 0703 	add.w	r7, lr, r3
 8016b80:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8016b84:	f021 0220 	bic.w	r2, r1, #32
 8016b88:	3a41      	subs	r2, #65	@ 0x41
 8016b8a:	2a19      	cmp	r2, #25
 8016b8c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8016b90:	d90b      	bls.n	8016baa <rmw_validate_full_topic_name+0x7a>
 8016b92:	295f      	cmp	r1, #95	@ 0x5f
 8016b94:	d009      	beq.n	8016baa <rmw_validate_full_topic_name+0x7a>
 8016b96:	f1bc 0f0a 	cmp.w	ip, #10
 8016b9a:	d906      	bls.n	8016baa <rmw_validate_full_topic_name+0x7a>
 8016b9c:	2304      	movs	r3, #4
 8016b9e:	602b      	str	r3, [r5, #0]
 8016ba0:	2e00      	cmp	r6, #0
 8016ba2:	d0df      	beq.n	8016b64 <rmw_validate_full_topic_name+0x34>
 8016ba4:	6037      	str	r7, [r6, #0]
 8016ba6:	2000      	movs	r0, #0
 8016ba8:	e7d6      	b.n	8016b58 <rmw_validate_full_topic_name+0x28>
 8016baa:	4543      	cmp	r3, r8
 8016bac:	d1e6      	bne.n	8016b7c <rmw_validate_full_topic_name+0x4c>
 8016bae:	4f1a      	ldr	r7, [pc, #104]	@ (8016c18 <rmw_validate_full_topic_name+0xe8>)
 8016bb0:	2301      	movs	r3, #1
 8016bb2:	e004      	b.n	8016bbe <rmw_validate_full_topic_name+0x8e>
 8016bb4:	4298      	cmp	r0, r3
 8016bb6:	f104 0401 	add.w	r4, r4, #1
 8016bba:	d91c      	bls.n	8016bf6 <rmw_validate_full_topic_name+0xc6>
 8016bbc:	4613      	mov	r3, r2
 8016bbe:	4298      	cmp	r0, r3
 8016bc0:	f103 0201 	add.w	r2, r3, #1
 8016bc4:	d0f6      	beq.n	8016bb4 <rmw_validate_full_topic_name+0x84>
 8016bc6:	7821      	ldrb	r1, [r4, #0]
 8016bc8:	292f      	cmp	r1, #47	@ 0x2f
 8016bca:	d1f3      	bne.n	8016bb4 <rmw_validate_full_topic_name+0x84>
 8016bcc:	7861      	ldrb	r1, [r4, #1]
 8016bce:	292f      	cmp	r1, #47	@ 0x2f
 8016bd0:	d01c      	beq.n	8016c0c <rmw_validate_full_topic_name+0xdc>
 8016bd2:	5dc9      	ldrb	r1, [r1, r7]
 8016bd4:	0749      	lsls	r1, r1, #29
 8016bd6:	d5ed      	bpl.n	8016bb4 <rmw_validate_full_topic_name+0x84>
 8016bd8:	2206      	movs	r2, #6
 8016bda:	602a      	str	r2, [r5, #0]
 8016bdc:	2e00      	cmp	r6, #0
 8016bde:	d0c1      	beq.n	8016b64 <rmw_validate_full_topic_name+0x34>
 8016be0:	6033      	str	r3, [r6, #0]
 8016be2:	e7bf      	b.n	8016b64 <rmw_validate_full_topic_name+0x34>
 8016be4:	200b      	movs	r0, #11
 8016be6:	4770      	bx	lr
 8016be8:	200b      	movs	r0, #11
 8016bea:	e7b5      	b.n	8016b58 <rmw_validate_full_topic_name+0x28>
 8016bec:	2203      	movs	r2, #3
 8016bee:	602a      	str	r2, [r5, #0]
 8016bf0:	2e00      	cmp	r6, #0
 8016bf2:	d1f5      	bne.n	8016be0 <rmw_validate_full_topic_name+0xb0>
 8016bf4:	e7b6      	b.n	8016b64 <rmw_validate_full_topic_name+0x34>
 8016bf6:	28f7      	cmp	r0, #247	@ 0xf7
 8016bf8:	d802      	bhi.n	8016c00 <rmw_validate_full_topic_name+0xd0>
 8016bfa:	2000      	movs	r0, #0
 8016bfc:	6028      	str	r0, [r5, #0]
 8016bfe:	e7ab      	b.n	8016b58 <rmw_validate_full_topic_name+0x28>
 8016c00:	2307      	movs	r3, #7
 8016c02:	602b      	str	r3, [r5, #0]
 8016c04:	2e00      	cmp	r6, #0
 8016c06:	d0ad      	beq.n	8016b64 <rmw_validate_full_topic_name+0x34>
 8016c08:	23f6      	movs	r3, #246	@ 0xf6
 8016c0a:	e7e9      	b.n	8016be0 <rmw_validate_full_topic_name+0xb0>
 8016c0c:	2205      	movs	r2, #5
 8016c0e:	602a      	str	r2, [r5, #0]
 8016c10:	2e00      	cmp	r6, #0
 8016c12:	d1e5      	bne.n	8016be0 <rmw_validate_full_topic_name+0xb0>
 8016c14:	e7a6      	b.n	8016b64 <rmw_validate_full_topic_name+0x34>
 8016c16:	bf00      	nop
 8016c18:	0801b757 	.word	0x0801b757

08016c1c <rmw_validate_namespace_with_size>:
 8016c1c:	b340      	cbz	r0, 8016c70 <rmw_validate_namespace_with_size+0x54>
 8016c1e:	b570      	push	{r4, r5, r6, lr}
 8016c20:	4614      	mov	r4, r2
 8016c22:	b0c2      	sub	sp, #264	@ 0x108
 8016c24:	b332      	cbz	r2, 8016c74 <rmw_validate_namespace_with_size+0x58>
 8016c26:	2901      	cmp	r1, #1
 8016c28:	460d      	mov	r5, r1
 8016c2a:	461e      	mov	r6, r3
 8016c2c:	d102      	bne.n	8016c34 <rmw_validate_namespace_with_size+0x18>
 8016c2e:	7803      	ldrb	r3, [r0, #0]
 8016c30:	2b2f      	cmp	r3, #47	@ 0x2f
 8016c32:	d012      	beq.n	8016c5a <rmw_validate_namespace_with_size+0x3e>
 8016c34:	aa01      	add	r2, sp, #4
 8016c36:	4669      	mov	r1, sp
 8016c38:	f7ff ff7a 	bl	8016b30 <rmw_validate_full_topic_name>
 8016c3c:	b978      	cbnz	r0, 8016c5e <rmw_validate_namespace_with_size+0x42>
 8016c3e:	9b00      	ldr	r3, [sp, #0]
 8016c40:	b14b      	cbz	r3, 8016c56 <rmw_validate_namespace_with_size+0x3a>
 8016c42:	2b07      	cmp	r3, #7
 8016c44:	d007      	beq.n	8016c56 <rmw_validate_namespace_with_size+0x3a>
 8016c46:	1e5a      	subs	r2, r3, #1
 8016c48:	2a05      	cmp	r2, #5
 8016c4a:	d82b      	bhi.n	8016ca4 <rmw_validate_namespace_with_size+0x88>
 8016c4c:	e8df f002 	tbb	[pc, r2]
 8016c50:	1e212427 	.word	0x1e212427
 8016c54:	141b      	.short	0x141b
 8016c56:	2df5      	cmp	r5, #245	@ 0xf5
 8016c58:	d803      	bhi.n	8016c62 <rmw_validate_namespace_with_size+0x46>
 8016c5a:	2000      	movs	r0, #0
 8016c5c:	6020      	str	r0, [r4, #0]
 8016c5e:	b042      	add	sp, #264	@ 0x108
 8016c60:	bd70      	pop	{r4, r5, r6, pc}
 8016c62:	2307      	movs	r3, #7
 8016c64:	6023      	str	r3, [r4, #0]
 8016c66:	2e00      	cmp	r6, #0
 8016c68:	d0f9      	beq.n	8016c5e <rmw_validate_namespace_with_size+0x42>
 8016c6a:	23f4      	movs	r3, #244	@ 0xf4
 8016c6c:	6033      	str	r3, [r6, #0]
 8016c6e:	e7f6      	b.n	8016c5e <rmw_validate_namespace_with_size+0x42>
 8016c70:	200b      	movs	r0, #11
 8016c72:	4770      	bx	lr
 8016c74:	200b      	movs	r0, #11
 8016c76:	e7f2      	b.n	8016c5e <rmw_validate_namespace_with_size+0x42>
 8016c78:	2306      	movs	r3, #6
 8016c7a:	6023      	str	r3, [r4, #0]
 8016c7c:	2e00      	cmp	r6, #0
 8016c7e:	d0ee      	beq.n	8016c5e <rmw_validate_namespace_with_size+0x42>
 8016c80:	9b01      	ldr	r3, [sp, #4]
 8016c82:	6033      	str	r3, [r6, #0]
 8016c84:	e7eb      	b.n	8016c5e <rmw_validate_namespace_with_size+0x42>
 8016c86:	2305      	movs	r3, #5
 8016c88:	6023      	str	r3, [r4, #0]
 8016c8a:	e7f7      	b.n	8016c7c <rmw_validate_namespace_with_size+0x60>
 8016c8c:	2304      	movs	r3, #4
 8016c8e:	6023      	str	r3, [r4, #0]
 8016c90:	e7f4      	b.n	8016c7c <rmw_validate_namespace_with_size+0x60>
 8016c92:	2303      	movs	r3, #3
 8016c94:	6023      	str	r3, [r4, #0]
 8016c96:	e7f1      	b.n	8016c7c <rmw_validate_namespace_with_size+0x60>
 8016c98:	2302      	movs	r3, #2
 8016c9a:	6023      	str	r3, [r4, #0]
 8016c9c:	e7ee      	b.n	8016c7c <rmw_validate_namespace_with_size+0x60>
 8016c9e:	2301      	movs	r3, #1
 8016ca0:	6023      	str	r3, [r4, #0]
 8016ca2:	e7eb      	b.n	8016c7c <rmw_validate_namespace_with_size+0x60>
 8016ca4:	4a03      	ldr	r2, [pc, #12]	@ (8016cb4 <rmw_validate_namespace_with_size+0x98>)
 8016ca6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016caa:	a802      	add	r0, sp, #8
 8016cac:	f7ff fd0e 	bl	80166cc <rcutils_snprintf>
 8016cb0:	2001      	movs	r0, #1
 8016cb2:	e7d4      	b.n	8016c5e <rmw_validate_namespace_with_size+0x42>
 8016cb4:	0801ae5c 	.word	0x0801ae5c

08016cb8 <rmw_validate_namespace>:
 8016cb8:	b168      	cbz	r0, 8016cd6 <rmw_validate_namespace+0x1e>
 8016cba:	b570      	push	{r4, r5, r6, lr}
 8016cbc:	460d      	mov	r5, r1
 8016cbe:	4616      	mov	r6, r2
 8016cc0:	4604      	mov	r4, r0
 8016cc2:	f7e9 fab7 	bl	8000234 <strlen>
 8016cc6:	4633      	mov	r3, r6
 8016cc8:	4601      	mov	r1, r0
 8016cca:	462a      	mov	r2, r5
 8016ccc:	4620      	mov	r0, r4
 8016cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cd2:	f7ff bfa3 	b.w	8016c1c <rmw_validate_namespace_with_size>
 8016cd6:	200b      	movs	r0, #11
 8016cd8:	4770      	bx	lr
 8016cda:	bf00      	nop

08016cdc <rmw_namespace_validation_result_string>:
 8016cdc:	2807      	cmp	r0, #7
 8016cde:	bf9a      	itte	ls
 8016ce0:	4b02      	ldrls	r3, [pc, #8]	@ (8016cec <rmw_namespace_validation_result_string+0x10>)
 8016ce2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016ce6:	4802      	ldrhi	r0, [pc, #8]	@ (8016cf0 <rmw_namespace_validation_result_string+0x14>)
 8016ce8:	4770      	bx	lr
 8016cea:	bf00      	nop
 8016cec:	0801b61c 	.word	0x0801b61c
 8016cf0:	0801aeac 	.word	0x0801aeac

08016cf4 <rmw_validate_node_name>:
 8016cf4:	2800      	cmp	r0, #0
 8016cf6:	d03b      	beq.n	8016d70 <rmw_validate_node_name+0x7c>
 8016cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cfc:	460d      	mov	r5, r1
 8016cfe:	2900      	cmp	r1, #0
 8016d00:	d038      	beq.n	8016d74 <rmw_validate_node_name+0x80>
 8016d02:	4616      	mov	r6, r2
 8016d04:	4604      	mov	r4, r0
 8016d06:	f7e9 fa95 	bl	8000234 <strlen>
 8016d0a:	b1e0      	cbz	r0, 8016d46 <rmw_validate_node_name+0x52>
 8016d0c:	1e63      	subs	r3, r4, #1
 8016d0e:	eb03 0800 	add.w	r8, r3, r0
 8016d12:	f1c4 0101 	rsb	r1, r4, #1
 8016d16:	18cf      	adds	r7, r1, r3
 8016d18:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8016d1c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8016d20:	f02e 0c20 	bic.w	ip, lr, #32
 8016d24:	2a09      	cmp	r2, #9
 8016d26:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8016d2a:	d914      	bls.n	8016d56 <rmw_validate_node_name+0x62>
 8016d2c:	f1bc 0f19 	cmp.w	ip, #25
 8016d30:	d911      	bls.n	8016d56 <rmw_validate_node_name+0x62>
 8016d32:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8016d36:	d00e      	beq.n	8016d56 <rmw_validate_node_name+0x62>
 8016d38:	2302      	movs	r3, #2
 8016d3a:	602b      	str	r3, [r5, #0]
 8016d3c:	b106      	cbz	r6, 8016d40 <rmw_validate_node_name+0x4c>
 8016d3e:	6037      	str	r7, [r6, #0]
 8016d40:	2000      	movs	r0, #0
 8016d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d46:	2301      	movs	r3, #1
 8016d48:	602b      	str	r3, [r5, #0]
 8016d4a:	2e00      	cmp	r6, #0
 8016d4c:	d0f8      	beq.n	8016d40 <rmw_validate_node_name+0x4c>
 8016d4e:	2000      	movs	r0, #0
 8016d50:	6030      	str	r0, [r6, #0]
 8016d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d56:	4543      	cmp	r3, r8
 8016d58:	d1dd      	bne.n	8016d16 <rmw_validate_node_name+0x22>
 8016d5a:	7822      	ldrb	r2, [r4, #0]
 8016d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8016d94 <rmw_validate_node_name+0xa0>)
 8016d5e:	5cd3      	ldrb	r3, [r2, r3]
 8016d60:	f013 0304 	ands.w	r3, r3, #4
 8016d64:	d110      	bne.n	8016d88 <rmw_validate_node_name+0x94>
 8016d66:	28ff      	cmp	r0, #255	@ 0xff
 8016d68:	d806      	bhi.n	8016d78 <rmw_validate_node_name+0x84>
 8016d6a:	602b      	str	r3, [r5, #0]
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	e7e8      	b.n	8016d42 <rmw_validate_node_name+0x4e>
 8016d70:	200b      	movs	r0, #11
 8016d72:	4770      	bx	lr
 8016d74:	200b      	movs	r0, #11
 8016d76:	e7e4      	b.n	8016d42 <rmw_validate_node_name+0x4e>
 8016d78:	2204      	movs	r2, #4
 8016d7a:	602a      	str	r2, [r5, #0]
 8016d7c:	2e00      	cmp	r6, #0
 8016d7e:	d0df      	beq.n	8016d40 <rmw_validate_node_name+0x4c>
 8016d80:	22fe      	movs	r2, #254	@ 0xfe
 8016d82:	6032      	str	r2, [r6, #0]
 8016d84:	4618      	mov	r0, r3
 8016d86:	e7dc      	b.n	8016d42 <rmw_validate_node_name+0x4e>
 8016d88:	2303      	movs	r3, #3
 8016d8a:	602b      	str	r3, [r5, #0]
 8016d8c:	2e00      	cmp	r6, #0
 8016d8e:	d1de      	bne.n	8016d4e <rmw_validate_node_name+0x5a>
 8016d90:	e7d6      	b.n	8016d40 <rmw_validate_node_name+0x4c>
 8016d92:	bf00      	nop
 8016d94:	0801b757 	.word	0x0801b757

08016d98 <rmw_node_name_validation_result_string>:
 8016d98:	2804      	cmp	r0, #4
 8016d9a:	bf9a      	itte	ls
 8016d9c:	4b02      	ldrls	r3, [pc, #8]	@ (8016da8 <rmw_node_name_validation_result_string+0x10>)
 8016d9e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016da2:	4802      	ldrhi	r0, [pc, #8]	@ (8016dac <rmw_node_name_validation_result_string+0x14>)
 8016da4:	4770      	bx	lr
 8016da6:	bf00      	nop
 8016da8:	0801b63c 	.word	0x0801b63c
 8016dac:	0801b054 	.word	0x0801b054

08016db0 <on_status>:
 8016db0:	b082      	sub	sp, #8
 8016db2:	b002      	add	sp, #8
 8016db4:	4770      	bx	lr
 8016db6:	bf00      	nop

08016db8 <on_topic>:
 8016db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dbc:	4a22      	ldr	r2, [pc, #136]	@ (8016e48 <on_topic+0x90>)
 8016dbe:	b094      	sub	sp, #80	@ 0x50
 8016dc0:	6812      	ldr	r2, [r2, #0]
 8016dc2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016dc4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016dc8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016dcc:	b3c2      	cbz	r2, 8016e40 <on_topic+0x88>
 8016dce:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016dd2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016dd6:	e001      	b.n	8016ddc <on_topic+0x24>
 8016dd8:	6852      	ldr	r2, [r2, #4]
 8016dda:	b38a      	cbz	r2, 8016e40 <on_topic+0x88>
 8016ddc:	6894      	ldr	r4, [r2, #8]
 8016dde:	8aa3      	ldrh	r3, [r4, #20]
 8016de0:	428b      	cmp	r3, r1
 8016de2:	d1f9      	bne.n	8016dd8 <on_topic+0x20>
 8016de4:	7da3      	ldrb	r3, [r4, #22]
 8016de6:	4283      	cmp	r3, r0
 8016de8:	d1f6      	bne.n	8016dd8 <on_topic+0x20>
 8016dea:	2248      	movs	r2, #72	@ 0x48
 8016dec:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016df0:	4668      	mov	r0, sp
 8016df2:	f002 ffce 	bl	8019d92 <memcpy>
 8016df6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016dfa:	cb0c      	ldmia	r3, {r2, r3}
 8016dfc:	4620      	mov	r0, r4
 8016dfe:	f7f7 fcf9 	bl	800e7f4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016e02:	4607      	mov	r7, r0
 8016e04:	b1e0      	cbz	r0, 8016e40 <on_topic+0x88>
 8016e06:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016e0a:	4632      	mov	r2, r6
 8016e0c:	4628      	mov	r0, r5
 8016e0e:	f108 0110 	add.w	r1, r8, #16
 8016e12:	f000 ff69 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8016e16:	b930      	cbnz	r0, 8016e26 <on_topic+0x6e>
 8016e18:	480c      	ldr	r0, [pc, #48]	@ (8016e4c <on_topic+0x94>)
 8016e1a:	4639      	mov	r1, r7
 8016e1c:	b014      	add	sp, #80	@ 0x50
 8016e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e22:	f000 b8bd 	b.w	8016fa0 <put_memory>
 8016e26:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016e2a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016e2e:	f7f7 fadf 	bl	800e3f0 <rmw_uros_epoch_nanos>
 8016e32:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8016e36:	2305      	movs	r3, #5
 8016e38:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016e3c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016e40:	b014      	add	sp, #80	@ 0x50
 8016e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e46:	bf00      	nop
 8016e48:	2000af7c 	.word	0x2000af7c
 8016e4c:	2000af6c 	.word	0x2000af6c

08016e50 <on_request>:
 8016e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e54:	4823      	ldr	r0, [pc, #140]	@ (8016ee4 <on_request+0x94>)
 8016e56:	b094      	sub	sp, #80	@ 0x50
 8016e58:	6800      	ldr	r0, [r0, #0]
 8016e5a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016e5c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016e60:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016e62:	2800      	cmp	r0, #0
 8016e64:	d03b      	beq.n	8016ede <on_request+0x8e>
 8016e66:	461d      	mov	r5, r3
 8016e68:	e001      	b.n	8016e6e <on_request+0x1e>
 8016e6a:	6840      	ldr	r0, [r0, #4]
 8016e6c:	b3b8      	cbz	r0, 8016ede <on_request+0x8e>
 8016e6e:	6884      	ldr	r4, [r0, #8]
 8016e70:	8b21      	ldrh	r1, [r4, #24]
 8016e72:	4291      	cmp	r1, r2
 8016e74:	d1f9      	bne.n	8016e6a <on_request+0x1a>
 8016e76:	2248      	movs	r2, #72	@ 0x48
 8016e78:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016e7c:	4668      	mov	r0, sp
 8016e7e:	f002 ff88 	bl	8019d92 <memcpy>
 8016e82:	f104 0320 	add.w	r3, r4, #32
 8016e86:	cb0c      	ldmia	r3, {r2, r3}
 8016e88:	4620      	mov	r0, r4
 8016e8a:	f7f7 fcb3 	bl	800e7f4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016e8e:	4680      	mov	r8, r0
 8016e90:	b328      	cbz	r0, 8016ede <on_request+0x8e>
 8016e92:	4638      	mov	r0, r7
 8016e94:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016e98:	4632      	mov	r2, r6
 8016e9a:	f107 0110 	add.w	r1, r7, #16
 8016e9e:	f000 ff23 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8016ea2:	b930      	cbnz	r0, 8016eb2 <on_request+0x62>
 8016ea4:	4810      	ldr	r0, [pc, #64]	@ (8016ee8 <on_request+0x98>)
 8016ea6:	4641      	mov	r1, r8
 8016ea8:	b014      	add	sp, #80	@ 0x50
 8016eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016eae:	f000 b877 	b.w	8016fa0 <put_memory>
 8016eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016eb4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016eb8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016ebc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016ec0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ec4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016ec8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016ecc:	f7f7 fa90 	bl	800e3f0 <rmw_uros_epoch_nanos>
 8016ed0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016ed4:	2303      	movs	r3, #3
 8016ed6:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016eda:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016ede:	b014      	add	sp, #80	@ 0x50
 8016ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ee4:	2000af4c 	.word	0x2000af4c
 8016ee8:	2000af6c 	.word	0x2000af6c

08016eec <on_reply>:
 8016eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ef0:	4821      	ldr	r0, [pc, #132]	@ (8016f78 <on_reply+0x8c>)
 8016ef2:	b094      	sub	sp, #80	@ 0x50
 8016ef4:	6800      	ldr	r0, [r0, #0]
 8016ef6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016ef8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016efc:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016efe:	b3b8      	cbz	r0, 8016f70 <on_reply+0x84>
 8016f00:	461d      	mov	r5, r3
 8016f02:	e001      	b.n	8016f08 <on_reply+0x1c>
 8016f04:	6840      	ldr	r0, [r0, #4]
 8016f06:	b398      	cbz	r0, 8016f70 <on_reply+0x84>
 8016f08:	6884      	ldr	r4, [r0, #8]
 8016f0a:	8b21      	ldrh	r1, [r4, #24]
 8016f0c:	4291      	cmp	r1, r2
 8016f0e:	d1f9      	bne.n	8016f04 <on_reply+0x18>
 8016f10:	2248      	movs	r2, #72	@ 0x48
 8016f12:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016f16:	4668      	mov	r0, sp
 8016f18:	f002 ff3b 	bl	8019d92 <memcpy>
 8016f1c:	f104 0320 	add.w	r3, r4, #32
 8016f20:	cb0c      	ldmia	r3, {r2, r3}
 8016f22:	4620      	mov	r0, r4
 8016f24:	f7f7 fc66 	bl	800e7f4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016f28:	4680      	mov	r8, r0
 8016f2a:	b308      	cbz	r0, 8016f70 <on_reply+0x84>
 8016f2c:	4638      	mov	r0, r7
 8016f2e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016f32:	4632      	mov	r2, r6
 8016f34:	f107 0110 	add.w	r1, r7, #16
 8016f38:	f000 fed6 	bl	8017ce8 <ucdr_deserialize_array_uint8_t>
 8016f3c:	b930      	cbnz	r0, 8016f4c <on_reply+0x60>
 8016f3e:	480f      	ldr	r0, [pc, #60]	@ (8016f7c <on_reply+0x90>)
 8016f40:	4641      	mov	r1, r8
 8016f42:	b014      	add	sp, #80	@ 0x50
 8016f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f48:	f000 b82a 	b.w	8016fa0 <put_memory>
 8016f4c:	2200      	movs	r2, #0
 8016f4e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8016f52:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016f56:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016f5a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016f5e:	f7f7 fa47 	bl	800e3f0 <rmw_uros_epoch_nanos>
 8016f62:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016f66:	2304      	movs	r3, #4
 8016f68:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016f6c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016f70:	b014      	add	sp, #80	@ 0x50
 8016f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f76:	bf00      	nop
 8016f78:	2000665c 	.word	0x2000665c
 8016f7c:	2000af6c 	.word	0x2000af6c

08016f80 <get_memory>:
 8016f80:	4603      	mov	r3, r0
 8016f82:	6840      	ldr	r0, [r0, #4]
 8016f84:	b158      	cbz	r0, 8016f9e <get_memory+0x1e>
 8016f86:	6842      	ldr	r2, [r0, #4]
 8016f88:	605a      	str	r2, [r3, #4]
 8016f8a:	b10a      	cbz	r2, 8016f90 <get_memory+0x10>
 8016f8c:	2100      	movs	r1, #0
 8016f8e:	6011      	str	r1, [r2, #0]
 8016f90:	681a      	ldr	r2, [r3, #0]
 8016f92:	6042      	str	r2, [r0, #4]
 8016f94:	b102      	cbz	r2, 8016f98 <get_memory+0x18>
 8016f96:	6010      	str	r0, [r2, #0]
 8016f98:	2200      	movs	r2, #0
 8016f9a:	6002      	str	r2, [r0, #0]
 8016f9c:	6018      	str	r0, [r3, #0]
 8016f9e:	4770      	bx	lr

08016fa0 <put_memory>:
 8016fa0:	680b      	ldr	r3, [r1, #0]
 8016fa2:	b10b      	cbz	r3, 8016fa8 <put_memory+0x8>
 8016fa4:	684a      	ldr	r2, [r1, #4]
 8016fa6:	605a      	str	r2, [r3, #4]
 8016fa8:	684a      	ldr	r2, [r1, #4]
 8016faa:	b102      	cbz	r2, 8016fae <put_memory+0xe>
 8016fac:	6013      	str	r3, [r2, #0]
 8016fae:	6803      	ldr	r3, [r0, #0]
 8016fb0:	428b      	cmp	r3, r1
 8016fb2:	6843      	ldr	r3, [r0, #4]
 8016fb4:	bf08      	it	eq
 8016fb6:	6002      	streq	r2, [r0, #0]
 8016fb8:	604b      	str	r3, [r1, #4]
 8016fba:	b103      	cbz	r3, 8016fbe <put_memory+0x1e>
 8016fbc:	6019      	str	r1, [r3, #0]
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	600b      	str	r3, [r1, #0]
 8016fc2:	6041      	str	r1, [r0, #4]
 8016fc4:	4770      	bx	lr
 8016fc6:	bf00      	nop

08016fc8 <rmw_destroy_client>:
 8016fc8:	b570      	push	{r4, r5, r6, lr}
 8016fca:	b128      	cbz	r0, 8016fd8 <rmw_destroy_client+0x10>
 8016fcc:	4604      	mov	r4, r0
 8016fce:	6800      	ldr	r0, [r0, #0]
 8016fd0:	460d      	mov	r5, r1
 8016fd2:	f7f7 fd83 	bl	800eadc <is_uxrce_rmw_identifier_valid>
 8016fd6:	b910      	cbnz	r0, 8016fde <rmw_destroy_client+0x16>
 8016fd8:	2401      	movs	r4, #1
 8016fda:	4620      	mov	r0, r4
 8016fdc:	bd70      	pop	{r4, r5, r6, pc}
 8016fde:	6863      	ldr	r3, [r4, #4]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d0f9      	beq.n	8016fd8 <rmw_destroy_client+0x10>
 8016fe4:	2d00      	cmp	r5, #0
 8016fe6:	d0f7      	beq.n	8016fd8 <rmw_destroy_client+0x10>
 8016fe8:	6828      	ldr	r0, [r5, #0]
 8016fea:	f7f7 fd77 	bl	800eadc <is_uxrce_rmw_identifier_valid>
 8016fee:	2800      	cmp	r0, #0
 8016ff0:	d0f2      	beq.n	8016fd8 <rmw_destroy_client+0x10>
 8016ff2:	686e      	ldr	r6, [r5, #4]
 8016ff4:	2e00      	cmp	r6, #0
 8016ff6:	d0ef      	beq.n	8016fd8 <rmw_destroy_client+0x10>
 8016ff8:	6864      	ldr	r4, [r4, #4]
 8016ffa:	6932      	ldr	r2, [r6, #16]
 8016ffc:	6920      	ldr	r0, [r4, #16]
 8016ffe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017002:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017006:	6819      	ldr	r1, [r3, #0]
 8017008:	f7f9 fc24 	bl	8010854 <uxr_buffer_cancel_data>
 801700c:	4602      	mov	r2, r0
 801700e:	6920      	ldr	r0, [r4, #16]
 8017010:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017014:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017018:	f7f7 fce0 	bl	800e9dc <run_xrce_session>
 801701c:	6920      	ldr	r0, [r4, #16]
 801701e:	6932      	ldr	r2, [r6, #16]
 8017020:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017024:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017028:	6819      	ldr	r1, [r3, #0]
 801702a:	f7f9 f9c7 	bl	80103bc <uxr_buffer_delete_entity>
 801702e:	4602      	mov	r2, r0
 8017030:	6920      	ldr	r0, [r4, #16]
 8017032:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017036:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801703a:	f7f7 fccf 	bl	800e9dc <run_xrce_session>
 801703e:	2800      	cmp	r0, #0
 8017040:	4628      	mov	r0, r5
 8017042:	bf14      	ite	ne
 8017044:	2400      	movne	r4, #0
 8017046:	2402      	moveq	r4, #2
 8017048:	f7f7 fbb2 	bl	800e7b0 <rmw_uxrce_fini_client_memory>
 801704c:	e7c5      	b.n	8016fda <rmw_destroy_client+0x12>
 801704e:	bf00      	nop

08017050 <rmw_get_implementation_identifier>:
 8017050:	4b01      	ldr	r3, [pc, #4]	@ (8017058 <rmw_get_implementation_identifier+0x8>)
 8017052:	6818      	ldr	r0, [r3, #0]
 8017054:	4770      	bx	lr
 8017056:	bf00      	nop
 8017058:	0801b650 	.word	0x0801b650

0801705c <create_topic>:
 801705c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017060:	4605      	mov	r5, r0
 8017062:	b084      	sub	sp, #16
 8017064:	4822      	ldr	r0, [pc, #136]	@ (80170f0 <create_topic+0x94>)
 8017066:	460f      	mov	r7, r1
 8017068:	4616      	mov	r6, r2
 801706a:	f7ff ff89 	bl	8016f80 <get_memory>
 801706e:	4604      	mov	r4, r0
 8017070:	2800      	cmp	r0, #0
 8017072:	d039      	beq.n	80170e8 <create_topic+0x8c>
 8017074:	692b      	ldr	r3, [r5, #16]
 8017076:	6884      	ldr	r4, [r0, #8]
 8017078:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80170f8 <create_topic+0x9c>
 801707c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017080:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8017084:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8017088:	1c42      	adds	r2, r0, #1
 801708a:	2102      	movs	r1, #2
 801708c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8017090:	f7f9 fbb0 	bl	80107f4 <uxr_object_id>
 8017094:	223c      	movs	r2, #60	@ 0x3c
 8017096:	6120      	str	r0, [r4, #16]
 8017098:	4641      	mov	r1, r8
 801709a:	4638      	mov	r0, r7
 801709c:	f7f7 fd04 	bl	800eaa8 <generate_topic_name>
 80170a0:	b1f0      	cbz	r0, 80170e0 <create_topic+0x84>
 80170a2:	4f14      	ldr	r7, [pc, #80]	@ (80170f4 <create_topic+0x98>)
 80170a4:	4630      	mov	r0, r6
 80170a6:	2264      	movs	r2, #100	@ 0x64
 80170a8:	4639      	mov	r1, r7
 80170aa:	f7f7 fccd 	bl	800ea48 <generate_type_name>
 80170ae:	b1b8      	cbz	r0, 80170e0 <create_topic+0x84>
 80170b0:	6928      	ldr	r0, [r5, #16]
 80170b2:	2306      	movs	r3, #6
 80170b4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80170b8:	f8cd 8000 	str.w	r8, [sp]
 80170bc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80170c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80170c4:	6811      	ldr	r1, [r2, #0]
 80170c6:	696b      	ldr	r3, [r5, #20]
 80170c8:	6922      	ldr	r2, [r4, #16]
 80170ca:	f7f9 f9f5 	bl	80104b8 <uxr_buffer_create_topic_bin>
 80170ce:	4602      	mov	r2, r0
 80170d0:	6928      	ldr	r0, [r5, #16]
 80170d2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80170d6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80170da:	f7f7 fc7f 	bl	800e9dc <run_xrce_session>
 80170de:	b918      	cbnz	r0, 80170e8 <create_topic+0x8c>
 80170e0:	4620      	mov	r0, r4
 80170e2:	f7f7 fb7b 	bl	800e7dc <rmw_uxrce_fini_topic_memory>
 80170e6:	2400      	movs	r4, #0
 80170e8:	4620      	mov	r0, r4
 80170ea:	b004      	add	sp, #16
 80170ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170f0:	2000af8c 	.word	0x2000af8c
 80170f4:	2000b00c 	.word	0x2000b00c
 80170f8:	2000afd0 	.word	0x2000afd0

080170fc <destroy_topic>:
 80170fc:	b538      	push	{r3, r4, r5, lr}
 80170fe:	6985      	ldr	r5, [r0, #24]
 8017100:	b1d5      	cbz	r5, 8017138 <destroy_topic+0x3c>
 8017102:	4604      	mov	r4, r0
 8017104:	6928      	ldr	r0, [r5, #16]
 8017106:	6922      	ldr	r2, [r4, #16]
 8017108:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801710c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017110:	6819      	ldr	r1, [r3, #0]
 8017112:	f7f9 f953 	bl	80103bc <uxr_buffer_delete_entity>
 8017116:	4602      	mov	r2, r0
 8017118:	6928      	ldr	r0, [r5, #16]
 801711a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801711e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017122:	f7f7 fc5b 	bl	800e9dc <run_xrce_session>
 8017126:	2800      	cmp	r0, #0
 8017128:	4620      	mov	r0, r4
 801712a:	bf14      	ite	ne
 801712c:	2400      	movne	r4, #0
 801712e:	2402      	moveq	r4, #2
 8017130:	f7f7 fb54 	bl	800e7dc <rmw_uxrce_fini_topic_memory>
 8017134:	4620      	mov	r0, r4
 8017136:	bd38      	pop	{r3, r4, r5, pc}
 8017138:	2401      	movs	r4, #1
 801713a:	4620      	mov	r0, r4
 801713c:	bd38      	pop	{r3, r4, r5, pc}
 801713e:	bf00      	nop

08017140 <rmw_send_request>:
 8017140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017144:	4604      	mov	r4, r0
 8017146:	6800      	ldr	r0, [r0, #0]
 8017148:	b08b      	sub	sp, #44	@ 0x2c
 801714a:	460e      	mov	r6, r1
 801714c:	4615      	mov	r5, r2
 801714e:	b128      	cbz	r0, 801715c <rmw_send_request+0x1c>
 8017150:	4b21      	ldr	r3, [pc, #132]	@ (80171d8 <rmw_send_request+0x98>)
 8017152:	6819      	ldr	r1, [r3, #0]
 8017154:	f7e9 f864 	bl	8000220 <strcmp>
 8017158:	2800      	cmp	r0, #0
 801715a:	d139      	bne.n	80171d0 <rmw_send_request+0x90>
 801715c:	6864      	ldr	r4, [r4, #4]
 801715e:	6963      	ldr	r3, [r4, #20]
 8017160:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8017164:	689b      	ldr	r3, [r3, #8]
 8017166:	4798      	blx	r3
 8017168:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801716c:	4630      	mov	r0, r6
 801716e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017172:	4798      	blx	r3
 8017174:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017178:	9000      	str	r0, [sp, #0]
 801717a:	6922      	ldr	r2, [r4, #16]
 801717c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801717e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8017182:	ab02      	add	r3, sp, #8
 8017184:	f7fb fc0e 	bl	80129a4 <uxr_prepare_output_stream>
 8017188:	2700      	movs	r7, #0
 801718a:	6028      	str	r0, [r5, #0]
 801718c:	606f      	str	r7, [r5, #4]
 801718e:	b198      	cbz	r0, 80171b8 <rmw_send_request+0x78>
 8017190:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017194:	a902      	add	r1, sp, #8
 8017196:	4630      	mov	r0, r6
 8017198:	4798      	blx	r3
 801719a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801719e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80171a2:	2b01      	cmp	r3, #1
 80171a4:	d00c      	beq.n	80171c0 <rmw_send_request+0x80>
 80171a6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80171a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80171ac:	f7fa f928 	bl	8011400 <uxr_run_session_until_confirm_delivery>
 80171b0:	4638      	mov	r0, r7
 80171b2:	b00b      	add	sp, #44	@ 0x2c
 80171b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171b8:	2001      	movs	r0, #1
 80171ba:	b00b      	add	sp, #44	@ 0x2c
 80171bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80171c4:	f7f9 fd5c 	bl	8010c80 <uxr_flash_output_streams>
 80171c8:	4638      	mov	r0, r7
 80171ca:	b00b      	add	sp, #44	@ 0x2c
 80171cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171d0:	200c      	movs	r0, #12
 80171d2:	b00b      	add	sp, #44	@ 0x2c
 80171d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171d8:	0801b650 	.word	0x0801b650

080171dc <rmw_take_request>:
 80171dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80171e0:	4605      	mov	r5, r0
 80171e2:	6800      	ldr	r0, [r0, #0]
 80171e4:	b089      	sub	sp, #36	@ 0x24
 80171e6:	460c      	mov	r4, r1
 80171e8:	4690      	mov	r8, r2
 80171ea:	461e      	mov	r6, r3
 80171ec:	b128      	cbz	r0, 80171fa <rmw_take_request+0x1e>
 80171ee:	4b28      	ldr	r3, [pc, #160]	@ (8017290 <rmw_take_request+0xb4>)
 80171f0:	6819      	ldr	r1, [r3, #0]
 80171f2:	f7e9 f815 	bl	8000220 <strcmp>
 80171f6:	2800      	cmp	r0, #0
 80171f8:	d146      	bne.n	8017288 <rmw_take_request+0xac>
 80171fa:	b10e      	cbz	r6, 8017200 <rmw_take_request+0x24>
 80171fc:	2300      	movs	r3, #0
 80171fe:	7033      	strb	r3, [r6, #0]
 8017200:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017204:	f7f7 fb6c 	bl	800e8e0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017208:	4648      	mov	r0, r9
 801720a:	f7f7 fb43 	bl	800e894 <rmw_uxrce_find_static_input_buffer_by_owner>
 801720e:	4607      	mov	r7, r0
 8017210:	b3b0      	cbz	r0, 8017280 <rmw_take_request+0xa4>
 8017212:	6885      	ldr	r5, [r0, #8]
 8017214:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8017218:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801721c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017220:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8017224:	7423      	strb	r3, [r4, #16]
 8017226:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801722a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801722e:	74e2      	strb	r2, [r4, #19]
 8017230:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017234:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8017238:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801723c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8017240:	61e1      	str	r1, [r4, #28]
 8017242:	6162      	str	r2, [r4, #20]
 8017244:	61a3      	str	r3, [r4, #24]
 8017246:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801724a:	689b      	ldr	r3, [r3, #8]
 801724c:	4798      	blx	r3
 801724e:	6844      	ldr	r4, [r0, #4]
 8017250:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8017254:	f105 0110 	add.w	r1, r5, #16
 8017258:	4668      	mov	r0, sp
 801725a:	f7f8 ffbb 	bl	80101d4 <ucdr_init_buffer>
 801725e:	68e3      	ldr	r3, [r4, #12]
 8017260:	4641      	mov	r1, r8
 8017262:	4668      	mov	r0, sp
 8017264:	4798      	blx	r3
 8017266:	4639      	mov	r1, r7
 8017268:	4604      	mov	r4, r0
 801726a:	480a      	ldr	r0, [pc, #40]	@ (8017294 <rmw_take_request+0xb8>)
 801726c:	f7ff fe98 	bl	8016fa0 <put_memory>
 8017270:	b106      	cbz	r6, 8017274 <rmw_take_request+0x98>
 8017272:	7034      	strb	r4, [r6, #0]
 8017274:	f084 0001 	eor.w	r0, r4, #1
 8017278:	b2c0      	uxtb	r0, r0
 801727a:	b009      	add	sp, #36	@ 0x24
 801727c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017280:	2001      	movs	r0, #1
 8017282:	b009      	add	sp, #36	@ 0x24
 8017284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017288:	200c      	movs	r0, #12
 801728a:	b009      	add	sp, #36	@ 0x24
 801728c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017290:	0801b650 	.word	0x0801b650
 8017294:	2000af6c 	.word	0x2000af6c

08017298 <rmw_send_response>:
 8017298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801729a:	4605      	mov	r5, r0
 801729c:	6800      	ldr	r0, [r0, #0]
 801729e:	b091      	sub	sp, #68	@ 0x44
 80172a0:	460c      	mov	r4, r1
 80172a2:	4616      	mov	r6, r2
 80172a4:	b128      	cbz	r0, 80172b2 <rmw_send_response+0x1a>
 80172a6:	4b29      	ldr	r3, [pc, #164]	@ (801734c <rmw_send_response+0xb4>)
 80172a8:	6819      	ldr	r1, [r3, #0]
 80172aa:	f7e8 ffb9 	bl	8000220 <strcmp>
 80172ae:	2800      	cmp	r0, #0
 80172b0:	d141      	bne.n	8017336 <rmw_send_response+0x9e>
 80172b2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80172b6:	9306      	str	r3, [sp, #24]
 80172b8:	4623      	mov	r3, r4
 80172ba:	9207      	str	r2, [sp, #28]
 80172bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172c0:	686d      	ldr	r5, [r5, #4]
 80172c2:	789b      	ldrb	r3, [r3, #2]
 80172c4:	68a1      	ldr	r1, [r4, #8]
 80172c6:	f88d 2017 	strb.w	r2, [sp, #23]
 80172ca:	f88d 3016 	strb.w	r3, [sp, #22]
 80172ce:	68e2      	ldr	r2, [r4, #12]
 80172d0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80172d4:	6860      	ldr	r0, [r4, #4]
 80172d6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80172da:	ab02      	add	r3, sp, #8
 80172dc:	c307      	stmia	r3!, {r0, r1, r2}
 80172de:	696b      	ldr	r3, [r5, #20]
 80172e0:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80172e2:	68db      	ldr	r3, [r3, #12]
 80172e4:	4798      	blx	r3
 80172e6:	6844      	ldr	r4, [r0, #4]
 80172e8:	4630      	mov	r0, r6
 80172ea:	6923      	ldr	r3, [r4, #16]
 80172ec:	4798      	blx	r3
 80172ee:	f100 0318 	add.w	r3, r0, #24
 80172f2:	6938      	ldr	r0, [r7, #16]
 80172f4:	9300      	str	r3, [sp, #0]
 80172f6:	692a      	ldr	r2, [r5, #16]
 80172f8:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80172fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80172fe:	ab08      	add	r3, sp, #32
 8017300:	f7fb fb50 	bl	80129a4 <uxr_prepare_output_stream>
 8017304:	b910      	cbnz	r0, 801730c <rmw_send_response+0x74>
 8017306:	2001      	movs	r0, #1
 8017308:	b011      	add	sp, #68	@ 0x44
 801730a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801730c:	a902      	add	r1, sp, #8
 801730e:	a808      	add	r0, sp, #32
 8017310:	f7fc fba2 	bl	8013a58 <uxr_serialize_SampleIdentity>
 8017314:	68a3      	ldr	r3, [r4, #8]
 8017316:	a908      	add	r1, sp, #32
 8017318:	4630      	mov	r0, r6
 801731a:	4798      	blx	r3
 801731c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017320:	6938      	ldr	r0, [r7, #16]
 8017322:	2b01      	cmp	r3, #1
 8017324:	d00a      	beq.n	801733c <rmw_send_response+0xa4>
 8017326:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017328:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801732c:	f7fa f868 	bl	8011400 <uxr_run_session_until_confirm_delivery>
 8017330:	2000      	movs	r0, #0
 8017332:	b011      	add	sp, #68	@ 0x44
 8017334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017336:	200c      	movs	r0, #12
 8017338:	b011      	add	sp, #68	@ 0x44
 801733a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801733c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017340:	f7f9 fc9e 	bl	8010c80 <uxr_flash_output_streams>
 8017344:	2000      	movs	r0, #0
 8017346:	b011      	add	sp, #68	@ 0x44
 8017348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801734a:	bf00      	nop
 801734c:	0801b650 	.word	0x0801b650

08017350 <rmw_take_response>:
 8017350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017354:	4604      	mov	r4, r0
 8017356:	6800      	ldr	r0, [r0, #0]
 8017358:	b088      	sub	sp, #32
 801735a:	4688      	mov	r8, r1
 801735c:	4617      	mov	r7, r2
 801735e:	461d      	mov	r5, r3
 8017360:	b120      	cbz	r0, 801736c <rmw_take_response+0x1c>
 8017362:	4b1e      	ldr	r3, [pc, #120]	@ (80173dc <rmw_take_response+0x8c>)
 8017364:	6819      	ldr	r1, [r3, #0]
 8017366:	f7e8 ff5b 	bl	8000220 <strcmp>
 801736a:	bb78      	cbnz	r0, 80173cc <rmw_take_response+0x7c>
 801736c:	b10d      	cbz	r5, 8017372 <rmw_take_response+0x22>
 801736e:	2300      	movs	r3, #0
 8017370:	702b      	strb	r3, [r5, #0]
 8017372:	6864      	ldr	r4, [r4, #4]
 8017374:	f7f7 fab4 	bl	800e8e0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017378:	4620      	mov	r0, r4
 801737a:	f7f7 fa8b 	bl	800e894 <rmw_uxrce_find_static_input_buffer_by_owner>
 801737e:	4606      	mov	r6, r0
 8017380:	b340      	cbz	r0, 80173d4 <rmw_take_response+0x84>
 8017382:	6963      	ldr	r3, [r4, #20]
 8017384:	6884      	ldr	r4, [r0, #8]
 8017386:	68db      	ldr	r3, [r3, #12]
 8017388:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801738c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8017390:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8017394:	4798      	blx	r3
 8017396:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801739a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801739e:	f104 0110 	add.w	r1, r4, #16
 80173a2:	4668      	mov	r0, sp
 80173a4:	f7f8 ff16 	bl	80101d4 <ucdr_init_buffer>
 80173a8:	4639      	mov	r1, r7
 80173aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80173ae:	4668      	mov	r0, sp
 80173b0:	4798      	blx	r3
 80173b2:	4631      	mov	r1, r6
 80173b4:	4604      	mov	r4, r0
 80173b6:	480a      	ldr	r0, [pc, #40]	@ (80173e0 <rmw_take_response+0x90>)
 80173b8:	f7ff fdf2 	bl	8016fa0 <put_memory>
 80173bc:	b105      	cbz	r5, 80173c0 <rmw_take_response+0x70>
 80173be:	702c      	strb	r4, [r5, #0]
 80173c0:	f084 0001 	eor.w	r0, r4, #1
 80173c4:	b2c0      	uxtb	r0, r0
 80173c6:	b008      	add	sp, #32
 80173c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173cc:	200c      	movs	r0, #12
 80173ce:	b008      	add	sp, #32
 80173d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173d4:	2001      	movs	r0, #1
 80173d6:	b008      	add	sp, #32
 80173d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173dc:	0801b650 	.word	0x0801b650
 80173e0:	2000af6c 	.word	0x2000af6c

080173e4 <rmw_take_with_info>:
 80173e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173e6:	4604      	mov	r4, r0
 80173e8:	6800      	ldr	r0, [r0, #0]
 80173ea:	b089      	sub	sp, #36	@ 0x24
 80173ec:	460f      	mov	r7, r1
 80173ee:	4615      	mov	r5, r2
 80173f0:	b128      	cbz	r0, 80173fe <rmw_take_with_info+0x1a>
 80173f2:	4b24      	ldr	r3, [pc, #144]	@ (8017484 <rmw_take_with_info+0xa0>)
 80173f4:	6819      	ldr	r1, [r3, #0]
 80173f6:	f7e8 ff13 	bl	8000220 <strcmp>
 80173fa:	2800      	cmp	r0, #0
 80173fc:	d13e      	bne.n	801747c <rmw_take_with_info+0x98>
 80173fe:	b305      	cbz	r5, 8017442 <rmw_take_with_info+0x5e>
 8017400:	6864      	ldr	r4, [r4, #4]
 8017402:	2300      	movs	r3, #0
 8017404:	702b      	strb	r3, [r5, #0]
 8017406:	f7f7 fa6b 	bl	800e8e0 <rmw_uxrce_clean_expired_static_input_buffer>
 801740a:	4620      	mov	r0, r4
 801740c:	f7f7 fa42 	bl	800e894 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017410:	4606      	mov	r6, r0
 8017412:	b1f0      	cbz	r0, 8017452 <rmw_take_with_info+0x6e>
 8017414:	6881      	ldr	r1, [r0, #8]
 8017416:	4668      	mov	r0, sp
 8017418:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801741c:	3110      	adds	r1, #16
 801741e:	f7f8 fed9 	bl	80101d4 <ucdr_init_buffer>
 8017422:	69a3      	ldr	r3, [r4, #24]
 8017424:	4639      	mov	r1, r7
 8017426:	68db      	ldr	r3, [r3, #12]
 8017428:	4668      	mov	r0, sp
 801742a:	4798      	blx	r3
 801742c:	4631      	mov	r1, r6
 801742e:	4604      	mov	r4, r0
 8017430:	4815      	ldr	r0, [pc, #84]	@ (8017488 <rmw_take_with_info+0xa4>)
 8017432:	f7ff fdb5 	bl	8016fa0 <put_memory>
 8017436:	702c      	strb	r4, [r5, #0]
 8017438:	f084 0001 	eor.w	r0, r4, #1
 801743c:	b2c0      	uxtb	r0, r0
 801743e:	b009      	add	sp, #36	@ 0x24
 8017440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017442:	6864      	ldr	r4, [r4, #4]
 8017444:	f7f7 fa4c 	bl	800e8e0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017448:	4620      	mov	r0, r4
 801744a:	f7f7 fa23 	bl	800e894 <rmw_uxrce_find_static_input_buffer_by_owner>
 801744e:	4605      	mov	r5, r0
 8017450:	b910      	cbnz	r0, 8017458 <rmw_take_with_info+0x74>
 8017452:	2001      	movs	r0, #1
 8017454:	b009      	add	sp, #36	@ 0x24
 8017456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017458:	68a9      	ldr	r1, [r5, #8]
 801745a:	4668      	mov	r0, sp
 801745c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017460:	3110      	adds	r1, #16
 8017462:	f7f8 feb7 	bl	80101d4 <ucdr_init_buffer>
 8017466:	69a3      	ldr	r3, [r4, #24]
 8017468:	4639      	mov	r1, r7
 801746a:	68db      	ldr	r3, [r3, #12]
 801746c:	4668      	mov	r0, sp
 801746e:	4798      	blx	r3
 8017470:	4629      	mov	r1, r5
 8017472:	4604      	mov	r4, r0
 8017474:	4804      	ldr	r0, [pc, #16]	@ (8017488 <rmw_take_with_info+0xa4>)
 8017476:	f7ff fd93 	bl	8016fa0 <put_memory>
 801747a:	e7dd      	b.n	8017438 <rmw_take_with_info+0x54>
 801747c:	200c      	movs	r0, #12
 801747e:	b009      	add	sp, #36	@ 0x24
 8017480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017482:	bf00      	nop
 8017484:	0801b650 	.word	0x0801b650
 8017488:	2000af6c 	.word	0x2000af6c

0801748c <rmw_wait>:
 801748c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017490:	b089      	sub	sp, #36	@ 0x24
 8017492:	4605      	mov	r5, r0
 8017494:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017496:	460e      	mov	r6, r1
 8017498:	4698      	mov	r8, r3
 801749a:	4691      	mov	r9, r2
 801749c:	2a00      	cmp	r2, #0
 801749e:	f000 810a 	beq.w	80176b6 <rmw_wait+0x22a>
 80174a2:	b16c      	cbz	r4, 80174c0 <rmw_wait+0x34>
 80174a4:	4bae      	ldr	r3, [pc, #696]	@ (8017760 <rmw_wait+0x2d4>)
 80174a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80174a8:	af04      	add	r7, sp, #16
 80174aa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80174ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80174b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80174b6:	f7ff faaf 	bl	8016a18 <rmw_time_equal>
 80174ba:	2800      	cmp	r0, #0
 80174bc:	f000 8127 	beq.w	801770e <rmw_wait+0x282>
 80174c0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80174c4:	f7f7 fa0c 	bl	800e8e0 <rmw_uxrce_clean_expired_static_input_buffer>
 80174c8:	4ba6      	ldr	r3, [pc, #664]	@ (8017764 <rmw_wait+0x2d8>)
 80174ca:	681c      	ldr	r4, [r3, #0]
 80174cc:	b14c      	cbz	r4, 80174e2 <rmw_wait+0x56>
 80174ce:	4623      	mov	r3, r4
 80174d0:	2100      	movs	r1, #0
 80174d2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80174d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80174da:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d1f7      	bne.n	80174d2 <rmw_wait+0x46>
 80174e2:	f1b9 0f00 	cmp.w	r9, #0
 80174e6:	d011      	beq.n	801750c <rmw_wait+0x80>
 80174e8:	f8d9 1000 	ldr.w	r1, [r9]
 80174ec:	b171      	cbz	r1, 801750c <rmw_wait+0x80>
 80174ee:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80174f2:	2300      	movs	r3, #0
 80174f4:	2001      	movs	r0, #1
 80174f6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80174fa:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80174fc:	6912      	ldr	r2, [r2, #16]
 80174fe:	3301      	adds	r3, #1
 8017500:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017504:	4299      	cmp	r1, r3
 8017506:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801750a:	d1f4      	bne.n	80174f6 <rmw_wait+0x6a>
 801750c:	f1b8 0f00 	cmp.w	r8, #0
 8017510:	d011      	beq.n	8017536 <rmw_wait+0xaa>
 8017512:	f8d8 1000 	ldr.w	r1, [r8]
 8017516:	b171      	cbz	r1, 8017536 <rmw_wait+0xaa>
 8017518:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801751c:	2300      	movs	r3, #0
 801751e:	2001      	movs	r0, #1
 8017520:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017524:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017526:	6912      	ldr	r2, [r2, #16]
 8017528:	3301      	adds	r3, #1
 801752a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801752e:	4299      	cmp	r1, r3
 8017530:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017534:	d1f4      	bne.n	8017520 <rmw_wait+0x94>
 8017536:	b185      	cbz	r5, 801755a <rmw_wait+0xce>
 8017538:	6829      	ldr	r1, [r5, #0]
 801753a:	b171      	cbz	r1, 801755a <rmw_wait+0xce>
 801753c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017540:	2300      	movs	r3, #0
 8017542:	2001      	movs	r0, #1
 8017544:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017548:	6a12      	ldr	r2, [r2, #32]
 801754a:	6912      	ldr	r2, [r2, #16]
 801754c:	3301      	adds	r3, #1
 801754e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017552:	4299      	cmp	r1, r3
 8017554:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017558:	d1f4      	bne.n	8017544 <rmw_wait+0xb8>
 801755a:	b34c      	cbz	r4, 80175b0 <rmw_wait+0x124>
 801755c:	4622      	mov	r2, r4
 801755e:	2300      	movs	r3, #0
 8017560:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017564:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017568:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801756c:	440b      	add	r3, r1
 801756e:	b2db      	uxtb	r3, r3
 8017570:	2a00      	cmp	r2, #0
 8017572:	d1f5      	bne.n	8017560 <rmw_wait+0xd4>
 8017574:	2b00      	cmp	r3, #0
 8017576:	f000 8084 	beq.w	8017682 <rmw_wait+0x1f6>
 801757a:	1c7a      	adds	r2, r7, #1
 801757c:	d00d      	beq.n	801759a <rmw_wait+0x10e>
 801757e:	ee07 7a90 	vmov	s15, r7
 8017582:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017586:	ee07 3a90 	vmov	s15, r3
 801758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801758e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017592:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017596:	ee17 7a90 	vmov	r7, s15
 801759a:	68a0      	ldr	r0, [r4, #8]
 801759c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80175a0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	f040 8090 	bne.w	80176ca <rmw_wait+0x23e>
 80175aa:	6864      	ldr	r4, [r4, #4]
 80175ac:	2c00      	cmp	r4, #0
 80175ae:	d1f4      	bne.n	801759a <rmw_wait+0x10e>
 80175b0:	f1b9 0f00 	cmp.w	r9, #0
 80175b4:	f000 80bc 	beq.w	8017730 <rmw_wait+0x2a4>
 80175b8:	f8d9 7000 	ldr.w	r7, [r9]
 80175bc:	2f00      	cmp	r7, #0
 80175be:	f000 808e 	beq.w	80176de <rmw_wait+0x252>
 80175c2:	2400      	movs	r4, #0
 80175c4:	4627      	mov	r7, r4
 80175c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80175ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80175ce:	f7f7 f961 	bl	800e894 <rmw_uxrce_find_static_input_buffer_by_owner>
 80175d2:	2800      	cmp	r0, #0
 80175d4:	d05f      	beq.n	8017696 <rmw_wait+0x20a>
 80175d6:	f8d9 3000 	ldr.w	r3, [r9]
 80175da:	3401      	adds	r4, #1
 80175dc:	42a3      	cmp	r3, r4
 80175de:	f04f 0701 	mov.w	r7, #1
 80175e2:	d8f0      	bhi.n	80175c6 <rmw_wait+0x13a>
 80175e4:	f1b8 0f00 	cmp.w	r8, #0
 80175e8:	d012      	beq.n	8017610 <rmw_wait+0x184>
 80175ea:	f8d8 3000 	ldr.w	r3, [r8]
 80175ee:	b17b      	cbz	r3, 8017610 <rmw_wait+0x184>
 80175f0:	2400      	movs	r4, #0
 80175f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80175f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80175fa:	f7f7 f94b 	bl	800e894 <rmw_uxrce_find_static_input_buffer_by_owner>
 80175fe:	2800      	cmp	r0, #0
 8017600:	d051      	beq.n	80176a6 <rmw_wait+0x21a>
 8017602:	f8d8 3000 	ldr.w	r3, [r8]
 8017606:	3401      	adds	r4, #1
 8017608:	42a3      	cmp	r3, r4
 801760a:	f04f 0701 	mov.w	r7, #1
 801760e:	d8f0      	bhi.n	80175f2 <rmw_wait+0x166>
 8017610:	b1dd      	cbz	r5, 801764a <rmw_wait+0x1be>
 8017612:	682b      	ldr	r3, [r5, #0]
 8017614:	b1cb      	cbz	r3, 801764a <rmw_wait+0x1be>
 8017616:	2400      	movs	r4, #0
 8017618:	686b      	ldr	r3, [r5, #4]
 801761a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801761e:	f7f7 f939 	bl	800e894 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017622:	b158      	cbz	r0, 801763c <rmw_wait+0x1b0>
 8017624:	682b      	ldr	r3, [r5, #0]
 8017626:	3401      	adds	r4, #1
 8017628:	42a3      	cmp	r3, r4
 801762a:	d969      	bls.n	8017700 <rmw_wait+0x274>
 801762c:	686b      	ldr	r3, [r5, #4]
 801762e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017632:	2701      	movs	r7, #1
 8017634:	f7f7 f92e 	bl	800e894 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017638:	2800      	cmp	r0, #0
 801763a:	d1f3      	bne.n	8017624 <rmw_wait+0x198>
 801763c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017640:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017644:	3401      	adds	r4, #1
 8017646:	42a3      	cmp	r3, r4
 8017648:	d8e6      	bhi.n	8017618 <rmw_wait+0x18c>
 801764a:	b1a6      	cbz	r6, 8017676 <rmw_wait+0x1ea>
 801764c:	6834      	ldr	r4, [r6, #0]
 801764e:	b194      	cbz	r4, 8017676 <rmw_wait+0x1ea>
 8017650:	2300      	movs	r3, #0
 8017652:	461d      	mov	r5, r3
 8017654:	e004      	b.n	8017660 <rmw_wait+0x1d4>
 8017656:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801765a:	3301      	adds	r3, #1
 801765c:	42a3      	cmp	r3, r4
 801765e:	d00a      	beq.n	8017676 <rmw_wait+0x1ea>
 8017660:	6870      	ldr	r0, [r6, #4]
 8017662:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017666:	7c0a      	ldrb	r2, [r1, #16]
 8017668:	2a00      	cmp	r2, #0
 801766a:	d0f4      	beq.n	8017656 <rmw_wait+0x1ca>
 801766c:	3301      	adds	r3, #1
 801766e:	42a3      	cmp	r3, r4
 8017670:	740d      	strb	r5, [r1, #16]
 8017672:	4617      	mov	r7, r2
 8017674:	d1f4      	bne.n	8017660 <rmw_wait+0x1d4>
 8017676:	2f00      	cmp	r7, #0
 8017678:	d03e      	beq.n	80176f8 <rmw_wait+0x26c>
 801767a:	2000      	movs	r0, #0
 801767c:	b009      	add	sp, #36	@ 0x24
 801767e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017682:	68a0      	ldr	r0, [r4, #8]
 8017684:	2100      	movs	r1, #0
 8017686:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801768a:	f7f9 fe7f 	bl	801138c <uxr_run_session_timeout>
 801768e:	6864      	ldr	r4, [r4, #4]
 8017690:	2c00      	cmp	r4, #0
 8017692:	d1f6      	bne.n	8017682 <rmw_wait+0x1f6>
 8017694:	e78c      	b.n	80175b0 <rmw_wait+0x124>
 8017696:	e9d9 3200 	ldrd	r3, r2, [r9]
 801769a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801769e:	3401      	adds	r4, #1
 80176a0:	42a3      	cmp	r3, r4
 80176a2:	d890      	bhi.n	80175c6 <rmw_wait+0x13a>
 80176a4:	e79e      	b.n	80175e4 <rmw_wait+0x158>
 80176a6:	e9d8 3200 	ldrd	r3, r2, [r8]
 80176aa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80176ae:	3401      	adds	r4, #1
 80176b0:	429c      	cmp	r4, r3
 80176b2:	d39e      	bcc.n	80175f2 <rmw_wait+0x166>
 80176b4:	e7ac      	b.n	8017610 <rmw_wait+0x184>
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	f47f aef3 	bne.w	80174a2 <rmw_wait+0x16>
 80176bc:	2800      	cmp	r0, #0
 80176be:	f47f aef0 	bne.w	80174a2 <rmw_wait+0x16>
 80176c2:	2900      	cmp	r1, #0
 80176c4:	f47f aeed 	bne.w	80174a2 <rmw_wait+0x16>
 80176c8:	e7d7      	b.n	801767a <rmw_wait+0x1ee>
 80176ca:	4639      	mov	r1, r7
 80176cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80176d0:	f7f9 fe76 	bl	80113c0 <uxr_run_session_until_data>
 80176d4:	6864      	ldr	r4, [r4, #4]
 80176d6:	2c00      	cmp	r4, #0
 80176d8:	f47f af5f 	bne.w	801759a <rmw_wait+0x10e>
 80176dc:	e768      	b.n	80175b0 <rmw_wait+0x124>
 80176de:	f1b8 0f00 	cmp.w	r8, #0
 80176e2:	d032      	beq.n	801774a <rmw_wait+0x2be>
 80176e4:	f8d8 3000 	ldr.w	r3, [r8]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d181      	bne.n	80175f0 <rmw_wait+0x164>
 80176ec:	461f      	mov	r7, r3
 80176ee:	2d00      	cmp	r5, #0
 80176f0:	d18f      	bne.n	8017612 <rmw_wait+0x186>
 80176f2:	462f      	mov	r7, r5
 80176f4:	2e00      	cmp	r6, #0
 80176f6:	d1a9      	bne.n	801764c <rmw_wait+0x1c0>
 80176f8:	2002      	movs	r0, #2
 80176fa:	b009      	add	sp, #36	@ 0x24
 80176fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017700:	2e00      	cmp	r6, #0
 8017702:	d0ba      	beq.n	801767a <rmw_wait+0x1ee>
 8017704:	6834      	ldr	r4, [r6, #0]
 8017706:	2701      	movs	r7, #1
 8017708:	2c00      	cmp	r4, #0
 801770a:	d1a1      	bne.n	8017650 <rmw_wait+0x1c4>
 801770c:	e7b5      	b.n	801767a <rmw_wait+0x1ee>
 801770e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017712:	f7ff f9d5 	bl	8016ac0 <rmw_time_total_nsec>
 8017716:	2300      	movs	r3, #0
 8017718:	4a13      	ldr	r2, [pc, #76]	@ (8017768 <rmw_wait+0x2dc>)
 801771a:	f7e9 fa07 	bl	8000b2c <__aeabi_uldivmod>
 801771e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017722:	f171 0300 	sbcs.w	r3, r1, #0
 8017726:	4607      	mov	r7, r0
 8017728:	bfa8      	it	ge
 801772a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801772e:	e6c9      	b.n	80174c4 <rmw_wait+0x38>
 8017730:	f1b8 0f00 	cmp.w	r8, #0
 8017734:	d009      	beq.n	801774a <rmw_wait+0x2be>
 8017736:	f8d8 3000 	ldr.w	r3, [r8]
 801773a:	464f      	mov	r7, r9
 801773c:	2b00      	cmp	r3, #0
 801773e:	f47f af57 	bne.w	80175f0 <rmw_wait+0x164>
 8017742:	2d00      	cmp	r5, #0
 8017744:	f47f af65 	bne.w	8017612 <rmw_wait+0x186>
 8017748:	e7d3      	b.n	80176f2 <rmw_wait+0x266>
 801774a:	b17d      	cbz	r5, 801776c <rmw_wait+0x2e0>
 801774c:	682b      	ldr	r3, [r5, #0]
 801774e:	4647      	mov	r7, r8
 8017750:	2b00      	cmp	r3, #0
 8017752:	f47f af60 	bne.w	8017616 <rmw_wait+0x18a>
 8017756:	2e00      	cmp	r6, #0
 8017758:	f47f af78 	bne.w	801764c <rmw_wait+0x1c0>
 801775c:	e7cc      	b.n	80176f8 <rmw_wait+0x26c>
 801775e:	bf00      	nop
 8017760:	0801aaa8 	.word	0x0801aaa8
 8017764:	2000af5c 	.word	0x2000af5c
 8017768:	000f4240 	.word	0x000f4240
 801776c:	2e00      	cmp	r6, #0
 801776e:	d0c3      	beq.n	80176f8 <rmw_wait+0x26c>
 8017770:	6834      	ldr	r4, [r6, #0]
 8017772:	462f      	mov	r7, r5
 8017774:	2c00      	cmp	r4, #0
 8017776:	f47f af6b 	bne.w	8017650 <rmw_wait+0x1c4>
 801777a:	e7bd      	b.n	80176f8 <rmw_wait+0x26c>

0801777c <rmw_create_wait_set>:
 801777c:	b508      	push	{r3, lr}
 801777e:	4803      	ldr	r0, [pc, #12]	@ (801778c <rmw_create_wait_set+0x10>)
 8017780:	f7ff fbfe 	bl	8016f80 <get_memory>
 8017784:	b108      	cbz	r0, 801778a <rmw_create_wait_set+0xe>
 8017786:	6880      	ldr	r0, [r0, #8]
 8017788:	3010      	adds	r0, #16
 801778a:	bd08      	pop	{r3, pc}
 801778c:	2000af9c 	.word	0x2000af9c

08017790 <rmw_destroy_wait_set>:
 8017790:	b508      	push	{r3, lr}
 8017792:	4b08      	ldr	r3, [pc, #32]	@ (80177b4 <rmw_destroy_wait_set+0x24>)
 8017794:	6819      	ldr	r1, [r3, #0]
 8017796:	b911      	cbnz	r1, 801779e <rmw_destroy_wait_set+0xe>
 8017798:	e00a      	b.n	80177b0 <rmw_destroy_wait_set+0x20>
 801779a:	6849      	ldr	r1, [r1, #4]
 801779c:	b141      	cbz	r1, 80177b0 <rmw_destroy_wait_set+0x20>
 801779e:	688b      	ldr	r3, [r1, #8]
 80177a0:	3310      	adds	r3, #16
 80177a2:	4298      	cmp	r0, r3
 80177a4:	d1f9      	bne.n	801779a <rmw_destroy_wait_set+0xa>
 80177a6:	4803      	ldr	r0, [pc, #12]	@ (80177b4 <rmw_destroy_wait_set+0x24>)
 80177a8:	f7ff fbfa 	bl	8016fa0 <put_memory>
 80177ac:	2000      	movs	r0, #0
 80177ae:	bd08      	pop	{r3, pc}
 80177b0:	2001      	movs	r0, #1
 80177b2:	bd08      	pop	{r3, pc}
 80177b4:	2000af9c 	.word	0x2000af9c

080177b8 <rosidl_runtime_c__double__Sequence__init>:
 80177b8:	b530      	push	{r4, r5, lr}
 80177ba:	4604      	mov	r4, r0
 80177bc:	b087      	sub	sp, #28
 80177be:	b130      	cbz	r0, 80177ce <rosidl_runtime_c__double__Sequence__init+0x16>
 80177c0:	460d      	mov	r5, r1
 80177c2:	b931      	cbnz	r1, 80177d2 <rosidl_runtime_c__double__Sequence__init+0x1a>
 80177c4:	4608      	mov	r0, r1
 80177c6:	e9c4 0500 	strd	r0, r5, [r4]
 80177ca:	60a5      	str	r5, [r4, #8]
 80177cc:	2001      	movs	r0, #1
 80177ce:	b007      	add	sp, #28
 80177d0:	bd30      	pop	{r4, r5, pc}
 80177d2:	a801      	add	r0, sp, #4
 80177d4:	f7f5 ff40 	bl	800d658 <rcutils_get_default_allocator>
 80177d8:	9b01      	ldr	r3, [sp, #4]
 80177da:	9905      	ldr	r1, [sp, #20]
 80177dc:	00e8      	lsls	r0, r5, #3
 80177de:	4798      	blx	r3
 80177e0:	2800      	cmp	r0, #0
 80177e2:	d1f0      	bne.n	80177c6 <rosidl_runtime_c__double__Sequence__init+0xe>
 80177e4:	e7f3      	b.n	80177ce <rosidl_runtime_c__double__Sequence__init+0x16>
 80177e6:	bf00      	nop

080177e8 <rosidl_runtime_c__double__Sequence__fini>:
 80177e8:	b188      	cbz	r0, 801780e <rosidl_runtime_c__double__Sequence__fini+0x26>
 80177ea:	b510      	push	{r4, lr}
 80177ec:	6803      	ldr	r3, [r0, #0]
 80177ee:	b086      	sub	sp, #24
 80177f0:	4604      	mov	r4, r0
 80177f2:	b153      	cbz	r3, 801780a <rosidl_runtime_c__double__Sequence__fini+0x22>
 80177f4:	a801      	add	r0, sp, #4
 80177f6:	f7f5 ff2f 	bl	800d658 <rcutils_get_default_allocator>
 80177fa:	9b02      	ldr	r3, [sp, #8]
 80177fc:	9905      	ldr	r1, [sp, #20]
 80177fe:	6820      	ldr	r0, [r4, #0]
 8017800:	4798      	blx	r3
 8017802:	2300      	movs	r3, #0
 8017804:	e9c4 3300 	strd	r3, r3, [r4]
 8017808:	60a3      	str	r3, [r4, #8]
 801780a:	b006      	add	sp, #24
 801780c:	bd10      	pop	{r4, pc}
 801780e:	4770      	bx	lr

08017810 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8017810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017814:	6805      	ldr	r5, [r0, #0]
 8017816:	4604      	mov	r4, r0
 8017818:	4628      	mov	r0, r5
 801781a:	460e      	mov	r6, r1
 801781c:	f7e8 fd00 	bl	8000220 <strcmp>
 8017820:	b1c8      	cbz	r0, 8017856 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8017822:	4b11      	ldr	r3, [pc, #68]	@ (8017868 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	429d      	cmp	r5, r3
 8017828:	d112      	bne.n	8017850 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801782a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801782e:	f8d8 4000 	ldr.w	r4, [r8]
 8017832:	b16c      	cbz	r4, 8017850 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8017834:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017838:	2700      	movs	r7, #0
 801783a:	3d04      	subs	r5, #4
 801783c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8017840:	4631      	mov	r1, r6
 8017842:	f7e8 fced 	bl	8000220 <strcmp>
 8017846:	00bb      	lsls	r3, r7, #2
 8017848:	b140      	cbz	r0, 801785c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801784a:	3701      	adds	r7, #1
 801784c:	42bc      	cmp	r4, r7
 801784e:	d1f5      	bne.n	801783c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8017850:	2000      	movs	r0, #0
 8017852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017856:	4620      	mov	r0, r4
 8017858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801785c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017864:	58d3      	ldr	r3, [r2, r3]
 8017866:	4718      	bx	r3
 8017868:	200001c8 	.word	0x200001c8

0801786c <std_msgs__msg__Float64MultiArray__init>:
 801786c:	b570      	push	{r4, r5, r6, lr}
 801786e:	4605      	mov	r5, r0
 8017870:	b1b0      	cbz	r0, 80178a0 <std_msgs__msg__Float64MultiArray__init+0x34>
 8017872:	f000 f8b5 	bl	80179e0 <std_msgs__msg__MultiArrayLayout__init>
 8017876:	4604      	mov	r4, r0
 8017878:	b148      	cbz	r0, 801788e <std_msgs__msg__Float64MultiArray__init+0x22>
 801787a:	f105 0610 	add.w	r6, r5, #16
 801787e:	2100      	movs	r1, #0
 8017880:	4630      	mov	r0, r6
 8017882:	f7ff ff99 	bl	80177b8 <rosidl_runtime_c__double__Sequence__init>
 8017886:	4604      	mov	r4, r0
 8017888:	b168      	cbz	r0, 80178a6 <std_msgs__msg__Float64MultiArray__init+0x3a>
 801788a:	4620      	mov	r0, r4
 801788c:	bd70      	pop	{r4, r5, r6, pc}
 801788e:	4628      	mov	r0, r5
 8017890:	f000 f8b8 	bl	8017a04 <std_msgs__msg__MultiArrayLayout__fini>
 8017894:	f105 0010 	add.w	r0, r5, #16
 8017898:	f7ff ffa6 	bl	80177e8 <rosidl_runtime_c__double__Sequence__fini>
 801789c:	4620      	mov	r0, r4
 801789e:	bd70      	pop	{r4, r5, r6, pc}
 80178a0:	4604      	mov	r4, r0
 80178a2:	4620      	mov	r0, r4
 80178a4:	bd70      	pop	{r4, r5, r6, pc}
 80178a6:	4628      	mov	r0, r5
 80178a8:	f000 f8ac 	bl	8017a04 <std_msgs__msg__MultiArrayLayout__fini>
 80178ac:	4630      	mov	r0, r6
 80178ae:	f7ff ff9b 	bl	80177e8 <rosidl_runtime_c__double__Sequence__fini>
 80178b2:	e7ea      	b.n	801788a <std_msgs__msg__Float64MultiArray__init+0x1e>

080178b4 <std_msgs__msg__Float64MultiArray__fini>:
 80178b4:	b148      	cbz	r0, 80178ca <std_msgs__msg__Float64MultiArray__fini+0x16>
 80178b6:	b510      	push	{r4, lr}
 80178b8:	4604      	mov	r4, r0
 80178ba:	f000 f8a3 	bl	8017a04 <std_msgs__msg__MultiArrayLayout__fini>
 80178be:	f104 0010 	add.w	r0, r4, #16
 80178c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178c6:	f7ff bf8f 	b.w	80177e8 <rosidl_runtime_c__double__Sequence__fini>
 80178ca:	4770      	bx	lr

080178cc <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 80178cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178d0:	b086      	sub	sp, #24
 80178d2:	4682      	mov	sl, r0
 80178d4:	4689      	mov	r9, r1
 80178d6:	a801      	add	r0, sp, #4
 80178d8:	f7f5 febe 	bl	800d658 <rcutils_get_default_allocator>
 80178dc:	f1b9 0f00 	cmp.w	r9, #0
 80178e0:	d02f      	beq.n	8017942 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 80178e2:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 80178e6:	2114      	movs	r1, #20
 80178e8:	4642      	mov	r2, r8
 80178ea:	4648      	mov	r0, r9
 80178ec:	4798      	blx	r3
 80178ee:	4607      	mov	r7, r0
 80178f0:	b388      	cbz	r0, 8017956 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x8a>
 80178f2:	4606      	mov	r6, r0
 80178f4:	2400      	movs	r4, #0
 80178f6:	e004      	b.n	8017902 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x36>
 80178f8:	3401      	adds	r4, #1
 80178fa:	45a1      	cmp	r9, r4
 80178fc:	f106 0614 	add.w	r6, r6, #20
 8017900:	d020      	beq.n	8017944 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 8017902:	4630      	mov	r0, r6
 8017904:	f001 fc2e 	bl	8019164 <rosidl_runtime_c__String__init>
 8017908:	4605      	mov	r5, r0
 801790a:	2800      	cmp	r0, #0
 801790c:	d1f4      	bne.n	80178f8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 801790e:	4630      	mov	r0, r6
 8017910:	f001 fc3e 	bl	8019190 <rosidl_runtime_c__String__fini>
 8017914:	45a1      	cmp	r9, r4
 8017916:	d915      	bls.n	8017944 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 8017918:	b15c      	cbz	r4, 8017932 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x66>
 801791a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801791e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8017922:	3c14      	subs	r4, #20
 8017924:	4620      	mov	r0, r4
 8017926:	f001 fc33 	bl	8019190 <rosidl_runtime_c__String__fini>
 801792a:	42a7      	cmp	r7, r4
 801792c:	f1a4 0414 	sub.w	r4, r4, #20
 8017930:	d1f8      	bne.n	8017924 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x58>
 8017932:	4638      	mov	r0, r7
 8017934:	9b02      	ldr	r3, [sp, #8]
 8017936:	4641      	mov	r1, r8
 8017938:	4798      	blx	r3
 801793a:	4628      	mov	r0, r5
 801793c:	b006      	add	sp, #24
 801793e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017942:	464f      	mov	r7, r9
 8017944:	e9ca 7900 	strd	r7, r9, [sl]
 8017948:	f8ca 9008 	str.w	r9, [sl, #8]
 801794c:	2501      	movs	r5, #1
 801794e:	4628      	mov	r0, r5
 8017950:	b006      	add	sp, #24
 8017952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017956:	4605      	mov	r5, r0
 8017958:	e7f9      	b.n	801794e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x82>
 801795a:	bf00      	nop

0801795c <std_msgs__msg__MultiArrayDimension__init>:
 801795c:	b538      	push	{r3, r4, r5, lr}
 801795e:	4604      	mov	r4, r0
 8017960:	b128      	cbz	r0, 801796e <std_msgs__msg__MultiArrayDimension__init+0x12>
 8017962:	f001 fbff 	bl	8019164 <rosidl_runtime_c__String__init>
 8017966:	4605      	mov	r5, r0
 8017968:	b120      	cbz	r0, 8017974 <std_msgs__msg__MultiArrayDimension__init+0x18>
 801796a:	4628      	mov	r0, r5
 801796c:	bd38      	pop	{r3, r4, r5, pc}
 801796e:	4605      	mov	r5, r0
 8017970:	4628      	mov	r0, r5
 8017972:	bd38      	pop	{r3, r4, r5, pc}
 8017974:	4620      	mov	r0, r4
 8017976:	f001 fc0b 	bl	8019190 <rosidl_runtime_c__String__fini>
 801797a:	4628      	mov	r0, r5
 801797c:	bd38      	pop	{r3, r4, r5, pc}
 801797e:	bf00      	nop

08017980 <std_msgs__msg__MultiArrayDimension__fini>:
 8017980:	b108      	cbz	r0, 8017986 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 8017982:	f001 bc05 	b.w	8019190 <rosidl_runtime_c__String__fini>
 8017986:	4770      	bx	lr

08017988 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8017988:	b108      	cbz	r0, 801798e <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 801798a:	f7ff bf9f 	b.w	80178cc <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 801798e:	4770      	bx	lr

08017990 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8017990:	b320      	cbz	r0, 80179dc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8017992:	b530      	push	{r4, r5, lr}
 8017994:	4605      	mov	r5, r0
 8017996:	b087      	sub	sp, #28
 8017998:	a801      	add	r0, sp, #4
 801799a:	f7f5 fe5d 	bl	800d658 <rcutils_get_default_allocator>
 801799e:	682a      	ldr	r2, [r5, #0]
 80179a0:	b1b2      	cbz	r2, 80179d0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 80179a2:	68a9      	ldr	r1, [r5, #8]
 80179a4:	b161      	cbz	r1, 80179c0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80179a6:	2400      	movs	r4, #0
 80179a8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80179ac:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 80179b0:	d010      	beq.n	80179d4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 80179b2:	f001 fbed 	bl	8019190 <rosidl_runtime_c__String__fini>
 80179b6:	68a9      	ldr	r1, [r5, #8]
 80179b8:	682a      	ldr	r2, [r5, #0]
 80179ba:	3401      	adds	r4, #1
 80179bc:	428c      	cmp	r4, r1
 80179be:	d3f3      	bcc.n	80179a8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80179c0:	9b02      	ldr	r3, [sp, #8]
 80179c2:	9905      	ldr	r1, [sp, #20]
 80179c4:	4610      	mov	r0, r2
 80179c6:	4798      	blx	r3
 80179c8:	2300      	movs	r3, #0
 80179ca:	e9c5 3300 	strd	r3, r3, [r5]
 80179ce:	60ab      	str	r3, [r5, #8]
 80179d0:	b007      	add	sp, #28
 80179d2:	bd30      	pop	{r4, r5, pc}
 80179d4:	3401      	adds	r4, #1
 80179d6:	428c      	cmp	r4, r1
 80179d8:	d3e6      	bcc.n	80179a8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80179da:	e7f1      	b.n	80179c0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80179dc:	4770      	bx	lr
 80179de:	bf00      	nop

080179e0 <std_msgs__msg__MultiArrayLayout__init>:
 80179e0:	b538      	push	{r3, r4, r5, lr}
 80179e2:	4604      	mov	r4, r0
 80179e4:	b130      	cbz	r0, 80179f4 <std_msgs__msg__MultiArrayLayout__init+0x14>
 80179e6:	2100      	movs	r1, #0
 80179e8:	f7ff ffce 	bl	8017988 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 80179ec:	4605      	mov	r5, r0
 80179ee:	b120      	cbz	r0, 80179fa <std_msgs__msg__MultiArrayLayout__init+0x1a>
 80179f0:	4628      	mov	r0, r5
 80179f2:	bd38      	pop	{r3, r4, r5, pc}
 80179f4:	4605      	mov	r5, r0
 80179f6:	4628      	mov	r0, r5
 80179f8:	bd38      	pop	{r3, r4, r5, pc}
 80179fa:	4620      	mov	r0, r4
 80179fc:	f7ff ffc8 	bl	8017990 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8017a00:	4628      	mov	r0, r5
 8017a02:	bd38      	pop	{r3, r4, r5, pc}

08017a04 <std_msgs__msg__MultiArrayLayout__fini>:
 8017a04:	b108      	cbz	r0, 8017a0a <std_msgs__msg__MultiArrayLayout__fini+0x6>
 8017a06:	f7ff bfc3 	b.w	8017990 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8017a0a:	4770      	bx	lr

08017a0c <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8017a0c:	f7ff bfa6 	b.w	801795c <std_msgs__msg__MultiArrayDimension__init>

08017a10 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 8017a10:	f7ff bfb6 	b.w	8017980 <std_msgs__msg__MultiArrayDimension__fini>

08017a14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8017a14:	4b04      	ldr	r3, [pc, #16]	@ (8017a28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8017a16:	681a      	ldr	r2, [r3, #0]
 8017a18:	b10a      	cbz	r2, 8017a1e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8017a1a:	4803      	ldr	r0, [pc, #12]	@ (8017a28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8017a1c:	4770      	bx	lr
 8017a1e:	4a03      	ldr	r2, [pc, #12]	@ (8017a2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 8017a20:	4801      	ldr	r0, [pc, #4]	@ (8017a28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8017a22:	6812      	ldr	r2, [r2, #0]
 8017a24:	601a      	str	r2, [r3, #0]
 8017a26:	4770      	bx	lr
 8017a28:	20000284 	.word	0x20000284
 8017a2c:	200001cc 	.word	0x200001cc

08017a30 <_MultiArrayDimension__cdr_serialize>:
 8017a30:	b1d0      	cbz	r0, 8017a68 <_MultiArrayDimension__cdr_serialize+0x38>
 8017a32:	b570      	push	{r4, r5, r6, lr}
 8017a34:	6806      	ldr	r6, [r0, #0]
 8017a36:	460d      	mov	r5, r1
 8017a38:	4604      	mov	r4, r0
 8017a3a:	b196      	cbz	r6, 8017a62 <_MultiArrayDimension__cdr_serialize+0x32>
 8017a3c:	4630      	mov	r0, r6
 8017a3e:	f7e8 fbf9 	bl	8000234 <strlen>
 8017a42:	1c42      	adds	r2, r0, #1
 8017a44:	4631      	mov	r1, r6
 8017a46:	6060      	str	r0, [r4, #4]
 8017a48:	4628      	mov	r0, r5
 8017a4a:	f7f8 fc33 	bl	80102b4 <ucdr_serialize_sequence_char>
 8017a4e:	68e1      	ldr	r1, [r4, #12]
 8017a50:	4628      	mov	r0, r5
 8017a52:	f7f7 fc89 	bl	800f368 <ucdr_serialize_uint32_t>
 8017a56:	6921      	ldr	r1, [r4, #16]
 8017a58:	4628      	mov	r0, r5
 8017a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a5e:	f7f7 bc83 	b.w	800f368 <ucdr_serialize_uint32_t>
 8017a62:	4632      	mov	r2, r6
 8017a64:	4630      	mov	r0, r6
 8017a66:	e7ed      	b.n	8017a44 <_MultiArrayDimension__cdr_serialize+0x14>
 8017a68:	4770      	bx	lr
 8017a6a:	bf00      	nop

08017a6c <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8017a6c:	b570      	push	{r4, r5, r6, lr}
 8017a6e:	4604      	mov	r4, r0
 8017a70:	b1b0      	cbz	r0, 8017aa0 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8017a72:	460d      	mov	r5, r1
 8017a74:	4628      	mov	r0, r5
 8017a76:	2104      	movs	r1, #4
 8017a78:	f7f8 fbb0 	bl	80101dc <ucdr_alignment>
 8017a7c:	6866      	ldr	r6, [r4, #4]
 8017a7e:	1d6b      	adds	r3, r5, #5
 8017a80:	4433      	add	r3, r6
 8017a82:	181e      	adds	r6, r3, r0
 8017a84:	2104      	movs	r1, #4
 8017a86:	4630      	mov	r0, r6
 8017a88:	f7f8 fba8 	bl	80101dc <ucdr_alignment>
 8017a8c:	1d04      	adds	r4, r0, #4
 8017a8e:	4434      	add	r4, r6
 8017a90:	2104      	movs	r1, #4
 8017a92:	4620      	mov	r0, r4
 8017a94:	f7f8 fba2 	bl	80101dc <ucdr_alignment>
 8017a98:	f1c5 0504 	rsb	r5, r5, #4
 8017a9c:	4428      	add	r0, r5
 8017a9e:	4420      	add	r0, r4
 8017aa0:	bd70      	pop	{r4, r5, r6, pc}
 8017aa2:	bf00      	nop

08017aa4 <_MultiArrayDimension__cdr_deserialize>:
 8017aa4:	b570      	push	{r4, r5, r6, lr}
 8017aa6:	460c      	mov	r4, r1
 8017aa8:	b082      	sub	sp, #8
 8017aaa:	b1d9      	cbz	r1, 8017ae4 <_MultiArrayDimension__cdr_deserialize+0x40>
 8017aac:	688e      	ldr	r6, [r1, #8]
 8017aae:	6809      	ldr	r1, [r1, #0]
 8017ab0:	ab01      	add	r3, sp, #4
 8017ab2:	4632      	mov	r2, r6
 8017ab4:	4605      	mov	r5, r0
 8017ab6:	f7f8 fc0f 	bl	80102d8 <ucdr_deserialize_sequence_char>
 8017aba:	9b01      	ldr	r3, [sp, #4]
 8017abc:	b970      	cbnz	r0, 8017adc <_MultiArrayDimension__cdr_deserialize+0x38>
 8017abe:	429e      	cmp	r6, r3
 8017ac0:	d313      	bcc.n	8017aea <_MultiArrayDimension__cdr_deserialize+0x46>
 8017ac2:	f104 010c 	add.w	r1, r4, #12
 8017ac6:	4628      	mov	r0, r5
 8017ac8:	f7f7 fd7e 	bl	800f5c8 <ucdr_deserialize_uint32_t>
 8017acc:	f104 0110 	add.w	r1, r4, #16
 8017ad0:	4628      	mov	r0, r5
 8017ad2:	b002      	add	sp, #8
 8017ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ad8:	f7f7 bd76 	b.w	800f5c8 <ucdr_deserialize_uint32_t>
 8017adc:	b103      	cbz	r3, 8017ae0 <_MultiArrayDimension__cdr_deserialize+0x3c>
 8017ade:	3b01      	subs	r3, #1
 8017ae0:	6063      	str	r3, [r4, #4]
 8017ae2:	e7ee      	b.n	8017ac2 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8017ae4:	4608      	mov	r0, r1
 8017ae6:	b002      	add	sp, #8
 8017ae8:	bd70      	pop	{r4, r5, r6, pc}
 8017aea:	2101      	movs	r1, #1
 8017aec:	75a8      	strb	r0, [r5, #22]
 8017aee:	7569      	strb	r1, [r5, #21]
 8017af0:	6060      	str	r0, [r4, #4]
 8017af2:	4628      	mov	r0, r5
 8017af4:	f7f8 fb88 	bl	8010208 <ucdr_align_to>
 8017af8:	9901      	ldr	r1, [sp, #4]
 8017afa:	4628      	mov	r0, r5
 8017afc:	f7f8 fbba 	bl	8010274 <ucdr_advance_buffer>
 8017b00:	e7df      	b.n	8017ac2 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8017b02:	bf00      	nop

08017b04 <_MultiArrayDimension__max_serialized_size>:
 8017b04:	b510      	push	{r4, lr}
 8017b06:	2104      	movs	r1, #4
 8017b08:	2000      	movs	r0, #0
 8017b0a:	f7f8 fb67 	bl	80101dc <ucdr_alignment>
 8017b0e:	1d04      	adds	r4, r0, #4
 8017b10:	2104      	movs	r1, #4
 8017b12:	4620      	mov	r0, r4
 8017b14:	f7f8 fb62 	bl	80101dc <ucdr_alignment>
 8017b18:	3004      	adds	r0, #4
 8017b1a:	4420      	add	r0, r4
 8017b1c:	bd10      	pop	{r4, pc}
 8017b1e:	bf00      	nop

08017b20 <_MultiArrayDimension__get_serialized_size>:
 8017b20:	b510      	push	{r4, lr}
 8017b22:	4604      	mov	r4, r0
 8017b24:	b190      	cbz	r0, 8017b4c <_MultiArrayDimension__get_serialized_size+0x2c>
 8017b26:	2104      	movs	r1, #4
 8017b28:	2000      	movs	r0, #0
 8017b2a:	f7f8 fb57 	bl	80101dc <ucdr_alignment>
 8017b2e:	6863      	ldr	r3, [r4, #4]
 8017b30:	3305      	adds	r3, #5
 8017b32:	181c      	adds	r4, r3, r0
 8017b34:	2104      	movs	r1, #4
 8017b36:	4620      	mov	r0, r4
 8017b38:	f7f8 fb50 	bl	80101dc <ucdr_alignment>
 8017b3c:	3004      	adds	r0, #4
 8017b3e:	4404      	add	r4, r0
 8017b40:	2104      	movs	r1, #4
 8017b42:	4620      	mov	r0, r4
 8017b44:	f7f8 fb4a 	bl	80101dc <ucdr_alignment>
 8017b48:	3004      	adds	r0, #4
 8017b4a:	4420      	add	r0, r4
 8017b4c:	bd10      	pop	{r4, pc}
 8017b4e:	bf00      	nop

08017b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8017b50:	4800      	ldr	r0, [pc, #0]	@ (8017b54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8017b52:	4770      	bx	lr
 8017b54:	20000290 	.word	0x20000290

08017b58 <ucdr_serialize_endian_array_char>:
 8017b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b5c:	4619      	mov	r1, r3
 8017b5e:	461f      	mov	r7, r3
 8017b60:	4605      	mov	r5, r0
 8017b62:	4690      	mov	r8, r2
 8017b64:	f7f8 fae2 	bl	801012c <ucdr_check_buffer_available_for>
 8017b68:	b9e0      	cbnz	r0, 8017ba4 <ucdr_serialize_endian_array_char+0x4c>
 8017b6a:	463e      	mov	r6, r7
 8017b6c:	e009      	b.n	8017b82 <ucdr_serialize_endian_array_char+0x2a>
 8017b6e:	68a8      	ldr	r0, [r5, #8]
 8017b70:	f002 f90f 	bl	8019d92 <memcpy>
 8017b74:	68ab      	ldr	r3, [r5, #8]
 8017b76:	6928      	ldr	r0, [r5, #16]
 8017b78:	4423      	add	r3, r4
 8017b7a:	4420      	add	r0, r4
 8017b7c:	1b36      	subs	r6, r6, r4
 8017b7e:	60ab      	str	r3, [r5, #8]
 8017b80:	6128      	str	r0, [r5, #16]
 8017b82:	4631      	mov	r1, r6
 8017b84:	2201      	movs	r2, #1
 8017b86:	4628      	mov	r0, r5
 8017b88:	f7f8 fb58 	bl	801023c <ucdr_check_final_buffer_behavior_array>
 8017b8c:	1bb9      	subs	r1, r7, r6
 8017b8e:	4441      	add	r1, r8
 8017b90:	4604      	mov	r4, r0
 8017b92:	4602      	mov	r2, r0
 8017b94:	2800      	cmp	r0, #0
 8017b96:	d1ea      	bne.n	8017b6e <ucdr_serialize_endian_array_char+0x16>
 8017b98:	2301      	movs	r3, #1
 8017b9a:	7da8      	ldrb	r0, [r5, #22]
 8017b9c:	756b      	strb	r3, [r5, #21]
 8017b9e:	4058      	eors	r0, r3
 8017ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ba4:	463a      	mov	r2, r7
 8017ba6:	68a8      	ldr	r0, [r5, #8]
 8017ba8:	4641      	mov	r1, r8
 8017baa:	f002 f8f2 	bl	8019d92 <memcpy>
 8017bae:	68aa      	ldr	r2, [r5, #8]
 8017bb0:	692b      	ldr	r3, [r5, #16]
 8017bb2:	443a      	add	r2, r7
 8017bb4:	443b      	add	r3, r7
 8017bb6:	60aa      	str	r2, [r5, #8]
 8017bb8:	612b      	str	r3, [r5, #16]
 8017bba:	e7ed      	b.n	8017b98 <ucdr_serialize_endian_array_char+0x40>

08017bbc <ucdr_deserialize_endian_array_char>:
 8017bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bc0:	4619      	mov	r1, r3
 8017bc2:	461f      	mov	r7, r3
 8017bc4:	4605      	mov	r5, r0
 8017bc6:	4690      	mov	r8, r2
 8017bc8:	f7f8 fab0 	bl	801012c <ucdr_check_buffer_available_for>
 8017bcc:	b9e0      	cbnz	r0, 8017c08 <ucdr_deserialize_endian_array_char+0x4c>
 8017bce:	463e      	mov	r6, r7
 8017bd0:	e009      	b.n	8017be6 <ucdr_deserialize_endian_array_char+0x2a>
 8017bd2:	68a9      	ldr	r1, [r5, #8]
 8017bd4:	f002 f8dd 	bl	8019d92 <memcpy>
 8017bd8:	68ab      	ldr	r3, [r5, #8]
 8017bda:	6928      	ldr	r0, [r5, #16]
 8017bdc:	4423      	add	r3, r4
 8017bde:	4420      	add	r0, r4
 8017be0:	1b36      	subs	r6, r6, r4
 8017be2:	60ab      	str	r3, [r5, #8]
 8017be4:	6128      	str	r0, [r5, #16]
 8017be6:	2201      	movs	r2, #1
 8017be8:	4631      	mov	r1, r6
 8017bea:	4628      	mov	r0, r5
 8017bec:	f7f8 fb26 	bl	801023c <ucdr_check_final_buffer_behavior_array>
 8017bf0:	4604      	mov	r4, r0
 8017bf2:	1bb8      	subs	r0, r7, r6
 8017bf4:	4440      	add	r0, r8
 8017bf6:	4622      	mov	r2, r4
 8017bf8:	2c00      	cmp	r4, #0
 8017bfa:	d1ea      	bne.n	8017bd2 <ucdr_deserialize_endian_array_char+0x16>
 8017bfc:	2301      	movs	r3, #1
 8017bfe:	7da8      	ldrb	r0, [r5, #22]
 8017c00:	756b      	strb	r3, [r5, #21]
 8017c02:	4058      	eors	r0, r3
 8017c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c08:	463a      	mov	r2, r7
 8017c0a:	68a9      	ldr	r1, [r5, #8]
 8017c0c:	4640      	mov	r0, r8
 8017c0e:	f002 f8c0 	bl	8019d92 <memcpy>
 8017c12:	68aa      	ldr	r2, [r5, #8]
 8017c14:	692b      	ldr	r3, [r5, #16]
 8017c16:	443a      	add	r2, r7
 8017c18:	443b      	add	r3, r7
 8017c1a:	60aa      	str	r2, [r5, #8]
 8017c1c:	612b      	str	r3, [r5, #16]
 8017c1e:	e7ed      	b.n	8017bfc <ucdr_deserialize_endian_array_char+0x40>

08017c20 <ucdr_serialize_array_uint8_t>:
 8017c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c24:	4688      	mov	r8, r1
 8017c26:	4611      	mov	r1, r2
 8017c28:	4617      	mov	r7, r2
 8017c2a:	4605      	mov	r5, r0
 8017c2c:	f7f8 fa7e 	bl	801012c <ucdr_check_buffer_available_for>
 8017c30:	b9e0      	cbnz	r0, 8017c6c <ucdr_serialize_array_uint8_t+0x4c>
 8017c32:	463e      	mov	r6, r7
 8017c34:	e009      	b.n	8017c4a <ucdr_serialize_array_uint8_t+0x2a>
 8017c36:	68a8      	ldr	r0, [r5, #8]
 8017c38:	f002 f8ab 	bl	8019d92 <memcpy>
 8017c3c:	68aa      	ldr	r2, [r5, #8]
 8017c3e:	692b      	ldr	r3, [r5, #16]
 8017c40:	4422      	add	r2, r4
 8017c42:	4423      	add	r3, r4
 8017c44:	1b36      	subs	r6, r6, r4
 8017c46:	60aa      	str	r2, [r5, #8]
 8017c48:	612b      	str	r3, [r5, #16]
 8017c4a:	4631      	mov	r1, r6
 8017c4c:	2201      	movs	r2, #1
 8017c4e:	4628      	mov	r0, r5
 8017c50:	f7f8 faf4 	bl	801023c <ucdr_check_final_buffer_behavior_array>
 8017c54:	1bb9      	subs	r1, r7, r6
 8017c56:	4441      	add	r1, r8
 8017c58:	4604      	mov	r4, r0
 8017c5a:	4602      	mov	r2, r0
 8017c5c:	2800      	cmp	r0, #0
 8017c5e:	d1ea      	bne.n	8017c36 <ucdr_serialize_array_uint8_t+0x16>
 8017c60:	2301      	movs	r3, #1
 8017c62:	7da8      	ldrb	r0, [r5, #22]
 8017c64:	756b      	strb	r3, [r5, #21]
 8017c66:	4058      	eors	r0, r3
 8017c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c6c:	463a      	mov	r2, r7
 8017c6e:	68a8      	ldr	r0, [r5, #8]
 8017c70:	4641      	mov	r1, r8
 8017c72:	f002 f88e 	bl	8019d92 <memcpy>
 8017c76:	68aa      	ldr	r2, [r5, #8]
 8017c78:	692b      	ldr	r3, [r5, #16]
 8017c7a:	443a      	add	r2, r7
 8017c7c:	443b      	add	r3, r7
 8017c7e:	60aa      	str	r2, [r5, #8]
 8017c80:	612b      	str	r3, [r5, #16]
 8017c82:	e7ed      	b.n	8017c60 <ucdr_serialize_array_uint8_t+0x40>

08017c84 <ucdr_serialize_endian_array_uint8_t>:
 8017c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c88:	4619      	mov	r1, r3
 8017c8a:	461f      	mov	r7, r3
 8017c8c:	4605      	mov	r5, r0
 8017c8e:	4690      	mov	r8, r2
 8017c90:	f7f8 fa4c 	bl	801012c <ucdr_check_buffer_available_for>
 8017c94:	b9e0      	cbnz	r0, 8017cd0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017c96:	463e      	mov	r6, r7
 8017c98:	e009      	b.n	8017cae <ucdr_serialize_endian_array_uint8_t+0x2a>
 8017c9a:	68a8      	ldr	r0, [r5, #8]
 8017c9c:	f002 f879 	bl	8019d92 <memcpy>
 8017ca0:	68ab      	ldr	r3, [r5, #8]
 8017ca2:	6928      	ldr	r0, [r5, #16]
 8017ca4:	4423      	add	r3, r4
 8017ca6:	4420      	add	r0, r4
 8017ca8:	1b36      	subs	r6, r6, r4
 8017caa:	60ab      	str	r3, [r5, #8]
 8017cac:	6128      	str	r0, [r5, #16]
 8017cae:	4631      	mov	r1, r6
 8017cb0:	2201      	movs	r2, #1
 8017cb2:	4628      	mov	r0, r5
 8017cb4:	f7f8 fac2 	bl	801023c <ucdr_check_final_buffer_behavior_array>
 8017cb8:	1bb9      	subs	r1, r7, r6
 8017cba:	4441      	add	r1, r8
 8017cbc:	4604      	mov	r4, r0
 8017cbe:	4602      	mov	r2, r0
 8017cc0:	2800      	cmp	r0, #0
 8017cc2:	d1ea      	bne.n	8017c9a <ucdr_serialize_endian_array_uint8_t+0x16>
 8017cc4:	2301      	movs	r3, #1
 8017cc6:	7da8      	ldrb	r0, [r5, #22]
 8017cc8:	756b      	strb	r3, [r5, #21]
 8017cca:	4058      	eors	r0, r3
 8017ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cd0:	463a      	mov	r2, r7
 8017cd2:	68a8      	ldr	r0, [r5, #8]
 8017cd4:	4641      	mov	r1, r8
 8017cd6:	f002 f85c 	bl	8019d92 <memcpy>
 8017cda:	68aa      	ldr	r2, [r5, #8]
 8017cdc:	692b      	ldr	r3, [r5, #16]
 8017cde:	443a      	add	r2, r7
 8017ce0:	443b      	add	r3, r7
 8017ce2:	60aa      	str	r2, [r5, #8]
 8017ce4:	612b      	str	r3, [r5, #16]
 8017ce6:	e7ed      	b.n	8017cc4 <ucdr_serialize_endian_array_uint8_t+0x40>

08017ce8 <ucdr_deserialize_array_uint8_t>:
 8017ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cec:	4688      	mov	r8, r1
 8017cee:	4611      	mov	r1, r2
 8017cf0:	4617      	mov	r7, r2
 8017cf2:	4605      	mov	r5, r0
 8017cf4:	f7f8 fa1a 	bl	801012c <ucdr_check_buffer_available_for>
 8017cf8:	b9e0      	cbnz	r0, 8017d34 <ucdr_deserialize_array_uint8_t+0x4c>
 8017cfa:	463e      	mov	r6, r7
 8017cfc:	e009      	b.n	8017d12 <ucdr_deserialize_array_uint8_t+0x2a>
 8017cfe:	68a9      	ldr	r1, [r5, #8]
 8017d00:	f002 f847 	bl	8019d92 <memcpy>
 8017d04:	68aa      	ldr	r2, [r5, #8]
 8017d06:	692b      	ldr	r3, [r5, #16]
 8017d08:	4422      	add	r2, r4
 8017d0a:	4423      	add	r3, r4
 8017d0c:	1b36      	subs	r6, r6, r4
 8017d0e:	60aa      	str	r2, [r5, #8]
 8017d10:	612b      	str	r3, [r5, #16]
 8017d12:	2201      	movs	r2, #1
 8017d14:	4631      	mov	r1, r6
 8017d16:	4628      	mov	r0, r5
 8017d18:	f7f8 fa90 	bl	801023c <ucdr_check_final_buffer_behavior_array>
 8017d1c:	4604      	mov	r4, r0
 8017d1e:	1bb8      	subs	r0, r7, r6
 8017d20:	4440      	add	r0, r8
 8017d22:	4622      	mov	r2, r4
 8017d24:	2c00      	cmp	r4, #0
 8017d26:	d1ea      	bne.n	8017cfe <ucdr_deserialize_array_uint8_t+0x16>
 8017d28:	2301      	movs	r3, #1
 8017d2a:	7da8      	ldrb	r0, [r5, #22]
 8017d2c:	756b      	strb	r3, [r5, #21]
 8017d2e:	4058      	eors	r0, r3
 8017d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d34:	463a      	mov	r2, r7
 8017d36:	68a9      	ldr	r1, [r5, #8]
 8017d38:	4640      	mov	r0, r8
 8017d3a:	f002 f82a 	bl	8019d92 <memcpy>
 8017d3e:	68aa      	ldr	r2, [r5, #8]
 8017d40:	692b      	ldr	r3, [r5, #16]
 8017d42:	443a      	add	r2, r7
 8017d44:	443b      	add	r3, r7
 8017d46:	60aa      	str	r2, [r5, #8]
 8017d48:	612b      	str	r3, [r5, #16]
 8017d4a:	e7ed      	b.n	8017d28 <ucdr_deserialize_array_uint8_t+0x40>

08017d4c <ucdr_deserialize_endian_array_uint8_t>:
 8017d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d50:	4619      	mov	r1, r3
 8017d52:	461f      	mov	r7, r3
 8017d54:	4605      	mov	r5, r0
 8017d56:	4690      	mov	r8, r2
 8017d58:	f7f8 f9e8 	bl	801012c <ucdr_check_buffer_available_for>
 8017d5c:	b9e0      	cbnz	r0, 8017d98 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8017d5e:	463e      	mov	r6, r7
 8017d60:	e009      	b.n	8017d76 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8017d62:	68a9      	ldr	r1, [r5, #8]
 8017d64:	f002 f815 	bl	8019d92 <memcpy>
 8017d68:	68ab      	ldr	r3, [r5, #8]
 8017d6a:	6928      	ldr	r0, [r5, #16]
 8017d6c:	4423      	add	r3, r4
 8017d6e:	4420      	add	r0, r4
 8017d70:	1b36      	subs	r6, r6, r4
 8017d72:	60ab      	str	r3, [r5, #8]
 8017d74:	6128      	str	r0, [r5, #16]
 8017d76:	2201      	movs	r2, #1
 8017d78:	4631      	mov	r1, r6
 8017d7a:	4628      	mov	r0, r5
 8017d7c:	f7f8 fa5e 	bl	801023c <ucdr_check_final_buffer_behavior_array>
 8017d80:	4604      	mov	r4, r0
 8017d82:	1bb8      	subs	r0, r7, r6
 8017d84:	4440      	add	r0, r8
 8017d86:	4622      	mov	r2, r4
 8017d88:	2c00      	cmp	r4, #0
 8017d8a:	d1ea      	bne.n	8017d62 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017d8c:	2301      	movs	r3, #1
 8017d8e:	7da8      	ldrb	r0, [r5, #22]
 8017d90:	756b      	strb	r3, [r5, #21]
 8017d92:	4058      	eors	r0, r3
 8017d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d98:	463a      	mov	r2, r7
 8017d9a:	68a9      	ldr	r1, [r5, #8]
 8017d9c:	4640      	mov	r0, r8
 8017d9e:	f001 fff8 	bl	8019d92 <memcpy>
 8017da2:	68aa      	ldr	r2, [r5, #8]
 8017da4:	692b      	ldr	r3, [r5, #16]
 8017da6:	443a      	add	r2, r7
 8017da8:	443b      	add	r3, r7
 8017daa:	60aa      	str	r2, [r5, #8]
 8017dac:	612b      	str	r3, [r5, #16]
 8017dae:	e7ed      	b.n	8017d8c <ucdr_deserialize_endian_array_uint8_t+0x40>

08017db0 <ucdr_serialize_endian_array_double>:
 8017db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017db4:	4688      	mov	r8, r1
 8017db6:	2108      	movs	r1, #8
 8017db8:	4604      	mov	r4, r0
 8017dba:	4616      	mov	r6, r2
 8017dbc:	461f      	mov	r7, r3
 8017dbe:	f7f8 fa15 	bl	80101ec <ucdr_buffer_alignment>
 8017dc2:	4601      	mov	r1, r0
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	7d65      	ldrb	r5, [r4, #21]
 8017dc8:	f7f8 fa54 	bl	8010274 <ucdr_advance_buffer>
 8017dcc:	f1b8 0f01 	cmp.w	r8, #1
 8017dd0:	7565      	strb	r5, [r4, #21]
 8017dd2:	d00f      	beq.n	8017df4 <ucdr_serialize_endian_array_double+0x44>
 8017dd4:	2500      	movs	r5, #0
 8017dd6:	b147      	cbz	r7, 8017dea <ucdr_serialize_endian_array_double+0x3a>
 8017dd8:	ecb6 0b02 	vldmia	r6!, {d0}
 8017ddc:	4641      	mov	r1, r8
 8017dde:	4620      	mov	r0, r4
 8017de0:	3501      	adds	r5, #1
 8017de2:	f7f8 f803 	bl	800fdec <ucdr_serialize_endian_double>
 8017de6:	42af      	cmp	r7, r5
 8017de8:	d1f6      	bne.n	8017dd8 <ucdr_serialize_endian_array_double+0x28>
 8017dea:	7da0      	ldrb	r0, [r4, #22]
 8017dec:	f080 0001 	eor.w	r0, r0, #1
 8017df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017df4:	00ff      	lsls	r7, r7, #3
 8017df6:	4639      	mov	r1, r7
 8017df8:	4620      	mov	r0, r4
 8017dfa:	f7f8 f997 	bl	801012c <ucdr_check_buffer_available_for>
 8017dfe:	b9f8      	cbnz	r0, 8017e40 <ucdr_serialize_endian_array_double+0x90>
 8017e00:	46b8      	mov	r8, r7
 8017e02:	e00a      	b.n	8017e1a <ucdr_serialize_endian_array_double+0x6a>
 8017e04:	68a0      	ldr	r0, [r4, #8]
 8017e06:	f001 ffc4 	bl	8019d92 <memcpy>
 8017e0a:	68a2      	ldr	r2, [r4, #8]
 8017e0c:	6923      	ldr	r3, [r4, #16]
 8017e0e:	442a      	add	r2, r5
 8017e10:	442b      	add	r3, r5
 8017e12:	eba8 0805 	sub.w	r8, r8, r5
 8017e16:	60a2      	str	r2, [r4, #8]
 8017e18:	6123      	str	r3, [r4, #16]
 8017e1a:	4641      	mov	r1, r8
 8017e1c:	2208      	movs	r2, #8
 8017e1e:	4620      	mov	r0, r4
 8017e20:	f7f8 fa0c 	bl	801023c <ucdr_check_final_buffer_behavior_array>
 8017e24:	eba7 0108 	sub.w	r1, r7, r8
 8017e28:	4431      	add	r1, r6
 8017e2a:	4605      	mov	r5, r0
 8017e2c:	4602      	mov	r2, r0
 8017e2e:	2800      	cmp	r0, #0
 8017e30:	d1e8      	bne.n	8017e04 <ucdr_serialize_endian_array_double+0x54>
 8017e32:	7da0      	ldrb	r0, [r4, #22]
 8017e34:	2308      	movs	r3, #8
 8017e36:	7563      	strb	r3, [r4, #21]
 8017e38:	f080 0001 	eor.w	r0, r0, #1
 8017e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e40:	463a      	mov	r2, r7
 8017e42:	68a0      	ldr	r0, [r4, #8]
 8017e44:	4631      	mov	r1, r6
 8017e46:	f001 ffa4 	bl	8019d92 <memcpy>
 8017e4a:	68a2      	ldr	r2, [r4, #8]
 8017e4c:	6923      	ldr	r3, [r4, #16]
 8017e4e:	443a      	add	r2, r7
 8017e50:	441f      	add	r7, r3
 8017e52:	60a2      	str	r2, [r4, #8]
 8017e54:	6127      	str	r7, [r4, #16]
 8017e56:	e7ec      	b.n	8017e32 <ucdr_serialize_endian_array_double+0x82>

08017e58 <ucdr_deserialize_endian_array_double>:
 8017e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e5c:	4688      	mov	r8, r1
 8017e5e:	2108      	movs	r1, #8
 8017e60:	4605      	mov	r5, r0
 8017e62:	4614      	mov	r4, r2
 8017e64:	461f      	mov	r7, r3
 8017e66:	f7f8 f9c1 	bl	80101ec <ucdr_buffer_alignment>
 8017e6a:	4601      	mov	r1, r0
 8017e6c:	4628      	mov	r0, r5
 8017e6e:	7d6e      	ldrb	r6, [r5, #21]
 8017e70:	f7f8 fa00 	bl	8010274 <ucdr_advance_buffer>
 8017e74:	f1b8 0f01 	cmp.w	r8, #1
 8017e78:	756e      	strb	r6, [r5, #21]
 8017e7a:	d010      	beq.n	8017e9e <ucdr_deserialize_endian_array_double+0x46>
 8017e7c:	2600      	movs	r6, #0
 8017e7e:	b14f      	cbz	r7, 8017e94 <ucdr_deserialize_endian_array_double+0x3c>
 8017e80:	4622      	mov	r2, r4
 8017e82:	4641      	mov	r1, r8
 8017e84:	4628      	mov	r0, r5
 8017e86:	3601      	adds	r6, #1
 8017e88:	f7f8 f882 	bl	800ff90 <ucdr_deserialize_endian_double>
 8017e8c:	42b7      	cmp	r7, r6
 8017e8e:	f104 0408 	add.w	r4, r4, #8
 8017e92:	d1f5      	bne.n	8017e80 <ucdr_deserialize_endian_array_double+0x28>
 8017e94:	7da8      	ldrb	r0, [r5, #22]
 8017e96:	f080 0001 	eor.w	r0, r0, #1
 8017e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e9e:	00ff      	lsls	r7, r7, #3
 8017ea0:	4639      	mov	r1, r7
 8017ea2:	4628      	mov	r0, r5
 8017ea4:	f7f8 f942 	bl	801012c <ucdr_check_buffer_available_for>
 8017ea8:	b9f8      	cbnz	r0, 8017eea <ucdr_deserialize_endian_array_double+0x92>
 8017eaa:	46b8      	mov	r8, r7
 8017eac:	e00a      	b.n	8017ec4 <ucdr_deserialize_endian_array_double+0x6c>
 8017eae:	68a9      	ldr	r1, [r5, #8]
 8017eb0:	f001 ff6f 	bl	8019d92 <memcpy>
 8017eb4:	68aa      	ldr	r2, [r5, #8]
 8017eb6:	692b      	ldr	r3, [r5, #16]
 8017eb8:	4432      	add	r2, r6
 8017eba:	4433      	add	r3, r6
 8017ebc:	eba8 0806 	sub.w	r8, r8, r6
 8017ec0:	60aa      	str	r2, [r5, #8]
 8017ec2:	612b      	str	r3, [r5, #16]
 8017ec4:	2208      	movs	r2, #8
 8017ec6:	4641      	mov	r1, r8
 8017ec8:	4628      	mov	r0, r5
 8017eca:	f7f8 f9b7 	bl	801023c <ucdr_check_final_buffer_behavior_array>
 8017ece:	4606      	mov	r6, r0
 8017ed0:	eba7 0008 	sub.w	r0, r7, r8
 8017ed4:	4420      	add	r0, r4
 8017ed6:	4632      	mov	r2, r6
 8017ed8:	2e00      	cmp	r6, #0
 8017eda:	d1e8      	bne.n	8017eae <ucdr_deserialize_endian_array_double+0x56>
 8017edc:	7da8      	ldrb	r0, [r5, #22]
 8017ede:	2308      	movs	r3, #8
 8017ee0:	756b      	strb	r3, [r5, #21]
 8017ee2:	f080 0001 	eor.w	r0, r0, #1
 8017ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017eea:	463a      	mov	r2, r7
 8017eec:	68a9      	ldr	r1, [r5, #8]
 8017eee:	4620      	mov	r0, r4
 8017ef0:	f001 ff4f 	bl	8019d92 <memcpy>
 8017ef4:	68aa      	ldr	r2, [r5, #8]
 8017ef6:	692b      	ldr	r3, [r5, #16]
 8017ef8:	443a      	add	r2, r7
 8017efa:	441f      	add	r7, r3
 8017efc:	60aa      	str	r2, [r5, #8]
 8017efe:	612f      	str	r7, [r5, #16]
 8017f00:	e7ec      	b.n	8017edc <ucdr_deserialize_endian_array_double+0x84>
 8017f02:	bf00      	nop

08017f04 <ucdr_serialize_string>:
 8017f04:	b510      	push	{r4, lr}
 8017f06:	b082      	sub	sp, #8
 8017f08:	4604      	mov	r4, r0
 8017f0a:	4608      	mov	r0, r1
 8017f0c:	9101      	str	r1, [sp, #4]
 8017f0e:	f7e8 f991 	bl	8000234 <strlen>
 8017f12:	9901      	ldr	r1, [sp, #4]
 8017f14:	1c42      	adds	r2, r0, #1
 8017f16:	4620      	mov	r0, r4
 8017f18:	b002      	add	sp, #8
 8017f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f1e:	f7f8 b9c9 	b.w	80102b4 <ucdr_serialize_sequence_char>
 8017f22:	bf00      	nop

08017f24 <ucdr_deserialize_string>:
 8017f24:	b500      	push	{lr}
 8017f26:	b083      	sub	sp, #12
 8017f28:	ab01      	add	r3, sp, #4
 8017f2a:	f7f8 f9d5 	bl	80102d8 <ucdr_deserialize_sequence_char>
 8017f2e:	b003      	add	sp, #12
 8017f30:	f85d fb04 	ldr.w	pc, [sp], #4

08017f34 <uxr_init_input_best_effort_stream>:
 8017f34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017f38:	8003      	strh	r3, [r0, #0]
 8017f3a:	4770      	bx	lr

08017f3c <uxr_reset_input_best_effort_stream>:
 8017f3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017f40:	8003      	strh	r3, [r0, #0]
 8017f42:	4770      	bx	lr

08017f44 <uxr_receive_best_effort_message>:
 8017f44:	b538      	push	{r3, r4, r5, lr}
 8017f46:	4604      	mov	r4, r0
 8017f48:	8800      	ldrh	r0, [r0, #0]
 8017f4a:	460d      	mov	r5, r1
 8017f4c:	f000 fd42 	bl	80189d4 <uxr_seq_num_cmp>
 8017f50:	4603      	mov	r3, r0
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017f58:	bfb8      	it	lt
 8017f5a:	8025      	strhlt	r5, [r4, #0]
 8017f5c:	bd38      	pop	{r3, r4, r5, pc}
 8017f5e:	bf00      	nop

08017f60 <on_full_input_buffer>:
 8017f60:	b570      	push	{r4, r5, r6, lr}
 8017f62:	4605      	mov	r5, r0
 8017f64:	460c      	mov	r4, r1
 8017f66:	682b      	ldr	r3, [r5, #0]
 8017f68:	6809      	ldr	r1, [r1, #0]
 8017f6a:	8920      	ldrh	r0, [r4, #8]
 8017f6c:	6862      	ldr	r2, [r4, #4]
 8017f6e:	fbb2 f2f0 	udiv	r2, r2, r0
 8017f72:	eba3 0c01 	sub.w	ip, r3, r1
 8017f76:	fbbc fcf2 	udiv	ip, ip, r2
 8017f7a:	f10c 0c01 	add.w	ip, ip, #1
 8017f7e:	fa1f f38c 	uxth.w	r3, ip
 8017f82:	fbb3 f6f0 	udiv	r6, r3, r0
 8017f86:	fb00 3316 	mls	r3, r0, r6, r3
 8017f8a:	b29b      	uxth	r3, r3
 8017f8c:	fb02 f303 	mul.w	r3, r2, r3
 8017f90:	1d18      	adds	r0, r3, #4
 8017f92:	4408      	add	r0, r1
 8017f94:	7d26      	ldrb	r6, [r4, #20]
 8017f96:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8017f9a:	b116      	cbz	r6, 8017fa2 <on_full_input_buffer+0x42>
 8017f9c:	2600      	movs	r6, #0
 8017f9e:	f840 6c04 	str.w	r6, [r0, #-4]
 8017fa2:	2a03      	cmp	r2, #3
 8017fa4:	d801      	bhi.n	8017faa <on_full_input_buffer+0x4a>
 8017fa6:	2001      	movs	r0, #1
 8017fa8:	bd70      	pop	{r4, r5, r6, pc}
 8017faa:	3308      	adds	r3, #8
 8017fac:	4419      	add	r1, r3
 8017fae:	4628      	mov	r0, r5
 8017fb0:	692b      	ldr	r3, [r5, #16]
 8017fb2:	3a04      	subs	r2, #4
 8017fb4:	f7f8 f906 	bl	80101c4 <ucdr_init_buffer_origin>
 8017fb8:	4628      	mov	r0, r5
 8017fba:	4903      	ldr	r1, [pc, #12]	@ (8017fc8 <on_full_input_buffer+0x68>)
 8017fbc:	4622      	mov	r2, r4
 8017fbe:	f7f8 f8dd 	bl	801017c <ucdr_set_on_full_buffer_callback>
 8017fc2:	2000      	movs	r0, #0
 8017fc4:	bd70      	pop	{r4, r5, r6, pc}
 8017fc6:	bf00      	nop
 8017fc8:	08017f61 	.word	0x08017f61

08017fcc <uxr_init_input_reliable_stream>:
 8017fcc:	b500      	push	{lr}
 8017fce:	e9c0 1200 	strd	r1, r2, [r0]
 8017fd2:	f04f 0e00 	mov.w	lr, #0
 8017fd6:	9a01      	ldr	r2, [sp, #4]
 8017fd8:	8103      	strh	r3, [r0, #8]
 8017fda:	6102      	str	r2, [r0, #16]
 8017fdc:	f880 e014 	strb.w	lr, [r0, #20]
 8017fe0:	b1d3      	cbz	r3, 8018018 <uxr_init_input_reliable_stream+0x4c>
 8017fe2:	f8c1 e000 	str.w	lr, [r1]
 8017fe6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017fea:	f1bc 0f01 	cmp.w	ip, #1
 8017fee:	d913      	bls.n	8018018 <uxr_init_input_reliable_stream+0x4c>
 8017ff0:	2301      	movs	r3, #1
 8017ff2:	fbb3 f1fc 	udiv	r1, r3, ip
 8017ff6:	fb0c 3111 	mls	r1, ip, r1, r3
 8017ffa:	b289      	uxth	r1, r1
 8017ffc:	6842      	ldr	r2, [r0, #4]
 8017ffe:	fbb2 f2fc 	udiv	r2, r2, ip
 8018002:	fb01 f202 	mul.w	r2, r1, r2
 8018006:	6801      	ldr	r1, [r0, #0]
 8018008:	f841 e002 	str.w	lr, [r1, r2]
 801800c:	3301      	adds	r3, #1
 801800e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018012:	b29b      	uxth	r3, r3
 8018014:	459c      	cmp	ip, r3
 8018016:	d8ec      	bhi.n	8017ff2 <uxr_init_input_reliable_stream+0x26>
 8018018:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801801c:	60c3      	str	r3, [r0, #12]
 801801e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018022:	bf00      	nop

08018024 <uxr_reset_input_reliable_stream>:
 8018024:	8901      	ldrh	r1, [r0, #8]
 8018026:	b1e9      	cbz	r1, 8018064 <uxr_reset_input_reliable_stream+0x40>
 8018028:	f04f 0c00 	mov.w	ip, #0
 801802c:	b500      	push	{lr}
 801802e:	4663      	mov	r3, ip
 8018030:	46e6      	mov	lr, ip
 8018032:	fbb3 f2f1 	udiv	r2, r3, r1
 8018036:	fb01 3312 	mls	r3, r1, r2, r3
 801803a:	b29b      	uxth	r3, r3
 801803c:	6842      	ldr	r2, [r0, #4]
 801803e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018042:	fb02 f303 	mul.w	r3, r2, r3
 8018046:	6802      	ldr	r2, [r0, #0]
 8018048:	f842 e003 	str.w	lr, [r2, r3]
 801804c:	f10c 0c01 	add.w	ip, ip, #1
 8018050:	8901      	ldrh	r1, [r0, #8]
 8018052:	fa1f f38c 	uxth.w	r3, ip
 8018056:	4299      	cmp	r1, r3
 8018058:	d8eb      	bhi.n	8018032 <uxr_reset_input_reliable_stream+0xe>
 801805a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801805e:	60c3      	str	r3, [r0, #12]
 8018060:	f85d fb04 	ldr.w	pc, [sp], #4
 8018064:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018068:	60c3      	str	r3, [r0, #12]
 801806a:	4770      	bx	lr

0801806c <uxr_receive_reliable_message>:
 801806c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018070:	4604      	mov	r4, r0
 8018072:	460d      	mov	r5, r1
 8018074:	8901      	ldrh	r1, [r0, #8]
 8018076:	8980      	ldrh	r0, [r0, #12]
 8018078:	4690      	mov	r8, r2
 801807a:	461f      	mov	r7, r3
 801807c:	f000 fca2 	bl	80189c4 <uxr_seq_num_add>
 8018080:	4629      	mov	r1, r5
 8018082:	4606      	mov	r6, r0
 8018084:	89a0      	ldrh	r0, [r4, #12]
 8018086:	f000 fca5 	bl	80189d4 <uxr_seq_num_cmp>
 801808a:	2800      	cmp	r0, #0
 801808c:	db0a      	blt.n	80180a4 <uxr_receive_reliable_message+0x38>
 801808e:	2600      	movs	r6, #0
 8018090:	89e0      	ldrh	r0, [r4, #14]
 8018092:	4629      	mov	r1, r5
 8018094:	f000 fc9e 	bl	80189d4 <uxr_seq_num_cmp>
 8018098:	2800      	cmp	r0, #0
 801809a:	da00      	bge.n	801809e <uxr_receive_reliable_message+0x32>
 801809c:	81e5      	strh	r5, [r4, #14]
 801809e:	4630      	mov	r0, r6
 80180a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180a4:	4630      	mov	r0, r6
 80180a6:	4629      	mov	r1, r5
 80180a8:	f000 fc94 	bl	80189d4 <uxr_seq_num_cmp>
 80180ac:	2800      	cmp	r0, #0
 80180ae:	dbee      	blt.n	801808e <uxr_receive_reliable_message+0x22>
 80180b0:	6923      	ldr	r3, [r4, #16]
 80180b2:	4640      	mov	r0, r8
 80180b4:	4798      	blx	r3
 80180b6:	2101      	movs	r1, #1
 80180b8:	4681      	mov	r9, r0
 80180ba:	89a0      	ldrh	r0, [r4, #12]
 80180bc:	f000 fc82 	bl	80189c4 <uxr_seq_num_add>
 80180c0:	f1b9 0f00 	cmp.w	r9, #0
 80180c4:	d101      	bne.n	80180ca <uxr_receive_reliable_message+0x5e>
 80180c6:	4285      	cmp	r5, r0
 80180c8:	d047      	beq.n	801815a <uxr_receive_reliable_message+0xee>
 80180ca:	8922      	ldrh	r2, [r4, #8]
 80180cc:	fbb5 f0f2 	udiv	r0, r5, r2
 80180d0:	fb02 5010 	mls	r0, r2, r0, r5
 80180d4:	b280      	uxth	r0, r0
 80180d6:	6863      	ldr	r3, [r4, #4]
 80180d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80180dc:	fb00 f303 	mul.w	r3, r0, r3
 80180e0:	6820      	ldr	r0, [r4, #0]
 80180e2:	3304      	adds	r3, #4
 80180e4:	4418      	add	r0, r3
 80180e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d1cf      	bne.n	801808e <uxr_receive_reliable_message+0x22>
 80180ee:	4641      	mov	r1, r8
 80180f0:	463a      	mov	r2, r7
 80180f2:	f001 fe4e 	bl	8019d92 <memcpy>
 80180f6:	8921      	ldrh	r1, [r4, #8]
 80180f8:	fbb5 f2f1 	udiv	r2, r5, r1
 80180fc:	fb01 5212 	mls	r2, r1, r2, r5
 8018100:	b292      	uxth	r2, r2
 8018102:	6863      	ldr	r3, [r4, #4]
 8018104:	fbb3 f3f1 	udiv	r3, r3, r1
 8018108:	fb02 f303 	mul.w	r3, r2, r3
 801810c:	6822      	ldr	r2, [r4, #0]
 801810e:	50d7      	str	r7, [r2, r3]
 8018110:	9a08      	ldr	r2, [sp, #32]
 8018112:	2301      	movs	r3, #1
 8018114:	7013      	strb	r3, [r2, #0]
 8018116:	f1b9 0f00 	cmp.w	r9, #0
 801811a:	d0b8      	beq.n	801808e <uxr_receive_reliable_message+0x22>
 801811c:	89a6      	ldrh	r6, [r4, #12]
 801811e:	4630      	mov	r0, r6
 8018120:	2101      	movs	r1, #1
 8018122:	f000 fc4f 	bl	80189c4 <uxr_seq_num_add>
 8018126:	8922      	ldrh	r2, [r4, #8]
 8018128:	6863      	ldr	r3, [r4, #4]
 801812a:	fbb3 f3f2 	udiv	r3, r3, r2
 801812e:	4606      	mov	r6, r0
 8018130:	fbb0 f0f2 	udiv	r0, r0, r2
 8018134:	fb02 6010 	mls	r0, r2, r0, r6
 8018138:	b280      	uxth	r0, r0
 801813a:	fb00 f303 	mul.w	r3, r0, r3
 801813e:	6820      	ldr	r0, [r4, #0]
 8018140:	3304      	adds	r3, #4
 8018142:	4418      	add	r0, r3
 8018144:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d0a0      	beq.n	801808e <uxr_receive_reliable_message+0x22>
 801814c:	6923      	ldr	r3, [r4, #16]
 801814e:	4798      	blx	r3
 8018150:	2802      	cmp	r0, #2
 8018152:	d008      	beq.n	8018166 <uxr_receive_reliable_message+0xfa>
 8018154:	2801      	cmp	r0, #1
 8018156:	d0e2      	beq.n	801811e <uxr_receive_reliable_message+0xb2>
 8018158:	e799      	b.n	801808e <uxr_receive_reliable_message+0x22>
 801815a:	9b08      	ldr	r3, [sp, #32]
 801815c:	81a5      	strh	r5, [r4, #12]
 801815e:	2601      	movs	r6, #1
 8018160:	f883 9000 	strb.w	r9, [r3]
 8018164:	e794      	b.n	8018090 <uxr_receive_reliable_message+0x24>
 8018166:	2601      	movs	r6, #1
 8018168:	e792      	b.n	8018090 <uxr_receive_reliable_message+0x24>
 801816a:	bf00      	nop

0801816c <uxr_next_input_reliable_buffer_available>:
 801816c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018170:	4604      	mov	r4, r0
 8018172:	460f      	mov	r7, r1
 8018174:	8980      	ldrh	r0, [r0, #12]
 8018176:	2101      	movs	r1, #1
 8018178:	4690      	mov	r8, r2
 801817a:	f000 fc23 	bl	80189c4 <uxr_seq_num_add>
 801817e:	8922      	ldrh	r2, [r4, #8]
 8018180:	fbb0 f6f2 	udiv	r6, r0, r2
 8018184:	fb02 0616 	mls	r6, r2, r6, r0
 8018188:	b2b6      	uxth	r6, r6
 801818a:	6863      	ldr	r3, [r4, #4]
 801818c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018190:	fb06 f303 	mul.w	r3, r6, r3
 8018194:	6826      	ldr	r6, [r4, #0]
 8018196:	3304      	adds	r3, #4
 8018198:	441e      	add	r6, r3
 801819a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801819e:	f1b9 0f00 	cmp.w	r9, #0
 80181a2:	d023      	beq.n	80181ec <uxr_next_input_reliable_buffer_available+0x80>
 80181a4:	6923      	ldr	r3, [r4, #16]
 80181a6:	4605      	mov	r5, r0
 80181a8:	4630      	mov	r0, r6
 80181aa:	4798      	blx	r3
 80181ac:	4682      	mov	sl, r0
 80181ae:	b300      	cbz	r0, 80181f2 <uxr_next_input_reliable_buffer_available+0x86>
 80181b0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80181b4:	2101      	movs	r1, #1
 80181b6:	4650      	mov	r0, sl
 80181b8:	f000 fc04 	bl	80189c4 <uxr_seq_num_add>
 80181bc:	8921      	ldrh	r1, [r4, #8]
 80181be:	fbb0 f2f1 	udiv	r2, r0, r1
 80181c2:	4682      	mov	sl, r0
 80181c4:	fb01 0212 	mls	r2, r1, r2, r0
 80181c8:	e9d4 0300 	ldrd	r0, r3, [r4]
 80181cc:	b292      	uxth	r2, r2
 80181ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80181d2:	fb02 f303 	mul.w	r3, r2, r3
 80181d6:	3304      	adds	r3, #4
 80181d8:	4418      	add	r0, r3
 80181da:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80181de:	b12b      	cbz	r3, 80181ec <uxr_next_input_reliable_buffer_available+0x80>
 80181e0:	6923      	ldr	r3, [r4, #16]
 80181e2:	4798      	blx	r3
 80181e4:	2802      	cmp	r0, #2
 80181e6:	d01b      	beq.n	8018220 <uxr_next_input_reliable_buffer_available+0xb4>
 80181e8:	2801      	cmp	r0, #1
 80181ea:	d0e3      	beq.n	80181b4 <uxr_next_input_reliable_buffer_available+0x48>
 80181ec:	2000      	movs	r0, #0
 80181ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181f2:	464a      	mov	r2, r9
 80181f4:	4631      	mov	r1, r6
 80181f6:	4638      	mov	r0, r7
 80181f8:	f7f7 ffec 	bl	80101d4 <ucdr_init_buffer>
 80181fc:	8921      	ldrh	r1, [r4, #8]
 80181fe:	fbb5 f2f1 	udiv	r2, r5, r1
 8018202:	fb01 5212 	mls	r2, r1, r2, r5
 8018206:	b292      	uxth	r2, r2
 8018208:	6863      	ldr	r3, [r4, #4]
 801820a:	fbb3 f3f1 	udiv	r3, r3, r1
 801820e:	fb02 f303 	mul.w	r3, r2, r3
 8018212:	6822      	ldr	r2, [r4, #0]
 8018214:	f842 a003 	str.w	sl, [r2, r3]
 8018218:	2001      	movs	r0, #1
 801821a:	81a5      	strh	r5, [r4, #12]
 801821c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018220:	8920      	ldrh	r0, [r4, #8]
 8018222:	fbb5 f3f0 	udiv	r3, r5, r0
 8018226:	fb00 5513 	mls	r5, r0, r3, r5
 801822a:	b2ad      	uxth	r5, r5
 801822c:	6863      	ldr	r3, [r4, #4]
 801822e:	fbb3 f3f0 	udiv	r3, r3, r0
 8018232:	fb03 f505 	mul.w	r5, r3, r5
 8018236:	6823      	ldr	r3, [r4, #0]
 8018238:	2000      	movs	r0, #0
 801823a:	5158      	str	r0, [r3, r5]
 801823c:	eb06 0108 	add.w	r1, r6, r8
 8018240:	eba9 0208 	sub.w	r2, r9, r8
 8018244:	4638      	mov	r0, r7
 8018246:	f7f7 ffc5 	bl	80101d4 <ucdr_init_buffer>
 801824a:	4638      	mov	r0, r7
 801824c:	4903      	ldr	r1, [pc, #12]	@ (801825c <uxr_next_input_reliable_buffer_available+0xf0>)
 801824e:	4622      	mov	r2, r4
 8018250:	f7f7 ff94 	bl	801017c <ucdr_set_on_full_buffer_callback>
 8018254:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018258:	2001      	movs	r0, #1
 801825a:	e7c8      	b.n	80181ee <uxr_next_input_reliable_buffer_available+0x82>
 801825c:	08017f61 	.word	0x08017f61

08018260 <uxr_process_heartbeat>:
 8018260:	b538      	push	{r3, r4, r5, lr}
 8018262:	4611      	mov	r1, r2
 8018264:	4604      	mov	r4, r0
 8018266:	89c0      	ldrh	r0, [r0, #14]
 8018268:	4615      	mov	r5, r2
 801826a:	f000 fbb3 	bl	80189d4 <uxr_seq_num_cmp>
 801826e:	2800      	cmp	r0, #0
 8018270:	bfb8      	it	lt
 8018272:	81e5      	strhlt	r5, [r4, #14]
 8018274:	bd38      	pop	{r3, r4, r5, pc}
 8018276:	bf00      	nop

08018278 <uxr_compute_acknack>:
 8018278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801827c:	8903      	ldrh	r3, [r0, #8]
 801827e:	8985      	ldrh	r5, [r0, #12]
 8018280:	4604      	mov	r4, r0
 8018282:	460e      	mov	r6, r1
 8018284:	b1d3      	cbz	r3, 80182bc <uxr_compute_acknack+0x44>
 8018286:	4628      	mov	r0, r5
 8018288:	2701      	movs	r7, #1
 801828a:	e003      	b.n	8018294 <uxr_compute_acknack+0x1c>
 801828c:	4567      	cmp	r7, ip
 801828e:	d215      	bcs.n	80182bc <uxr_compute_acknack+0x44>
 8018290:	89a0      	ldrh	r0, [r4, #12]
 8018292:	3701      	adds	r7, #1
 8018294:	b2b9      	uxth	r1, r7
 8018296:	f000 fb95 	bl	80189c4 <uxr_seq_num_add>
 801829a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801829e:	fbb0 f3fc 	udiv	r3, r0, ip
 80182a2:	fb0c 0313 	mls	r3, ip, r3, r0
 80182a6:	b29a      	uxth	r2, r3
 80182a8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80182ac:	fbb3 f3fc 	udiv	r3, r3, ip
 80182b0:	fb02 f303 	mul.w	r3, r2, r3
 80182b4:	58cb      	ldr	r3, [r1, r3]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d1e8      	bne.n	801828c <uxr_compute_acknack+0x14>
 80182ba:	4605      	mov	r5, r0
 80182bc:	8035      	strh	r5, [r6, #0]
 80182be:	2101      	movs	r1, #1
 80182c0:	4628      	mov	r0, r5
 80182c2:	89e7      	ldrh	r7, [r4, #14]
 80182c4:	f000 fb82 	bl	80189cc <uxr_seq_num_sub>
 80182c8:	4601      	mov	r1, r0
 80182ca:	4638      	mov	r0, r7
 80182cc:	f000 fb7e 	bl	80189cc <uxr_seq_num_sub>
 80182d0:	4605      	mov	r5, r0
 80182d2:	b318      	cbz	r0, 801831c <uxr_compute_acknack+0xa4>
 80182d4:	f04f 0900 	mov.w	r9, #0
 80182d8:	464f      	mov	r7, r9
 80182da:	f04f 0801 	mov.w	r8, #1
 80182de:	fa1f f189 	uxth.w	r1, r9
 80182e2:	8830      	ldrh	r0, [r6, #0]
 80182e4:	f000 fb6e 	bl	80189c4 <uxr_seq_num_add>
 80182e8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80182ec:	fbb0 f3fc 	udiv	r3, r0, ip
 80182f0:	e9d4 1200 	ldrd	r1, r2, [r4]
 80182f4:	fb03 001c 	mls	r0, r3, ip, r0
 80182f8:	b283      	uxth	r3, r0
 80182fa:	fbb2 f2fc 	udiv	r2, r2, ip
 80182fe:	fb02 f303 	mul.w	r3, r2, r3
 8018302:	fa08 f209 	lsl.w	r2, r8, r9
 8018306:	58cb      	ldr	r3, [r1, r3]
 8018308:	f109 0901 	add.w	r9, r9, #1
 801830c:	b90b      	cbnz	r3, 8018312 <uxr_compute_acknack+0x9a>
 801830e:	4317      	orrs	r7, r2
 8018310:	b2bf      	uxth	r7, r7
 8018312:	454d      	cmp	r5, r9
 8018314:	d1e3      	bne.n	80182de <uxr_compute_acknack+0x66>
 8018316:	4638      	mov	r0, r7
 8018318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801831c:	4607      	mov	r7, r0
 801831e:	4638      	mov	r0, r7
 8018320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018324 <uxr_init_output_best_effort_stream>:
 8018324:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018328:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801832c:	6001      	str	r1, [r0, #0]
 801832e:	7303      	strb	r3, [r0, #12]
 8018330:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018334:	4770      	bx	lr
 8018336:	bf00      	nop

08018338 <uxr_reset_output_best_effort_stream>:
 8018338:	7b02      	ldrb	r2, [r0, #12]
 801833a:	6042      	str	r2, [r0, #4]
 801833c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018340:	81c3      	strh	r3, [r0, #14]
 8018342:	4770      	bx	lr

08018344 <uxr_prepare_best_effort_buffer_to_write>:
 8018344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018346:	4604      	mov	r4, r0
 8018348:	b083      	sub	sp, #12
 801834a:	6840      	ldr	r0, [r0, #4]
 801834c:	460d      	mov	r5, r1
 801834e:	4616      	mov	r6, r2
 8018350:	f7fa fa68 	bl	8012824 <uxr_submessage_padding>
 8018354:	6863      	ldr	r3, [r4, #4]
 8018356:	4418      	add	r0, r3
 8018358:	68a3      	ldr	r3, [r4, #8]
 801835a:	1942      	adds	r2, r0, r5
 801835c:	4293      	cmp	r3, r2
 801835e:	bf2c      	ite	cs
 8018360:	2701      	movcs	r7, #1
 8018362:	2700      	movcc	r7, #0
 8018364:	d202      	bcs.n	801836c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018366:	4638      	mov	r0, r7
 8018368:	b003      	add	sp, #12
 801836a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801836c:	9000      	str	r0, [sp, #0]
 801836e:	6821      	ldr	r1, [r4, #0]
 8018370:	4630      	mov	r0, r6
 8018372:	2300      	movs	r3, #0
 8018374:	f7f7 ff1c 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 8018378:	6861      	ldr	r1, [r4, #4]
 801837a:	4638      	mov	r0, r7
 801837c:	4429      	add	r1, r5
 801837e:	6061      	str	r1, [r4, #4]
 8018380:	b003      	add	sp, #12
 8018382:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018384 <uxr_prepare_best_effort_buffer_to_send>:
 8018384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018388:	4604      	mov	r4, r0
 801838a:	461d      	mov	r5, r3
 801838c:	6840      	ldr	r0, [r0, #4]
 801838e:	7b23      	ldrb	r3, [r4, #12]
 8018390:	4298      	cmp	r0, r3
 8018392:	bf8c      	ite	hi
 8018394:	2601      	movhi	r6, #1
 8018396:	2600      	movls	r6, #0
 8018398:	d802      	bhi.n	80183a0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801839a:	4630      	mov	r0, r6
 801839c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183a0:	4688      	mov	r8, r1
 80183a2:	89e0      	ldrh	r0, [r4, #14]
 80183a4:	2101      	movs	r1, #1
 80183a6:	4617      	mov	r7, r2
 80183a8:	f000 fb0c 	bl	80189c4 <uxr_seq_num_add>
 80183ac:	6823      	ldr	r3, [r4, #0]
 80183ae:	81e0      	strh	r0, [r4, #14]
 80183b0:	8028      	strh	r0, [r5, #0]
 80183b2:	f8c8 3000 	str.w	r3, [r8]
 80183b6:	6863      	ldr	r3, [r4, #4]
 80183b8:	603b      	str	r3, [r7, #0]
 80183ba:	7b23      	ldrb	r3, [r4, #12]
 80183bc:	6063      	str	r3, [r4, #4]
 80183be:	4630      	mov	r0, r6
 80183c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080183c4 <on_full_output_buffer>:
 80183c4:	b538      	push	{r3, r4, r5, lr}
 80183c6:	6802      	ldr	r2, [r0, #0]
 80183c8:	460c      	mov	r4, r1
 80183ca:	6809      	ldr	r1, [r1, #0]
 80183cc:	8923      	ldrh	r3, [r4, #8]
 80183ce:	eba2 0c01 	sub.w	ip, r2, r1
 80183d2:	6862      	ldr	r2, [r4, #4]
 80183d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80183d8:	fbbc fcf2 	udiv	ip, ip, r2
 80183dc:	f10c 0c01 	add.w	ip, ip, #1
 80183e0:	fa1f fc8c 	uxth.w	ip, ip
 80183e4:	fbbc fef3 	udiv	lr, ip, r3
 80183e8:	fb03 c31e 	mls	r3, r3, lr, ip
 80183ec:	b29b      	uxth	r3, r3
 80183ee:	fb02 f303 	mul.w	r3, r2, r3
 80183f2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80183f6:	58ca      	ldr	r2, [r1, r3]
 80183f8:	4463      	add	r3, ip
 80183fa:	eba2 020c 	sub.w	r2, r2, ip
 80183fe:	3308      	adds	r3, #8
 8018400:	4605      	mov	r5, r0
 8018402:	4419      	add	r1, r3
 8018404:	3a04      	subs	r2, #4
 8018406:	6903      	ldr	r3, [r0, #16]
 8018408:	f7f7 fedc 	bl	80101c4 <ucdr_init_buffer_origin>
 801840c:	4628      	mov	r0, r5
 801840e:	4903      	ldr	r1, [pc, #12]	@ (801841c <on_full_output_buffer+0x58>)
 8018410:	4622      	mov	r2, r4
 8018412:	f7f7 feb3 	bl	801017c <ucdr_set_on_full_buffer_callback>
 8018416:	2000      	movs	r0, #0
 8018418:	bd38      	pop	{r3, r4, r5, pc}
 801841a:	bf00      	nop
 801841c:	080183c5 	.word	0x080183c5

08018420 <uxr_init_output_reliable_stream>:
 8018420:	b410      	push	{r4}
 8018422:	f89d c004 	ldrb.w	ip, [sp, #4]
 8018426:	8103      	strh	r3, [r0, #8]
 8018428:	e9c0 1200 	strd	r1, r2, [r0]
 801842c:	f880 c00c 	strb.w	ip, [r0, #12]
 8018430:	b1d3      	cbz	r3, 8018468 <uxr_init_output_reliable_stream+0x48>
 8018432:	f8c1 c000 	str.w	ip, [r1]
 8018436:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801843a:	f1bc 0f01 	cmp.w	ip, #1
 801843e:	d913      	bls.n	8018468 <uxr_init_output_reliable_stream+0x48>
 8018440:	2301      	movs	r3, #1
 8018442:	fbb3 f1fc 	udiv	r1, r3, ip
 8018446:	fb0c 3111 	mls	r1, ip, r1, r3
 801844a:	b289      	uxth	r1, r1
 801844c:	6842      	ldr	r2, [r0, #4]
 801844e:	6804      	ldr	r4, [r0, #0]
 8018450:	fbb2 f2fc 	udiv	r2, r2, ip
 8018454:	fb01 f202 	mul.w	r2, r1, r2
 8018458:	7b01      	ldrb	r1, [r0, #12]
 801845a:	50a1      	str	r1, [r4, r2]
 801845c:	3301      	adds	r3, #1
 801845e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018462:	b29b      	uxth	r3, r3
 8018464:	459c      	cmp	ip, r3
 8018466:	d8ec      	bhi.n	8018442 <uxr_init_output_reliable_stream+0x22>
 8018468:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801846c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018470:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018474:	4905      	ldr	r1, [pc, #20]	@ (801848c <uxr_init_output_reliable_stream+0x6c>)
 8018476:	f85d 4b04 	ldr.w	r4, [sp], #4
 801847a:	f8c0 100e 	str.w	r1, [r0, #14]
 801847e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018482:	2300      	movs	r3, #0
 8018484:	8242      	strh	r2, [r0, #18]
 8018486:	8403      	strh	r3, [r0, #32]
 8018488:	4770      	bx	lr
 801848a:	bf00      	nop
 801848c:	ffff0000 	.word	0xffff0000

08018490 <uxr_reset_output_reliable_stream>:
 8018490:	8901      	ldrh	r1, [r0, #8]
 8018492:	b1b1      	cbz	r1, 80184c2 <uxr_reset_output_reliable_stream+0x32>
 8018494:	f04f 0c00 	mov.w	ip, #0
 8018498:	4663      	mov	r3, ip
 801849a:	fbb3 f2f1 	udiv	r2, r3, r1
 801849e:	fb01 3312 	mls	r3, r1, r2, r3
 80184a2:	b29b      	uxth	r3, r3
 80184a4:	6842      	ldr	r2, [r0, #4]
 80184a6:	fbb2 f2f1 	udiv	r2, r2, r1
 80184aa:	6801      	ldr	r1, [r0, #0]
 80184ac:	fb02 f303 	mul.w	r3, r2, r3
 80184b0:	7b02      	ldrb	r2, [r0, #12]
 80184b2:	50ca      	str	r2, [r1, r3]
 80184b4:	f10c 0c01 	add.w	ip, ip, #1
 80184b8:	8901      	ldrh	r1, [r0, #8]
 80184ba:	fa1f f38c 	uxth.w	r3, ip
 80184be:	4299      	cmp	r1, r3
 80184c0:	d8eb      	bhi.n	801849a <uxr_reset_output_reliable_stream+0xa>
 80184c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80184c6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80184ca:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80184ce:	4904      	ldr	r1, [pc, #16]	@ (80184e0 <uxr_reset_output_reliable_stream+0x50>)
 80184d0:	f8c0 100e 	str.w	r1, [r0, #14]
 80184d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80184d8:	2300      	movs	r3, #0
 80184da:	8242      	strh	r2, [r0, #18]
 80184dc:	8403      	strh	r3, [r0, #32]
 80184de:	4770      	bx	lr
 80184e0:	ffff0000 	.word	0xffff0000

080184e4 <uxr_prepare_reliable_buffer_to_write>:
 80184e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e8:	4604      	mov	r4, r0
 80184ea:	b091      	sub	sp, #68	@ 0x44
 80184ec:	8900      	ldrh	r0, [r0, #8]
 80184ee:	89e6      	ldrh	r6, [r4, #14]
 80184f0:	6823      	ldr	r3, [r4, #0]
 80184f2:	9204      	str	r2, [sp, #16]
 80184f4:	fbb6 f2f0 	udiv	r2, r6, r0
 80184f8:	fb00 6212 	mls	r2, r0, r2, r6
 80184fc:	b292      	uxth	r2, r2
 80184fe:	6865      	ldr	r5, [r4, #4]
 8018500:	fbb5 f5f0 	udiv	r5, r5, r0
 8018504:	fb05 3202 	mla	r2, r5, r2, r3
 8018508:	3204      	adds	r2, #4
 801850a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801850e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8018512:	9203      	str	r2, [sp, #12]
 8018514:	468b      	mov	fp, r1
 8018516:	1f2f      	subs	r7, r5, #4
 8018518:	2800      	cmp	r0, #0
 801851a:	f000 814c 	beq.w	80187b6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801851e:	f04f 0c00 	mov.w	ip, #0
 8018522:	46e2      	mov	sl, ip
 8018524:	4661      	mov	r1, ip
 8018526:	fbb1 f2f0 	udiv	r2, r1, r0
 801852a:	fb00 1212 	mls	r2, r0, r2, r1
 801852e:	b292      	uxth	r2, r2
 8018530:	fb05 f202 	mul.w	r2, r5, r2
 8018534:	f10c 0c01 	add.w	ip, ip, #1
 8018538:	589a      	ldr	r2, [r3, r2]
 801853a:	454a      	cmp	r2, r9
 801853c:	bf08      	it	eq
 801853e:	f10a 0a01 	addeq.w	sl, sl, #1
 8018542:	fa1f f18c 	uxth.w	r1, ip
 8018546:	bf08      	it	eq
 8018548:	fa1f fa8a 	uxtheq.w	sl, sl
 801854c:	4281      	cmp	r1, r0
 801854e:	d3ea      	bcc.n	8018526 <uxr_prepare_reliable_buffer_to_write+0x42>
 8018550:	4640      	mov	r0, r8
 8018552:	2104      	movs	r1, #4
 8018554:	f8cd a014 	str.w	sl, [sp, #20]
 8018558:	f7f7 fe40 	bl	80101dc <ucdr_alignment>
 801855c:	4480      	add	r8, r0
 801855e:	eb08 020b 	add.w	r2, r8, fp
 8018562:	42ba      	cmp	r2, r7
 8018564:	f240 80cd 	bls.w	8018702 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8018568:	7b22      	ldrb	r2, [r4, #12]
 801856a:	445a      	add	r2, fp
 801856c:	42ba      	cmp	r2, r7
 801856e:	f240 80b5 	bls.w	80186dc <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8018572:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8018576:	33fc      	adds	r3, #252	@ 0xfc
 8018578:	b2ba      	uxth	r2, r7
 801857a:	4413      	add	r3, r2
 801857c:	b29b      	uxth	r3, r3
 801857e:	fb0a f903 	mul.w	r9, sl, r3
 8018582:	45d9      	cmp	r9, fp
 8018584:	9305      	str	r3, [sp, #20]
 8018586:	9306      	str	r3, [sp, #24]
 8018588:	f0c0 80b7 	bcc.w	80186fa <uxr_prepare_reliable_buffer_to_write+0x216>
 801858c:	f108 0304 	add.w	r3, r8, #4
 8018590:	42bb      	cmp	r3, r7
 8018592:	f080 80db 	bcs.w	801874c <uxr_prepare_reliable_buffer_to_write+0x268>
 8018596:	f1a2 0904 	sub.w	r9, r2, #4
 801859a:	eba9 0908 	sub.w	r9, r9, r8
 801859e:	9b05      	ldr	r3, [sp, #20]
 80185a0:	fa1f f989 	uxth.w	r9, r9
 80185a4:	ebab 0b09 	sub.w	fp, fp, r9
 80185a8:	fbbb f2f3 	udiv	r2, fp, r3
 80185ac:	fb03 b312 	mls	r3, r3, r2, fp
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	f000 80c8 	beq.w	8018746 <uxr_prepare_reliable_buffer_to_write+0x262>
 80185b6:	3201      	adds	r2, #1
 80185b8:	b292      	uxth	r2, r2
 80185ba:	9306      	str	r3, [sp, #24]
 80185bc:	4552      	cmp	r2, sl
 80185be:	f200 809c 	bhi.w	80186fa <uxr_prepare_reliable_buffer_to_write+0x216>
 80185c2:	f10d 0b20 	add.w	fp, sp, #32
 80185c6:	2a00      	cmp	r2, #0
 80185c8:	d042      	beq.n	8018650 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80185ca:	f8cd 801c 	str.w	r8, [sp, #28]
 80185ce:	f04f 0a00 	mov.w	sl, #0
 80185d2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80185d6:	9505      	str	r5, [sp, #20]
 80185d8:	f10d 0b20 	add.w	fp, sp, #32
 80185dc:	4615      	mov	r5, r2
 80185de:	e000      	b.n	80185e2 <uxr_prepare_reliable_buffer_to_write+0xfe>
 80185e0:	46c1      	mov	r9, r8
 80185e2:	8920      	ldrh	r0, [r4, #8]
 80185e4:	fbb6 f2f0 	udiv	r2, r6, r0
 80185e8:	fb00 6112 	mls	r1, r0, r2, r6
 80185ec:	b28a      	uxth	r2, r1
 80185ee:	6863      	ldr	r3, [r4, #4]
 80185f0:	fbb3 f1f0 	udiv	r1, r3, r0
 80185f4:	6823      	ldr	r3, [r4, #0]
 80185f6:	fb02 f101 	mul.w	r1, r2, r1
 80185fa:	3104      	adds	r1, #4
 80185fc:	4419      	add	r1, r3
 80185fe:	4658      	mov	r0, fp
 8018600:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018604:	9200      	str	r2, [sp, #0]
 8018606:	2300      	movs	r3, #0
 8018608:	463a      	mov	r2, r7
 801860a:	f7f7 fdd1 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 801860e:	464a      	mov	r2, r9
 8018610:	2300      	movs	r3, #0
 8018612:	210d      	movs	r1, #13
 8018614:	4658      	mov	r0, fp
 8018616:	f7fa f8c5 	bl	80127a4 <uxr_buffer_submessage_header>
 801861a:	8921      	ldrh	r1, [r4, #8]
 801861c:	fbb6 f2f1 	udiv	r2, r6, r1
 8018620:	fb01 6212 	mls	r2, r1, r2, r6
 8018624:	b292      	uxth	r2, r2
 8018626:	6863      	ldr	r3, [r4, #4]
 8018628:	fbb3 f3f1 	udiv	r3, r3, r1
 801862c:	fb02 f303 	mul.w	r3, r2, r3
 8018630:	6822      	ldr	r2, [r4, #0]
 8018632:	4630      	mov	r0, r6
 8018634:	50d7      	str	r7, [r2, r3]
 8018636:	2101      	movs	r1, #1
 8018638:	f000 f9c4 	bl	80189c4 <uxr_seq_num_add>
 801863c:	f10a 0a01 	add.w	sl, sl, #1
 8018640:	fa1f f38a 	uxth.w	r3, sl
 8018644:	429d      	cmp	r5, r3
 8018646:	4606      	mov	r6, r0
 8018648:	d8ca      	bhi.n	80185e0 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801864a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801864e:	9d05      	ldr	r5, [sp, #20]
 8018650:	8920      	ldrh	r0, [r4, #8]
 8018652:	fbb6 f3f0 	udiv	r3, r6, r0
 8018656:	fb00 6313 	mls	r3, r0, r3, r6
 801865a:	b299      	uxth	r1, r3
 801865c:	6863      	ldr	r3, [r4, #4]
 801865e:	fbb3 f3f0 	udiv	r3, r3, r0
 8018662:	fb01 f303 	mul.w	r3, r1, r3
 8018666:	6821      	ldr	r1, [r4, #0]
 8018668:	3304      	adds	r3, #4
 801866a:	4419      	add	r1, r3
 801866c:	463a      	mov	r2, r7
 801866e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018672:	9000      	str	r0, [sp, #0]
 8018674:	2300      	movs	r3, #0
 8018676:	4658      	mov	r0, fp
 8018678:	f7f7 fd9a 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 801867c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018680:	4658      	mov	r0, fp
 8018682:	fa1f f289 	uxth.w	r2, r9
 8018686:	2302      	movs	r3, #2
 8018688:	210d      	movs	r1, #13
 801868a:	f7fa f88b 	bl	80127a4 <uxr_buffer_submessage_header>
 801868e:	9b03      	ldr	r3, [sp, #12]
 8018690:	8927      	ldrh	r7, [r4, #8]
 8018692:	7b20      	ldrb	r0, [r4, #12]
 8018694:	f108 0104 	add.w	r1, r8, #4
 8018698:	440b      	add	r3, r1
 801869a:	4619      	mov	r1, r3
 801869c:	fbb6 f3f7 	udiv	r3, r6, r7
 80186a0:	fb07 6313 	mls	r3, r7, r3, r6
 80186a4:	f1a5 0208 	sub.w	r2, r5, #8
 80186a8:	b29d      	uxth	r5, r3
 80186aa:	3004      	adds	r0, #4
 80186ac:	6863      	ldr	r3, [r4, #4]
 80186ae:	fbb3 f3f7 	udiv	r3, r3, r7
 80186b2:	fb05 f303 	mul.w	r3, r5, r3
 80186b6:	6825      	ldr	r5, [r4, #0]
 80186b8:	4448      	add	r0, r9
 80186ba:	50e8      	str	r0, [r5, r3]
 80186bc:	9d04      	ldr	r5, [sp, #16]
 80186be:	eba2 0208 	sub.w	r2, r2, r8
 80186c2:	4628      	mov	r0, r5
 80186c4:	f7f7 fd86 	bl	80101d4 <ucdr_init_buffer>
 80186c8:	4628      	mov	r0, r5
 80186ca:	493c      	ldr	r1, [pc, #240]	@ (80187bc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80186cc:	4622      	mov	r2, r4
 80186ce:	f7f7 fd55 	bl	801017c <ucdr_set_on_full_buffer_callback>
 80186d2:	2001      	movs	r0, #1
 80186d4:	81e6      	strh	r6, [r4, #14]
 80186d6:	b011      	add	sp, #68	@ 0x44
 80186d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186dc:	2101      	movs	r1, #1
 80186de:	89e0      	ldrh	r0, [r4, #14]
 80186e0:	f000 f970 	bl	80189c4 <uxr_seq_num_add>
 80186e4:	8921      	ldrh	r1, [r4, #8]
 80186e6:	4605      	mov	r5, r0
 80186e8:	8a60      	ldrh	r0, [r4, #18]
 80186ea:	f000 f96b 	bl	80189c4 <uxr_seq_num_add>
 80186ee:	4601      	mov	r1, r0
 80186f0:	4628      	mov	r0, r5
 80186f2:	f000 f96f 	bl	80189d4 <uxr_seq_num_cmp>
 80186f6:	2800      	cmp	r0, #0
 80186f8:	dd42      	ble.n	8018780 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80186fa:	2000      	movs	r0, #0
 80186fc:	b011      	add	sp, #68	@ 0x44
 80186fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018702:	8921      	ldrh	r1, [r4, #8]
 8018704:	8a60      	ldrh	r0, [r4, #18]
 8018706:	9205      	str	r2, [sp, #20]
 8018708:	f000 f95c 	bl	80189c4 <uxr_seq_num_add>
 801870c:	4601      	mov	r1, r0
 801870e:	4630      	mov	r0, r6
 8018710:	f000 f960 	bl	80189d4 <uxr_seq_num_cmp>
 8018714:	2800      	cmp	r0, #0
 8018716:	9a05      	ldr	r2, [sp, #20]
 8018718:	dcef      	bgt.n	80186fa <uxr_prepare_reliable_buffer_to_write+0x216>
 801871a:	8927      	ldrh	r7, [r4, #8]
 801871c:	fbb6 f3f7 	udiv	r3, r6, r7
 8018720:	fb07 6313 	mls	r3, r7, r3, r6
 8018724:	b29d      	uxth	r5, r3
 8018726:	6863      	ldr	r3, [r4, #4]
 8018728:	6824      	ldr	r4, [r4, #0]
 801872a:	fbb3 f3f7 	udiv	r3, r3, r7
 801872e:	fb05 f303 	mul.w	r3, r5, r3
 8018732:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018736:	50e2      	str	r2, [r4, r3]
 8018738:	2300      	movs	r3, #0
 801873a:	f8cd 8000 	str.w	r8, [sp]
 801873e:	f7f7 fd37 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 8018742:	2001      	movs	r0, #1
 8018744:	e7da      	b.n	80186fc <uxr_prepare_reliable_buffer_to_write+0x218>
 8018746:	b293      	uxth	r3, r2
 8018748:	461a      	mov	r2, r3
 801874a:	e737      	b.n	80185bc <uxr_prepare_reliable_buffer_to_write+0xd8>
 801874c:	4630      	mov	r0, r6
 801874e:	2101      	movs	r1, #1
 8018750:	9207      	str	r2, [sp, #28]
 8018752:	f000 f937 	bl	80189c4 <uxr_seq_num_add>
 8018756:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801875a:	fbb0 f1fc 	udiv	r1, r0, ip
 801875e:	fb0c 0111 	mls	r1, ip, r1, r0
 8018762:	4606      	mov	r6, r0
 8018764:	b288      	uxth	r0, r1
 8018766:	6863      	ldr	r3, [r4, #4]
 8018768:	fbb3 f1fc 	udiv	r1, r3, ip
 801876c:	6823      	ldr	r3, [r4, #0]
 801876e:	9a07      	ldr	r2, [sp, #28]
 8018770:	fb00 f101 	mul.w	r1, r0, r1
 8018774:	3104      	adds	r1, #4
 8018776:	440b      	add	r3, r1
 8018778:	9303      	str	r3, [sp, #12]
 801877a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801877e:	e70a      	b.n	8018596 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8018780:	8921      	ldrh	r1, [r4, #8]
 8018782:	fbb5 f3f1 	udiv	r3, r5, r1
 8018786:	fb01 5313 	mls	r3, r1, r3, r5
 801878a:	b29a      	uxth	r2, r3
 801878c:	6863      	ldr	r3, [r4, #4]
 801878e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018792:	6821      	ldr	r1, [r4, #0]
 8018794:	9804      	ldr	r0, [sp, #16]
 8018796:	fb02 f303 	mul.w	r3, r2, r3
 801879a:	3304      	adds	r3, #4
 801879c:	7b22      	ldrb	r2, [r4, #12]
 801879e:	4419      	add	r1, r3
 80187a0:	445a      	add	r2, fp
 80187a2:	f841 2c04 	str.w	r2, [r1, #-4]
 80187a6:	7b23      	ldrb	r3, [r4, #12]
 80187a8:	9300      	str	r3, [sp, #0]
 80187aa:	2300      	movs	r3, #0
 80187ac:	f7f7 fd00 	bl	80101b0 <ucdr_init_buffer_origin_offset>
 80187b0:	81e5      	strh	r5, [r4, #14]
 80187b2:	2001      	movs	r0, #1
 80187b4:	e7a2      	b.n	80186fc <uxr_prepare_reliable_buffer_to_write+0x218>
 80187b6:	4682      	mov	sl, r0
 80187b8:	e6ca      	b.n	8018550 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80187ba:	bf00      	nop
 80187bc:	080183c5 	.word	0x080183c5

080187c0 <uxr_prepare_next_reliable_buffer_to_send>:
 80187c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187c2:	4604      	mov	r4, r0
 80187c4:	460f      	mov	r7, r1
 80187c6:	8a00      	ldrh	r0, [r0, #16]
 80187c8:	2101      	movs	r1, #1
 80187ca:	4616      	mov	r6, r2
 80187cc:	461d      	mov	r5, r3
 80187ce:	f000 f8f9 	bl	80189c4 <uxr_seq_num_add>
 80187d2:	8028      	strh	r0, [r5, #0]
 80187d4:	8922      	ldrh	r2, [r4, #8]
 80187d6:	fbb0 f3f2 	udiv	r3, r0, r2
 80187da:	fb02 0c13 	mls	ip, r2, r3, r0
 80187de:	fa1f fc8c 	uxth.w	ip, ip
 80187e2:	6863      	ldr	r3, [r4, #4]
 80187e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80187e8:	fb0c fc03 	mul.w	ip, ip, r3
 80187ec:	6823      	ldr	r3, [r4, #0]
 80187ee:	89e1      	ldrh	r1, [r4, #14]
 80187f0:	f10c 0c04 	add.w	ip, ip, #4
 80187f4:	4463      	add	r3, ip
 80187f6:	603b      	str	r3, [r7, #0]
 80187f8:	6823      	ldr	r3, [r4, #0]
 80187fa:	449c      	add	ip, r3
 80187fc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018800:	6033      	str	r3, [r6, #0]
 8018802:	f000 f8e7 	bl	80189d4 <uxr_seq_num_cmp>
 8018806:	2800      	cmp	r0, #0
 8018808:	dd01      	ble.n	801880e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801880a:	2000      	movs	r0, #0
 801880c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801880e:	7b23      	ldrb	r3, [r4, #12]
 8018810:	6832      	ldr	r2, [r6, #0]
 8018812:	429a      	cmp	r2, r3
 8018814:	d9f9      	bls.n	801880a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018816:	8a61      	ldrh	r1, [r4, #18]
 8018818:	8a20      	ldrh	r0, [r4, #16]
 801881a:	f000 f8d7 	bl	80189cc <uxr_seq_num_sub>
 801881e:	8923      	ldrh	r3, [r4, #8]
 8018820:	4283      	cmp	r3, r0
 8018822:	d0f2      	beq.n	801880a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018824:	8828      	ldrh	r0, [r5, #0]
 8018826:	89e3      	ldrh	r3, [r4, #14]
 8018828:	8220      	strh	r0, [r4, #16]
 801882a:	4298      	cmp	r0, r3
 801882c:	d001      	beq.n	8018832 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801882e:	2001      	movs	r0, #1
 8018830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018832:	2101      	movs	r1, #1
 8018834:	f000 f8c6 	bl	80189c4 <uxr_seq_num_add>
 8018838:	81e0      	strh	r0, [r4, #14]
 801883a:	2001      	movs	r0, #1
 801883c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801883e:	bf00      	nop

08018840 <uxr_update_output_stream_heartbeat_timestamp>:
 8018840:	b570      	push	{r4, r5, r6, lr}
 8018842:	8a01      	ldrh	r1, [r0, #16]
 8018844:	4604      	mov	r4, r0
 8018846:	8a40      	ldrh	r0, [r0, #18]
 8018848:	4615      	mov	r5, r2
 801884a:	461e      	mov	r6, r3
 801884c:	f000 f8c2 	bl	80189d4 <uxr_seq_num_cmp>
 8018850:	2800      	cmp	r0, #0
 8018852:	db07      	blt.n	8018864 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018854:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018858:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801885c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018860:	2000      	movs	r0, #0
 8018862:	bd70      	pop	{r4, r5, r6, pc}
 8018864:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018868:	b940      	cbnz	r0, 801887c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801886a:	2301      	movs	r3, #1
 801886c:	f884 3020 	strb.w	r3, [r4, #32]
 8018870:	3564      	adds	r5, #100	@ 0x64
 8018872:	f146 0600 	adc.w	r6, r6, #0
 8018876:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801887a:	bd70      	pop	{r4, r5, r6, pc}
 801887c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018880:	4295      	cmp	r5, r2
 8018882:	eb76 0303 	sbcs.w	r3, r6, r3
 8018886:	bfa5      	ittet	ge
 8018888:	3001      	addge	r0, #1
 801888a:	f884 0020 	strbge.w	r0, [r4, #32]
 801888e:	2000      	movlt	r0, #0
 8018890:	2001      	movge	r0, #1
 8018892:	e7ed      	b.n	8018870 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08018894 <uxr_begin_output_nack_buffer_it>:
 8018894:	8a40      	ldrh	r0, [r0, #18]
 8018896:	4770      	bx	lr

08018898 <uxr_next_reliable_nack_buffer_to_send>:
 8018898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801889c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80188a0:	b082      	sub	sp, #8
 80188a2:	f1b8 0f00 	cmp.w	r8, #0
 80188a6:	d011      	beq.n	80188cc <uxr_next_reliable_nack_buffer_to_send+0x34>
 80188a8:	4604      	mov	r4, r0
 80188aa:	8818      	ldrh	r0, [r3, #0]
 80188ac:	460e      	mov	r6, r1
 80188ae:	4617      	mov	r7, r2
 80188b0:	461d      	mov	r5, r3
 80188b2:	2101      	movs	r1, #1
 80188b4:	f000 f886 	bl	80189c4 <uxr_seq_num_add>
 80188b8:	8028      	strh	r0, [r5, #0]
 80188ba:	8a21      	ldrh	r1, [r4, #16]
 80188bc:	f000 f88a 	bl	80189d4 <uxr_seq_num_cmp>
 80188c0:	2800      	cmp	r0, #0
 80188c2:	dd07      	ble.n	80188d4 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80188c4:	f04f 0800 	mov.w	r8, #0
 80188c8:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80188cc:	4640      	mov	r0, r8
 80188ce:	b002      	add	sp, #8
 80188d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188d4:	8921      	ldrh	r1, [r4, #8]
 80188d6:	8828      	ldrh	r0, [r5, #0]
 80188d8:	6823      	ldr	r3, [r4, #0]
 80188da:	fbb0 f2f1 	udiv	r2, r0, r1
 80188de:	fb01 0c12 	mls	ip, r1, r2, r0
 80188e2:	fa1f f28c 	uxth.w	r2, ip
 80188e6:	9301      	str	r3, [sp, #4]
 80188e8:	6863      	ldr	r3, [r4, #4]
 80188ea:	fbb3 fcf1 	udiv	ip, r3, r1
 80188ee:	9b01      	ldr	r3, [sp, #4]
 80188f0:	fb02 fc0c 	mul.w	ip, r2, ip
 80188f4:	f10c 0c04 	add.w	ip, ip, #4
 80188f8:	4463      	add	r3, ip
 80188fa:	6033      	str	r3, [r6, #0]
 80188fc:	6823      	ldr	r3, [r4, #0]
 80188fe:	4463      	add	r3, ip
 8018900:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018904:	603b      	str	r3, [r7, #0]
 8018906:	7b22      	ldrb	r2, [r4, #12]
 8018908:	429a      	cmp	r2, r3
 801890a:	d0d2      	beq.n	80188b2 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801890c:	4640      	mov	r0, r8
 801890e:	b002      	add	sp, #8
 8018910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018914 <uxr_process_acknack>:
 8018914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018916:	4604      	mov	r4, r0
 8018918:	460e      	mov	r6, r1
 801891a:	4610      	mov	r0, r2
 801891c:	2101      	movs	r1, #1
 801891e:	f000 f855 	bl	80189cc <uxr_seq_num_sub>
 8018922:	8a61      	ldrh	r1, [r4, #18]
 8018924:	f000 f852 	bl	80189cc <uxr_seq_num_sub>
 8018928:	b1c0      	cbz	r0, 801895c <uxr_process_acknack+0x48>
 801892a:	4605      	mov	r5, r0
 801892c:	2700      	movs	r7, #0
 801892e:	2101      	movs	r1, #1
 8018930:	8a60      	ldrh	r0, [r4, #18]
 8018932:	f000 f847 	bl	80189c4 <uxr_seq_num_add>
 8018936:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801893a:	fbb0 f1fc 	udiv	r1, r0, ip
 801893e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018942:	fb0c 0111 	mls	r1, ip, r1, r0
 8018946:	b289      	uxth	r1, r1
 8018948:	3701      	adds	r7, #1
 801894a:	fbb3 f3fc 	udiv	r3, r3, ip
 801894e:	fb01 f303 	mul.w	r3, r1, r3
 8018952:	42bd      	cmp	r5, r7
 8018954:	7b21      	ldrb	r1, [r4, #12]
 8018956:	8260      	strh	r0, [r4, #18]
 8018958:	50d1      	str	r1, [r2, r3]
 801895a:	d1e8      	bne.n	801892e <uxr_process_acknack+0x1a>
 801895c:	3e00      	subs	r6, #0
 801895e:	f04f 0300 	mov.w	r3, #0
 8018962:	bf18      	it	ne
 8018964:	2601      	movne	r6, #1
 8018966:	f884 3020 	strb.w	r3, [r4, #32]
 801896a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801896e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018970 <uxr_is_output_up_to_date>:
 8018970:	8a01      	ldrh	r1, [r0, #16]
 8018972:	8a40      	ldrh	r0, [r0, #18]
 8018974:	b508      	push	{r3, lr}
 8018976:	f000 f82d 	bl	80189d4 <uxr_seq_num_cmp>
 801897a:	fab0 f080 	clz	r0, r0
 801897e:	0940      	lsrs	r0, r0, #5
 8018980:	bd08      	pop	{r3, pc}
 8018982:	bf00      	nop

08018984 <get_available_free_slots>:
 8018984:	8902      	ldrh	r2, [r0, #8]
 8018986:	b1da      	cbz	r2, 80189c0 <get_available_free_slots+0x3c>
 8018988:	b530      	push	{r4, r5, lr}
 801898a:	2100      	movs	r1, #0
 801898c:	6843      	ldr	r3, [r0, #4]
 801898e:	6805      	ldr	r5, [r0, #0]
 8018990:	7b04      	ldrb	r4, [r0, #12]
 8018992:	fbb3 fef2 	udiv	lr, r3, r2
 8018996:	4608      	mov	r0, r1
 8018998:	460b      	mov	r3, r1
 801899a:	fbb3 fcf2 	udiv	ip, r3, r2
 801899e:	fb02 331c 	mls	r3, r2, ip, r3
 80189a2:	b29b      	uxth	r3, r3
 80189a4:	fb0e f303 	mul.w	r3, lr, r3
 80189a8:	3101      	adds	r1, #1
 80189aa:	f855 c003 	ldr.w	ip, [r5, r3]
 80189ae:	4564      	cmp	r4, ip
 80189b0:	bf08      	it	eq
 80189b2:	3001      	addeq	r0, #1
 80189b4:	b28b      	uxth	r3, r1
 80189b6:	bf08      	it	eq
 80189b8:	b280      	uxtheq	r0, r0
 80189ba:	4293      	cmp	r3, r2
 80189bc:	d3ed      	bcc.n	801899a <get_available_free_slots+0x16>
 80189be:	bd30      	pop	{r4, r5, pc}
 80189c0:	4610      	mov	r0, r2
 80189c2:	4770      	bx	lr

080189c4 <uxr_seq_num_add>:
 80189c4:	4408      	add	r0, r1
 80189c6:	b280      	uxth	r0, r0
 80189c8:	4770      	bx	lr
 80189ca:	bf00      	nop

080189cc <uxr_seq_num_sub>:
 80189cc:	1a40      	subs	r0, r0, r1
 80189ce:	b280      	uxth	r0, r0
 80189d0:	4770      	bx	lr
 80189d2:	bf00      	nop

080189d4 <uxr_seq_num_cmp>:
 80189d4:	4288      	cmp	r0, r1
 80189d6:	d011      	beq.n	80189fc <uxr_seq_num_cmp+0x28>
 80189d8:	d309      	bcc.n	80189ee <uxr_seq_num_cmp+0x1a>
 80189da:	4288      	cmp	r0, r1
 80189dc:	d910      	bls.n	8018a00 <uxr_seq_num_cmp+0x2c>
 80189de:	1a40      	subs	r0, r0, r1
 80189e0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80189e4:	bfd4      	ite	le
 80189e6:	2001      	movle	r0, #1
 80189e8:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80189ec:	4770      	bx	lr
 80189ee:	1a0b      	subs	r3, r1, r0
 80189f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80189f4:	daf1      	bge.n	80189da <uxr_seq_num_cmp+0x6>
 80189f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80189fa:	4770      	bx	lr
 80189fc:	2000      	movs	r0, #0
 80189fe:	4770      	bx	lr
 8018a00:	2001      	movs	r0, #1
 8018a02:	4770      	bx	lr

08018a04 <rcl_get_default_domain_id>:
 8018a04:	b530      	push	{r4, r5, lr}
 8018a06:	b083      	sub	sp, #12
 8018a08:	2300      	movs	r3, #0
 8018a0a:	9300      	str	r3, [sp, #0]
 8018a0c:	b1d0      	cbz	r0, 8018a44 <rcl_get_default_domain_id+0x40>
 8018a0e:	4604      	mov	r4, r0
 8018a10:	4669      	mov	r1, sp
 8018a12:	4815      	ldr	r0, [pc, #84]	@ (8018a68 <rcl_get_default_domain_id+0x64>)
 8018a14:	f7fd fd54 	bl	80164c0 <rcutils_get_env>
 8018a18:	4602      	mov	r2, r0
 8018a1a:	b110      	cbz	r0, 8018a22 <rcl_get_default_domain_id+0x1e>
 8018a1c:	2001      	movs	r0, #1
 8018a1e:	b003      	add	sp, #12
 8018a20:	bd30      	pop	{r4, r5, pc}
 8018a22:	9b00      	ldr	r3, [sp, #0]
 8018a24:	b18b      	cbz	r3, 8018a4a <rcl_get_default_domain_id+0x46>
 8018a26:	7818      	ldrb	r0, [r3, #0]
 8018a28:	2800      	cmp	r0, #0
 8018a2a:	d0f8      	beq.n	8018a1e <rcl_get_default_domain_id+0x1a>
 8018a2c:	a901      	add	r1, sp, #4
 8018a2e:	4618      	mov	r0, r3
 8018a30:	9201      	str	r2, [sp, #4]
 8018a32:	f000 fe39 	bl	80196a8 <strtoul>
 8018a36:	4605      	mov	r5, r0
 8018a38:	b150      	cbz	r0, 8018a50 <rcl_get_default_domain_id+0x4c>
 8018a3a:	1c43      	adds	r3, r0, #1
 8018a3c:	d00d      	beq.n	8018a5a <rcl_get_default_domain_id+0x56>
 8018a3e:	6025      	str	r5, [r4, #0]
 8018a40:	2000      	movs	r0, #0
 8018a42:	e7ec      	b.n	8018a1e <rcl_get_default_domain_id+0x1a>
 8018a44:	200b      	movs	r0, #11
 8018a46:	b003      	add	sp, #12
 8018a48:	bd30      	pop	{r4, r5, pc}
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	b003      	add	sp, #12
 8018a4e:	bd30      	pop	{r4, r5, pc}
 8018a50:	9b01      	ldr	r3, [sp, #4]
 8018a52:	781b      	ldrb	r3, [r3, #0]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d0f2      	beq.n	8018a3e <rcl_get_default_domain_id+0x3a>
 8018a58:	e7e0      	b.n	8018a1c <rcl_get_default_domain_id+0x18>
 8018a5a:	f001 f965 	bl	8019d28 <__errno>
 8018a5e:	6803      	ldr	r3, [r0, #0]
 8018a60:	2b22      	cmp	r3, #34	@ 0x22
 8018a62:	d1ec      	bne.n	8018a3e <rcl_get_default_domain_id+0x3a>
 8018a64:	e7da      	b.n	8018a1c <rcl_get_default_domain_id+0x18>
 8018a66:	bf00      	nop
 8018a68:	0801b19c 	.word	0x0801b19c

08018a6c <rcl_expand_topic_name>:
 8018a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a70:	b08b      	sub	sp, #44	@ 0x2c
 8018a72:	9306      	str	r3, [sp, #24]
 8018a74:	2800      	cmp	r0, #0
 8018a76:	f000 80ad 	beq.w	8018bd4 <rcl_expand_topic_name+0x168>
 8018a7a:	460e      	mov	r6, r1
 8018a7c:	2900      	cmp	r1, #0
 8018a7e:	f000 80a9 	beq.w	8018bd4 <rcl_expand_topic_name+0x168>
 8018a82:	4617      	mov	r7, r2
 8018a84:	2a00      	cmp	r2, #0
 8018a86:	f000 80a5 	beq.w	8018bd4 <rcl_expand_topic_name+0x168>
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	f000 80a2 	beq.w	8018bd4 <rcl_expand_topic_name+0x168>
 8018a90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	f000 809e 	beq.w	8018bd4 <rcl_expand_topic_name+0x168>
 8018a98:	2200      	movs	r2, #0
 8018a9a:	a909      	add	r1, sp, #36	@ 0x24
 8018a9c:	4680      	mov	r8, r0
 8018a9e:	f000 fa57 	bl	8018f50 <rcl_validate_topic_name>
 8018aa2:	4604      	mov	r4, r0
 8018aa4:	2800      	cmp	r0, #0
 8018aa6:	f040 8096 	bne.w	8018bd6 <rcl_expand_topic_name+0x16a>
 8018aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	f040 809a 	bne.w	8018be6 <rcl_expand_topic_name+0x17a>
 8018ab2:	4602      	mov	r2, r0
 8018ab4:	a909      	add	r1, sp, #36	@ 0x24
 8018ab6:	4630      	mov	r0, r6
 8018ab8:	f7fe f91c 	bl	8016cf4 <rmw_validate_node_name>
 8018abc:	2800      	cmp	r0, #0
 8018abe:	f040 808e 	bne.w	8018bde <rcl_expand_topic_name+0x172>
 8018ac2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018ac4:	2a00      	cmp	r2, #0
 8018ac6:	f040 8093 	bne.w	8018bf0 <rcl_expand_topic_name+0x184>
 8018aca:	a909      	add	r1, sp, #36	@ 0x24
 8018acc:	4638      	mov	r0, r7
 8018ace:	f7fe f8f3 	bl	8016cb8 <rmw_validate_namespace>
 8018ad2:	2800      	cmp	r0, #0
 8018ad4:	f040 8083 	bne.w	8018bde <rcl_expand_topic_name+0x172>
 8018ad8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018ada:	2c00      	cmp	r4, #0
 8018adc:	f040 80ed 	bne.w	8018cba <rcl_expand_topic_name+0x24e>
 8018ae0:	217b      	movs	r1, #123	@ 0x7b
 8018ae2:	4640      	mov	r0, r8
 8018ae4:	f001 f894 	bl	8019c10 <strchr>
 8018ae8:	f898 3000 	ldrb.w	r3, [r8]
 8018aec:	2b2f      	cmp	r3, #47	@ 0x2f
 8018aee:	4605      	mov	r5, r0
 8018af0:	f000 809e 	beq.w	8018c30 <rcl_expand_topic_name+0x1c4>
 8018af4:	2b7e      	cmp	r3, #126	@ 0x7e
 8018af6:	f040 80a2 	bne.w	8018c3e <rcl_expand_topic_name+0x1d2>
 8018afa:	4638      	mov	r0, r7
 8018afc:	f7e7 fb9a 	bl	8000234 <strlen>
 8018b00:	4a82      	ldr	r2, [pc, #520]	@ (8018d0c <rcl_expand_topic_name+0x2a0>)
 8018b02:	4b83      	ldr	r3, [pc, #524]	@ (8018d10 <rcl_expand_topic_name+0x2a4>)
 8018b04:	2801      	cmp	r0, #1
 8018b06:	bf18      	it	ne
 8018b08:	4613      	movne	r3, r2
 8018b0a:	9302      	str	r3, [sp, #8]
 8018b0c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018b0e:	9300      	str	r3, [sp, #0]
 8018b10:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018b14:	f108 0301 	add.w	r3, r8, #1
 8018b18:	9305      	str	r3, [sp, #20]
 8018b1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018b1e:	9301      	str	r3, [sp, #4]
 8018b20:	ab14      	add	r3, sp, #80	@ 0x50
 8018b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018b24:	f7fd fce4 	bl	80164f0 <rcutils_format_string_limit>
 8018b28:	4682      	mov	sl, r0
 8018b2a:	2800      	cmp	r0, #0
 8018b2c:	f000 80c7 	beq.w	8018cbe <rcl_expand_topic_name+0x252>
 8018b30:	2d00      	cmp	r5, #0
 8018b32:	f000 80a2 	beq.w	8018c7a <rcl_expand_topic_name+0x20e>
 8018b36:	217b      	movs	r1, #123	@ 0x7b
 8018b38:	f001 f86a 	bl	8019c10 <strchr>
 8018b3c:	46d1      	mov	r9, sl
 8018b3e:	4605      	mov	r5, r0
 8018b40:	9407      	str	r4, [sp, #28]
 8018b42:	46d3      	mov	fp, sl
 8018b44:	464c      	mov	r4, r9
 8018b46:	2d00      	cmp	r5, #0
 8018b48:	f000 80be 	beq.w	8018cc8 <rcl_expand_topic_name+0x25c>
 8018b4c:	217d      	movs	r1, #125	@ 0x7d
 8018b4e:	4620      	mov	r0, r4
 8018b50:	f001 f85e 	bl	8019c10 <strchr>
 8018b54:	eba0 0905 	sub.w	r9, r0, r5
 8018b58:	f109 0a01 	add.w	sl, r9, #1
 8018b5c:	486d      	ldr	r0, [pc, #436]	@ (8018d14 <rcl_expand_topic_name+0x2a8>)
 8018b5e:	4652      	mov	r2, sl
 8018b60:	4629      	mov	r1, r5
 8018b62:	f001 f862 	bl	8019c2a <strncmp>
 8018b66:	2800      	cmp	r0, #0
 8018b68:	d067      	beq.n	8018c3a <rcl_expand_topic_name+0x1ce>
 8018b6a:	486b      	ldr	r0, [pc, #428]	@ (8018d18 <rcl_expand_topic_name+0x2ac>)
 8018b6c:	4652      	mov	r2, sl
 8018b6e:	4629      	mov	r1, r5
 8018b70:	f001 f85b 	bl	8019c2a <strncmp>
 8018b74:	b130      	cbz	r0, 8018b84 <rcl_expand_topic_name+0x118>
 8018b76:	4869      	ldr	r0, [pc, #420]	@ (8018d1c <rcl_expand_topic_name+0x2b0>)
 8018b78:	4652      	mov	r2, sl
 8018b7a:	4629      	mov	r1, r5
 8018b7c:	f001 f855 	bl	8019c2a <strncmp>
 8018b80:	2800      	cmp	r0, #0
 8018b82:	d137      	bne.n	8018bf4 <rcl_expand_topic_name+0x188>
 8018b84:	46b9      	mov	r9, r7
 8018b86:	ab16      	add	r3, sp, #88	@ 0x58
 8018b88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018b8c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018b90:	ab14      	add	r3, sp, #80	@ 0x50
 8018b92:	4628      	mov	r0, r5
 8018b94:	cb0c      	ldmia	r3, {r2, r3}
 8018b96:	4651      	mov	r1, sl
 8018b98:	f7fd fde6 	bl	8016768 <rcutils_strndup>
 8018b9c:	4605      	mov	r5, r0
 8018b9e:	2800      	cmp	r0, #0
 8018ba0:	f000 809c 	beq.w	8018cdc <rcl_expand_topic_name+0x270>
 8018ba4:	464a      	mov	r2, r9
 8018ba6:	4620      	mov	r0, r4
 8018ba8:	ab14      	add	r3, sp, #80	@ 0x50
 8018baa:	4629      	mov	r1, r5
 8018bac:	f7fd fcda 	bl	8016564 <rcutils_repl_str>
 8018bb0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018bb2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018bb4:	4604      	mov	r4, r0
 8018bb6:	4628      	mov	r0, r5
 8018bb8:	4798      	blx	r3
 8018bba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018bbc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018bbe:	4658      	mov	r0, fp
 8018bc0:	4798      	blx	r3
 8018bc2:	2c00      	cmp	r4, #0
 8018bc4:	d07b      	beq.n	8018cbe <rcl_expand_topic_name+0x252>
 8018bc6:	217b      	movs	r1, #123	@ 0x7b
 8018bc8:	4620      	mov	r0, r4
 8018bca:	f001 f821 	bl	8019c10 <strchr>
 8018bce:	46a3      	mov	fp, r4
 8018bd0:	4605      	mov	r5, r0
 8018bd2:	e7b8      	b.n	8018b46 <rcl_expand_topic_name+0xda>
 8018bd4:	240b      	movs	r4, #11
 8018bd6:	4620      	mov	r0, r4
 8018bd8:	b00b      	add	sp, #44	@ 0x2c
 8018bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bde:	f7fb f819 	bl	8013c14 <rcl_convert_rmw_ret_to_rcl_ret>
 8018be2:	4604      	mov	r4, r0
 8018be4:	e7f7      	b.n	8018bd6 <rcl_expand_topic_name+0x16a>
 8018be6:	2467      	movs	r4, #103	@ 0x67
 8018be8:	4620      	mov	r0, r4
 8018bea:	b00b      	add	sp, #44	@ 0x2c
 8018bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bf0:	24c9      	movs	r4, #201	@ 0xc9
 8018bf2:	e7f0      	b.n	8018bd6 <rcl_expand_topic_name+0x16a>
 8018bf4:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018bf8:	9806      	ldr	r0, [sp, #24]
 8018bfa:	1c69      	adds	r1, r5, #1
 8018bfc:	f7fd fece 	bl	801699c <rcutils_string_map_getn>
 8018c00:	4681      	mov	r9, r0
 8018c02:	2800      	cmp	r0, #0
 8018c04:	d1bf      	bne.n	8018b86 <rcl_expand_topic_name+0x11a>
 8018c06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018c08:	aa16      	add	r2, sp, #88	@ 0x58
 8018c0a:	6018      	str	r0, [r3, #0]
 8018c0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8018c0e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018c12:	ab14      	add	r3, sp, #80	@ 0x50
 8018c14:	cb0c      	ldmia	r3, {r2, r3}
 8018c16:	4651      	mov	r1, sl
 8018c18:	4628      	mov	r0, r5
 8018c1a:	f7fd fda5 	bl	8016768 <rcutils_strndup>
 8018c1e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018c20:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018c22:	4798      	blx	r3
 8018c24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018c26:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018c28:	4658      	mov	r0, fp
 8018c2a:	2469      	movs	r4, #105	@ 0x69
 8018c2c:	4798      	blx	r3
 8018c2e:	e7d2      	b.n	8018bd6 <rcl_expand_topic_name+0x16a>
 8018c30:	2800      	cmp	r0, #0
 8018c32:	d05b      	beq.n	8018cec <rcl_expand_topic_name+0x280>
 8018c34:	46c1      	mov	r9, r8
 8018c36:	46a2      	mov	sl, r4
 8018c38:	e782      	b.n	8018b40 <rcl_expand_topic_name+0xd4>
 8018c3a:	46b1      	mov	r9, r6
 8018c3c:	e7a3      	b.n	8018b86 <rcl_expand_topic_name+0x11a>
 8018c3e:	2800      	cmp	r0, #0
 8018c40:	d1f8      	bne.n	8018c34 <rcl_expand_topic_name+0x1c8>
 8018c42:	4638      	mov	r0, r7
 8018c44:	f7e7 faf6 	bl	8000234 <strlen>
 8018c48:	4a35      	ldr	r2, [pc, #212]	@ (8018d20 <rcl_expand_topic_name+0x2b4>)
 8018c4a:	4b36      	ldr	r3, [pc, #216]	@ (8018d24 <rcl_expand_topic_name+0x2b8>)
 8018c4c:	f8cd 8010 	str.w	r8, [sp, #16]
 8018c50:	2801      	cmp	r0, #1
 8018c52:	bf18      	it	ne
 8018c54:	4613      	movne	r3, r2
 8018c56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018c5a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018c5e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018c60:	9703      	str	r7, [sp, #12]
 8018c62:	9200      	str	r2, [sp, #0]
 8018c64:	ab14      	add	r3, sp, #80	@ 0x50
 8018c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018c68:	f7fd fc42 	bl	80164f0 <rcutils_format_string_limit>
 8018c6c:	4682      	mov	sl, r0
 8018c6e:	4653      	mov	r3, sl
 8018c70:	b32b      	cbz	r3, 8018cbe <rcl_expand_topic_name+0x252>
 8018c72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018c74:	f8c3 a000 	str.w	sl, [r3]
 8018c78:	e7ad      	b.n	8018bd6 <rcl_expand_topic_name+0x16a>
 8018c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8018c7e:	2b2f      	cmp	r3, #47	@ 0x2f
 8018c80:	d0f7      	beq.n	8018c72 <rcl_expand_topic_name+0x206>
 8018c82:	4638      	mov	r0, r7
 8018c84:	f7e7 fad6 	bl	8000234 <strlen>
 8018c88:	4a25      	ldr	r2, [pc, #148]	@ (8018d20 <rcl_expand_topic_name+0x2b4>)
 8018c8a:	4b26      	ldr	r3, [pc, #152]	@ (8018d24 <rcl_expand_topic_name+0x2b8>)
 8018c8c:	f8cd a010 	str.w	sl, [sp, #16]
 8018c90:	2801      	cmp	r0, #1
 8018c92:	bf18      	it	ne
 8018c94:	4613      	movne	r3, r2
 8018c96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018c9a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018c9e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018ca0:	9703      	str	r7, [sp, #12]
 8018ca2:	9200      	str	r2, [sp, #0]
 8018ca4:	ab14      	add	r3, sp, #80	@ 0x50
 8018ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018ca8:	f7fd fc22 	bl	80164f0 <rcutils_format_string_limit>
 8018cac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018cae:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018cb0:	4605      	mov	r5, r0
 8018cb2:	4650      	mov	r0, sl
 8018cb4:	4798      	blx	r3
 8018cb6:	46aa      	mov	sl, r5
 8018cb8:	e7d9      	b.n	8018c6e <rcl_expand_topic_name+0x202>
 8018cba:	24ca      	movs	r4, #202	@ 0xca
 8018cbc:	e78b      	b.n	8018bd6 <rcl_expand_topic_name+0x16a>
 8018cbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	6013      	str	r3, [r2, #0]
 8018cc4:	240a      	movs	r4, #10
 8018cc6:	e786      	b.n	8018bd6 <rcl_expand_topic_name+0x16a>
 8018cc8:	465b      	mov	r3, fp
 8018cca:	9c07      	ldr	r4, [sp, #28]
 8018ccc:	46da      	mov	sl, fp
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d1d3      	bne.n	8018c7a <rcl_expand_topic_name+0x20e>
 8018cd2:	f898 3000 	ldrb.w	r3, [r8]
 8018cd6:	2b2f      	cmp	r3, #47	@ 0x2f
 8018cd8:	d0cb      	beq.n	8018c72 <rcl_expand_topic_name+0x206>
 8018cda:	e7b2      	b.n	8018c42 <rcl_expand_topic_name+0x1d6>
 8018cdc:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8018ce0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018ce2:	6015      	str	r5, [r2, #0]
 8018ce4:	4658      	mov	r0, fp
 8018ce6:	4798      	blx	r3
 8018ce8:	240a      	movs	r4, #10
 8018cea:	e774      	b.n	8018bd6 <rcl_expand_topic_name+0x16a>
 8018cec:	ab17      	add	r3, sp, #92	@ 0x5c
 8018cee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018cf2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018cf6:	ab14      	add	r3, sp, #80	@ 0x50
 8018cf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018cfa:	4640      	mov	r0, r8
 8018cfc:	f7fd fd12 	bl	8016724 <rcutils_strdup>
 8018d00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018d02:	2800      	cmp	r0, #0
 8018d04:	6018      	str	r0, [r3, #0]
 8018d06:	bf08      	it	eq
 8018d08:	240a      	moveq	r4, #10
 8018d0a:	e764      	b.n	8018bd6 <rcl_expand_topic_name+0x16a>
 8018d0c:	0801b1ac 	.word	0x0801b1ac
 8018d10:	0801ac98 	.word	0x0801ac98
 8018d14:	0801b1b4 	.word	0x0801b1b4
 8018d18:	0801b1bc 	.word	0x0801b1bc
 8018d1c:	0801b1c4 	.word	0x0801b1c4
 8018d20:	0801ac60 	.word	0x0801ac60
 8018d24:	0801aca8 	.word	0x0801aca8

08018d28 <rcl_get_default_topic_name_substitutions>:
 8018d28:	2800      	cmp	r0, #0
 8018d2a:	bf0c      	ite	eq
 8018d2c:	200b      	moveq	r0, #11
 8018d2e:	2000      	movne	r0, #0
 8018d30:	4770      	bx	lr
 8018d32:	bf00      	nop

08018d34 <rcl_get_zero_initialized_guard_condition>:
 8018d34:	4a03      	ldr	r2, [pc, #12]	@ (8018d44 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018d36:	4603      	mov	r3, r0
 8018d38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018d3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018d40:	4618      	mov	r0, r3
 8018d42:	4770      	bx	lr
 8018d44:	0801b670 	.word	0x0801b670

08018d48 <rcl_guard_condition_init>:
 8018d48:	b082      	sub	sp, #8
 8018d4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d4c:	b087      	sub	sp, #28
 8018d4e:	ac0c      	add	r4, sp, #48	@ 0x30
 8018d50:	e884 000c 	stmia.w	r4, {r2, r3}
 8018d54:	46a6      	mov	lr, r4
 8018d56:	460d      	mov	r5, r1
 8018d58:	4604      	mov	r4, r0
 8018d5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018d5e:	f10d 0c04 	add.w	ip, sp, #4
 8018d62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d66:	f8de 3000 	ldr.w	r3, [lr]
 8018d6a:	f8cc 3000 	str.w	r3, [ip]
 8018d6e:	a801      	add	r0, sp, #4
 8018d70:	f7f4 fc80 	bl	800d674 <rcutils_allocator_is_valid>
 8018d74:	b338      	cbz	r0, 8018dc6 <rcl_guard_condition_init+0x7e>
 8018d76:	b334      	cbz	r4, 8018dc6 <rcl_guard_condition_init+0x7e>
 8018d78:	6866      	ldr	r6, [r4, #4]
 8018d7a:	b9ee      	cbnz	r6, 8018db8 <rcl_guard_condition_init+0x70>
 8018d7c:	b31d      	cbz	r5, 8018dc6 <rcl_guard_condition_init+0x7e>
 8018d7e:	4628      	mov	r0, r5
 8018d80:	f7fa ff66 	bl	8013c50 <rcl_context_is_valid>
 8018d84:	b308      	cbz	r0, 8018dca <rcl_guard_condition_init+0x82>
 8018d86:	9b01      	ldr	r3, [sp, #4]
 8018d88:	9905      	ldr	r1, [sp, #20]
 8018d8a:	201c      	movs	r0, #28
 8018d8c:	4798      	blx	r3
 8018d8e:	4607      	mov	r7, r0
 8018d90:	6060      	str	r0, [r4, #4]
 8018d92:	b310      	cbz	r0, 8018dda <rcl_guard_condition_init+0x92>
 8018d94:	6828      	ldr	r0, [r5, #0]
 8018d96:	3028      	adds	r0, #40	@ 0x28
 8018d98:	f000 f9ac 	bl	80190f4 <rmw_create_guard_condition>
 8018d9c:	6038      	str	r0, [r7, #0]
 8018d9e:	6860      	ldr	r0, [r4, #4]
 8018da0:	6805      	ldr	r5, [r0, #0]
 8018da2:	b1a5      	cbz	r5, 8018dce <rcl_guard_condition_init+0x86>
 8018da4:	2301      	movs	r3, #1
 8018da6:	ac01      	add	r4, sp, #4
 8018da8:	7103      	strb	r3, [r0, #4]
 8018daa:	f100 0708 	add.w	r7, r0, #8
 8018dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018db0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018db2:	6823      	ldr	r3, [r4, #0]
 8018db4:	603b      	str	r3, [r7, #0]
 8018db6:	e000      	b.n	8018dba <rcl_guard_condition_init+0x72>
 8018db8:	2664      	movs	r6, #100	@ 0x64
 8018dba:	4630      	mov	r0, r6
 8018dbc:	b007      	add	sp, #28
 8018dbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018dc2:	b002      	add	sp, #8
 8018dc4:	4770      	bx	lr
 8018dc6:	260b      	movs	r6, #11
 8018dc8:	e7f7      	b.n	8018dba <rcl_guard_condition_init+0x72>
 8018dca:	2665      	movs	r6, #101	@ 0x65
 8018dcc:	e7f5      	b.n	8018dba <rcl_guard_condition_init+0x72>
 8018dce:	9b02      	ldr	r3, [sp, #8]
 8018dd0:	9905      	ldr	r1, [sp, #20]
 8018dd2:	4798      	blx	r3
 8018dd4:	2601      	movs	r6, #1
 8018dd6:	6065      	str	r5, [r4, #4]
 8018dd8:	e7ef      	b.n	8018dba <rcl_guard_condition_init+0x72>
 8018dda:	260a      	movs	r6, #10
 8018ddc:	e7ed      	b.n	8018dba <rcl_guard_condition_init+0x72>
 8018dde:	bf00      	nop

08018de0 <rcl_guard_condition_init_from_rmw>:
 8018de0:	b082      	sub	sp, #8
 8018de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018de6:	b086      	sub	sp, #24
 8018de8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018dec:	4604      	mov	r4, r0
 8018dee:	f84c 3f04 	str.w	r3, [ip, #4]!
 8018df2:	460e      	mov	r6, r1
 8018df4:	4617      	mov	r7, r2
 8018df6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018dfa:	f10d 0e04 	add.w	lr, sp, #4
 8018dfe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018e02:	f8dc 3000 	ldr.w	r3, [ip]
 8018e06:	f8ce 3000 	str.w	r3, [lr]
 8018e0a:	a801      	add	r0, sp, #4
 8018e0c:	f7f4 fc32 	bl	800d674 <rcutils_allocator_is_valid>
 8018e10:	b350      	cbz	r0, 8018e68 <rcl_guard_condition_init_from_rmw+0x88>
 8018e12:	b34c      	cbz	r4, 8018e68 <rcl_guard_condition_init_from_rmw+0x88>
 8018e14:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018e18:	f1b8 0f00 	cmp.w	r8, #0
 8018e1c:	d11e      	bne.n	8018e5c <rcl_guard_condition_init_from_rmw+0x7c>
 8018e1e:	b31f      	cbz	r7, 8018e68 <rcl_guard_condition_init_from_rmw+0x88>
 8018e20:	4638      	mov	r0, r7
 8018e22:	f7fa ff15 	bl	8013c50 <rcl_context_is_valid>
 8018e26:	b328      	cbz	r0, 8018e74 <rcl_guard_condition_init_from_rmw+0x94>
 8018e28:	9b01      	ldr	r3, [sp, #4]
 8018e2a:	9905      	ldr	r1, [sp, #20]
 8018e2c:	201c      	movs	r0, #28
 8018e2e:	4798      	blx	r3
 8018e30:	4605      	mov	r5, r0
 8018e32:	6060      	str	r0, [r4, #4]
 8018e34:	b358      	cbz	r0, 8018e8e <rcl_guard_condition_init_from_rmw+0xae>
 8018e36:	b1fe      	cbz	r6, 8018e78 <rcl_guard_condition_init_from_rmw+0x98>
 8018e38:	6006      	str	r6, [r0, #0]
 8018e3a:	f880 8004 	strb.w	r8, [r0, #4]
 8018e3e:	ac01      	add	r4, sp, #4
 8018e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018e42:	f105 0c08 	add.w	ip, r5, #8
 8018e46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e4a:	6823      	ldr	r3, [r4, #0]
 8018e4c:	f8cc 3000 	str.w	r3, [ip]
 8018e50:	2000      	movs	r0, #0
 8018e52:	b006      	add	sp, #24
 8018e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e58:	b002      	add	sp, #8
 8018e5a:	4770      	bx	lr
 8018e5c:	2064      	movs	r0, #100	@ 0x64
 8018e5e:	b006      	add	sp, #24
 8018e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e64:	b002      	add	sp, #8
 8018e66:	4770      	bx	lr
 8018e68:	200b      	movs	r0, #11
 8018e6a:	b006      	add	sp, #24
 8018e6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e70:	b002      	add	sp, #8
 8018e72:	4770      	bx	lr
 8018e74:	2065      	movs	r0, #101	@ 0x65
 8018e76:	e7f2      	b.n	8018e5e <rcl_guard_condition_init_from_rmw+0x7e>
 8018e78:	6838      	ldr	r0, [r7, #0]
 8018e7a:	3028      	adds	r0, #40	@ 0x28
 8018e7c:	f000 f93a 	bl	80190f4 <rmw_create_guard_condition>
 8018e80:	6028      	str	r0, [r5, #0]
 8018e82:	6865      	ldr	r5, [r4, #4]
 8018e84:	682e      	ldr	r6, [r5, #0]
 8018e86:	b126      	cbz	r6, 8018e92 <rcl_guard_condition_init_from_rmw+0xb2>
 8018e88:	2301      	movs	r3, #1
 8018e8a:	712b      	strb	r3, [r5, #4]
 8018e8c:	e7d7      	b.n	8018e3e <rcl_guard_condition_init_from_rmw+0x5e>
 8018e8e:	200a      	movs	r0, #10
 8018e90:	e7e5      	b.n	8018e5e <rcl_guard_condition_init_from_rmw+0x7e>
 8018e92:	4628      	mov	r0, r5
 8018e94:	9b02      	ldr	r3, [sp, #8]
 8018e96:	9905      	ldr	r1, [sp, #20]
 8018e98:	4798      	blx	r3
 8018e9a:	6066      	str	r6, [r4, #4]
 8018e9c:	2001      	movs	r0, #1
 8018e9e:	e7de      	b.n	8018e5e <rcl_guard_condition_init_from_rmw+0x7e>

08018ea0 <rcl_guard_condition_fini>:
 8018ea0:	b570      	push	{r4, r5, r6, lr}
 8018ea2:	b082      	sub	sp, #8
 8018ea4:	b1f0      	cbz	r0, 8018ee4 <rcl_guard_condition_fini+0x44>
 8018ea6:	6843      	ldr	r3, [r0, #4]
 8018ea8:	4604      	mov	r4, r0
 8018eaa:	b163      	cbz	r3, 8018ec6 <rcl_guard_condition_fini+0x26>
 8018eac:	6818      	ldr	r0, [r3, #0]
 8018eae:	68de      	ldr	r6, [r3, #12]
 8018eb0:	6999      	ldr	r1, [r3, #24]
 8018eb2:	b160      	cbz	r0, 8018ece <rcl_guard_condition_fini+0x2e>
 8018eb4:	791d      	ldrb	r5, [r3, #4]
 8018eb6:	b965      	cbnz	r5, 8018ed2 <rcl_guard_condition_fini+0x32>
 8018eb8:	4618      	mov	r0, r3
 8018eba:	47b0      	blx	r6
 8018ebc:	2300      	movs	r3, #0
 8018ebe:	4628      	mov	r0, r5
 8018ec0:	6063      	str	r3, [r4, #4]
 8018ec2:	b002      	add	sp, #8
 8018ec4:	bd70      	pop	{r4, r5, r6, pc}
 8018ec6:	461d      	mov	r5, r3
 8018ec8:	4628      	mov	r0, r5
 8018eca:	b002      	add	sp, #8
 8018ecc:	bd70      	pop	{r4, r5, r6, pc}
 8018ece:	4605      	mov	r5, r0
 8018ed0:	e7f2      	b.n	8018eb8 <rcl_guard_condition_fini+0x18>
 8018ed2:	9101      	str	r1, [sp, #4]
 8018ed4:	f000 f922 	bl	801911c <rmw_destroy_guard_condition>
 8018ed8:	1e05      	subs	r5, r0, #0
 8018eda:	6863      	ldr	r3, [r4, #4]
 8018edc:	9901      	ldr	r1, [sp, #4]
 8018ede:	bf18      	it	ne
 8018ee0:	2501      	movne	r5, #1
 8018ee2:	e7e9      	b.n	8018eb8 <rcl_guard_condition_fini+0x18>
 8018ee4:	250b      	movs	r5, #11
 8018ee6:	4628      	mov	r0, r5
 8018ee8:	b002      	add	sp, #8
 8018eea:	bd70      	pop	{r4, r5, r6, pc}

08018eec <rcl_guard_condition_get_default_options>:
 8018eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018eee:	b087      	sub	sp, #28
 8018ef0:	4606      	mov	r6, r0
 8018ef2:	4668      	mov	r0, sp
 8018ef4:	f7f4 fbb0 	bl	800d658 <rcutils_get_default_allocator>
 8018ef8:	4b09      	ldr	r3, [pc, #36]	@ (8018f20 <rcl_guard_condition_get_default_options+0x34>)
 8018efa:	46ee      	mov	lr, sp
 8018efc:	469c      	mov	ip, r3
 8018efe:	461d      	mov	r5, r3
 8018f00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018f04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f0a:	4634      	mov	r4, r6
 8018f0c:	f8de 7000 	ldr.w	r7, [lr]
 8018f10:	f8cc 7000 	str.w	r7, [ip]
 8018f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018f16:	4630      	mov	r0, r6
 8018f18:	6027      	str	r7, [r4, #0]
 8018f1a:	b007      	add	sp, #28
 8018f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f1e:	bf00      	nop
 8018f20:	2000b070 	.word	0x2000b070

08018f24 <rcl_trigger_guard_condition>:
 8018f24:	b148      	cbz	r0, 8018f3a <rcl_trigger_guard_condition+0x16>
 8018f26:	b508      	push	{r3, lr}
 8018f28:	6843      	ldr	r3, [r0, #4]
 8018f2a:	b143      	cbz	r3, 8018f3e <rcl_trigger_guard_condition+0x1a>
 8018f2c:	6818      	ldr	r0, [r3, #0]
 8018f2e:	f000 f909 	bl	8019144 <rmw_trigger_guard_condition>
 8018f32:	3800      	subs	r0, #0
 8018f34:	bf18      	it	ne
 8018f36:	2001      	movne	r0, #1
 8018f38:	bd08      	pop	{r3, pc}
 8018f3a:	200b      	movs	r0, #11
 8018f3c:	4770      	bx	lr
 8018f3e:	200b      	movs	r0, #11
 8018f40:	bd08      	pop	{r3, pc}
 8018f42:	bf00      	nop

08018f44 <rcl_guard_condition_get_rmw_handle>:
 8018f44:	b110      	cbz	r0, 8018f4c <rcl_guard_condition_get_rmw_handle+0x8>
 8018f46:	6840      	ldr	r0, [r0, #4]
 8018f48:	b100      	cbz	r0, 8018f4c <rcl_guard_condition_get_rmw_handle+0x8>
 8018f4a:	6800      	ldr	r0, [r0, #0]
 8018f4c:	4770      	bx	lr
 8018f4e:	bf00      	nop

08018f50 <rcl_validate_topic_name>:
 8018f50:	2800      	cmp	r0, #0
 8018f52:	d07a      	beq.n	801904a <rcl_validate_topic_name+0xfa>
 8018f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f58:	460e      	mov	r6, r1
 8018f5a:	2900      	cmp	r1, #0
 8018f5c:	d07c      	beq.n	8019058 <rcl_validate_topic_name+0x108>
 8018f5e:	4617      	mov	r7, r2
 8018f60:	4605      	mov	r5, r0
 8018f62:	f7e7 f967 	bl	8000234 <strlen>
 8018f66:	b1b0      	cbz	r0, 8018f96 <rcl_validate_topic_name+0x46>
 8018f68:	f895 9000 	ldrb.w	r9, [r5]
 8018f6c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 80190f0 <rcl_validate_topic_name+0x1a0>
 8018f70:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8018f74:	f013 0304 	ands.w	r3, r3, #4
 8018f78:	d169      	bne.n	801904e <rcl_validate_topic_name+0xfe>
 8018f7a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8018f7e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8018f82:	2a2f      	cmp	r2, #47	@ 0x2f
 8018f84:	d10e      	bne.n	8018fa4 <rcl_validate_topic_name+0x54>
 8018f86:	2202      	movs	r2, #2
 8018f88:	6032      	str	r2, [r6, #0]
 8018f8a:	b36f      	cbz	r7, 8018fe8 <rcl_validate_topic_name+0x98>
 8018f8c:	f8c7 8000 	str.w	r8, [r7]
 8018f90:	4618      	mov	r0, r3
 8018f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f96:	2301      	movs	r3, #1
 8018f98:	6033      	str	r3, [r6, #0]
 8018f9a:	b32f      	cbz	r7, 8018fe8 <rcl_validate_topic_name+0x98>
 8018f9c:	2000      	movs	r0, #0
 8018f9e:	6038      	str	r0, [r7, #0]
 8018fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fa4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8018fa8:	461c      	mov	r4, r3
 8018faa:	4619      	mov	r1, r3
 8018fac:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018fb0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018fb4:	f1be 0f09 	cmp.w	lr, #9
 8018fb8:	d919      	bls.n	8018fee <rcl_validate_topic_name+0x9e>
 8018fba:	f022 0e20 	bic.w	lr, r2, #32
 8018fbe:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8018fc2:	f1be 0f19 	cmp.w	lr, #25
 8018fc6:	d912      	bls.n	8018fee <rcl_validate_topic_name+0x9e>
 8018fc8:	2a5f      	cmp	r2, #95	@ 0x5f
 8018fca:	d019      	beq.n	8019000 <rcl_validate_topic_name+0xb0>
 8018fcc:	2a2f      	cmp	r2, #47	@ 0x2f
 8018fce:	d051      	beq.n	8019074 <rcl_validate_topic_name+0x124>
 8018fd0:	2a7e      	cmp	r2, #126	@ 0x7e
 8018fd2:	d048      	beq.n	8019066 <rcl_validate_topic_name+0x116>
 8018fd4:	2a7b      	cmp	r2, #123	@ 0x7b
 8018fd6:	d054      	beq.n	8019082 <rcl_validate_topic_name+0x132>
 8018fd8:	2a7d      	cmp	r2, #125	@ 0x7d
 8018fda:	d161      	bne.n	80190a0 <rcl_validate_topic_name+0x150>
 8018fdc:	2c00      	cmp	r4, #0
 8018fde:	d155      	bne.n	801908c <rcl_validate_topic_name+0x13c>
 8018fe0:	2305      	movs	r3, #5
 8018fe2:	6033      	str	r3, [r6, #0]
 8018fe4:	b107      	cbz	r7, 8018fe8 <rcl_validate_topic_name+0x98>
 8018fe6:	6039      	str	r1, [r7, #0]
 8018fe8:	2000      	movs	r0, #0
 8018fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fee:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018ff2:	0752      	lsls	r2, r2, #29
 8018ff4:	d504      	bpl.n	8019000 <rcl_validate_topic_name+0xb0>
 8018ff6:	b11c      	cbz	r4, 8019000 <rcl_validate_topic_name+0xb0>
 8018ff8:	b111      	cbz	r1, 8019000 <rcl_validate_topic_name+0xb0>
 8018ffa:	1e4a      	subs	r2, r1, #1
 8018ffc:	429a      	cmp	r2, r3
 8018ffe:	d02d      	beq.n	801905c <rcl_validate_topic_name+0x10c>
 8019000:	3101      	adds	r1, #1
 8019002:	4288      	cmp	r0, r1
 8019004:	d1d2      	bne.n	8018fac <rcl_validate_topic_name+0x5c>
 8019006:	2c00      	cmp	r4, #0
 8019008:	d145      	bne.n	8019096 <rcl_validate_topic_name+0x146>
 801900a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801900e:	d04f      	beq.n	80190b0 <rcl_validate_topic_name+0x160>
 8019010:	4620      	mov	r0, r4
 8019012:	2301      	movs	r3, #1
 8019014:	e006      	b.n	8019024 <rcl_validate_topic_name+0xd4>
 8019016:	428b      	cmp	r3, r1
 8019018:	f105 0501 	add.w	r5, r5, #1
 801901c:	f103 0201 	add.w	r2, r3, #1
 8019020:	d236      	bcs.n	8019090 <rcl_validate_topic_name+0x140>
 8019022:	4613      	mov	r3, r2
 8019024:	4580      	cmp	r8, r0
 8019026:	f100 0001 	add.w	r0, r0, #1
 801902a:	d0f4      	beq.n	8019016 <rcl_validate_topic_name+0xc6>
 801902c:	782a      	ldrb	r2, [r5, #0]
 801902e:	2a2f      	cmp	r2, #47	@ 0x2f
 8019030:	d1f1      	bne.n	8019016 <rcl_validate_topic_name+0xc6>
 8019032:	786a      	ldrb	r2, [r5, #1]
 8019034:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019038:	0754      	lsls	r4, r2, #29
 801903a:	d5ec      	bpl.n	8019016 <rcl_validate_topic_name+0xc6>
 801903c:	2204      	movs	r2, #4
 801903e:	6032      	str	r2, [r6, #0]
 8019040:	2f00      	cmp	r7, #0
 8019042:	d0d1      	beq.n	8018fe8 <rcl_validate_topic_name+0x98>
 8019044:	603b      	str	r3, [r7, #0]
 8019046:	2000      	movs	r0, #0
 8019048:	e7aa      	b.n	8018fa0 <rcl_validate_topic_name+0x50>
 801904a:	200b      	movs	r0, #11
 801904c:	4770      	bx	lr
 801904e:	2304      	movs	r3, #4
 8019050:	6033      	str	r3, [r6, #0]
 8019052:	2f00      	cmp	r7, #0
 8019054:	d1a2      	bne.n	8018f9c <rcl_validate_topic_name+0x4c>
 8019056:	e7c7      	b.n	8018fe8 <rcl_validate_topic_name+0x98>
 8019058:	200b      	movs	r0, #11
 801905a:	e7a1      	b.n	8018fa0 <rcl_validate_topic_name+0x50>
 801905c:	2309      	movs	r3, #9
 801905e:	6033      	str	r3, [r6, #0]
 8019060:	2f00      	cmp	r7, #0
 8019062:	d1c0      	bne.n	8018fe6 <rcl_validate_topic_name+0x96>
 8019064:	e7c0      	b.n	8018fe8 <rcl_validate_topic_name+0x98>
 8019066:	2900      	cmp	r1, #0
 8019068:	d0ca      	beq.n	8019000 <rcl_validate_topic_name+0xb0>
 801906a:	2306      	movs	r3, #6
 801906c:	6033      	str	r3, [r6, #0]
 801906e:	2f00      	cmp	r7, #0
 8019070:	d1b9      	bne.n	8018fe6 <rcl_validate_topic_name+0x96>
 8019072:	e7b9      	b.n	8018fe8 <rcl_validate_topic_name+0x98>
 8019074:	2c00      	cmp	r4, #0
 8019076:	d0c3      	beq.n	8019000 <rcl_validate_topic_name+0xb0>
 8019078:	2308      	movs	r3, #8
 801907a:	6033      	str	r3, [r6, #0]
 801907c:	2f00      	cmp	r7, #0
 801907e:	d1b2      	bne.n	8018fe6 <rcl_validate_topic_name+0x96>
 8019080:	e7b2      	b.n	8018fe8 <rcl_validate_topic_name+0x98>
 8019082:	2c00      	cmp	r4, #0
 8019084:	d1f8      	bne.n	8019078 <rcl_validate_topic_name+0x128>
 8019086:	460b      	mov	r3, r1
 8019088:	2401      	movs	r4, #1
 801908a:	e7b9      	b.n	8019000 <rcl_validate_topic_name+0xb0>
 801908c:	2400      	movs	r4, #0
 801908e:	e7b7      	b.n	8019000 <rcl_validate_topic_name+0xb0>
 8019090:	2000      	movs	r0, #0
 8019092:	6030      	str	r0, [r6, #0]
 8019094:	e784      	b.n	8018fa0 <rcl_validate_topic_name+0x50>
 8019096:	2205      	movs	r2, #5
 8019098:	6032      	str	r2, [r6, #0]
 801909a:	2f00      	cmp	r7, #0
 801909c:	d1d2      	bne.n	8019044 <rcl_validate_topic_name+0xf4>
 801909e:	e7a3      	b.n	8018fe8 <rcl_validate_topic_name+0x98>
 80190a0:	2c00      	cmp	r4, #0
 80190a2:	bf14      	ite	ne
 80190a4:	2308      	movne	r3, #8
 80190a6:	2303      	moveq	r3, #3
 80190a8:	6033      	str	r3, [r6, #0]
 80190aa:	2f00      	cmp	r7, #0
 80190ac:	d19b      	bne.n	8018fe6 <rcl_validate_topic_name+0x96>
 80190ae:	e79b      	b.n	8018fe8 <rcl_validate_topic_name+0x98>
 80190b0:	2301      	movs	r3, #1
 80190b2:	e00a      	b.n	80190ca <rcl_validate_topic_name+0x17a>
 80190b4:	2c01      	cmp	r4, #1
 80190b6:	d013      	beq.n	80190e0 <rcl_validate_topic_name+0x190>
 80190b8:	4299      	cmp	r1, r3
 80190ba:	f104 0401 	add.w	r4, r4, #1
 80190be:	f105 0501 	add.w	r5, r5, #1
 80190c2:	f103 0201 	add.w	r2, r3, #1
 80190c6:	d9e3      	bls.n	8019090 <rcl_validate_topic_name+0x140>
 80190c8:	4613      	mov	r3, r2
 80190ca:	45a0      	cmp	r8, r4
 80190cc:	d0f4      	beq.n	80190b8 <rcl_validate_topic_name+0x168>
 80190ce:	782a      	ldrb	r2, [r5, #0]
 80190d0:	2a2f      	cmp	r2, #47	@ 0x2f
 80190d2:	d1ef      	bne.n	80190b4 <rcl_validate_topic_name+0x164>
 80190d4:	786a      	ldrb	r2, [r5, #1]
 80190d6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80190da:	0752      	lsls	r2, r2, #29
 80190dc:	d5ec      	bpl.n	80190b8 <rcl_validate_topic_name+0x168>
 80190de:	e7ad      	b.n	801903c <rcl_validate_topic_name+0xec>
 80190e0:	2307      	movs	r3, #7
 80190e2:	6033      	str	r3, [r6, #0]
 80190e4:	2f00      	cmp	r7, #0
 80190e6:	f43f af7f 	beq.w	8018fe8 <rcl_validate_topic_name+0x98>
 80190ea:	603c      	str	r4, [r7, #0]
 80190ec:	2000      	movs	r0, #0
 80190ee:	e757      	b.n	8018fa0 <rcl_validate_topic_name+0x50>
 80190f0:	0801b757 	.word	0x0801b757

080190f4 <rmw_create_guard_condition>:
 80190f4:	b538      	push	{r3, r4, r5, lr}
 80190f6:	4605      	mov	r5, r0
 80190f8:	4807      	ldr	r0, [pc, #28]	@ (8019118 <rmw_create_guard_condition+0x24>)
 80190fa:	f7fd ff41 	bl	8016f80 <get_memory>
 80190fe:	b148      	cbz	r0, 8019114 <rmw_create_guard_condition+0x20>
 8019100:	6884      	ldr	r4, [r0, #8]
 8019102:	2300      	movs	r3, #0
 8019104:	7423      	strb	r3, [r4, #16]
 8019106:	61e5      	str	r5, [r4, #28]
 8019108:	f7fd ffa2 	bl	8017050 <rmw_get_implementation_identifier>
 801910c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019110:	f104 0014 	add.w	r0, r4, #20
 8019114:	bd38      	pop	{r3, r4, r5, pc}
 8019116:	bf00      	nop
 8019118:	2000af0c 	.word	0x2000af0c

0801911c <rmw_destroy_guard_condition>:
 801911c:	b508      	push	{r3, lr}
 801911e:	4b08      	ldr	r3, [pc, #32]	@ (8019140 <rmw_destroy_guard_condition+0x24>)
 8019120:	6819      	ldr	r1, [r3, #0]
 8019122:	b911      	cbnz	r1, 801912a <rmw_destroy_guard_condition+0xe>
 8019124:	e00a      	b.n	801913c <rmw_destroy_guard_condition+0x20>
 8019126:	6849      	ldr	r1, [r1, #4]
 8019128:	b141      	cbz	r1, 801913c <rmw_destroy_guard_condition+0x20>
 801912a:	688b      	ldr	r3, [r1, #8]
 801912c:	3314      	adds	r3, #20
 801912e:	4298      	cmp	r0, r3
 8019130:	d1f9      	bne.n	8019126 <rmw_destroy_guard_condition+0xa>
 8019132:	4803      	ldr	r0, [pc, #12]	@ (8019140 <rmw_destroy_guard_condition+0x24>)
 8019134:	f7fd ff34 	bl	8016fa0 <put_memory>
 8019138:	2000      	movs	r0, #0
 801913a:	bd08      	pop	{r3, pc}
 801913c:	2001      	movs	r0, #1
 801913e:	bd08      	pop	{r3, pc}
 8019140:	2000af0c 	.word	0x2000af0c

08019144 <rmw_trigger_guard_condition>:
 8019144:	b160      	cbz	r0, 8019160 <rmw_trigger_guard_condition+0x1c>
 8019146:	b510      	push	{r4, lr}
 8019148:	4604      	mov	r4, r0
 801914a:	6800      	ldr	r0, [r0, #0]
 801914c:	f7f5 fcc6 	bl	800eadc <is_uxrce_rmw_identifier_valid>
 8019150:	b908      	cbnz	r0, 8019156 <rmw_trigger_guard_condition+0x12>
 8019152:	2001      	movs	r0, #1
 8019154:	bd10      	pop	{r4, pc}
 8019156:	6863      	ldr	r3, [r4, #4]
 8019158:	2201      	movs	r2, #1
 801915a:	741a      	strb	r2, [r3, #16]
 801915c:	2000      	movs	r0, #0
 801915e:	bd10      	pop	{r4, pc}
 8019160:	2001      	movs	r0, #1
 8019162:	4770      	bx	lr

08019164 <rosidl_runtime_c__String__init>:
 8019164:	b510      	push	{r4, lr}
 8019166:	4604      	mov	r4, r0
 8019168:	b086      	sub	sp, #24
 801916a:	b170      	cbz	r0, 801918a <rosidl_runtime_c__String__init+0x26>
 801916c:	a801      	add	r0, sp, #4
 801916e:	f7f4 fa73 	bl	800d658 <rcutils_get_default_allocator>
 8019172:	9b01      	ldr	r3, [sp, #4]
 8019174:	9905      	ldr	r1, [sp, #20]
 8019176:	2001      	movs	r0, #1
 8019178:	4798      	blx	r3
 801917a:	6020      	str	r0, [r4, #0]
 801917c:	b128      	cbz	r0, 801918a <rosidl_runtime_c__String__init+0x26>
 801917e:	2100      	movs	r1, #0
 8019180:	2201      	movs	r2, #1
 8019182:	7001      	strb	r1, [r0, #0]
 8019184:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8019188:	4610      	mov	r0, r2
 801918a:	b006      	add	sp, #24
 801918c:	bd10      	pop	{r4, pc}
 801918e:	bf00      	nop

08019190 <rosidl_runtime_c__String__fini>:
 8019190:	b320      	cbz	r0, 80191dc <rosidl_runtime_c__String__fini+0x4c>
 8019192:	b510      	push	{r4, lr}
 8019194:	6803      	ldr	r3, [r0, #0]
 8019196:	b086      	sub	sp, #24
 8019198:	4604      	mov	r4, r0
 801919a:	b173      	cbz	r3, 80191ba <rosidl_runtime_c__String__fini+0x2a>
 801919c:	6883      	ldr	r3, [r0, #8]
 801919e:	b1f3      	cbz	r3, 80191de <rosidl_runtime_c__String__fini+0x4e>
 80191a0:	a801      	add	r0, sp, #4
 80191a2:	f7f4 fa59 	bl	800d658 <rcutils_get_default_allocator>
 80191a6:	9b02      	ldr	r3, [sp, #8]
 80191a8:	9905      	ldr	r1, [sp, #20]
 80191aa:	6820      	ldr	r0, [r4, #0]
 80191ac:	4798      	blx	r3
 80191ae:	2300      	movs	r3, #0
 80191b0:	e9c4 3300 	strd	r3, r3, [r4]
 80191b4:	60a3      	str	r3, [r4, #8]
 80191b6:	b006      	add	sp, #24
 80191b8:	bd10      	pop	{r4, pc}
 80191ba:	6843      	ldr	r3, [r0, #4]
 80191bc:	b9db      	cbnz	r3, 80191f6 <rosidl_runtime_c__String__fini+0x66>
 80191be:	6883      	ldr	r3, [r0, #8]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d0f8      	beq.n	80191b6 <rosidl_runtime_c__String__fini+0x26>
 80191c4:	4b12      	ldr	r3, [pc, #72]	@ (8019210 <rosidl_runtime_c__String__fini+0x80>)
 80191c6:	4813      	ldr	r0, [pc, #76]	@ (8019214 <rosidl_runtime_c__String__fini+0x84>)
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	2251      	movs	r2, #81	@ 0x51
 80191cc:	68db      	ldr	r3, [r3, #12]
 80191ce:	2101      	movs	r1, #1
 80191d0:	f000 fb82 	bl	80198d8 <fwrite>
 80191d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80191d8:	f000 f83e 	bl	8019258 <exit>
 80191dc:	4770      	bx	lr
 80191de:	4b0c      	ldr	r3, [pc, #48]	@ (8019210 <rosidl_runtime_c__String__fini+0x80>)
 80191e0:	480d      	ldr	r0, [pc, #52]	@ (8019218 <rosidl_runtime_c__String__fini+0x88>)
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	224c      	movs	r2, #76	@ 0x4c
 80191e6:	68db      	ldr	r3, [r3, #12]
 80191e8:	2101      	movs	r1, #1
 80191ea:	f000 fb75 	bl	80198d8 <fwrite>
 80191ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80191f2:	f000 f831 	bl	8019258 <exit>
 80191f6:	4b06      	ldr	r3, [pc, #24]	@ (8019210 <rosidl_runtime_c__String__fini+0x80>)
 80191f8:	4808      	ldr	r0, [pc, #32]	@ (801921c <rosidl_runtime_c__String__fini+0x8c>)
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	224e      	movs	r2, #78	@ 0x4e
 80191fe:	68db      	ldr	r3, [r3, #12]
 8019200:	2101      	movs	r1, #1
 8019202:	f000 fb69 	bl	80198d8 <fwrite>
 8019206:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801920a:	f000 f825 	bl	8019258 <exit>
 801920e:	bf00      	nop
 8019210:	200002c4 	.word	0x200002c4
 8019214:	0801b270 	.word	0x0801b270
 8019218:	0801b1d0 	.word	0x0801b1d0
 801921c:	0801b220 	.word	0x0801b220

08019220 <calloc>:
 8019220:	4b02      	ldr	r3, [pc, #8]	@ (801922c <calloc+0xc>)
 8019222:	460a      	mov	r2, r1
 8019224:	4601      	mov	r1, r0
 8019226:	6818      	ldr	r0, [r3, #0]
 8019228:	f000 b802 	b.w	8019230 <_calloc_r>
 801922c:	200002c4 	.word	0x200002c4

08019230 <_calloc_r>:
 8019230:	b570      	push	{r4, r5, r6, lr}
 8019232:	fba1 5402 	umull	r5, r4, r1, r2
 8019236:	b934      	cbnz	r4, 8019246 <_calloc_r+0x16>
 8019238:	4629      	mov	r1, r5
 801923a:	f000 f899 	bl	8019370 <_malloc_r>
 801923e:	4606      	mov	r6, r0
 8019240:	b928      	cbnz	r0, 801924e <_calloc_r+0x1e>
 8019242:	4630      	mov	r0, r6
 8019244:	bd70      	pop	{r4, r5, r6, pc}
 8019246:	220c      	movs	r2, #12
 8019248:	6002      	str	r2, [r0, #0]
 801924a:	2600      	movs	r6, #0
 801924c:	e7f9      	b.n	8019242 <_calloc_r+0x12>
 801924e:	462a      	mov	r2, r5
 8019250:	4621      	mov	r1, r4
 8019252:	f000 fcd5 	bl	8019c00 <memset>
 8019256:	e7f4      	b.n	8019242 <_calloc_r+0x12>

08019258 <exit>:
 8019258:	b508      	push	{r3, lr}
 801925a:	4b06      	ldr	r3, [pc, #24]	@ (8019274 <exit+0x1c>)
 801925c:	4604      	mov	r4, r0
 801925e:	b113      	cbz	r3, 8019266 <exit+0xe>
 8019260:	2100      	movs	r1, #0
 8019262:	f3af 8000 	nop.w
 8019266:	4b04      	ldr	r3, [pc, #16]	@ (8019278 <exit+0x20>)
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	b103      	cbz	r3, 801926e <exit+0x16>
 801926c:	4798      	blx	r3
 801926e:	4620      	mov	r0, r4
 8019270:	f7e9 fb4a 	bl	8002908 <_exit>
 8019274:	00000000 	.word	0x00000000
 8019278:	2000b1c4 	.word	0x2000b1c4

0801927c <getenv>:
 801927c:	b507      	push	{r0, r1, r2, lr}
 801927e:	4b04      	ldr	r3, [pc, #16]	@ (8019290 <getenv+0x14>)
 8019280:	4601      	mov	r1, r0
 8019282:	aa01      	add	r2, sp, #4
 8019284:	6818      	ldr	r0, [r3, #0]
 8019286:	f000 f805 	bl	8019294 <_findenv_r>
 801928a:	b003      	add	sp, #12
 801928c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019290:	200002c4 	.word	0x200002c4

08019294 <_findenv_r>:
 8019294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019298:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019308 <_findenv_r+0x74>
 801929c:	4606      	mov	r6, r0
 801929e:	4689      	mov	r9, r1
 80192a0:	4617      	mov	r7, r2
 80192a2:	f000 fda3 	bl	8019dec <__env_lock>
 80192a6:	f8da 4000 	ldr.w	r4, [sl]
 80192aa:	b134      	cbz	r4, 80192ba <_findenv_r+0x26>
 80192ac:	464b      	mov	r3, r9
 80192ae:	4698      	mov	r8, r3
 80192b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80192b4:	b13a      	cbz	r2, 80192c6 <_findenv_r+0x32>
 80192b6:	2a3d      	cmp	r2, #61	@ 0x3d
 80192b8:	d1f9      	bne.n	80192ae <_findenv_r+0x1a>
 80192ba:	4630      	mov	r0, r6
 80192bc:	f000 fd9c 	bl	8019df8 <__env_unlock>
 80192c0:	2000      	movs	r0, #0
 80192c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192c6:	eba8 0809 	sub.w	r8, r8, r9
 80192ca:	46a3      	mov	fp, r4
 80192cc:	f854 0b04 	ldr.w	r0, [r4], #4
 80192d0:	2800      	cmp	r0, #0
 80192d2:	d0f2      	beq.n	80192ba <_findenv_r+0x26>
 80192d4:	4642      	mov	r2, r8
 80192d6:	4649      	mov	r1, r9
 80192d8:	f000 fca7 	bl	8019c2a <strncmp>
 80192dc:	2800      	cmp	r0, #0
 80192de:	d1f4      	bne.n	80192ca <_findenv_r+0x36>
 80192e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80192e4:	eb03 0508 	add.w	r5, r3, r8
 80192e8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80192ec:	2b3d      	cmp	r3, #61	@ 0x3d
 80192ee:	d1ec      	bne.n	80192ca <_findenv_r+0x36>
 80192f0:	f8da 3000 	ldr.w	r3, [sl]
 80192f4:	ebab 0303 	sub.w	r3, fp, r3
 80192f8:	109b      	asrs	r3, r3, #2
 80192fa:	4630      	mov	r0, r6
 80192fc:	603b      	str	r3, [r7, #0]
 80192fe:	f000 fd7b 	bl	8019df8 <__env_unlock>
 8019302:	1c68      	adds	r0, r5, #1
 8019304:	e7dd      	b.n	80192c2 <_findenv_r+0x2e>
 8019306:	bf00      	nop
 8019308:	20000034 	.word	0x20000034

0801930c <malloc>:
 801930c:	4b02      	ldr	r3, [pc, #8]	@ (8019318 <malloc+0xc>)
 801930e:	4601      	mov	r1, r0
 8019310:	6818      	ldr	r0, [r3, #0]
 8019312:	f000 b82d 	b.w	8019370 <_malloc_r>
 8019316:	bf00      	nop
 8019318:	200002c4 	.word	0x200002c4

0801931c <free>:
 801931c:	4b02      	ldr	r3, [pc, #8]	@ (8019328 <free+0xc>)
 801931e:	4601      	mov	r1, r0
 8019320:	6818      	ldr	r0, [r3, #0]
 8019322:	f000 bd6f 	b.w	8019e04 <_free_r>
 8019326:	bf00      	nop
 8019328:	200002c4 	.word	0x200002c4

0801932c <sbrk_aligned>:
 801932c:	b570      	push	{r4, r5, r6, lr}
 801932e:	4e0f      	ldr	r6, [pc, #60]	@ (801936c <sbrk_aligned+0x40>)
 8019330:	460c      	mov	r4, r1
 8019332:	6831      	ldr	r1, [r6, #0]
 8019334:	4605      	mov	r5, r0
 8019336:	b911      	cbnz	r1, 801933e <sbrk_aligned+0x12>
 8019338:	f000 fcd4 	bl	8019ce4 <_sbrk_r>
 801933c:	6030      	str	r0, [r6, #0]
 801933e:	4621      	mov	r1, r4
 8019340:	4628      	mov	r0, r5
 8019342:	f000 fccf 	bl	8019ce4 <_sbrk_r>
 8019346:	1c43      	adds	r3, r0, #1
 8019348:	d103      	bne.n	8019352 <sbrk_aligned+0x26>
 801934a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801934e:	4620      	mov	r0, r4
 8019350:	bd70      	pop	{r4, r5, r6, pc}
 8019352:	1cc4      	adds	r4, r0, #3
 8019354:	f024 0403 	bic.w	r4, r4, #3
 8019358:	42a0      	cmp	r0, r4
 801935a:	d0f8      	beq.n	801934e <sbrk_aligned+0x22>
 801935c:	1a21      	subs	r1, r4, r0
 801935e:	4628      	mov	r0, r5
 8019360:	f000 fcc0 	bl	8019ce4 <_sbrk_r>
 8019364:	3001      	adds	r0, #1
 8019366:	d1f2      	bne.n	801934e <sbrk_aligned+0x22>
 8019368:	e7ef      	b.n	801934a <sbrk_aligned+0x1e>
 801936a:	bf00      	nop
 801936c:	2000b084 	.word	0x2000b084

08019370 <_malloc_r>:
 8019370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019374:	1ccd      	adds	r5, r1, #3
 8019376:	f025 0503 	bic.w	r5, r5, #3
 801937a:	3508      	adds	r5, #8
 801937c:	2d0c      	cmp	r5, #12
 801937e:	bf38      	it	cc
 8019380:	250c      	movcc	r5, #12
 8019382:	2d00      	cmp	r5, #0
 8019384:	4606      	mov	r6, r0
 8019386:	db01      	blt.n	801938c <_malloc_r+0x1c>
 8019388:	42a9      	cmp	r1, r5
 801938a:	d904      	bls.n	8019396 <_malloc_r+0x26>
 801938c:	230c      	movs	r3, #12
 801938e:	6033      	str	r3, [r6, #0]
 8019390:	2000      	movs	r0, #0
 8019392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019396:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801946c <_malloc_r+0xfc>
 801939a:	f000 f869 	bl	8019470 <__malloc_lock>
 801939e:	f8d8 3000 	ldr.w	r3, [r8]
 80193a2:	461c      	mov	r4, r3
 80193a4:	bb44      	cbnz	r4, 80193f8 <_malloc_r+0x88>
 80193a6:	4629      	mov	r1, r5
 80193a8:	4630      	mov	r0, r6
 80193aa:	f7ff ffbf 	bl	801932c <sbrk_aligned>
 80193ae:	1c43      	adds	r3, r0, #1
 80193b0:	4604      	mov	r4, r0
 80193b2:	d158      	bne.n	8019466 <_malloc_r+0xf6>
 80193b4:	f8d8 4000 	ldr.w	r4, [r8]
 80193b8:	4627      	mov	r7, r4
 80193ba:	2f00      	cmp	r7, #0
 80193bc:	d143      	bne.n	8019446 <_malloc_r+0xd6>
 80193be:	2c00      	cmp	r4, #0
 80193c0:	d04b      	beq.n	801945a <_malloc_r+0xea>
 80193c2:	6823      	ldr	r3, [r4, #0]
 80193c4:	4639      	mov	r1, r7
 80193c6:	4630      	mov	r0, r6
 80193c8:	eb04 0903 	add.w	r9, r4, r3
 80193cc:	f000 fc8a 	bl	8019ce4 <_sbrk_r>
 80193d0:	4581      	cmp	r9, r0
 80193d2:	d142      	bne.n	801945a <_malloc_r+0xea>
 80193d4:	6821      	ldr	r1, [r4, #0]
 80193d6:	1a6d      	subs	r5, r5, r1
 80193d8:	4629      	mov	r1, r5
 80193da:	4630      	mov	r0, r6
 80193dc:	f7ff ffa6 	bl	801932c <sbrk_aligned>
 80193e0:	3001      	adds	r0, #1
 80193e2:	d03a      	beq.n	801945a <_malloc_r+0xea>
 80193e4:	6823      	ldr	r3, [r4, #0]
 80193e6:	442b      	add	r3, r5
 80193e8:	6023      	str	r3, [r4, #0]
 80193ea:	f8d8 3000 	ldr.w	r3, [r8]
 80193ee:	685a      	ldr	r2, [r3, #4]
 80193f0:	bb62      	cbnz	r2, 801944c <_malloc_r+0xdc>
 80193f2:	f8c8 7000 	str.w	r7, [r8]
 80193f6:	e00f      	b.n	8019418 <_malloc_r+0xa8>
 80193f8:	6822      	ldr	r2, [r4, #0]
 80193fa:	1b52      	subs	r2, r2, r5
 80193fc:	d420      	bmi.n	8019440 <_malloc_r+0xd0>
 80193fe:	2a0b      	cmp	r2, #11
 8019400:	d917      	bls.n	8019432 <_malloc_r+0xc2>
 8019402:	1961      	adds	r1, r4, r5
 8019404:	42a3      	cmp	r3, r4
 8019406:	6025      	str	r5, [r4, #0]
 8019408:	bf18      	it	ne
 801940a:	6059      	strne	r1, [r3, #4]
 801940c:	6863      	ldr	r3, [r4, #4]
 801940e:	bf08      	it	eq
 8019410:	f8c8 1000 	streq.w	r1, [r8]
 8019414:	5162      	str	r2, [r4, r5]
 8019416:	604b      	str	r3, [r1, #4]
 8019418:	4630      	mov	r0, r6
 801941a:	f000 f82f 	bl	801947c <__malloc_unlock>
 801941e:	f104 000b 	add.w	r0, r4, #11
 8019422:	1d23      	adds	r3, r4, #4
 8019424:	f020 0007 	bic.w	r0, r0, #7
 8019428:	1ac2      	subs	r2, r0, r3
 801942a:	bf1c      	itt	ne
 801942c:	1a1b      	subne	r3, r3, r0
 801942e:	50a3      	strne	r3, [r4, r2]
 8019430:	e7af      	b.n	8019392 <_malloc_r+0x22>
 8019432:	6862      	ldr	r2, [r4, #4]
 8019434:	42a3      	cmp	r3, r4
 8019436:	bf0c      	ite	eq
 8019438:	f8c8 2000 	streq.w	r2, [r8]
 801943c:	605a      	strne	r2, [r3, #4]
 801943e:	e7eb      	b.n	8019418 <_malloc_r+0xa8>
 8019440:	4623      	mov	r3, r4
 8019442:	6864      	ldr	r4, [r4, #4]
 8019444:	e7ae      	b.n	80193a4 <_malloc_r+0x34>
 8019446:	463c      	mov	r4, r7
 8019448:	687f      	ldr	r7, [r7, #4]
 801944a:	e7b6      	b.n	80193ba <_malloc_r+0x4a>
 801944c:	461a      	mov	r2, r3
 801944e:	685b      	ldr	r3, [r3, #4]
 8019450:	42a3      	cmp	r3, r4
 8019452:	d1fb      	bne.n	801944c <_malloc_r+0xdc>
 8019454:	2300      	movs	r3, #0
 8019456:	6053      	str	r3, [r2, #4]
 8019458:	e7de      	b.n	8019418 <_malloc_r+0xa8>
 801945a:	230c      	movs	r3, #12
 801945c:	6033      	str	r3, [r6, #0]
 801945e:	4630      	mov	r0, r6
 8019460:	f000 f80c 	bl	801947c <__malloc_unlock>
 8019464:	e794      	b.n	8019390 <_malloc_r+0x20>
 8019466:	6005      	str	r5, [r0, #0]
 8019468:	e7d6      	b.n	8019418 <_malloc_r+0xa8>
 801946a:	bf00      	nop
 801946c:	2000b088 	.word	0x2000b088

08019470 <__malloc_lock>:
 8019470:	4801      	ldr	r0, [pc, #4]	@ (8019478 <__malloc_lock+0x8>)
 8019472:	f000 bc84 	b.w	8019d7e <__retarget_lock_acquire_recursive>
 8019476:	bf00      	nop
 8019478:	2000b1cd 	.word	0x2000b1cd

0801947c <__malloc_unlock>:
 801947c:	4801      	ldr	r0, [pc, #4]	@ (8019484 <__malloc_unlock+0x8>)
 801947e:	f000 bc7f 	b.w	8019d80 <__retarget_lock_release_recursive>
 8019482:	bf00      	nop
 8019484:	2000b1cd 	.word	0x2000b1cd

08019488 <srand>:
 8019488:	b538      	push	{r3, r4, r5, lr}
 801948a:	4b10      	ldr	r3, [pc, #64]	@ (80194cc <srand+0x44>)
 801948c:	681d      	ldr	r5, [r3, #0]
 801948e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019490:	4604      	mov	r4, r0
 8019492:	b9b3      	cbnz	r3, 80194c2 <srand+0x3a>
 8019494:	2018      	movs	r0, #24
 8019496:	f7ff ff39 	bl	801930c <malloc>
 801949a:	4602      	mov	r2, r0
 801949c:	6328      	str	r0, [r5, #48]	@ 0x30
 801949e:	b920      	cbnz	r0, 80194aa <srand+0x22>
 80194a0:	4b0b      	ldr	r3, [pc, #44]	@ (80194d0 <srand+0x48>)
 80194a2:	480c      	ldr	r0, [pc, #48]	@ (80194d4 <srand+0x4c>)
 80194a4:	2146      	movs	r1, #70	@ 0x46
 80194a6:	f000 fc83 	bl	8019db0 <__assert_func>
 80194aa:	490b      	ldr	r1, [pc, #44]	@ (80194d8 <srand+0x50>)
 80194ac:	4b0b      	ldr	r3, [pc, #44]	@ (80194dc <srand+0x54>)
 80194ae:	e9c0 1300 	strd	r1, r3, [r0]
 80194b2:	4b0b      	ldr	r3, [pc, #44]	@ (80194e0 <srand+0x58>)
 80194b4:	6083      	str	r3, [r0, #8]
 80194b6:	230b      	movs	r3, #11
 80194b8:	8183      	strh	r3, [r0, #12]
 80194ba:	2100      	movs	r1, #0
 80194bc:	2001      	movs	r0, #1
 80194be:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80194c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80194c4:	2200      	movs	r2, #0
 80194c6:	611c      	str	r4, [r3, #16]
 80194c8:	615a      	str	r2, [r3, #20]
 80194ca:	bd38      	pop	{r3, r4, r5, pc}
 80194cc:	200002c4 	.word	0x200002c4
 80194d0:	0801b678 	.word	0x0801b678
 80194d4:	0801b68f 	.word	0x0801b68f
 80194d8:	abcd330e 	.word	0xabcd330e
 80194dc:	e66d1234 	.word	0xe66d1234
 80194e0:	0005deec 	.word	0x0005deec

080194e4 <rand>:
 80194e4:	4b16      	ldr	r3, [pc, #88]	@ (8019540 <rand+0x5c>)
 80194e6:	b510      	push	{r4, lr}
 80194e8:	681c      	ldr	r4, [r3, #0]
 80194ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80194ec:	b9b3      	cbnz	r3, 801951c <rand+0x38>
 80194ee:	2018      	movs	r0, #24
 80194f0:	f7ff ff0c 	bl	801930c <malloc>
 80194f4:	4602      	mov	r2, r0
 80194f6:	6320      	str	r0, [r4, #48]	@ 0x30
 80194f8:	b920      	cbnz	r0, 8019504 <rand+0x20>
 80194fa:	4b12      	ldr	r3, [pc, #72]	@ (8019544 <rand+0x60>)
 80194fc:	4812      	ldr	r0, [pc, #72]	@ (8019548 <rand+0x64>)
 80194fe:	2152      	movs	r1, #82	@ 0x52
 8019500:	f000 fc56 	bl	8019db0 <__assert_func>
 8019504:	4911      	ldr	r1, [pc, #68]	@ (801954c <rand+0x68>)
 8019506:	4b12      	ldr	r3, [pc, #72]	@ (8019550 <rand+0x6c>)
 8019508:	e9c0 1300 	strd	r1, r3, [r0]
 801950c:	4b11      	ldr	r3, [pc, #68]	@ (8019554 <rand+0x70>)
 801950e:	6083      	str	r3, [r0, #8]
 8019510:	230b      	movs	r3, #11
 8019512:	8183      	strh	r3, [r0, #12]
 8019514:	2100      	movs	r1, #0
 8019516:	2001      	movs	r0, #1
 8019518:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801951c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801951e:	480e      	ldr	r0, [pc, #56]	@ (8019558 <rand+0x74>)
 8019520:	690b      	ldr	r3, [r1, #16]
 8019522:	694c      	ldr	r4, [r1, #20]
 8019524:	4a0d      	ldr	r2, [pc, #52]	@ (801955c <rand+0x78>)
 8019526:	4358      	muls	r0, r3
 8019528:	fb02 0004 	mla	r0, r2, r4, r0
 801952c:	fba3 3202 	umull	r3, r2, r3, r2
 8019530:	3301      	adds	r3, #1
 8019532:	eb40 0002 	adc.w	r0, r0, r2
 8019536:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801953a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801953e:	bd10      	pop	{r4, pc}
 8019540:	200002c4 	.word	0x200002c4
 8019544:	0801b678 	.word	0x0801b678
 8019548:	0801b68f 	.word	0x0801b68f
 801954c:	abcd330e 	.word	0xabcd330e
 8019550:	e66d1234 	.word	0xe66d1234
 8019554:	0005deec 	.word	0x0005deec
 8019558:	5851f42d 	.word	0x5851f42d
 801955c:	4c957f2d 	.word	0x4c957f2d

08019560 <realloc>:
 8019560:	4b02      	ldr	r3, [pc, #8]	@ (801956c <realloc+0xc>)
 8019562:	460a      	mov	r2, r1
 8019564:	4601      	mov	r1, r0
 8019566:	6818      	ldr	r0, [r3, #0]
 8019568:	f000 b802 	b.w	8019570 <_realloc_r>
 801956c:	200002c4 	.word	0x200002c4

08019570 <_realloc_r>:
 8019570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019574:	4607      	mov	r7, r0
 8019576:	4614      	mov	r4, r2
 8019578:	460d      	mov	r5, r1
 801957a:	b921      	cbnz	r1, 8019586 <_realloc_r+0x16>
 801957c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019580:	4611      	mov	r1, r2
 8019582:	f7ff bef5 	b.w	8019370 <_malloc_r>
 8019586:	b92a      	cbnz	r2, 8019594 <_realloc_r+0x24>
 8019588:	f000 fc3c 	bl	8019e04 <_free_r>
 801958c:	4625      	mov	r5, r4
 801958e:	4628      	mov	r0, r5
 8019590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019594:	f000 fc80 	bl	8019e98 <_malloc_usable_size_r>
 8019598:	4284      	cmp	r4, r0
 801959a:	4606      	mov	r6, r0
 801959c:	d802      	bhi.n	80195a4 <_realloc_r+0x34>
 801959e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80195a2:	d8f4      	bhi.n	801958e <_realloc_r+0x1e>
 80195a4:	4621      	mov	r1, r4
 80195a6:	4638      	mov	r0, r7
 80195a8:	f7ff fee2 	bl	8019370 <_malloc_r>
 80195ac:	4680      	mov	r8, r0
 80195ae:	b908      	cbnz	r0, 80195b4 <_realloc_r+0x44>
 80195b0:	4645      	mov	r5, r8
 80195b2:	e7ec      	b.n	801958e <_realloc_r+0x1e>
 80195b4:	42b4      	cmp	r4, r6
 80195b6:	4622      	mov	r2, r4
 80195b8:	4629      	mov	r1, r5
 80195ba:	bf28      	it	cs
 80195bc:	4632      	movcs	r2, r6
 80195be:	f000 fbe8 	bl	8019d92 <memcpy>
 80195c2:	4629      	mov	r1, r5
 80195c4:	4638      	mov	r0, r7
 80195c6:	f000 fc1d 	bl	8019e04 <_free_r>
 80195ca:	e7f1      	b.n	80195b0 <_realloc_r+0x40>

080195cc <_strtoul_l.isra.0>:
 80195cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80195d0:	4e34      	ldr	r6, [pc, #208]	@ (80196a4 <_strtoul_l.isra.0+0xd8>)
 80195d2:	4686      	mov	lr, r0
 80195d4:	460d      	mov	r5, r1
 80195d6:	4628      	mov	r0, r5
 80195d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80195dc:	5d37      	ldrb	r7, [r6, r4]
 80195de:	f017 0708 	ands.w	r7, r7, #8
 80195e2:	d1f8      	bne.n	80195d6 <_strtoul_l.isra.0+0xa>
 80195e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80195e6:	d110      	bne.n	801960a <_strtoul_l.isra.0+0x3e>
 80195e8:	782c      	ldrb	r4, [r5, #0]
 80195ea:	2701      	movs	r7, #1
 80195ec:	1c85      	adds	r5, r0, #2
 80195ee:	f033 0010 	bics.w	r0, r3, #16
 80195f2:	d115      	bne.n	8019620 <_strtoul_l.isra.0+0x54>
 80195f4:	2c30      	cmp	r4, #48	@ 0x30
 80195f6:	d10d      	bne.n	8019614 <_strtoul_l.isra.0+0x48>
 80195f8:	7828      	ldrb	r0, [r5, #0]
 80195fa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80195fe:	2858      	cmp	r0, #88	@ 0x58
 8019600:	d108      	bne.n	8019614 <_strtoul_l.isra.0+0x48>
 8019602:	786c      	ldrb	r4, [r5, #1]
 8019604:	3502      	adds	r5, #2
 8019606:	2310      	movs	r3, #16
 8019608:	e00a      	b.n	8019620 <_strtoul_l.isra.0+0x54>
 801960a:	2c2b      	cmp	r4, #43	@ 0x2b
 801960c:	bf04      	itt	eq
 801960e:	782c      	ldrbeq	r4, [r5, #0]
 8019610:	1c85      	addeq	r5, r0, #2
 8019612:	e7ec      	b.n	80195ee <_strtoul_l.isra.0+0x22>
 8019614:	2b00      	cmp	r3, #0
 8019616:	d1f6      	bne.n	8019606 <_strtoul_l.isra.0+0x3a>
 8019618:	2c30      	cmp	r4, #48	@ 0x30
 801961a:	bf14      	ite	ne
 801961c:	230a      	movne	r3, #10
 801961e:	2308      	moveq	r3, #8
 8019620:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019624:	2600      	movs	r6, #0
 8019626:	fbb8 f8f3 	udiv	r8, r8, r3
 801962a:	fb03 f908 	mul.w	r9, r3, r8
 801962e:	ea6f 0909 	mvn.w	r9, r9
 8019632:	4630      	mov	r0, r6
 8019634:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019638:	f1bc 0f09 	cmp.w	ip, #9
 801963c:	d810      	bhi.n	8019660 <_strtoul_l.isra.0+0x94>
 801963e:	4664      	mov	r4, ip
 8019640:	42a3      	cmp	r3, r4
 8019642:	dd1e      	ble.n	8019682 <_strtoul_l.isra.0+0xb6>
 8019644:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8019648:	d007      	beq.n	801965a <_strtoul_l.isra.0+0x8e>
 801964a:	4580      	cmp	r8, r0
 801964c:	d316      	bcc.n	801967c <_strtoul_l.isra.0+0xb0>
 801964e:	d101      	bne.n	8019654 <_strtoul_l.isra.0+0x88>
 8019650:	45a1      	cmp	r9, r4
 8019652:	db13      	blt.n	801967c <_strtoul_l.isra.0+0xb0>
 8019654:	fb00 4003 	mla	r0, r0, r3, r4
 8019658:	2601      	movs	r6, #1
 801965a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801965e:	e7e9      	b.n	8019634 <_strtoul_l.isra.0+0x68>
 8019660:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019664:	f1bc 0f19 	cmp.w	ip, #25
 8019668:	d801      	bhi.n	801966e <_strtoul_l.isra.0+0xa2>
 801966a:	3c37      	subs	r4, #55	@ 0x37
 801966c:	e7e8      	b.n	8019640 <_strtoul_l.isra.0+0x74>
 801966e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019672:	f1bc 0f19 	cmp.w	ip, #25
 8019676:	d804      	bhi.n	8019682 <_strtoul_l.isra.0+0xb6>
 8019678:	3c57      	subs	r4, #87	@ 0x57
 801967a:	e7e1      	b.n	8019640 <_strtoul_l.isra.0+0x74>
 801967c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019680:	e7eb      	b.n	801965a <_strtoul_l.isra.0+0x8e>
 8019682:	1c73      	adds	r3, r6, #1
 8019684:	d106      	bne.n	8019694 <_strtoul_l.isra.0+0xc8>
 8019686:	2322      	movs	r3, #34	@ 0x22
 8019688:	f8ce 3000 	str.w	r3, [lr]
 801968c:	4630      	mov	r0, r6
 801968e:	b932      	cbnz	r2, 801969e <_strtoul_l.isra.0+0xd2>
 8019690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019694:	b107      	cbz	r7, 8019698 <_strtoul_l.isra.0+0xcc>
 8019696:	4240      	negs	r0, r0
 8019698:	2a00      	cmp	r2, #0
 801969a:	d0f9      	beq.n	8019690 <_strtoul_l.isra.0+0xc4>
 801969c:	b106      	cbz	r6, 80196a0 <_strtoul_l.isra.0+0xd4>
 801969e:	1e69      	subs	r1, r5, #1
 80196a0:	6011      	str	r1, [r2, #0]
 80196a2:	e7f5      	b.n	8019690 <_strtoul_l.isra.0+0xc4>
 80196a4:	0801b757 	.word	0x0801b757

080196a8 <strtoul>:
 80196a8:	4613      	mov	r3, r2
 80196aa:	460a      	mov	r2, r1
 80196ac:	4601      	mov	r1, r0
 80196ae:	4802      	ldr	r0, [pc, #8]	@ (80196b8 <strtoul+0x10>)
 80196b0:	6800      	ldr	r0, [r0, #0]
 80196b2:	f7ff bf8b 	b.w	80195cc <_strtoul_l.isra.0>
 80196b6:	bf00      	nop
 80196b8:	200002c4 	.word	0x200002c4

080196bc <std>:
 80196bc:	2300      	movs	r3, #0
 80196be:	b510      	push	{r4, lr}
 80196c0:	4604      	mov	r4, r0
 80196c2:	e9c0 3300 	strd	r3, r3, [r0]
 80196c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80196ca:	6083      	str	r3, [r0, #8]
 80196cc:	8181      	strh	r1, [r0, #12]
 80196ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80196d0:	81c2      	strh	r2, [r0, #14]
 80196d2:	6183      	str	r3, [r0, #24]
 80196d4:	4619      	mov	r1, r3
 80196d6:	2208      	movs	r2, #8
 80196d8:	305c      	adds	r0, #92	@ 0x5c
 80196da:	f000 fa91 	bl	8019c00 <memset>
 80196de:	4b0d      	ldr	r3, [pc, #52]	@ (8019714 <std+0x58>)
 80196e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80196e2:	4b0d      	ldr	r3, [pc, #52]	@ (8019718 <std+0x5c>)
 80196e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80196e6:	4b0d      	ldr	r3, [pc, #52]	@ (801971c <std+0x60>)
 80196e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80196ea:	4b0d      	ldr	r3, [pc, #52]	@ (8019720 <std+0x64>)
 80196ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80196ee:	4b0d      	ldr	r3, [pc, #52]	@ (8019724 <std+0x68>)
 80196f0:	6224      	str	r4, [r4, #32]
 80196f2:	429c      	cmp	r4, r3
 80196f4:	d006      	beq.n	8019704 <std+0x48>
 80196f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80196fa:	4294      	cmp	r4, r2
 80196fc:	d002      	beq.n	8019704 <std+0x48>
 80196fe:	33d0      	adds	r3, #208	@ 0xd0
 8019700:	429c      	cmp	r4, r3
 8019702:	d105      	bne.n	8019710 <std+0x54>
 8019704:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801970c:	f000 bb36 	b.w	8019d7c <__retarget_lock_init_recursive>
 8019710:	bd10      	pop	{r4, pc}
 8019712:	bf00      	nop
 8019714:	08019985 	.word	0x08019985
 8019718:	080199a7 	.word	0x080199a7
 801971c:	080199df 	.word	0x080199df
 8019720:	08019a03 	.word	0x08019a03
 8019724:	2000b08c 	.word	0x2000b08c

08019728 <stdio_exit_handler>:
 8019728:	4a02      	ldr	r2, [pc, #8]	@ (8019734 <stdio_exit_handler+0xc>)
 801972a:	4903      	ldr	r1, [pc, #12]	@ (8019738 <stdio_exit_handler+0x10>)
 801972c:	4803      	ldr	r0, [pc, #12]	@ (801973c <stdio_exit_handler+0x14>)
 801972e:	f000 b869 	b.w	8019804 <_fwalk_sglue>
 8019732:	bf00      	nop
 8019734:	200002b8 	.word	0x200002b8
 8019738:	0801a7fd 	.word	0x0801a7fd
 801973c:	200002c8 	.word	0x200002c8

08019740 <cleanup_stdio>:
 8019740:	6841      	ldr	r1, [r0, #4]
 8019742:	4b0c      	ldr	r3, [pc, #48]	@ (8019774 <cleanup_stdio+0x34>)
 8019744:	4299      	cmp	r1, r3
 8019746:	b510      	push	{r4, lr}
 8019748:	4604      	mov	r4, r0
 801974a:	d001      	beq.n	8019750 <cleanup_stdio+0x10>
 801974c:	f001 f856 	bl	801a7fc <_fflush_r>
 8019750:	68a1      	ldr	r1, [r4, #8]
 8019752:	4b09      	ldr	r3, [pc, #36]	@ (8019778 <cleanup_stdio+0x38>)
 8019754:	4299      	cmp	r1, r3
 8019756:	d002      	beq.n	801975e <cleanup_stdio+0x1e>
 8019758:	4620      	mov	r0, r4
 801975a:	f001 f84f 	bl	801a7fc <_fflush_r>
 801975e:	68e1      	ldr	r1, [r4, #12]
 8019760:	4b06      	ldr	r3, [pc, #24]	@ (801977c <cleanup_stdio+0x3c>)
 8019762:	4299      	cmp	r1, r3
 8019764:	d004      	beq.n	8019770 <cleanup_stdio+0x30>
 8019766:	4620      	mov	r0, r4
 8019768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801976c:	f001 b846 	b.w	801a7fc <_fflush_r>
 8019770:	bd10      	pop	{r4, pc}
 8019772:	bf00      	nop
 8019774:	2000b08c 	.word	0x2000b08c
 8019778:	2000b0f4 	.word	0x2000b0f4
 801977c:	2000b15c 	.word	0x2000b15c

08019780 <global_stdio_init.part.0>:
 8019780:	b510      	push	{r4, lr}
 8019782:	4b0b      	ldr	r3, [pc, #44]	@ (80197b0 <global_stdio_init.part.0+0x30>)
 8019784:	4c0b      	ldr	r4, [pc, #44]	@ (80197b4 <global_stdio_init.part.0+0x34>)
 8019786:	4a0c      	ldr	r2, [pc, #48]	@ (80197b8 <global_stdio_init.part.0+0x38>)
 8019788:	601a      	str	r2, [r3, #0]
 801978a:	4620      	mov	r0, r4
 801978c:	2200      	movs	r2, #0
 801978e:	2104      	movs	r1, #4
 8019790:	f7ff ff94 	bl	80196bc <std>
 8019794:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019798:	2201      	movs	r2, #1
 801979a:	2109      	movs	r1, #9
 801979c:	f7ff ff8e 	bl	80196bc <std>
 80197a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80197a4:	2202      	movs	r2, #2
 80197a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197aa:	2112      	movs	r1, #18
 80197ac:	f7ff bf86 	b.w	80196bc <std>
 80197b0:	2000b1c4 	.word	0x2000b1c4
 80197b4:	2000b08c 	.word	0x2000b08c
 80197b8:	08019729 	.word	0x08019729

080197bc <__sfp_lock_acquire>:
 80197bc:	4801      	ldr	r0, [pc, #4]	@ (80197c4 <__sfp_lock_acquire+0x8>)
 80197be:	f000 bade 	b.w	8019d7e <__retarget_lock_acquire_recursive>
 80197c2:	bf00      	nop
 80197c4:	2000b1ce 	.word	0x2000b1ce

080197c8 <__sfp_lock_release>:
 80197c8:	4801      	ldr	r0, [pc, #4]	@ (80197d0 <__sfp_lock_release+0x8>)
 80197ca:	f000 bad9 	b.w	8019d80 <__retarget_lock_release_recursive>
 80197ce:	bf00      	nop
 80197d0:	2000b1ce 	.word	0x2000b1ce

080197d4 <__sinit>:
 80197d4:	b510      	push	{r4, lr}
 80197d6:	4604      	mov	r4, r0
 80197d8:	f7ff fff0 	bl	80197bc <__sfp_lock_acquire>
 80197dc:	6a23      	ldr	r3, [r4, #32]
 80197de:	b11b      	cbz	r3, 80197e8 <__sinit+0x14>
 80197e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197e4:	f7ff bff0 	b.w	80197c8 <__sfp_lock_release>
 80197e8:	4b04      	ldr	r3, [pc, #16]	@ (80197fc <__sinit+0x28>)
 80197ea:	6223      	str	r3, [r4, #32]
 80197ec:	4b04      	ldr	r3, [pc, #16]	@ (8019800 <__sinit+0x2c>)
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d1f5      	bne.n	80197e0 <__sinit+0xc>
 80197f4:	f7ff ffc4 	bl	8019780 <global_stdio_init.part.0>
 80197f8:	e7f2      	b.n	80197e0 <__sinit+0xc>
 80197fa:	bf00      	nop
 80197fc:	08019741 	.word	0x08019741
 8019800:	2000b1c4 	.word	0x2000b1c4

08019804 <_fwalk_sglue>:
 8019804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019808:	4607      	mov	r7, r0
 801980a:	4688      	mov	r8, r1
 801980c:	4614      	mov	r4, r2
 801980e:	2600      	movs	r6, #0
 8019810:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019814:	f1b9 0901 	subs.w	r9, r9, #1
 8019818:	d505      	bpl.n	8019826 <_fwalk_sglue+0x22>
 801981a:	6824      	ldr	r4, [r4, #0]
 801981c:	2c00      	cmp	r4, #0
 801981e:	d1f7      	bne.n	8019810 <_fwalk_sglue+0xc>
 8019820:	4630      	mov	r0, r6
 8019822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019826:	89ab      	ldrh	r3, [r5, #12]
 8019828:	2b01      	cmp	r3, #1
 801982a:	d907      	bls.n	801983c <_fwalk_sglue+0x38>
 801982c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019830:	3301      	adds	r3, #1
 8019832:	d003      	beq.n	801983c <_fwalk_sglue+0x38>
 8019834:	4629      	mov	r1, r5
 8019836:	4638      	mov	r0, r7
 8019838:	47c0      	blx	r8
 801983a:	4306      	orrs	r6, r0
 801983c:	3568      	adds	r5, #104	@ 0x68
 801983e:	e7e9      	b.n	8019814 <_fwalk_sglue+0x10>

08019840 <_fwrite_r>:
 8019840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019844:	9c08      	ldr	r4, [sp, #32]
 8019846:	468a      	mov	sl, r1
 8019848:	4690      	mov	r8, r2
 801984a:	fb02 f903 	mul.w	r9, r2, r3
 801984e:	4606      	mov	r6, r0
 8019850:	b118      	cbz	r0, 801985a <_fwrite_r+0x1a>
 8019852:	6a03      	ldr	r3, [r0, #32]
 8019854:	b90b      	cbnz	r3, 801985a <_fwrite_r+0x1a>
 8019856:	f7ff ffbd 	bl	80197d4 <__sinit>
 801985a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801985c:	07dd      	lsls	r5, r3, #31
 801985e:	d405      	bmi.n	801986c <_fwrite_r+0x2c>
 8019860:	89a3      	ldrh	r3, [r4, #12]
 8019862:	0598      	lsls	r0, r3, #22
 8019864:	d402      	bmi.n	801986c <_fwrite_r+0x2c>
 8019866:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019868:	f000 fa89 	bl	8019d7e <__retarget_lock_acquire_recursive>
 801986c:	89a3      	ldrh	r3, [r4, #12]
 801986e:	0719      	lsls	r1, r3, #28
 8019870:	d516      	bpl.n	80198a0 <_fwrite_r+0x60>
 8019872:	6923      	ldr	r3, [r4, #16]
 8019874:	b1a3      	cbz	r3, 80198a0 <_fwrite_r+0x60>
 8019876:	2500      	movs	r5, #0
 8019878:	454d      	cmp	r5, r9
 801987a:	d01f      	beq.n	80198bc <_fwrite_r+0x7c>
 801987c:	68a7      	ldr	r7, [r4, #8]
 801987e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8019882:	3f01      	subs	r7, #1
 8019884:	2f00      	cmp	r7, #0
 8019886:	60a7      	str	r7, [r4, #8]
 8019888:	da04      	bge.n	8019894 <_fwrite_r+0x54>
 801988a:	69a3      	ldr	r3, [r4, #24]
 801988c:	429f      	cmp	r7, r3
 801988e:	db0f      	blt.n	80198b0 <_fwrite_r+0x70>
 8019890:	290a      	cmp	r1, #10
 8019892:	d00d      	beq.n	80198b0 <_fwrite_r+0x70>
 8019894:	6823      	ldr	r3, [r4, #0]
 8019896:	1c5a      	adds	r2, r3, #1
 8019898:	6022      	str	r2, [r4, #0]
 801989a:	7019      	strb	r1, [r3, #0]
 801989c:	3501      	adds	r5, #1
 801989e:	e7eb      	b.n	8019878 <_fwrite_r+0x38>
 80198a0:	4621      	mov	r1, r4
 80198a2:	4630      	mov	r0, r6
 80198a4:	f000 f92c 	bl	8019b00 <__swsetup_r>
 80198a8:	2800      	cmp	r0, #0
 80198aa:	d0e4      	beq.n	8019876 <_fwrite_r+0x36>
 80198ac:	2500      	movs	r5, #0
 80198ae:	e005      	b.n	80198bc <_fwrite_r+0x7c>
 80198b0:	4622      	mov	r2, r4
 80198b2:	4630      	mov	r0, r6
 80198b4:	f000 f8e6 	bl	8019a84 <__swbuf_r>
 80198b8:	3001      	adds	r0, #1
 80198ba:	d1ef      	bne.n	801989c <_fwrite_r+0x5c>
 80198bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80198be:	07da      	lsls	r2, r3, #31
 80198c0:	d405      	bmi.n	80198ce <_fwrite_r+0x8e>
 80198c2:	89a3      	ldrh	r3, [r4, #12]
 80198c4:	059b      	lsls	r3, r3, #22
 80198c6:	d402      	bmi.n	80198ce <_fwrite_r+0x8e>
 80198c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80198ca:	f000 fa59 	bl	8019d80 <__retarget_lock_release_recursive>
 80198ce:	fbb5 f0f8 	udiv	r0, r5, r8
 80198d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080198d8 <fwrite>:
 80198d8:	b507      	push	{r0, r1, r2, lr}
 80198da:	9300      	str	r3, [sp, #0]
 80198dc:	4613      	mov	r3, r2
 80198de:	460a      	mov	r2, r1
 80198e0:	4601      	mov	r1, r0
 80198e2:	4803      	ldr	r0, [pc, #12]	@ (80198f0 <fwrite+0x18>)
 80198e4:	6800      	ldr	r0, [r0, #0]
 80198e6:	f7ff ffab 	bl	8019840 <_fwrite_r>
 80198ea:	b003      	add	sp, #12
 80198ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80198f0:	200002c4 	.word	0x200002c4

080198f4 <iprintf>:
 80198f4:	b40f      	push	{r0, r1, r2, r3}
 80198f6:	b507      	push	{r0, r1, r2, lr}
 80198f8:	4906      	ldr	r1, [pc, #24]	@ (8019914 <iprintf+0x20>)
 80198fa:	ab04      	add	r3, sp, #16
 80198fc:	6808      	ldr	r0, [r1, #0]
 80198fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019902:	6881      	ldr	r1, [r0, #8]
 8019904:	9301      	str	r3, [sp, #4]
 8019906:	f000 fc51 	bl	801a1ac <_vfiprintf_r>
 801990a:	b003      	add	sp, #12
 801990c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019910:	b004      	add	sp, #16
 8019912:	4770      	bx	lr
 8019914:	200002c4 	.word	0x200002c4

08019918 <sniprintf>:
 8019918:	b40c      	push	{r2, r3}
 801991a:	b530      	push	{r4, r5, lr}
 801991c:	4b18      	ldr	r3, [pc, #96]	@ (8019980 <sniprintf+0x68>)
 801991e:	1e0c      	subs	r4, r1, #0
 8019920:	681d      	ldr	r5, [r3, #0]
 8019922:	b09d      	sub	sp, #116	@ 0x74
 8019924:	da08      	bge.n	8019938 <sniprintf+0x20>
 8019926:	238b      	movs	r3, #139	@ 0x8b
 8019928:	602b      	str	r3, [r5, #0]
 801992a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801992e:	b01d      	add	sp, #116	@ 0x74
 8019930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019934:	b002      	add	sp, #8
 8019936:	4770      	bx	lr
 8019938:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801993c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019940:	f04f 0300 	mov.w	r3, #0
 8019944:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019946:	bf14      	ite	ne
 8019948:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801994c:	4623      	moveq	r3, r4
 801994e:	9304      	str	r3, [sp, #16]
 8019950:	9307      	str	r3, [sp, #28]
 8019952:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019956:	9002      	str	r0, [sp, #8]
 8019958:	9006      	str	r0, [sp, #24]
 801995a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801995e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019960:	ab21      	add	r3, sp, #132	@ 0x84
 8019962:	a902      	add	r1, sp, #8
 8019964:	4628      	mov	r0, r5
 8019966:	9301      	str	r3, [sp, #4]
 8019968:	f000 fafa 	bl	8019f60 <_svfiprintf_r>
 801996c:	1c43      	adds	r3, r0, #1
 801996e:	bfbc      	itt	lt
 8019970:	238b      	movlt	r3, #139	@ 0x8b
 8019972:	602b      	strlt	r3, [r5, #0]
 8019974:	2c00      	cmp	r4, #0
 8019976:	d0da      	beq.n	801992e <sniprintf+0x16>
 8019978:	9b02      	ldr	r3, [sp, #8]
 801997a:	2200      	movs	r2, #0
 801997c:	701a      	strb	r2, [r3, #0]
 801997e:	e7d6      	b.n	801992e <sniprintf+0x16>
 8019980:	200002c4 	.word	0x200002c4

08019984 <__sread>:
 8019984:	b510      	push	{r4, lr}
 8019986:	460c      	mov	r4, r1
 8019988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801998c:	f000 f998 	bl	8019cc0 <_read_r>
 8019990:	2800      	cmp	r0, #0
 8019992:	bfab      	itete	ge
 8019994:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019996:	89a3      	ldrhlt	r3, [r4, #12]
 8019998:	181b      	addge	r3, r3, r0
 801999a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801999e:	bfac      	ite	ge
 80199a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80199a2:	81a3      	strhlt	r3, [r4, #12]
 80199a4:	bd10      	pop	{r4, pc}

080199a6 <__swrite>:
 80199a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199aa:	461f      	mov	r7, r3
 80199ac:	898b      	ldrh	r3, [r1, #12]
 80199ae:	05db      	lsls	r3, r3, #23
 80199b0:	4605      	mov	r5, r0
 80199b2:	460c      	mov	r4, r1
 80199b4:	4616      	mov	r6, r2
 80199b6:	d505      	bpl.n	80199c4 <__swrite+0x1e>
 80199b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199bc:	2302      	movs	r3, #2
 80199be:	2200      	movs	r2, #0
 80199c0:	f000 f96c 	bl	8019c9c <_lseek_r>
 80199c4:	89a3      	ldrh	r3, [r4, #12]
 80199c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80199ce:	81a3      	strh	r3, [r4, #12]
 80199d0:	4632      	mov	r2, r6
 80199d2:	463b      	mov	r3, r7
 80199d4:	4628      	mov	r0, r5
 80199d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80199da:	f000 b993 	b.w	8019d04 <_write_r>

080199de <__sseek>:
 80199de:	b510      	push	{r4, lr}
 80199e0:	460c      	mov	r4, r1
 80199e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199e6:	f000 f959 	bl	8019c9c <_lseek_r>
 80199ea:	1c43      	adds	r3, r0, #1
 80199ec:	89a3      	ldrh	r3, [r4, #12]
 80199ee:	bf15      	itete	ne
 80199f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80199f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80199f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80199fa:	81a3      	strheq	r3, [r4, #12]
 80199fc:	bf18      	it	ne
 80199fe:	81a3      	strhne	r3, [r4, #12]
 8019a00:	bd10      	pop	{r4, pc}

08019a02 <__sclose>:
 8019a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a06:	f000 b939 	b.w	8019c7c <_close_r>

08019a0a <_vsniprintf_r>:
 8019a0a:	b530      	push	{r4, r5, lr}
 8019a0c:	4614      	mov	r4, r2
 8019a0e:	2c00      	cmp	r4, #0
 8019a10:	b09b      	sub	sp, #108	@ 0x6c
 8019a12:	4605      	mov	r5, r0
 8019a14:	461a      	mov	r2, r3
 8019a16:	da05      	bge.n	8019a24 <_vsniprintf_r+0x1a>
 8019a18:	238b      	movs	r3, #139	@ 0x8b
 8019a1a:	6003      	str	r3, [r0, #0]
 8019a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019a20:	b01b      	add	sp, #108	@ 0x6c
 8019a22:	bd30      	pop	{r4, r5, pc}
 8019a24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019a28:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019a2c:	f04f 0300 	mov.w	r3, #0
 8019a30:	9319      	str	r3, [sp, #100]	@ 0x64
 8019a32:	bf14      	ite	ne
 8019a34:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019a38:	4623      	moveq	r3, r4
 8019a3a:	9302      	str	r3, [sp, #8]
 8019a3c:	9305      	str	r3, [sp, #20]
 8019a3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a42:	9100      	str	r1, [sp, #0]
 8019a44:	9104      	str	r1, [sp, #16]
 8019a46:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019a4a:	4669      	mov	r1, sp
 8019a4c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019a4e:	f000 fa87 	bl	8019f60 <_svfiprintf_r>
 8019a52:	1c43      	adds	r3, r0, #1
 8019a54:	bfbc      	itt	lt
 8019a56:	238b      	movlt	r3, #139	@ 0x8b
 8019a58:	602b      	strlt	r3, [r5, #0]
 8019a5a:	2c00      	cmp	r4, #0
 8019a5c:	d0e0      	beq.n	8019a20 <_vsniprintf_r+0x16>
 8019a5e:	9b00      	ldr	r3, [sp, #0]
 8019a60:	2200      	movs	r2, #0
 8019a62:	701a      	strb	r2, [r3, #0]
 8019a64:	e7dc      	b.n	8019a20 <_vsniprintf_r+0x16>
	...

08019a68 <vsniprintf>:
 8019a68:	b507      	push	{r0, r1, r2, lr}
 8019a6a:	9300      	str	r3, [sp, #0]
 8019a6c:	4613      	mov	r3, r2
 8019a6e:	460a      	mov	r2, r1
 8019a70:	4601      	mov	r1, r0
 8019a72:	4803      	ldr	r0, [pc, #12]	@ (8019a80 <vsniprintf+0x18>)
 8019a74:	6800      	ldr	r0, [r0, #0]
 8019a76:	f7ff ffc8 	bl	8019a0a <_vsniprintf_r>
 8019a7a:	b003      	add	sp, #12
 8019a7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019a80:	200002c4 	.word	0x200002c4

08019a84 <__swbuf_r>:
 8019a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a86:	460e      	mov	r6, r1
 8019a88:	4614      	mov	r4, r2
 8019a8a:	4605      	mov	r5, r0
 8019a8c:	b118      	cbz	r0, 8019a96 <__swbuf_r+0x12>
 8019a8e:	6a03      	ldr	r3, [r0, #32]
 8019a90:	b90b      	cbnz	r3, 8019a96 <__swbuf_r+0x12>
 8019a92:	f7ff fe9f 	bl	80197d4 <__sinit>
 8019a96:	69a3      	ldr	r3, [r4, #24]
 8019a98:	60a3      	str	r3, [r4, #8]
 8019a9a:	89a3      	ldrh	r3, [r4, #12]
 8019a9c:	071a      	lsls	r2, r3, #28
 8019a9e:	d501      	bpl.n	8019aa4 <__swbuf_r+0x20>
 8019aa0:	6923      	ldr	r3, [r4, #16]
 8019aa2:	b943      	cbnz	r3, 8019ab6 <__swbuf_r+0x32>
 8019aa4:	4621      	mov	r1, r4
 8019aa6:	4628      	mov	r0, r5
 8019aa8:	f000 f82a 	bl	8019b00 <__swsetup_r>
 8019aac:	b118      	cbz	r0, 8019ab6 <__swbuf_r+0x32>
 8019aae:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019ab2:	4638      	mov	r0, r7
 8019ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ab6:	6823      	ldr	r3, [r4, #0]
 8019ab8:	6922      	ldr	r2, [r4, #16]
 8019aba:	1a98      	subs	r0, r3, r2
 8019abc:	6963      	ldr	r3, [r4, #20]
 8019abe:	b2f6      	uxtb	r6, r6
 8019ac0:	4283      	cmp	r3, r0
 8019ac2:	4637      	mov	r7, r6
 8019ac4:	dc05      	bgt.n	8019ad2 <__swbuf_r+0x4e>
 8019ac6:	4621      	mov	r1, r4
 8019ac8:	4628      	mov	r0, r5
 8019aca:	f000 fe97 	bl	801a7fc <_fflush_r>
 8019ace:	2800      	cmp	r0, #0
 8019ad0:	d1ed      	bne.n	8019aae <__swbuf_r+0x2a>
 8019ad2:	68a3      	ldr	r3, [r4, #8]
 8019ad4:	3b01      	subs	r3, #1
 8019ad6:	60a3      	str	r3, [r4, #8]
 8019ad8:	6823      	ldr	r3, [r4, #0]
 8019ada:	1c5a      	adds	r2, r3, #1
 8019adc:	6022      	str	r2, [r4, #0]
 8019ade:	701e      	strb	r6, [r3, #0]
 8019ae0:	6962      	ldr	r2, [r4, #20]
 8019ae2:	1c43      	adds	r3, r0, #1
 8019ae4:	429a      	cmp	r2, r3
 8019ae6:	d004      	beq.n	8019af2 <__swbuf_r+0x6e>
 8019ae8:	89a3      	ldrh	r3, [r4, #12]
 8019aea:	07db      	lsls	r3, r3, #31
 8019aec:	d5e1      	bpl.n	8019ab2 <__swbuf_r+0x2e>
 8019aee:	2e0a      	cmp	r6, #10
 8019af0:	d1df      	bne.n	8019ab2 <__swbuf_r+0x2e>
 8019af2:	4621      	mov	r1, r4
 8019af4:	4628      	mov	r0, r5
 8019af6:	f000 fe81 	bl	801a7fc <_fflush_r>
 8019afa:	2800      	cmp	r0, #0
 8019afc:	d0d9      	beq.n	8019ab2 <__swbuf_r+0x2e>
 8019afe:	e7d6      	b.n	8019aae <__swbuf_r+0x2a>

08019b00 <__swsetup_r>:
 8019b00:	b538      	push	{r3, r4, r5, lr}
 8019b02:	4b29      	ldr	r3, [pc, #164]	@ (8019ba8 <__swsetup_r+0xa8>)
 8019b04:	4605      	mov	r5, r0
 8019b06:	6818      	ldr	r0, [r3, #0]
 8019b08:	460c      	mov	r4, r1
 8019b0a:	b118      	cbz	r0, 8019b14 <__swsetup_r+0x14>
 8019b0c:	6a03      	ldr	r3, [r0, #32]
 8019b0e:	b90b      	cbnz	r3, 8019b14 <__swsetup_r+0x14>
 8019b10:	f7ff fe60 	bl	80197d4 <__sinit>
 8019b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b18:	0719      	lsls	r1, r3, #28
 8019b1a:	d422      	bmi.n	8019b62 <__swsetup_r+0x62>
 8019b1c:	06da      	lsls	r2, r3, #27
 8019b1e:	d407      	bmi.n	8019b30 <__swsetup_r+0x30>
 8019b20:	2209      	movs	r2, #9
 8019b22:	602a      	str	r2, [r5, #0]
 8019b24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019b28:	81a3      	strh	r3, [r4, #12]
 8019b2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b2e:	e033      	b.n	8019b98 <__swsetup_r+0x98>
 8019b30:	0758      	lsls	r0, r3, #29
 8019b32:	d512      	bpl.n	8019b5a <__swsetup_r+0x5a>
 8019b34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019b36:	b141      	cbz	r1, 8019b4a <__swsetup_r+0x4a>
 8019b38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019b3c:	4299      	cmp	r1, r3
 8019b3e:	d002      	beq.n	8019b46 <__swsetup_r+0x46>
 8019b40:	4628      	mov	r0, r5
 8019b42:	f000 f95f 	bl	8019e04 <_free_r>
 8019b46:	2300      	movs	r3, #0
 8019b48:	6363      	str	r3, [r4, #52]	@ 0x34
 8019b4a:	89a3      	ldrh	r3, [r4, #12]
 8019b4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019b50:	81a3      	strh	r3, [r4, #12]
 8019b52:	2300      	movs	r3, #0
 8019b54:	6063      	str	r3, [r4, #4]
 8019b56:	6923      	ldr	r3, [r4, #16]
 8019b58:	6023      	str	r3, [r4, #0]
 8019b5a:	89a3      	ldrh	r3, [r4, #12]
 8019b5c:	f043 0308 	orr.w	r3, r3, #8
 8019b60:	81a3      	strh	r3, [r4, #12]
 8019b62:	6923      	ldr	r3, [r4, #16]
 8019b64:	b94b      	cbnz	r3, 8019b7a <__swsetup_r+0x7a>
 8019b66:	89a3      	ldrh	r3, [r4, #12]
 8019b68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019b70:	d003      	beq.n	8019b7a <__swsetup_r+0x7a>
 8019b72:	4621      	mov	r1, r4
 8019b74:	4628      	mov	r0, r5
 8019b76:	f000 fea1 	bl	801a8bc <__smakebuf_r>
 8019b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b7e:	f013 0201 	ands.w	r2, r3, #1
 8019b82:	d00a      	beq.n	8019b9a <__swsetup_r+0x9a>
 8019b84:	2200      	movs	r2, #0
 8019b86:	60a2      	str	r2, [r4, #8]
 8019b88:	6962      	ldr	r2, [r4, #20]
 8019b8a:	4252      	negs	r2, r2
 8019b8c:	61a2      	str	r2, [r4, #24]
 8019b8e:	6922      	ldr	r2, [r4, #16]
 8019b90:	b942      	cbnz	r2, 8019ba4 <__swsetup_r+0xa4>
 8019b92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019b96:	d1c5      	bne.n	8019b24 <__swsetup_r+0x24>
 8019b98:	bd38      	pop	{r3, r4, r5, pc}
 8019b9a:	0799      	lsls	r1, r3, #30
 8019b9c:	bf58      	it	pl
 8019b9e:	6962      	ldrpl	r2, [r4, #20]
 8019ba0:	60a2      	str	r2, [r4, #8]
 8019ba2:	e7f4      	b.n	8019b8e <__swsetup_r+0x8e>
 8019ba4:	2000      	movs	r0, #0
 8019ba6:	e7f7      	b.n	8019b98 <__swsetup_r+0x98>
 8019ba8:	200002c4 	.word	0x200002c4

08019bac <memcmp>:
 8019bac:	b510      	push	{r4, lr}
 8019bae:	3901      	subs	r1, #1
 8019bb0:	4402      	add	r2, r0
 8019bb2:	4290      	cmp	r0, r2
 8019bb4:	d101      	bne.n	8019bba <memcmp+0xe>
 8019bb6:	2000      	movs	r0, #0
 8019bb8:	e005      	b.n	8019bc6 <memcmp+0x1a>
 8019bba:	7803      	ldrb	r3, [r0, #0]
 8019bbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019bc0:	42a3      	cmp	r3, r4
 8019bc2:	d001      	beq.n	8019bc8 <memcmp+0x1c>
 8019bc4:	1b18      	subs	r0, r3, r4
 8019bc6:	bd10      	pop	{r4, pc}
 8019bc8:	3001      	adds	r0, #1
 8019bca:	e7f2      	b.n	8019bb2 <memcmp+0x6>

08019bcc <memmove>:
 8019bcc:	4288      	cmp	r0, r1
 8019bce:	b510      	push	{r4, lr}
 8019bd0:	eb01 0402 	add.w	r4, r1, r2
 8019bd4:	d902      	bls.n	8019bdc <memmove+0x10>
 8019bd6:	4284      	cmp	r4, r0
 8019bd8:	4623      	mov	r3, r4
 8019bda:	d807      	bhi.n	8019bec <memmove+0x20>
 8019bdc:	1e43      	subs	r3, r0, #1
 8019bde:	42a1      	cmp	r1, r4
 8019be0:	d008      	beq.n	8019bf4 <memmove+0x28>
 8019be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019bea:	e7f8      	b.n	8019bde <memmove+0x12>
 8019bec:	4402      	add	r2, r0
 8019bee:	4601      	mov	r1, r0
 8019bf0:	428a      	cmp	r2, r1
 8019bf2:	d100      	bne.n	8019bf6 <memmove+0x2a>
 8019bf4:	bd10      	pop	{r4, pc}
 8019bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019bfe:	e7f7      	b.n	8019bf0 <memmove+0x24>

08019c00 <memset>:
 8019c00:	4402      	add	r2, r0
 8019c02:	4603      	mov	r3, r0
 8019c04:	4293      	cmp	r3, r2
 8019c06:	d100      	bne.n	8019c0a <memset+0xa>
 8019c08:	4770      	bx	lr
 8019c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8019c0e:	e7f9      	b.n	8019c04 <memset+0x4>

08019c10 <strchr>:
 8019c10:	b2c9      	uxtb	r1, r1
 8019c12:	4603      	mov	r3, r0
 8019c14:	4618      	mov	r0, r3
 8019c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c1a:	b112      	cbz	r2, 8019c22 <strchr+0x12>
 8019c1c:	428a      	cmp	r2, r1
 8019c1e:	d1f9      	bne.n	8019c14 <strchr+0x4>
 8019c20:	4770      	bx	lr
 8019c22:	2900      	cmp	r1, #0
 8019c24:	bf18      	it	ne
 8019c26:	2000      	movne	r0, #0
 8019c28:	4770      	bx	lr

08019c2a <strncmp>:
 8019c2a:	b510      	push	{r4, lr}
 8019c2c:	b16a      	cbz	r2, 8019c4a <strncmp+0x20>
 8019c2e:	3901      	subs	r1, #1
 8019c30:	1884      	adds	r4, r0, r2
 8019c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c36:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019c3a:	429a      	cmp	r2, r3
 8019c3c:	d103      	bne.n	8019c46 <strncmp+0x1c>
 8019c3e:	42a0      	cmp	r0, r4
 8019c40:	d001      	beq.n	8019c46 <strncmp+0x1c>
 8019c42:	2a00      	cmp	r2, #0
 8019c44:	d1f5      	bne.n	8019c32 <strncmp+0x8>
 8019c46:	1ad0      	subs	r0, r2, r3
 8019c48:	bd10      	pop	{r4, pc}
 8019c4a:	4610      	mov	r0, r2
 8019c4c:	e7fc      	b.n	8019c48 <strncmp+0x1e>

08019c4e <strstr>:
 8019c4e:	780a      	ldrb	r2, [r1, #0]
 8019c50:	b570      	push	{r4, r5, r6, lr}
 8019c52:	b96a      	cbnz	r2, 8019c70 <strstr+0x22>
 8019c54:	bd70      	pop	{r4, r5, r6, pc}
 8019c56:	429a      	cmp	r2, r3
 8019c58:	d109      	bne.n	8019c6e <strstr+0x20>
 8019c5a:	460c      	mov	r4, r1
 8019c5c:	4605      	mov	r5, r0
 8019c5e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d0f6      	beq.n	8019c54 <strstr+0x6>
 8019c66:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019c6a:	429e      	cmp	r6, r3
 8019c6c:	d0f7      	beq.n	8019c5e <strstr+0x10>
 8019c6e:	3001      	adds	r0, #1
 8019c70:	7803      	ldrb	r3, [r0, #0]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d1ef      	bne.n	8019c56 <strstr+0x8>
 8019c76:	4618      	mov	r0, r3
 8019c78:	e7ec      	b.n	8019c54 <strstr+0x6>
	...

08019c7c <_close_r>:
 8019c7c:	b538      	push	{r3, r4, r5, lr}
 8019c7e:	4d06      	ldr	r5, [pc, #24]	@ (8019c98 <_close_r+0x1c>)
 8019c80:	2300      	movs	r3, #0
 8019c82:	4604      	mov	r4, r0
 8019c84:	4608      	mov	r0, r1
 8019c86:	602b      	str	r3, [r5, #0]
 8019c88:	f7e8 fe82 	bl	8002990 <_close>
 8019c8c:	1c43      	adds	r3, r0, #1
 8019c8e:	d102      	bne.n	8019c96 <_close_r+0x1a>
 8019c90:	682b      	ldr	r3, [r5, #0]
 8019c92:	b103      	cbz	r3, 8019c96 <_close_r+0x1a>
 8019c94:	6023      	str	r3, [r4, #0]
 8019c96:	bd38      	pop	{r3, r4, r5, pc}
 8019c98:	2000b1c8 	.word	0x2000b1c8

08019c9c <_lseek_r>:
 8019c9c:	b538      	push	{r3, r4, r5, lr}
 8019c9e:	4d07      	ldr	r5, [pc, #28]	@ (8019cbc <_lseek_r+0x20>)
 8019ca0:	4604      	mov	r4, r0
 8019ca2:	4608      	mov	r0, r1
 8019ca4:	4611      	mov	r1, r2
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	602a      	str	r2, [r5, #0]
 8019caa:	461a      	mov	r2, r3
 8019cac:	f7e8 fe97 	bl	80029de <_lseek>
 8019cb0:	1c43      	adds	r3, r0, #1
 8019cb2:	d102      	bne.n	8019cba <_lseek_r+0x1e>
 8019cb4:	682b      	ldr	r3, [r5, #0]
 8019cb6:	b103      	cbz	r3, 8019cba <_lseek_r+0x1e>
 8019cb8:	6023      	str	r3, [r4, #0]
 8019cba:	bd38      	pop	{r3, r4, r5, pc}
 8019cbc:	2000b1c8 	.word	0x2000b1c8

08019cc0 <_read_r>:
 8019cc0:	b538      	push	{r3, r4, r5, lr}
 8019cc2:	4d07      	ldr	r5, [pc, #28]	@ (8019ce0 <_read_r+0x20>)
 8019cc4:	4604      	mov	r4, r0
 8019cc6:	4608      	mov	r0, r1
 8019cc8:	4611      	mov	r1, r2
 8019cca:	2200      	movs	r2, #0
 8019ccc:	602a      	str	r2, [r5, #0]
 8019cce:	461a      	mov	r2, r3
 8019cd0:	f7e8 fe25 	bl	800291e <_read>
 8019cd4:	1c43      	adds	r3, r0, #1
 8019cd6:	d102      	bne.n	8019cde <_read_r+0x1e>
 8019cd8:	682b      	ldr	r3, [r5, #0]
 8019cda:	b103      	cbz	r3, 8019cde <_read_r+0x1e>
 8019cdc:	6023      	str	r3, [r4, #0]
 8019cde:	bd38      	pop	{r3, r4, r5, pc}
 8019ce0:	2000b1c8 	.word	0x2000b1c8

08019ce4 <_sbrk_r>:
 8019ce4:	b538      	push	{r3, r4, r5, lr}
 8019ce6:	4d06      	ldr	r5, [pc, #24]	@ (8019d00 <_sbrk_r+0x1c>)
 8019ce8:	2300      	movs	r3, #0
 8019cea:	4604      	mov	r4, r0
 8019cec:	4608      	mov	r0, r1
 8019cee:	602b      	str	r3, [r5, #0]
 8019cf0:	f7e8 fe82 	bl	80029f8 <_sbrk>
 8019cf4:	1c43      	adds	r3, r0, #1
 8019cf6:	d102      	bne.n	8019cfe <_sbrk_r+0x1a>
 8019cf8:	682b      	ldr	r3, [r5, #0]
 8019cfa:	b103      	cbz	r3, 8019cfe <_sbrk_r+0x1a>
 8019cfc:	6023      	str	r3, [r4, #0]
 8019cfe:	bd38      	pop	{r3, r4, r5, pc}
 8019d00:	2000b1c8 	.word	0x2000b1c8

08019d04 <_write_r>:
 8019d04:	b538      	push	{r3, r4, r5, lr}
 8019d06:	4d07      	ldr	r5, [pc, #28]	@ (8019d24 <_write_r+0x20>)
 8019d08:	4604      	mov	r4, r0
 8019d0a:	4608      	mov	r0, r1
 8019d0c:	4611      	mov	r1, r2
 8019d0e:	2200      	movs	r2, #0
 8019d10:	602a      	str	r2, [r5, #0]
 8019d12:	461a      	mov	r2, r3
 8019d14:	f7e8 fe20 	bl	8002958 <_write>
 8019d18:	1c43      	adds	r3, r0, #1
 8019d1a:	d102      	bne.n	8019d22 <_write_r+0x1e>
 8019d1c:	682b      	ldr	r3, [r5, #0]
 8019d1e:	b103      	cbz	r3, 8019d22 <_write_r+0x1e>
 8019d20:	6023      	str	r3, [r4, #0]
 8019d22:	bd38      	pop	{r3, r4, r5, pc}
 8019d24:	2000b1c8 	.word	0x2000b1c8

08019d28 <__errno>:
 8019d28:	4b01      	ldr	r3, [pc, #4]	@ (8019d30 <__errno+0x8>)
 8019d2a:	6818      	ldr	r0, [r3, #0]
 8019d2c:	4770      	bx	lr
 8019d2e:	bf00      	nop
 8019d30:	200002c4 	.word	0x200002c4

08019d34 <__libc_init_array>:
 8019d34:	b570      	push	{r4, r5, r6, lr}
 8019d36:	4d0d      	ldr	r5, [pc, #52]	@ (8019d6c <__libc_init_array+0x38>)
 8019d38:	4c0d      	ldr	r4, [pc, #52]	@ (8019d70 <__libc_init_array+0x3c>)
 8019d3a:	1b64      	subs	r4, r4, r5
 8019d3c:	10a4      	asrs	r4, r4, #2
 8019d3e:	2600      	movs	r6, #0
 8019d40:	42a6      	cmp	r6, r4
 8019d42:	d109      	bne.n	8019d58 <__libc_init_array+0x24>
 8019d44:	4d0b      	ldr	r5, [pc, #44]	@ (8019d74 <__libc_init_array+0x40>)
 8019d46:	4c0c      	ldr	r4, [pc, #48]	@ (8019d78 <__libc_init_array+0x44>)
 8019d48:	f000 fe62 	bl	801aa10 <_init>
 8019d4c:	1b64      	subs	r4, r4, r5
 8019d4e:	10a4      	asrs	r4, r4, #2
 8019d50:	2600      	movs	r6, #0
 8019d52:	42a6      	cmp	r6, r4
 8019d54:	d105      	bne.n	8019d62 <__libc_init_array+0x2e>
 8019d56:	bd70      	pop	{r4, r5, r6, pc}
 8019d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d5c:	4798      	blx	r3
 8019d5e:	3601      	adds	r6, #1
 8019d60:	e7ee      	b.n	8019d40 <__libc_init_array+0xc>
 8019d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d66:	4798      	blx	r3
 8019d68:	3601      	adds	r6, #1
 8019d6a:	e7f2      	b.n	8019d52 <__libc_init_array+0x1e>
 8019d6c:	0801b860 	.word	0x0801b860
 8019d70:	0801b860 	.word	0x0801b860
 8019d74:	0801b860 	.word	0x0801b860
 8019d78:	0801b868 	.word	0x0801b868

08019d7c <__retarget_lock_init_recursive>:
 8019d7c:	4770      	bx	lr

08019d7e <__retarget_lock_acquire_recursive>:
 8019d7e:	4770      	bx	lr

08019d80 <__retarget_lock_release_recursive>:
 8019d80:	4770      	bx	lr

08019d82 <strcpy>:
 8019d82:	4603      	mov	r3, r0
 8019d84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019d88:	f803 2b01 	strb.w	r2, [r3], #1
 8019d8c:	2a00      	cmp	r2, #0
 8019d8e:	d1f9      	bne.n	8019d84 <strcpy+0x2>
 8019d90:	4770      	bx	lr

08019d92 <memcpy>:
 8019d92:	440a      	add	r2, r1
 8019d94:	4291      	cmp	r1, r2
 8019d96:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8019d9a:	d100      	bne.n	8019d9e <memcpy+0xc>
 8019d9c:	4770      	bx	lr
 8019d9e:	b510      	push	{r4, lr}
 8019da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019da8:	4291      	cmp	r1, r2
 8019daa:	d1f9      	bne.n	8019da0 <memcpy+0xe>
 8019dac:	bd10      	pop	{r4, pc}
	...

08019db0 <__assert_func>:
 8019db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019db2:	4614      	mov	r4, r2
 8019db4:	461a      	mov	r2, r3
 8019db6:	4b09      	ldr	r3, [pc, #36]	@ (8019ddc <__assert_func+0x2c>)
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	4605      	mov	r5, r0
 8019dbc:	68d8      	ldr	r0, [r3, #12]
 8019dbe:	b14c      	cbz	r4, 8019dd4 <__assert_func+0x24>
 8019dc0:	4b07      	ldr	r3, [pc, #28]	@ (8019de0 <__assert_func+0x30>)
 8019dc2:	9100      	str	r1, [sp, #0]
 8019dc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019dc8:	4906      	ldr	r1, [pc, #24]	@ (8019de4 <__assert_func+0x34>)
 8019dca:	462b      	mov	r3, r5
 8019dcc:	f000 fd3e 	bl	801a84c <fiprintf>
 8019dd0:	f000 fdd2 	bl	801a978 <abort>
 8019dd4:	4b04      	ldr	r3, [pc, #16]	@ (8019de8 <__assert_func+0x38>)
 8019dd6:	461c      	mov	r4, r3
 8019dd8:	e7f3      	b.n	8019dc2 <__assert_func+0x12>
 8019dda:	bf00      	nop
 8019ddc:	200002c4 	.word	0x200002c4
 8019de0:	0801b6e7 	.word	0x0801b6e7
 8019de4:	0801b6f4 	.word	0x0801b6f4
 8019de8:	0801b722 	.word	0x0801b722

08019dec <__env_lock>:
 8019dec:	4801      	ldr	r0, [pc, #4]	@ (8019df4 <__env_lock+0x8>)
 8019dee:	f7ff bfc6 	b.w	8019d7e <__retarget_lock_acquire_recursive>
 8019df2:	bf00      	nop
 8019df4:	2000b1cc 	.word	0x2000b1cc

08019df8 <__env_unlock>:
 8019df8:	4801      	ldr	r0, [pc, #4]	@ (8019e00 <__env_unlock+0x8>)
 8019dfa:	f7ff bfc1 	b.w	8019d80 <__retarget_lock_release_recursive>
 8019dfe:	bf00      	nop
 8019e00:	2000b1cc 	.word	0x2000b1cc

08019e04 <_free_r>:
 8019e04:	b538      	push	{r3, r4, r5, lr}
 8019e06:	4605      	mov	r5, r0
 8019e08:	2900      	cmp	r1, #0
 8019e0a:	d041      	beq.n	8019e90 <_free_r+0x8c>
 8019e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e10:	1f0c      	subs	r4, r1, #4
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	bfb8      	it	lt
 8019e16:	18e4      	addlt	r4, r4, r3
 8019e18:	f7ff fb2a 	bl	8019470 <__malloc_lock>
 8019e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8019e94 <_free_r+0x90>)
 8019e1e:	6813      	ldr	r3, [r2, #0]
 8019e20:	b933      	cbnz	r3, 8019e30 <_free_r+0x2c>
 8019e22:	6063      	str	r3, [r4, #4]
 8019e24:	6014      	str	r4, [r2, #0]
 8019e26:	4628      	mov	r0, r5
 8019e28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e2c:	f7ff bb26 	b.w	801947c <__malloc_unlock>
 8019e30:	42a3      	cmp	r3, r4
 8019e32:	d908      	bls.n	8019e46 <_free_r+0x42>
 8019e34:	6820      	ldr	r0, [r4, #0]
 8019e36:	1821      	adds	r1, r4, r0
 8019e38:	428b      	cmp	r3, r1
 8019e3a:	bf01      	itttt	eq
 8019e3c:	6819      	ldreq	r1, [r3, #0]
 8019e3e:	685b      	ldreq	r3, [r3, #4]
 8019e40:	1809      	addeq	r1, r1, r0
 8019e42:	6021      	streq	r1, [r4, #0]
 8019e44:	e7ed      	b.n	8019e22 <_free_r+0x1e>
 8019e46:	461a      	mov	r2, r3
 8019e48:	685b      	ldr	r3, [r3, #4]
 8019e4a:	b10b      	cbz	r3, 8019e50 <_free_r+0x4c>
 8019e4c:	42a3      	cmp	r3, r4
 8019e4e:	d9fa      	bls.n	8019e46 <_free_r+0x42>
 8019e50:	6811      	ldr	r1, [r2, #0]
 8019e52:	1850      	adds	r0, r2, r1
 8019e54:	42a0      	cmp	r0, r4
 8019e56:	d10b      	bne.n	8019e70 <_free_r+0x6c>
 8019e58:	6820      	ldr	r0, [r4, #0]
 8019e5a:	4401      	add	r1, r0
 8019e5c:	1850      	adds	r0, r2, r1
 8019e5e:	4283      	cmp	r3, r0
 8019e60:	6011      	str	r1, [r2, #0]
 8019e62:	d1e0      	bne.n	8019e26 <_free_r+0x22>
 8019e64:	6818      	ldr	r0, [r3, #0]
 8019e66:	685b      	ldr	r3, [r3, #4]
 8019e68:	6053      	str	r3, [r2, #4]
 8019e6a:	4408      	add	r0, r1
 8019e6c:	6010      	str	r0, [r2, #0]
 8019e6e:	e7da      	b.n	8019e26 <_free_r+0x22>
 8019e70:	d902      	bls.n	8019e78 <_free_r+0x74>
 8019e72:	230c      	movs	r3, #12
 8019e74:	602b      	str	r3, [r5, #0]
 8019e76:	e7d6      	b.n	8019e26 <_free_r+0x22>
 8019e78:	6820      	ldr	r0, [r4, #0]
 8019e7a:	1821      	adds	r1, r4, r0
 8019e7c:	428b      	cmp	r3, r1
 8019e7e:	bf04      	itt	eq
 8019e80:	6819      	ldreq	r1, [r3, #0]
 8019e82:	685b      	ldreq	r3, [r3, #4]
 8019e84:	6063      	str	r3, [r4, #4]
 8019e86:	bf04      	itt	eq
 8019e88:	1809      	addeq	r1, r1, r0
 8019e8a:	6021      	streq	r1, [r4, #0]
 8019e8c:	6054      	str	r4, [r2, #4]
 8019e8e:	e7ca      	b.n	8019e26 <_free_r+0x22>
 8019e90:	bd38      	pop	{r3, r4, r5, pc}
 8019e92:	bf00      	nop
 8019e94:	2000b088 	.word	0x2000b088

08019e98 <_malloc_usable_size_r>:
 8019e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e9c:	1f18      	subs	r0, r3, #4
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	bfbc      	itt	lt
 8019ea2:	580b      	ldrlt	r3, [r1, r0]
 8019ea4:	18c0      	addlt	r0, r0, r3
 8019ea6:	4770      	bx	lr

08019ea8 <__ssputs_r>:
 8019ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019eac:	688e      	ldr	r6, [r1, #8]
 8019eae:	461f      	mov	r7, r3
 8019eb0:	42be      	cmp	r6, r7
 8019eb2:	680b      	ldr	r3, [r1, #0]
 8019eb4:	4682      	mov	sl, r0
 8019eb6:	460c      	mov	r4, r1
 8019eb8:	4690      	mov	r8, r2
 8019eba:	d82d      	bhi.n	8019f18 <__ssputs_r+0x70>
 8019ebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019ec0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019ec4:	d026      	beq.n	8019f14 <__ssputs_r+0x6c>
 8019ec6:	6965      	ldr	r5, [r4, #20]
 8019ec8:	6909      	ldr	r1, [r1, #16]
 8019eca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019ece:	eba3 0901 	sub.w	r9, r3, r1
 8019ed2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019ed6:	1c7b      	adds	r3, r7, #1
 8019ed8:	444b      	add	r3, r9
 8019eda:	106d      	asrs	r5, r5, #1
 8019edc:	429d      	cmp	r5, r3
 8019ede:	bf38      	it	cc
 8019ee0:	461d      	movcc	r5, r3
 8019ee2:	0553      	lsls	r3, r2, #21
 8019ee4:	d527      	bpl.n	8019f36 <__ssputs_r+0x8e>
 8019ee6:	4629      	mov	r1, r5
 8019ee8:	f7ff fa42 	bl	8019370 <_malloc_r>
 8019eec:	4606      	mov	r6, r0
 8019eee:	b360      	cbz	r0, 8019f4a <__ssputs_r+0xa2>
 8019ef0:	6921      	ldr	r1, [r4, #16]
 8019ef2:	464a      	mov	r2, r9
 8019ef4:	f7ff ff4d 	bl	8019d92 <memcpy>
 8019ef8:	89a3      	ldrh	r3, [r4, #12]
 8019efa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019f02:	81a3      	strh	r3, [r4, #12]
 8019f04:	6126      	str	r6, [r4, #16]
 8019f06:	6165      	str	r5, [r4, #20]
 8019f08:	444e      	add	r6, r9
 8019f0a:	eba5 0509 	sub.w	r5, r5, r9
 8019f0e:	6026      	str	r6, [r4, #0]
 8019f10:	60a5      	str	r5, [r4, #8]
 8019f12:	463e      	mov	r6, r7
 8019f14:	42be      	cmp	r6, r7
 8019f16:	d900      	bls.n	8019f1a <__ssputs_r+0x72>
 8019f18:	463e      	mov	r6, r7
 8019f1a:	6820      	ldr	r0, [r4, #0]
 8019f1c:	4632      	mov	r2, r6
 8019f1e:	4641      	mov	r1, r8
 8019f20:	f7ff fe54 	bl	8019bcc <memmove>
 8019f24:	68a3      	ldr	r3, [r4, #8]
 8019f26:	1b9b      	subs	r3, r3, r6
 8019f28:	60a3      	str	r3, [r4, #8]
 8019f2a:	6823      	ldr	r3, [r4, #0]
 8019f2c:	4433      	add	r3, r6
 8019f2e:	6023      	str	r3, [r4, #0]
 8019f30:	2000      	movs	r0, #0
 8019f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f36:	462a      	mov	r2, r5
 8019f38:	f7ff fb1a 	bl	8019570 <_realloc_r>
 8019f3c:	4606      	mov	r6, r0
 8019f3e:	2800      	cmp	r0, #0
 8019f40:	d1e0      	bne.n	8019f04 <__ssputs_r+0x5c>
 8019f42:	6921      	ldr	r1, [r4, #16]
 8019f44:	4650      	mov	r0, sl
 8019f46:	f7ff ff5d 	bl	8019e04 <_free_r>
 8019f4a:	230c      	movs	r3, #12
 8019f4c:	f8ca 3000 	str.w	r3, [sl]
 8019f50:	89a3      	ldrh	r3, [r4, #12]
 8019f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019f56:	81a3      	strh	r3, [r4, #12]
 8019f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019f5c:	e7e9      	b.n	8019f32 <__ssputs_r+0x8a>
	...

08019f60 <_svfiprintf_r>:
 8019f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f64:	4698      	mov	r8, r3
 8019f66:	898b      	ldrh	r3, [r1, #12]
 8019f68:	061b      	lsls	r3, r3, #24
 8019f6a:	b09d      	sub	sp, #116	@ 0x74
 8019f6c:	4607      	mov	r7, r0
 8019f6e:	460d      	mov	r5, r1
 8019f70:	4614      	mov	r4, r2
 8019f72:	d510      	bpl.n	8019f96 <_svfiprintf_r+0x36>
 8019f74:	690b      	ldr	r3, [r1, #16]
 8019f76:	b973      	cbnz	r3, 8019f96 <_svfiprintf_r+0x36>
 8019f78:	2140      	movs	r1, #64	@ 0x40
 8019f7a:	f7ff f9f9 	bl	8019370 <_malloc_r>
 8019f7e:	6028      	str	r0, [r5, #0]
 8019f80:	6128      	str	r0, [r5, #16]
 8019f82:	b930      	cbnz	r0, 8019f92 <_svfiprintf_r+0x32>
 8019f84:	230c      	movs	r3, #12
 8019f86:	603b      	str	r3, [r7, #0]
 8019f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019f8c:	b01d      	add	sp, #116	@ 0x74
 8019f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f92:	2340      	movs	r3, #64	@ 0x40
 8019f94:	616b      	str	r3, [r5, #20]
 8019f96:	2300      	movs	r3, #0
 8019f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f9a:	2320      	movs	r3, #32
 8019f9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019fa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8019fa4:	2330      	movs	r3, #48	@ 0x30
 8019fa6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a144 <_svfiprintf_r+0x1e4>
 8019faa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019fae:	f04f 0901 	mov.w	r9, #1
 8019fb2:	4623      	mov	r3, r4
 8019fb4:	469a      	mov	sl, r3
 8019fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019fba:	b10a      	cbz	r2, 8019fc0 <_svfiprintf_r+0x60>
 8019fbc:	2a25      	cmp	r2, #37	@ 0x25
 8019fbe:	d1f9      	bne.n	8019fb4 <_svfiprintf_r+0x54>
 8019fc0:	ebba 0b04 	subs.w	fp, sl, r4
 8019fc4:	d00b      	beq.n	8019fde <_svfiprintf_r+0x7e>
 8019fc6:	465b      	mov	r3, fp
 8019fc8:	4622      	mov	r2, r4
 8019fca:	4629      	mov	r1, r5
 8019fcc:	4638      	mov	r0, r7
 8019fce:	f7ff ff6b 	bl	8019ea8 <__ssputs_r>
 8019fd2:	3001      	adds	r0, #1
 8019fd4:	f000 80a7 	beq.w	801a126 <_svfiprintf_r+0x1c6>
 8019fd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019fda:	445a      	add	r2, fp
 8019fdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8019fde:	f89a 3000 	ldrb.w	r3, [sl]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	f000 809f 	beq.w	801a126 <_svfiprintf_r+0x1c6>
 8019fe8:	2300      	movs	r3, #0
 8019fea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019ff2:	f10a 0a01 	add.w	sl, sl, #1
 8019ff6:	9304      	str	r3, [sp, #16]
 8019ff8:	9307      	str	r3, [sp, #28]
 8019ffa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019ffe:	931a      	str	r3, [sp, #104]	@ 0x68
 801a000:	4654      	mov	r4, sl
 801a002:	2205      	movs	r2, #5
 801a004:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a008:	484e      	ldr	r0, [pc, #312]	@ (801a144 <_svfiprintf_r+0x1e4>)
 801a00a:	f7e6 f921 	bl	8000250 <memchr>
 801a00e:	9a04      	ldr	r2, [sp, #16]
 801a010:	b9d8      	cbnz	r0, 801a04a <_svfiprintf_r+0xea>
 801a012:	06d0      	lsls	r0, r2, #27
 801a014:	bf44      	itt	mi
 801a016:	2320      	movmi	r3, #32
 801a018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a01c:	0711      	lsls	r1, r2, #28
 801a01e:	bf44      	itt	mi
 801a020:	232b      	movmi	r3, #43	@ 0x2b
 801a022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a026:	f89a 3000 	ldrb.w	r3, [sl]
 801a02a:	2b2a      	cmp	r3, #42	@ 0x2a
 801a02c:	d015      	beq.n	801a05a <_svfiprintf_r+0xfa>
 801a02e:	9a07      	ldr	r2, [sp, #28]
 801a030:	4654      	mov	r4, sl
 801a032:	2000      	movs	r0, #0
 801a034:	f04f 0c0a 	mov.w	ip, #10
 801a038:	4621      	mov	r1, r4
 801a03a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a03e:	3b30      	subs	r3, #48	@ 0x30
 801a040:	2b09      	cmp	r3, #9
 801a042:	d94b      	bls.n	801a0dc <_svfiprintf_r+0x17c>
 801a044:	b1b0      	cbz	r0, 801a074 <_svfiprintf_r+0x114>
 801a046:	9207      	str	r2, [sp, #28]
 801a048:	e014      	b.n	801a074 <_svfiprintf_r+0x114>
 801a04a:	eba0 0308 	sub.w	r3, r0, r8
 801a04e:	fa09 f303 	lsl.w	r3, r9, r3
 801a052:	4313      	orrs	r3, r2
 801a054:	9304      	str	r3, [sp, #16]
 801a056:	46a2      	mov	sl, r4
 801a058:	e7d2      	b.n	801a000 <_svfiprintf_r+0xa0>
 801a05a:	9b03      	ldr	r3, [sp, #12]
 801a05c:	1d19      	adds	r1, r3, #4
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	9103      	str	r1, [sp, #12]
 801a062:	2b00      	cmp	r3, #0
 801a064:	bfbb      	ittet	lt
 801a066:	425b      	neglt	r3, r3
 801a068:	f042 0202 	orrlt.w	r2, r2, #2
 801a06c:	9307      	strge	r3, [sp, #28]
 801a06e:	9307      	strlt	r3, [sp, #28]
 801a070:	bfb8      	it	lt
 801a072:	9204      	strlt	r2, [sp, #16]
 801a074:	7823      	ldrb	r3, [r4, #0]
 801a076:	2b2e      	cmp	r3, #46	@ 0x2e
 801a078:	d10a      	bne.n	801a090 <_svfiprintf_r+0x130>
 801a07a:	7863      	ldrb	r3, [r4, #1]
 801a07c:	2b2a      	cmp	r3, #42	@ 0x2a
 801a07e:	d132      	bne.n	801a0e6 <_svfiprintf_r+0x186>
 801a080:	9b03      	ldr	r3, [sp, #12]
 801a082:	1d1a      	adds	r2, r3, #4
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	9203      	str	r2, [sp, #12]
 801a088:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a08c:	3402      	adds	r4, #2
 801a08e:	9305      	str	r3, [sp, #20]
 801a090:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a154 <_svfiprintf_r+0x1f4>
 801a094:	7821      	ldrb	r1, [r4, #0]
 801a096:	2203      	movs	r2, #3
 801a098:	4650      	mov	r0, sl
 801a09a:	f7e6 f8d9 	bl	8000250 <memchr>
 801a09e:	b138      	cbz	r0, 801a0b0 <_svfiprintf_r+0x150>
 801a0a0:	9b04      	ldr	r3, [sp, #16]
 801a0a2:	eba0 000a 	sub.w	r0, r0, sl
 801a0a6:	2240      	movs	r2, #64	@ 0x40
 801a0a8:	4082      	lsls	r2, r0
 801a0aa:	4313      	orrs	r3, r2
 801a0ac:	3401      	adds	r4, #1
 801a0ae:	9304      	str	r3, [sp, #16]
 801a0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0b4:	4824      	ldr	r0, [pc, #144]	@ (801a148 <_svfiprintf_r+0x1e8>)
 801a0b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a0ba:	2206      	movs	r2, #6
 801a0bc:	f7e6 f8c8 	bl	8000250 <memchr>
 801a0c0:	2800      	cmp	r0, #0
 801a0c2:	d036      	beq.n	801a132 <_svfiprintf_r+0x1d2>
 801a0c4:	4b21      	ldr	r3, [pc, #132]	@ (801a14c <_svfiprintf_r+0x1ec>)
 801a0c6:	bb1b      	cbnz	r3, 801a110 <_svfiprintf_r+0x1b0>
 801a0c8:	9b03      	ldr	r3, [sp, #12]
 801a0ca:	3307      	adds	r3, #7
 801a0cc:	f023 0307 	bic.w	r3, r3, #7
 801a0d0:	3308      	adds	r3, #8
 801a0d2:	9303      	str	r3, [sp, #12]
 801a0d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a0d6:	4433      	add	r3, r6
 801a0d8:	9309      	str	r3, [sp, #36]	@ 0x24
 801a0da:	e76a      	b.n	8019fb2 <_svfiprintf_r+0x52>
 801a0dc:	fb0c 3202 	mla	r2, ip, r2, r3
 801a0e0:	460c      	mov	r4, r1
 801a0e2:	2001      	movs	r0, #1
 801a0e4:	e7a8      	b.n	801a038 <_svfiprintf_r+0xd8>
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	3401      	adds	r4, #1
 801a0ea:	9305      	str	r3, [sp, #20]
 801a0ec:	4619      	mov	r1, r3
 801a0ee:	f04f 0c0a 	mov.w	ip, #10
 801a0f2:	4620      	mov	r0, r4
 801a0f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a0f8:	3a30      	subs	r2, #48	@ 0x30
 801a0fa:	2a09      	cmp	r2, #9
 801a0fc:	d903      	bls.n	801a106 <_svfiprintf_r+0x1a6>
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d0c6      	beq.n	801a090 <_svfiprintf_r+0x130>
 801a102:	9105      	str	r1, [sp, #20]
 801a104:	e7c4      	b.n	801a090 <_svfiprintf_r+0x130>
 801a106:	fb0c 2101 	mla	r1, ip, r1, r2
 801a10a:	4604      	mov	r4, r0
 801a10c:	2301      	movs	r3, #1
 801a10e:	e7f0      	b.n	801a0f2 <_svfiprintf_r+0x192>
 801a110:	ab03      	add	r3, sp, #12
 801a112:	9300      	str	r3, [sp, #0]
 801a114:	462a      	mov	r2, r5
 801a116:	4b0e      	ldr	r3, [pc, #56]	@ (801a150 <_svfiprintf_r+0x1f0>)
 801a118:	a904      	add	r1, sp, #16
 801a11a:	4638      	mov	r0, r7
 801a11c:	f3af 8000 	nop.w
 801a120:	1c42      	adds	r2, r0, #1
 801a122:	4606      	mov	r6, r0
 801a124:	d1d6      	bne.n	801a0d4 <_svfiprintf_r+0x174>
 801a126:	89ab      	ldrh	r3, [r5, #12]
 801a128:	065b      	lsls	r3, r3, #25
 801a12a:	f53f af2d 	bmi.w	8019f88 <_svfiprintf_r+0x28>
 801a12e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a130:	e72c      	b.n	8019f8c <_svfiprintf_r+0x2c>
 801a132:	ab03      	add	r3, sp, #12
 801a134:	9300      	str	r3, [sp, #0]
 801a136:	462a      	mov	r2, r5
 801a138:	4b05      	ldr	r3, [pc, #20]	@ (801a150 <_svfiprintf_r+0x1f0>)
 801a13a:	a904      	add	r1, sp, #16
 801a13c:	4638      	mov	r0, r7
 801a13e:	f000 f9bb 	bl	801a4b8 <_printf_i>
 801a142:	e7ed      	b.n	801a120 <_svfiprintf_r+0x1c0>
 801a144:	0801b723 	.word	0x0801b723
 801a148:	0801b72d 	.word	0x0801b72d
 801a14c:	00000000 	.word	0x00000000
 801a150:	08019ea9 	.word	0x08019ea9
 801a154:	0801b729 	.word	0x0801b729

0801a158 <__sfputc_r>:
 801a158:	6893      	ldr	r3, [r2, #8]
 801a15a:	3b01      	subs	r3, #1
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	b410      	push	{r4}
 801a160:	6093      	str	r3, [r2, #8]
 801a162:	da08      	bge.n	801a176 <__sfputc_r+0x1e>
 801a164:	6994      	ldr	r4, [r2, #24]
 801a166:	42a3      	cmp	r3, r4
 801a168:	db01      	blt.n	801a16e <__sfputc_r+0x16>
 801a16a:	290a      	cmp	r1, #10
 801a16c:	d103      	bne.n	801a176 <__sfputc_r+0x1e>
 801a16e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a172:	f7ff bc87 	b.w	8019a84 <__swbuf_r>
 801a176:	6813      	ldr	r3, [r2, #0]
 801a178:	1c58      	adds	r0, r3, #1
 801a17a:	6010      	str	r0, [r2, #0]
 801a17c:	7019      	strb	r1, [r3, #0]
 801a17e:	4608      	mov	r0, r1
 801a180:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a184:	4770      	bx	lr

0801a186 <__sfputs_r>:
 801a186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a188:	4606      	mov	r6, r0
 801a18a:	460f      	mov	r7, r1
 801a18c:	4614      	mov	r4, r2
 801a18e:	18d5      	adds	r5, r2, r3
 801a190:	42ac      	cmp	r4, r5
 801a192:	d101      	bne.n	801a198 <__sfputs_r+0x12>
 801a194:	2000      	movs	r0, #0
 801a196:	e007      	b.n	801a1a8 <__sfputs_r+0x22>
 801a198:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a19c:	463a      	mov	r2, r7
 801a19e:	4630      	mov	r0, r6
 801a1a0:	f7ff ffda 	bl	801a158 <__sfputc_r>
 801a1a4:	1c43      	adds	r3, r0, #1
 801a1a6:	d1f3      	bne.n	801a190 <__sfputs_r+0xa>
 801a1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a1ac <_vfiprintf_r>:
 801a1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1b0:	460d      	mov	r5, r1
 801a1b2:	b09d      	sub	sp, #116	@ 0x74
 801a1b4:	4614      	mov	r4, r2
 801a1b6:	4698      	mov	r8, r3
 801a1b8:	4606      	mov	r6, r0
 801a1ba:	b118      	cbz	r0, 801a1c4 <_vfiprintf_r+0x18>
 801a1bc:	6a03      	ldr	r3, [r0, #32]
 801a1be:	b90b      	cbnz	r3, 801a1c4 <_vfiprintf_r+0x18>
 801a1c0:	f7ff fb08 	bl	80197d4 <__sinit>
 801a1c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a1c6:	07d9      	lsls	r1, r3, #31
 801a1c8:	d405      	bmi.n	801a1d6 <_vfiprintf_r+0x2a>
 801a1ca:	89ab      	ldrh	r3, [r5, #12]
 801a1cc:	059a      	lsls	r2, r3, #22
 801a1ce:	d402      	bmi.n	801a1d6 <_vfiprintf_r+0x2a>
 801a1d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a1d2:	f7ff fdd4 	bl	8019d7e <__retarget_lock_acquire_recursive>
 801a1d6:	89ab      	ldrh	r3, [r5, #12]
 801a1d8:	071b      	lsls	r3, r3, #28
 801a1da:	d501      	bpl.n	801a1e0 <_vfiprintf_r+0x34>
 801a1dc:	692b      	ldr	r3, [r5, #16]
 801a1de:	b99b      	cbnz	r3, 801a208 <_vfiprintf_r+0x5c>
 801a1e0:	4629      	mov	r1, r5
 801a1e2:	4630      	mov	r0, r6
 801a1e4:	f7ff fc8c 	bl	8019b00 <__swsetup_r>
 801a1e8:	b170      	cbz	r0, 801a208 <_vfiprintf_r+0x5c>
 801a1ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a1ec:	07dc      	lsls	r4, r3, #31
 801a1ee:	d504      	bpl.n	801a1fa <_vfiprintf_r+0x4e>
 801a1f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a1f4:	b01d      	add	sp, #116	@ 0x74
 801a1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1fa:	89ab      	ldrh	r3, [r5, #12]
 801a1fc:	0598      	lsls	r0, r3, #22
 801a1fe:	d4f7      	bmi.n	801a1f0 <_vfiprintf_r+0x44>
 801a200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a202:	f7ff fdbd 	bl	8019d80 <__retarget_lock_release_recursive>
 801a206:	e7f3      	b.n	801a1f0 <_vfiprintf_r+0x44>
 801a208:	2300      	movs	r3, #0
 801a20a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a20c:	2320      	movs	r3, #32
 801a20e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a212:	f8cd 800c 	str.w	r8, [sp, #12]
 801a216:	2330      	movs	r3, #48	@ 0x30
 801a218:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a3c8 <_vfiprintf_r+0x21c>
 801a21c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a220:	f04f 0901 	mov.w	r9, #1
 801a224:	4623      	mov	r3, r4
 801a226:	469a      	mov	sl, r3
 801a228:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a22c:	b10a      	cbz	r2, 801a232 <_vfiprintf_r+0x86>
 801a22e:	2a25      	cmp	r2, #37	@ 0x25
 801a230:	d1f9      	bne.n	801a226 <_vfiprintf_r+0x7a>
 801a232:	ebba 0b04 	subs.w	fp, sl, r4
 801a236:	d00b      	beq.n	801a250 <_vfiprintf_r+0xa4>
 801a238:	465b      	mov	r3, fp
 801a23a:	4622      	mov	r2, r4
 801a23c:	4629      	mov	r1, r5
 801a23e:	4630      	mov	r0, r6
 801a240:	f7ff ffa1 	bl	801a186 <__sfputs_r>
 801a244:	3001      	adds	r0, #1
 801a246:	f000 80a7 	beq.w	801a398 <_vfiprintf_r+0x1ec>
 801a24a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a24c:	445a      	add	r2, fp
 801a24e:	9209      	str	r2, [sp, #36]	@ 0x24
 801a250:	f89a 3000 	ldrb.w	r3, [sl]
 801a254:	2b00      	cmp	r3, #0
 801a256:	f000 809f 	beq.w	801a398 <_vfiprintf_r+0x1ec>
 801a25a:	2300      	movs	r3, #0
 801a25c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a264:	f10a 0a01 	add.w	sl, sl, #1
 801a268:	9304      	str	r3, [sp, #16]
 801a26a:	9307      	str	r3, [sp, #28]
 801a26c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a270:	931a      	str	r3, [sp, #104]	@ 0x68
 801a272:	4654      	mov	r4, sl
 801a274:	2205      	movs	r2, #5
 801a276:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a27a:	4853      	ldr	r0, [pc, #332]	@ (801a3c8 <_vfiprintf_r+0x21c>)
 801a27c:	f7e5 ffe8 	bl	8000250 <memchr>
 801a280:	9a04      	ldr	r2, [sp, #16]
 801a282:	b9d8      	cbnz	r0, 801a2bc <_vfiprintf_r+0x110>
 801a284:	06d1      	lsls	r1, r2, #27
 801a286:	bf44      	itt	mi
 801a288:	2320      	movmi	r3, #32
 801a28a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a28e:	0713      	lsls	r3, r2, #28
 801a290:	bf44      	itt	mi
 801a292:	232b      	movmi	r3, #43	@ 0x2b
 801a294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a298:	f89a 3000 	ldrb.w	r3, [sl]
 801a29c:	2b2a      	cmp	r3, #42	@ 0x2a
 801a29e:	d015      	beq.n	801a2cc <_vfiprintf_r+0x120>
 801a2a0:	9a07      	ldr	r2, [sp, #28]
 801a2a2:	4654      	mov	r4, sl
 801a2a4:	2000      	movs	r0, #0
 801a2a6:	f04f 0c0a 	mov.w	ip, #10
 801a2aa:	4621      	mov	r1, r4
 801a2ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a2b0:	3b30      	subs	r3, #48	@ 0x30
 801a2b2:	2b09      	cmp	r3, #9
 801a2b4:	d94b      	bls.n	801a34e <_vfiprintf_r+0x1a2>
 801a2b6:	b1b0      	cbz	r0, 801a2e6 <_vfiprintf_r+0x13a>
 801a2b8:	9207      	str	r2, [sp, #28]
 801a2ba:	e014      	b.n	801a2e6 <_vfiprintf_r+0x13a>
 801a2bc:	eba0 0308 	sub.w	r3, r0, r8
 801a2c0:	fa09 f303 	lsl.w	r3, r9, r3
 801a2c4:	4313      	orrs	r3, r2
 801a2c6:	9304      	str	r3, [sp, #16]
 801a2c8:	46a2      	mov	sl, r4
 801a2ca:	e7d2      	b.n	801a272 <_vfiprintf_r+0xc6>
 801a2cc:	9b03      	ldr	r3, [sp, #12]
 801a2ce:	1d19      	adds	r1, r3, #4
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	9103      	str	r1, [sp, #12]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	bfbb      	ittet	lt
 801a2d8:	425b      	neglt	r3, r3
 801a2da:	f042 0202 	orrlt.w	r2, r2, #2
 801a2de:	9307      	strge	r3, [sp, #28]
 801a2e0:	9307      	strlt	r3, [sp, #28]
 801a2e2:	bfb8      	it	lt
 801a2e4:	9204      	strlt	r2, [sp, #16]
 801a2e6:	7823      	ldrb	r3, [r4, #0]
 801a2e8:	2b2e      	cmp	r3, #46	@ 0x2e
 801a2ea:	d10a      	bne.n	801a302 <_vfiprintf_r+0x156>
 801a2ec:	7863      	ldrb	r3, [r4, #1]
 801a2ee:	2b2a      	cmp	r3, #42	@ 0x2a
 801a2f0:	d132      	bne.n	801a358 <_vfiprintf_r+0x1ac>
 801a2f2:	9b03      	ldr	r3, [sp, #12]
 801a2f4:	1d1a      	adds	r2, r3, #4
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	9203      	str	r2, [sp, #12]
 801a2fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a2fe:	3402      	adds	r4, #2
 801a300:	9305      	str	r3, [sp, #20]
 801a302:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a3d8 <_vfiprintf_r+0x22c>
 801a306:	7821      	ldrb	r1, [r4, #0]
 801a308:	2203      	movs	r2, #3
 801a30a:	4650      	mov	r0, sl
 801a30c:	f7e5 ffa0 	bl	8000250 <memchr>
 801a310:	b138      	cbz	r0, 801a322 <_vfiprintf_r+0x176>
 801a312:	9b04      	ldr	r3, [sp, #16]
 801a314:	eba0 000a 	sub.w	r0, r0, sl
 801a318:	2240      	movs	r2, #64	@ 0x40
 801a31a:	4082      	lsls	r2, r0
 801a31c:	4313      	orrs	r3, r2
 801a31e:	3401      	adds	r4, #1
 801a320:	9304      	str	r3, [sp, #16]
 801a322:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a326:	4829      	ldr	r0, [pc, #164]	@ (801a3cc <_vfiprintf_r+0x220>)
 801a328:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a32c:	2206      	movs	r2, #6
 801a32e:	f7e5 ff8f 	bl	8000250 <memchr>
 801a332:	2800      	cmp	r0, #0
 801a334:	d03f      	beq.n	801a3b6 <_vfiprintf_r+0x20a>
 801a336:	4b26      	ldr	r3, [pc, #152]	@ (801a3d0 <_vfiprintf_r+0x224>)
 801a338:	bb1b      	cbnz	r3, 801a382 <_vfiprintf_r+0x1d6>
 801a33a:	9b03      	ldr	r3, [sp, #12]
 801a33c:	3307      	adds	r3, #7
 801a33e:	f023 0307 	bic.w	r3, r3, #7
 801a342:	3308      	adds	r3, #8
 801a344:	9303      	str	r3, [sp, #12]
 801a346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a348:	443b      	add	r3, r7
 801a34a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a34c:	e76a      	b.n	801a224 <_vfiprintf_r+0x78>
 801a34e:	fb0c 3202 	mla	r2, ip, r2, r3
 801a352:	460c      	mov	r4, r1
 801a354:	2001      	movs	r0, #1
 801a356:	e7a8      	b.n	801a2aa <_vfiprintf_r+0xfe>
 801a358:	2300      	movs	r3, #0
 801a35a:	3401      	adds	r4, #1
 801a35c:	9305      	str	r3, [sp, #20]
 801a35e:	4619      	mov	r1, r3
 801a360:	f04f 0c0a 	mov.w	ip, #10
 801a364:	4620      	mov	r0, r4
 801a366:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a36a:	3a30      	subs	r2, #48	@ 0x30
 801a36c:	2a09      	cmp	r2, #9
 801a36e:	d903      	bls.n	801a378 <_vfiprintf_r+0x1cc>
 801a370:	2b00      	cmp	r3, #0
 801a372:	d0c6      	beq.n	801a302 <_vfiprintf_r+0x156>
 801a374:	9105      	str	r1, [sp, #20]
 801a376:	e7c4      	b.n	801a302 <_vfiprintf_r+0x156>
 801a378:	fb0c 2101 	mla	r1, ip, r1, r2
 801a37c:	4604      	mov	r4, r0
 801a37e:	2301      	movs	r3, #1
 801a380:	e7f0      	b.n	801a364 <_vfiprintf_r+0x1b8>
 801a382:	ab03      	add	r3, sp, #12
 801a384:	9300      	str	r3, [sp, #0]
 801a386:	462a      	mov	r2, r5
 801a388:	4b12      	ldr	r3, [pc, #72]	@ (801a3d4 <_vfiprintf_r+0x228>)
 801a38a:	a904      	add	r1, sp, #16
 801a38c:	4630      	mov	r0, r6
 801a38e:	f3af 8000 	nop.w
 801a392:	4607      	mov	r7, r0
 801a394:	1c78      	adds	r0, r7, #1
 801a396:	d1d6      	bne.n	801a346 <_vfiprintf_r+0x19a>
 801a398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a39a:	07d9      	lsls	r1, r3, #31
 801a39c:	d405      	bmi.n	801a3aa <_vfiprintf_r+0x1fe>
 801a39e:	89ab      	ldrh	r3, [r5, #12]
 801a3a0:	059a      	lsls	r2, r3, #22
 801a3a2:	d402      	bmi.n	801a3aa <_vfiprintf_r+0x1fe>
 801a3a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a3a6:	f7ff fceb 	bl	8019d80 <__retarget_lock_release_recursive>
 801a3aa:	89ab      	ldrh	r3, [r5, #12]
 801a3ac:	065b      	lsls	r3, r3, #25
 801a3ae:	f53f af1f 	bmi.w	801a1f0 <_vfiprintf_r+0x44>
 801a3b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a3b4:	e71e      	b.n	801a1f4 <_vfiprintf_r+0x48>
 801a3b6:	ab03      	add	r3, sp, #12
 801a3b8:	9300      	str	r3, [sp, #0]
 801a3ba:	462a      	mov	r2, r5
 801a3bc:	4b05      	ldr	r3, [pc, #20]	@ (801a3d4 <_vfiprintf_r+0x228>)
 801a3be:	a904      	add	r1, sp, #16
 801a3c0:	4630      	mov	r0, r6
 801a3c2:	f000 f879 	bl	801a4b8 <_printf_i>
 801a3c6:	e7e4      	b.n	801a392 <_vfiprintf_r+0x1e6>
 801a3c8:	0801b723 	.word	0x0801b723
 801a3cc:	0801b72d 	.word	0x0801b72d
 801a3d0:	00000000 	.word	0x00000000
 801a3d4:	0801a187 	.word	0x0801a187
 801a3d8:	0801b729 	.word	0x0801b729

0801a3dc <_printf_common>:
 801a3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3e0:	4616      	mov	r6, r2
 801a3e2:	4698      	mov	r8, r3
 801a3e4:	688a      	ldr	r2, [r1, #8]
 801a3e6:	690b      	ldr	r3, [r1, #16]
 801a3e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a3ec:	4293      	cmp	r3, r2
 801a3ee:	bfb8      	it	lt
 801a3f0:	4613      	movlt	r3, r2
 801a3f2:	6033      	str	r3, [r6, #0]
 801a3f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a3f8:	4607      	mov	r7, r0
 801a3fa:	460c      	mov	r4, r1
 801a3fc:	b10a      	cbz	r2, 801a402 <_printf_common+0x26>
 801a3fe:	3301      	adds	r3, #1
 801a400:	6033      	str	r3, [r6, #0]
 801a402:	6823      	ldr	r3, [r4, #0]
 801a404:	0699      	lsls	r1, r3, #26
 801a406:	bf42      	ittt	mi
 801a408:	6833      	ldrmi	r3, [r6, #0]
 801a40a:	3302      	addmi	r3, #2
 801a40c:	6033      	strmi	r3, [r6, #0]
 801a40e:	6825      	ldr	r5, [r4, #0]
 801a410:	f015 0506 	ands.w	r5, r5, #6
 801a414:	d106      	bne.n	801a424 <_printf_common+0x48>
 801a416:	f104 0a19 	add.w	sl, r4, #25
 801a41a:	68e3      	ldr	r3, [r4, #12]
 801a41c:	6832      	ldr	r2, [r6, #0]
 801a41e:	1a9b      	subs	r3, r3, r2
 801a420:	42ab      	cmp	r3, r5
 801a422:	dc26      	bgt.n	801a472 <_printf_common+0x96>
 801a424:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a428:	6822      	ldr	r2, [r4, #0]
 801a42a:	3b00      	subs	r3, #0
 801a42c:	bf18      	it	ne
 801a42e:	2301      	movne	r3, #1
 801a430:	0692      	lsls	r2, r2, #26
 801a432:	d42b      	bmi.n	801a48c <_printf_common+0xb0>
 801a434:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a438:	4641      	mov	r1, r8
 801a43a:	4638      	mov	r0, r7
 801a43c:	47c8      	blx	r9
 801a43e:	3001      	adds	r0, #1
 801a440:	d01e      	beq.n	801a480 <_printf_common+0xa4>
 801a442:	6823      	ldr	r3, [r4, #0]
 801a444:	6922      	ldr	r2, [r4, #16]
 801a446:	f003 0306 	and.w	r3, r3, #6
 801a44a:	2b04      	cmp	r3, #4
 801a44c:	bf02      	ittt	eq
 801a44e:	68e5      	ldreq	r5, [r4, #12]
 801a450:	6833      	ldreq	r3, [r6, #0]
 801a452:	1aed      	subeq	r5, r5, r3
 801a454:	68a3      	ldr	r3, [r4, #8]
 801a456:	bf0c      	ite	eq
 801a458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a45c:	2500      	movne	r5, #0
 801a45e:	4293      	cmp	r3, r2
 801a460:	bfc4      	itt	gt
 801a462:	1a9b      	subgt	r3, r3, r2
 801a464:	18ed      	addgt	r5, r5, r3
 801a466:	2600      	movs	r6, #0
 801a468:	341a      	adds	r4, #26
 801a46a:	42b5      	cmp	r5, r6
 801a46c:	d11a      	bne.n	801a4a4 <_printf_common+0xc8>
 801a46e:	2000      	movs	r0, #0
 801a470:	e008      	b.n	801a484 <_printf_common+0xa8>
 801a472:	2301      	movs	r3, #1
 801a474:	4652      	mov	r2, sl
 801a476:	4641      	mov	r1, r8
 801a478:	4638      	mov	r0, r7
 801a47a:	47c8      	blx	r9
 801a47c:	3001      	adds	r0, #1
 801a47e:	d103      	bne.n	801a488 <_printf_common+0xac>
 801a480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a488:	3501      	adds	r5, #1
 801a48a:	e7c6      	b.n	801a41a <_printf_common+0x3e>
 801a48c:	18e1      	adds	r1, r4, r3
 801a48e:	1c5a      	adds	r2, r3, #1
 801a490:	2030      	movs	r0, #48	@ 0x30
 801a492:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a496:	4422      	add	r2, r4
 801a498:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a49c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a4a0:	3302      	adds	r3, #2
 801a4a2:	e7c7      	b.n	801a434 <_printf_common+0x58>
 801a4a4:	2301      	movs	r3, #1
 801a4a6:	4622      	mov	r2, r4
 801a4a8:	4641      	mov	r1, r8
 801a4aa:	4638      	mov	r0, r7
 801a4ac:	47c8      	blx	r9
 801a4ae:	3001      	adds	r0, #1
 801a4b0:	d0e6      	beq.n	801a480 <_printf_common+0xa4>
 801a4b2:	3601      	adds	r6, #1
 801a4b4:	e7d9      	b.n	801a46a <_printf_common+0x8e>
	...

0801a4b8 <_printf_i>:
 801a4b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a4bc:	7e0f      	ldrb	r7, [r1, #24]
 801a4be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a4c0:	2f78      	cmp	r7, #120	@ 0x78
 801a4c2:	4691      	mov	r9, r2
 801a4c4:	4680      	mov	r8, r0
 801a4c6:	460c      	mov	r4, r1
 801a4c8:	469a      	mov	sl, r3
 801a4ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a4ce:	d807      	bhi.n	801a4e0 <_printf_i+0x28>
 801a4d0:	2f62      	cmp	r7, #98	@ 0x62
 801a4d2:	d80a      	bhi.n	801a4ea <_printf_i+0x32>
 801a4d4:	2f00      	cmp	r7, #0
 801a4d6:	f000 80d1 	beq.w	801a67c <_printf_i+0x1c4>
 801a4da:	2f58      	cmp	r7, #88	@ 0x58
 801a4dc:	f000 80b8 	beq.w	801a650 <_printf_i+0x198>
 801a4e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a4e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a4e8:	e03a      	b.n	801a560 <_printf_i+0xa8>
 801a4ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a4ee:	2b15      	cmp	r3, #21
 801a4f0:	d8f6      	bhi.n	801a4e0 <_printf_i+0x28>
 801a4f2:	a101      	add	r1, pc, #4	@ (adr r1, 801a4f8 <_printf_i+0x40>)
 801a4f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a4f8:	0801a551 	.word	0x0801a551
 801a4fc:	0801a565 	.word	0x0801a565
 801a500:	0801a4e1 	.word	0x0801a4e1
 801a504:	0801a4e1 	.word	0x0801a4e1
 801a508:	0801a4e1 	.word	0x0801a4e1
 801a50c:	0801a4e1 	.word	0x0801a4e1
 801a510:	0801a565 	.word	0x0801a565
 801a514:	0801a4e1 	.word	0x0801a4e1
 801a518:	0801a4e1 	.word	0x0801a4e1
 801a51c:	0801a4e1 	.word	0x0801a4e1
 801a520:	0801a4e1 	.word	0x0801a4e1
 801a524:	0801a663 	.word	0x0801a663
 801a528:	0801a58f 	.word	0x0801a58f
 801a52c:	0801a61d 	.word	0x0801a61d
 801a530:	0801a4e1 	.word	0x0801a4e1
 801a534:	0801a4e1 	.word	0x0801a4e1
 801a538:	0801a685 	.word	0x0801a685
 801a53c:	0801a4e1 	.word	0x0801a4e1
 801a540:	0801a58f 	.word	0x0801a58f
 801a544:	0801a4e1 	.word	0x0801a4e1
 801a548:	0801a4e1 	.word	0x0801a4e1
 801a54c:	0801a625 	.word	0x0801a625
 801a550:	6833      	ldr	r3, [r6, #0]
 801a552:	1d1a      	adds	r2, r3, #4
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	6032      	str	r2, [r6, #0]
 801a558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a55c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a560:	2301      	movs	r3, #1
 801a562:	e09c      	b.n	801a69e <_printf_i+0x1e6>
 801a564:	6833      	ldr	r3, [r6, #0]
 801a566:	6820      	ldr	r0, [r4, #0]
 801a568:	1d19      	adds	r1, r3, #4
 801a56a:	6031      	str	r1, [r6, #0]
 801a56c:	0606      	lsls	r6, r0, #24
 801a56e:	d501      	bpl.n	801a574 <_printf_i+0xbc>
 801a570:	681d      	ldr	r5, [r3, #0]
 801a572:	e003      	b.n	801a57c <_printf_i+0xc4>
 801a574:	0645      	lsls	r5, r0, #25
 801a576:	d5fb      	bpl.n	801a570 <_printf_i+0xb8>
 801a578:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a57c:	2d00      	cmp	r5, #0
 801a57e:	da03      	bge.n	801a588 <_printf_i+0xd0>
 801a580:	232d      	movs	r3, #45	@ 0x2d
 801a582:	426d      	negs	r5, r5
 801a584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a588:	4858      	ldr	r0, [pc, #352]	@ (801a6ec <_printf_i+0x234>)
 801a58a:	230a      	movs	r3, #10
 801a58c:	e011      	b.n	801a5b2 <_printf_i+0xfa>
 801a58e:	6821      	ldr	r1, [r4, #0]
 801a590:	6833      	ldr	r3, [r6, #0]
 801a592:	0608      	lsls	r0, r1, #24
 801a594:	f853 5b04 	ldr.w	r5, [r3], #4
 801a598:	d402      	bmi.n	801a5a0 <_printf_i+0xe8>
 801a59a:	0649      	lsls	r1, r1, #25
 801a59c:	bf48      	it	mi
 801a59e:	b2ad      	uxthmi	r5, r5
 801a5a0:	2f6f      	cmp	r7, #111	@ 0x6f
 801a5a2:	4852      	ldr	r0, [pc, #328]	@ (801a6ec <_printf_i+0x234>)
 801a5a4:	6033      	str	r3, [r6, #0]
 801a5a6:	bf14      	ite	ne
 801a5a8:	230a      	movne	r3, #10
 801a5aa:	2308      	moveq	r3, #8
 801a5ac:	2100      	movs	r1, #0
 801a5ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a5b2:	6866      	ldr	r6, [r4, #4]
 801a5b4:	60a6      	str	r6, [r4, #8]
 801a5b6:	2e00      	cmp	r6, #0
 801a5b8:	db05      	blt.n	801a5c6 <_printf_i+0x10e>
 801a5ba:	6821      	ldr	r1, [r4, #0]
 801a5bc:	432e      	orrs	r6, r5
 801a5be:	f021 0104 	bic.w	r1, r1, #4
 801a5c2:	6021      	str	r1, [r4, #0]
 801a5c4:	d04b      	beq.n	801a65e <_printf_i+0x1a6>
 801a5c6:	4616      	mov	r6, r2
 801a5c8:	fbb5 f1f3 	udiv	r1, r5, r3
 801a5cc:	fb03 5711 	mls	r7, r3, r1, r5
 801a5d0:	5dc7      	ldrb	r7, [r0, r7]
 801a5d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a5d6:	462f      	mov	r7, r5
 801a5d8:	42bb      	cmp	r3, r7
 801a5da:	460d      	mov	r5, r1
 801a5dc:	d9f4      	bls.n	801a5c8 <_printf_i+0x110>
 801a5de:	2b08      	cmp	r3, #8
 801a5e0:	d10b      	bne.n	801a5fa <_printf_i+0x142>
 801a5e2:	6823      	ldr	r3, [r4, #0]
 801a5e4:	07df      	lsls	r7, r3, #31
 801a5e6:	d508      	bpl.n	801a5fa <_printf_i+0x142>
 801a5e8:	6923      	ldr	r3, [r4, #16]
 801a5ea:	6861      	ldr	r1, [r4, #4]
 801a5ec:	4299      	cmp	r1, r3
 801a5ee:	bfde      	ittt	le
 801a5f0:	2330      	movle	r3, #48	@ 0x30
 801a5f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a5f6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a5fa:	1b92      	subs	r2, r2, r6
 801a5fc:	6122      	str	r2, [r4, #16]
 801a5fe:	f8cd a000 	str.w	sl, [sp]
 801a602:	464b      	mov	r3, r9
 801a604:	aa03      	add	r2, sp, #12
 801a606:	4621      	mov	r1, r4
 801a608:	4640      	mov	r0, r8
 801a60a:	f7ff fee7 	bl	801a3dc <_printf_common>
 801a60e:	3001      	adds	r0, #1
 801a610:	d14a      	bne.n	801a6a8 <_printf_i+0x1f0>
 801a612:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a616:	b004      	add	sp, #16
 801a618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a61c:	6823      	ldr	r3, [r4, #0]
 801a61e:	f043 0320 	orr.w	r3, r3, #32
 801a622:	6023      	str	r3, [r4, #0]
 801a624:	4832      	ldr	r0, [pc, #200]	@ (801a6f0 <_printf_i+0x238>)
 801a626:	2778      	movs	r7, #120	@ 0x78
 801a628:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a62c:	6823      	ldr	r3, [r4, #0]
 801a62e:	6831      	ldr	r1, [r6, #0]
 801a630:	061f      	lsls	r7, r3, #24
 801a632:	f851 5b04 	ldr.w	r5, [r1], #4
 801a636:	d402      	bmi.n	801a63e <_printf_i+0x186>
 801a638:	065f      	lsls	r7, r3, #25
 801a63a:	bf48      	it	mi
 801a63c:	b2ad      	uxthmi	r5, r5
 801a63e:	6031      	str	r1, [r6, #0]
 801a640:	07d9      	lsls	r1, r3, #31
 801a642:	bf44      	itt	mi
 801a644:	f043 0320 	orrmi.w	r3, r3, #32
 801a648:	6023      	strmi	r3, [r4, #0]
 801a64a:	b11d      	cbz	r5, 801a654 <_printf_i+0x19c>
 801a64c:	2310      	movs	r3, #16
 801a64e:	e7ad      	b.n	801a5ac <_printf_i+0xf4>
 801a650:	4826      	ldr	r0, [pc, #152]	@ (801a6ec <_printf_i+0x234>)
 801a652:	e7e9      	b.n	801a628 <_printf_i+0x170>
 801a654:	6823      	ldr	r3, [r4, #0]
 801a656:	f023 0320 	bic.w	r3, r3, #32
 801a65a:	6023      	str	r3, [r4, #0]
 801a65c:	e7f6      	b.n	801a64c <_printf_i+0x194>
 801a65e:	4616      	mov	r6, r2
 801a660:	e7bd      	b.n	801a5de <_printf_i+0x126>
 801a662:	6833      	ldr	r3, [r6, #0]
 801a664:	6825      	ldr	r5, [r4, #0]
 801a666:	6961      	ldr	r1, [r4, #20]
 801a668:	1d18      	adds	r0, r3, #4
 801a66a:	6030      	str	r0, [r6, #0]
 801a66c:	062e      	lsls	r6, r5, #24
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	d501      	bpl.n	801a676 <_printf_i+0x1be>
 801a672:	6019      	str	r1, [r3, #0]
 801a674:	e002      	b.n	801a67c <_printf_i+0x1c4>
 801a676:	0668      	lsls	r0, r5, #25
 801a678:	d5fb      	bpl.n	801a672 <_printf_i+0x1ba>
 801a67a:	8019      	strh	r1, [r3, #0]
 801a67c:	2300      	movs	r3, #0
 801a67e:	6123      	str	r3, [r4, #16]
 801a680:	4616      	mov	r6, r2
 801a682:	e7bc      	b.n	801a5fe <_printf_i+0x146>
 801a684:	6833      	ldr	r3, [r6, #0]
 801a686:	1d1a      	adds	r2, r3, #4
 801a688:	6032      	str	r2, [r6, #0]
 801a68a:	681e      	ldr	r6, [r3, #0]
 801a68c:	6862      	ldr	r2, [r4, #4]
 801a68e:	2100      	movs	r1, #0
 801a690:	4630      	mov	r0, r6
 801a692:	f7e5 fddd 	bl	8000250 <memchr>
 801a696:	b108      	cbz	r0, 801a69c <_printf_i+0x1e4>
 801a698:	1b80      	subs	r0, r0, r6
 801a69a:	6060      	str	r0, [r4, #4]
 801a69c:	6863      	ldr	r3, [r4, #4]
 801a69e:	6123      	str	r3, [r4, #16]
 801a6a0:	2300      	movs	r3, #0
 801a6a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a6a6:	e7aa      	b.n	801a5fe <_printf_i+0x146>
 801a6a8:	6923      	ldr	r3, [r4, #16]
 801a6aa:	4632      	mov	r2, r6
 801a6ac:	4649      	mov	r1, r9
 801a6ae:	4640      	mov	r0, r8
 801a6b0:	47d0      	blx	sl
 801a6b2:	3001      	adds	r0, #1
 801a6b4:	d0ad      	beq.n	801a612 <_printf_i+0x15a>
 801a6b6:	6823      	ldr	r3, [r4, #0]
 801a6b8:	079b      	lsls	r3, r3, #30
 801a6ba:	d413      	bmi.n	801a6e4 <_printf_i+0x22c>
 801a6bc:	68e0      	ldr	r0, [r4, #12]
 801a6be:	9b03      	ldr	r3, [sp, #12]
 801a6c0:	4298      	cmp	r0, r3
 801a6c2:	bfb8      	it	lt
 801a6c4:	4618      	movlt	r0, r3
 801a6c6:	e7a6      	b.n	801a616 <_printf_i+0x15e>
 801a6c8:	2301      	movs	r3, #1
 801a6ca:	4632      	mov	r2, r6
 801a6cc:	4649      	mov	r1, r9
 801a6ce:	4640      	mov	r0, r8
 801a6d0:	47d0      	blx	sl
 801a6d2:	3001      	adds	r0, #1
 801a6d4:	d09d      	beq.n	801a612 <_printf_i+0x15a>
 801a6d6:	3501      	adds	r5, #1
 801a6d8:	68e3      	ldr	r3, [r4, #12]
 801a6da:	9903      	ldr	r1, [sp, #12]
 801a6dc:	1a5b      	subs	r3, r3, r1
 801a6de:	42ab      	cmp	r3, r5
 801a6e0:	dcf2      	bgt.n	801a6c8 <_printf_i+0x210>
 801a6e2:	e7eb      	b.n	801a6bc <_printf_i+0x204>
 801a6e4:	2500      	movs	r5, #0
 801a6e6:	f104 0619 	add.w	r6, r4, #25
 801a6ea:	e7f5      	b.n	801a6d8 <_printf_i+0x220>
 801a6ec:	0801b734 	.word	0x0801b734
 801a6f0:	0801b745 	.word	0x0801b745

0801a6f4 <__sflush_r>:
 801a6f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6fc:	0716      	lsls	r6, r2, #28
 801a6fe:	4605      	mov	r5, r0
 801a700:	460c      	mov	r4, r1
 801a702:	d454      	bmi.n	801a7ae <__sflush_r+0xba>
 801a704:	684b      	ldr	r3, [r1, #4]
 801a706:	2b00      	cmp	r3, #0
 801a708:	dc02      	bgt.n	801a710 <__sflush_r+0x1c>
 801a70a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	dd48      	ble.n	801a7a2 <__sflush_r+0xae>
 801a710:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a712:	2e00      	cmp	r6, #0
 801a714:	d045      	beq.n	801a7a2 <__sflush_r+0xae>
 801a716:	2300      	movs	r3, #0
 801a718:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a71c:	682f      	ldr	r7, [r5, #0]
 801a71e:	6a21      	ldr	r1, [r4, #32]
 801a720:	602b      	str	r3, [r5, #0]
 801a722:	d030      	beq.n	801a786 <__sflush_r+0x92>
 801a724:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a726:	89a3      	ldrh	r3, [r4, #12]
 801a728:	0759      	lsls	r1, r3, #29
 801a72a:	d505      	bpl.n	801a738 <__sflush_r+0x44>
 801a72c:	6863      	ldr	r3, [r4, #4]
 801a72e:	1ad2      	subs	r2, r2, r3
 801a730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a732:	b10b      	cbz	r3, 801a738 <__sflush_r+0x44>
 801a734:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a736:	1ad2      	subs	r2, r2, r3
 801a738:	2300      	movs	r3, #0
 801a73a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a73c:	6a21      	ldr	r1, [r4, #32]
 801a73e:	4628      	mov	r0, r5
 801a740:	47b0      	blx	r6
 801a742:	1c43      	adds	r3, r0, #1
 801a744:	89a3      	ldrh	r3, [r4, #12]
 801a746:	d106      	bne.n	801a756 <__sflush_r+0x62>
 801a748:	6829      	ldr	r1, [r5, #0]
 801a74a:	291d      	cmp	r1, #29
 801a74c:	d82b      	bhi.n	801a7a6 <__sflush_r+0xb2>
 801a74e:	4a2a      	ldr	r2, [pc, #168]	@ (801a7f8 <__sflush_r+0x104>)
 801a750:	40ca      	lsrs	r2, r1
 801a752:	07d6      	lsls	r6, r2, #31
 801a754:	d527      	bpl.n	801a7a6 <__sflush_r+0xb2>
 801a756:	2200      	movs	r2, #0
 801a758:	6062      	str	r2, [r4, #4]
 801a75a:	04d9      	lsls	r1, r3, #19
 801a75c:	6922      	ldr	r2, [r4, #16]
 801a75e:	6022      	str	r2, [r4, #0]
 801a760:	d504      	bpl.n	801a76c <__sflush_r+0x78>
 801a762:	1c42      	adds	r2, r0, #1
 801a764:	d101      	bne.n	801a76a <__sflush_r+0x76>
 801a766:	682b      	ldr	r3, [r5, #0]
 801a768:	b903      	cbnz	r3, 801a76c <__sflush_r+0x78>
 801a76a:	6560      	str	r0, [r4, #84]	@ 0x54
 801a76c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a76e:	602f      	str	r7, [r5, #0]
 801a770:	b1b9      	cbz	r1, 801a7a2 <__sflush_r+0xae>
 801a772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a776:	4299      	cmp	r1, r3
 801a778:	d002      	beq.n	801a780 <__sflush_r+0x8c>
 801a77a:	4628      	mov	r0, r5
 801a77c:	f7ff fb42 	bl	8019e04 <_free_r>
 801a780:	2300      	movs	r3, #0
 801a782:	6363      	str	r3, [r4, #52]	@ 0x34
 801a784:	e00d      	b.n	801a7a2 <__sflush_r+0xae>
 801a786:	2301      	movs	r3, #1
 801a788:	4628      	mov	r0, r5
 801a78a:	47b0      	blx	r6
 801a78c:	4602      	mov	r2, r0
 801a78e:	1c50      	adds	r0, r2, #1
 801a790:	d1c9      	bne.n	801a726 <__sflush_r+0x32>
 801a792:	682b      	ldr	r3, [r5, #0]
 801a794:	2b00      	cmp	r3, #0
 801a796:	d0c6      	beq.n	801a726 <__sflush_r+0x32>
 801a798:	2b1d      	cmp	r3, #29
 801a79a:	d001      	beq.n	801a7a0 <__sflush_r+0xac>
 801a79c:	2b16      	cmp	r3, #22
 801a79e:	d11e      	bne.n	801a7de <__sflush_r+0xea>
 801a7a0:	602f      	str	r7, [r5, #0]
 801a7a2:	2000      	movs	r0, #0
 801a7a4:	e022      	b.n	801a7ec <__sflush_r+0xf8>
 801a7a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a7aa:	b21b      	sxth	r3, r3
 801a7ac:	e01b      	b.n	801a7e6 <__sflush_r+0xf2>
 801a7ae:	690f      	ldr	r7, [r1, #16]
 801a7b0:	2f00      	cmp	r7, #0
 801a7b2:	d0f6      	beq.n	801a7a2 <__sflush_r+0xae>
 801a7b4:	0793      	lsls	r3, r2, #30
 801a7b6:	680e      	ldr	r6, [r1, #0]
 801a7b8:	bf08      	it	eq
 801a7ba:	694b      	ldreq	r3, [r1, #20]
 801a7bc:	600f      	str	r7, [r1, #0]
 801a7be:	bf18      	it	ne
 801a7c0:	2300      	movne	r3, #0
 801a7c2:	eba6 0807 	sub.w	r8, r6, r7
 801a7c6:	608b      	str	r3, [r1, #8]
 801a7c8:	f1b8 0f00 	cmp.w	r8, #0
 801a7cc:	dde9      	ble.n	801a7a2 <__sflush_r+0xae>
 801a7ce:	6a21      	ldr	r1, [r4, #32]
 801a7d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a7d2:	4643      	mov	r3, r8
 801a7d4:	463a      	mov	r2, r7
 801a7d6:	4628      	mov	r0, r5
 801a7d8:	47b0      	blx	r6
 801a7da:	2800      	cmp	r0, #0
 801a7dc:	dc08      	bgt.n	801a7f0 <__sflush_r+0xfc>
 801a7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a7e6:	81a3      	strh	r3, [r4, #12]
 801a7e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7f0:	4407      	add	r7, r0
 801a7f2:	eba8 0800 	sub.w	r8, r8, r0
 801a7f6:	e7e7      	b.n	801a7c8 <__sflush_r+0xd4>
 801a7f8:	20400001 	.word	0x20400001

0801a7fc <_fflush_r>:
 801a7fc:	b538      	push	{r3, r4, r5, lr}
 801a7fe:	690b      	ldr	r3, [r1, #16]
 801a800:	4605      	mov	r5, r0
 801a802:	460c      	mov	r4, r1
 801a804:	b913      	cbnz	r3, 801a80c <_fflush_r+0x10>
 801a806:	2500      	movs	r5, #0
 801a808:	4628      	mov	r0, r5
 801a80a:	bd38      	pop	{r3, r4, r5, pc}
 801a80c:	b118      	cbz	r0, 801a816 <_fflush_r+0x1a>
 801a80e:	6a03      	ldr	r3, [r0, #32]
 801a810:	b90b      	cbnz	r3, 801a816 <_fflush_r+0x1a>
 801a812:	f7fe ffdf 	bl	80197d4 <__sinit>
 801a816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d0f3      	beq.n	801a806 <_fflush_r+0xa>
 801a81e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a820:	07d0      	lsls	r0, r2, #31
 801a822:	d404      	bmi.n	801a82e <_fflush_r+0x32>
 801a824:	0599      	lsls	r1, r3, #22
 801a826:	d402      	bmi.n	801a82e <_fflush_r+0x32>
 801a828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a82a:	f7ff faa8 	bl	8019d7e <__retarget_lock_acquire_recursive>
 801a82e:	4628      	mov	r0, r5
 801a830:	4621      	mov	r1, r4
 801a832:	f7ff ff5f 	bl	801a6f4 <__sflush_r>
 801a836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a838:	07da      	lsls	r2, r3, #31
 801a83a:	4605      	mov	r5, r0
 801a83c:	d4e4      	bmi.n	801a808 <_fflush_r+0xc>
 801a83e:	89a3      	ldrh	r3, [r4, #12]
 801a840:	059b      	lsls	r3, r3, #22
 801a842:	d4e1      	bmi.n	801a808 <_fflush_r+0xc>
 801a844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a846:	f7ff fa9b 	bl	8019d80 <__retarget_lock_release_recursive>
 801a84a:	e7dd      	b.n	801a808 <_fflush_r+0xc>

0801a84c <fiprintf>:
 801a84c:	b40e      	push	{r1, r2, r3}
 801a84e:	b503      	push	{r0, r1, lr}
 801a850:	4601      	mov	r1, r0
 801a852:	ab03      	add	r3, sp, #12
 801a854:	4805      	ldr	r0, [pc, #20]	@ (801a86c <fiprintf+0x20>)
 801a856:	f853 2b04 	ldr.w	r2, [r3], #4
 801a85a:	6800      	ldr	r0, [r0, #0]
 801a85c:	9301      	str	r3, [sp, #4]
 801a85e:	f7ff fca5 	bl	801a1ac <_vfiprintf_r>
 801a862:	b002      	add	sp, #8
 801a864:	f85d eb04 	ldr.w	lr, [sp], #4
 801a868:	b003      	add	sp, #12
 801a86a:	4770      	bx	lr
 801a86c:	200002c4 	.word	0x200002c4

0801a870 <__swhatbuf_r>:
 801a870:	b570      	push	{r4, r5, r6, lr}
 801a872:	460c      	mov	r4, r1
 801a874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a878:	2900      	cmp	r1, #0
 801a87a:	b096      	sub	sp, #88	@ 0x58
 801a87c:	4615      	mov	r5, r2
 801a87e:	461e      	mov	r6, r3
 801a880:	da0d      	bge.n	801a89e <__swhatbuf_r+0x2e>
 801a882:	89a3      	ldrh	r3, [r4, #12]
 801a884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a888:	f04f 0100 	mov.w	r1, #0
 801a88c:	bf14      	ite	ne
 801a88e:	2340      	movne	r3, #64	@ 0x40
 801a890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a894:	2000      	movs	r0, #0
 801a896:	6031      	str	r1, [r6, #0]
 801a898:	602b      	str	r3, [r5, #0]
 801a89a:	b016      	add	sp, #88	@ 0x58
 801a89c:	bd70      	pop	{r4, r5, r6, pc}
 801a89e:	466a      	mov	r2, sp
 801a8a0:	f000 f848 	bl	801a934 <_fstat_r>
 801a8a4:	2800      	cmp	r0, #0
 801a8a6:	dbec      	blt.n	801a882 <__swhatbuf_r+0x12>
 801a8a8:	9901      	ldr	r1, [sp, #4]
 801a8aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a8ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a8b2:	4259      	negs	r1, r3
 801a8b4:	4159      	adcs	r1, r3
 801a8b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a8ba:	e7eb      	b.n	801a894 <__swhatbuf_r+0x24>

0801a8bc <__smakebuf_r>:
 801a8bc:	898b      	ldrh	r3, [r1, #12]
 801a8be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a8c0:	079d      	lsls	r5, r3, #30
 801a8c2:	4606      	mov	r6, r0
 801a8c4:	460c      	mov	r4, r1
 801a8c6:	d507      	bpl.n	801a8d8 <__smakebuf_r+0x1c>
 801a8c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a8cc:	6023      	str	r3, [r4, #0]
 801a8ce:	6123      	str	r3, [r4, #16]
 801a8d0:	2301      	movs	r3, #1
 801a8d2:	6163      	str	r3, [r4, #20]
 801a8d4:	b003      	add	sp, #12
 801a8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8d8:	ab01      	add	r3, sp, #4
 801a8da:	466a      	mov	r2, sp
 801a8dc:	f7ff ffc8 	bl	801a870 <__swhatbuf_r>
 801a8e0:	9f00      	ldr	r7, [sp, #0]
 801a8e2:	4605      	mov	r5, r0
 801a8e4:	4639      	mov	r1, r7
 801a8e6:	4630      	mov	r0, r6
 801a8e8:	f7fe fd42 	bl	8019370 <_malloc_r>
 801a8ec:	b948      	cbnz	r0, 801a902 <__smakebuf_r+0x46>
 801a8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a8f2:	059a      	lsls	r2, r3, #22
 801a8f4:	d4ee      	bmi.n	801a8d4 <__smakebuf_r+0x18>
 801a8f6:	f023 0303 	bic.w	r3, r3, #3
 801a8fa:	f043 0302 	orr.w	r3, r3, #2
 801a8fe:	81a3      	strh	r3, [r4, #12]
 801a900:	e7e2      	b.n	801a8c8 <__smakebuf_r+0xc>
 801a902:	89a3      	ldrh	r3, [r4, #12]
 801a904:	6020      	str	r0, [r4, #0]
 801a906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a90a:	81a3      	strh	r3, [r4, #12]
 801a90c:	9b01      	ldr	r3, [sp, #4]
 801a90e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a912:	b15b      	cbz	r3, 801a92c <__smakebuf_r+0x70>
 801a914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a918:	4630      	mov	r0, r6
 801a91a:	f000 f81d 	bl	801a958 <_isatty_r>
 801a91e:	b128      	cbz	r0, 801a92c <__smakebuf_r+0x70>
 801a920:	89a3      	ldrh	r3, [r4, #12]
 801a922:	f023 0303 	bic.w	r3, r3, #3
 801a926:	f043 0301 	orr.w	r3, r3, #1
 801a92a:	81a3      	strh	r3, [r4, #12]
 801a92c:	89a3      	ldrh	r3, [r4, #12]
 801a92e:	431d      	orrs	r5, r3
 801a930:	81a5      	strh	r5, [r4, #12]
 801a932:	e7cf      	b.n	801a8d4 <__smakebuf_r+0x18>

0801a934 <_fstat_r>:
 801a934:	b538      	push	{r3, r4, r5, lr}
 801a936:	4d07      	ldr	r5, [pc, #28]	@ (801a954 <_fstat_r+0x20>)
 801a938:	2300      	movs	r3, #0
 801a93a:	4604      	mov	r4, r0
 801a93c:	4608      	mov	r0, r1
 801a93e:	4611      	mov	r1, r2
 801a940:	602b      	str	r3, [r5, #0]
 801a942:	f7e8 f831 	bl	80029a8 <_fstat>
 801a946:	1c43      	adds	r3, r0, #1
 801a948:	d102      	bne.n	801a950 <_fstat_r+0x1c>
 801a94a:	682b      	ldr	r3, [r5, #0]
 801a94c:	b103      	cbz	r3, 801a950 <_fstat_r+0x1c>
 801a94e:	6023      	str	r3, [r4, #0]
 801a950:	bd38      	pop	{r3, r4, r5, pc}
 801a952:	bf00      	nop
 801a954:	2000b1c8 	.word	0x2000b1c8

0801a958 <_isatty_r>:
 801a958:	b538      	push	{r3, r4, r5, lr}
 801a95a:	4d06      	ldr	r5, [pc, #24]	@ (801a974 <_isatty_r+0x1c>)
 801a95c:	2300      	movs	r3, #0
 801a95e:	4604      	mov	r4, r0
 801a960:	4608      	mov	r0, r1
 801a962:	602b      	str	r3, [r5, #0]
 801a964:	f7e8 f830 	bl	80029c8 <_isatty>
 801a968:	1c43      	adds	r3, r0, #1
 801a96a:	d102      	bne.n	801a972 <_isatty_r+0x1a>
 801a96c:	682b      	ldr	r3, [r5, #0]
 801a96e:	b103      	cbz	r3, 801a972 <_isatty_r+0x1a>
 801a970:	6023      	str	r3, [r4, #0]
 801a972:	bd38      	pop	{r3, r4, r5, pc}
 801a974:	2000b1c8 	.word	0x2000b1c8

0801a978 <abort>:
 801a978:	b508      	push	{r3, lr}
 801a97a:	2006      	movs	r0, #6
 801a97c:	f000 f82c 	bl	801a9d8 <raise>
 801a980:	2001      	movs	r0, #1
 801a982:	f7e7 ffc1 	bl	8002908 <_exit>

0801a986 <_raise_r>:
 801a986:	291f      	cmp	r1, #31
 801a988:	b538      	push	{r3, r4, r5, lr}
 801a98a:	4605      	mov	r5, r0
 801a98c:	460c      	mov	r4, r1
 801a98e:	d904      	bls.n	801a99a <_raise_r+0x14>
 801a990:	2316      	movs	r3, #22
 801a992:	6003      	str	r3, [r0, #0]
 801a994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a998:	bd38      	pop	{r3, r4, r5, pc}
 801a99a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a99c:	b112      	cbz	r2, 801a9a4 <_raise_r+0x1e>
 801a99e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a9a2:	b94b      	cbnz	r3, 801a9b8 <_raise_r+0x32>
 801a9a4:	4628      	mov	r0, r5
 801a9a6:	f000 f831 	bl	801aa0c <_getpid_r>
 801a9aa:	4622      	mov	r2, r4
 801a9ac:	4601      	mov	r1, r0
 801a9ae:	4628      	mov	r0, r5
 801a9b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a9b4:	f000 b818 	b.w	801a9e8 <_kill_r>
 801a9b8:	2b01      	cmp	r3, #1
 801a9ba:	d00a      	beq.n	801a9d2 <_raise_r+0x4c>
 801a9bc:	1c59      	adds	r1, r3, #1
 801a9be:	d103      	bne.n	801a9c8 <_raise_r+0x42>
 801a9c0:	2316      	movs	r3, #22
 801a9c2:	6003      	str	r3, [r0, #0]
 801a9c4:	2001      	movs	r0, #1
 801a9c6:	e7e7      	b.n	801a998 <_raise_r+0x12>
 801a9c8:	2100      	movs	r1, #0
 801a9ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a9ce:	4620      	mov	r0, r4
 801a9d0:	4798      	blx	r3
 801a9d2:	2000      	movs	r0, #0
 801a9d4:	e7e0      	b.n	801a998 <_raise_r+0x12>
	...

0801a9d8 <raise>:
 801a9d8:	4b02      	ldr	r3, [pc, #8]	@ (801a9e4 <raise+0xc>)
 801a9da:	4601      	mov	r1, r0
 801a9dc:	6818      	ldr	r0, [r3, #0]
 801a9de:	f7ff bfd2 	b.w	801a986 <_raise_r>
 801a9e2:	bf00      	nop
 801a9e4:	200002c4 	.word	0x200002c4

0801a9e8 <_kill_r>:
 801a9e8:	b538      	push	{r3, r4, r5, lr}
 801a9ea:	4d07      	ldr	r5, [pc, #28]	@ (801aa08 <_kill_r+0x20>)
 801a9ec:	2300      	movs	r3, #0
 801a9ee:	4604      	mov	r4, r0
 801a9f0:	4608      	mov	r0, r1
 801a9f2:	4611      	mov	r1, r2
 801a9f4:	602b      	str	r3, [r5, #0]
 801a9f6:	f7e7 ff77 	bl	80028e8 <_kill>
 801a9fa:	1c43      	adds	r3, r0, #1
 801a9fc:	d102      	bne.n	801aa04 <_kill_r+0x1c>
 801a9fe:	682b      	ldr	r3, [r5, #0]
 801aa00:	b103      	cbz	r3, 801aa04 <_kill_r+0x1c>
 801aa02:	6023      	str	r3, [r4, #0]
 801aa04:	bd38      	pop	{r3, r4, r5, pc}
 801aa06:	bf00      	nop
 801aa08:	2000b1c8 	.word	0x2000b1c8

0801aa0c <_getpid_r>:
 801aa0c:	f7e7 bf64 	b.w	80028d8 <_getpid>

0801aa10 <_init>:
 801aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa12:	bf00      	nop
 801aa14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa16:	bc08      	pop	{r3}
 801aa18:	469e      	mov	lr, r3
 801aa1a:	4770      	bx	lr

0801aa1c <_fini>:
 801aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa1e:	bf00      	nop
 801aa20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa22:	bc08      	pop	{r3}
 801aa24:	469e      	mov	lr, r3
 801aa26:	4770      	bx	lr
