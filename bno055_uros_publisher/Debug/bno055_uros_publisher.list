
bno055_uros_publisher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a2a8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e48  0801a488  0801a488  0001b488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b2d0  0801b2d0  0001d2fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b2d0  0801b2d0  0001c2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b2d8  0801b2d8  0001d2fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801b2d8  0801b2d8  0001c2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b2e0  0801b2e0  0001c2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002fc  20000000  0801b2e4  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ae38  20000300  0801b5e0  0001d300  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000b138  0801b5e0  0001e138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d2fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000288cb  00000000  00000000  0001d32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005864  00000000  00000000  00045bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f00  00000000  00000000  0004b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017ec  00000000  00000000  0004d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dfbd  00000000  00000000  0004eb4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002772f  00000000  00000000  0007cb09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011691f  00000000  00000000  000a4238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001bab57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f98  00000000  00000000  001babd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001c3b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000300 	.word	0x20000300
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801a470 	.word	0x0801a470

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000304 	.word	0x20000304
 800021c:	0801a470 	.word	0x0801a470

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_ldivmod>:
 8000668:	b97b      	cbnz	r3, 800068a <__aeabi_ldivmod+0x22>
 800066a:	b972      	cbnz	r2, 800068a <__aeabi_ldivmod+0x22>
 800066c:	2900      	cmp	r1, #0
 800066e:	bfbe      	ittt	lt
 8000670:	2000      	movlt	r0, #0
 8000672:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000676:	e006      	blt.n	8000686 <__aeabi_ldivmod+0x1e>
 8000678:	bf08      	it	eq
 800067a:	2800      	cmpeq	r0, #0
 800067c:	bf1c      	itt	ne
 800067e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000682:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000686:	f000 b9d3 	b.w	8000a30 <__aeabi_idiv0>
 800068a:	f1ad 0c08 	sub.w	ip, sp, #8
 800068e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000692:	2900      	cmp	r1, #0
 8000694:	db09      	blt.n	80006aa <__aeabi_ldivmod+0x42>
 8000696:	2b00      	cmp	r3, #0
 8000698:	db1a      	blt.n	80006d0 <__aeabi_ldivmod+0x68>
 800069a:	f000 f84d 	bl	8000738 <__udivmoddi4>
 800069e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a6:	b004      	add	sp, #16
 80006a8:	4770      	bx	lr
 80006aa:	4240      	negs	r0, r0
 80006ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db1b      	blt.n	80006ec <__aeabi_ldivmod+0x84>
 80006b4:	f000 f840 	bl	8000738 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	4252      	negs	r2, r2
 80006ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ce:	4770      	bx	lr
 80006d0:	4252      	negs	r2, r2
 80006d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d6:	f000 f82f 	bl	8000738 <__udivmoddi4>
 80006da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e2:	b004      	add	sp, #16
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	4770      	bx	lr
 80006ec:	4252      	negs	r2, r2
 80006ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f2:	f000 f821 	bl	8000738 <__udivmoddi4>
 80006f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006fe:	b004      	add	sp, #16
 8000700:	4252      	negs	r2, r2
 8000702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000706:	4770      	bx	lr

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b988 	b.w	8000a30 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	468e      	mov	lr, r1
 8000740:	4604      	mov	r4, r0
 8000742:	4688      	mov	r8, r1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d14a      	bne.n	80007de <__udivmoddi4+0xa6>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d962      	bls.n	8000814 <__udivmoddi4+0xdc>
 800074e:	fab2 f682 	clz	r6, r2
 8000752:	b14e      	cbz	r6, 8000768 <__udivmoddi4+0x30>
 8000754:	f1c6 0320 	rsb	r3, r6, #32
 8000758:	fa01 f806 	lsl.w	r8, r1, r6
 800075c:	fa20 f303 	lsr.w	r3, r0, r3
 8000760:	40b7      	lsls	r7, r6
 8000762:	ea43 0808 	orr.w	r8, r3, r8
 8000766:	40b4      	lsls	r4, r6
 8000768:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800076c:	fa1f fc87 	uxth.w	ip, r7
 8000770:	fbb8 f1fe 	udiv	r1, r8, lr
 8000774:	0c23      	lsrs	r3, r4, #16
 8000776:	fb0e 8811 	mls	r8, lr, r1, r8
 800077a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800077e:	fb01 f20c 	mul.w	r2, r1, ip
 8000782:	429a      	cmp	r2, r3
 8000784:	d909      	bls.n	800079a <__udivmoddi4+0x62>
 8000786:	18fb      	adds	r3, r7, r3
 8000788:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800078c:	f080 80ea 	bcs.w	8000964 <__udivmoddi4+0x22c>
 8000790:	429a      	cmp	r2, r3
 8000792:	f240 80e7 	bls.w	8000964 <__udivmoddi4+0x22c>
 8000796:	3902      	subs	r1, #2
 8000798:	443b      	add	r3, r7
 800079a:	1a9a      	subs	r2, r3, r2
 800079c:	b2a3      	uxth	r3, r4
 800079e:	fbb2 f0fe 	udiv	r0, r2, lr
 80007a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80007ae:	459c      	cmp	ip, r3
 80007b0:	d909      	bls.n	80007c6 <__udivmoddi4+0x8e>
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80007b8:	f080 80d6 	bcs.w	8000968 <__udivmoddi4+0x230>
 80007bc:	459c      	cmp	ip, r3
 80007be:	f240 80d3 	bls.w	8000968 <__udivmoddi4+0x230>
 80007c2:	443b      	add	r3, r7
 80007c4:	3802      	subs	r0, #2
 80007c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007ca:	eba3 030c 	sub.w	r3, r3, ip
 80007ce:	2100      	movs	r1, #0
 80007d0:	b11d      	cbz	r5, 80007da <__udivmoddi4+0xa2>
 80007d2:	40f3      	lsrs	r3, r6
 80007d4:	2200      	movs	r2, #0
 80007d6:	e9c5 3200 	strd	r3, r2, [r5]
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d905      	bls.n	80007ee <__udivmoddi4+0xb6>
 80007e2:	b10d      	cbz	r5, 80007e8 <__udivmoddi4+0xb0>
 80007e4:	e9c5 0100 	strd	r0, r1, [r5]
 80007e8:	2100      	movs	r1, #0
 80007ea:	4608      	mov	r0, r1
 80007ec:	e7f5      	b.n	80007da <__udivmoddi4+0xa2>
 80007ee:	fab3 f183 	clz	r1, r3
 80007f2:	2900      	cmp	r1, #0
 80007f4:	d146      	bne.n	8000884 <__udivmoddi4+0x14c>
 80007f6:	4573      	cmp	r3, lr
 80007f8:	d302      	bcc.n	8000800 <__udivmoddi4+0xc8>
 80007fa:	4282      	cmp	r2, r0
 80007fc:	f200 8105 	bhi.w	8000a0a <__udivmoddi4+0x2d2>
 8000800:	1a84      	subs	r4, r0, r2
 8000802:	eb6e 0203 	sbc.w	r2, lr, r3
 8000806:	2001      	movs	r0, #1
 8000808:	4690      	mov	r8, r2
 800080a:	2d00      	cmp	r5, #0
 800080c:	d0e5      	beq.n	80007da <__udivmoddi4+0xa2>
 800080e:	e9c5 4800 	strd	r4, r8, [r5]
 8000812:	e7e2      	b.n	80007da <__udivmoddi4+0xa2>
 8000814:	2a00      	cmp	r2, #0
 8000816:	f000 8090 	beq.w	800093a <__udivmoddi4+0x202>
 800081a:	fab2 f682 	clz	r6, r2
 800081e:	2e00      	cmp	r6, #0
 8000820:	f040 80a4 	bne.w	800096c <__udivmoddi4+0x234>
 8000824:	1a8a      	subs	r2, r1, r2
 8000826:	0c03      	lsrs	r3, r0, #16
 8000828:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800082c:	b280      	uxth	r0, r0
 800082e:	b2bc      	uxth	r4, r7
 8000830:	2101      	movs	r1, #1
 8000832:	fbb2 fcfe 	udiv	ip, r2, lr
 8000836:	fb0e 221c 	mls	r2, lr, ip, r2
 800083a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800083e:	fb04 f20c 	mul.w	r2, r4, ip
 8000842:	429a      	cmp	r2, r3
 8000844:	d907      	bls.n	8000856 <__udivmoddi4+0x11e>
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x11c>
 800084e:	429a      	cmp	r2, r3
 8000850:	f200 80e0 	bhi.w	8000a14 <__udivmoddi4+0x2dc>
 8000854:	46c4      	mov	ip, r8
 8000856:	1a9b      	subs	r3, r3, r2
 8000858:	fbb3 f2fe 	udiv	r2, r3, lr
 800085c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000860:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000864:	fb02 f404 	mul.w	r4, r2, r4
 8000868:	429c      	cmp	r4, r3
 800086a:	d907      	bls.n	800087c <__udivmoddi4+0x144>
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000872:	d202      	bcs.n	800087a <__udivmoddi4+0x142>
 8000874:	429c      	cmp	r4, r3
 8000876:	f200 80ca 	bhi.w	8000a0e <__udivmoddi4+0x2d6>
 800087a:	4602      	mov	r2, r0
 800087c:	1b1b      	subs	r3, r3, r4
 800087e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000882:	e7a5      	b.n	80007d0 <__udivmoddi4+0x98>
 8000884:	f1c1 0620 	rsb	r6, r1, #32
 8000888:	408b      	lsls	r3, r1
 800088a:	fa22 f706 	lsr.w	r7, r2, r6
 800088e:	431f      	orrs	r7, r3
 8000890:	fa0e f401 	lsl.w	r4, lr, r1
 8000894:	fa20 f306 	lsr.w	r3, r0, r6
 8000898:	fa2e fe06 	lsr.w	lr, lr, r6
 800089c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008a0:	4323      	orrs	r3, r4
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	fa1f fc87 	uxth.w	ip, r7
 80008aa:	fbbe f0f9 	udiv	r0, lr, r9
 80008ae:	0c1c      	lsrs	r4, r3, #16
 80008b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008bc:	45a6      	cmp	lr, r4
 80008be:	fa02 f201 	lsl.w	r2, r2, r1
 80008c2:	d909      	bls.n	80008d8 <__udivmoddi4+0x1a0>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80008ca:	f080 809c 	bcs.w	8000a06 <__udivmoddi4+0x2ce>
 80008ce:	45a6      	cmp	lr, r4
 80008d0:	f240 8099 	bls.w	8000a06 <__udivmoddi4+0x2ce>
 80008d4:	3802      	subs	r0, #2
 80008d6:	443c      	add	r4, r7
 80008d8:	eba4 040e 	sub.w	r4, r4, lr
 80008dc:	fa1f fe83 	uxth.w	lr, r3
 80008e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008e4:	fb09 4413 	mls	r4, r9, r3, r4
 80008e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f0:	45a4      	cmp	ip, r4
 80008f2:	d908      	bls.n	8000906 <__udivmoddi4+0x1ce>
 80008f4:	193c      	adds	r4, r7, r4
 80008f6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80008fa:	f080 8082 	bcs.w	8000a02 <__udivmoddi4+0x2ca>
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d97f      	bls.n	8000a02 <__udivmoddi4+0x2ca>
 8000902:	3b02      	subs	r3, #2
 8000904:	443c      	add	r4, r7
 8000906:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800090a:	eba4 040c 	sub.w	r4, r4, ip
 800090e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000912:	4564      	cmp	r4, ip
 8000914:	4673      	mov	r3, lr
 8000916:	46e1      	mov	r9, ip
 8000918:	d362      	bcc.n	80009e0 <__udivmoddi4+0x2a8>
 800091a:	d05f      	beq.n	80009dc <__udivmoddi4+0x2a4>
 800091c:	b15d      	cbz	r5, 8000936 <__udivmoddi4+0x1fe>
 800091e:	ebb8 0203 	subs.w	r2, r8, r3
 8000922:	eb64 0409 	sbc.w	r4, r4, r9
 8000926:	fa04 f606 	lsl.w	r6, r4, r6
 800092a:	fa22 f301 	lsr.w	r3, r2, r1
 800092e:	431e      	orrs	r6, r3
 8000930:	40cc      	lsrs	r4, r1
 8000932:	e9c5 6400 	strd	r6, r4, [r5]
 8000936:	2100      	movs	r1, #0
 8000938:	e74f      	b.n	80007da <__udivmoddi4+0xa2>
 800093a:	fbb1 fcf2 	udiv	ip, r1, r2
 800093e:	0c01      	lsrs	r1, r0, #16
 8000940:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000944:	b280      	uxth	r0, r0
 8000946:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800094a:	463b      	mov	r3, r7
 800094c:	4638      	mov	r0, r7
 800094e:	463c      	mov	r4, r7
 8000950:	46b8      	mov	r8, r7
 8000952:	46be      	mov	lr, r7
 8000954:	2620      	movs	r6, #32
 8000956:	fbb1 f1f7 	udiv	r1, r1, r7
 800095a:	eba2 0208 	sub.w	r2, r2, r8
 800095e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000962:	e766      	b.n	8000832 <__udivmoddi4+0xfa>
 8000964:	4601      	mov	r1, r0
 8000966:	e718      	b.n	800079a <__udivmoddi4+0x62>
 8000968:	4610      	mov	r0, r2
 800096a:	e72c      	b.n	80007c6 <__udivmoddi4+0x8e>
 800096c:	f1c6 0220 	rsb	r2, r6, #32
 8000970:	fa2e f302 	lsr.w	r3, lr, r2
 8000974:	40b7      	lsls	r7, r6
 8000976:	40b1      	lsls	r1, r6
 8000978:	fa20 f202 	lsr.w	r2, r0, r2
 800097c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000980:	430a      	orrs	r2, r1
 8000982:	fbb3 f8fe 	udiv	r8, r3, lr
 8000986:	b2bc      	uxth	r4, r7
 8000988:	fb0e 3318 	mls	r3, lr, r8, r3
 800098c:	0c11      	lsrs	r1, r2, #16
 800098e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000992:	fb08 f904 	mul.w	r9, r8, r4
 8000996:	40b0      	lsls	r0, r6
 8000998:	4589      	cmp	r9, r1
 800099a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800099e:	b280      	uxth	r0, r0
 80009a0:	d93e      	bls.n	8000a20 <__udivmoddi4+0x2e8>
 80009a2:	1879      	adds	r1, r7, r1
 80009a4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80009a8:	d201      	bcs.n	80009ae <__udivmoddi4+0x276>
 80009aa:	4589      	cmp	r9, r1
 80009ac:	d81f      	bhi.n	80009ee <__udivmoddi4+0x2b6>
 80009ae:	eba1 0109 	sub.w	r1, r1, r9
 80009b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009b6:	fb09 f804 	mul.w	r8, r9, r4
 80009ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80009be:	b292      	uxth	r2, r2
 80009c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009c4:	4542      	cmp	r2, r8
 80009c6:	d229      	bcs.n	8000a1c <__udivmoddi4+0x2e4>
 80009c8:	18ba      	adds	r2, r7, r2
 80009ca:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80009ce:	d2c4      	bcs.n	800095a <__udivmoddi4+0x222>
 80009d0:	4542      	cmp	r2, r8
 80009d2:	d2c2      	bcs.n	800095a <__udivmoddi4+0x222>
 80009d4:	f1a9 0102 	sub.w	r1, r9, #2
 80009d8:	443a      	add	r2, r7
 80009da:	e7be      	b.n	800095a <__udivmoddi4+0x222>
 80009dc:	45f0      	cmp	r8, lr
 80009de:	d29d      	bcs.n	800091c <__udivmoddi4+0x1e4>
 80009e0:	ebbe 0302 	subs.w	r3, lr, r2
 80009e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009e8:	3801      	subs	r0, #1
 80009ea:	46e1      	mov	r9, ip
 80009ec:	e796      	b.n	800091c <__udivmoddi4+0x1e4>
 80009ee:	eba7 0909 	sub.w	r9, r7, r9
 80009f2:	4449      	add	r1, r9
 80009f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fc:	fb09 f804 	mul.w	r8, r9, r4
 8000a00:	e7db      	b.n	80009ba <__udivmoddi4+0x282>
 8000a02:	4673      	mov	r3, lr
 8000a04:	e77f      	b.n	8000906 <__udivmoddi4+0x1ce>
 8000a06:	4650      	mov	r0, sl
 8000a08:	e766      	b.n	80008d8 <__udivmoddi4+0x1a0>
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	e6fd      	b.n	800080a <__udivmoddi4+0xd2>
 8000a0e:	443b      	add	r3, r7
 8000a10:	3a02      	subs	r2, #2
 8000a12:	e733      	b.n	800087c <__udivmoddi4+0x144>
 8000a14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a18:	443b      	add	r3, r7
 8000a1a:	e71c      	b.n	8000856 <__udivmoddi4+0x11e>
 8000a1c:	4649      	mov	r1, r9
 8000a1e:	e79c      	b.n	800095a <__udivmoddi4+0x222>
 8000a20:	eba1 0109 	sub.w	r1, r1, r9
 8000a24:	46c4      	mov	ip, r8
 8000a26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a2a:	fb09 f804 	mul.w	r8, r9, r4
 8000a2e:	e7c4      	b.n	80009ba <__udivmoddi4+0x282>

08000a30 <__aeabi_idiv0>:
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <WriteReg>:
 */

#include "BNO055.h"

static HAL_StatusTypeDef WriteReg(BNO055_t *bno, uint8_t reg, uint8_t value)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af04      	add	r7, sp, #16
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
 8000a40:	4613      	mov	r3, r2
 8000a42:	70bb      	strb	r3, [r7, #2]
    return HAL_I2C_Mem_Write(bno->i2c, bno->address, reg, 1, &value, 1, 30);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6818      	ldr	r0, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	791b      	ldrb	r3, [r3, #4]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	78fb      	ldrb	r3, [r7, #3]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	231e      	movs	r3, #30
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	2301      	movs	r3, #1
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	1cbb      	adds	r3, r7, #2
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	f002 fe62 	bl	8003728 <HAL_I2C_Mem_Write>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <ReadReg>:

static HAL_StatusTypeDef ReadReg(BNO055_t *bno, uint8_t reg, uint8_t *value)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b088      	sub	sp, #32
 8000a72:	af04      	add	r7, sp, #16
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	460b      	mov	r3, r1
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	72fb      	strb	r3, [r7, #11]
    return HAL_I2C_Mem_Read(bno->i2c, bno->address, reg, 1, value, 1, 30);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	791b      	ldrb	r3, [r3, #4]
 8000a84:	4619      	mov	r1, r3
 8000a86:	7afb      	ldrb	r3, [r7, #11]
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	231e      	movs	r3, #30
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	f002 ff5a 	bl	8003950 <HAL_I2C_Mem_Read>
 8000a9c:	4603      	mov	r3, r0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <BNO055_Init>:
{
    return HAL_I2C_Mem_Read(bno->i2c, bno->address, reg, 1, buffer, len, 30);
}

HAL_StatusTypeDef BNO055_Init(BNO055_t *bno, I2C_HandleTypeDef *i2c, uint8_t addr)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	71fb      	strb	r3, [r7, #7]
    uint8_t chip_id = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	74fb      	strb	r3, [r7, #19]

    memset(bno, 0, sizeof(BNO055_t));
 8000ab8:	227c      	movs	r2, #124	@ 0x7c
 8000aba:	2100      	movs	r1, #0
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f018 fdcf 	bl	8019660 <memset>
    bno->i2c = i2c;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	68ba      	ldr	r2, [r7, #8]
 8000ac6:	601a      	str	r2, [r3, #0]
    bno->address = (addr == 0) ? BNO055_ADDRESS_A : BNO055_ADDRESS_B;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <BNO055_Init+0x2c>
 8000ace:	2250      	movs	r2, #80	@ 0x50
 8000ad0:	e000      	b.n	8000ad4 <BNO055_Init+0x2e>
 8000ad2:	2252      	movs	r2, #82	@ 0x52
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	711a      	strb	r2, [r3, #4]
    bno->dma_ready = true;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2201      	movs	r2, #1
 8000adc:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b

    HAL_Delay(50);  // Minimum power-on delay
 8000ae0:	2032      	movs	r0, #50	@ 0x32
 8000ae2:	f001 ff83 	bl	80029ec <HAL_Delay>

    /* Verify chip */
    for (int i = 0; i < 5; i++) {
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	e012      	b.n	8000b12 <BNO055_Init+0x6c>
        if (ReadReg(bno, BNO055_CHIP_ID_ADDR, &chip_id) == HAL_OK && chip_id == BNO055_ID)
 8000aec:	f107 0313 	add.w	r3, r7, #19
 8000af0:	461a      	mov	r2, r3
 8000af2:	2100      	movs	r1, #0
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f7ff ffba 	bl	8000a6e <ReadReg>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <BNO055_Init+0x60>
 8000b00:	7cfb      	ldrb	r3, [r7, #19]
 8000b02:	2ba0      	cmp	r3, #160	@ 0xa0
 8000b04:	d009      	beq.n	8000b1a <BNO055_Init+0x74>
            break;
        HAL_Delay(10);
 8000b06:	200a      	movs	r0, #10
 8000b08:	f001 ff70 	bl	80029ec <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	dde9      	ble.n	8000aec <BNO055_Init+0x46>
 8000b18:	e000      	b.n	8000b1c <BNO055_Init+0x76>
            break;
 8000b1a:	bf00      	nop
    }

    if (chip_id != BNO055_ID) {
 8000b1c:	7cfb      	ldrb	r3, [r7, #19]
 8000b1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8000b20:	d014      	beq.n	8000b4c <BNO055_Init+0xa6>
        WriteReg(bno, BNO055_SYS_TRIGGER_ADDR, 0x20);  // Reset if not responding
 8000b22:	2220      	movs	r2, #32
 8000b24:	213f      	movs	r1, #63	@ 0x3f
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f7ff ff84 	bl	8000a34 <WriteReg>
        HAL_Delay(600);
 8000b2c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000b30:	f001 ff5c 	bl	80029ec <HAL_Delay>
        ReadReg(bno, BNO055_CHIP_ID_ADDR, &chip_id);
 8000b34:	f107 0313 	add.w	r3, r7, #19
 8000b38:	461a      	mov	r2, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f7ff ff96 	bl	8000a6e <ReadReg>
        if (chip_id != BNO055_ID) return HAL_ERROR;
 8000b42:	7cfb      	ldrb	r3, [r7, #19]
 8000b44:	2ba0      	cmp	r3, #160	@ 0xa0
 8000b46:	d001      	beq.n	8000b4c <BNO055_Init+0xa6>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e024      	b.n	8000b96 <BNO055_Init+0xf0>
    }

    WriteReg(bno, BNO055_OPR_MODE_ADDR, BNO055_MODE_CONFIG);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	213d      	movs	r1, #61	@ 0x3d
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff ff6f 	bl	8000a34 <WriteReg>
    HAL_Delay(20);
 8000b56:	2014      	movs	r0, #20
 8000b58:	f001 ff48 	bl	80029ec <HAL_Delay>

    WriteReg(bno, BNO055_PWR_MODE_ADDR, 0x00);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	213e      	movs	r1, #62	@ 0x3e
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f7ff ff67 	bl	8000a34 <WriteReg>
    WriteReg(bno, BNO055_PAGE_ID_ADDR, 0x00);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2107      	movs	r1, #7
 8000b6a:	68f8      	ldr	r0, [r7, #12]
 8000b6c:	f7ff ff62 	bl	8000a34 <WriteReg>
    WriteReg(bno, BNO055_UNIT_SEL_ADDR, 0x04);  // rad, rad/s, m/s²
 8000b70:	2204      	movs	r2, #4
 8000b72:	213b      	movs	r1, #59	@ 0x3b
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f7ff ff5d 	bl	8000a34 <WriteReg>
    WriteReg(bno, BNO055_SYS_TRIGGER_ADDR, 0x00);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	213f      	movs	r1, #63	@ 0x3f
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f7ff ff58 	bl	8000a34 <WriteReg>

    WriteReg(bno, BNO055_OPR_MODE_ADDR, BNO055_MODE_NDOF);
 8000b84:	220c      	movs	r2, #12
 8000b86:	213d      	movs	r1, #61	@ 0x3d
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f7ff ff53 	bl	8000a34 <WriteReg>
    HAL_Delay(20);
 8000b8e:	2014      	movs	r0, #20
 8000b90:	f001 ff2c 	bl	80029ec <HAL_Delay>

    return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <BNO055_SetAxisRemap>:

HAL_StatusTypeDef BNO055_SetAxisRemap(BNO055_t *bno, axis_remap_config_t config, axis_remap_sign_t sign)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	70fb      	strb	r3, [r7, #3]
 8000baa:	4613      	mov	r3, r2
 8000bac:	70bb      	strb	r3, [r7, #2]
    WriteReg(bno, BNO055_OPR_MODE_ADDR, BNO055_MODE_CONFIG);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	213d      	movs	r1, #61	@ 0x3d
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ff3e 	bl	8000a34 <WriteReg>
    HAL_Delay(20);
 8000bb8:	2014      	movs	r0, #20
 8000bba:	f001 ff17 	bl	80029ec <HAL_Delay>

    WriteReg(bno, BNO055_AXIS_MAP_CONFIG_ADDR, config);
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	2141      	movs	r1, #65	@ 0x41
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff35 	bl	8000a34 <WriteReg>
    WriteReg(bno, BNO055_AXIS_MAP_SIGN_ADDR, sign);
 8000bca:	78bb      	ldrb	r3, [r7, #2]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	2142      	movs	r1, #66	@ 0x42
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff2f 	bl	8000a34 <WriteReg>

    WriteReg(bno, BNO055_OPR_MODE_ADDR, BNO055_MODE_NDOF);
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	213d      	movs	r1, #61	@ 0x3d
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff2a 	bl	8000a34 <WriteReg>
    HAL_Delay(20);
 8000be0:	2014      	movs	r0, #20
 8000be2:	f001 ff03 	bl	80029ec <HAL_Delay>

    return HAL_OK;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <BNO055_LoadCalibration>:

HAL_StatusTypeDef BNO055_LoadCalibration(BNO055_t *bno, const calibration_data_t *calib)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	@ 0x30
 8000bf4:	af04      	add	r7, sp, #16
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
    uint8_t buffer[22];

    WriteReg(bno, BNO055_OPR_MODE_ADDR, BNO055_MODE_CONFIG);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	213d      	movs	r1, #61	@ 0x3d
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ff18 	bl	8000a34 <WriteReg>
    HAL_Delay(20);
 8000c04:	2014      	movs	r0, #20
 8000c06:	f001 fef1 	bl	80029ec <HAL_Delay>

    buffer[0] = calib->accel_offset_x & 0xFF;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	723b      	strb	r3, [r7, #8]
    buffer[1] = (calib->accel_offset_x >> 8) & 0xFF;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1a:	121b      	asrs	r3, r3, #8
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	727b      	strb	r3, [r7, #9]
    buffer[2] = calib->accel_offset_y & 0xFF;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	72bb      	strb	r3, [r7, #10]
    buffer[3] = (calib->accel_offset_y >> 8) & 0xFF;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c32:	121b      	asrs	r3, r3, #8
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	72fb      	strb	r3, [r7, #11]
    buffer[4] = calib->accel_offset_z & 0xFF;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	733b      	strb	r3, [r7, #12]
    buffer[5] = (calib->accel_offset_z >> 8) & 0xFF;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c4a:	121b      	asrs	r3, r3, #8
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	737b      	strb	r3, [r7, #13]
    buffer[6] = calib->mag_offset_x & 0xFF;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	73bb      	strb	r3, [r7, #14]
    buffer[7] = (calib->mag_offset_x >> 8) & 0xFF;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c62:	121b      	asrs	r3, r3, #8
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	73fb      	strb	r3, [r7, #15]
    buffer[8] = calib->mag_offset_y & 0xFF;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	743b      	strb	r3, [r7, #16]
    buffer[9] = (calib->mag_offset_y >> 8) & 0xFF;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c7a:	121b      	asrs	r3, r3, #8
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	747b      	strb	r3, [r7, #17]
    buffer[10] = calib->mag_offset_z & 0xFF;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	74bb      	strb	r3, [r7, #18]
    buffer[11] = (calib->mag_offset_z >> 8) & 0xFF;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000c92:	121b      	asrs	r3, r3, #8
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	74fb      	strb	r3, [r7, #19]
    buffer[12] = calib->gyro_offset_x & 0xFF;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	753b      	strb	r3, [r7, #20]
    buffer[13] = (calib->gyro_offset_x >> 8) & 0xFF;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000caa:	121b      	asrs	r3, r3, #8
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	757b      	strb	r3, [r7, #21]
    buffer[14] = calib->gyro_offset_y & 0xFF;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	75bb      	strb	r3, [r7, #22]
    buffer[15] = (calib->gyro_offset_y >> 8) & 0xFF;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000cc2:	121b      	asrs	r3, r3, #8
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	75fb      	strb	r3, [r7, #23]
    buffer[16] = calib->gyro_offset_z & 0xFF;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	763b      	strb	r3, [r7, #24]
    buffer[17] = (calib->gyro_offset_z >> 8) & 0xFF;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000cda:	121b      	asrs	r3, r3, #8
 8000cdc:	b21b      	sxth	r3, r3
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	767b      	strb	r3, [r7, #25]
    buffer[18] = calib->accel_radius & 0xFF;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	76bb      	strb	r3, [r7, #26]
    buffer[19] = (calib->accel_radius >> 8) & 0xFF;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000cf2:	121b      	asrs	r3, r3, #8
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	76fb      	strb	r3, [r7, #27]
    buffer[20] = calib->mag_radius & 0xFF;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	773b      	strb	r3, [r7, #28]
    buffer[21] = (calib->mag_radius >> 8) & 0xFF;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000d0a:	121b      	asrs	r3, r3, #8
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	777b      	strb	r3, [r7, #29]

    HAL_I2C_Mem_Write(bno->i2c, bno->address, BNO055_ACCEL_OFFSET_X_LSB_ADDR, 1, buffer, 22, 30);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	791b      	ldrb	r3, [r3, #4]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	231e      	movs	r3, #30
 8000d1e:	9302      	str	r3, [sp, #8]
 8000d20:	2316      	movs	r3, #22
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	2255      	movs	r2, #85	@ 0x55
 8000d2e:	f002 fcfb 	bl	8003728 <HAL_I2C_Mem_Write>

    WriteReg(bno, BNO055_OPR_MODE_ADDR, BNO055_MODE_NDOF);
 8000d32:	220c      	movs	r2, #12
 8000d34:	213d      	movs	r1, #61	@ 0x3d
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff fe7c 	bl	8000a34 <WriteReg>
    HAL_Delay(20);
 8000d3c:	2014      	movs	r0, #20
 8000d3e:	f001 fe55 	bl	80029ec <HAL_Delay>

    return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <BNO055_UpdateDMA>:

    return HAL_OK;
}

HAL_StatusTypeDef BNO055_UpdateDMA(BNO055_t *bno)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	6078      	str	r0, [r7, #4]
    if (!bno->dma_ready) return HAL_BUSY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <BNO055_UpdateDMA+0x1e>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e012      	b.n	8000d90 <BNO055_UpdateDMA+0x44>

    bno->dma_ready = false;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
    return HAL_I2C_Mem_Read_DMA(bno->i2c, bno->address, BNO055_ACCEL_DATA_X_LSB_ADDR, 1, bno->dma_buffer, 45);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	791b      	ldrb	r3, [r3, #4]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	334e      	adds	r3, #78	@ 0x4e
 8000d80:	222d      	movs	r2, #45	@ 0x2d
 8000d82:	9201      	str	r2, [sp, #4]
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2301      	movs	r3, #1
 8000d88:	2208      	movs	r2, #8
 8000d8a:	f002 fefb 	bl	8003b84 <HAL_I2C_Mem_Read_DMA>
 8000d8e:	4603      	mov	r3, r0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <BNO055_ProcessDMA>:

void BNO055_ProcessDMA(BNO055_t *bno)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
    uint8_t *b = bno->dma_buffer;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	334e      	adds	r3, #78	@ 0x4e
 8000da4:	60fb      	str	r3, [r7, #12]

    bno->accel.x = ((int16_t)((b[1] << 8) | b[0])) / 100.0f;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	3301      	adds	r3, #1
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	ee07 3a90 	vmov	s15, r3
 8000dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dc4:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 80010a8 <BNO055_ProcessDMA+0x310>
 8000dc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	edc3 7a02 	vstr	s15, [r3, #8]
    bno->accel.y = ((int16_t)((b[3] << 8) | b[2])) / 100.0f;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3303      	adds	r3, #3
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3302      	adds	r3, #2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000df2:	eddf 6aad 	vldr	s13, [pc, #692]	@ 80010a8 <BNO055_ProcessDMA+0x310>
 8000df6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	edc3 7a03 	vstr	s15, [r3, #12]
    bno->accel.z = ((int16_t)((b[5] << 8) | b[4])) / 100.0f;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3305      	adds	r3, #5
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	ee07 3a90 	vmov	s15, r3
 8000e1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e20:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 80010a8 <BNO055_ProcessDMA+0x310>
 8000e24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	edc3 7a04 	vstr	s15, [r3, #16]

    bno->mag.x = ((int16_t)((b[7] << 8) | b[6])) / 16.0f;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3307      	adds	r3, #7
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3306      	adds	r3, #6
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	ee07 3a90 	vmov	s15, r3
 8000e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e4e:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000e52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	edc3 7a08 	vstr	s15, [r3, #32]
    bno->mag.y = ((int16_t)((b[9] << 8) | b[8])) / 16.0f;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3309      	adds	r3, #9
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	3308      	adds	r3, #8
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	ee07 3a90 	vmov	s15, r3
 8000e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e7c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bno->mag.z = ((int16_t)((b[11] << 8) | b[10])) / 16.0f;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	330b      	adds	r3, #11
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	330a      	adds	r3, #10
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	b21b      	sxth	r3, r3
 8000ea2:	ee07 3a90 	vmov	s15, r3
 8000ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eaa:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    bno->gyro.x = ((int16_t)((b[13] << 8) | b[12])) / 900.0f;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	330d      	adds	r3, #13
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	330c      	adds	r3, #12
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	ee07 3a90 	vmov	s15, r3
 8000ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed8:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80010ac <BNO055_ProcessDMA+0x314>
 8000edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	edc3 7a05 	vstr	s15, [r3, #20]
    bno->gyro.y = ((int16_t)((b[15] << 8) | b[14])) / 900.0f;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	330f      	adds	r3, #15
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	330e      	adds	r3, #14
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f06:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80010ac <BNO055_ProcessDMA+0x314>
 8000f0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	edc3 7a06 	vstr	s15, [r3, #24]
    bno->gyro.z = ((int16_t)((b[17] << 8) | b[16])) / 900.0f;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3311      	adds	r3, #17
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3310      	adds	r3, #16
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f34:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 80010ac <BNO055_ProcessDMA+0x314>
 8000f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	edc3 7a07 	vstr	s15, [r3, #28]

    bno->euler.yaw = ((int16_t)((b[19] << 8) | b[18])) / 900.0f;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	3313      	adds	r3, #19
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3312      	adds	r3, #18
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f62:	eddf 6a52 	vldr	s13, [pc, #328]	@ 80010ac <BNO055_ProcessDMA+0x314>
 8000f66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    bno->euler.roll = ((int16_t)((b[21] << 8) | b[20])) / 900.0f;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3315      	adds	r3, #21
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3314      	adds	r3, #20
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f90:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80010ac <BNO055_ProcessDMA+0x314>
 8000f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    bno->euler.pitch = ((int16_t)((b[23] << 8) | b[22])) / 900.0f;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3317      	adds	r3, #23
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3316      	adds	r3, #22
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fbe:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80010ac <BNO055_ProcessDMA+0x314>
 8000fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    const float s = 1.0f / 16384.0f;
 8000fcc:	f04f 5362 	mov.w	r3, #947912704	@ 0x38800000
 8000fd0:	60bb      	str	r3, [r7, #8]
    bno->quat.w = ((int16_t)((b[25] << 8) | b[24])) * s;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3319      	adds	r3, #25
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3318      	adds	r3, #24
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    bno->quat.x = ((int16_t)((b[27] << 8) | b[26])) * s;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	331b      	adds	r3, #27
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b21b      	sxth	r3, r3
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	331a      	adds	r3, #26
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21b      	sxth	r3, r3
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001020:	edd7 7a02 	vldr	s15, [r7, #8]
 8001024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    bno->quat.y = ((int16_t)((b[29] << 8) | b[28])) * s;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	331d      	adds	r3, #29
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b21b      	sxth	r3, r3
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	331c      	adds	r3, #28
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21b      	sxth	r3, r3
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    bno->quat.z = ((int16_t)((b[31] << 8) | b[30])) * s;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	331f      	adds	r3, #31
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b21b      	sxth	r3, r3
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	331e      	adds	r3, #30
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21b      	sxth	r3, r3
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    bno->temperature = (int8_t)b[44];
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    bno->dma_ready = true;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	e004      	b.n	80010b0 <BNO055_ProcessDMA+0x318>
 80010a6:	bf00      	nop
 80010a8:	42c80000 	.word	0x42c80000
 80010ac:	44610000 	.word	0x44610000
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop

080010b8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <MX_FREERTOS_Init+0x18>)
 80010be:	2100      	movs	r1, #0
 80010c0:	4804      	ldr	r0, [pc, #16]	@ (80010d4 <MX_FREERTOS_Init+0x1c>)
 80010c2:	f008 f95f 	bl	8009384 <osThreadNew>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a03      	ldr	r2, [pc, #12]	@ (80010d8 <MX_FREERTOS_Init+0x20>)
 80010ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	0801a518 	.word	0x0801a518
 80010d4:	08001c5d 	.word	0x08001c5d
 80010d8:	2000031c 	.word	0x2000031c

080010dc <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	@ 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80010e8:	f009 fa20 	bl	800a52c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80010ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001258 <pvPortMallocMicroROS+0x17c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80010f4:	f000 f986 	bl	8001404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80010f8:	4b58      	ldr	r3, [pc, #352]	@ (800125c <pvPortMallocMicroROS+0x180>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	f040 8090 	bne.w	8001226 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d01e      	beq.n	800114a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800110c:	2208      	movs	r2, #8
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	2b00      	cmp	r3, #0
 800111c:	d015      	beq.n	800114a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f023 0307 	bic.w	r3, r3, #7
 8001124:	3308      	adds	r3, #8
 8001126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001136:	f383 8811 	msr	BASEPRI, r3
 800113a:	f3bf 8f6f 	isb	sy
 800113e:	f3bf 8f4f 	dsb	sy
 8001142:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	e7fd      	b.n	8001146 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d06a      	beq.n	8001226 <pvPortMallocMicroROS+0x14a>
 8001150:	4b43      	ldr	r3, [pc, #268]	@ (8001260 <pvPortMallocMicroROS+0x184>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	d865      	bhi.n	8001226 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800115a:	4b42      	ldr	r3, [pc, #264]	@ (8001264 <pvPortMallocMicroROS+0x188>)
 800115c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800115e:	4b41      	ldr	r3, [pc, #260]	@ (8001264 <pvPortMallocMicroROS+0x188>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001164:	e004      	b.n	8001170 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001168:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	429a      	cmp	r2, r3
 8001178:	d903      	bls.n	8001182 <pvPortMallocMicroROS+0xa6>
 800117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f1      	bne.n	8001166 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001182:	4b35      	ldr	r3, [pc, #212]	@ (8001258 <pvPortMallocMicroROS+0x17c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001188:	429a      	cmp	r2, r3
 800118a:	d04c      	beq.n	8001226 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2208      	movs	r2, #8
 8001192:	4413      	add	r3, r2
 8001194:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	1ad2      	subs	r2, r2, r3
 80011a6:	2308      	movs	r3, #8
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d920      	bls.n	80011f0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80011ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00b      	beq.n	80011d8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80011c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011c4:	f383 8811 	msr	BASEPRI, r3
 80011c8:	f3bf 8f6f 	isb	sy
 80011cc:	f3bf 8f4f 	dsb	sy
 80011d0:	613b      	str	r3, [r7, #16]
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80011d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	1ad2      	subs	r2, r2, r3
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80011e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80011ea:	69b8      	ldr	r0, [r7, #24]
 80011ec:	f000 f96c 	bl	80014c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <pvPortMallocMicroROS+0x184>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	4a19      	ldr	r2, [pc, #100]	@ (8001260 <pvPortMallocMicroROS+0x184>)
 80011fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <pvPortMallocMicroROS+0x184>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <pvPortMallocMicroROS+0x18c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d203      	bcs.n	8001212 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <pvPortMallocMicroROS+0x184>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a16      	ldr	r2, [pc, #88]	@ (8001268 <pvPortMallocMicroROS+0x18c>)
 8001210:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <pvPortMallocMicroROS+0x180>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	431a      	orrs	r2, r3
 800121c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001226:	f009 f98f 	bl	800a548 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00b      	beq.n	800124c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001238:	f383 8811 	msr	BASEPRI, r3
 800123c:	f3bf 8f6f 	isb	sy
 8001240:	f3bf 8f4f 	dsb	sy
 8001244:	60fb      	str	r3, [r7, #12]
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800124c:	69fb      	ldr	r3, [r7, #28]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20003e64 	.word	0x20003e64
 800125c:	20003e70 	.word	0x20003e70
 8001260:	20003e68 	.word	0x20003e68
 8001264:	20003e5c 	.word	0x20003e5c
 8001268:	20003e6c 	.word	0x20003e6c

0800126c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d04a      	beq.n	8001314 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800127e:	2308      	movs	r3, #8
 8001280:	425b      	negs	r3, r3
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4413      	add	r3, r2
 8001286:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4b22      	ldr	r3, [pc, #136]	@ (800131c <vPortFreeMicroROS+0xb0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10b      	bne.n	80012b2 <vPortFreeMicroROS+0x46>
	__asm volatile
 800129a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800129e:	f383 8811 	msr	BASEPRI, r3
 80012a2:	f3bf 8f6f 	isb	sy
 80012a6:	f3bf 8f4f 	dsb	sy
 80012aa:	60fb      	str	r3, [r7, #12]
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	e7fd      	b.n	80012ae <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <vPortFreeMicroROS+0x66>
	__asm volatile
 80012ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012be:	f383 8811 	msr	BASEPRI, r3
 80012c2:	f3bf 8f6f 	isb	sy
 80012c6:	f3bf 8f4f 	dsb	sy
 80012ca:	60bb      	str	r3, [r7, #8]
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	e7fd      	b.n	80012ce <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <vPortFreeMicroROS+0xb0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d019      	beq.n	8001314 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d115      	bne.n	8001314 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <vPortFreeMicroROS+0xb0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	401a      	ands	r2, r3
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80012f8:	f009 f918 	bl	800a52c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <vPortFreeMicroROS+0xb4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4413      	add	r3, r2
 8001306:	4a06      	ldr	r2, [pc, #24]	@ (8001320 <vPortFreeMicroROS+0xb4>)
 8001308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800130a:	6938      	ldr	r0, [r7, #16]
 800130c:	f000 f8dc 	bl	80014c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001310:	f009 f91a 	bl	800a548 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20003e70 	.word	0x20003e70
 8001320:	20003e68 	.word	0x20003e68

08001324 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001330:	2308      	movs	r3, #8
 8001332:	425b      	negs	r3, r3
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	4413      	add	r3, r2
 8001338:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <getBlockSize+0x38>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	43db      	mvns	r3, r3
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]

	return count;
 800134c:	68fb      	ldr	r3, [r7, #12]
}
 800134e:	4618      	mov	r0, r3
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20003e70 	.word	0x20003e70

08001360 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800136a:	f009 f8df 	bl	800a52c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f7ff feb4 	bl	80010dc <pvPortMallocMicroROS>
 8001374:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d017      	beq.n	80013ac <pvPortReallocMicroROS+0x4c>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d014      	beq.n	80013ac <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffce 	bl	8001324 <getBlockSize>
 8001388:	4603      	mov	r3, r0
 800138a:	2208      	movs	r2, #8
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d201      	bcs.n	800139c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	68b8      	ldr	r0, [r7, #8]
 80013a2:	f018 fa26 	bl	80197f2 <memcpy>

		vPortFreeMicroROS(pv);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff60 	bl	800126c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80013ac:	f009 f8cc 	bl	800a548 <xTaskResumeAll>

	return newmem;
 80013b0:	68bb      	ldr	r3, [r7, #8]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80013c4:	f009 f8b2 	bl	800a52c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	fb02 f303 	mul.w	r3, r2, r3
 80013d0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff fe82 	bl	80010dc <pvPortMallocMicroROS>
 80013d8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	613b      	str	r3, [r7, #16]

  	while(count--)
 80013de:	e004      	b.n	80013ea <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	613a      	str	r2, [r7, #16]
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	1e5a      	subs	r2, r3, #1
 80013ee:	617a      	str	r2, [r7, #20]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f5      	bne.n	80013e0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80013f4:	f009 f8a8 	bl	800a548 <xTaskResumeAll>
  	return mem;
 80013f8:	68fb      	ldr	r3, [r7, #12]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800140a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800140e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001410:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <prvHeapInit+0xac>)
 8001412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00c      	beq.n	8001438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3307      	adds	r3, #7
 8001422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f023 0307 	bic.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	4a1f      	ldr	r2, [pc, #124]	@ (80014b0 <prvHeapInit+0xac>)
 8001434:	4413      	add	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800143c:	4a1d      	ldr	r2, [pc, #116]	@ (80014b4 <prvHeapInit+0xb0>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <prvHeapInit+0xb0>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	4413      	add	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001450:	2208      	movs	r2, #8
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f023 0307 	bic.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4a15      	ldr	r2, [pc, #84]	@ (80014b8 <prvHeapInit+0xb4>)
 8001464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <prvHeapInit+0xb4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <prvHeapInit+0xb4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	1ad2      	subs	r2, r2, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <prvHeapInit+0xb4>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <prvHeapInit+0xb8>)
 8001492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a09      	ldr	r2, [pc, #36]	@ (80014c0 <prvHeapInit+0xbc>)
 800149a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <prvHeapInit+0xc0>)
 800149e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	2000325c 	.word	0x2000325c
 80014b4:	20003e5c 	.word	0x20003e5c
 80014b8:	20003e64 	.word	0x20003e64
 80014bc:	20003e6c 	.word	0x20003e6c
 80014c0:	20003e68 	.word	0x20003e68
 80014c4:	20003e70 	.word	0x20003e70

080014c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80014d0:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <prvInsertBlockIntoFreeList+0xac>)
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e002      	b.n	80014dc <prvInsertBlockIntoFreeList+0x14>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d8f7      	bhi.n	80014d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	4413      	add	r3, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d108      	bne.n	800150a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	441a      	add	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	441a      	add	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d118      	bne.n	8001550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <prvInsertBlockIntoFreeList+0xb0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d00d      	beq.n	8001546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	441a      	add	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e008      	b.n	8001558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <prvInsertBlockIntoFreeList+0xb0>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	e003      	b.n	8001558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	d002      	beq.n	8001566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20003e5c 	.word	0x20003e5c
 8001578:	20003e64 	.word	0x20003e64

0800157c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001582:	4b1e      	ldr	r3, [pc, #120]	@ (80015fc <MX_DMA_Init+0x80>)
 8001584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001586:	4a1d      	ldr	r2, [pc, #116]	@ (80015fc <MX_DMA_Init+0x80>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	6493      	str	r3, [r2, #72]	@ 0x48
 800158e:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <MX_DMA_Init+0x80>)
 8001590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159a:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <MX_DMA_Init+0x80>)
 800159c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800159e:	4a17      	ldr	r2, [pc, #92]	@ (80015fc <MX_DMA_Init+0x80>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <MX_DMA_Init+0x80>)
 80015a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2105      	movs	r1, #5
 80015b6:	200c      	movs	r0, #12
 80015b8:	f001 faf2 	bl	8002ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015bc:	200c      	movs	r0, #12
 80015be:	f001 fb09 	bl	8002bd4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2105      	movs	r1, #5
 80015c6:	200d      	movs	r0, #13
 80015c8:	f001 faea 	bl	8002ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015cc:	200d      	movs	r0, #13
 80015ce:	f001 fb01 	bl	8002bd4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2105      	movs	r1, #5
 80015d6:	200e      	movs	r0, #14
 80015d8:	f001 fae2 	bl	8002ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80015dc:	200e      	movs	r0, #14
 80015de:	f001 faf9 	bl	8002bd4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2105      	movs	r1, #5
 80015e6:	2010      	movs	r0, #16
 80015e8:	f001 fada 	bl	8002ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80015ec:	2010      	movs	r0, #16
 80015ee:	f001 faf1 	bl	8002bd4 <HAL_NVIC_EnableIRQ>

}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000

08001600 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b2b      	ldr	r3, [pc, #172]	@ (80016c4 <MX_GPIO_Init+0xc4>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	4a2a      	ldr	r2, [pc, #168]	@ (80016c4 <MX_GPIO_Init+0xc4>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001622:	4b28      	ldr	r3, [pc, #160]	@ (80016c4 <MX_GPIO_Init+0xc4>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800162e:	4b25      	ldr	r3, [pc, #148]	@ (80016c4 <MX_GPIO_Init+0xc4>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	4a24      	ldr	r2, [pc, #144]	@ (80016c4 <MX_GPIO_Init+0xc4>)
 8001634:	f043 0320 	orr.w	r3, r3, #32
 8001638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163a:	4b22      	ldr	r3, [pc, #136]	@ (80016c4 <MX_GPIO_Init+0xc4>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	f003 0320 	and.w	r3, r3, #32
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <MX_GPIO_Init+0xc4>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	4a1e      	ldr	r2, [pc, #120]	@ (80016c4 <MX_GPIO_Init+0xc4>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001652:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <MX_GPIO_Init+0xc4>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <MX_GPIO_Init+0xc4>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	4a18      	ldr	r2, [pc, #96]	@ (80016c4 <MX_GPIO_Init+0xc4>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166a:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <MX_GPIO_Init+0xc4>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	2121      	movs	r1, #33	@ 0x21
 800167a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167e:	f001 ff85 	bl	800358c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001682:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001688:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	480b      	ldr	r0, [pc, #44]	@ (80016c8 <MX_GPIO_Init+0xc8>)
 800169a:	f001 fdf5 	bl	8003288 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RST_Pin|LD2_Pin;
 800169e:	2321      	movs	r3, #33	@ 0x21
 80016a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b8:	f001 fde6 	bl	8003288 <HAL_GPIO_Init>

}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	@ 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40021000 	.word	0x40021000
 80016c8:	48000800 	.word	0x48000800

080016cc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <MX_I2C1_Init+0x74>)
 80016d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001744 <MX_I2C1_Init+0x78>)
 80016d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <MX_I2C1_Init+0x74>)
 80016d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001748 <MX_I2C1_Init+0x7c>)
 80016da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016dc:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <MX_I2C1_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e2:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <MX_I2C1_Init+0x74>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e8:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <MX_I2C1_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <MX_I2C1_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <MX_I2C1_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <MX_I2C1_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <MX_I2C1_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001706:	480e      	ldr	r0, [pc, #56]	@ (8001740 <MX_I2C1_Init+0x74>)
 8001708:	f001 ff72 	bl	80035f0 <HAL_I2C_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001712:	f000 fb97 	bl	8001e44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001716:	2100      	movs	r1, #0
 8001718:	4809      	ldr	r0, [pc, #36]	@ (8001740 <MX_I2C1_Init+0x74>)
 800171a:	f004 f8df 	bl	80058dc <HAL_I2CEx_ConfigAnalogFilter>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001724:	f000 fb8e 	bl	8001e44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001728:	2100      	movs	r1, #0
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <MX_I2C1_Init+0x74>)
 800172c:	f004 f921 	bl	8005972 <HAL_I2CEx_ConfigDigitalFilter>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001736:	f000 fb85 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20003e74 	.word	0x20003e74
 8001744:	40005400 	.word	0x40005400
 8001748:	40621236 	.word	0x40621236

0800174c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b09e      	sub	sp, #120	@ 0x78
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	2254      	movs	r2, #84	@ 0x54
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f017 ff77 	bl	8019660 <memset>
  if(i2cHandle->Instance==I2C1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a50      	ldr	r2, [pc, #320]	@ (80018b8 <HAL_I2C_MspInit+0x16c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	f040 8099 	bne.w	80018b0 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800177e:	2340      	movs	r3, #64	@ 0x40
 8001780:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	4618      	mov	r0, r3
 800178c:	f004 ffb0 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001796:	f000 fb55 	bl	8001e44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	4b48      	ldr	r3, [pc, #288]	@ (80018bc <HAL_I2C_MspInit+0x170>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179e:	4a47      	ldr	r2, [pc, #284]	@ (80018bc <HAL_I2C_MspInit+0x170>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a6:	4b45      	ldr	r3, [pc, #276]	@ (80018bc <HAL_I2C_MspInit+0x170>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b8:	2312      	movs	r3, #18
 80017ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017c4:	2304      	movs	r3, #4
 80017c6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017cc:	4619      	mov	r1, r3
 80017ce:	483c      	ldr	r0, [pc, #240]	@ (80018c0 <HAL_I2C_MspInit+0x174>)
 80017d0:	f001 fd5a 	bl	8003288 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d4:	4b39      	ldr	r3, [pc, #228]	@ (80018bc <HAL_I2C_MspInit+0x170>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d8:	4a38      	ldr	r2, [pc, #224]	@ (80018bc <HAL_I2C_MspInit+0x170>)
 80017da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017de:	6593      	str	r3, [r2, #88]	@ 0x58
 80017e0:	4b36      	ldr	r3, [pc, #216]	@ (80018bc <HAL_I2C_MspInit+0x170>)
 80017e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 80017ec:	4b35      	ldr	r3, [pc, #212]	@ (80018c4 <HAL_I2C_MspInit+0x178>)
 80017ee:	4a36      	ldr	r2, [pc, #216]	@ (80018c8 <HAL_I2C_MspInit+0x17c>)
 80017f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80017f2:	4b34      	ldr	r3, [pc, #208]	@ (80018c4 <HAL_I2C_MspInit+0x178>)
 80017f4:	2211      	movs	r2, #17
 80017f6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017f8:	4b32      	ldr	r3, [pc, #200]	@ (80018c4 <HAL_I2C_MspInit+0x178>)
 80017fa:	2210      	movs	r2, #16
 80017fc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fe:	4b31      	ldr	r3, [pc, #196]	@ (80018c4 <HAL_I2C_MspInit+0x178>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001804:	4b2f      	ldr	r3, [pc, #188]	@ (80018c4 <HAL_I2C_MspInit+0x178>)
 8001806:	2280      	movs	r2, #128	@ 0x80
 8001808:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800180a:	4b2e      	ldr	r3, [pc, #184]	@ (80018c4 <HAL_I2C_MspInit+0x178>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001810:	4b2c      	ldr	r3, [pc, #176]	@ (80018c4 <HAL_I2C_MspInit+0x178>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001816:	4b2b      	ldr	r3, [pc, #172]	@ (80018c4 <HAL_I2C_MspInit+0x178>)
 8001818:	2200      	movs	r2, #0
 800181a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800181c:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <HAL_I2C_MspInit+0x178>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001822:	4828      	ldr	r0, [pc, #160]	@ (80018c4 <HAL_I2C_MspInit+0x178>)
 8001824:	f001 f9e4 	bl	8002bf0 <HAL_DMA_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 800182e:	f000 fb09 	bl	8001e44 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a23      	ldr	r2, [pc, #140]	@ (80018c4 <HAL_I2C_MspInit+0x178>)
 8001836:	639a      	str	r2, [r3, #56]	@ 0x38
 8001838:	4a22      	ldr	r2, [pc, #136]	@ (80018c4 <HAL_I2C_MspInit+0x178>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 800183e:	4b23      	ldr	r3, [pc, #140]	@ (80018cc <HAL_I2C_MspInit+0x180>)
 8001840:	4a23      	ldr	r2, [pc, #140]	@ (80018d0 <HAL_I2C_MspInit+0x184>)
 8001842:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001844:	4b21      	ldr	r3, [pc, #132]	@ (80018cc <HAL_I2C_MspInit+0x180>)
 8001846:	2210      	movs	r2, #16
 8001848:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800184a:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <HAL_I2C_MspInit+0x180>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001850:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <HAL_I2C_MspInit+0x180>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001856:	4b1d      	ldr	r3, [pc, #116]	@ (80018cc <HAL_I2C_MspInit+0x180>)
 8001858:	2280      	movs	r2, #128	@ 0x80
 800185a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800185c:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <HAL_I2C_MspInit+0x180>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <HAL_I2C_MspInit+0x180>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001868:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <HAL_I2C_MspInit+0x180>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800186e:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <HAL_I2C_MspInit+0x180>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001874:	4815      	ldr	r0, [pc, #84]	@ (80018cc <HAL_I2C_MspInit+0x180>)
 8001876:	f001 f9bb 	bl	8002bf0 <HAL_DMA_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8001880:	f000 fae0 	bl	8001e44 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a11      	ldr	r2, [pc, #68]	@ (80018cc <HAL_I2C_MspInit+0x180>)
 8001888:	63da      	str	r2, [r3, #60]	@ 0x3c
 800188a:	4a10      	ldr	r2, [pc, #64]	@ (80018cc <HAL_I2C_MspInit+0x180>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2105      	movs	r1, #5
 8001894:	201f      	movs	r0, #31
 8001896:	f001 f983 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800189a:	201f      	movs	r0, #31
 800189c:	f001 f99a 	bl	8002bd4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2105      	movs	r1, #5
 80018a4:	2020      	movs	r0, #32
 80018a6:	f001 f97b 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80018aa:	2020      	movs	r0, #32
 80018ac:	f001 f992 	bl	8002bd4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018b0:	bf00      	nop
 80018b2:	3778      	adds	r7, #120	@ 0x78
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40005400 	.word	0x40005400
 80018bc:	40021000 	.word	0x40021000
 80018c0:	48000400 	.word	0x48000400
 80018c4:	20003ec8 	.word	0x20003ec8
 80018c8:	40020030 	.word	0x40020030
 80018cc:	20003f28 	.word	0x20003f28
 80018d0:	40020044 	.word	0x40020044

080018d4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <MX_IWDG_Init+0x34>)
 80018da:	4a0c      	ldr	r2, [pc, #48]	@ (800190c <MX_IWDG_Init+0x38>)
 80018dc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80018de:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <MX_IWDG_Init+0x34>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80018e4:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <MX_IWDG_Init+0x34>)
 80018e6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80018ea:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <MX_IWDG_Init+0x34>)
 80018ee:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80018f2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80018f4:	4804      	ldr	r0, [pc, #16]	@ (8001908 <MX_IWDG_Init+0x34>)
 80018f6:	f004 f888 	bl	8005a0a <HAL_IWDG_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001900:	f000 faa0 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20003f88 	.word	0x20003f88
 800190c:	40003000 	.word	0x40003000

08001910 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001914:	f001 f833 	bl	800297e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001918:	f000 f832 	bl	8001980 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800191c:	f7ff fe70 	bl	8001600 <MX_GPIO_Init>
	MX_DMA_Init();
 8001920:	f7ff fe2c 	bl	800157c <MX_DMA_Init>
	MX_IWDG_Init();
 8001924:	f7ff ffd6 	bl	80018d4 <MX_IWDG_Init>
	MX_I2C1_Init();
 8001928:	f7ff fed0 	bl	80016cc <MX_I2C1_Init>
	MX_TIM2_Init();
 800192c:	f000 fdd8 	bl	80024e0 <MX_TIM2_Init>
	MX_LPUART1_UART_Init();
 8001930:	f000 fe48 	bl	80025c4 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	if (BNO055_Init(&bno, &hi2c1, 0) != HAL_OK) {
 8001934:	2200      	movs	r2, #0
 8001936:	490e      	ldr	r1, [pc, #56]	@ (8001970 <main+0x60>)
 8001938:	480e      	ldr	r0, [pc, #56]	@ (8001974 <main+0x64>)
 800193a:	f7ff f8b4 	bl	8000aa6 <BNO055_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <main+0x38>
		Error_Handler();
 8001944:	f000 fa7e 	bl	8001e44 <Error_Handler>
	}

	BNO055_LoadCalibration(&bno, &saved_calib);
 8001948:	490b      	ldr	r1, [pc, #44]	@ (8001978 <main+0x68>)
 800194a:	480a      	ldr	r0, [pc, #40]	@ (8001974 <main+0x64>)
 800194c:	f7ff f950 	bl	8000bf0 <BNO055_LoadCalibration>

	BNO055_SetAxisRemap(&bno, 0x24, 0x06);
 8001950:	2206      	movs	r2, #6
 8001952:	2124      	movs	r1, #36	@ 0x24
 8001954:	4807      	ldr	r0, [pc, #28]	@ (8001974 <main+0x64>)
 8001956:	f7ff f922 	bl	8000b9e <BNO055_SetAxisRemap>

	HAL_TIM_Base_Start_IT(&htim2);
 800195a:	4808      	ldr	r0, [pc, #32]	@ (800197c <main+0x6c>)
 800195c:	f005 f96e 	bl	8006c3c <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in cmsis_os2.c) */
 8001960:	f007 fcc6 	bl	80092f0 <osKernelInitialize>
	MX_FREERTOS_Init();
 8001964:	f7ff fba8 	bl	80010b8 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001968:	f007 fce6 	bl	8009338 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <main+0x5c>
 8001970:	20003e74 	.word	0x20003e74
 8001974:	20004104 	.word	0x20004104
 8001978:	0801a53c 	.word	0x0801a53c
 800197c:	200041e0 	.word	0x200041e0

08001980 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b094      	sub	sp, #80	@ 0x50
 8001984:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001986:	f107 0318 	add.w	r3, r7, #24
 800198a:	2238      	movs	r2, #56	@ 0x38
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f017 fe66 	bl	8019660 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f004 f890 	bl	8005ac8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80019a8:	230a      	movs	r3, #10
 80019aa:	61bb      	str	r3, [r7, #24]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b2:	2340      	movs	r3, #64	@ 0x40
 80019b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019b6:	2301      	movs	r3, #1
 80019b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ba:	2302      	movs	r3, #2
 80019bc:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019be:	2302      	movs	r3, #2
 80019c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80019c2:	2304      	movs	r3, #4
 80019c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80019c6:	2355      	movs	r3, #85	@ 0x55
 80019c8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ca:	2302      	movs	r3, #2
 80019cc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019d2:	2302      	movs	r3, #2
 80019d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019d6:	f107 0318 	add.w	r3, r7, #24
 80019da:	4618      	mov	r0, r3
 80019dc:	f004 f928 	bl	8005c30 <HAL_RCC_OscConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <SystemClock_Config+0x6a>
		Error_Handler();
 80019e6:	f000 fa2d 	bl	8001e44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80019ea:	230f      	movs	r3, #15
 80019ec:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ee:	2303      	movs	r3, #3
 80019f0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2104      	movs	r1, #4
 8001a02:	4618      	mov	r0, r3
 8001a04:	f004 fc26 	bl	8006254 <HAL_RCC_ClockConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <SystemClock_Config+0x92>
		Error_Handler();
 8001a0e:	f000 fa19 	bl	8001e44 <Error_Handler>
	}
}
 8001a12:	bf00      	nop
 8001a14:	3750      	adds	r7, #80	@ 0x50
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <timer_callback>:

/* USER CODE BEGIN 4 */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	e9c7 2300 	strd	r2, r3, [r7]
	static uint8_t cnt = 0;
	if (timer != NULL) {
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d02c      	beq.n	8001a88 <timer_callback+0x6c>

		if (cnt == 0)
 8001a2e:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <timer_callback+0x74>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d104      	bne.n	8001a40 <timer_callback+0x24>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a36:	2120      	movs	r1, #32
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a3c:	f001 fdbe 	bl	80035bc <HAL_GPIO_TogglePin>
		cnt = (cnt + 1) % 50;
 8001a40:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <timer_callback+0x74>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	3301      	adds	r3, #1
 8001a46:	4a13      	ldr	r2, [pc, #76]	@ (8001a94 <timer_callback+0x78>)
 8001a48:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4c:	1111      	asrs	r1, r2, #4
 8001a4e:	17da      	asrs	r2, r3, #31
 8001a50:	1a8a      	subs	r2, r1, r2
 8001a52:	2132      	movs	r1, #50	@ 0x32
 8001a54:	fb01 f202 	mul.w	r2, r1, r2
 8001a58:	1a9a      	subs	r2, r3, r2
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <timer_callback+0x74>)
 8001a5e:	701a      	strb	r2, [r3, #0]

		if (sync++ >= 255) {  // Sync session at lower frequency
 8001a60:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <timer_callback+0x7c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	b2d1      	uxtb	r1, r2
 8001a68:	4a0b      	ldr	r2, [pc, #44]	@ (8001a98 <timer_callback+0x7c>)
 8001a6a:	7011      	strb	r1, [r2, #0]
 8001a6c:	2bff      	cmp	r3, #255	@ 0xff
 8001a6e:	d106      	bne.n	8001a7e <timer_callback+0x62>
			rmw_uros_sync_session(1000);
 8001a70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a74:	f00c f9fa 	bl	800de6c <rmw_uros_sync_session>
			sync = 0;
 8001a78:	4b07      	ldr	r3, [pc, #28]	@ (8001a98 <timer_callback+0x7c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
		}

		SensorsPublished();
 8001a7e:	f000 f80f 	bl	8001aa0 <SensorsPublished>
		HAL_IWDG_Refresh(&hiwdg);
 8001a82:	4806      	ldr	r0, [pc, #24]	@ (8001a9c <timer_callback+0x80>)
 8001a84:	f004 f810 	bl	8005aa8 <HAL_IWDG_Refresh>
	}

}
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20004180 	.word	0x20004180
 8001a94:	51eb851f 	.word	0x51eb851f
 8001a98:	20004100 	.word	0x20004100
 8001a9c:	20003f88 	.word	0x20003f88

08001aa0 <SensorsPublished>:

void SensorsPublished() {
 8001aa0:	b598      	push	{r3, r4, r7, lr}
 8001aa2:	af00      	add	r7, sp, #0

	// quaternion
	f64array_msg.data.data[0] = bno.quat.x;
 8001aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa8:	4a6a      	ldr	r2, [pc, #424]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001aaa:	6914      	ldr	r4, [r2, #16]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd83 	bl	80005b8 <__aeabi_f2d>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	e9c4 2300 	strd	r2, r3, [r4]
	f64array_msg.data.data[1] = bno.quat.y;
 8001aba:	4b65      	ldr	r3, [pc, #404]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001abc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001abe:	4b65      	ldr	r3, [pc, #404]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f103 0408 	add.w	r4, r3, #8
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f7fe fd76 	bl	80005b8 <__aeabi_f2d>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	e9c4 2300 	strd	r2, r3, [r4]
	f64array_msg.data.data[2] = bno.quat.z;
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001ad6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f103 0410 	add.w	r4, r3, #16
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f7fe fd69 	bl	80005b8 <__aeabi_f2d>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	e9c4 2300 	strd	r2, r3, [r4]
	f64array_msg.data.data[3] = bno.quat.w;
 8001aee:	4b58      	ldr	r3, [pc, #352]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001af2:	4b58      	ldr	r3, [pc, #352]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f103 0418 	add.w	r4, r3, #24
 8001afa:	4610      	mov	r0, r2
 8001afc:	f7fe fd5c 	bl	80005b8 <__aeabi_f2d>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	e9c4 2300 	strd	r2, r3, [r4]

	//  acceleration
	f64array_msg.data.data[4] = bno.accel.x;
 8001b08:	4b51      	ldr	r3, [pc, #324]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b51      	ldr	r3, [pc, #324]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	f103 0420 	add.w	r4, r3, #32
 8001b14:	4610      	mov	r0, r2
 8001b16:	f7fe fd4f 	bl	80005b8 <__aeabi_f2d>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	e9c4 2300 	strd	r2, r3, [r4]
	f64array_msg.data.data[5] = bno.accel.y;
 8001b22:	4b4b      	ldr	r3, [pc, #300]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	4b4b      	ldr	r3, [pc, #300]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f7fe fd42 	bl	80005b8 <__aeabi_f2d>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	e9c4 2300 	strd	r2, r3, [r4]
	f64array_msg.data.data[6] = bno.accel.z;
 8001b3c:	4b44      	ldr	r3, [pc, #272]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	4b44      	ldr	r3, [pc, #272]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8001b48:	4610      	mov	r0, r2
 8001b4a:	f7fe fd35 	bl	80005b8 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	e9c4 2300 	strd	r2, r3, [r4]

	// gyro (angular velocity)
	f64array_msg.data.data[7] = bno.gyro.x;
 8001b56:	4b3e      	ldr	r3, [pc, #248]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8001b62:	4610      	mov	r0, r2
 8001b64:	f7fe fd28 	bl	80005b8 <__aeabi_f2d>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	e9c4 2300 	strd	r2, r3, [r4]
	f64array_msg.data.data[8] = bno.gyro.y;
 8001b70:	4b37      	ldr	r3, [pc, #220]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001b72:	699a      	ldr	r2, [r3, #24]
 8001b74:	4b37      	ldr	r3, [pc, #220]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	f7fe fd1b 	bl	80005b8 <__aeabi_f2d>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	e9c4 2300 	strd	r2, r3, [r4]
	f64array_msg.data.data[9] = bno.gyro.z;
 8001b8a:	4b31      	ldr	r3, [pc, #196]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001b8c:	69da      	ldr	r2, [r3, #28]
 8001b8e:	4b31      	ldr	r3, [pc, #196]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8001b96:	4610      	mov	r0, r2
 8001b98:	f7fe fd0e 	bl	80005b8 <__aeabi_f2d>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	e9c4 2300 	strd	r2, r3, [r4]

	// magnetometer
	f64array_msg.data.data[10] = bno.mag.x;
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001ba6:	6a1a      	ldr	r2, [r3, #32]
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	f7fe fd01 	bl	80005b8 <__aeabi_f2d>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	e9c4 2300 	strd	r2, r3, [r4]
	f64array_msg.data.data[11] = bno.mag.y;
 8001bbe:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001bc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bc2:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f7fe fcf4 	bl	80005b8 <__aeabi_f2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	e9c4 2300 	strd	r2, r3, [r4]
	f64array_msg.data.data[12] = bno.mag.z;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001bda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 8001be4:	4610      	mov	r0, r2
 8001be6:	f7fe fce7 	bl	80005b8 <__aeabi_f2d>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	e9c4 2300 	strd	r2, r3, [r4]

	// euler angles
	f64array_msg.data.data[13] = bno.euler.roll;
 8001bf2:	4b17      	ldr	r3, [pc, #92]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bf6:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f103 0468 	add.w	r4, r3, #104	@ 0x68
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f7fe fcda 	bl	80005b8 <__aeabi_f2d>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	e9c4 2300 	strd	r2, r3, [r4]
	f64array_msg.data.data[14] = bno.euler.pitch;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001c0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c10:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	f103 0470 	add.w	r4, r3, #112	@ 0x70
 8001c18:	4610      	mov	r0, r2
 8001c1a:	f7fe fccd 	bl	80005b8 <__aeabi_f2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	e9c4 2300 	strd	r2, r3, [r4]
	f64array_msg.data.data[15] = bno.euler.yaw;
 8001c26:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <SensorsPublished+0x1b0>)
 8001c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8001c32:	4610      	mov	r0, r2
 8001c34:	f7fe fcc0 	bl	80005b8 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	e9c4 2300 	strd	r2, r3, [r4]

	RCCHECK(rcl_publish(&f64array_pub, &f64array_msg, NULL));
 8001c40:	2200      	movs	r2, #0
 8001c42:	4904      	ldr	r1, [pc, #16]	@ (8001c54 <SensorsPublished+0x1b4>)
 8001c44:	4804      	ldr	r0, [pc, #16]	@ (8001c58 <SensorsPublished+0x1b8>)
 8001c46:	f00a facf 	bl	800c1e8 <rcl_publish>

}
 8001c4a:	bf00      	nop
 8001c4c:	bd98      	pop	{r3, r4, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20004104 	.word	0x20004104
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20004078 	.word	0x20004078

08001c5c <StartDefaultTask>:
void StartDefaultTask(void *argument) {
 8001c5c:	b5b0      	push	{r4, r5, r7, lr}
 8001c5e:	b0b2      	sub	sp, #200	@ 0xc8
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 8001c66:	4b46      	ldr	r3, [pc, #280]	@ (8001d80 <StartDefaultTask+0x124>)
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	4b46      	ldr	r3, [pc, #280]	@ (8001d84 <StartDefaultTask+0x128>)
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	4b46      	ldr	r3, [pc, #280]	@ (8001d88 <StartDefaultTask+0x12c>)
 8001c70:	4a46      	ldr	r2, [pc, #280]	@ (8001d8c <StartDefaultTask+0x130>)
 8001c72:	4947      	ldr	r1, [pc, #284]	@ (8001d90 <StartDefaultTask+0x134>)
 8001c74:	2001      	movs	r0, #1
 8001c76:	f00b fad7 	bl	800d228 <rmw_uros_set_custom_transport>
	true, (void*) &hlpuart1, cubemx_transport_open, cubemx_transport_close,
			cubemx_transport_write, cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 8001c7a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00b f9ee 	bl	800d060 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001c84:	4b43      	ldr	r3, [pc, #268]	@ (8001d94 <StartDefaultTask+0x138>)
 8001c86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001c8a:	4b43      	ldr	r3, [pc, #268]	@ (8001d98 <StartDefaultTask+0x13c>)
 8001c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001c90:	4b42      	ldr	r3, [pc, #264]	@ (8001d9c <StartDefaultTask+0x140>)
 8001c92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001c96:	4b42      	ldr	r3, [pc, #264]	@ (8001da0 <StartDefaultTask+0x144>)
 8001c98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001c9c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f00b f9eb 	bl	800d07c <rcutils_set_default_allocator>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f083 0301 	eor.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <StartDefaultTask+0x60>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8001cb2:	f240 111b 	movw	r1, #283	@ 0x11b
 8001cb6:	483b      	ldr	r0, [pc, #236]	@ (8001da4 <StartDefaultTask+0x148>)
 8001cb8:	f017 fb4c 	bl	8019354 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 8001cbc:	4c3a      	ldr	r4, [pc, #232]	@ (8001da8 <StartDefaultTask+0x14c>)
 8001cbe:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f00b f9f8 	bl	800d0b8 <rcutils_get_default_allocator>
 8001cc8:	4625      	mov	r5, r4
 8001cca:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	602b      	str	r3, [r5, #0]

	init_options = rcl_get_zero_initialized_init_options();
 8001cd6:	f00a f8b7 	bl	800be48 <rcl_get_zero_initialized_init_options>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4a33      	ldr	r2, [pc, #204]	@ (8001dac <StartDefaultTask+0x150>)
 8001cde:	6013      	str	r3, [r2, #0]
	RCCHECK(rcl_init_options_init(&init_options, allocator));
 8001ce0:	4b31      	ldr	r3, [pc, #196]	@ (8001da8 <StartDefaultTask+0x14c>)
 8001ce2:	466c      	mov	r4, sp
 8001ce4:	f103 020c 	add.w	r2, r3, #12
 8001ce8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cec:	e884 0003 	stmia.w	r4, {r0, r1}
 8001cf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf2:	482e      	ldr	r0, [pc, #184]	@ (8001dac <StartDefaultTask+0x150>)
 8001cf4:	f00a f8aa 	bl	800be4c <rcl_init_options_init>
	RCCHECK(rcl_init_options_set_domain_id(&init_options, 124));
 8001cf8:	217c      	movs	r1, #124	@ 0x7c
 8001cfa:	482c      	ldr	r0, [pc, #176]	@ (8001dac <StartDefaultTask+0x150>)
 8001cfc:	f00a f9a2 	bl	800c044 <rcl_init_options_set_domain_id>

	rclc_support_init_with_options(&support, 0, NULL, &init_options,
 8001d00:	4b29      	ldr	r3, [pc, #164]	@ (8001da8 <StartDefaultTask+0x14c>)
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	4b29      	ldr	r3, [pc, #164]	@ (8001dac <StartDefaultTask+0x150>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4829      	ldr	r0, [pc, #164]	@ (8001db0 <StartDefaultTask+0x154>)
 8001d0c:	f00b f8cc 	bl	800cea8 <rclc_support_init_with_options>
			&allocator);

	rclc_node_init_default(&node, "bno055_publisher", "", &support);
 8001d10:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <StartDefaultTask+0x154>)
 8001d12:	4a28      	ldr	r2, [pc, #160]	@ (8001db4 <StartDefaultTask+0x158>)
 8001d14:	4928      	ldr	r1, [pc, #160]	@ (8001db8 <StartDefaultTask+0x15c>)
 8001d16:	4829      	ldr	r0, [pc, #164]	@ (8001dbc <StartDefaultTask+0x160>)
 8001d18:	f00b f8fa 	bl	800cf10 <rclc_node_init_default>

	rclc_publisher_init_best_effort(&f64array_pub, &node,
 8001d1c:	f00c fc28 	bl	800e570 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b27      	ldr	r3, [pc, #156]	@ (8001dc0 <StartDefaultTask+0x164>)
 8001d24:	4925      	ldr	r1, [pc, #148]	@ (8001dbc <StartDefaultTask+0x160>)
 8001d26:	4827      	ldr	r0, [pc, #156]	@ (8001dc4 <StartDefaultTask+0x168>)
 8001d28:	f00b f92e 	bl	800cf88 <rclc_publisher_init_best_effort>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"bno055_data");

	executor = rclc_executor_get_zero_initialized_executor();
 8001d2c:	4c26      	ldr	r4, [pc, #152]	@ (8001dc8 <StartDefaultTask+0x16c>)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	4618      	mov	r0, r3
 8001d32:	f00a fde7 	bl	800c904 <rclc_executor_get_zero_initialized_executor>
 8001d36:	4620      	mov	r0, r4
 8001d38:	463b      	mov	r3, r7
 8001d3a:	2288      	movs	r2, #136	@ 0x88
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f017 fd58 	bl	80197f2 <memcpy>
	rmw_uros_sync_session(1000);
 8001d42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d46:	f00c f891 	bl	800de6c <rmw_uros_sync_session>

	rclc_timer_init_default(&timer_, &support, RCL_MS_TO_NS(10),
 8001d4a:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <StartDefaultTask+0x170>)
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	4a20      	ldr	r2, [pc, #128]	@ (8001dd0 <StartDefaultTask+0x174>)
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	4916      	ldr	r1, [pc, #88]	@ (8001db0 <StartDefaultTask+0x154>)
 8001d56:	481f      	ldr	r0, [pc, #124]	@ (8001dd4 <StartDefaultTask+0x178>)
 8001d58:	f00b f94a 	bl	800cff0 <rclc_timer_init_default>
			timer_callback);

	rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <StartDefaultTask+0x14c>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4913      	ldr	r1, [pc, #76]	@ (8001db0 <StartDefaultTask+0x154>)
 8001d62:	4819      	ldr	r0, [pc, #100]	@ (8001dc8 <StartDefaultTask+0x16c>)
 8001d64:	f00a fdd8 	bl	800c918 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer_);
 8001d68:	491a      	ldr	r1, [pc, #104]	@ (8001dd4 <StartDefaultTask+0x178>)
 8001d6a:	4817      	ldr	r0, [pc, #92]	@ (8001dc8 <StartDefaultTask+0x16c>)
 8001d6c:	f00a fe44 	bl	800c9f8 <rclc_executor_add_timer>
	rclc_executor_spin(&executor);
 8001d70:	4815      	ldr	r0, [pc, #84]	@ (8001dc8 <StartDefaultTask+0x16c>)
 8001d72:	f00b f857 	bl	800ce24 <rclc_executor_spin>
}
 8001d76:	bf00      	nop
 8001d78:	37c0      	adds	r7, #192	@ 0xc0
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	08002885 	.word	0x08002885
 8001d84:	08002821 	.word	0x08002821
 8001d88:	08002801 	.word	0x08002801
 8001d8c:	080027d5 	.word	0x080027d5
 8001d90:	2000422c 	.word	0x2000422c
 8001d94:	08001e51 	.word	0x08001e51
 8001d98:	08001e95 	.word	0x08001e95
 8001d9c:	08001ecd 	.word	0x08001ecd
 8001da0:	08001f39 	.word	0x08001f39
 8001da4:	0801a494 	.word	0x0801a494
 8001da8:	20003fcc 	.word	0x20003fcc
 8001dac:	20003fe8 	.word	0x20003fe8
 8001db0:	20003f98 	.word	0x20003f98
 8001db4:	0801a4bc 	.word	0x0801a4bc
 8001db8:	0801a4c0 	.word	0x0801a4c0
 8001dbc:	20003fe0 	.word	0x20003fe0
 8001dc0:	0801a4d4 	.word	0x0801a4d4
 8001dc4:	20004078 	.word	0x20004078
 8001dc8:	20003ff0 	.word	0x20003ff0
 8001dcc:	08001a1d 	.word	0x08001a1d
 8001dd0:	00989680 	.word	0x00989680
 8001dd4:	20003fec 	.word	0x20003fec

08001dd8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) {
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a05      	ldr	r2, [pc, #20]	@ (8001df8 <HAL_I2C_MemRxCpltCallback+0x20>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d102      	bne.n	8001dee <HAL_I2C_MemRxCpltCallback+0x16>
		BNO055_ProcessDMA(&bno);
 8001de8:	4804      	ldr	r0, [pc, #16]	@ (8001dfc <HAL_I2C_MemRxCpltCallback+0x24>)
 8001dea:	f7fe ffd5 	bl	8000d98 <BNO055_ProcessDMA>
		 * bno.euler.pitch     - Pitch in radians (CCW positive)
		 * bno.quat.w/x/y/z    - Quaternion (absolute orientation)
		 * bno.is_calibrated   - True if absolute orientation valid
		 */
	}
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20003e74 	.word	0x20003e74
 8001dfc:	20004104 	.word	0x20004104

08001e00 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001e12:	f000 fdcd 	bl	80029b0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
    if (htim == &htim2) {
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a08      	ldr	r2, [pc, #32]	@ (8001e3c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d108      	bne.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0x30>
        if (bno.dma_ready) {
 8001e1e:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001e20:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0x30>
            BNO055_UpdateDMA(&bno);
 8001e2a:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001e2c:	f7fe ff8e 	bl	8000d4c <BNO055_UpdateDMA>
        }
    }
	/* USER CODE END Callback 1 */
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40012c00 	.word	0x40012c00
 8001e3c:	200041e0 	.word	0x200041e0
 8001e40:	20004104 	.word	0x20004104

08001e44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e48:	b672      	cpsid	i
}
 8001e4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <Error_Handler+0x8>

08001e50 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <microros_allocate+0x3c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <microros_allocate+0x3c>)
 8001e68:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <microros_allocate+0x40>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <microros_allocate+0x40>)
 8001e78:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff f92e 	bl	80010dc <pvPortMallocMicroROS>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20004184 	.word	0x20004184
 8001e90:	20004188 	.word	0x20004188

08001e94 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00c      	beq.n	8001ebe <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fa3d 	bl	8001324 <getBlockSize>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a06      	ldr	r2, [pc, #24]	@ (8001ec8 <microros_deallocate+0x34>)
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <microros_deallocate+0x34>)
 8001eb6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff f9d7 	bl	800126c <vPortFreeMicroROS>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20004188 	.word	0x20004188

08001ecc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <microros_reallocate+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <microros_reallocate+0x64>)
 8001ee6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <microros_reallocate+0x68>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <microros_reallocate+0x68>)
 8001ef6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d104      	bne.n	8001f08 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001efe:	68b8      	ldr	r0, [r7, #8]
 8001f00:	f7ff f8ec 	bl	80010dc <pvPortMallocMicroROS>
 8001f04:	4603      	mov	r3, r0
 8001f06:	e00e      	b.n	8001f26 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f7ff fa0b 	bl	8001324 <getBlockSize>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a08      	ldr	r2, [pc, #32]	@ (8001f34 <microros_reallocate+0x68>)
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <microros_reallocate+0x68>)
 8001f1a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff fa1e 	bl	8001360 <pvPortReallocMicroROS>
 8001f24:	4603      	mov	r3, r0
  }
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20004184 	.word	0x20004184
 8001f34:	20004188 	.word	0x20004188

08001f38 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f80 <microros_zero_allocate+0x48>)
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	4413      	add	r3, r2
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <microros_zero_allocate+0x48>)
 8001f56:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	4a08      	ldr	r2, [pc, #32]	@ (8001f84 <microros_zero_allocate+0x4c>)
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <microros_zero_allocate+0x4c>)
 8001f6a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7ff fa23 	bl	80013ba <pvPortCallocMicroROS>
 8001f74:	4603      	mov	r3, r0
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20004184 	.word	0x20004184
 8001f84:	20004188 	.word	0x20004188

08001f88 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001f88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001f9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f9e:	a320      	add	r3, pc, #128	@ (adr r3, 8002020 <UTILS_NanosecondsToTimespec+0x98>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe fb60 	bl	8000668 <__aeabi_ldivmod>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fb6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002020 <UTILS_NanosecondsToTimespec+0x98>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fb54 	bl	8000668 <__aeabi_ldivmod>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	da20      	bge.n	800200e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4a11      	ldr	r2, [pc, #68]	@ (8002018 <UTILS_NanosecondsToTimespec+0x90>)
 8001fd2:	fb82 1203 	smull	r1, r2, r2, r3
 8001fd6:	1712      	asrs	r2, r2, #28
 8001fd8:	17db      	asrs	r3, r3, #31
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	6979      	ldr	r1, [r7, #20]
 8001fe8:	17c8      	asrs	r0, r1, #31
 8001fea:	460c      	mov	r4, r1
 8001fec:	4605      	mov	r5, r0
 8001fee:	ebb2 0804 	subs.w	r8, r2, r4
 8001ff2:	eb63 0905 	sbc.w	r9, r3, r5
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	4906      	ldr	r1, [pc, #24]	@ (800201c <UTILS_NanosecondsToTimespec+0x94>)
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	441a      	add	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	609a      	str	r2, [r3, #8]
    }
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002018:	44b82fa1 	.word	0x44b82fa1
 800201c:	3b9aca00 	.word	0x3b9aca00
 8002020:	3b9aca00 	.word	0x3b9aca00
 8002024:	00000000 	.word	0x00000000

08002028 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800202c:	b08e      	sub	sp, #56	@ 0x38
 800202e:	af00      	add	r7, sp, #0
 8002030:	6278      	str	r0, [r7, #36]	@ 0x24
 8002032:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002034:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002038:	2300      	movs	r3, #0
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800204a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800204e:	4618      	mov	r0, r3
 8002050:	f008 fcf6 	bl	800aa40 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002056:	17da      	asrs	r2, r3, #31
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	61fa      	str	r2, [r7, #28]
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	69b9      	ldr	r1, [r7, #24]
 8002066:	000b      	movs	r3, r1
 8002068:	2200      	movs	r2, #0
 800206a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800206e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002070:	2200      	movs	r2, #0
 8002072:	461c      	mov	r4, r3
 8002074:	4615      	mov	r5, r2
 8002076:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800207a:	1911      	adds	r1, r2, r4
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	416b      	adcs	r3, r5
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002086:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800208a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	f04f 0400 	mov.w	r4, #0
 8002096:	f04f 0500 	mov.w	r5, #0
 800209a:	015d      	lsls	r5, r3, #5
 800209c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80020a0:	0154      	lsls	r4, r2, #5
 80020a2:	4622      	mov	r2, r4
 80020a4:	462b      	mov	r3, r5
 80020a6:	ebb2 0800 	subs.w	r8, r2, r0
 80020aa:	eb63 0901 	sbc.w	r9, r3, r1
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80020ba:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80020be:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80020c2:	4690      	mov	r8, r2
 80020c4:	4699      	mov	r9, r3
 80020c6:	eb18 0a00 	adds.w	sl, r8, r0
 80020ca:	eb49 0b01 	adc.w	fp, r9, r1
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020da:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020de:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020e2:	ebb2 040a 	subs.w	r4, r2, sl
 80020e6:	603c      	str	r4, [r7, #0]
 80020e8:	eb63 030b 	sbc.w	r3, r3, fp
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020f2:	4623      	mov	r3, r4
 80020f4:	181b      	adds	r3, r3, r0
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	462b      	mov	r3, r5
 80020fa:	eb41 0303 	adc.w	r3, r1, r3
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002106:	f7ff ff3f 	bl	8001f88 <UTILS_NanosecondsToTimespec>

    return 0;
 800210a:	2300      	movs	r3, #0
 800210c:	4618      	mov	r0, r3
 800210e:	3738      	adds	r7, #56	@ 0x38
 8002110:	46bd      	mov	sp, r7
 8002112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_MspInit+0x50>)
 8002120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002122:	4a11      	ldr	r2, [pc, #68]	@ (8002168 <HAL_MspInit+0x50>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6613      	str	r3, [r2, #96]	@ 0x60
 800212a:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <HAL_MspInit+0x50>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <HAL_MspInit+0x50>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	4a0b      	ldr	r2, [pc, #44]	@ (8002168 <HAL_MspInit+0x50>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002140:	6593      	str	r3, [r2, #88]	@ 0x58
 8002142:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <HAL_MspInit+0x50>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	210f      	movs	r1, #15
 8002152:	f06f 0001 	mvn.w	r0, #1
 8002156:	f000 fd23 	bl	8002ba0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800215a:	f003 fd59 	bl	8005c10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000

0800216c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	@ 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800217c:	4b2c      	ldr	r3, [pc, #176]	@ (8002230 <HAL_InitTick+0xc4>)
 800217e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002180:	4a2b      	ldr	r2, [pc, #172]	@ (8002230 <HAL_InitTick+0xc4>)
 8002182:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002186:	6613      	str	r3, [r2, #96]	@ 0x60
 8002188:	4b29      	ldr	r3, [pc, #164]	@ (8002230 <HAL_InitTick+0xc4>)
 800218a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002194:	f107 020c 	add.w	r2, r7, #12
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 fa2e 	bl	8006600 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80021a4:	f004 fa16 	bl	80065d4 <HAL_RCC_GetPCLK2Freq>
 80021a8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ac:	4a21      	ldr	r2, [pc, #132]	@ (8002234 <HAL_InitTick+0xc8>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	0c9b      	lsrs	r3, r3, #18
 80021b4:	3b01      	subs	r3, #1
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002238 <HAL_InitTick+0xcc>)
 80021ba:	4a20      	ldr	r2, [pc, #128]	@ (800223c <HAL_InitTick+0xd0>)
 80021bc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80021be:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <HAL_InitTick+0xcc>)
 80021c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80021c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002238 <HAL_InitTick+0xcc>)
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80021cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <HAL_InitTick+0xcc>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d2:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <HAL_InitTick+0xcc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80021d8:	4817      	ldr	r0, [pc, #92]	@ (8002238 <HAL_InitTick+0xcc>)
 80021da:	f004 fcd7 	bl	8006b8c <HAL_TIM_Base_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80021e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d11b      	bne.n	8002224 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80021ec:	4812      	ldr	r0, [pc, #72]	@ (8002238 <HAL_InitTick+0xcc>)
 80021ee:	f004 fd25 	bl	8006c3c <HAL_TIM_Base_Start_IT>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80021f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d111      	bne.n	8002224 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002200:	2019      	movs	r0, #25
 8002202:	f000 fce7 	bl	8002bd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b0f      	cmp	r3, #15
 800220a:	d808      	bhi.n	800221e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800220c:	2200      	movs	r2, #0
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	2019      	movs	r0, #25
 8002212:	f000 fcc5 	bl	8002ba0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002216:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <HAL_InitTick+0xd4>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	e002      	b.n	8002224 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002224:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002228:	4618      	mov	r0, r3
 800222a:	3730      	adds	r7, #48	@ 0x30
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	431bde83 	.word	0x431bde83
 8002238:	2000418c 	.word	0x2000418c
 800223c:	40012c00 	.word	0x40012c00
 8002240:	20000024 	.word	0x20000024

08002244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <NMI_Handler+0x4>

0800224c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <HardFault_Handler+0x4>

08002254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <MemManage_Handler+0x4>

0800225c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <BusFault_Handler+0x4>

08002264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <UsageFault_Handler+0x4>

0800226c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002280:	4802      	ldr	r0, [pc, #8]	@ (800228c <DMA1_Channel2_IRQHandler+0x10>)
 8002282:	f000 fe98 	bl	8002fb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200042c0 	.word	0x200042c0

08002290 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <DMA1_Channel3_IRQHandler+0x10>)
 8002296:	f000 fe8e 	bl	8002fb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20003ec8 	.word	0x20003ec8

080022a4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80022a8:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <DMA1_Channel4_IRQHandler+0x10>)
 80022aa:	f000 fe84 	bl	8002fb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20003f28 	.word	0x20003f28

080022b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80022bc:	4802      	ldr	r0, [pc, #8]	@ (80022c8 <DMA1_Channel6_IRQHandler+0x10>)
 80022be:	f000 fe7a 	bl	8002fb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20004320 	.word	0x20004320

080022cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d0:	4802      	ldr	r0, [pc, #8]	@ (80022dc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80022d2:	f004 fd2b 	bl	8006d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000418c 	.word	0x2000418c

080022e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022e4:	4802      	ldr	r0, [pc, #8]	@ (80022f0 <TIM2_IRQHandler+0x10>)
 80022e6:	f004 fd21 	bl	8006d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200041e0 	.word	0x200041e0

080022f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <I2C1_EV_IRQHandler+0x10>)
 80022fa:	f001 fd29 	bl	8003d50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20003e74 	.word	0x20003e74

08002308 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <I2C1_ER_IRQHandler+0x10>)
 800230e:	f001 fd39 	bl	8003d84 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20003e74 	.word	0x20003e74

0800231c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002320:	4802      	ldr	r0, [pc, #8]	@ (800232c <LPUART1_IRQHandler+0x10>)
 8002322:	f005 fb6f 	bl	8007a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	2000422c 	.word	0x2000422c

08002330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return 1;
 8002334:	2301      	movs	r3, #1
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_kill>:

int _kill(int pid, int sig)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800234a:	f017 fa1d 	bl	8019788 <__errno>
 800234e:	4603      	mov	r3, r0
 8002350:	2216      	movs	r2, #22
 8002352:	601a      	str	r2, [r3, #0]
  return -1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_exit>:

void _exit (int status)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002368:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ffe7 	bl	8002340 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002372:	bf00      	nop
 8002374:	e7fd      	b.n	8002372 <_exit+0x12>

08002376 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e00a      	b.n	800239e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002388:	f3af 8000 	nop.w
 800238c:	4601      	mov	r1, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	60ba      	str	r2, [r7, #8]
 8002394:	b2ca      	uxtb	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	dbf0      	blt.n	8002388 <_read+0x12>
  }

  return len;
 80023a6:	687b      	ldr	r3, [r7, #4]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	e009      	b.n	80023d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	60ba      	str	r2, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	429a      	cmp	r2, r3
 80023dc:	dbf1      	blt.n	80023c2 <_write+0x12>
  }
  return len;
 80023de:	687b      	ldr	r3, [r7, #4]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_close>:

int _close(int file)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002410:	605a      	str	r2, [r3, #4]
  return 0;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_isatty>:

int _isatty(int file)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002428:	2301      	movs	r3, #1
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002458:	4a14      	ldr	r2, [pc, #80]	@ (80024ac <_sbrk+0x5c>)
 800245a:	4b15      	ldr	r3, [pc, #84]	@ (80024b0 <_sbrk+0x60>)
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002464:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <_sbrk+0x64>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <_sbrk+0x64>)
 800246e:	4a12      	ldr	r2, [pc, #72]	@ (80024b8 <_sbrk+0x68>)
 8002470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <_sbrk+0x64>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	429a      	cmp	r2, r3
 800247e:	d207      	bcs.n	8002490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002480:	f017 f982 	bl	8019788 <__errno>
 8002484:	4603      	mov	r3, r0
 8002486:	220c      	movs	r2, #12
 8002488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800248e:	e009      	b.n	80024a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002496:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <_sbrk+0x64>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	4a05      	ldr	r2, [pc, #20]	@ (80024b4 <_sbrk+0x64>)
 80024a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20020000 	.word	0x20020000
 80024b0:	00000400 	.word	0x00000400
 80024b4:	200041dc 	.word	0x200041dc
 80024b8:	2000b138 	.word	0x2000b138

080024bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024c0:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <SystemInit+0x20>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	4a05      	ldr	r2, [pc, #20]	@ (80024dc <SystemInit+0x20>)
 80024c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024e6:	f107 0310 	add.w	r3, r7, #16
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002578 <MX_TIM2_Init+0x98>)
 8002500:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002504:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8002506:	4b1c      	ldr	r3, [pc, #112]	@ (8002578 <MX_TIM2_Init+0x98>)
 8002508:	22a9      	movs	r2, #169	@ 0xa9
 800250a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250c:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <MX_TIM2_Init+0x98>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002512:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <MX_TIM2_Init+0x98>)
 8002514:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002518:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251a:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <MX_TIM2_Init+0x98>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002520:	4b15      	ldr	r3, [pc, #84]	@ (8002578 <MX_TIM2_Init+0x98>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002526:	4814      	ldr	r0, [pc, #80]	@ (8002578 <MX_TIM2_Init+0x98>)
 8002528:	f004 fb30 	bl	8006b8c <HAL_TIM_Base_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002532:	f7ff fc87 	bl	8001e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002536:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800253a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	4619      	mov	r1, r3
 8002542:	480d      	ldr	r0, [pc, #52]	@ (8002578 <MX_TIM2_Init+0x98>)
 8002544:	f004 fd42 	bl	8006fcc <HAL_TIM_ConfigClockSource>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800254e:	f7ff fc79 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002552:	2320      	movs	r3, #32
 8002554:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4806      	ldr	r0, [pc, #24]	@ (8002578 <MX_TIM2_Init+0x98>)
 8002560:	f004 ffc2 	bl	80074e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800256a:	f7ff fc6b 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800256e:	bf00      	nop
 8002570:	3720      	adds	r7, #32
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200041e0 	.word	0x200041e0

0800257c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800258c:	d113      	bne.n	80025b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800258e:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <HAL_TIM_Base_MspInit+0x44>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002592:	4a0b      	ldr	r2, [pc, #44]	@ (80025c0 <HAL_TIM_Base_MspInit+0x44>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6593      	str	r3, [r2, #88]	@ 0x58
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_TIM_Base_MspInit+0x44>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2105      	movs	r1, #5
 80025aa:	201c      	movs	r0, #28
 80025ac:	f000 faf8 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025b0:	201c      	movs	r0, #28
 80025b2:	f000 fb0f 	bl	8002bd4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000

080025c4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80025c8:	4b20      	ldr	r3, [pc, #128]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 80025ca:	4a21      	ldr	r2, [pc, #132]	@ (8002650 <MX_LPUART1_UART_Init+0x8c>)
 80025cc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 80025ce:	4b1f      	ldr	r3, [pc, #124]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 80025d0:	4a20      	ldr	r2, [pc, #128]	@ (8002654 <MX_LPUART1_UART_Init+0x90>)
 80025d2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025d4:	4b1d      	ldr	r3, [pc, #116]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80025da:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 80025dc:	2200      	movs	r2, #0
 80025de:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80025e0:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80025e6:	4b19      	ldr	r3, [pc, #100]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 80025e8:	220c      	movs	r2, #12
 80025ea:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ec:	4b17      	ldr	r3, [pc, #92]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025f2:	4b16      	ldr	r3, [pc, #88]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025f8:	4b14      	ldr	r3, [pc, #80]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025fe:	4b13      	ldr	r3, [pc, #76]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 8002600:	2200      	movs	r2, #0
 8002602:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002604:	4811      	ldr	r0, [pc, #68]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 8002606:	f005 f84b 	bl	80076a0 <HAL_UART_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8002610:	f7ff fc18 	bl	8001e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002614:	2100      	movs	r1, #0
 8002616:	480d      	ldr	r0, [pc, #52]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 8002618:	f006 fd5b 	bl	80090d2 <HAL_UARTEx_SetTxFifoThreshold>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8002622:	f7ff fc0f 	bl	8001e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002626:	2100      	movs	r1, #0
 8002628:	4808      	ldr	r0, [pc, #32]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 800262a:	f006 fd90 	bl	800914e <HAL_UARTEx_SetRxFifoThreshold>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8002634:	f7ff fc06 	bl	8001e44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002638:	4804      	ldr	r0, [pc, #16]	@ (800264c <MX_LPUART1_UART_Init+0x88>)
 800263a:	f006 fd11 	bl	8009060 <HAL_UARTEx_DisableFifoMode>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8002644:	f7ff fbfe 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}
 800264c:	2000422c 	.word	0x2000422c
 8002650:	40008000 	.word	0x40008000
 8002654:	001e8480 	.word	0x001e8480

08002658 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b09e      	sub	sp, #120	@ 0x78
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	2254      	movs	r2, #84	@ 0x54
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f016 fff1 	bl	8019660 <memset>
  if(uartHandle->Instance==LPUART1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a4e      	ldr	r2, [pc, #312]	@ (80027bc <HAL_UART_MspInit+0x164>)
 8002684:	4293      	cmp	r3, r2
 8002686:	f040 8094 	bne.w	80027b2 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800268a:	2320      	movs	r3, #32
 800268c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800268e:	2300      	movs	r3, #0
 8002690:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002692:	f107 0310 	add.w	r3, r7, #16
 8002696:	4618      	mov	r0, r3
 8002698:	f004 f82a 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80026a2:	f7ff fbcf 	bl	8001e44 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80026a6:	4b46      	ldr	r3, [pc, #280]	@ (80027c0 <HAL_UART_MspInit+0x168>)
 80026a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026aa:	4a45      	ldr	r2, [pc, #276]	@ (80027c0 <HAL_UART_MspInit+0x168>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80026b2:	4b43      	ldr	r3, [pc, #268]	@ (80027c0 <HAL_UART_MspInit+0x168>)
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026be:	4b40      	ldr	r3, [pc, #256]	@ (80027c0 <HAL_UART_MspInit+0x168>)
 80026c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c2:	4a3f      	ldr	r2, [pc, #252]	@ (80027c0 <HAL_UART_MspInit+0x168>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ca:	4b3d      	ldr	r3, [pc, #244]	@ (80027c0 <HAL_UART_MspInit+0x168>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80026d6:	230c      	movs	r3, #12
 80026d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80026e6:	230c      	movs	r3, #12
 80026e8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026ee:	4619      	mov	r1, r3
 80026f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026f4:	f000 fdc8 	bl	8003288 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80026f8:	4b32      	ldr	r3, [pc, #200]	@ (80027c4 <HAL_UART_MspInit+0x16c>)
 80026fa:	4a33      	ldr	r2, [pc, #204]	@ (80027c8 <HAL_UART_MspInit+0x170>)
 80026fc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80026fe:	4b31      	ldr	r3, [pc, #196]	@ (80027c4 <HAL_UART_MspInit+0x16c>)
 8002700:	2223      	movs	r2, #35	@ 0x23
 8002702:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002704:	4b2f      	ldr	r3, [pc, #188]	@ (80027c4 <HAL_UART_MspInit+0x16c>)
 8002706:	2210      	movs	r2, #16
 8002708:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800270a:	4b2e      	ldr	r3, [pc, #184]	@ (80027c4 <HAL_UART_MspInit+0x16c>)
 800270c:	2200      	movs	r2, #0
 800270e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002710:	4b2c      	ldr	r3, [pc, #176]	@ (80027c4 <HAL_UART_MspInit+0x16c>)
 8002712:	2280      	movs	r2, #128	@ 0x80
 8002714:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002716:	4b2b      	ldr	r3, [pc, #172]	@ (80027c4 <HAL_UART_MspInit+0x16c>)
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800271c:	4b29      	ldr	r3, [pc, #164]	@ (80027c4 <HAL_UART_MspInit+0x16c>)
 800271e:	2200      	movs	r2, #0
 8002720:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002722:	4b28      	ldr	r3, [pc, #160]	@ (80027c4 <HAL_UART_MspInit+0x16c>)
 8002724:	2200      	movs	r2, #0
 8002726:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002728:	4b26      	ldr	r3, [pc, #152]	@ (80027c4 <HAL_UART_MspInit+0x16c>)
 800272a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800272e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002730:	4824      	ldr	r0, [pc, #144]	@ (80027c4 <HAL_UART_MspInit+0x16c>)
 8002732:	f000 fa5d 	bl	8002bf0 <HAL_DMA_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800273c:	f7ff fb82 	bl	8001e44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a20      	ldr	r2, [pc, #128]	@ (80027c4 <HAL_UART_MspInit+0x16c>)
 8002744:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002746:	4a1f      	ldr	r2, [pc, #124]	@ (80027c4 <HAL_UART_MspInit+0x16c>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 800274c:	4b1f      	ldr	r3, [pc, #124]	@ (80027cc <HAL_UART_MspInit+0x174>)
 800274e:	4a20      	ldr	r2, [pc, #128]	@ (80027d0 <HAL_UART_MspInit+0x178>)
 8002750:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002752:	4b1e      	ldr	r3, [pc, #120]	@ (80027cc <HAL_UART_MspInit+0x174>)
 8002754:	2222      	movs	r2, #34	@ 0x22
 8002756:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002758:	4b1c      	ldr	r3, [pc, #112]	@ (80027cc <HAL_UART_MspInit+0x174>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800275e:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <HAL_UART_MspInit+0x174>)
 8002760:	2200      	movs	r2, #0
 8002762:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002764:	4b19      	ldr	r3, [pc, #100]	@ (80027cc <HAL_UART_MspInit+0x174>)
 8002766:	2280      	movs	r2, #128	@ 0x80
 8002768:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800276a:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <HAL_UART_MspInit+0x174>)
 800276c:	2200      	movs	r2, #0
 800276e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002770:	4b16      	ldr	r3, [pc, #88]	@ (80027cc <HAL_UART_MspInit+0x174>)
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002776:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <HAL_UART_MspInit+0x174>)
 8002778:	2220      	movs	r2, #32
 800277a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800277c:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <HAL_UART_MspInit+0x174>)
 800277e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002782:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002784:	4811      	ldr	r0, [pc, #68]	@ (80027cc <HAL_UART_MspInit+0x174>)
 8002786:	f000 fa33 	bl	8002bf0 <HAL_DMA_Init>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8002790:	f7ff fb58 	bl	8001e44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a0d      	ldr	r2, [pc, #52]	@ (80027cc <HAL_UART_MspInit+0x174>)
 8002798:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800279c:	4a0b      	ldr	r2, [pc, #44]	@ (80027cc <HAL_UART_MspInit+0x174>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2105      	movs	r1, #5
 80027a6:	205b      	movs	r0, #91	@ 0x5b
 80027a8:	f000 f9fa 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80027ac:	205b      	movs	r0, #91	@ 0x5b
 80027ae:	f000 fa11 	bl	8002bd4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80027b2:	bf00      	nop
 80027b4:	3778      	adds	r7, #120	@ 0x78
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40008000 	.word	0x40008000
 80027c0:	40021000 	.word	0x40021000
 80027c4:	200042c0 	.word	0x200042c0
 80027c8:	4002001c 	.word	0x4002001c
 80027cc:	20004320 	.word	0x20004320
 80027d0:	4002006c 	.word	0x4002006c

080027d4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80027e2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80027e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027e8:	4904      	ldr	r1, [pc, #16]	@ (80027fc <cubemx_transport_open+0x28>)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f005 f828 	bl	8007840 <HAL_UART_Receive_DMA>
    return true;
 80027f0:	2301      	movs	r3, #1
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20004380 	.word	0x20004380

08002800 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800280e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f005 f861 	bl	80078d8 <HAL_UART_DMAStop>
    return true;
 8002816:	2301      	movs	r3, #1
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002834:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	2b20      	cmp	r3, #32
 800283e:	d11b      	bne.n	8002878 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	6978      	ldr	r0, [r7, #20]
 800284a:	f004 ff79 	bl	8007740 <HAL_UART_Transmit_DMA>
 800284e:	4603      	mov	r3, r0
 8002850:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002852:	e002      	b.n	800285a <cubemx_transport_write+0x3a>
            osDelay(1);
 8002854:	2001      	movs	r0, #1
 8002856:	f006 fe27 	bl	80094a8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800285a:	7cfb      	ldrb	r3, [r7, #19]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <cubemx_transport_write+0x4a>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002866:	2b20      	cmp	r3, #32
 8002868:	d1f4      	bne.n	8002854 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <cubemx_transport_write+0x54>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	e002      	b.n	800287a <cubemx_transport_write+0x5a>
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8002878:	2300      	movs	r3, #0
    }
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002898:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800289e:	b672      	cpsid	i
}
 80028a0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80028b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002920 <cubemx_transport_read+0x9c>)
 80028b2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028b4:	b662      	cpsie	i
}
 80028b6:	bf00      	nop
        __enable_irq();
        ms_used++;
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	3301      	adds	r3, #1
 80028bc:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80028be:	2001      	movs	r0, #1
 80028c0:	f006 fdf2 	bl	80094a8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80028c4:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <cubemx_transport_read+0xa0>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <cubemx_transport_read+0x9c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d103      	bne.n	80028d8 <cubemx_transport_read+0x54>
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	dbe2      	blt.n	800289e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80028dc:	e011      	b.n	8002902 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80028de:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <cubemx_transport_read+0xa0>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	440b      	add	r3, r1
 80028e8:	490f      	ldr	r1, [pc, #60]	@ (8002928 <cubemx_transport_read+0xa4>)
 80028ea:	5c8a      	ldrb	r2, [r1, r2]
 80028ec:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80028ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <cubemx_transport_read+0xa0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002924 <cubemx_transport_read+0xa0>)
 80028fa:	6013      	str	r3, [r2, #0]
        wrote++;
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	3301      	adds	r3, #1
 8002900:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002902:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <cubemx_transport_read+0xa0>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <cubemx_transport_read+0x9c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d003      	beq.n	8002916 <cubemx_transport_read+0x92>
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	429a      	cmp	r2, r3
 8002914:	d3e3      	bcc.n	80028de <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8002916:	69bb      	ldr	r3, [r7, #24]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3720      	adds	r7, #32
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20004b84 	.word	0x20004b84
 8002924:	20004b80 	.word	0x20004b80
 8002928:	20004380 	.word	0x20004380

0800292c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800292c:	480d      	ldr	r0, [pc, #52]	@ (8002964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800292e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002930:	f7ff fdc4 	bl	80024bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002934:	480c      	ldr	r0, [pc, #48]	@ (8002968 <LoopForever+0x6>)
  ldr r1, =_edata
 8002936:	490d      	ldr	r1, [pc, #52]	@ (800296c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002938:	4a0d      	ldr	r2, [pc, #52]	@ (8002970 <LoopForever+0xe>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800293c:	e002      	b.n	8002944 <LoopCopyDataInit>

0800293e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002942:	3304      	adds	r3, #4

08002944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002948:	d3f9      	bcc.n	800293e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800294c:	4c0a      	ldr	r4, [pc, #40]	@ (8002978 <LoopForever+0x16>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002950:	e001      	b.n	8002956 <LoopFillZerobss>

08002952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002954:	3204      	adds	r2, #4

08002956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002958:	d3fb      	bcc.n	8002952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800295a:	f016 ff1b 	bl	8019794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800295e:	f7fe ffd7 	bl	8001910 <main>

08002962 <LoopForever>:

LoopForever:
    b LoopForever
 8002962:	e7fe      	b.n	8002962 <LoopForever>
  ldr   r0, =_estack
 8002964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800296c:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8002970:	0801b2e4 	.word	0x0801b2e4
  ldr r2, =_sbss
 8002974:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8002978:	2000b138 	.word	0x2000b138

0800297c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC1_2_IRQHandler>

0800297e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002988:	2003      	movs	r0, #3
 800298a:	f000 f8fe 	bl	8002b8a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800298e:	200f      	movs	r0, #15
 8002990:	f7ff fbec 	bl	800216c <HAL_InitTick>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	71fb      	strb	r3, [r7, #7]
 800299e:	e001      	b.n	80029a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029a0:	f7ff fbba 	bl	8002118 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029a4:	79fb      	ldrb	r3, [r7, #7]

}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029b4:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_IncTick+0x1c>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <HAL_IncTick+0x20>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4413      	add	r3, r2
 80029be:	4a03      	ldr	r2, [pc, #12]	@ (80029cc <HAL_IncTick+0x1c>)
 80029c0:	6013      	str	r3, [r2, #0]
}
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	20004b88 	.word	0x20004b88
 80029d0:	20000028 	.word	0x20000028

080029d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return uwTick;
 80029d8:	4b03      	ldr	r3, [pc, #12]	@ (80029e8 <HAL_GetTick+0x14>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20004b88 	.word	0x20004b88

080029ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f4:	f7ff ffee 	bl	80029d4 <HAL_GetTick>
 80029f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a04:	d004      	beq.n	8002a10 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a06:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <HAL_Delay+0x40>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a10:	bf00      	nop
 8002a12:	f7ff ffdf 	bl	80029d4 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d8f7      	bhi.n	8002a12 <HAL_Delay+0x26>
  {
  }
}
 8002a22:	bf00      	nop
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000028 	.word	0x20000028

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a62:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60d3      	str	r3, [r2, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	@ (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	@ (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	@ (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	@ 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	@ 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ff4c 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bae:	f7ff ff63 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bb2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	6978      	ldr	r0, [r7, #20]
 8002bba:	f7ff ffb3 	bl	8002b24 <NVIC_EncodePriority>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff82 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002bcc:	bf00      	nop
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ff56 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e08d      	b.n	8002d1e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <HAL_DMA_Init+0x138>)
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d80f      	bhi.n	8002c2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b45      	ldr	r3, [pc, #276]	@ (8002d2c <HAL_DMA_Init+0x13c>)
 8002c16:	4413      	add	r3, r2
 8002c18:	4a45      	ldr	r2, [pc, #276]	@ (8002d30 <HAL_DMA_Init+0x140>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	009a      	lsls	r2, r3, #2
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a42      	ldr	r2, [pc, #264]	@ (8002d34 <HAL_DMA_Init+0x144>)
 8002c2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c2c:	e00e      	b.n	8002c4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b40      	ldr	r3, [pc, #256]	@ (8002d38 <HAL_DMA_Init+0x148>)
 8002c36:	4413      	add	r3, r2
 8002c38:	4a3d      	ldr	r2, [pc, #244]	@ (8002d30 <HAL_DMA_Init+0x140>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	009a      	lsls	r2, r3, #2
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a3c      	ldr	r2, [pc, #240]	@ (8002d3c <HAL_DMA_Init+0x14c>)
 8002c4a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa90 	bl	80031c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cac:	d102      	bne.n	8002cb4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002cc8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d010      	beq.n	8002cf4 <HAL_DMA_Init+0x104>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d80c      	bhi.n	8002cf4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fab0 	bl	8003240 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	e008      	b.n	8002d06 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40020407 	.word	0x40020407
 8002d2c:	bffdfff8 	.word	0xbffdfff8
 8002d30:	cccccccd 	.word	0xcccccccd
 8002d34:	40020000 	.word	0x40020000
 8002d38:	bffdfbf8 	.word	0xbffdfbf8
 8002d3c:	40020400 	.word	0x40020400

08002d40 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_DMA_Start_IT+0x20>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e066      	b.n	8002e2e <HAL_DMA_Start_IT+0xee>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d155      	bne.n	8002e20 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0201 	bic.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f9d5 	bl	8003148 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 020e 	orr.w	r2, r2, #14
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e00f      	b.n	8002dd8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0204 	bic.w	r2, r2, #4
 8002dc6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 020a 	orr.w	r2, r2, #10
 8002dd6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002df4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e0c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e005      	b.n	8002e2c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b085      	sub	sp, #20
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d005      	beq.n	8002e5a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2204      	movs	r2, #4
 8002e52:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
 8002e58:	e037      	b.n	8002eca <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 020e 	bic.w	r2, r2, #14
 8002e68:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e78:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0201 	bic.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	f003 021f 	and.w	r2, r3, #31
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	2101      	movs	r1, #1
 8002e98:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ea6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00c      	beq.n	8002eca <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ebe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ec8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d00d      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2204      	movs	r2, #4
 8002f04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
 8002f1a:	e047      	b.n	8002fac <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 020e 	bic.w	r2, r2, #14
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f68:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f80:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f8a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
    }
  }
  return status;
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d026      	beq.n	8003030 <HAL_DMA_IRQHandler+0x7a>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d021      	beq.n	8003030 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d107      	bne.n	800300a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0204 	bic.w	r2, r2, #4
 8003008:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300e:	f003 021f 	and.w	r2, r3, #31
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	2104      	movs	r1, #4
 8003018:	fa01 f202 	lsl.w	r2, r1, r2
 800301c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	2b00      	cmp	r3, #0
 8003024:	d071      	beq.n	800310a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800302e:	e06c      	b.n	800310a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2202      	movs	r2, #2
 800303a:	409a      	lsls	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02e      	beq.n	80030a2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d029      	beq.n	80030a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10b      	bne.n	8003074 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 020a 	bic.w	r2, r2, #10
 800306a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	2102      	movs	r1, #2
 8003082:	fa01 f202 	lsl.w	r2, r1, r2
 8003086:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d038      	beq.n	800310a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80030a0:	e033      	b.n	800310a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2208      	movs	r2, #8
 80030ac:	409a      	lsls	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d02a      	beq.n	800310c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d025      	beq.n	800310c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 020e 	bic.w	r2, r2, #14
 80030ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d4:	f003 021f 	and.w	r2, r3, #31
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	2101      	movs	r1, #1
 80030de:	fa01 f202 	lsl.w	r2, r1, r2
 80030e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800310a:	bf00      	nop
 800310c:	bf00      	nop
}
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003122:	b2db      	uxtb	r3, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800315e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003164:	2b00      	cmp	r3, #0
 8003166:	d004      	beq.n	8003172 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003170:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	f003 021f 	and.w	r2, r3, #31
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	2101      	movs	r1, #1
 8003180:	fa01 f202 	lsl.w	r2, r1, r2
 8003184:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b10      	cmp	r3, #16
 8003194:	d108      	bne.n	80031a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031a6:	e007      	b.n	80031b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	60da      	str	r2, [r3, #12]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b16      	ldr	r3, [pc, #88]	@ (800322c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d802      	bhi.n	80031de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80031d8:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	e001      	b.n	80031e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80031e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	3b08      	subs	r3, #8
 80031ee:	4a12      	ldr	r2, [pc, #72]	@ (8003238 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fc:	089b      	lsrs	r3, r3, #2
 80031fe:	009a      	lsls	r2, r3, #2
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	461a      	mov	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a0b      	ldr	r2, [pc, #44]	@ (800323c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800320e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	2201      	movs	r2, #1
 8003218:	409a      	lsls	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40020407 	.word	0x40020407
 8003230:	40020800 	.word	0x40020800
 8003234:	40020820 	.word	0x40020820
 8003238:	cccccccd 	.word	0xcccccccd
 800323c:	40020880 	.word	0x40020880

08003240 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	461a      	mov	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a08      	ldr	r2, [pc, #32]	@ (8003284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003262:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3b01      	subs	r3, #1
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2201      	movs	r2, #1
 800326e:	409a      	lsls	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	1000823f 	.word	0x1000823f
 8003284:	40020940 	.word	0x40020940

08003288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003296:	e15a      	b.n	800354e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	2101      	movs	r1, #1
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	4013      	ands	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 814c 	beq.w	8003548 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d005      	beq.n	80032c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d130      	bne.n	800332a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	2203      	movs	r2, #3
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032fe:	2201      	movs	r2, #1
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	f003 0201 	and.w	r2, r3, #1
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b03      	cmp	r3, #3
 8003334:	d017      	beq.n	8003366 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	2203      	movs	r2, #3
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d123      	bne.n	80033ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	08da      	lsrs	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3208      	adds	r2, #8
 800337a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	220f      	movs	r2, #15
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	08da      	lsrs	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3208      	adds	r2, #8
 80033b4:	6939      	ldr	r1, [r7, #16]
 80033b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	2203      	movs	r2, #3
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0203 	and.w	r2, r3, #3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80a6 	beq.w	8003548 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fc:	4b5b      	ldr	r3, [pc, #364]	@ (800356c <HAL_GPIO_Init+0x2e4>)
 80033fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003400:	4a5a      	ldr	r2, [pc, #360]	@ (800356c <HAL_GPIO_Init+0x2e4>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6613      	str	r3, [r2, #96]	@ 0x60
 8003408:	4b58      	ldr	r3, [pc, #352]	@ (800356c <HAL_GPIO_Init+0x2e4>)
 800340a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003414:	4a56      	ldr	r2, [pc, #344]	@ (8003570 <HAL_GPIO_Init+0x2e8>)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	089b      	lsrs	r3, r3, #2
 800341a:	3302      	adds	r3, #2
 800341c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003420:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	220f      	movs	r2, #15
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800343e:	d01f      	beq.n	8003480 <HAL_GPIO_Init+0x1f8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a4c      	ldr	r2, [pc, #304]	@ (8003574 <HAL_GPIO_Init+0x2ec>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d019      	beq.n	800347c <HAL_GPIO_Init+0x1f4>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a4b      	ldr	r2, [pc, #300]	@ (8003578 <HAL_GPIO_Init+0x2f0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <HAL_GPIO_Init+0x1f0>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a4a      	ldr	r2, [pc, #296]	@ (800357c <HAL_GPIO_Init+0x2f4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00d      	beq.n	8003474 <HAL_GPIO_Init+0x1ec>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a49      	ldr	r2, [pc, #292]	@ (8003580 <HAL_GPIO_Init+0x2f8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d007      	beq.n	8003470 <HAL_GPIO_Init+0x1e8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a48      	ldr	r2, [pc, #288]	@ (8003584 <HAL_GPIO_Init+0x2fc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d101      	bne.n	800346c <HAL_GPIO_Init+0x1e4>
 8003468:	2305      	movs	r3, #5
 800346a:	e00a      	b.n	8003482 <HAL_GPIO_Init+0x1fa>
 800346c:	2306      	movs	r3, #6
 800346e:	e008      	b.n	8003482 <HAL_GPIO_Init+0x1fa>
 8003470:	2304      	movs	r3, #4
 8003472:	e006      	b.n	8003482 <HAL_GPIO_Init+0x1fa>
 8003474:	2303      	movs	r3, #3
 8003476:	e004      	b.n	8003482 <HAL_GPIO_Init+0x1fa>
 8003478:	2302      	movs	r3, #2
 800347a:	e002      	b.n	8003482 <HAL_GPIO_Init+0x1fa>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_GPIO_Init+0x1fa>
 8003480:	2300      	movs	r3, #0
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	f002 0203 	and.w	r2, r2, #3
 8003488:	0092      	lsls	r2, r2, #2
 800348a:	4093      	lsls	r3, r2
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003492:	4937      	ldr	r1, [pc, #220]	@ (8003570 <HAL_GPIO_Init+0x2e8>)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	3302      	adds	r3, #2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034a0:	4b39      	ldr	r3, [pc, #228]	@ (8003588 <HAL_GPIO_Init+0x300>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034c4:	4a30      	ldr	r2, [pc, #192]	@ (8003588 <HAL_GPIO_Init+0x300>)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003588 <HAL_GPIO_Init+0x300>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4013      	ands	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034ee:	4a26      	ldr	r2, [pc, #152]	@ (8003588 <HAL_GPIO_Init+0x300>)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80034f4:	4b24      	ldr	r3, [pc, #144]	@ (8003588 <HAL_GPIO_Init+0x300>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003518:	4a1b      	ldr	r2, [pc, #108]	@ (8003588 <HAL_GPIO_Init+0x300>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800351e:	4b1a      	ldr	r3, [pc, #104]	@ (8003588 <HAL_GPIO_Init+0x300>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003542:	4a11      	ldr	r2, [pc, #68]	@ (8003588 <HAL_GPIO_Init+0x300>)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	3301      	adds	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	f47f ae9d 	bne.w	8003298 <HAL_GPIO_Init+0x10>
  }
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40021000 	.word	0x40021000
 8003570:	40010000 	.word	0x40010000
 8003574:	48000400 	.word	0x48000400
 8003578:	48000800 	.word	0x48000800
 800357c:	48000c00 	.word	0x48000c00
 8003580:	48001000 	.word	0x48001000
 8003584:	48001400 	.word	0x48001400
 8003588:	40010400 	.word	0x40010400

0800358c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	807b      	strh	r3, [r7, #2]
 8003598:	4613      	mov	r3, r2
 800359a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800359c:	787b      	ldrb	r3, [r7, #1]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035a2:	887a      	ldrh	r2, [r7, #2]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035a8:	e002      	b.n	80035b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035aa:	887a      	ldrh	r2, [r7, #2]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4013      	ands	r3, r2
 80035d4:	041a      	lsls	r2, r3, #16
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	43d9      	mvns	r1, r3
 80035da:	887b      	ldrh	r3, [r7, #2]
 80035dc:	400b      	ands	r3, r1
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	619a      	str	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e08d      	b.n	800371e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fe f898 	bl	800174c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	@ 0x24
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003640:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003650:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d107      	bne.n	800366a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	e006      	b.n	8003678 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003676:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d108      	bne.n	8003692 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	e007      	b.n	80036a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69d9      	ldr	r1, [r3, #28]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	461a      	mov	r2, r3
 8003736:	4603      	mov	r3, r0
 8003738:	817b      	strh	r3, [r7, #10]
 800373a:	460b      	mov	r3, r1
 800373c:	813b      	strh	r3, [r7, #8]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b20      	cmp	r3, #32
 800374c:	f040 80f9 	bne.w	8003942 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_I2C_Mem_Write+0x34>
 8003756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003762:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0ed      	b.n	8003944 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_I2C_Mem_Write+0x4e>
 8003772:	2302      	movs	r3, #2
 8003774:	e0e6      	b.n	8003944 <HAL_I2C_Mem_Write+0x21c>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800377e:	f7ff f929 	bl	80029d4 <HAL_GetTick>
 8003782:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2319      	movs	r3, #25
 800378a:	2201      	movs	r2, #1
 800378c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f001 fdcc 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0d1      	b.n	8003944 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2221      	movs	r2, #33	@ 0x21
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2240      	movs	r2, #64	@ 0x40
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a3a      	ldr	r2, [r7, #32]
 80037ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037c8:	88f8      	ldrh	r0, [r7, #6]
 80037ca:	893a      	ldrh	r2, [r7, #8]
 80037cc:	8979      	ldrh	r1, [r7, #10]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	4603      	mov	r3, r0
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 ff9b 	bl	8004714 <I2C_RequestMemoryWrite>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0a9      	b.n	8003944 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2bff      	cmp	r3, #255	@ 0xff
 80037f8:	d90e      	bls.n	8003818 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	22ff      	movs	r2, #255	@ 0xff
 80037fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003804:	b2da      	uxtb	r2, r3
 8003806:	8979      	ldrh	r1, [r7, #10]
 8003808:	2300      	movs	r3, #0
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f001 ff4f 	bl	80056b4 <I2C_TransferConfig>
 8003816:	e00f      	b.n	8003838 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003826:	b2da      	uxtb	r2, r3
 8003828:	8979      	ldrh	r1, [r7, #10]
 800382a:	2300      	movs	r3, #0
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f001 ff3e 	bl	80056b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f001 fdcf 	bl	80053e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e07b      	b.n	8003944 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d034      	beq.n	80038f0 <HAL_I2C_Mem_Write+0x1c8>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388a:	2b00      	cmp	r3, #0
 800388c:	d130      	bne.n	80038f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003894:	2200      	movs	r2, #0
 8003896:	2180      	movs	r1, #128	@ 0x80
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f001 fd48 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e04d      	b.n	8003944 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2bff      	cmp	r3, #255	@ 0xff
 80038b0:	d90e      	bls.n	80038d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	22ff      	movs	r2, #255	@ 0xff
 80038b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	8979      	ldrh	r1, [r7, #10]
 80038c0:	2300      	movs	r3, #0
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f001 fef3 	bl	80056b4 <I2C_TransferConfig>
 80038ce:	e00f      	b.n	80038f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	8979      	ldrh	r1, [r7, #10]
 80038e2:	2300      	movs	r3, #0
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f001 fee2 	bl	80056b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d19e      	bne.n	8003838 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f001 fdb5 	bl	800546e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e01a      	b.n	8003944 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2220      	movs	r2, #32
 8003914:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4b0a      	ldr	r3, [pc, #40]	@ (800394c <HAL_I2C_Mem_Write+0x224>)
 8003922:	400b      	ands	r3, r1
 8003924:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	e000      	b.n	8003944 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003942:	2302      	movs	r3, #2
  }
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	fe00e800 	.word	0xfe00e800

08003950 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	4608      	mov	r0, r1
 800395a:	4611      	mov	r1, r2
 800395c:	461a      	mov	r2, r3
 800395e:	4603      	mov	r3, r0
 8003960:	817b      	strh	r3, [r7, #10]
 8003962:	460b      	mov	r3, r1
 8003964:	813b      	strh	r3, [r7, #8]
 8003966:	4613      	mov	r3, r2
 8003968:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b20      	cmp	r3, #32
 8003974:	f040 80fd 	bne.w	8003b72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_I2C_Mem_Read+0x34>
 800397e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003980:	2b00      	cmp	r3, #0
 8003982:	d105      	bne.n	8003990 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800398a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0f1      	b.n	8003b74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_I2C_Mem_Read+0x4e>
 800399a:	2302      	movs	r3, #2
 800399c:	e0ea      	b.n	8003b74 <HAL_I2C_Mem_Read+0x224>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039a6:	f7ff f815 	bl	80029d4 <HAL_GetTick>
 80039aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2319      	movs	r3, #25
 80039b2:	2201      	movs	r2, #1
 80039b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f001 fcb8 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0d5      	b.n	8003b74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2222      	movs	r2, #34	@ 0x22
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2240      	movs	r2, #64	@ 0x40
 80039d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a3a      	ldr	r2, [r7, #32]
 80039e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039f0:	88f8      	ldrh	r0, [r7, #6]
 80039f2:	893a      	ldrh	r2, [r7, #8]
 80039f4:	8979      	ldrh	r1, [r7, #10]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	9301      	str	r3, [sp, #4]
 80039fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	4603      	mov	r3, r0
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 fedb 	bl	80047bc <I2C_RequestMemoryRead>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0ad      	b.n	8003b74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2bff      	cmp	r3, #255	@ 0xff
 8003a20:	d90e      	bls.n	8003a40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	22ff      	movs	r2, #255	@ 0xff
 8003a26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	8979      	ldrh	r1, [r7, #10]
 8003a30:	4b52      	ldr	r3, [pc, #328]	@ (8003b7c <HAL_I2C_Mem_Read+0x22c>)
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f001 fe3b 	bl	80056b4 <I2C_TransferConfig>
 8003a3e:	e00f      	b.n	8003a60 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	8979      	ldrh	r1, [r7, #10]
 8003a52:	4b4a      	ldr	r3, [pc, #296]	@ (8003b7c <HAL_I2C_Mem_Read+0x22c>)
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f001 fe2a 	bl	80056b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a66:	2200      	movs	r2, #0
 8003a68:	2104      	movs	r1, #4
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f001 fc5f 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07c      	b.n	8003b74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d034      	beq.n	8003b20 <HAL_I2C_Mem_Read+0x1d0>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d130      	bne.n	8003b20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2180      	movs	r1, #128	@ 0x80
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f001 fc30 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e04d      	b.n	8003b74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2bff      	cmp	r3, #255	@ 0xff
 8003ae0:	d90e      	bls.n	8003b00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	22ff      	movs	r2, #255	@ 0xff
 8003ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	8979      	ldrh	r1, [r7, #10]
 8003af0:	2300      	movs	r3, #0
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f001 fddb 	bl	80056b4 <I2C_TransferConfig>
 8003afe:	e00f      	b.n	8003b20 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	8979      	ldrh	r1, [r7, #10]
 8003b12:	2300      	movs	r3, #0
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f001 fdca 	bl	80056b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d19a      	bne.n	8003a60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f001 fc9d 	bl	800546e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e01a      	b.n	8003b74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2220      	movs	r2, #32
 8003b44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6859      	ldr	r1, [r3, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b0b      	ldr	r3, [pc, #44]	@ (8003b80 <HAL_I2C_Mem_Read+0x230>)
 8003b52:	400b      	ands	r3, r1
 8003b54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e000      	b.n	8003b74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b72:	2302      	movs	r3, #2
  }
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	80002400 	.word	0x80002400
 8003b80:	fe00e800 	.word	0xfe00e800

08003b84 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	461a      	mov	r2, r3
 8003b92:	4603      	mov	r3, r0
 8003b94:	817b      	strh	r3, [r7, #10]
 8003b96:	460b      	mov	r3, r1
 8003b98:	813b      	strh	r3, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	f040 80c2 	bne.w	8003d30 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_I2C_Mem_Read_DMA+0x34>
 8003bb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0b6      	b.n	8003d32 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bd2:	d101      	bne.n	8003bd8 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e0ac      	b.n	8003d32 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_I2C_Mem_Read_DMA+0x62>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0a5      	b.n	8003d32 <HAL_I2C_Mem_Read_DMA+0x1ae>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2222      	movs	r2, #34	@ 0x22
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2240      	movs	r2, #64	@ 0x40
 8003bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a3a      	ldr	r2, [r7, #32]
 8003c08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a4a      	ldr	r2, [pc, #296]	@ (8003d3c <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8003c14:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a49      	ldr	r2, [pc, #292]	@ (8003d40 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8003c1a:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8003c1c:	897a      	ldrh	r2, [r7, #10]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2bff      	cmp	r3, #255	@ 0xff
 8003c2a:	d903      	bls.n	8003c34 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	22ff      	movs	r2, #255	@ 0xff
 8003c30:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003c32:	e004      	b.n	8003c3e <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d109      	bne.n	8003c58 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c44:	893b      	ldrh	r3, [r7, #8]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c54:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c56:	e00b      	b.n	8003c70 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c58:	893b      	ldrh	r3, [r7, #8]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003c66:	893b      	ldrh	r3, [r7, #8]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d020      	beq.n	8003cba <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7c:	4a31      	ldr	r2, [pc, #196]	@ (8003d44 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8003c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c84:	4a30      	ldr	r2, [pc, #192]	@ (8003d48 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8003c86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c94:	2200      	movs	r2, #0
 8003c96:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3324      	adds	r3, #36	@ 0x24
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003caa:	f7ff f849 	bl	8002d40 <HAL_DMA_Start_IT>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d127      	bne.n	8003d08 <HAL_I2C_Mem_Read_DMA+0x184>
 8003cb8:	e013      	b.n	8003ce2 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e027      	b.n	8003d32 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	8979      	ldrh	r1, [r7, #10]
 8003ce8:	4b18      	ldr	r3, [pc, #96]	@ (8003d4c <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	2300      	movs	r3, #0
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f001 fce0 	bl	80056b4 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f001 fd0a 	bl	8005718 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e014      	b.n	8003d32 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1c:	f043 0210 	orr.w	r2, r3, #16
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	ffff0000 	.word	0xffff0000
 8003d40:	080042f1 	.word	0x080042f1
 8003d44:	0800522f 	.word	0x0800522f
 8003d48:	080052c5 	.word	0x080052c5
 8003d4c:	80002000 	.word	0x80002000

08003d50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	68f9      	ldr	r1, [r7, #12]
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d010      	beq.n	8003dca <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	09db      	lsrs	r3, r3, #7
 8003dac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db8:	f043 0201 	orr.w	r2, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003dc8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	0a9b      	lsrs	r3, r3, #10
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d010      	beq.n	8003df8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	09db      	lsrs	r3, r3, #7
 8003dda:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	f043 0208 	orr.w	r2, r3, #8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003df6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	0a5b      	lsrs	r3, r3, #9
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d010      	beq.n	8003e26 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	09db      	lsrs	r3, r3, #7
 8003e08:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e14:	f043 0202 	orr.w	r2, r3, #2
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e24:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 030b 	and.w	r3, r3, #11
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f001 f8bd 	bl	8004fb8 <I2C_ITError>
  }
}
 8003e3e:	bf00      	nop
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	70fb      	strb	r3, [r7, #3]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b086      	sub	sp, #24
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <I2C_Slave_ISR_IT+0x24>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e0ed      	b.n	8004102 <I2C_Slave_ISR_IT+0x200>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d004      	beq.n	8003f50 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003f46:	6939      	ldr	r1, [r7, #16]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fe75 	bl	8004c38 <I2C_ITSlaveCplt>
 8003f4e:	e0d3      	b.n	80040f8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d04d      	beq.n	8003ff8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d047      	beq.n	8003ff8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d128      	bne.n	8003fc4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b28      	cmp	r3, #40	@ 0x28
 8003f7c:	d108      	bne.n	8003f90 <I2C_Slave_ISR_IT+0x8e>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f84:	d104      	bne.n	8003f90 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f86:	6939      	ldr	r1, [r7, #16]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 ffbf 	bl	8004f0c <I2C_ITListenCplt>
 8003f8e:	e032      	b.n	8003ff6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b29      	cmp	r3, #41	@ 0x29
 8003f9a:	d10e      	bne.n	8003fba <I2C_Slave_ISR_IT+0xb8>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fa2:	d00a      	beq.n	8003fba <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2210      	movs	r2, #16
 8003faa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f001 f91a 	bl	80051e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fd17 	bl	80049e6 <I2C_ITSlaveSeqCplt>
 8003fb8:	e01d      	b.n	8003ff6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2210      	movs	r2, #16
 8003fc0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003fc2:	e096      	b.n	80040f2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2210      	movs	r2, #16
 8003fca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd0:	f043 0204 	orr.w	r2, r3, #4
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <I2C_Slave_ISR_IT+0xe6>
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fe4:	f040 8085 	bne.w	80040f2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fec:	4619      	mov	r1, r3
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 ffe2 	bl	8004fb8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003ff4:	e07d      	b.n	80040f2 <I2C_Slave_ISR_IT+0x1f0>
 8003ff6:	e07c      	b.n	80040f2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d030      	beq.n	8004066 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	089b      	lsrs	r3, r3, #2
 8004008:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02a      	beq.n	8004066 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d018      	beq.n	800404c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d14f      	bne.n	80040f6 <I2C_Slave_ISR_IT+0x1f4>
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800405c:	d04b      	beq.n	80040f6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fcc1 	bl	80049e6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004064:	e047      	b.n	80040f6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	08db      	lsrs	r3, r3, #3
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	08db      	lsrs	r3, r3, #3
 8004076:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800407a:	2b00      	cmp	r3, #0
 800407c:	d004      	beq.n	8004088 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800407e:	6939      	ldr	r1, [r7, #16]
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fbef 	bl	8004864 <I2C_ITAddrCplt>
 8004086:	e037      	b.n	80040f8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d031      	beq.n	80040f8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	085b      	lsrs	r3, r3, #1
 8004098:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800409c:	2b00      	cmp	r3, #0
 800409e:	d02b      	beq.n	80040f8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d018      	beq.n	80040dc <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80040da:	e00d      	b.n	80040f8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040e2:	d002      	beq.n	80040ea <I2C_Slave_ISR_IT+0x1e8>
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fc7b 	bl	80049e6 <I2C_ITSlaveSeqCplt>
 80040f0:	e002      	b.n	80040f8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80040f2:	bf00      	nop
 80040f4:	e000      	b.n	80040f8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80040f6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b088      	sub	sp, #32
 800410e:	af02      	add	r7, sp, #8
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <I2C_Master_ISR_DMA+0x1a>
 8004120:	2302      	movs	r3, #2
 8004122:	e0e1      	b.n	80042e8 <I2C_Master_ISR_DMA+0x1de>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d017      	beq.n	8004168 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	091b      	lsrs	r3, r3, #4
 800413c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004140:	2b00      	cmp	r3, #0
 8004142:	d011      	beq.n	8004168 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2210      	movs	r2, #16
 800414a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004150:	f043 0204 	orr.w	r2, r3, #4
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004158:	2120      	movs	r1, #32
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f001 fadc 	bl	8005718 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f001 f840 	bl	80051e6 <I2C_Flush_TXDR>
 8004166:	e0ba      	b.n	80042de <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	09db      	lsrs	r3, r3, #7
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d072      	beq.n	800425a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	099b      	lsrs	r3, r3, #6
 8004178:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800417c:	2b00      	cmp	r3, #0
 800417e:	d06c      	beq.n	800425a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800418e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d04e      	beq.n	8004238 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041a6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2bff      	cmp	r3, #255	@ 0xff
 80041b0:	d906      	bls.n	80041c0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	22ff      	movs	r2, #255	@ 0xff
 80041b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80041b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	e010      	b.n	80041e2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041d2:	d003      	beq.n	80041dc <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e002      	b.n	80041e2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80041dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041e0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	8a79      	ldrh	r1, [r7, #18]
 80041ea:	2300      	movs	r3, #0
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f001 fa5f 	bl	80056b4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b22      	cmp	r3, #34	@ 0x22
 8004212:	d108      	bne.n	8004226 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004222:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004224:	e05b      	b.n	80042de <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004234:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004236:	e052      	b.n	80042de <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004242:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004246:	d003      	beq.n	8004250 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fb8f 	bl	800496c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800424e:	e046      	b.n	80042de <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004250:	2140      	movs	r1, #64	@ 0x40
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 feb0 	bl	8004fb8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004258:	e041      	b.n	80042de <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	099b      	lsrs	r3, r3, #6
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d029      	beq.n	80042ba <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800426e:	2b00      	cmp	r3, #0
 8004270:	d023      	beq.n	80042ba <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d119      	bne.n	80042b0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800428a:	d027      	beq.n	80042dc <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004294:	d108      	bne.n	80042a8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042a4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80042a6:	e019      	b.n	80042dc <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fb5f 	bl	800496c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80042ae:	e015      	b.n	80042dc <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80042b0:	2140      	movs	r1, #64	@ 0x40
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fe80 	bl	8004fb8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80042b8:	e010      	b.n	80042dc <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00b      	beq.n	80042de <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fbe5 	bl	8004aa4 <I2C_ITMasterCplt>
 80042da:	e000      	b.n	80042de <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80042dc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80042fc:	4b92      	ldr	r3, [pc, #584]	@ (8004548 <I2C_Mem_ISR_DMA+0x258>)
 80042fe:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <I2C_Mem_ISR_DMA+0x1e>
 800430a:	2302      	movs	r3, #2
 800430c:	e118      	b.n	8004540 <I2C_Mem_ISR_DMA+0x250>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d017      	beq.n	8004352 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800432a:	2b00      	cmp	r3, #0
 800432c:	d011      	beq.n	8004352 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2210      	movs	r2, #16
 8004334:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433a:	f043 0204 	orr.w	r2, r3, #4
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004342:	2120      	movs	r1, #32
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f001 f9e7 	bl	8005718 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 ff4b 	bl	80051e6 <I2C_Flush_TXDR>
 8004350:	e0f1      	b.n	8004536 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00f      	beq.n	800437e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004372:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800437a:	651a      	str	r2, [r3, #80]	@ 0x50
 800437c:	e0db      	b.n	8004536 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	09db      	lsrs	r3, r3, #7
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d060      	beq.n	800444c <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	099b      	lsrs	r3, r3, #6
 800438e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004392:	2b00      	cmp	r3, #0
 8004394:	d05a      	beq.n	800444c <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004396:	2101      	movs	r1, #1
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f001 fa41 	bl	8005820 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800439e:	2110      	movs	r1, #16
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f001 f9b9 	bl	8005718 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d048      	beq.n	8004442 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2bff      	cmp	r3, #255	@ 0xff
 80043b8:	d910      	bls.n	80043dc <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	22ff      	movs	r2, #255	@ 0xff
 80043be:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c4:	b299      	uxth	r1, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f001 f96d 	bl	80056b4 <I2C_TransferConfig>
 80043da:	e011      	b.n	8004400 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ea:	b299      	uxth	r1, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	2300      	movs	r3, #0
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f001 f95a 	bl	80056b4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b22      	cmp	r3, #34	@ 0x22
 800441c:	d108      	bne.n	8004430 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800442c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800442e:	e082      	b.n	8004536 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800443e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004440:	e079      	b.n	8004536 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004442:	2140      	movs	r1, #64	@ 0x40
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fdb7 	bl	8004fb8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800444a:	e074      	b.n	8004536 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	099b      	lsrs	r3, r3, #6
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d05e      	beq.n	8004516 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	099b      	lsrs	r3, r3, #6
 800445c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004460:	2b00      	cmp	r3, #0
 8004462:	d058      	beq.n	8004516 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004464:	2101      	movs	r1, #1
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f001 f9da 	bl	8005820 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800446c:	2110      	movs	r1, #16
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f001 f952 	bl	8005718 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b22      	cmp	r3, #34	@ 0x22
 800447e:	d101      	bne.n	8004484 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8004480:	4b32      	ldr	r3, [pc, #200]	@ (800454c <I2C_Mem_ISR_DMA+0x25c>)
 8004482:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	2bff      	cmp	r3, #255	@ 0xff
 800448c:	d910      	bls.n	80044b0 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	22ff      	movs	r2, #255	@ 0xff
 8004492:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004498:	b299      	uxth	r1, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f001 f903 	bl	80056b4 <I2C_TransferConfig>
 80044ae:	e011      	b.n	80044d4 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044be:	b299      	uxth	r1, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f001 f8f0 	bl	80056b4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b22      	cmp	r3, #34	@ 0x22
 80044f0:	d108      	bne.n	8004504 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004500:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004502:	e018      	b.n	8004536 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004512:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004514:	e00f      	b.n	8004536 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fab7 	bl	8004aa4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	80002000 	.word	0x80002000
 800454c:	80002400 	.word	0x80002400

08004550 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <I2C_Slave_ISR_DMA+0x24>
 8004570:	2302      	movs	r3, #2
 8004572:	e0ca      	b.n	800470a <I2C_Slave_ISR_DMA+0x1ba>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004590:	2b00      	cmp	r3, #0
 8004592:	d004      	beq.n	800459e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fb4e 	bl	8004c38 <I2C_ITSlaveCplt>
 800459c:	e0b0      	b.n	8004700 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 809a 	beq.w	80046e0 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8093 	beq.w	80046e0 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0b9b      	lsrs	r3, r3, #14
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d105      	bne.n	80045d2 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	0bdb      	lsrs	r3, r3, #15
 80045ca:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d07f      	beq.n	80046d2 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00d      	beq.n	80045f6 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	0bdb      	lsrs	r3, r3, #15
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80045f2:	2301      	movs	r3, #1
 80045f4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	0b9b      	lsrs	r3, r3, #14
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8004616:	2301      	movs	r3, #1
 8004618:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d128      	bne.n	8004672 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b28      	cmp	r3, #40	@ 0x28
 800462a:	d108      	bne.n	800463e <I2C_Slave_ISR_DMA+0xee>
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004632:	d104      	bne.n	800463e <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fc68 	bl	8004f0c <I2C_ITListenCplt>
 800463c:	e048      	b.n	80046d0 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b29      	cmp	r3, #41	@ 0x29
 8004648:	d10e      	bne.n	8004668 <I2C_Slave_ISR_DMA+0x118>
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004650:	d00a      	beq.n	8004668 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2210      	movs	r2, #16
 8004658:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fdc3 	bl	80051e6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f9c0 	bl	80049e6 <I2C_ITSlaveSeqCplt>
 8004666:	e033      	b.n	80046d0 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2210      	movs	r2, #16
 800466e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004670:	e034      	b.n	80046dc <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2210      	movs	r2, #16
 8004678:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467e:	f043 0204 	orr.w	r2, r3, #4
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800468c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <I2C_Slave_ISR_DMA+0x14c>
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800469a:	d11f      	bne.n	80046dc <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800469c:	7dfb      	ldrb	r3, [r7, #23]
 800469e:	2b21      	cmp	r3, #33	@ 0x21
 80046a0:	d002      	beq.n	80046a8 <I2C_Slave_ISR_DMA+0x158>
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
 80046a4:	2b29      	cmp	r3, #41	@ 0x29
 80046a6:	d103      	bne.n	80046b0 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2221      	movs	r2, #33	@ 0x21
 80046ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80046ae:	e008      	b.n	80046c2 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	2b22      	cmp	r3, #34	@ 0x22
 80046b4:	d002      	beq.n	80046bc <I2C_Slave_ISR_DMA+0x16c>
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80046ba:	d102      	bne.n	80046c2 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2222      	movs	r2, #34	@ 0x22
 80046c0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c6:	4619      	mov	r1, r3
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 fc75 	bl	8004fb8 <I2C_ITError>
      if (treatdmanack == 1U)
 80046ce:	e005      	b.n	80046dc <I2C_Slave_ISR_DMA+0x18c>
 80046d0:	e004      	b.n	80046dc <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2210      	movs	r2, #16
 80046d8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80046da:	e011      	b.n	8004700 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80046dc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80046de:	e00f      	b.n	8004700 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	08db      	lsrs	r3, r3, #3
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d009      	beq.n	8004700 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	08db      	lsrs	r3, r3, #3
 80046f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f8b2 	bl	8004864 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	4608      	mov	r0, r1
 800471e:	4611      	mov	r1, r2
 8004720:	461a      	mov	r2, r3
 8004722:	4603      	mov	r3, r0
 8004724:	817b      	strh	r3, [r7, #10]
 8004726:	460b      	mov	r3, r1
 8004728:	813b      	strh	r3, [r7, #8]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	8979      	ldrh	r1, [r7, #10]
 8004734:	4b20      	ldr	r3, [pc, #128]	@ (80047b8 <I2C_RequestMemoryWrite+0xa4>)
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 ffb9 	bl	80056b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	69b9      	ldr	r1, [r7, #24]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fe4a 	bl	80053e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e02c      	b.n	80047b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d105      	bne.n	8004768 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800475c:	893b      	ldrh	r3, [r7, #8]
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	629a      	str	r2, [r3, #40]	@ 0x28
 8004766:	e015      	b.n	8004794 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004768:	893b      	ldrh	r3, [r7, #8]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	b29b      	uxth	r3, r3
 800476e:	b2da      	uxtb	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	69b9      	ldr	r1, [r7, #24]
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 fe30 	bl	80053e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e012      	b.n	80047b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800478a:	893b      	ldrh	r3, [r7, #8]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2200      	movs	r2, #0
 800479c:	2180      	movs	r1, #128	@ 0x80
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fdc5 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	80002000 	.word	0x80002000

080047bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	4608      	mov	r0, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	461a      	mov	r2, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	817b      	strh	r3, [r7, #10]
 80047ce:	460b      	mov	r3, r1
 80047d0:	813b      	strh	r3, [r7, #8]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80047d6:	88fb      	ldrh	r3, [r7, #6]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	8979      	ldrh	r1, [r7, #10]
 80047dc:	4b20      	ldr	r3, [pc, #128]	@ (8004860 <I2C_RequestMemoryRead+0xa4>)
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	2300      	movs	r3, #0
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 ff66 	bl	80056b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	69b9      	ldr	r1, [r7, #24]
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fdf7 	bl	80053e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e02c      	b.n	8004856 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d105      	bne.n	800480e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004802:	893b      	ldrh	r3, [r7, #8]
 8004804:	b2da      	uxtb	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	629a      	str	r2, [r3, #40]	@ 0x28
 800480c:	e015      	b.n	800483a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800480e:	893b      	ldrh	r3, [r7, #8]
 8004810:	0a1b      	lsrs	r3, r3, #8
 8004812:	b29b      	uxth	r3, r3
 8004814:	b2da      	uxtb	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	69b9      	ldr	r1, [r7, #24]
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fddd 	bl	80053e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e012      	b.n	8004856 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004830:	893b      	ldrh	r3, [r7, #8]
 8004832:	b2da      	uxtb	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2200      	movs	r2, #0
 8004842:	2140      	movs	r1, #64	@ 0x40
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fd72 	bl	800532e <I2C_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	80002000 	.word	0x80002000

08004864 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004874:	b2db      	uxtb	r3, r3
 8004876:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800487a:	2b28      	cmp	r3, #40	@ 0x28
 800487c:	d16a      	bne.n	8004954 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	b29b      	uxth	r3, r3
 8004898:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800489c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048aa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80048b8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d138      	bne.n	8004934 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80048c2:	897b      	ldrh	r3, [r7, #10]
 80048c4:	09db      	lsrs	r3, r3, #7
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	89bb      	ldrh	r3, [r7, #12]
 80048ca:	4053      	eors	r3, r2
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f003 0306 	and.w	r3, r3, #6
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d11c      	bne.n	8004910 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80048d6:	897b      	ldrh	r3, [r7, #10]
 80048d8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d13b      	bne.n	8004964 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2208      	movs	r2, #8
 80048f8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004902:	89ba      	ldrh	r2, [r7, #12]
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	4619      	mov	r1, r3
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff fac4 	bl	8003e96 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800490e:	e029      	b.n	8004964 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004910:	893b      	ldrh	r3, [r7, #8]
 8004912:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004914:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 ff81 	bl	8005820 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004926:	89ba      	ldrh	r2, [r7, #12]
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	4619      	mov	r1, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff fab2 	bl	8003e96 <HAL_I2C_AddrCallback>
}
 8004932:	e017      	b.n	8004964 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004934:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 ff71 	bl	8005820 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004946:	89ba      	ldrh	r2, [r7, #12]
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	4619      	mov	r1, r3
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff faa2 	bl	8003e96 <HAL_I2C_AddrCallback>
}
 8004952:	e007      	b.n	8004964 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2208      	movs	r2, #8
 800495a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b21      	cmp	r3, #33	@ 0x21
 8004986:	d115      	bne.n	80049b4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2211      	movs	r2, #17
 8004994:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800499c:	2101      	movs	r1, #1
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 ff3e 	bl	8005820 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff fa4a 	bl	8003e46 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049b2:	e014      	b.n	80049de <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2212      	movs	r2, #18
 80049c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80049c8:	2102      	movs	r1, #2
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 ff28 	bl	8005820 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fa3e 	bl	8003e5a <HAL_I2C_MasterRxCpltCallback>
}
 80049de:	bf00      	nop
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	0b9b      	lsrs	r3, r3, #14
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e00d      	b.n	8004a38 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	0bdb      	lsrs	r3, r3, #15
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a36:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b29      	cmp	r3, #41	@ 0x29
 8004a42:	d112      	bne.n	8004a6a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2228      	movs	r2, #40	@ 0x28
 8004a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2221      	movs	r2, #33	@ 0x21
 8004a50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a52:	2101      	movs	r1, #1
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fee3 	bl	8005820 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff fa03 	bl	8003e6e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a68:	e017      	b.n	8004a9a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a74:	d111      	bne.n	8004a9a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2228      	movs	r2, #40	@ 0x28
 8004a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2222      	movs	r2, #34	@ 0x22
 8004a82:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a84:	2102      	movs	r1, #2
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 feca 	bl	8005820 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff f9f4 	bl	8003e82 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b21      	cmp	r3, #33	@ 0x21
 8004ac4:	d107      	bne.n	8004ad6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fea9 	bl	8005820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2211      	movs	r2, #17
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ad4:	e00c      	b.n	8004af0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b22      	cmp	r3, #34	@ 0x22
 8004ae0:	d106      	bne.n	8004af0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004ae2:	2102      	movs	r1, #2
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fe9b 	bl	8005820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2212      	movs	r2, #18
 8004aee:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b4d      	ldr	r3, [pc, #308]	@ (8004c30 <I2C_ITMasterCplt+0x18c>)
 8004afc:	400b      	ands	r3, r1
 8004afe:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a4a      	ldr	r2, [pc, #296]	@ (8004c34 <I2C_ITMasterCplt+0x190>)
 8004b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d009      	beq.n	8004b2c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b24:	f043 0204 	orr.w	r2, r3, #4
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b60      	cmp	r3, #96	@ 0x60
 8004b36:	d10b      	bne.n	8004b50 <I2C_ITMasterCplt+0xac>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	089b      	lsrs	r3, r3, #2
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fb48 	bl	80051e6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b60      	cmp	r3, #96	@ 0x60
 8004b66:	d002      	beq.n	8004b6e <I2C_ITMasterCplt+0xca>
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d006      	beq.n	8004b7c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b72:	4619      	mov	r1, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fa1f 	bl	8004fb8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b7a:	e054      	b.n	8004c26 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b21      	cmp	r3, #33	@ 0x21
 8004b86:	d124      	bne.n	8004bd2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ba0:	d10b      	bne.n	8004bba <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff f987 	bl	8003ec6 <HAL_I2C_MemTxCpltCallback>
}
 8004bb8:	e035      	b.n	8004c26 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff f93b 	bl	8003e46 <HAL_I2C_MasterTxCpltCallback>
}
 8004bd0:	e029      	b.n	8004c26 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b22      	cmp	r3, #34	@ 0x22
 8004bdc:	d123      	bne.n	8004c26 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b40      	cmp	r3, #64	@ 0x40
 8004bf6:	d10b      	bne.n	8004c10 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7fd f8e5 	bl	8001dd8 <HAL_I2C_MemRxCpltCallback>
}
 8004c0e:	e00a      	b.n	8004c26 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff f91a 	bl	8003e5a <HAL_I2C_MasterRxCpltCallback>
}
 8004c26:	bf00      	nop
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	fe00e800 	.word	0xfe00e800
 8004c34:	ffff0000 	.word	0xffff0000

08004c38 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c5a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2220      	movs	r2, #32
 8004c62:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c64:	7afb      	ldrb	r3, [r7, #11]
 8004c66:	2b21      	cmp	r3, #33	@ 0x21
 8004c68:	d002      	beq.n	8004c70 <I2C_ITSlaveCplt+0x38>
 8004c6a:	7afb      	ldrb	r3, [r7, #11]
 8004c6c:	2b29      	cmp	r3, #41	@ 0x29
 8004c6e:	d108      	bne.n	8004c82 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004c70:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fdd3 	bl	8005820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2221      	movs	r2, #33	@ 0x21
 8004c7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c80:	e019      	b.n	8004cb6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c82:	7afb      	ldrb	r3, [r7, #11]
 8004c84:	2b22      	cmp	r3, #34	@ 0x22
 8004c86:	d002      	beq.n	8004c8e <I2C_ITSlaveCplt+0x56>
 8004c88:	7afb      	ldrb	r3, [r7, #11]
 8004c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c8c:	d108      	bne.n	8004ca0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004c8e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fdc4 	bl	8005820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2222      	movs	r2, #34	@ 0x22
 8004c9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c9e:	e00a      	b.n	8004cb6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004ca0:	7afb      	ldrb	r3, [r7, #11]
 8004ca2:	2b28      	cmp	r3, #40	@ 0x28
 8004ca4:	d107      	bne.n	8004cb6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004ca6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fdb8 	bl	8005820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cc4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8004f04 <I2C_ITSlaveCplt+0x2cc>)
 8004cd2:	400b      	ands	r3, r1
 8004cd4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fa85 	bl	80051e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	0b9b      	lsrs	r3, r3, #14
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d013      	beq.n	8004d10 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004cf6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d020      	beq.n	8004d42 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d0e:	e018      	b.n	8004d42 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	0bdb      	lsrs	r3, r3, #15
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d012      	beq.n	8004d42 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d2a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d006      	beq.n	8004d42 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	089b      	lsrs	r3, r3, #2
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d020      	beq.n	8004d90 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f023 0304 	bic.w	r3, r3, #4
 8004d54:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00c      	beq.n	8004d90 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	f043 0204 	orr.w	r2, r3, #4
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d04a      	beq.n	8004e48 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	091b      	lsrs	r3, r3, #4
 8004db6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d044      	beq.n	8004e48 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d128      	bne.n	8004e1a <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b28      	cmp	r3, #40	@ 0x28
 8004dd2:	d108      	bne.n	8004de6 <I2C_ITSlaveCplt+0x1ae>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dda:	d104      	bne.n	8004de6 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ddc:	6979      	ldr	r1, [r7, #20]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f894 	bl	8004f0c <I2C_ITListenCplt>
 8004de4:	e030      	b.n	8004e48 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b29      	cmp	r3, #41	@ 0x29
 8004df0:	d10e      	bne.n	8004e10 <I2C_ITSlaveCplt+0x1d8>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004df8:	d00a      	beq.n	8004e10 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2210      	movs	r2, #16
 8004e00:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f9ef 	bl	80051e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff fdec 	bl	80049e6 <I2C_ITSlaveSeqCplt>
 8004e0e:	e01b      	b.n	8004e48 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2210      	movs	r2, #16
 8004e16:	61da      	str	r2, [r3, #28]
 8004e18:	e016      	b.n	8004e48 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2210      	movs	r2, #16
 8004e20:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e26:	f043 0204 	orr.w	r2, r3, #4
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <I2C_ITSlaveCplt+0x204>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e3a:	d105      	bne.n	8004e48 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e40:	4619      	mov	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f8b8 	bl	8004fb8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d010      	beq.n	8004e80 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f8a7 	bl	8004fb8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b28      	cmp	r3, #40	@ 0x28
 8004e74:	d141      	bne.n	8004efa <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004e76:	6979      	ldr	r1, [r7, #20]
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f847 	bl	8004f0c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e7e:	e03c      	b.n	8004efa <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e88:	d014      	beq.n	8004eb4 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff fdab 	bl	80049e6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a1d      	ldr	r2, [pc, #116]	@ (8004f08 <I2C_ITSlaveCplt+0x2d0>)
 8004e94:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff f800 	bl	8003eb2 <HAL_I2C_ListenCpltCallback>
}
 8004eb2:	e022      	b.n	8004efa <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b22      	cmp	r3, #34	@ 0x22
 8004ebe:	d10e      	bne.n	8004ede <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fe ffd3 	bl	8003e82 <HAL_I2C_SlaveRxCpltCallback>
}
 8004edc:	e00d      	b.n	8004efa <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fe ffba 	bl	8003e6e <HAL_I2C_SlaveTxCpltCallback>
}
 8004efa:	bf00      	nop
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	fe00e800 	.word	0xfe00e800
 8004f08:	ffff0000 	.word	0xffff0000

08004f0c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a26      	ldr	r2, [pc, #152]	@ (8004fb4 <I2C_ITListenCplt+0xa8>)
 8004f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	089b      	lsrs	r3, r3, #2
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d022      	beq.n	8004f8a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d012      	beq.n	8004f8a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f82:	f043 0204 	orr.w	r2, r3, #4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f8a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fc46 	bl	8005820 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2210      	movs	r2, #16
 8004f9a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fe ff84 	bl	8003eb2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004faa:	bf00      	nop
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	ffff0000 	.word	0xffff0000

08004fb8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a6d      	ldr	r2, [pc, #436]	@ (800518c <I2C_ITError+0x1d4>)
 8004fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	2b28      	cmp	r3, #40	@ 0x28
 8004fee:	d005      	beq.n	8004ffc <I2C_ITError+0x44>
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	2b29      	cmp	r3, #41	@ 0x29
 8004ff4:	d002      	beq.n	8004ffc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ffa:	d10b      	bne.n	8005014 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ffc:	2103      	movs	r1, #3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fc0e 	bl	8005820 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2228      	movs	r2, #40	@ 0x28
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a60      	ldr	r2, [pc, #384]	@ (8005190 <I2C_ITError+0x1d8>)
 8005010:	635a      	str	r2, [r3, #52]	@ 0x34
 8005012:	e030      	b.n	8005076 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005014:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fc01 	bl	8005820 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f8e1 	bl	80051e6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b60      	cmp	r3, #96	@ 0x60
 800502e:	d01f      	beq.n	8005070 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b20      	cmp	r3, #32
 8005044:	d114      	bne.n	8005070 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b10      	cmp	r3, #16
 8005052:	d109      	bne.n	8005068 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2210      	movs	r2, #16
 800505a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005060:	f043 0204 	orr.w	r2, r3, #4
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2220      	movs	r2, #32
 800506e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005080:	2b00      	cmp	r3, #0
 8005082:	d039      	beq.n	80050f8 <I2C_ITError+0x140>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b11      	cmp	r3, #17
 8005088:	d002      	beq.n	8005090 <I2C_ITError+0xd8>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b21      	cmp	r3, #33	@ 0x21
 800508e:	d133      	bne.n	80050f8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800509a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800509e:	d107      	bne.n	80050b0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe f82d 	bl	8003114 <HAL_DMA_GetState>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d017      	beq.n	80050f0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c4:	4a33      	ldr	r2, [pc, #204]	@ (8005194 <I2C_ITError+0x1dc>)
 80050c6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fd ff07 	bl	8002ee8 <HAL_DMA_Abort_IT>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d04d      	beq.n	800517c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050ea:	4610      	mov	r0, r2
 80050ec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050ee:	e045      	b.n	800517c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f851 	bl	8005198 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050f6:	e041      	b.n	800517c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d039      	beq.n	8005174 <I2C_ITError+0x1bc>
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b12      	cmp	r3, #18
 8005104:	d002      	beq.n	800510c <I2C_ITError+0x154>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b22      	cmp	r3, #34	@ 0x22
 800510a:	d133      	bne.n	8005174 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800511a:	d107      	bne.n	800512c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800512a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005130:	4618      	mov	r0, r3
 8005132:	f7fd ffef 	bl	8003114 <HAL_DMA_GetState>
 8005136:	4603      	mov	r3, r0
 8005138:	2b01      	cmp	r3, #1
 800513a:	d017      	beq.n	800516c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005140:	4a14      	ldr	r2, [pc, #80]	@ (8005194 <I2C_ITError+0x1dc>)
 8005142:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005150:	4618      	mov	r0, r3
 8005152:	f7fd fec9 	bl	8002ee8 <HAL_DMA_Abort_IT>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d011      	beq.n	8005180 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005166:	4610      	mov	r0, r2
 8005168:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800516a:	e009      	b.n	8005180 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f813 	bl	8005198 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005172:	e005      	b.n	8005180 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f80f 	bl	8005198 <I2C_TreatErrorCallback>
  }
}
 800517a:	e002      	b.n	8005182 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800517c:	bf00      	nop
 800517e:	e000      	b.n	8005182 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005180:	bf00      	nop
}
 8005182:	bf00      	nop
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	ffff0000 	.word	0xffff0000
 8005190:	08003f03 	.word	0x08003f03
 8005194:	080052f3 	.word	0x080052f3

08005198 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b60      	cmp	r3, #96	@ 0x60
 80051aa:	d10e      	bne.n	80051ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fe fe93 	bl	8003eee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051c8:	e009      	b.n	80051de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7fe fe7e 	bl	8003eda <HAL_I2C_ErrorCallback>
}
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d103      	bne.n	8005204 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2200      	movs	r2, #0
 8005202:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b01      	cmp	r3, #1
 8005210:	d007      	beq.n	8005222 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699a      	ldr	r2, [r3, #24]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0201 	orr.w	r2, r2, #1
 8005220:	619a      	str	r2, [r3, #24]
  }
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800524a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d104      	bne.n	8005260 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005256:	2120      	movs	r1, #32
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fa5d 	bl	8005718 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800525e:	e02d      	b.n	80052bc <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005268:	441a      	add	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005272:	b29b      	uxth	r3, r3
 8005274:	2bff      	cmp	r3, #255	@ 0xff
 8005276:	d903      	bls.n	8005280 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	22ff      	movs	r2, #255	@ 0xff
 800527c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800527e:	e004      	b.n	800528a <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3324      	adds	r3, #36	@ 0x24
 8005294:	4619      	mov	r1, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80052a0:	f7fd fd4e 	bl	8002d40 <HAL_DMA_Start_IT>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d004      	beq.n	80052b4 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80052aa:	2110      	movs	r1, #16
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff fe83 	bl	8004fb8 <I2C_ITError>
}
 80052b2:	e003      	b.n	80052bc <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80052b4:	2140      	movs	r1, #64	@ 0x40
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 fa2e 	bl	8005718 <I2C_Enable_IRQ>
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052e0:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80052e2:	2110      	movs	r1, #16
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f7ff fe67 	bl	8004fb8 <I2C_ITError>
}
 80052ea:	bf00      	nop
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530c:	2200      	movs	r2, #0
 800530e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800531c:	2200      	movs	r2, #0
 800531e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff ff39 	bl	8005198 <I2C_TreatErrorCallback>
}
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	4613      	mov	r3, r2
 800533c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800533e:	e03b      	b.n	80053b8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f8d5 	bl	80054f4 <I2C_IsErrorOccurred>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e041      	b.n	80053d8 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800535a:	d02d      	beq.n	80053b8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535c:	f7fd fb3a 	bl	80029d4 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d302      	bcc.n	8005372 <I2C_WaitOnFlagUntilTimeout+0x44>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d122      	bne.n	80053b8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4013      	ands	r3, r2
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	bf0c      	ite	eq
 8005382:	2301      	moveq	r3, #1
 8005384:	2300      	movne	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	429a      	cmp	r2, r3
 800538e:	d113      	bne.n	80053b8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005394:	f043 0220 	orr.w	r2, r3, #32
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e00f      	b.n	80053d8 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4013      	ands	r3, r2
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	bf0c      	ite	eq
 80053c8:	2301      	moveq	r3, #1
 80053ca:	2300      	movne	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d0b4      	beq.n	8005340 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053ec:	e033      	b.n	8005456 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 f87e 	bl	80054f4 <I2C_IsErrorOccurred>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e031      	b.n	8005466 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005408:	d025      	beq.n	8005456 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540a:	f7fd fae3 	bl	80029d4 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	429a      	cmp	r2, r3
 8005418:	d302      	bcc.n	8005420 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d11a      	bne.n	8005456 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b02      	cmp	r3, #2
 800542c:	d013      	beq.n	8005456 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005432:	f043 0220 	orr.w	r2, r3, #32
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e007      	b.n	8005466 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b02      	cmp	r3, #2
 8005462:	d1c4      	bne.n	80053ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800547a:	e02f      	b.n	80054dc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f837 	bl	80054f4 <I2C_IsErrorOccurred>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e02d      	b.n	80054ec <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005490:	f7fd faa0 	bl	80029d4 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	429a      	cmp	r2, r3
 800549e:	d302      	bcc.n	80054a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d11a      	bne.n	80054dc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d013      	beq.n	80054dc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b8:	f043 0220 	orr.w	r2, r3, #32
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e007      	b.n	80054ec <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d1c8      	bne.n	800547c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	@ 0x28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	2b00      	cmp	r3, #0
 800551e:	d068      	beq.n	80055f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2210      	movs	r2, #16
 8005526:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005528:	e049      	b.n	80055be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005530:	d045      	beq.n	80055be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005532:	f7fd fa4f 	bl	80029d4 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	429a      	cmp	r2, r3
 8005540:	d302      	bcc.n	8005548 <I2C_IsErrorOccurred+0x54>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d13a      	bne.n	80055be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005552:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800555a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800556a:	d121      	bne.n	80055b0 <I2C_IsErrorOccurred+0xbc>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005572:	d01d      	beq.n	80055b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005574:	7cfb      	ldrb	r3, [r7, #19]
 8005576:	2b20      	cmp	r3, #32
 8005578:	d01a      	beq.n	80055b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005588:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800558a:	f7fd fa23 	bl	80029d4 <HAL_GetTick>
 800558e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005590:	e00e      	b.n	80055b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005592:	f7fd fa1f 	bl	80029d4 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b19      	cmp	r3, #25
 800559e:	d907      	bls.n	80055b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	f043 0320 	orr.w	r3, r3, #32
 80055a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80055ae:	e006      	b.n	80055be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b20      	cmp	r3, #32
 80055bc:	d1e9      	bne.n	8005592 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d003      	beq.n	80055d4 <I2C_IsErrorOccurred+0xe0>
 80055cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0aa      	beq.n	800552a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80055d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d103      	bne.n	80055e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2220      	movs	r2, #32
 80055e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	f043 0304 	orr.w	r3, r3, #4
 80055ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005614:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	f043 0308 	orr.w	r3, r3, #8
 800562c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005636:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00b      	beq.n	8005660 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	f043 0302 	orr.w	r3, r3, #2
 800564e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005658:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01c      	beq.n	80056a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff fdbc 	bl	80051e6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6859      	ldr	r1, [r3, #4]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <I2C_IsErrorOccurred+0x1bc>)
 800567a:	400b      	ands	r3, r1
 800567c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	431a      	orrs	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80056a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3728      	adds	r7, #40	@ 0x28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	fe00e800 	.word	0xfe00e800

080056b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	607b      	str	r3, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	817b      	strh	r3, [r7, #10]
 80056c2:	4613      	mov	r3, r2
 80056c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056c6:	897b      	ldrh	r3, [r7, #10]
 80056c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056cc:	7a7b      	ldrb	r3, [r7, #9]
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	4313      	orrs	r3, r2
 80056de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	0d5b      	lsrs	r3, r3, #21
 80056ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80056f2:	4b08      	ldr	r3, [pc, #32]	@ (8005714 <I2C_TransferConfig+0x60>)
 80056f4:	430b      	orrs	r3, r1
 80056f6:	43db      	mvns	r3, r3
 80056f8:	ea02 0103 	and.w	r1, r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	430a      	orrs	r2, r1
 8005704:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	03ff63ff 	.word	0x03ff63ff

08005718 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572c:	4a39      	ldr	r2, [pc, #228]	@ (8005814 <I2C_Enable_IRQ+0xfc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d032      	beq.n	8005798 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005736:	4a38      	ldr	r2, [pc, #224]	@ (8005818 <I2C_Enable_IRQ+0x100>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d02d      	beq.n	8005798 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005740:	4a36      	ldr	r2, [pc, #216]	@ (800581c <I2C_Enable_IRQ+0x104>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d028      	beq.n	8005798 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005746:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800574a:	2b00      	cmp	r3, #0
 800574c:	da03      	bge.n	8005756 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005754:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005756:	887b      	ldrh	r3, [r7, #2]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005766:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005768:	887b      	ldrh	r3, [r7, #2]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005778:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800577a:	887b      	ldrh	r3, [r7, #2]
 800577c:	2b10      	cmp	r3, #16
 800577e:	d103      	bne.n	8005788 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005786:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005788:	887b      	ldrh	r3, [r7, #2]
 800578a:	2b20      	cmp	r3, #32
 800578c:	d133      	bne.n	80057f6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f043 0320 	orr.w	r3, r3, #32
 8005794:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005796:	e02e      	b.n	80057f6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005798:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800579c:	2b00      	cmp	r3, #0
 800579e:	da03      	bge.n	80057a8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80057a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80057a8:	887b      	ldrh	r3, [r7, #2]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80057b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80057ba:	887b      	ldrh	r3, [r7, #2]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80057ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80057cc:	887b      	ldrh	r3, [r7, #2]
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	d103      	bne.n	80057da <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80057d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80057da:	887b      	ldrh	r3, [r7, #2]
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d103      	bne.n	80057e8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80057e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80057e8:	887b      	ldrh	r3, [r7, #2]
 80057ea:	2b40      	cmp	r3, #64	@ 0x40
 80057ec:	d103      	bne.n	80057f6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057f4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6819      	ldr	r1, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	430a      	orrs	r2, r1
 8005804:	601a      	str	r2, [r3, #0]
}
 8005806:	bf00      	nop
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	0800410b 	.word	0x0800410b
 8005818:	08004551 	.word	0x08004551
 800581c:	080042f1 	.word	0x080042f1

08005820 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005830:	887b      	ldrh	r3, [r7, #2]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00f      	beq.n	800585a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005840:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005848:	b2db      	uxtb	r3, r3
 800584a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800584e:	2b28      	cmp	r3, #40	@ 0x28
 8005850:	d003      	beq.n	800585a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005858:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800585a:	887b      	ldrh	r3, [r7, #2]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00f      	beq.n	8005884 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800586a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005872:	b2db      	uxtb	r3, r3
 8005874:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005878:	2b28      	cmp	r3, #40	@ 0x28
 800587a:	d003      	beq.n	8005884 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005882:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005884:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005888:	2b00      	cmp	r3, #0
 800588a:	da03      	bge.n	8005894 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005892:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005894:	887b      	ldrh	r3, [r7, #2]
 8005896:	2b10      	cmp	r3, #16
 8005898:	d103      	bne.n	80058a2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80058a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80058a2:	887b      	ldrh	r3, [r7, #2]
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d103      	bne.n	80058b0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f043 0320 	orr.w	r3, r3, #32
 80058ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80058b0:	887b      	ldrh	r3, [r7, #2]
 80058b2:	2b40      	cmp	r3, #64	@ 0x40
 80058b4:	d103      	bne.n	80058be <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058bc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6819      	ldr	r1, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	43da      	mvns	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	400a      	ands	r2, r1
 80058ce:	601a      	str	r2, [r3, #0]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	d138      	bne.n	8005964 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e032      	b.n	8005966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2224      	movs	r2, #36	@ 0x24
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800592e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6819      	ldr	r1, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	e000      	b.n	8005966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b20      	cmp	r3, #32
 8005986:	d139      	bne.n	80059fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800598e:	2b01      	cmp	r3, #1
 8005990:	d101      	bne.n	8005996 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005992:	2302      	movs	r3, #2
 8005994:	e033      	b.n	80059fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2224      	movs	r2, #36	@ 0x24
 80059a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0201 	bic.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80059c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e000      	b.n	80059fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80059fc:	2302      	movs	r3, #2
  }
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e041      	b.n	8005aa0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8005a24:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f245 5255 	movw	r2, #21845	@ 0x5555
 8005a2e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6852      	ldr	r2, [r2, #4]
 8005a38:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6892      	ldr	r2, [r2, #8]
 8005a42:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005a44:	f7fc ffc6 	bl	80029d4 <HAL_GetTick>
 8005a48:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005a4a:	e00f      	b.n	8005a6c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005a4c:	f7fc ffc2 	bl	80029d4 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b31      	cmp	r3, #49	@ 0x31
 8005a58:	d908      	bls.n	8005a6c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e019      	b.n	8005aa0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e8      	bne.n	8005a4c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d005      	beq.n	8005a94 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	68d2      	ldr	r2, [r2, #12]
 8005a90:	611a      	str	r2, [r3, #16]
 8005a92:	e004      	b.n	8005a9e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005ab8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d141      	bne.n	8005b5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ae2:	d131      	bne.n	8005b48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ae4:	4b47      	ldr	r3, [pc, #284]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aea:	4a46      	ldr	r2, [pc, #280]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005af0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005af4:	4b43      	ldr	r3, [pc, #268]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005afc:	4a41      	ldr	r2, [pc, #260]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b04:	4b40      	ldr	r3, [pc, #256]	@ (8005c08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2232      	movs	r2, #50	@ 0x32
 8005b0a:	fb02 f303 	mul.w	r3, r2, r3
 8005b0e:	4a3f      	ldr	r2, [pc, #252]	@ (8005c0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b10:	fba2 2303 	umull	r2, r3, r2, r3
 8005b14:	0c9b      	lsrs	r3, r3, #18
 8005b16:	3301      	adds	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b1a:	e002      	b.n	8005b22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b22:	4b38      	ldr	r3, [pc, #224]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b2e:	d102      	bne.n	8005b36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f2      	bne.n	8005b1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b36:	4b33      	ldr	r3, [pc, #204]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b42:	d158      	bne.n	8005bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e057      	b.n	8005bf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b48:	4b2e      	ldr	r3, [pc, #184]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b4e:	4a2d      	ldr	r2, [pc, #180]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005b58:	e04d      	b.n	8005bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b60:	d141      	bne.n	8005be6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b62:	4b28      	ldr	r3, [pc, #160]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b6e:	d131      	bne.n	8005bd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b70:	4b24      	ldr	r3, [pc, #144]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b76:	4a23      	ldr	r2, [pc, #140]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b80:	4b20      	ldr	r3, [pc, #128]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b88:	4a1e      	ldr	r2, [pc, #120]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b90:	4b1d      	ldr	r3, [pc, #116]	@ (8005c08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2232      	movs	r2, #50	@ 0x32
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
 8005b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8005c0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba0:	0c9b      	lsrs	r3, r3, #18
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ba6:	e002      	b.n	8005bae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bae:	4b15      	ldr	r3, [pc, #84]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bba:	d102      	bne.n	8005bc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1f2      	bne.n	8005ba8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bc2:	4b10      	ldr	r3, [pc, #64]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bce:	d112      	bne.n	8005bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e011      	b.n	8005bf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bda:	4a0a      	ldr	r2, [pc, #40]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005be0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005be4:	e007      	b.n	8005bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005be6:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005bee:	4a05      	ldr	r2, [pc, #20]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bf4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	40007000 	.word	0x40007000
 8005c08:	20000020 	.word	0x20000020
 8005c0c:	431bde83 	.word	0x431bde83

08005c10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005c14:	4b05      	ldr	r3, [pc, #20]	@ (8005c2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	4a04      	ldr	r2, [pc, #16]	@ (8005c2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c1e:	6093      	str	r3, [r2, #8]
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40007000 	.word	0x40007000

08005c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e2fe      	b.n	8006240 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d075      	beq.n	8005d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c4e:	4b97      	ldr	r3, [pc, #604]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 030c 	and.w	r3, r3, #12
 8005c56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c58:	4b94      	ldr	r3, [pc, #592]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	2b0c      	cmp	r3, #12
 8005c66:	d102      	bne.n	8005c6e <HAL_RCC_OscConfig+0x3e>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d002      	beq.n	8005c74 <HAL_RCC_OscConfig+0x44>
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d10b      	bne.n	8005c8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c74:	4b8d      	ldr	r3, [pc, #564]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d05b      	beq.n	8005d38 <HAL_RCC_OscConfig+0x108>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d157      	bne.n	8005d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e2d9      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c94:	d106      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x74>
 8005c96:	4b85      	ldr	r3, [pc, #532]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a84      	ldr	r2, [pc, #528]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e01d      	b.n	8005ce0 <HAL_RCC_OscConfig+0xb0>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cac:	d10c      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x98>
 8005cae:	4b7f      	ldr	r3, [pc, #508]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a7e      	ldr	r2, [pc, #504]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	4b7c      	ldr	r3, [pc, #496]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a7b      	ldr	r2, [pc, #492]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	e00b      	b.n	8005ce0 <HAL_RCC_OscConfig+0xb0>
 8005cc8:	4b78      	ldr	r3, [pc, #480]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a77      	ldr	r2, [pc, #476]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	4b75      	ldr	r3, [pc, #468]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a74      	ldr	r2, [pc, #464]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d013      	beq.n	8005d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce8:	f7fc fe74 	bl	80029d4 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf0:	f7fc fe70 	bl	80029d4 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b64      	cmp	r3, #100	@ 0x64
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e29e      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d02:	4b6a      	ldr	r3, [pc, #424]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0f0      	beq.n	8005cf0 <HAL_RCC_OscConfig+0xc0>
 8005d0e:	e014      	b.n	8005d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d10:	f7fc fe60 	bl	80029d4 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d18:	f7fc fe5c 	bl	80029d4 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b64      	cmp	r3, #100	@ 0x64
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e28a      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d2a:	4b60      	ldr	r3, [pc, #384]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f0      	bne.n	8005d18 <HAL_RCC_OscConfig+0xe8>
 8005d36:	e000      	b.n	8005d3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d075      	beq.n	8005e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d46:	4b59      	ldr	r3, [pc, #356]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d50:	4b56      	ldr	r3, [pc, #344]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f003 0303 	and.w	r3, r3, #3
 8005d58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b0c      	cmp	r3, #12
 8005d5e:	d102      	bne.n	8005d66 <HAL_RCC_OscConfig+0x136>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d002      	beq.n	8005d6c <HAL_RCC_OscConfig+0x13c>
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d11f      	bne.n	8005dac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d005      	beq.n	8005d84 <HAL_RCC_OscConfig+0x154>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e25d      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d84:	4b49      	ldr	r3, [pc, #292]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	061b      	lsls	r3, r3, #24
 8005d92:	4946      	ldr	r1, [pc, #280]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d98:	4b45      	ldr	r3, [pc, #276]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fc f9e5 	bl	800216c <HAL_InitTick>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d043      	beq.n	8005e30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e249      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d023      	beq.n	8005dfc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005db4:	4b3d      	ldr	r3, [pc, #244]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a3c      	ldr	r2, [pc, #240]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fc fe08 	bl	80029d4 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dc8:	f7fc fe04 	bl	80029d4 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e232      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dda:	4b34      	ldr	r3, [pc, #208]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de6:	4b31      	ldr	r3, [pc, #196]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	061b      	lsls	r3, r3, #24
 8005df4:	492d      	ldr	r1, [pc, #180]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	604b      	str	r3, [r1, #4]
 8005dfa:	e01a      	b.n	8005e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a2a      	ldr	r2, [pc, #168]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005e02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e08:	f7fc fde4 	bl	80029d4 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e10:	f7fc fde0 	bl	80029d4 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e20e      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e22:	4b22      	ldr	r3, [pc, #136]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x1e0>
 8005e2e:	e000      	b.n	8005e32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d041      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d01c      	beq.n	8005e80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e46:	4b19      	ldr	r3, [pc, #100]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e4c:	4a17      	ldr	r2, [pc, #92]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e56:	f7fc fdbd 	bl	80029d4 <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e5e:	f7fc fdb9 	bl	80029d4 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e1e7      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e70:	4b0e      	ldr	r3, [pc, #56]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0ef      	beq.n	8005e5e <HAL_RCC_OscConfig+0x22e>
 8005e7e:	e020      	b.n	8005ec2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e80:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e86:	4a09      	ldr	r2, [pc, #36]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e90:	f7fc fda0 	bl	80029d4 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e96:	e00d      	b.n	8005eb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e98:	f7fc fd9c 	bl	80029d4 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d906      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e1ca      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
 8005eaa:	bf00      	nop
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005eb4:	4b8c      	ldr	r3, [pc, #560]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1ea      	bne.n	8005e98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 80a6 	beq.w	800601c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ed4:	4b84      	ldr	r3, [pc, #528]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x2b4>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCC_OscConfig+0x2b6>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eea:	4b7f      	ldr	r3, [pc, #508]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eee:	4a7e      	ldr	r2, [pc, #504]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ef4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005f02:	2301      	movs	r3, #1
 8005f04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f06:	4b79      	ldr	r3, [pc, #484]	@ (80060ec <HAL_RCC_OscConfig+0x4bc>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d118      	bne.n	8005f44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f12:	4b76      	ldr	r3, [pc, #472]	@ (80060ec <HAL_RCC_OscConfig+0x4bc>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a75      	ldr	r2, [pc, #468]	@ (80060ec <HAL_RCC_OscConfig+0x4bc>)
 8005f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f1e:	f7fc fd59 	bl	80029d4 <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f26:	f7fc fd55 	bl	80029d4 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e183      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f38:	4b6c      	ldr	r3, [pc, #432]	@ (80060ec <HAL_RCC_OscConfig+0x4bc>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0f0      	beq.n	8005f26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d108      	bne.n	8005f5e <HAL_RCC_OscConfig+0x32e>
 8005f4c:	4b66      	ldr	r3, [pc, #408]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f52:	4a65      	ldr	r2, [pc, #404]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f5c:	e024      	b.n	8005fa8 <HAL_RCC_OscConfig+0x378>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	2b05      	cmp	r3, #5
 8005f64:	d110      	bne.n	8005f88 <HAL_RCC_OscConfig+0x358>
 8005f66:	4b60      	ldr	r3, [pc, #384]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f6c:	4a5e      	ldr	r2, [pc, #376]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005f6e:	f043 0304 	orr.w	r3, r3, #4
 8005f72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f76:	4b5c      	ldr	r3, [pc, #368]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f7c:	4a5a      	ldr	r2, [pc, #360]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005f7e:	f043 0301 	orr.w	r3, r3, #1
 8005f82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f86:	e00f      	b.n	8005fa8 <HAL_RCC_OscConfig+0x378>
 8005f88:	4b57      	ldr	r3, [pc, #348]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8e:	4a56      	ldr	r2, [pc, #344]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005f90:	f023 0301 	bic.w	r3, r3, #1
 8005f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f98:	4b53      	ldr	r3, [pc, #332]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f9e:	4a52      	ldr	r2, [pc, #328]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005fa0:	f023 0304 	bic.w	r3, r3, #4
 8005fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d016      	beq.n	8005fde <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb0:	f7fc fd10 	bl	80029d4 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fb6:	e00a      	b.n	8005fce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb8:	f7fc fd0c 	bl	80029d4 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e138      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fce:	4b46      	ldr	r3, [pc, #280]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0ed      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x388>
 8005fdc:	e015      	b.n	800600a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fde:	f7fc fcf9 	bl	80029d4 <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fe4:	e00a      	b.n	8005ffc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe6:	f7fc fcf5 	bl	80029d4 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e121      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1ed      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800600a:	7ffb      	ldrb	r3, [r7, #31]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d105      	bne.n	800601c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006010:	4b35      	ldr	r3, [pc, #212]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8006012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006014:	4a34      	ldr	r2, [pc, #208]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8006016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800601a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d03c      	beq.n	80060a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01c      	beq.n	800606a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006030:	4b2d      	ldr	r3, [pc, #180]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8006032:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006036:	4a2c      	ldr	r2, [pc, #176]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8006038:	f043 0301 	orr.w	r3, r3, #1
 800603c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006040:	f7fc fcc8 	bl	80029d4 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006048:	f7fc fcc4 	bl	80029d4 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e0f2      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800605a:	4b23      	ldr	r3, [pc, #140]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 800605c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0ef      	beq.n	8006048 <HAL_RCC_OscConfig+0x418>
 8006068:	e01b      	b.n	80060a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800606a:	4b1f      	ldr	r3, [pc, #124]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 800606c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006070:	4a1d      	ldr	r2, [pc, #116]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607a:	f7fc fcab 	bl	80029d4 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006080:	e008      	b.n	8006094 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006082:	f7fc fca7 	bl	80029d4 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e0d5      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006094:	4b14      	ldr	r3, [pc, #80]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 8006096:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1ef      	bne.n	8006082 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 80c9 	beq.w	800623e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060ac:	4b0e      	ldr	r3, [pc, #56]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 030c 	and.w	r3, r3, #12
 80060b4:	2b0c      	cmp	r3, #12
 80060b6:	f000 8083 	beq.w	80061c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d15e      	bne.n	8006180 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c2:	4b09      	ldr	r3, [pc, #36]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a08      	ldr	r2, [pc, #32]	@ (80060e8 <HAL_RCC_OscConfig+0x4b8>)
 80060c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ce:	f7fc fc81 	bl	80029d4 <HAL_GetTick>
 80060d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060d4:	e00c      	b.n	80060f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d6:	f7fc fc7d 	bl	80029d4 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d905      	bls.n	80060f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e0ab      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
 80060e8:	40021000 	.word	0x40021000
 80060ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060f0:	4b55      	ldr	r3, [pc, #340]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1ec      	bne.n	80060d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060fc:	4b52      	ldr	r3, [pc, #328]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	4b52      	ldr	r3, [pc, #328]	@ (800624c <HAL_RCC_OscConfig+0x61c>)
 8006102:	4013      	ands	r3, r2
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6a11      	ldr	r1, [r2, #32]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800610c:	3a01      	subs	r2, #1
 800610e:	0112      	lsls	r2, r2, #4
 8006110:	4311      	orrs	r1, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006116:	0212      	lsls	r2, r2, #8
 8006118:	4311      	orrs	r1, r2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800611e:	0852      	lsrs	r2, r2, #1
 8006120:	3a01      	subs	r2, #1
 8006122:	0552      	lsls	r2, r2, #21
 8006124:	4311      	orrs	r1, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800612a:	0852      	lsrs	r2, r2, #1
 800612c:	3a01      	subs	r2, #1
 800612e:	0652      	lsls	r2, r2, #25
 8006130:	4311      	orrs	r1, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006136:	06d2      	lsls	r2, r2, #27
 8006138:	430a      	orrs	r2, r1
 800613a:	4943      	ldr	r1, [pc, #268]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 800613c:	4313      	orrs	r3, r2
 800613e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006140:	4b41      	ldr	r3, [pc, #260]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a40      	ldr	r2, [pc, #256]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 8006146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800614a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800614c:	4b3e      	ldr	r3, [pc, #248]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	4a3d      	ldr	r2, [pc, #244]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 8006152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006156:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006158:	f7fc fc3c 	bl	80029d4 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006160:	f7fc fc38 	bl	80029d4 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e066      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006172:	4b35      	ldr	r3, [pc, #212]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0f0      	beq.n	8006160 <HAL_RCC_OscConfig+0x530>
 800617e:	e05e      	b.n	800623e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006180:	4b31      	ldr	r3, [pc, #196]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a30      	ldr	r2, [pc, #192]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 8006186:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800618a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618c:	f7fc fc22 	bl	80029d4 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006194:	f7fc fc1e 	bl	80029d4 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e04c      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061a6:	4b28      	ldr	r3, [pc, #160]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80061b2:	4b25      	ldr	r3, [pc, #148]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	4924      	ldr	r1, [pc, #144]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 80061b8:	4b25      	ldr	r3, [pc, #148]	@ (8006250 <HAL_RCC_OscConfig+0x620>)
 80061ba:	4013      	ands	r3, r2
 80061bc:	60cb      	str	r3, [r1, #12]
 80061be:	e03e      	b.n	800623e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e039      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80061cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006248 <HAL_RCC_OscConfig+0x618>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f003 0203 	and.w	r2, r3, #3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d12c      	bne.n	800623a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ea:	3b01      	subs	r3, #1
 80061ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d123      	bne.n	800623a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061fe:	429a      	cmp	r2, r3
 8006200:	d11b      	bne.n	800623a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800620e:	429a      	cmp	r2, r3
 8006210:	d113      	bne.n	800623a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	3b01      	subs	r3, #1
 8006220:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006222:	429a      	cmp	r2, r3
 8006224:	d109      	bne.n	800623a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006230:	085b      	lsrs	r3, r3, #1
 8006232:	3b01      	subs	r3, #1
 8006234:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006236:	429a      	cmp	r2, r3
 8006238:	d001      	beq.n	800623e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40021000 	.word	0x40021000
 800624c:	019f800c 	.word	0x019f800c
 8006250:	feeefffc 	.word	0xfeeefffc

08006254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800625e:	2300      	movs	r3, #0
 8006260:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e11e      	b.n	80064aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800626c:	4b91      	ldr	r3, [pc, #580]	@ (80064b4 <HAL_RCC_ClockConfig+0x260>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d910      	bls.n	800629c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627a:	4b8e      	ldr	r3, [pc, #568]	@ (80064b4 <HAL_RCC_ClockConfig+0x260>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f023 020f 	bic.w	r2, r3, #15
 8006282:	498c      	ldr	r1, [pc, #560]	@ (80064b4 <HAL_RCC_ClockConfig+0x260>)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	4313      	orrs	r3, r2
 8006288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800628a:	4b8a      	ldr	r3, [pc, #552]	@ (80064b4 <HAL_RCC_ClockConfig+0x260>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d001      	beq.n	800629c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e106      	b.n	80064aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d073      	beq.n	8006390 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d129      	bne.n	8006304 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062b0:	4b81      	ldr	r3, [pc, #516]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e0f4      	b.n	80064aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80062c0:	f000 f9d0 	bl	8006664 <RCC_GetSysClockFreqFromPLLSource>
 80062c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	4a7c      	ldr	r2, [pc, #496]	@ (80064bc <HAL_RCC_ClockConfig+0x268>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d93f      	bls.n	800634e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80062ce:	4b7a      	ldr	r3, [pc, #488]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d033      	beq.n	800634e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d12f      	bne.n	800634e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062ee:	4b72      	ldr	r3, [pc, #456]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062f6:	4a70      	ldr	r2, [pc, #448]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 80062f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80062fe:	2380      	movs	r3, #128	@ 0x80
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	e024      	b.n	800634e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d107      	bne.n	800631c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800630c:	4b6a      	ldr	r3, [pc, #424]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d109      	bne.n	800632c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0c6      	b.n	80064aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800631c:	4b66      	ldr	r3, [pc, #408]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0be      	b.n	80064aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800632c:	f000 f8ce 	bl	80064cc <HAL_RCC_GetSysClockFreq>
 8006330:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	4a61      	ldr	r2, [pc, #388]	@ (80064bc <HAL_RCC_ClockConfig+0x268>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d909      	bls.n	800634e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800633a:	4b5f      	ldr	r3, [pc, #380]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006342:	4a5d      	ldr	r2, [pc, #372]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 8006344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006348:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800634a:	2380      	movs	r3, #128	@ 0x80
 800634c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800634e:	4b5a      	ldr	r3, [pc, #360]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f023 0203 	bic.w	r2, r3, #3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	4957      	ldr	r1, [pc, #348]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 800635c:	4313      	orrs	r3, r2
 800635e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006360:	f7fc fb38 	bl	80029d4 <HAL_GetTick>
 8006364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006366:	e00a      	b.n	800637e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006368:	f7fc fb34 	bl	80029d4 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006376:	4293      	cmp	r3, r2
 8006378:	d901      	bls.n	800637e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e095      	b.n	80064aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800637e:	4b4e      	ldr	r3, [pc, #312]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 020c 	and.w	r2, r3, #12
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	429a      	cmp	r2, r3
 800638e:	d1eb      	bne.n	8006368 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d023      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063a8:	4b43      	ldr	r3, [pc, #268]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4a42      	ldr	r2, [pc, #264]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 80063ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80063b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80063c0:	4b3d      	ldr	r3, [pc, #244]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80063c8:	4a3b      	ldr	r2, [pc, #236]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 80063ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80063ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063d0:	4b39      	ldr	r3, [pc, #228]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	4936      	ldr	r1, [pc, #216]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	608b      	str	r3, [r1, #8]
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2b80      	cmp	r3, #128	@ 0x80
 80063e8:	d105      	bne.n	80063f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80063ea:	4b33      	ldr	r3, [pc, #204]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	4a32      	ldr	r2, [pc, #200]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 80063f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063f6:	4b2f      	ldr	r3, [pc, #188]	@ (80064b4 <HAL_RCC_ClockConfig+0x260>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d21d      	bcs.n	8006440 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006404:	4b2b      	ldr	r3, [pc, #172]	@ (80064b4 <HAL_RCC_ClockConfig+0x260>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f023 020f 	bic.w	r2, r3, #15
 800640c:	4929      	ldr	r1, [pc, #164]	@ (80064b4 <HAL_RCC_ClockConfig+0x260>)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	4313      	orrs	r3, r2
 8006412:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006414:	f7fc fade 	bl	80029d4 <HAL_GetTick>
 8006418:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800641a:	e00a      	b.n	8006432 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800641c:	f7fc fada 	bl	80029d4 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e03b      	b.n	80064aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006432:	4b20      	ldr	r3, [pc, #128]	@ (80064b4 <HAL_RCC_ClockConfig+0x260>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d1ed      	bne.n	800641c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800644c:	4b1a      	ldr	r3, [pc, #104]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	4917      	ldr	r1, [pc, #92]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 800645a:	4313      	orrs	r3, r2
 800645c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d009      	beq.n	800647e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800646a:	4b13      	ldr	r3, [pc, #76]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	490f      	ldr	r1, [pc, #60]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 800647a:	4313      	orrs	r3, r2
 800647c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800647e:	f000 f825 	bl	80064cc <HAL_RCC_GetSysClockFreq>
 8006482:	4602      	mov	r2, r0
 8006484:	4b0c      	ldr	r3, [pc, #48]	@ (80064b8 <HAL_RCC_ClockConfig+0x264>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	091b      	lsrs	r3, r3, #4
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	490c      	ldr	r1, [pc, #48]	@ (80064c0 <HAL_RCC_ClockConfig+0x26c>)
 8006490:	5ccb      	ldrb	r3, [r1, r3]
 8006492:	f003 031f 	and.w	r3, r3, #31
 8006496:	fa22 f303 	lsr.w	r3, r2, r3
 800649a:	4a0a      	ldr	r2, [pc, #40]	@ (80064c4 <HAL_RCC_ClockConfig+0x270>)
 800649c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800649e:	4b0a      	ldr	r3, [pc, #40]	@ (80064c8 <HAL_RCC_ClockConfig+0x274>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fb fe62 	bl	800216c <HAL_InitTick>
 80064a8:	4603      	mov	r3, r0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40022000 	.word	0x40022000
 80064b8:	40021000 	.word	0x40021000
 80064bc:	04c4b400 	.word	0x04c4b400
 80064c0:	0801a554 	.word	0x0801a554
 80064c4:	20000020 	.word	0x20000020
 80064c8:	20000024 	.word	0x20000024

080064cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80064d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 030c 	and.w	r3, r3, #12
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d102      	bne.n	80064e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064de:	4b2a      	ldr	r3, [pc, #168]	@ (8006588 <HAL_RCC_GetSysClockFreq+0xbc>)
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	e047      	b.n	8006574 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80064e4:	4b27      	ldr	r3, [pc, #156]	@ (8006584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f003 030c 	and.w	r3, r3, #12
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d102      	bne.n	80064f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064f0:	4b26      	ldr	r3, [pc, #152]	@ (800658c <HAL_RCC_GetSysClockFreq+0xc0>)
 80064f2:	613b      	str	r3, [r7, #16]
 80064f4:	e03e      	b.n	8006574 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80064f6:	4b23      	ldr	r3, [pc, #140]	@ (8006584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 030c 	and.w	r3, r3, #12
 80064fe:	2b0c      	cmp	r3, #12
 8006500:	d136      	bne.n	8006570 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006502:	4b20      	ldr	r3, [pc, #128]	@ (8006584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800650c:	4b1d      	ldr	r3, [pc, #116]	@ (8006584 <HAL_RCC_GetSysClockFreq+0xb8>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	091b      	lsrs	r3, r3, #4
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	3301      	adds	r3, #1
 8006518:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b03      	cmp	r3, #3
 800651e:	d10c      	bne.n	800653a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006520:	4a1a      	ldr	r2, [pc, #104]	@ (800658c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	fbb2 f3f3 	udiv	r3, r2, r3
 8006528:	4a16      	ldr	r2, [pc, #88]	@ (8006584 <HAL_RCC_GetSysClockFreq+0xb8>)
 800652a:	68d2      	ldr	r2, [r2, #12]
 800652c:	0a12      	lsrs	r2, r2, #8
 800652e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006532:	fb02 f303 	mul.w	r3, r2, r3
 8006536:	617b      	str	r3, [r7, #20]
      break;
 8006538:	e00c      	b.n	8006554 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800653a:	4a13      	ldr	r2, [pc, #76]	@ (8006588 <HAL_RCC_GetSysClockFreq+0xbc>)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006542:	4a10      	ldr	r2, [pc, #64]	@ (8006584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006544:	68d2      	ldr	r2, [r2, #12]
 8006546:	0a12      	lsrs	r2, r2, #8
 8006548:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800654c:	fb02 f303 	mul.w	r3, r2, r3
 8006550:	617b      	str	r3, [r7, #20]
      break;
 8006552:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006554:	4b0b      	ldr	r3, [pc, #44]	@ (8006584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	0e5b      	lsrs	r3, r3, #25
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	3301      	adds	r3, #1
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	fbb2 f3f3 	udiv	r3, r2, r3
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	e001      	b.n	8006574 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006574:	693b      	ldr	r3, [r7, #16]
}
 8006576:	4618      	mov	r0, r3
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40021000 	.word	0x40021000
 8006588:	00f42400 	.word	0x00f42400
 800658c:	016e3600 	.word	0x016e3600

08006590 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006594:	4b03      	ldr	r3, [pc, #12]	@ (80065a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006596:	681b      	ldr	r3, [r3, #0]
}
 8006598:	4618      	mov	r0, r3
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	20000020 	.word	0x20000020

080065a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065ac:	f7ff fff0 	bl	8006590 <HAL_RCC_GetHCLKFreq>
 80065b0:	4602      	mov	r2, r0
 80065b2:	4b06      	ldr	r3, [pc, #24]	@ (80065cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	0a1b      	lsrs	r3, r3, #8
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	4904      	ldr	r1, [pc, #16]	@ (80065d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80065be:	5ccb      	ldrb	r3, [r1, r3]
 80065c0:	f003 031f 	and.w	r3, r3, #31
 80065c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40021000 	.word	0x40021000
 80065d0:	0801a564 	.word	0x0801a564

080065d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80065d8:	f7ff ffda 	bl	8006590 <HAL_RCC_GetHCLKFreq>
 80065dc:	4602      	mov	r2, r0
 80065de:	4b06      	ldr	r3, [pc, #24]	@ (80065f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	0adb      	lsrs	r3, r3, #11
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	4904      	ldr	r1, [pc, #16]	@ (80065fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80065ea:	5ccb      	ldrb	r3, [r1, r3]
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	40021000 	.word	0x40021000
 80065fc:	0801a564 	.word	0x0801a564

08006600 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	220f      	movs	r2, #15
 800660e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006610:	4b12      	ldr	r3, [pc, #72]	@ (800665c <HAL_RCC_GetClockConfig+0x5c>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f003 0203 	and.w	r2, r3, #3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800661c:	4b0f      	ldr	r3, [pc, #60]	@ (800665c <HAL_RCC_GetClockConfig+0x5c>)
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006628:	4b0c      	ldr	r3, [pc, #48]	@ (800665c <HAL_RCC_GetClockConfig+0x5c>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006634:	4b09      	ldr	r3, [pc, #36]	@ (800665c <HAL_RCC_GetClockConfig+0x5c>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	08db      	lsrs	r3, r3, #3
 800663a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006642:	4b07      	ldr	r3, [pc, #28]	@ (8006660 <HAL_RCC_GetClockConfig+0x60>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 020f 	and.w	r2, r3, #15
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	601a      	str	r2, [r3, #0]
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40021000 	.word	0x40021000
 8006660:	40022000 	.word	0x40022000

08006664 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800666a:	4b1e      	ldr	r3, [pc, #120]	@ (80066e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006674:	4b1b      	ldr	r3, [pc, #108]	@ (80066e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b03      	cmp	r3, #3
 8006686:	d10c      	bne.n	80066a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006688:	4a17      	ldr	r2, [pc, #92]	@ (80066e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006690:	4a14      	ldr	r2, [pc, #80]	@ (80066e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006692:	68d2      	ldr	r2, [r2, #12]
 8006694:	0a12      	lsrs	r2, r2, #8
 8006696:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	617b      	str	r3, [r7, #20]
    break;
 80066a0:	e00c      	b.n	80066bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066a2:	4a12      	ldr	r2, [pc, #72]	@ (80066ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066aa:	4a0e      	ldr	r2, [pc, #56]	@ (80066e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066ac:	68d2      	ldr	r2, [r2, #12]
 80066ae:	0a12      	lsrs	r2, r2, #8
 80066b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066b4:	fb02 f303 	mul.w	r3, r2, r3
 80066b8:	617b      	str	r3, [r7, #20]
    break;
 80066ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066bc:	4b09      	ldr	r3, [pc, #36]	@ (80066e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	0e5b      	lsrs	r3, r3, #25
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	3301      	adds	r3, #1
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80066d6:	687b      	ldr	r3, [r7, #4]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	40021000 	.word	0x40021000
 80066e8:	016e3600 	.word	0x016e3600
 80066ec:	00f42400 	.word	0x00f42400

080066f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066f8:	2300      	movs	r3, #0
 80066fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066fc:	2300      	movs	r3, #0
 80066fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 8098 	beq.w	800683e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800670e:	2300      	movs	r3, #0
 8006710:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006712:	4b43      	ldr	r3, [pc, #268]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10d      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800671e:	4b40      	ldr	r3, [pc, #256]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006722:	4a3f      	ldr	r2, [pc, #252]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006728:	6593      	str	r3, [r2, #88]	@ 0x58
 800672a:	4b3d      	ldr	r3, [pc, #244]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800672c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800672e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006732:	60bb      	str	r3, [r7, #8]
 8006734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006736:	2301      	movs	r3, #1
 8006738:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800673a:	4b3a      	ldr	r3, [pc, #232]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a39      	ldr	r2, [pc, #228]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006744:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006746:	f7fc f945 	bl	80029d4 <HAL_GetTick>
 800674a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800674c:	e009      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800674e:	f7fc f941 	bl	80029d4 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d902      	bls.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	74fb      	strb	r3, [r7, #19]
        break;
 8006760:	e005      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006762:	4b30      	ldr	r3, [pc, #192]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0ef      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800676e:	7cfb      	ldrb	r3, [r7, #19]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d159      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006774:	4b2a      	ldr	r3, [pc, #168]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800677a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800677e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d01e      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	429a      	cmp	r2, r3
 800678e:	d019      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006790:	4b23      	ldr	r3, [pc, #140]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800679a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800679c:	4b20      	ldr	r3, [pc, #128]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80067bc:	4a18      	ldr	r2, [pc, #96]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d016      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ce:	f7fc f901 	bl	80029d4 <HAL_GetTick>
 80067d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067d4:	e00b      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067d6:	f7fc f8fd 	bl	80029d4 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d902      	bls.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	74fb      	strb	r3, [r7, #19]
            break;
 80067ec:	e006      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0ec      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80067fc:	7cfb      	ldrb	r3, [r7, #19]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10b      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006802:	4b07      	ldr	r3, [pc, #28]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006808:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006810:	4903      	ldr	r1, [pc, #12]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006812:	4313      	orrs	r3, r2
 8006814:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006818:	e008      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800681a:	7cfb      	ldrb	r3, [r7, #19]
 800681c:	74bb      	strb	r3, [r7, #18]
 800681e:	e005      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006820:	40021000 	.word	0x40021000
 8006824:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006828:	7cfb      	ldrb	r3, [r7, #19]
 800682a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800682c:	7c7b      	ldrb	r3, [r7, #17]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d105      	bne.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006832:	4ba7      	ldr	r3, [pc, #668]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006836:	4aa6      	ldr	r2, [pc, #664]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006838:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800683c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800684a:	4ba1      	ldr	r3, [pc, #644]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006850:	f023 0203 	bic.w	r2, r3, #3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	499d      	ldr	r1, [pc, #628]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800685a:	4313      	orrs	r3, r2
 800685c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800686c:	4b98      	ldr	r3, [pc, #608]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006872:	f023 020c 	bic.w	r2, r3, #12
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	4995      	ldr	r1, [pc, #596]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800688e:	4b90      	ldr	r3, [pc, #576]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006894:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	498c      	ldr	r1, [pc, #560]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068b0:	4b87      	ldr	r3, [pc, #540]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	4984      	ldr	r1, [pc, #528]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0310 	and.w	r3, r3, #16
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068d2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	497b      	ldr	r1, [pc, #492]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068f4:	4b76      	ldr	r3, [pc, #472]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	4973      	ldr	r1, [pc, #460]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006904:	4313      	orrs	r3, r2
 8006906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006916:	4b6e      	ldr	r3, [pc, #440]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800691c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	496a      	ldr	r1, [pc, #424]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006938:	4b65      	ldr	r3, [pc, #404]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800693a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800693e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	4962      	ldr	r1, [pc, #392]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006948:	4313      	orrs	r3, r2
 800694a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800695a:	4b5d      	ldr	r3, [pc, #372]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800695c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006960:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	4959      	ldr	r1, [pc, #356]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800696a:	4313      	orrs	r3, r2
 800696c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800697c:	4b54      	ldr	r3, [pc, #336]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800697e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006982:	f023 0203 	bic.w	r2, r3, #3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698a:	4951      	ldr	r1, [pc, #324]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800698c:	4313      	orrs	r3, r2
 800698e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800699e:	4b4c      	ldr	r3, [pc, #304]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ac:	4948      	ldr	r1, [pc, #288]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d015      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069c0:	4b43      	ldr	r3, [pc, #268]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ce:	4940      	ldr	r1, [pc, #256]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069de:	d105      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069e0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	4a3a      	ldr	r2, [pc, #232]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d015      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069f8:	4b35      	ldr	r3, [pc, #212]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a06:	4932      	ldr	r1, [pc, #200]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a16:	d105      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a18:	4b2d      	ldr	r3, [pc, #180]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	4a2c      	ldr	r2, [pc, #176]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a22:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d015      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a30:	4b27      	ldr	r3, [pc, #156]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a36:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	4924      	ldr	r1, [pc, #144]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a4e:	d105      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a50:	4b1f      	ldr	r3, [pc, #124]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	4a1e      	ldr	r2, [pc, #120]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a5a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d015      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a68:	4b19      	ldr	r3, [pc, #100]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a76:	4916      	ldr	r1, [pc, #88]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a86:	d105      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a88:	4b11      	ldr	r3, [pc, #68]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	4a10      	ldr	r2, [pc, #64]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a92:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d019      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aae:	4908      	ldr	r1, [pc, #32]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006abe:	d109      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ac0:	4b03      	ldr	r3, [pc, #12]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	4a02      	ldr	r2, [pc, #8]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006aca:	60d3      	str	r3, [r2, #12]
 8006acc:	e002      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006ace:	bf00      	nop
 8006ad0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d015      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ae0:	4b29      	ldr	r3, [pc, #164]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aee:	4926      	ldr	r1, [pc, #152]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006afa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006afe:	d105      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b00:	4b21      	ldr	r3, [pc, #132]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	4a20      	ldr	r2, [pc, #128]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b0a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d015      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006b18:	4b1b      	ldr	r3, [pc, #108]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b26:	4918      	ldr	r1, [pc, #96]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b36:	d105      	bne.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b38:	4b13      	ldr	r3, [pc, #76]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	4a12      	ldr	r2, [pc, #72]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b42:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d015      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b50:	4b0d      	ldr	r3, [pc, #52]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b5e:	490a      	ldr	r1, [pc, #40]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b6e:	d105      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b70:	4b05      	ldr	r3, [pc, #20]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	4a04      	ldr	r2, [pc, #16]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006b7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	40021000 	.word	0x40021000

08006b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e049      	b.n	8006c32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d106      	bne.n	8006bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fb fce2 	bl	800257c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	f000 fb3c 	bl	8007248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
	...

08006c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d001      	beq.n	8006c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e054      	b.n	8006cfe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0201 	orr.w	r2, r2, #1
 8006c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a26      	ldr	r2, [pc, #152]	@ (8006d0c <HAL_TIM_Base_Start_IT+0xd0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d022      	beq.n	8006cbc <HAL_TIM_Base_Start_IT+0x80>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c7e:	d01d      	beq.n	8006cbc <HAL_TIM_Base_Start_IT+0x80>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a22      	ldr	r2, [pc, #136]	@ (8006d10 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d018      	beq.n	8006cbc <HAL_TIM_Base_Start_IT+0x80>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a21      	ldr	r2, [pc, #132]	@ (8006d14 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d013      	beq.n	8006cbc <HAL_TIM_Base_Start_IT+0x80>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a1f      	ldr	r2, [pc, #124]	@ (8006d18 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00e      	beq.n	8006cbc <HAL_TIM_Base_Start_IT+0x80>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d1c <HAL_TIM_Base_Start_IT+0xe0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d009      	beq.n	8006cbc <HAL_TIM_Base_Start_IT+0x80>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1c      	ldr	r2, [pc, #112]	@ (8006d20 <HAL_TIM_Base_Start_IT+0xe4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d004      	beq.n	8006cbc <HAL_TIM_Base_Start_IT+0x80>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8006d24 <HAL_TIM_Base_Start_IT+0xe8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d115      	bne.n	8006ce8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	4b19      	ldr	r3, [pc, #100]	@ (8006d28 <HAL_TIM_Base_Start_IT+0xec>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b06      	cmp	r3, #6
 8006ccc:	d015      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0xbe>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cd4:	d011      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f042 0201 	orr.w	r2, r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce6:	e008      	b.n	8006cfa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	e000      	b.n	8006cfc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	40000400 	.word	0x40000400
 8006d14:	40000800 	.word	0x40000800
 8006d18:	40000c00 	.word	0x40000c00
 8006d1c:	40013400 	.word	0x40013400
 8006d20:	40014000 	.word	0x40014000
 8006d24:	40015000 	.word	0x40015000
 8006d28:	00010007 	.word	0x00010007

08006d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d020      	beq.n	8006d90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01b      	beq.n	8006d90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f06f 0202 	mvn.w	r2, #2
 8006d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fa48 	bl	800720c <HAL_TIM_IC_CaptureCallback>
 8006d7c:	e005      	b.n	8006d8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fa3a 	bl	80071f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fa4b 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f003 0304 	and.w	r3, r3, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d020      	beq.n	8006ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01b      	beq.n	8006ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f06f 0204 	mvn.w	r2, #4
 8006dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2202      	movs	r2, #2
 8006db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fa22 	bl	800720c <HAL_TIM_IC_CaptureCallback>
 8006dc8:	e005      	b.n	8006dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fa14 	bl	80071f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fa25 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d020      	beq.n	8006e28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01b      	beq.n	8006e28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0208 	mvn.w	r2, #8
 8006df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2204      	movs	r2, #4
 8006dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f9fc 	bl	800720c <HAL_TIM_IC_CaptureCallback>
 8006e14:	e005      	b.n	8006e22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f9ee 	bl	80071f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f9ff 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f003 0310 	and.w	r3, r3, #16
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d020      	beq.n	8006e74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f003 0310 	and.w	r3, r3, #16
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01b      	beq.n	8006e74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f06f 0210 	mvn.w	r2, #16
 8006e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2208      	movs	r2, #8
 8006e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f9d6 	bl	800720c <HAL_TIM_IC_CaptureCallback>
 8006e60:	e005      	b.n	8006e6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f9c8 	bl	80071f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f9d9 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00c      	beq.n	8006e98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d007      	beq.n	8006e98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f06f 0201 	mvn.w	r2, #1
 8006e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fa ffb4 	bl	8001e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d104      	bne.n	8006eac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00c      	beq.n	8006ec6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d007      	beq.n	8006ec6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fbb1 	bl	8007628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00c      	beq.n	8006eea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d007      	beq.n	8006eea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fba9 	bl	800763c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00c      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f993 	bl	8007234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f003 0320 	and.w	r3, r3, #32
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00c      	beq.n	8006f32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d007      	beq.n	8006f32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f06f 0220 	mvn.w	r2, #32
 8006f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fb71 	bl	8007614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00c      	beq.n	8006f56 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d007      	beq.n	8006f56 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fb7d 	bl	8007650 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00c      	beq.n	8006f7a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d007      	beq.n	8006f7a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fb75 	bl	8007664 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00c      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fb6d 	bl	8007678 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00c      	beq.n	8006fc2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fb65 	bl	800768c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1c>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e0f6      	b.n	80071d6 <HAL_TIM_ConfigClockSource+0x20a>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007006:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800700a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a6f      	ldr	r2, [pc, #444]	@ (80071e0 <HAL_TIM_ConfigClockSource+0x214>)
 8007022:	4293      	cmp	r3, r2
 8007024:	f000 80c1 	beq.w	80071aa <HAL_TIM_ConfigClockSource+0x1de>
 8007028:	4a6d      	ldr	r2, [pc, #436]	@ (80071e0 <HAL_TIM_ConfigClockSource+0x214>)
 800702a:	4293      	cmp	r3, r2
 800702c:	f200 80c6 	bhi.w	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007030:	4a6c      	ldr	r2, [pc, #432]	@ (80071e4 <HAL_TIM_ConfigClockSource+0x218>)
 8007032:	4293      	cmp	r3, r2
 8007034:	f000 80b9 	beq.w	80071aa <HAL_TIM_ConfigClockSource+0x1de>
 8007038:	4a6a      	ldr	r2, [pc, #424]	@ (80071e4 <HAL_TIM_ConfigClockSource+0x218>)
 800703a:	4293      	cmp	r3, r2
 800703c:	f200 80be 	bhi.w	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007040:	4a69      	ldr	r2, [pc, #420]	@ (80071e8 <HAL_TIM_ConfigClockSource+0x21c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	f000 80b1 	beq.w	80071aa <HAL_TIM_ConfigClockSource+0x1de>
 8007048:	4a67      	ldr	r2, [pc, #412]	@ (80071e8 <HAL_TIM_ConfigClockSource+0x21c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	f200 80b6 	bhi.w	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007050:	4a66      	ldr	r2, [pc, #408]	@ (80071ec <HAL_TIM_ConfigClockSource+0x220>)
 8007052:	4293      	cmp	r3, r2
 8007054:	f000 80a9 	beq.w	80071aa <HAL_TIM_ConfigClockSource+0x1de>
 8007058:	4a64      	ldr	r2, [pc, #400]	@ (80071ec <HAL_TIM_ConfigClockSource+0x220>)
 800705a:	4293      	cmp	r3, r2
 800705c:	f200 80ae 	bhi.w	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007060:	4a63      	ldr	r2, [pc, #396]	@ (80071f0 <HAL_TIM_ConfigClockSource+0x224>)
 8007062:	4293      	cmp	r3, r2
 8007064:	f000 80a1 	beq.w	80071aa <HAL_TIM_ConfigClockSource+0x1de>
 8007068:	4a61      	ldr	r2, [pc, #388]	@ (80071f0 <HAL_TIM_ConfigClockSource+0x224>)
 800706a:	4293      	cmp	r3, r2
 800706c:	f200 80a6 	bhi.w	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007070:	4a60      	ldr	r2, [pc, #384]	@ (80071f4 <HAL_TIM_ConfigClockSource+0x228>)
 8007072:	4293      	cmp	r3, r2
 8007074:	f000 8099 	beq.w	80071aa <HAL_TIM_ConfigClockSource+0x1de>
 8007078:	4a5e      	ldr	r2, [pc, #376]	@ (80071f4 <HAL_TIM_ConfigClockSource+0x228>)
 800707a:	4293      	cmp	r3, r2
 800707c:	f200 809e 	bhi.w	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007080:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007084:	f000 8091 	beq.w	80071aa <HAL_TIM_ConfigClockSource+0x1de>
 8007088:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800708c:	f200 8096 	bhi.w	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007090:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007094:	f000 8089 	beq.w	80071aa <HAL_TIM_ConfigClockSource+0x1de>
 8007098:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800709c:	f200 808e 	bhi.w	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 80070a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070a4:	d03e      	beq.n	8007124 <HAL_TIM_ConfigClockSource+0x158>
 80070a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070aa:	f200 8087 	bhi.w	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 80070ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070b2:	f000 8086 	beq.w	80071c2 <HAL_TIM_ConfigClockSource+0x1f6>
 80070b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ba:	d87f      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 80070bc:	2b70      	cmp	r3, #112	@ 0x70
 80070be:	d01a      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0x12a>
 80070c0:	2b70      	cmp	r3, #112	@ 0x70
 80070c2:	d87b      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 80070c4:	2b60      	cmp	r3, #96	@ 0x60
 80070c6:	d050      	beq.n	800716a <HAL_TIM_ConfigClockSource+0x19e>
 80070c8:	2b60      	cmp	r3, #96	@ 0x60
 80070ca:	d877      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 80070cc:	2b50      	cmp	r3, #80	@ 0x50
 80070ce:	d03c      	beq.n	800714a <HAL_TIM_ConfigClockSource+0x17e>
 80070d0:	2b50      	cmp	r3, #80	@ 0x50
 80070d2:	d873      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 80070d4:	2b40      	cmp	r3, #64	@ 0x40
 80070d6:	d058      	beq.n	800718a <HAL_TIM_ConfigClockSource+0x1be>
 80070d8:	2b40      	cmp	r3, #64	@ 0x40
 80070da:	d86f      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 80070dc:	2b30      	cmp	r3, #48	@ 0x30
 80070de:	d064      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x1de>
 80070e0:	2b30      	cmp	r3, #48	@ 0x30
 80070e2:	d86b      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 80070e4:	2b20      	cmp	r3, #32
 80070e6:	d060      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x1de>
 80070e8:	2b20      	cmp	r3, #32
 80070ea:	d867      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d05c      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x1de>
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d05a      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x1de>
 80070f4:	e062      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007106:	f000 f9cf 	bl	80074a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	609a      	str	r2, [r3, #8]
      break;
 8007122:	e04f      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007134:	f000 f9b8 	bl	80074a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007146:	609a      	str	r2, [r3, #8]
      break;
 8007148:	e03c      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007156:	461a      	mov	r2, r3
 8007158:	f000 f92a 	bl	80073b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2150      	movs	r1, #80	@ 0x50
 8007162:	4618      	mov	r0, r3
 8007164:	f000 f983 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 8007168:	e02c      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007176:	461a      	mov	r2, r3
 8007178:	f000 f949 	bl	800740e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2160      	movs	r1, #96	@ 0x60
 8007182:	4618      	mov	r0, r3
 8007184:	f000 f973 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 8007188:	e01c      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007196:	461a      	mov	r2, r3
 8007198:	f000 f90a 	bl	80073b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2140      	movs	r1, #64	@ 0x40
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 f963 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 80071a8:	e00c      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4619      	mov	r1, r3
 80071b4:	4610      	mov	r0, r2
 80071b6:	f000 f95a 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 80071ba:	e003      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
      break;
 80071c0:	e000      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80071c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	00100070 	.word	0x00100070
 80071e4:	00100060 	.word	0x00100060
 80071e8:	00100050 	.word	0x00100050
 80071ec:	00100040 	.word	0x00100040
 80071f0:	00100030 	.word	0x00100030
 80071f4:	00100020 	.word	0x00100020

080071f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a4c      	ldr	r2, [pc, #304]	@ (800738c <TIM_Base_SetConfig+0x144>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d017      	beq.n	8007290 <TIM_Base_SetConfig+0x48>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007266:	d013      	beq.n	8007290 <TIM_Base_SetConfig+0x48>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a49      	ldr	r2, [pc, #292]	@ (8007390 <TIM_Base_SetConfig+0x148>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00f      	beq.n	8007290 <TIM_Base_SetConfig+0x48>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a48      	ldr	r2, [pc, #288]	@ (8007394 <TIM_Base_SetConfig+0x14c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d00b      	beq.n	8007290 <TIM_Base_SetConfig+0x48>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a47      	ldr	r2, [pc, #284]	@ (8007398 <TIM_Base_SetConfig+0x150>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d007      	beq.n	8007290 <TIM_Base_SetConfig+0x48>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a46      	ldr	r2, [pc, #280]	@ (800739c <TIM_Base_SetConfig+0x154>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_Base_SetConfig+0x48>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a45      	ldr	r2, [pc, #276]	@ (80073a0 <TIM_Base_SetConfig+0x158>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d108      	bne.n	80072a2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a39      	ldr	r2, [pc, #228]	@ (800738c <TIM_Base_SetConfig+0x144>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d023      	beq.n	80072f2 <TIM_Base_SetConfig+0xaa>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b0:	d01f      	beq.n	80072f2 <TIM_Base_SetConfig+0xaa>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a36      	ldr	r2, [pc, #216]	@ (8007390 <TIM_Base_SetConfig+0x148>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d01b      	beq.n	80072f2 <TIM_Base_SetConfig+0xaa>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a35      	ldr	r2, [pc, #212]	@ (8007394 <TIM_Base_SetConfig+0x14c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d017      	beq.n	80072f2 <TIM_Base_SetConfig+0xaa>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a34      	ldr	r2, [pc, #208]	@ (8007398 <TIM_Base_SetConfig+0x150>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d013      	beq.n	80072f2 <TIM_Base_SetConfig+0xaa>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a33      	ldr	r2, [pc, #204]	@ (800739c <TIM_Base_SetConfig+0x154>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00f      	beq.n	80072f2 <TIM_Base_SetConfig+0xaa>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a33      	ldr	r2, [pc, #204]	@ (80073a4 <TIM_Base_SetConfig+0x15c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d00b      	beq.n	80072f2 <TIM_Base_SetConfig+0xaa>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a32      	ldr	r2, [pc, #200]	@ (80073a8 <TIM_Base_SetConfig+0x160>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d007      	beq.n	80072f2 <TIM_Base_SetConfig+0xaa>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a31      	ldr	r2, [pc, #196]	@ (80073ac <TIM_Base_SetConfig+0x164>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d003      	beq.n	80072f2 <TIM_Base_SetConfig+0xaa>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a2c      	ldr	r2, [pc, #176]	@ (80073a0 <TIM_Base_SetConfig+0x158>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d108      	bne.n	8007304 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a18      	ldr	r2, [pc, #96]	@ (800738c <TIM_Base_SetConfig+0x144>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d013      	beq.n	8007358 <TIM_Base_SetConfig+0x110>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a1a      	ldr	r2, [pc, #104]	@ (800739c <TIM_Base_SetConfig+0x154>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d00f      	beq.n	8007358 <TIM_Base_SetConfig+0x110>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a1a      	ldr	r2, [pc, #104]	@ (80073a4 <TIM_Base_SetConfig+0x15c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00b      	beq.n	8007358 <TIM_Base_SetConfig+0x110>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a19      	ldr	r2, [pc, #100]	@ (80073a8 <TIM_Base_SetConfig+0x160>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d007      	beq.n	8007358 <TIM_Base_SetConfig+0x110>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a18      	ldr	r2, [pc, #96]	@ (80073ac <TIM_Base_SetConfig+0x164>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_Base_SetConfig+0x110>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a13      	ldr	r2, [pc, #76]	@ (80073a0 <TIM_Base_SetConfig+0x158>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d103      	bne.n	8007360 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b01      	cmp	r3, #1
 8007370:	d105      	bne.n	800737e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f023 0201 	bic.w	r2, r3, #1
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	611a      	str	r2, [r3, #16]
  }
}
 800737e:	bf00      	nop
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	40012c00 	.word	0x40012c00
 8007390:	40000400 	.word	0x40000400
 8007394:	40000800 	.word	0x40000800
 8007398:	40000c00 	.word	0x40000c00
 800739c:	40013400 	.word	0x40013400
 80073a0:	40015000 	.word	0x40015000
 80073a4:	40014000 	.word	0x40014000
 80073a8:	40014400 	.word	0x40014400
 80073ac:	40014800 	.word	0x40014800

080073b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f023 0201 	bic.w	r2, r3, #1
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f023 030a 	bic.w	r3, r3, #10
 80073ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800740e:	b480      	push	{r7}
 8007410:	b087      	sub	sp, #28
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f023 0210 	bic.w	r2, r3, #16
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	031b      	lsls	r3, r3, #12
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800744a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	621a      	str	r2, [r3, #32]
}
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	f043 0307 	orr.w	r3, r3, #7
 8007494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	609a      	str	r2, [r3, #8]
}
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	021a      	lsls	r2, r3, #8
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	609a      	str	r2, [r3, #8]
}
 80074dc:	bf00      	nop
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d101      	bne.n	8007500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074fc:	2302      	movs	r3, #2
 80074fe:	e074      	b.n	80075ea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a34      	ldr	r2, [pc, #208]	@ (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d009      	beq.n	800753e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a33      	ldr	r2, [pc, #204]	@ (80075fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d004      	beq.n	800753e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a31      	ldr	r2, [pc, #196]	@ (8007600 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d108      	bne.n	8007550 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007544:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	4313      	orrs	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a21      	ldr	r2, [pc, #132]	@ (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d022      	beq.n	80075be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007580:	d01d      	beq.n	80075be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a1f      	ldr	r2, [pc, #124]	@ (8007604 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d018      	beq.n	80075be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a1d      	ldr	r2, [pc, #116]	@ (8007608 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d013      	beq.n	80075be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a1c      	ldr	r2, [pc, #112]	@ (800760c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00e      	beq.n	80075be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a15      	ldr	r2, [pc, #84]	@ (80075fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d009      	beq.n	80075be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a18      	ldr	r2, [pc, #96]	@ (8007610 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d004      	beq.n	80075be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a11      	ldr	r2, [pc, #68]	@ (8007600 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d10c      	bne.n	80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	40012c00 	.word	0x40012c00
 80075fc:	40013400 	.word	0x40013400
 8007600:	40015000 	.word	0x40015000
 8007604:	40000400 	.word	0x40000400
 8007608:	40000800 	.word	0x40000800
 800760c:	40000c00 	.word	0x40000c00
 8007610:	40014000 	.word	0x40014000

08007614 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e042      	b.n	8007738 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7fa ffc7 	bl	8002658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2224      	movs	r2, #36	@ 0x24
 80076ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0201 	bic.w	r2, r2, #1
 80076e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 f806 	bl	80086fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fd07 	bl	8008104 <UART_SetConfig>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d101      	bne.n	8007700 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e01b      	b.n	8007738 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800770e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800771e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f042 0201 	orr.w	r2, r2, #1
 800772e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 f885 	bl	8008840 <UART_CheckIdleState>
 8007736:	4603      	mov	r3, r0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08a      	sub	sp, #40	@ 0x28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	4613      	mov	r3, r2
 800774c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007754:	2b20      	cmp	r3, #32
 8007756:	d167      	bne.n	8007828 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <HAL_UART_Transmit_DMA+0x24>
 800775e:	88fb      	ldrh	r3, [r7, #6]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e060      	b.n	800782a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	88fa      	ldrh	r2, [r7, #6]
 8007772:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	88fa      	ldrh	r2, [r7, #6]
 800777a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2221      	movs	r2, #33	@ 0x21
 800778a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d028      	beq.n	80077e8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800779a:	4a26      	ldr	r2, [pc, #152]	@ (8007834 <HAL_UART_Transmit_DMA+0xf4>)
 800779c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077a2:	4a25      	ldr	r2, [pc, #148]	@ (8007838 <HAL_UART_Transmit_DMA+0xf8>)
 80077a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077aa:	4a24      	ldr	r2, [pc, #144]	@ (800783c <HAL_UART_Transmit_DMA+0xfc>)
 80077ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077b2:	2200      	movs	r2, #0
 80077b4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077be:	4619      	mov	r1, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3328      	adds	r3, #40	@ 0x28
 80077c6:	461a      	mov	r2, r3
 80077c8:	88fb      	ldrh	r3, [r7, #6]
 80077ca:	f7fb fab9 	bl	8002d40 <HAL_DMA_Start_IT>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d009      	beq.n	80077e8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2210      	movs	r2, #16
 80077d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2220      	movs	r2, #32
 80077e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e020      	b.n	800782a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2240      	movs	r2, #64	@ 0x40
 80077ee:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3308      	adds	r3, #8
 80077f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007806:	627b      	str	r3, [r7, #36]	@ 0x24
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3308      	adds	r3, #8
 800780e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007810:	623a      	str	r2, [r7, #32]
 8007812:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	69f9      	ldr	r1, [r7, #28]
 8007816:	6a3a      	ldr	r2, [r7, #32]
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	61bb      	str	r3, [r7, #24]
   return(result);
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e5      	bne.n	80077f0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	e000      	b.n	800782a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007828:	2302      	movs	r3, #2
  }
}
 800782a:	4618      	mov	r0, r3
 800782c:	3728      	adds	r7, #40	@ 0x28
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	08008d0b 	.word	0x08008d0b
 8007838:	08008da5 	.word	0x08008da5
 800783c:	08008f2b 	.word	0x08008f2b

08007840 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08a      	sub	sp, #40	@ 0x28
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007854:	2b20      	cmp	r3, #32
 8007856:	d137      	bne.n	80078c8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <HAL_UART_Receive_DMA+0x24>
 800785e:	88fb      	ldrh	r3, [r7, #6]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e030      	b.n	80078ca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a18      	ldr	r2, [pc, #96]	@ (80078d4 <HAL_UART_Receive_DMA+0x94>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d01f      	beq.n	80078b8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d018      	beq.n	80078b8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	613b      	str	r3, [r7, #16]
   return(result);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800789a:	627b      	str	r3, [r7, #36]	@ 0x24
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a4:	623b      	str	r3, [r7, #32]
 80078a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	69f9      	ldr	r1, [r7, #28]
 80078aa:	6a3a      	ldr	r2, [r7, #32]
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e6      	bne.n	8007886 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80078b8:	88fb      	ldrh	r3, [r7, #6]
 80078ba:	461a      	mov	r2, r3
 80078bc:	68b9      	ldr	r1, [r7, #8]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f001 f8d6 	bl	8008a70 <UART_Start_Receive_DMA>
 80078c4:	4603      	mov	r3, r0
 80078c6:	e000      	b.n	80078ca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80078c8:	2302      	movs	r3, #2
  }
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3728      	adds	r7, #40	@ 0x28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	40008000 	.word	0x40008000

080078d8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b090      	sub	sp, #64	@ 0x40
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078fa:	2b80      	cmp	r3, #128	@ 0x80
 80078fc:	d139      	bne.n	8007972 <HAL_UART_DMAStop+0x9a>
 80078fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007900:	2b21      	cmp	r3, #33	@ 0x21
 8007902:	d136      	bne.n	8007972 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3308      	adds	r3, #8
 800790a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	61fb      	str	r3, [r7, #28]
   return(result);
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800791a:	637b      	str	r3, [r7, #52]	@ 0x34
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3308      	adds	r3, #8
 8007922:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007924:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007926:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800792a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e5      	bne.n	8007904 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800793c:	2b00      	cmp	r3, #0
 800793e:	d015      	beq.n	800796c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007944:	4618      	mov	r0, r3
 8007946:	f7fb fa76 	bl	8002e36 <HAL_DMA_Abort>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00d      	beq.n	800796c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007954:	4618      	mov	r0, r3
 8007956:	f7fb fbeb 	bl	8003130 <HAL_DMA_GetError>
 800795a:	4603      	mov	r3, r0
 800795c:	2b20      	cmp	r3, #32
 800795e:	d105      	bne.n	800796c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2210      	movs	r2, #16
 8007964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e047      	b.n	80079fc <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 f925 	bl	8008bbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800797c:	2b40      	cmp	r3, #64	@ 0x40
 800797e:	d13c      	bne.n	80079fa <HAL_UART_DMAStop+0x122>
 8007980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007982:	2b22      	cmp	r3, #34	@ 0x22
 8007984:	d139      	bne.n	80079fa <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3308      	adds	r3, #8
 800798c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	60bb      	str	r3, [r7, #8]
   return(result);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800799c:	633b      	str	r3, [r7, #48]	@ 0x30
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3308      	adds	r3, #8
 80079a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a6:	61ba      	str	r2, [r7, #24]
 80079a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6979      	ldr	r1, [r7, #20]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	613b      	str	r3, [r7, #16]
   return(result);
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e5      	bne.n	8007986 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d017      	beq.n	80079f4 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fb fa33 	bl	8002e36 <HAL_DMA_Abort>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00e      	beq.n	80079f4 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fb fba7 	bl	8003130 <HAL_DMA_GetError>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	d105      	bne.n	80079f4 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2210      	movs	r2, #16
 80079ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e003      	b.n	80079fc <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 f922 	bl	8008c3e <UART_EndRxTransfer>
  }

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3740      	adds	r7, #64	@ 0x40
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b0ba      	sub	sp, #232	@ 0xe8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007a2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007a32:	4013      	ands	r3, r2
 8007a34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007a38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d11b      	bne.n	8007a78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d015      	beq.n	8007a78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a50:	f003 0320 	and.w	r3, r3, #32
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d105      	bne.n	8007a64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d009      	beq.n	8007a78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 8300 	beq.w	800806e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	4798      	blx	r3
      }
      return;
 8007a76:	e2fa      	b.n	800806e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 8123 	beq.w	8007cc8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007a86:	4b8d      	ldr	r3, [pc, #564]	@ (8007cbc <HAL_UART_IRQHandler+0x2b8>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007a92:	4b8b      	ldr	r3, [pc, #556]	@ (8007cc0 <HAL_UART_IRQHandler+0x2bc>)
 8007a94:	4013      	ands	r3, r2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 8116 	beq.w	8007cc8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d011      	beq.n	8007acc <HAL_UART_IRQHandler+0xc8>
 8007aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ac2:	f043 0201 	orr.w	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d011      	beq.n	8007afc <HAL_UART_IRQHandler+0xf8>
 8007ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00b      	beq.n	8007afc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2202      	movs	r2, #2
 8007aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af2:	f043 0204 	orr.w	r2, r3, #4
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d011      	beq.n	8007b2c <HAL_UART_IRQHandler+0x128>
 8007b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00b      	beq.n	8007b2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2204      	movs	r2, #4
 8007b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b22:	f043 0202 	orr.w	r2, r3, #2
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b30:	f003 0308 	and.w	r3, r3, #8
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d017      	beq.n	8007b68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d105      	bne.n	8007b50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007b44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b48:	4b5c      	ldr	r3, [pc, #368]	@ (8007cbc <HAL_UART_IRQHandler+0x2b8>)
 8007b4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2208      	movs	r2, #8
 8007b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b5e:	f043 0208 	orr.w	r2, r3, #8
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d012      	beq.n	8007b9a <HAL_UART_IRQHandler+0x196>
 8007b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00c      	beq.n	8007b9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b90:	f043 0220 	orr.w	r2, r3, #32
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 8266 	beq.w	8008072 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d013      	beq.n	8007bda <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d105      	bne.n	8007bca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bee:	2b40      	cmp	r3, #64	@ 0x40
 8007bf0:	d005      	beq.n	8007bfe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bf6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d054      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 f81d 	bl	8008c3e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0e:	2b40      	cmp	r3, #64	@ 0x40
 8007c10:	d146      	bne.n	8007ca0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3308      	adds	r3, #8
 8007c18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	3308      	adds	r3, #8
 8007c3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1d9      	bne.n	8007c12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d017      	beq.n	8007c98 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c6e:	4a15      	ldr	r2, [pc, #84]	@ (8007cc4 <HAL_UART_IRQHandler+0x2c0>)
 8007c70:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fb f935 	bl	8002ee8 <HAL_DMA_Abort_IT>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d019      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007c92:	4610      	mov	r0, r2
 8007c94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c96:	e00f      	b.n	8007cb8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fa1d 	bl	80080d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9e:	e00b      	b.n	8007cb8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fa19 	bl	80080d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca6:	e007      	b.n	8007cb8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fa15 	bl	80080d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007cb6:	e1dc      	b.n	8008072 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb8:	bf00      	nop
    return;
 8007cba:	e1da      	b.n	8008072 <HAL_UART_IRQHandler+0x66e>
 8007cbc:	10000001 	.word	0x10000001
 8007cc0:	04000120 	.word	0x04000120
 8007cc4:	08008fab 	.word	0x08008fab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	f040 8170 	bne.w	8007fb2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cd6:	f003 0310 	and.w	r3, r3, #16
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 8169 	beq.w	8007fb2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ce4:	f003 0310 	and.w	r3, r3, #16
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 8162 	beq.w	8007fb2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2210      	movs	r2, #16
 8007cf4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d00:	2b40      	cmp	r3, #64	@ 0x40
 8007d02:	f040 80d8 	bne.w	8007eb6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 80af 	beq.w	8007e7c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	f080 80a7 	bcs.w	8007e7c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f040 8087 	bne.w	8007e5a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d58:	e853 3f00 	ldrex	r3, [r3]
 8007d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d86:	e841 2300 	strex	r3, r2, [r1]
 8007d8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1da      	bne.n	8007d4c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007da6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3308      	adds	r3, #8
 8007db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007dba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007dbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007dc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e1      	bne.n	8007d96 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007de2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007de8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3308      	adds	r3, #8
 8007df2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007df6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007df8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007dfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e3      	bne.n	8007dd2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e28:	f023 0310 	bic.w	r3, r3, #16
 8007e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e42:	e841 2300 	strex	r3, r2, [r1]
 8007e46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1e4      	bne.n	8007e18 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fa ffee 	bl	8002e36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f939 	bl	80080ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007e7a:	e0fc      	b.n	8008076 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e86:	429a      	cmp	r2, r3
 8007e88:	f040 80f5 	bne.w	8008076 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	f040 80eb 	bne.w	8008076 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f91c 	bl	80080ec <HAL_UARTEx_RxEventCallback>
      return;
 8007eb4:	e0df      	b.n	8008076 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80d1 	beq.w	800807a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 80cc 	beq.w	800807a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e4      	bne.n	8007ee2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	623b      	str	r3, [r7, #32]
   return(result);
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f2e:	f023 0301 	bic.w	r3, r3, #1
 8007f32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f40:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e1      	bne.n	8007f18 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f023 0310 	bic.w	r3, r3, #16
 8007f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007f8a:	61fb      	str	r3, [r7, #28]
 8007f8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	69b9      	ldr	r1, [r7, #24]
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	617b      	str	r3, [r7, #20]
   return(result);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e4      	bne.n	8007f68 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f89e 	bl	80080ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fb0:	e063      	b.n	800807a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00e      	beq.n	8007fdc <HAL_UART_IRQHandler+0x5d8>
 8007fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d008      	beq.n	8007fdc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007fd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 f825 	bl	8009024 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fda:	e051      	b.n	8008080 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d014      	beq.n	8008012 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d105      	bne.n	8008000 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ff8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d008      	beq.n	8008012 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008004:	2b00      	cmp	r3, #0
 8008006:	d03a      	beq.n	800807e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	4798      	blx	r3
    }
    return;
 8008010:	e035      	b.n	800807e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800801a:	2b00      	cmp	r3, #0
 800801c:	d009      	beq.n	8008032 <HAL_UART_IRQHandler+0x62e>
 800801e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 ffcf 	bl	8008fce <UART_EndTransmit_IT>
    return;
 8008030:	e026      	b.n	8008080 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008036:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d009      	beq.n	8008052 <HAL_UART_IRQHandler+0x64e>
 800803e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008042:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fffe 	bl	800904c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008050:	e016      	b.n	8008080 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008056:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d010      	beq.n	8008080 <HAL_UART_IRQHandler+0x67c>
 800805e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008062:	2b00      	cmp	r3, #0
 8008064:	da0c      	bge.n	8008080 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 ffe6 	bl	8009038 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800806c:	e008      	b.n	8008080 <HAL_UART_IRQHandler+0x67c>
      return;
 800806e:	bf00      	nop
 8008070:	e006      	b.n	8008080 <HAL_UART_IRQHandler+0x67c>
    return;
 8008072:	bf00      	nop
 8008074:	e004      	b.n	8008080 <HAL_UART_IRQHandler+0x67c>
      return;
 8008076:	bf00      	nop
 8008078:	e002      	b.n	8008080 <HAL_UART_IRQHandler+0x67c>
      return;
 800807a:	bf00      	nop
 800807c:	e000      	b.n	8008080 <HAL_UART_IRQHandler+0x67c>
    return;
 800807e:	bf00      	nop
  }
}
 8008080:	37e8      	adds	r7, #232	@ 0xe8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop

08008088 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008108:	b08c      	sub	sp, #48	@ 0x30
 800810a:	af00      	add	r7, sp, #0
 800810c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	431a      	orrs	r2, r3
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	431a      	orrs	r2, r3
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	4313      	orrs	r3, r2
 800812a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	4baa      	ldr	r3, [pc, #680]	@ (80083dc <UART_SetConfig+0x2d8>)
 8008134:	4013      	ands	r3, r2
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	6812      	ldr	r2, [r2, #0]
 800813a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800813c:	430b      	orrs	r3, r1
 800813e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a9f      	ldr	r2, [pc, #636]	@ (80083e0 <UART_SetConfig+0x2dc>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d004      	beq.n	8008170 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800816c:	4313      	orrs	r3, r2
 800816e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800817a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	6812      	ldr	r2, [r2, #0]
 8008182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008184:	430b      	orrs	r3, r1
 8008186:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818e:	f023 010f 	bic.w	r1, r3, #15
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a90      	ldr	r2, [pc, #576]	@ (80083e4 <UART_SetConfig+0x2e0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d125      	bne.n	80081f4 <UART_SetConfig+0xf0>
 80081a8:	4b8f      	ldr	r3, [pc, #572]	@ (80083e8 <UART_SetConfig+0x2e4>)
 80081aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d81a      	bhi.n	80081ec <UART_SetConfig+0xe8>
 80081b6:	a201      	add	r2, pc, #4	@ (adr r2, 80081bc <UART_SetConfig+0xb8>)
 80081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081bc:	080081cd 	.word	0x080081cd
 80081c0:	080081dd 	.word	0x080081dd
 80081c4:	080081d5 	.word	0x080081d5
 80081c8:	080081e5 	.word	0x080081e5
 80081cc:	2301      	movs	r3, #1
 80081ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081d2:	e116      	b.n	8008402 <UART_SetConfig+0x2fe>
 80081d4:	2302      	movs	r3, #2
 80081d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081da:	e112      	b.n	8008402 <UART_SetConfig+0x2fe>
 80081dc:	2304      	movs	r3, #4
 80081de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081e2:	e10e      	b.n	8008402 <UART_SetConfig+0x2fe>
 80081e4:	2308      	movs	r3, #8
 80081e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ea:	e10a      	b.n	8008402 <UART_SetConfig+0x2fe>
 80081ec:	2310      	movs	r3, #16
 80081ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081f2:	e106      	b.n	8008402 <UART_SetConfig+0x2fe>
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a7c      	ldr	r2, [pc, #496]	@ (80083ec <UART_SetConfig+0x2e8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d138      	bne.n	8008270 <UART_SetConfig+0x16c>
 80081fe:	4b7a      	ldr	r3, [pc, #488]	@ (80083e8 <UART_SetConfig+0x2e4>)
 8008200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008204:	f003 030c 	and.w	r3, r3, #12
 8008208:	2b0c      	cmp	r3, #12
 800820a:	d82d      	bhi.n	8008268 <UART_SetConfig+0x164>
 800820c:	a201      	add	r2, pc, #4	@ (adr r2, 8008214 <UART_SetConfig+0x110>)
 800820e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008212:	bf00      	nop
 8008214:	08008249 	.word	0x08008249
 8008218:	08008269 	.word	0x08008269
 800821c:	08008269 	.word	0x08008269
 8008220:	08008269 	.word	0x08008269
 8008224:	08008259 	.word	0x08008259
 8008228:	08008269 	.word	0x08008269
 800822c:	08008269 	.word	0x08008269
 8008230:	08008269 	.word	0x08008269
 8008234:	08008251 	.word	0x08008251
 8008238:	08008269 	.word	0x08008269
 800823c:	08008269 	.word	0x08008269
 8008240:	08008269 	.word	0x08008269
 8008244:	08008261 	.word	0x08008261
 8008248:	2300      	movs	r3, #0
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800824e:	e0d8      	b.n	8008402 <UART_SetConfig+0x2fe>
 8008250:	2302      	movs	r3, #2
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008256:	e0d4      	b.n	8008402 <UART_SetConfig+0x2fe>
 8008258:	2304      	movs	r3, #4
 800825a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800825e:	e0d0      	b.n	8008402 <UART_SetConfig+0x2fe>
 8008260:	2308      	movs	r3, #8
 8008262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008266:	e0cc      	b.n	8008402 <UART_SetConfig+0x2fe>
 8008268:	2310      	movs	r3, #16
 800826a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800826e:	e0c8      	b.n	8008402 <UART_SetConfig+0x2fe>
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a5e      	ldr	r2, [pc, #376]	@ (80083f0 <UART_SetConfig+0x2ec>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d125      	bne.n	80082c6 <UART_SetConfig+0x1c2>
 800827a:	4b5b      	ldr	r3, [pc, #364]	@ (80083e8 <UART_SetConfig+0x2e4>)
 800827c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008280:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008284:	2b30      	cmp	r3, #48	@ 0x30
 8008286:	d016      	beq.n	80082b6 <UART_SetConfig+0x1b2>
 8008288:	2b30      	cmp	r3, #48	@ 0x30
 800828a:	d818      	bhi.n	80082be <UART_SetConfig+0x1ba>
 800828c:	2b20      	cmp	r3, #32
 800828e:	d00a      	beq.n	80082a6 <UART_SetConfig+0x1a2>
 8008290:	2b20      	cmp	r3, #32
 8008292:	d814      	bhi.n	80082be <UART_SetConfig+0x1ba>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <UART_SetConfig+0x19a>
 8008298:	2b10      	cmp	r3, #16
 800829a:	d008      	beq.n	80082ae <UART_SetConfig+0x1aa>
 800829c:	e00f      	b.n	80082be <UART_SetConfig+0x1ba>
 800829e:	2300      	movs	r3, #0
 80082a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082a4:	e0ad      	b.n	8008402 <UART_SetConfig+0x2fe>
 80082a6:	2302      	movs	r3, #2
 80082a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ac:	e0a9      	b.n	8008402 <UART_SetConfig+0x2fe>
 80082ae:	2304      	movs	r3, #4
 80082b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082b4:	e0a5      	b.n	8008402 <UART_SetConfig+0x2fe>
 80082b6:	2308      	movs	r3, #8
 80082b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082bc:	e0a1      	b.n	8008402 <UART_SetConfig+0x2fe>
 80082be:	2310      	movs	r3, #16
 80082c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082c4:	e09d      	b.n	8008402 <UART_SetConfig+0x2fe>
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a4a      	ldr	r2, [pc, #296]	@ (80083f4 <UART_SetConfig+0x2f0>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d125      	bne.n	800831c <UART_SetConfig+0x218>
 80082d0:	4b45      	ldr	r3, [pc, #276]	@ (80083e8 <UART_SetConfig+0x2e4>)
 80082d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80082da:	2bc0      	cmp	r3, #192	@ 0xc0
 80082dc:	d016      	beq.n	800830c <UART_SetConfig+0x208>
 80082de:	2bc0      	cmp	r3, #192	@ 0xc0
 80082e0:	d818      	bhi.n	8008314 <UART_SetConfig+0x210>
 80082e2:	2b80      	cmp	r3, #128	@ 0x80
 80082e4:	d00a      	beq.n	80082fc <UART_SetConfig+0x1f8>
 80082e6:	2b80      	cmp	r3, #128	@ 0x80
 80082e8:	d814      	bhi.n	8008314 <UART_SetConfig+0x210>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d002      	beq.n	80082f4 <UART_SetConfig+0x1f0>
 80082ee:	2b40      	cmp	r3, #64	@ 0x40
 80082f0:	d008      	beq.n	8008304 <UART_SetConfig+0x200>
 80082f2:	e00f      	b.n	8008314 <UART_SetConfig+0x210>
 80082f4:	2300      	movs	r3, #0
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082fa:	e082      	b.n	8008402 <UART_SetConfig+0x2fe>
 80082fc:	2302      	movs	r3, #2
 80082fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008302:	e07e      	b.n	8008402 <UART_SetConfig+0x2fe>
 8008304:	2304      	movs	r3, #4
 8008306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800830a:	e07a      	b.n	8008402 <UART_SetConfig+0x2fe>
 800830c:	2308      	movs	r3, #8
 800830e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008312:	e076      	b.n	8008402 <UART_SetConfig+0x2fe>
 8008314:	2310      	movs	r3, #16
 8008316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800831a:	e072      	b.n	8008402 <UART_SetConfig+0x2fe>
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a35      	ldr	r2, [pc, #212]	@ (80083f8 <UART_SetConfig+0x2f4>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d12a      	bne.n	800837c <UART_SetConfig+0x278>
 8008326:	4b30      	ldr	r3, [pc, #192]	@ (80083e8 <UART_SetConfig+0x2e4>)
 8008328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800832c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008330:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008334:	d01a      	beq.n	800836c <UART_SetConfig+0x268>
 8008336:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800833a:	d81b      	bhi.n	8008374 <UART_SetConfig+0x270>
 800833c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008340:	d00c      	beq.n	800835c <UART_SetConfig+0x258>
 8008342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008346:	d815      	bhi.n	8008374 <UART_SetConfig+0x270>
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <UART_SetConfig+0x250>
 800834c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008350:	d008      	beq.n	8008364 <UART_SetConfig+0x260>
 8008352:	e00f      	b.n	8008374 <UART_SetConfig+0x270>
 8008354:	2300      	movs	r3, #0
 8008356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800835a:	e052      	b.n	8008402 <UART_SetConfig+0x2fe>
 800835c:	2302      	movs	r3, #2
 800835e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008362:	e04e      	b.n	8008402 <UART_SetConfig+0x2fe>
 8008364:	2304      	movs	r3, #4
 8008366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800836a:	e04a      	b.n	8008402 <UART_SetConfig+0x2fe>
 800836c:	2308      	movs	r3, #8
 800836e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008372:	e046      	b.n	8008402 <UART_SetConfig+0x2fe>
 8008374:	2310      	movs	r3, #16
 8008376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800837a:	e042      	b.n	8008402 <UART_SetConfig+0x2fe>
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a17      	ldr	r2, [pc, #92]	@ (80083e0 <UART_SetConfig+0x2dc>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d13a      	bne.n	80083fc <UART_SetConfig+0x2f8>
 8008386:	4b18      	ldr	r3, [pc, #96]	@ (80083e8 <UART_SetConfig+0x2e4>)
 8008388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800838c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008390:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008394:	d01a      	beq.n	80083cc <UART_SetConfig+0x2c8>
 8008396:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800839a:	d81b      	bhi.n	80083d4 <UART_SetConfig+0x2d0>
 800839c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083a0:	d00c      	beq.n	80083bc <UART_SetConfig+0x2b8>
 80083a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083a6:	d815      	bhi.n	80083d4 <UART_SetConfig+0x2d0>
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <UART_SetConfig+0x2b0>
 80083ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083b0:	d008      	beq.n	80083c4 <UART_SetConfig+0x2c0>
 80083b2:	e00f      	b.n	80083d4 <UART_SetConfig+0x2d0>
 80083b4:	2300      	movs	r3, #0
 80083b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ba:	e022      	b.n	8008402 <UART_SetConfig+0x2fe>
 80083bc:	2302      	movs	r3, #2
 80083be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083c2:	e01e      	b.n	8008402 <UART_SetConfig+0x2fe>
 80083c4:	2304      	movs	r3, #4
 80083c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ca:	e01a      	b.n	8008402 <UART_SetConfig+0x2fe>
 80083cc:	2308      	movs	r3, #8
 80083ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083d2:	e016      	b.n	8008402 <UART_SetConfig+0x2fe>
 80083d4:	2310      	movs	r3, #16
 80083d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083da:	e012      	b.n	8008402 <UART_SetConfig+0x2fe>
 80083dc:	cfff69f3 	.word	0xcfff69f3
 80083e0:	40008000 	.word	0x40008000
 80083e4:	40013800 	.word	0x40013800
 80083e8:	40021000 	.word	0x40021000
 80083ec:	40004400 	.word	0x40004400
 80083f0:	40004800 	.word	0x40004800
 80083f4:	40004c00 	.word	0x40004c00
 80083f8:	40005000 	.word	0x40005000
 80083fc:	2310      	movs	r3, #16
 80083fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4aae      	ldr	r2, [pc, #696]	@ (80086c0 <UART_SetConfig+0x5bc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	f040 8097 	bne.w	800853c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800840e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008412:	2b08      	cmp	r3, #8
 8008414:	d823      	bhi.n	800845e <UART_SetConfig+0x35a>
 8008416:	a201      	add	r2, pc, #4	@ (adr r2, 800841c <UART_SetConfig+0x318>)
 8008418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841c:	08008441 	.word	0x08008441
 8008420:	0800845f 	.word	0x0800845f
 8008424:	08008449 	.word	0x08008449
 8008428:	0800845f 	.word	0x0800845f
 800842c:	0800844f 	.word	0x0800844f
 8008430:	0800845f 	.word	0x0800845f
 8008434:	0800845f 	.word	0x0800845f
 8008438:	0800845f 	.word	0x0800845f
 800843c:	08008457 	.word	0x08008457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008440:	f7fe f8b2 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 8008444:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008446:	e010      	b.n	800846a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008448:	4b9e      	ldr	r3, [pc, #632]	@ (80086c4 <UART_SetConfig+0x5c0>)
 800844a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800844c:	e00d      	b.n	800846a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800844e:	f7fe f83d 	bl	80064cc <HAL_RCC_GetSysClockFreq>
 8008452:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008454:	e009      	b.n	800846a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800845a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800845c:	e005      	b.n	800846a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800845e:	2300      	movs	r3, #0
 8008460:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008468:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800846a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 8130 	beq.w	80086d2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008476:	4a94      	ldr	r2, [pc, #592]	@ (80086c8 <UART_SetConfig+0x5c4>)
 8008478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800847c:	461a      	mov	r2, r3
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	fbb3 f3f2 	udiv	r3, r3, r2
 8008484:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	4613      	mov	r3, r2
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	4413      	add	r3, r2
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	429a      	cmp	r2, r3
 8008494:	d305      	bcc.n	80084a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800849c:	69ba      	ldr	r2, [r7, #24]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d903      	bls.n	80084aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80084a8:	e113      	b.n	80086d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ac:	2200      	movs	r2, #0
 80084ae:	60bb      	str	r3, [r7, #8]
 80084b0:	60fa      	str	r2, [r7, #12]
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b6:	4a84      	ldr	r2, [pc, #528]	@ (80086c8 <UART_SetConfig+0x5c4>)
 80084b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	2200      	movs	r2, #0
 80084c0:	603b      	str	r3, [r7, #0]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084cc:	f7f8 f91c 	bl	8000708 <__aeabi_uldivmod>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	4610      	mov	r0, r2
 80084d6:	4619      	mov	r1, r3
 80084d8:	f04f 0200 	mov.w	r2, #0
 80084dc:	f04f 0300 	mov.w	r3, #0
 80084e0:	020b      	lsls	r3, r1, #8
 80084e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084e6:	0202      	lsls	r2, r0, #8
 80084e8:	6979      	ldr	r1, [r7, #20]
 80084ea:	6849      	ldr	r1, [r1, #4]
 80084ec:	0849      	lsrs	r1, r1, #1
 80084ee:	2000      	movs	r0, #0
 80084f0:	460c      	mov	r4, r1
 80084f2:	4605      	mov	r5, r0
 80084f4:	eb12 0804 	adds.w	r8, r2, r4
 80084f8:	eb43 0905 	adc.w	r9, r3, r5
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	469a      	mov	sl, r3
 8008504:	4693      	mov	fp, r2
 8008506:	4652      	mov	r2, sl
 8008508:	465b      	mov	r3, fp
 800850a:	4640      	mov	r0, r8
 800850c:	4649      	mov	r1, r9
 800850e:	f7f8 f8fb 	bl	8000708 <__aeabi_uldivmod>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4613      	mov	r3, r2
 8008518:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008520:	d308      	bcc.n	8008534 <UART_SetConfig+0x430>
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008528:	d204      	bcs.n	8008534 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6a3a      	ldr	r2, [r7, #32]
 8008530:	60da      	str	r2, [r3, #12]
 8008532:	e0ce      	b.n	80086d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800853a:	e0ca      	b.n	80086d2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008544:	d166      	bne.n	8008614 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008546:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800854a:	2b08      	cmp	r3, #8
 800854c:	d827      	bhi.n	800859e <UART_SetConfig+0x49a>
 800854e:	a201      	add	r2, pc, #4	@ (adr r2, 8008554 <UART_SetConfig+0x450>)
 8008550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008554:	08008579 	.word	0x08008579
 8008558:	08008581 	.word	0x08008581
 800855c:	08008589 	.word	0x08008589
 8008560:	0800859f 	.word	0x0800859f
 8008564:	0800858f 	.word	0x0800858f
 8008568:	0800859f 	.word	0x0800859f
 800856c:	0800859f 	.word	0x0800859f
 8008570:	0800859f 	.word	0x0800859f
 8008574:	08008597 	.word	0x08008597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008578:	f7fe f816 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 800857c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800857e:	e014      	b.n	80085aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008580:	f7fe f828 	bl	80065d4 <HAL_RCC_GetPCLK2Freq>
 8008584:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008586:	e010      	b.n	80085aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008588:	4b4e      	ldr	r3, [pc, #312]	@ (80086c4 <UART_SetConfig+0x5c0>)
 800858a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800858c:	e00d      	b.n	80085aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800858e:	f7fd ff9d 	bl	80064cc <HAL_RCC_GetSysClockFreq>
 8008592:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008594:	e009      	b.n	80085aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800859a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800859c:	e005      	b.n	80085aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800859e:	2300      	movs	r3, #0
 80085a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 8090 	beq.w	80086d2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b6:	4a44      	ldr	r2, [pc, #272]	@ (80086c8 <UART_SetConfig+0x5c4>)
 80085b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085bc:	461a      	mov	r2, r3
 80085be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80085c4:	005a      	lsls	r2, r3, #1
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	085b      	lsrs	r3, r3, #1
 80085cc:	441a      	add	r2, r3
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	2b0f      	cmp	r3, #15
 80085dc:	d916      	bls.n	800860c <UART_SetConfig+0x508>
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085e4:	d212      	bcs.n	800860c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	f023 030f 	bic.w	r3, r3, #15
 80085ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	085b      	lsrs	r3, r3, #1
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	f003 0307 	and.w	r3, r3, #7
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	8bfb      	ldrh	r3, [r7, #30]
 80085fe:	4313      	orrs	r3, r2
 8008600:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	8bfa      	ldrh	r2, [r7, #30]
 8008608:	60da      	str	r2, [r3, #12]
 800860a:	e062      	b.n	80086d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008612:	e05e      	b.n	80086d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008614:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008618:	2b08      	cmp	r3, #8
 800861a:	d828      	bhi.n	800866e <UART_SetConfig+0x56a>
 800861c:	a201      	add	r2, pc, #4	@ (adr r2, 8008624 <UART_SetConfig+0x520>)
 800861e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008622:	bf00      	nop
 8008624:	08008649 	.word	0x08008649
 8008628:	08008651 	.word	0x08008651
 800862c:	08008659 	.word	0x08008659
 8008630:	0800866f 	.word	0x0800866f
 8008634:	0800865f 	.word	0x0800865f
 8008638:	0800866f 	.word	0x0800866f
 800863c:	0800866f 	.word	0x0800866f
 8008640:	0800866f 	.word	0x0800866f
 8008644:	08008667 	.word	0x08008667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008648:	f7fd ffae 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 800864c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800864e:	e014      	b.n	800867a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008650:	f7fd ffc0 	bl	80065d4 <HAL_RCC_GetPCLK2Freq>
 8008654:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008656:	e010      	b.n	800867a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008658:	4b1a      	ldr	r3, [pc, #104]	@ (80086c4 <UART_SetConfig+0x5c0>)
 800865a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800865c:	e00d      	b.n	800867a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800865e:	f7fd ff35 	bl	80064cc <HAL_RCC_GetSysClockFreq>
 8008662:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008664:	e009      	b.n	800867a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800866a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800866c:	e005      	b.n	800867a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008678:	bf00      	nop
    }

    if (pclk != 0U)
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867c:	2b00      	cmp	r3, #0
 800867e:	d028      	beq.n	80086d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008684:	4a10      	ldr	r2, [pc, #64]	@ (80086c8 <UART_SetConfig+0x5c4>)
 8008686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800868a:	461a      	mov	r2, r3
 800868c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	085b      	lsrs	r3, r3, #1
 8008698:	441a      	add	r2, r3
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	2b0f      	cmp	r3, #15
 80086a8:	d910      	bls.n	80086cc <UART_SetConfig+0x5c8>
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086b0:	d20c      	bcs.n	80086cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60da      	str	r2, [r3, #12]
 80086bc:	e009      	b.n	80086d2 <UART_SetConfig+0x5ce>
 80086be:	bf00      	nop
 80086c0:	40008000 	.word	0x40008000
 80086c4:	00f42400 	.word	0x00f42400
 80086c8:	0801a56c 	.word	0x0801a56c
      }
      else
      {
        ret = HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2201      	movs	r2, #1
 80086de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2200      	movs	r2, #0
 80086e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2200      	movs	r2, #0
 80086ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80086ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3730      	adds	r7, #48	@ 0x30
 80086f6:	46bd      	mov	sp, r7
 80086f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080086fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008708:	f003 0308 	and.w	r3, r3, #8
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00a      	beq.n	8008726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00a      	beq.n	8008748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00a      	beq.n	800876a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00a      	beq.n	800878c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	430a      	orrs	r2, r1
 800878a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008790:	f003 0310 	and.w	r3, r3, #16
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00a      	beq.n	80087ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00a      	beq.n	80087d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d01a      	beq.n	8008812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087fa:	d10a      	bne.n	8008812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00a      	beq.n	8008834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	605a      	str	r2, [r3, #4]
  }
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b098      	sub	sp, #96	@ 0x60
 8008844:	af02      	add	r7, sp, #8
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008850:	f7fa f8c0 	bl	80029d4 <HAL_GetTick>
 8008854:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0308 	and.w	r3, r3, #8
 8008860:	2b08      	cmp	r3, #8
 8008862:	d12f      	bne.n	80088c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008864:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800886c:	2200      	movs	r2, #0
 800886e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f88e 	bl	8008994 <UART_WaitOnFlagUntilTimeout>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d022      	beq.n	80088c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800888c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008892:	653b      	str	r3, [r7, #80]	@ 0x50
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
 800889a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800889c:	647b      	str	r3, [r7, #68]	@ 0x44
 800889e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088a4:	e841 2300 	strex	r3, r2, [r1]
 80088a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e6      	bne.n	800887e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e063      	b.n	800898c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0304 	and.w	r3, r3, #4
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d149      	bne.n	8008966 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088da:	2200      	movs	r2, #0
 80088dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f857 	bl	8008994 <UART_WaitOnFlagUntilTimeout>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d03c      	beq.n	8008966 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	623b      	str	r3, [r7, #32]
   return(result);
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008900:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800890a:	633b      	str	r3, [r7, #48]	@ 0x30
 800890c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e6      	bne.n	80088ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3308      	adds	r3, #8
 8008924:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	60fb      	str	r3, [r7, #12]
   return(result);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f023 0301 	bic.w	r3, r3, #1
 8008934:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3308      	adds	r3, #8
 800893c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800893e:	61fa      	str	r2, [r7, #28]
 8008940:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008942:	69b9      	ldr	r1, [r7, #24]
 8008944:	69fa      	ldr	r2, [r7, #28]
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	617b      	str	r3, [r7, #20]
   return(result);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e5      	bne.n	800891e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2220      	movs	r2, #32
 8008956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e012      	b.n	800898c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2220      	movs	r2, #32
 800896a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2220      	movs	r2, #32
 8008972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3758      	adds	r7, #88	@ 0x58
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	4613      	mov	r3, r2
 80089a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089a4:	e04f      	b.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089ac:	d04b      	beq.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ae:	f7fa f811 	bl	80029d4 <HAL_GetTick>
 80089b2:	4602      	mov	r2, r0
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d302      	bcc.n	80089c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e04e      	b.n	8008a66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d037      	beq.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xb2>
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b80      	cmp	r3, #128	@ 0x80
 80089da:	d034      	beq.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xb2>
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b40      	cmp	r3, #64	@ 0x40
 80089e0:	d031      	beq.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	f003 0308 	and.w	r3, r3, #8
 80089ec:	2b08      	cmp	r3, #8
 80089ee:	d110      	bne.n	8008a12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2208      	movs	r2, #8
 80089f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 f920 	bl	8008c3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2208      	movs	r2, #8
 8008a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e029      	b.n	8008a66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a20:	d111      	bne.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 f906 	bl	8008c3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e00f      	b.n	8008a66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69da      	ldr	r2, [r3, #28]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	bf0c      	ite	eq
 8008a56:	2301      	moveq	r3, #1
 8008a58:	2300      	movne	r3, #0
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d0a0      	beq.n	80089a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b096      	sub	sp, #88	@ 0x58
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	88fa      	ldrh	r2, [r7, #6]
 8008a88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2222      	movs	r2, #34	@ 0x22
 8008a98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d02d      	beq.n	8008b02 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aac:	4a40      	ldr	r2, [pc, #256]	@ (8008bb0 <UART_Start_Receive_DMA+0x140>)
 8008aae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8008bb4 <UART_Start_Receive_DMA+0x144>)
 8008ab8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ac0:	4a3d      	ldr	r2, [pc, #244]	@ (8008bb8 <UART_Start_Receive_DMA+0x148>)
 8008ac2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aca:	2200      	movs	r2, #0
 8008acc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3324      	adds	r3, #36	@ 0x24
 8008ada:	4619      	mov	r1, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	88fb      	ldrh	r3, [r7, #6]
 8008ae4:	f7fa f92c 	bl	8002d40 <HAL_DMA_Start_IT>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d009      	beq.n	8008b02 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2210      	movs	r2, #16
 8008af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e051      	b.n	8008ba6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d018      	beq.n	8008b3c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b12:	e853 3f00 	ldrex	r3, [r3]
 8008b16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	461a      	mov	r2, r3
 8008b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b2a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b30:	e841 2300 	strex	r3, r2, [r1]
 8008b34:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e6      	bne.n	8008b0a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3308      	adds	r3, #8
 8008b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b46:	e853 3f00 	ldrex	r3, [r3]
 8008b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4e:	f043 0301 	orr.w	r3, r3, #1
 8008b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3308      	adds	r3, #8
 8008b5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b5c:	637a      	str	r2, [r7, #52]	@ 0x34
 8008b5e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b64:	e841 2300 	strex	r3, r2, [r1]
 8008b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e5      	bne.n	8008b3c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3308      	adds	r3, #8
 8008b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	e853 3f00 	ldrex	r3, [r3]
 8008b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b90:	623a      	str	r2, [r7, #32]
 8008b92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b94:	69f9      	ldr	r1, [r7, #28]
 8008b96:	6a3a      	ldr	r2, [r7, #32]
 8008b98:	e841 2300 	strex	r3, r2, [r1]
 8008b9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e5      	bne.n	8008b70 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3758      	adds	r7, #88	@ 0x58
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	08008dc1 	.word	0x08008dc1
 8008bb4:	08008eed 	.word	0x08008eed
 8008bb8:	08008f2b 	.word	0x08008f2b

08008bbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b08f      	sub	sp, #60	@ 0x3c
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008be4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008be8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e6      	bne.n	8008bc4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	e853 3f00 	ldrex	r3, [r3]
 8008c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008c0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3308      	adds	r3, #8
 8008c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c16:	61ba      	str	r2, [r7, #24]
 8008c18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1a:	6979      	ldr	r1, [r7, #20]
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	e841 2300 	strex	r3, r2, [r1]
 8008c22:	613b      	str	r3, [r7, #16]
   return(result);
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1e5      	bne.n	8008bf6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008c32:	bf00      	nop
 8008c34:	373c      	adds	r7, #60	@ 0x3c
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b095      	sub	sp, #84	@ 0x54
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c4e:	e853 3f00 	ldrex	r3, [r3]
 8008c52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	461a      	mov	r2, r3
 8008c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c64:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c6c:	e841 2300 	strex	r3, r2, [r1]
 8008c70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1e6      	bne.n	8008c46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c8e:	f023 0301 	bic.w	r3, r3, #1
 8008c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3308      	adds	r3, #8
 8008c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ca4:	e841 2300 	strex	r3, r2, [r1]
 8008ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1e3      	bne.n	8008c78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d118      	bne.n	8008cea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	e853 3f00 	ldrex	r3, [r3]
 8008cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f023 0310 	bic.w	r3, r3, #16
 8008ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cd6:	61bb      	str	r3, [r7, #24]
 8008cd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cda:	6979      	ldr	r1, [r7, #20]
 8008cdc:	69ba      	ldr	r2, [r7, #24]
 8008cde:	e841 2300 	strex	r3, r2, [r1]
 8008ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1e6      	bne.n	8008cb8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2220      	movs	r2, #32
 8008cee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008cfe:	bf00      	nop
 8008d00:	3754      	adds	r7, #84	@ 0x54
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b090      	sub	sp, #64	@ 0x40
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d16:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0320 	and.w	r3, r3, #32
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d137      	bne.n	8008d96 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3308      	adds	r3, #8
 8008d34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e5      	bne.n	8008d2e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	e853 3f00 	ldrex	r3, [r3]
 8008d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d80:	61fb      	str	r3, [r7, #28]
 8008d82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d84:	69b9      	ldr	r1, [r7, #24]
 8008d86:	69fa      	ldr	r2, [r7, #28]
 8008d88:	e841 2300 	strex	r3, r2, [r1]
 8008d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e6      	bne.n	8008d62 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d94:	e002      	b.n	8008d9c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008d96:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008d98:	f7ff f976 	bl	8008088 <HAL_UART_TxCpltCallback>
}
 8008d9c:	bf00      	nop
 8008d9e:	3740      	adds	r7, #64	@ 0x40
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f7ff f972 	bl	800809c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008db8:	bf00      	nop
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b09c      	sub	sp, #112	@ 0x70
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dcc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0320 	and.w	r3, r3, #32
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d171      	bne.n	8008ec0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008de4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dec:	e853 3f00 	ldrex	r3, [r3]
 8008df0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008df8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e0a:	e841 2300 	strex	r3, r2, [r1]
 8008e0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1e6      	bne.n	8008de4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e28:	f023 0301 	bic.w	r3, r3, #1
 8008e2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3308      	adds	r3, #8
 8008e34:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008e36:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e5      	bne.n	8008e16 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	623b      	str	r3, [r7, #32]
   return(result);
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e60:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3308      	adds	r3, #8
 8008e68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e5      	bne.n	8008e4a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e80:	2220      	movs	r2, #32
 8008e82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d118      	bne.n	8008ec0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	e853 3f00 	ldrex	r3, [r3]
 8008e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0310 	bic.w	r3, r3, #16
 8008ea2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008eac:	61fb      	str	r3, [r7, #28]
 8008eae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb0:	69b9      	ldr	r1, [r7, #24]
 8008eb2:	69fa      	ldr	r2, [r7, #28]
 8008eb4:	e841 2300 	strex	r3, r2, [r1]
 8008eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1e6      	bne.n	8008e8e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d107      	bne.n	8008ede <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ed0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008ed8:	f7ff f908 	bl	80080ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008edc:	e002      	b.n	8008ee4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008ede:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008ee0:	f7ff f8e6 	bl	80080b0 <HAL_UART_RxCpltCallback>
}
 8008ee4:	bf00      	nop
 8008ee6:	3770      	adds	r7, #112	@ 0x70
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2201      	movs	r2, #1
 8008efe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d109      	bne.n	8008f1c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f0e:	085b      	lsrs	r3, r3, #1
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	4619      	mov	r1, r3
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f7ff f8e9 	bl	80080ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f1a:	e002      	b.n	8008f22 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f7ff f8d1 	bl	80080c4 <HAL_UART_RxHalfCpltCallback>
}
 8008f22:	bf00      	nop
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b086      	sub	sp, #24
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f36:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f52:	2b80      	cmp	r3, #128	@ 0x80
 8008f54:	d109      	bne.n	8008f6a <UART_DMAError+0x40>
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	2b21      	cmp	r3, #33	@ 0x21
 8008f5a:	d106      	bne.n	8008f6a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008f64:	6978      	ldr	r0, [r7, #20]
 8008f66:	f7ff fe29 	bl	8008bbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f74:	2b40      	cmp	r3, #64	@ 0x40
 8008f76:	d109      	bne.n	8008f8c <UART_DMAError+0x62>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b22      	cmp	r3, #34	@ 0x22
 8008f7c:	d106      	bne.n	8008f8c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008f86:	6978      	ldr	r0, [r7, #20]
 8008f88:	f7ff fe59 	bl	8008c3e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f92:	f043 0210 	orr.w	r2, r3, #16
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f9c:	6978      	ldr	r0, [r7, #20]
 8008f9e:	f7ff f89b 	bl	80080d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fa2:	bf00      	nop
 8008fa4:	3718      	adds	r7, #24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f7ff f889 	bl	80080d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b088      	sub	sp, #32
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fea:	61fb      	str	r3, [r7, #28]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	61bb      	str	r3, [r7, #24]
 8008ff6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	6979      	ldr	r1, [r7, #20]
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	e841 2300 	strex	r3, r2, [r1]
 8009000:	613b      	str	r3, [r7, #16]
   return(result);
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e6      	bne.n	8008fd6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2220      	movs	r2, #32
 800900c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7ff f836 	bl	8008088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800901c:	bf00      	nop
 800901e:	3720      	adds	r7, #32
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800906e:	2b01      	cmp	r3, #1
 8009070:	d101      	bne.n	8009076 <HAL_UARTEx_DisableFifoMode+0x16>
 8009072:	2302      	movs	r3, #2
 8009074:	e027      	b.n	80090c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2224      	movs	r2, #36	@ 0x24
 8009082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f022 0201 	bic.w	r2, r2, #1
 800909c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80090a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d101      	bne.n	80090ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80090e6:	2302      	movs	r3, #2
 80090e8:	e02d      	b.n	8009146 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2224      	movs	r2, #36	@ 0x24
 80090f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0201 	bic.w	r2, r2, #1
 8009110:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	430a      	orrs	r2, r1
 8009124:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f850 	bl	80091cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2220      	movs	r2, #32
 8009138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009162:	2302      	movs	r3, #2
 8009164:	e02d      	b.n	80091c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2224      	movs	r2, #36	@ 0x24
 8009172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0201 	bic.w	r2, r2, #1
 800918c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	430a      	orrs	r2, r1
 80091a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f812 	bl	80091cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
	...

080091cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d108      	bne.n	80091ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80091ec:	e031      	b.n	8009252 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80091ee:	2308      	movs	r3, #8
 80091f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80091f2:	2308      	movs	r3, #8
 80091f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	0e5b      	lsrs	r3, r3, #25
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	f003 0307 	and.w	r3, r3, #7
 8009204:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	0f5b      	lsrs	r3, r3, #29
 800920e:	b2db      	uxtb	r3, r3
 8009210:	f003 0307 	and.w	r3, r3, #7
 8009214:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009216:	7bbb      	ldrb	r3, [r7, #14]
 8009218:	7b3a      	ldrb	r2, [r7, #12]
 800921a:	4911      	ldr	r1, [pc, #68]	@ (8009260 <UARTEx_SetNbDataToProcess+0x94>)
 800921c:	5c8a      	ldrb	r2, [r1, r2]
 800921e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009222:	7b3a      	ldrb	r2, [r7, #12]
 8009224:	490f      	ldr	r1, [pc, #60]	@ (8009264 <UARTEx_SetNbDataToProcess+0x98>)
 8009226:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009228:	fb93 f3f2 	sdiv	r3, r3, r2
 800922c:	b29a      	uxth	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009234:	7bfb      	ldrb	r3, [r7, #15]
 8009236:	7b7a      	ldrb	r2, [r7, #13]
 8009238:	4909      	ldr	r1, [pc, #36]	@ (8009260 <UARTEx_SetNbDataToProcess+0x94>)
 800923a:	5c8a      	ldrb	r2, [r1, r2]
 800923c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009240:	7b7a      	ldrb	r2, [r7, #13]
 8009242:	4908      	ldr	r1, [pc, #32]	@ (8009264 <UARTEx_SetNbDataToProcess+0x98>)
 8009244:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009246:	fb93 f3f2 	sdiv	r3, r3, r2
 800924a:	b29a      	uxth	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009252:	bf00      	nop
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	0801a584 	.word	0x0801a584
 8009264:	0801a58c 	.word	0x0801a58c

08009268 <__NVIC_SetPriority>:
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009278:	2b00      	cmp	r3, #0
 800927a:	db0a      	blt.n	8009292 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	b2da      	uxtb	r2, r3
 8009280:	490c      	ldr	r1, [pc, #48]	@ (80092b4 <__NVIC_SetPriority+0x4c>)
 8009282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009286:	0112      	lsls	r2, r2, #4
 8009288:	b2d2      	uxtb	r2, r2
 800928a:	440b      	add	r3, r1
 800928c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009290:	e00a      	b.n	80092a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	b2da      	uxtb	r2, r3
 8009296:	4908      	ldr	r1, [pc, #32]	@ (80092b8 <__NVIC_SetPriority+0x50>)
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	f003 030f 	and.w	r3, r3, #15
 800929e:	3b04      	subs	r3, #4
 80092a0:	0112      	lsls	r2, r2, #4
 80092a2:	b2d2      	uxtb	r2, r2
 80092a4:	440b      	add	r3, r1
 80092a6:	761a      	strb	r2, [r3, #24]
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	e000e100 	.word	0xe000e100
 80092b8:	e000ed00 	.word	0xe000ed00

080092bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80092c0:	4b05      	ldr	r3, [pc, #20]	@ (80092d8 <SysTick_Handler+0x1c>)
 80092c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80092c4:	f001 fd40 	bl	800ad48 <xTaskGetSchedulerState>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d001      	beq.n	80092d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80092ce:	f002 fb3b 	bl	800b948 <xPortSysTickHandler>
  }
}
 80092d2:	bf00      	nop
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	e000e010 	.word	0xe000e010

080092dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80092dc:	b580      	push	{r7, lr}
 80092de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80092e0:	2100      	movs	r1, #0
 80092e2:	f06f 0004 	mvn.w	r0, #4
 80092e6:	f7ff ffbf 	bl	8009268 <__NVIC_SetPriority>
#endif
}
 80092ea:	bf00      	nop
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092f6:	f3ef 8305 	mrs	r3, IPSR
 80092fa:	603b      	str	r3, [r7, #0]
  return(result);
 80092fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009302:	f06f 0305 	mvn.w	r3, #5
 8009306:	607b      	str	r3, [r7, #4]
 8009308:	e00c      	b.n	8009324 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800930a:	4b0a      	ldr	r3, [pc, #40]	@ (8009334 <osKernelInitialize+0x44>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d105      	bne.n	800931e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009312:	4b08      	ldr	r3, [pc, #32]	@ (8009334 <osKernelInitialize+0x44>)
 8009314:	2201      	movs	r2, #1
 8009316:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009318:	2300      	movs	r3, #0
 800931a:	607b      	str	r3, [r7, #4]
 800931c:	e002      	b.n	8009324 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800931e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009322:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009324:	687b      	ldr	r3, [r7, #4]
}
 8009326:	4618      	mov	r0, r3
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	20004b8c 	.word	0x20004b8c

08009338 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800933e:	f3ef 8305 	mrs	r3, IPSR
 8009342:	603b      	str	r3, [r7, #0]
  return(result);
 8009344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <osKernelStart+0x1a>
    stat = osErrorISR;
 800934a:	f06f 0305 	mvn.w	r3, #5
 800934e:	607b      	str	r3, [r7, #4]
 8009350:	e010      	b.n	8009374 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009352:	4b0b      	ldr	r3, [pc, #44]	@ (8009380 <osKernelStart+0x48>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d109      	bne.n	800936e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800935a:	f7ff ffbf 	bl	80092dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800935e:	4b08      	ldr	r3, [pc, #32]	@ (8009380 <osKernelStart+0x48>)
 8009360:	2202      	movs	r2, #2
 8009362:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009364:	f001 f87a 	bl	800a45c <vTaskStartScheduler>
      stat = osOK;
 8009368:	2300      	movs	r3, #0
 800936a:	607b      	str	r3, [r7, #4]
 800936c:	e002      	b.n	8009374 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800936e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009372:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009374:	687b      	ldr	r3, [r7, #4]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20004b8c 	.word	0x20004b8c

08009384 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009384:	b580      	push	{r7, lr}
 8009386:	b08e      	sub	sp, #56	@ 0x38
 8009388:	af04      	add	r7, sp, #16
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009390:	2300      	movs	r3, #0
 8009392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009394:	f3ef 8305 	mrs	r3, IPSR
 8009398:	617b      	str	r3, [r7, #20]
  return(result);
 800939a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800939c:	2b00      	cmp	r3, #0
 800939e:	d17e      	bne.n	800949e <osThreadNew+0x11a>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d07b      	beq.n	800949e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80093a6:	2380      	movs	r3, #128	@ 0x80
 80093a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80093aa:	2318      	movs	r3, #24
 80093ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80093b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d045      	beq.n	800944a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <osThreadNew+0x48>
        name = attr->name;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d008      	beq.n	80093f2 <osThreadNew+0x6e>
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	2b38      	cmp	r3, #56	@ 0x38
 80093e4:	d805      	bhi.n	80093f2 <osThreadNew+0x6e>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <osThreadNew+0x72>
        return (NULL);
 80093f2:	2300      	movs	r3, #0
 80093f4:	e054      	b.n	80094a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	089b      	lsrs	r3, r3, #2
 8009404:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00e      	beq.n	800942c <osThreadNew+0xa8>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	2b5b      	cmp	r3, #91	@ 0x5b
 8009414:	d90a      	bls.n	800942c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800941a:	2b00      	cmp	r3, #0
 800941c:	d006      	beq.n	800942c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <osThreadNew+0xa8>
        mem = 1;
 8009426:	2301      	movs	r3, #1
 8009428:	61bb      	str	r3, [r7, #24]
 800942a:	e010      	b.n	800944e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10c      	bne.n	800944e <osThreadNew+0xca>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d108      	bne.n	800944e <osThreadNew+0xca>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d104      	bne.n	800944e <osThreadNew+0xca>
          mem = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	61bb      	str	r3, [r7, #24]
 8009448:	e001      	b.n	800944e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d110      	bne.n	8009476 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800945c:	9202      	str	r2, [sp, #8]
 800945e:	9301      	str	r3, [sp, #4]
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	6a3a      	ldr	r2, [r7, #32]
 8009468:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 fe1a 	bl	800a0a4 <xTaskCreateStatic>
 8009470:	4603      	mov	r3, r0
 8009472:	613b      	str	r3, [r7, #16]
 8009474:	e013      	b.n	800949e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d110      	bne.n	800949e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	b29a      	uxth	r2, r3
 8009480:	f107 0310 	add.w	r3, r7, #16
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 fe68 	bl	800a164 <xTaskCreate>
 8009494:	4603      	mov	r3, r0
 8009496:	2b01      	cmp	r3, #1
 8009498:	d001      	beq.n	800949e <osThreadNew+0x11a>
            hTask = NULL;
 800949a:	2300      	movs	r3, #0
 800949c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800949e:	693b      	ldr	r3, [r7, #16]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3728      	adds	r7, #40	@ 0x28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094b0:	f3ef 8305 	mrs	r3, IPSR
 80094b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80094b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <osDelay+0x1c>
    stat = osErrorISR;
 80094bc:	f06f 0305 	mvn.w	r3, #5
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	e007      	b.n	80094d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 ff8e 	bl	800a3f0 <vTaskDelay>
    }
  }

  return (stat);
 80094d4:	68fb      	ldr	r3, [r7, #12]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
	...

080094e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4a07      	ldr	r2, [pc, #28]	@ (800950c <vApplicationGetIdleTaskMemory+0x2c>)
 80094f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	4a06      	ldr	r2, [pc, #24]	@ (8009510 <vApplicationGetIdleTaskMemory+0x30>)
 80094f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2280      	movs	r2, #128	@ 0x80
 80094fc:	601a      	str	r2, [r3, #0]
}
 80094fe:	bf00      	nop
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20004b90 	.word	0x20004b90
 8009510:	20004bec 	.word	0x20004bec

08009514 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4a07      	ldr	r2, [pc, #28]	@ (8009540 <vApplicationGetTimerTaskMemory+0x2c>)
 8009524:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	4a06      	ldr	r2, [pc, #24]	@ (8009544 <vApplicationGetTimerTaskMemory+0x30>)
 800952a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009532:	601a      	str	r2, [r3, #0]
}
 8009534:	bf00      	nop
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	20004dec 	.word	0x20004dec
 8009544:	20004e48 	.word	0x20004e48

08009548 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f103 0208 	add.w	r2, r3, #8
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009560:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f103 0208 	add.w	r2, r3, #8
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f103 0208 	add.w	r2, r3, #8
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009596:	bf00      	nop
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095a2:	b480      	push	{r7}
 80095a4:	b085      	sub	sp, #20
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	601a      	str	r2, [r3, #0]
}
 80095de:	bf00      	nop
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095ea:	b480      	push	{r7}
 80095ec:	b085      	sub	sp, #20
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009600:	d103      	bne.n	800960a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	e00c      	b.n	8009624 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	3308      	adds	r3, #8
 800960e:	60fb      	str	r3, [r7, #12]
 8009610:	e002      	b.n	8009618 <vListInsert+0x2e>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	429a      	cmp	r2, r3
 8009622:	d2f6      	bcs.n	8009612 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	683a      	ldr	r2, [r7, #0]
 800963e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	601a      	str	r2, [r3, #0]
}
 8009650:	bf00      	nop
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	6892      	ldr	r2, [r2, #8]
 8009672:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	6852      	ldr	r2, [r2, #4]
 800967c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	429a      	cmp	r2, r3
 8009686:	d103      	bne.n	8009690 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	1e5a      	subs	r2, r3, #1
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10b      	bne.n	80096dc <xQueueGenericReset+0x2c>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	60bb      	str	r3, [r7, #8]
}
 80096d6:	bf00      	nop
 80096d8:	bf00      	nop
 80096da:	e7fd      	b.n	80096d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80096dc:	f002 f8a4 	bl	800b828 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096e8:	68f9      	ldr	r1, [r7, #12]
 80096ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80096ec:	fb01 f303 	mul.w	r3, r1, r3
 80096f0:	441a      	add	r2, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800970c:	3b01      	subs	r3, #1
 800970e:	68f9      	ldr	r1, [r7, #12]
 8009710:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009712:	fb01 f303 	mul.w	r3, r1, r3
 8009716:	441a      	add	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	22ff      	movs	r2, #255	@ 0xff
 8009720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	22ff      	movs	r2, #255	@ 0xff
 8009728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d114      	bne.n	800975c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d01a      	beq.n	8009770 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3310      	adds	r3, #16
 800973e:	4618      	mov	r0, r3
 8009740:	f001 f91a 	bl	800a978 <xTaskRemoveFromEventList>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d012      	beq.n	8009770 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800974a:	4b0d      	ldr	r3, [pc, #52]	@ (8009780 <xQueueGenericReset+0xd0>)
 800974c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	e009      	b.n	8009770 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3310      	adds	r3, #16
 8009760:	4618      	mov	r0, r3
 8009762:	f7ff fef1 	bl	8009548 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3324      	adds	r3, #36	@ 0x24
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff feec 	bl	8009548 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009770:	f002 f88c 	bl	800b88c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009774:	2301      	movs	r3, #1
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	e000ed04 	.word	0xe000ed04

08009784 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08e      	sub	sp, #56	@ 0x38
 8009788:	af02      	add	r7, sp, #8
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
 8009790:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10b      	bne.n	80097b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80097aa:	bf00      	nop
 80097ac:	bf00      	nop
 80097ae:	e7fd      	b.n	80097ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10b      	bne.n	80097ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80097b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80097c8:	bf00      	nop
 80097ca:	bf00      	nop
 80097cc:	e7fd      	b.n	80097ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d002      	beq.n	80097da <xQueueGenericCreateStatic+0x56>
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <xQueueGenericCreateStatic+0x5a>
 80097da:	2301      	movs	r3, #1
 80097dc:	e000      	b.n	80097e0 <xQueueGenericCreateStatic+0x5c>
 80097de:	2300      	movs	r3, #0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10b      	bne.n	80097fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	623b      	str	r3, [r7, #32]
}
 80097f6:	bf00      	nop
 80097f8:	bf00      	nop
 80097fa:	e7fd      	b.n	80097f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d102      	bne.n	8009808 <xQueueGenericCreateStatic+0x84>
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <xQueueGenericCreateStatic+0x88>
 8009808:	2301      	movs	r3, #1
 800980a:	e000      	b.n	800980e <xQueueGenericCreateStatic+0x8a>
 800980c:	2300      	movs	r3, #0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10b      	bne.n	800982a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	61fb      	str	r3, [r7, #28]
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop
 8009828:	e7fd      	b.n	8009826 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800982a:	2350      	movs	r3, #80	@ 0x50
 800982c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	2b50      	cmp	r3, #80	@ 0x50
 8009832:	d00b      	beq.n	800984c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	61bb      	str	r3, [r7, #24]
}
 8009846:	bf00      	nop
 8009848:	bf00      	nop
 800984a:	e7fd      	b.n	8009848 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800984c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00d      	beq.n	8009874 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009860:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	4613      	mov	r3, r2
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 f805 	bl	800987e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009876:	4618      	mov	r0, r3
 8009878:	3730      	adds	r7, #48	@ 0x30
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	60f8      	str	r0, [r7, #12]
 8009886:	60b9      	str	r1, [r7, #8]
 8009888:	607a      	str	r2, [r7, #4]
 800988a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d103      	bne.n	800989a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	69ba      	ldr	r2, [r7, #24]
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	e002      	b.n	80098a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80098ac:	2101      	movs	r1, #1
 80098ae:	69b8      	ldr	r0, [r7, #24]
 80098b0:	f7ff fefe 	bl	80096b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80098bc:	bf00      	nop
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b08e      	sub	sp, #56	@ 0x38
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80098d2:	2300      	movs	r3, #0
 80098d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80098da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10b      	bne.n	80098f8 <xQueueGenericSend+0x34>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80098f2:	bf00      	nop
 80098f4:	bf00      	nop
 80098f6:	e7fd      	b.n	80098f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d103      	bne.n	8009906 <xQueueGenericSend+0x42>
 80098fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <xQueueGenericSend+0x46>
 8009906:	2301      	movs	r3, #1
 8009908:	e000      	b.n	800990c <xQueueGenericSend+0x48>
 800990a:	2300      	movs	r3, #0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10b      	bne.n	8009928 <xQueueGenericSend+0x64>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009922:	bf00      	nop
 8009924:	bf00      	nop
 8009926:	e7fd      	b.n	8009924 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2b02      	cmp	r3, #2
 800992c:	d103      	bne.n	8009936 <xQueueGenericSend+0x72>
 800992e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009932:	2b01      	cmp	r3, #1
 8009934:	d101      	bne.n	800993a <xQueueGenericSend+0x76>
 8009936:	2301      	movs	r3, #1
 8009938:	e000      	b.n	800993c <xQueueGenericSend+0x78>
 800993a:	2300      	movs	r3, #0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10b      	bne.n	8009958 <xQueueGenericSend+0x94>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	623b      	str	r3, [r7, #32]
}
 8009952:	bf00      	nop
 8009954:	bf00      	nop
 8009956:	e7fd      	b.n	8009954 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009958:	f001 f9f6 	bl	800ad48 <xTaskGetSchedulerState>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d102      	bne.n	8009968 <xQueueGenericSend+0xa4>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <xQueueGenericSend+0xa8>
 8009968:	2301      	movs	r3, #1
 800996a:	e000      	b.n	800996e <xQueueGenericSend+0xaa>
 800996c:	2300      	movs	r3, #0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10b      	bne.n	800998a <xQueueGenericSend+0xc6>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	61fb      	str	r3, [r7, #28]
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop
 8009988:	e7fd      	b.n	8009986 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800998a:	f001 ff4d 	bl	800b828 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800998e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009996:	429a      	cmp	r2, r3
 8009998:	d302      	bcc.n	80099a0 <xQueueGenericSend+0xdc>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b02      	cmp	r3, #2
 800999e:	d129      	bne.n	80099f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	68b9      	ldr	r1, [r7, #8]
 80099a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80099a6:	f000 fa0f 	bl	8009dc8 <prvCopyDataToQueue>
 80099aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d010      	beq.n	80099d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b6:	3324      	adds	r3, #36	@ 0x24
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 ffdd 	bl	800a978 <xTaskRemoveFromEventList>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d013      	beq.n	80099ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80099c4:	4b3f      	ldr	r3, [pc, #252]	@ (8009ac4 <xQueueGenericSend+0x200>)
 80099c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	e00a      	b.n	80099ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80099d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d007      	beq.n	80099ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80099dc:	4b39      	ldr	r3, [pc, #228]	@ (8009ac4 <xQueueGenericSend+0x200>)
 80099de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80099ec:	f001 ff4e 	bl	800b88c <vPortExitCritical>
				return pdPASS;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e063      	b.n	8009abc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d103      	bne.n	8009a02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099fa:	f001 ff47 	bl	800b88c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80099fe:	2300      	movs	r3, #0
 8009a00:	e05c      	b.n	8009abc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d106      	bne.n	8009a16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a08:	f107 0314 	add.w	r3, r7, #20
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f001 f83f 	bl	800aa90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a12:	2301      	movs	r3, #1
 8009a14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a16:	f001 ff39 	bl	800b88c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a1a:	f000 fd87 	bl	800a52c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a1e:	f001 ff03 	bl	800b828 <vPortEnterCritical>
 8009a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a28:	b25b      	sxtb	r3, r3
 8009a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a2e:	d103      	bne.n	8009a38 <xQueueGenericSend+0x174>
 8009a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a3e:	b25b      	sxtb	r3, r3
 8009a40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a44:	d103      	bne.n	8009a4e <xQueueGenericSend+0x18a>
 8009a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a4e:	f001 ff1d 	bl	800b88c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a52:	1d3a      	adds	r2, r7, #4
 8009a54:	f107 0314 	add.w	r3, r7, #20
 8009a58:	4611      	mov	r1, r2
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f001 f82e 	bl	800aabc <xTaskCheckForTimeOut>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d124      	bne.n	8009ab0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a68:	f000 faa6 	bl	8009fb8 <prvIsQueueFull>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d018      	beq.n	8009aa4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a74:	3310      	adds	r3, #16
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	4611      	mov	r1, r2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 ff2a 	bl	800a8d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a82:	f000 fa31 	bl	8009ee8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a86:	f000 fd5f 	bl	800a548 <xTaskResumeAll>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f47f af7c 	bne.w	800998a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009a92:	4b0c      	ldr	r3, [pc, #48]	@ (8009ac4 <xQueueGenericSend+0x200>)
 8009a94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	e772      	b.n	800998a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009aa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009aa6:	f000 fa1f 	bl	8009ee8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009aaa:	f000 fd4d 	bl	800a548 <xTaskResumeAll>
 8009aae:	e76c      	b.n	800998a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ab0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ab2:	f000 fa19 	bl	8009ee8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ab6:	f000 fd47 	bl	800a548 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009aba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3738      	adds	r7, #56	@ 0x38
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	e000ed04 	.word	0xe000ed04

08009ac8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b090      	sub	sp, #64	@ 0x40
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10b      	bne.n	8009af8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009af2:	bf00      	nop
 8009af4:	bf00      	nop
 8009af6:	e7fd      	b.n	8009af4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d103      	bne.n	8009b06 <xQueueGenericSendFromISR+0x3e>
 8009afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <xQueueGenericSendFromISR+0x42>
 8009b06:	2301      	movs	r3, #1
 8009b08:	e000      	b.n	8009b0c <xQueueGenericSendFromISR+0x44>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10b      	bne.n	8009b28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b22:	bf00      	nop
 8009b24:	bf00      	nop
 8009b26:	e7fd      	b.n	8009b24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d103      	bne.n	8009b36 <xQueueGenericSendFromISR+0x6e>
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d101      	bne.n	8009b3a <xQueueGenericSendFromISR+0x72>
 8009b36:	2301      	movs	r3, #1
 8009b38:	e000      	b.n	8009b3c <xQueueGenericSendFromISR+0x74>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10b      	bne.n	8009b58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	623b      	str	r3, [r7, #32]
}
 8009b52:	bf00      	nop
 8009b54:	bf00      	nop
 8009b56:	e7fd      	b.n	8009b54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b58:	f001 ff46 	bl	800b9e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b5c:	f3ef 8211 	mrs	r2, BASEPRI
 8009b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	61fa      	str	r2, [r7, #28]
 8009b72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d302      	bcc.n	8009b8a <xQueueGenericSendFromISR+0xc2>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d12f      	bne.n	8009bea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	68b9      	ldr	r1, [r7, #8]
 8009b9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ba0:	f000 f912 	bl	8009dc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ba4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bac:	d112      	bne.n	8009bd4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d016      	beq.n	8009be4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb8:	3324      	adds	r3, #36	@ 0x24
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 fedc 	bl	800a978 <xTaskRemoveFromEventList>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00e      	beq.n	8009be4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00b      	beq.n	8009be4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	e007      	b.n	8009be4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009bd8:	3301      	adds	r3, #1
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	b25a      	sxtb	r2, r3
 8009bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009be4:	2301      	movs	r3, #1
 8009be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009be8:	e001      	b.n	8009bee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009bea:	2300      	movs	r3, #0
 8009bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009bf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3740      	adds	r7, #64	@ 0x40
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08c      	sub	sp, #48	@ 0x30
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c10:	2300      	movs	r3, #0
 8009c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10b      	bne.n	8009c36 <xQueueReceive+0x32>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	623b      	str	r3, [r7, #32]
}
 8009c30:	bf00      	nop
 8009c32:	bf00      	nop
 8009c34:	e7fd      	b.n	8009c32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d103      	bne.n	8009c44 <xQueueReceive+0x40>
 8009c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <xQueueReceive+0x44>
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <xQueueReceive+0x46>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10b      	bne.n	8009c66 <xQueueReceive+0x62>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	61fb      	str	r3, [r7, #28]
}
 8009c60:	bf00      	nop
 8009c62:	bf00      	nop
 8009c64:	e7fd      	b.n	8009c62 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c66:	f001 f86f 	bl	800ad48 <xTaskGetSchedulerState>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d102      	bne.n	8009c76 <xQueueReceive+0x72>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <xQueueReceive+0x76>
 8009c76:	2301      	movs	r3, #1
 8009c78:	e000      	b.n	8009c7c <xQueueReceive+0x78>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10b      	bne.n	8009c98 <xQueueReceive+0x94>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	61bb      	str	r3, [r7, #24]
}
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
 8009c96:	e7fd      	b.n	8009c94 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c98:	f001 fdc6 	bl	800b828 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d01f      	beq.n	8009ce8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ca8:	68b9      	ldr	r1, [r7, #8]
 8009caa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cac:	f000 f8f6 	bl	8009e9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb2:	1e5a      	subs	r2, r3, #1
 8009cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00f      	beq.n	8009ce0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc2:	3310      	adds	r3, #16
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 fe57 	bl	800a978 <xTaskRemoveFromEventList>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d007      	beq.n	8009ce0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8009dc4 <xQueueReceive+0x1c0>)
 8009cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cd6:	601a      	str	r2, [r3, #0]
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ce0:	f001 fdd4 	bl	800b88c <vPortExitCritical>
				return pdPASS;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e069      	b.n	8009dbc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d103      	bne.n	8009cf6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009cee:	f001 fdcd 	bl	800b88c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e062      	b.n	8009dbc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d106      	bne.n	8009d0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cfc:	f107 0310 	add.w	r3, r7, #16
 8009d00:	4618      	mov	r0, r3
 8009d02:	f000 fec5 	bl	800aa90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d06:	2301      	movs	r3, #1
 8009d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d0a:	f001 fdbf 	bl	800b88c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d0e:	f000 fc0d 	bl	800a52c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d12:	f001 fd89 	bl	800b828 <vPortEnterCritical>
 8009d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d1c:	b25b      	sxtb	r3, r3
 8009d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d22:	d103      	bne.n	8009d2c <xQueueReceive+0x128>
 8009d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d32:	b25b      	sxtb	r3, r3
 8009d34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d38:	d103      	bne.n	8009d42 <xQueueReceive+0x13e>
 8009d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d42:	f001 fda3 	bl	800b88c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d46:	1d3a      	adds	r2, r7, #4
 8009d48:	f107 0310 	add.w	r3, r7, #16
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 feb4 	bl	800aabc <xTaskCheckForTimeOut>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d123      	bne.n	8009da2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d5c:	f000 f916 	bl	8009f8c <prvIsQueueEmpty>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d017      	beq.n	8009d96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d68:	3324      	adds	r3, #36	@ 0x24
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f000 fdb0 	bl	800a8d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d76:	f000 f8b7 	bl	8009ee8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d7a:	f000 fbe5 	bl	800a548 <xTaskResumeAll>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d189      	bne.n	8009c98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009d84:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc4 <xQueueReceive+0x1c0>)
 8009d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	e780      	b.n	8009c98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d98:	f000 f8a6 	bl	8009ee8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d9c:	f000 fbd4 	bl	800a548 <xTaskResumeAll>
 8009da0:	e77a      	b.n	8009c98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009da2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009da4:	f000 f8a0 	bl	8009ee8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009da8:	f000 fbce 	bl	800a548 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dae:	f000 f8ed 	bl	8009f8c <prvIsQueueEmpty>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f43f af6f 	beq.w	8009c98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009dba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3730      	adds	r7, #48	@ 0x30
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	e000ed04 	.word	0xe000ed04

08009dc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ddc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10d      	bne.n	8009e02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d14d      	bne.n	8009e8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 ffc6 	bl	800ad84 <xTaskPriorityDisinherit>
 8009df8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	609a      	str	r2, [r3, #8]
 8009e00:	e043      	b.n	8009e8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d119      	bne.n	8009e3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6858      	ldr	r0, [r3, #4]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e10:	461a      	mov	r2, r3
 8009e12:	68b9      	ldr	r1, [r7, #8]
 8009e14:	f00f fced 	bl	80197f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e20:	441a      	add	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	685a      	ldr	r2, [r3, #4]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d32b      	bcc.n	8009e8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	605a      	str	r2, [r3, #4]
 8009e3a:	e026      	b.n	8009e8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	68d8      	ldr	r0, [r3, #12]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e44:	461a      	mov	r2, r3
 8009e46:	68b9      	ldr	r1, [r7, #8]
 8009e48:	f00f fcd3 	bl	80197f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	68da      	ldr	r2, [r3, #12]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e54:	425b      	negs	r3, r3
 8009e56:	441a      	add	r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68da      	ldr	r2, [r3, #12]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d207      	bcs.n	8009e78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	689a      	ldr	r2, [r3, #8]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e70:	425b      	negs	r3, r3
 8009e72:	441a      	add	r2, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d105      	bne.n	8009e8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	3b01      	subs	r3, #1
 8009e88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009e92:	697b      	ldr	r3, [r7, #20]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3718      	adds	r7, #24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d018      	beq.n	8009ee0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68da      	ldr	r2, [r3, #12]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eb6:	441a      	add	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68da      	ldr	r2, [r3, #12]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d303      	bcc.n	8009ed0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	68d9      	ldr	r1, [r3, #12]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed8:	461a      	mov	r2, r3
 8009eda:	6838      	ldr	r0, [r7, #0]
 8009edc:	f00f fc89 	bl	80197f2 <memcpy>
	}
}
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ef0:	f001 fc9a 	bl	800b828 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009efa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009efc:	e011      	b.n	8009f22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d012      	beq.n	8009f2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	3324      	adds	r3, #36	@ 0x24
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 fd34 	bl	800a978 <xTaskRemoveFromEventList>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009f16:	f000 fe35 	bl	800ab84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	dce9      	bgt.n	8009efe <prvUnlockQueue+0x16>
 8009f2a:	e000      	b.n	8009f2e <prvUnlockQueue+0x46>
					break;
 8009f2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	22ff      	movs	r2, #255	@ 0xff
 8009f32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009f36:	f001 fca9 	bl	800b88c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f3a:	f001 fc75 	bl	800b828 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f46:	e011      	b.n	8009f6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d012      	beq.n	8009f76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3310      	adds	r3, #16
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 fd0f 	bl	800a978 <xTaskRemoveFromEventList>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f60:	f000 fe10 	bl	800ab84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	dce9      	bgt.n	8009f48 <prvUnlockQueue+0x60>
 8009f74:	e000      	b.n	8009f78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	22ff      	movs	r2, #255	@ 0xff
 8009f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009f80:	f001 fc84 	bl	800b88c <vPortExitCritical>
}
 8009f84:	bf00      	nop
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f94:	f001 fc48 	bl	800b828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d102      	bne.n	8009fa6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	e001      	b.n	8009faa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009faa:	f001 fc6f 	bl	800b88c <vPortExitCritical>

	return xReturn;
 8009fae:	68fb      	ldr	r3, [r7, #12]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fc0:	f001 fc32 	bl	800b828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d102      	bne.n	8009fd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	e001      	b.n	8009fda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fda:	f001 fc57 	bl	800b88c <vPortExitCritical>

	return xReturn;
 8009fde:	68fb      	ldr	r3, [r7, #12]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60fb      	str	r3, [r7, #12]
 8009ff6:	e014      	b.n	800a022 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ff8:	4a0f      	ldr	r2, [pc, #60]	@ (800a038 <vQueueAddToRegistry+0x50>)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d10b      	bne.n	800a01c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a004:	490c      	ldr	r1, [pc, #48]	@ (800a038 <vQueueAddToRegistry+0x50>)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a00e:	4a0a      	ldr	r2, [pc, #40]	@ (800a038 <vQueueAddToRegistry+0x50>)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	4413      	add	r3, r2
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a01a:	e006      	b.n	800a02a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	60fb      	str	r3, [r7, #12]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b07      	cmp	r3, #7
 800a026:	d9e7      	bls.n	8009ff8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a028:	bf00      	nop
 800a02a:	bf00      	nop
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	20005248 	.word	0x20005248

0800a03c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a04c:	f001 fbec 	bl	800b828 <vPortEnterCritical>
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a056:	b25b      	sxtb	r3, r3
 800a058:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a05c:	d103      	bne.n	800a066 <vQueueWaitForMessageRestricted+0x2a>
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a06c:	b25b      	sxtb	r3, r3
 800a06e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a072:	d103      	bne.n	800a07c <vQueueWaitForMessageRestricted+0x40>
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a07c:	f001 fc06 	bl	800b88c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a084:	2b00      	cmp	r3, #0
 800a086:	d106      	bne.n	800a096 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	3324      	adds	r3, #36	@ 0x24
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	68b9      	ldr	r1, [r7, #8]
 800a090:	4618      	mov	r0, r3
 800a092:	f000 fc45 	bl	800a920 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a096:	6978      	ldr	r0, [r7, #20]
 800a098:	f7ff ff26 	bl	8009ee8 <prvUnlockQueue>
	}
 800a09c:	bf00      	nop
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08e      	sub	sp, #56	@ 0x38
 800a0a8:	af04      	add	r7, sp, #16
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a0b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10b      	bne.n	800a0d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	623b      	str	r3, [r7, #32]
}
 800a0ca:	bf00      	nop
 800a0cc:	bf00      	nop
 800a0ce:	e7fd      	b.n	800a0cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10b      	bne.n	800a0ee <xTaskCreateStatic+0x4a>
	__asm volatile
 800a0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	61fb      	str	r3, [r7, #28]
}
 800a0e8:	bf00      	nop
 800a0ea:	bf00      	nop
 800a0ec:	e7fd      	b.n	800a0ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a0ee:	235c      	movs	r3, #92	@ 0x5c
 800a0f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	2b5c      	cmp	r3, #92	@ 0x5c
 800a0f6:	d00b      	beq.n	800a110 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fc:	f383 8811 	msr	BASEPRI, r3
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	61bb      	str	r3, [r7, #24]
}
 800a10a:	bf00      	nop
 800a10c:	bf00      	nop
 800a10e:	e7fd      	b.n	800a10c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a110:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a114:	2b00      	cmp	r3, #0
 800a116:	d01e      	beq.n	800a156 <xTaskCreateStatic+0xb2>
 800a118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d01b      	beq.n	800a156 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a120:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a124:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a126:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a130:	2300      	movs	r3, #0
 800a132:	9303      	str	r3, [sp, #12]
 800a134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a136:	9302      	str	r3, [sp, #8]
 800a138:	f107 0314 	add.w	r3, r7, #20
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	68b9      	ldr	r1, [r7, #8]
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 f850 	bl	800a1ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a14e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a150:	f000 f8de 	bl	800a310 <prvAddNewTaskToReadyList>
 800a154:	e001      	b.n	800a15a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a156:	2300      	movs	r3, #0
 800a158:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a15a:	697b      	ldr	r3, [r7, #20]
	}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3728      	adds	r7, #40	@ 0x28
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08c      	sub	sp, #48	@ 0x30
 800a168:	af04      	add	r7, sp, #16
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	603b      	str	r3, [r7, #0]
 800a170:	4613      	mov	r3, r2
 800a172:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a174:	88fb      	ldrh	r3, [r7, #6]
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4618      	mov	r0, r3
 800a17a:	f001 fc77 	bl	800ba6c <pvPortMalloc>
 800a17e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00e      	beq.n	800a1a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a186:	205c      	movs	r0, #92	@ 0x5c
 800a188:	f001 fc70 	bl	800ba6c <pvPortMalloc>
 800a18c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d003      	beq.n	800a19c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	631a      	str	r2, [r3, #48]	@ 0x30
 800a19a:	e005      	b.n	800a1a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a19c:	6978      	ldr	r0, [r7, #20]
 800a19e:	f001 fd33 	bl	800bc08 <vPortFree>
 800a1a2:	e001      	b.n	800a1a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d017      	beq.n	800a1de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a1b6:	88fa      	ldrh	r2, [r7, #6]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	9303      	str	r3, [sp, #12]
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	9302      	str	r3, [sp, #8]
 800a1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c2:	9301      	str	r3, [sp, #4]
 800a1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	68b9      	ldr	r1, [r7, #8]
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 f80e 	bl	800a1ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1d2:	69f8      	ldr	r0, [r7, #28]
 800a1d4:	f000 f89c 	bl	800a310 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	61bb      	str	r3, [r7, #24]
 800a1dc:	e002      	b.n	800a1e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a1de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a1e4:	69bb      	ldr	r3, [r7, #24]
	}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3720      	adds	r7, #32
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b088      	sub	sp, #32
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	607a      	str	r2, [r7, #4]
 800a1fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	461a      	mov	r2, r3
 800a206:	21a5      	movs	r1, #165	@ 0xa5
 800a208:	f00f fa2a 	bl	8019660 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a216:	3b01      	subs	r3, #1
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	f023 0307 	bic.w	r3, r3, #7
 800a224:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	f003 0307 	and.w	r3, r3, #7
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00b      	beq.n	800a248 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	617b      	str	r3, [r7, #20]
}
 800a242:	bf00      	nop
 800a244:	bf00      	nop
 800a246:	e7fd      	b.n	800a244 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d01f      	beq.n	800a28e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a24e:	2300      	movs	r3, #0
 800a250:	61fb      	str	r3, [r7, #28]
 800a252:	e012      	b.n	800a27a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	4413      	add	r3, r2
 800a25a:	7819      	ldrb	r1, [r3, #0]
 800a25c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	4413      	add	r3, r2
 800a262:	3334      	adds	r3, #52	@ 0x34
 800a264:	460a      	mov	r2, r1
 800a266:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	4413      	add	r3, r2
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d006      	beq.n	800a282 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	3301      	adds	r3, #1
 800a278:	61fb      	str	r3, [r7, #28]
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	2b0f      	cmp	r3, #15
 800a27e:	d9e9      	bls.n	800a254 <prvInitialiseNewTask+0x66>
 800a280:	e000      	b.n	800a284 <prvInitialiseNewTask+0x96>
			{
				break;
 800a282:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a28c:	e003      	b.n	800a296 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a290:	2200      	movs	r2, #0
 800a292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a298:	2b37      	cmp	r3, #55	@ 0x37
 800a29a:	d901      	bls.n	800a2a0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a29c:	2337      	movs	r3, #55	@ 0x37
 800a29e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2aa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7ff f966 	bl	8009588 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2be:	3318      	adds	r3, #24
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff f961 	bl	8009588 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2da:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2de:	2200      	movs	r2, #0
 800a2e0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	68f9      	ldr	r1, [r7, #12]
 800a2ee:	69b8      	ldr	r0, [r7, #24]
 800a2f0:	f001 f966 	bl	800b5c0 <pxPortInitialiseStack>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d002      	beq.n	800a306 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a306:	bf00      	nop
 800a308:	3720      	adds	r7, #32
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a318:	f001 fa86 	bl	800b828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a31c:	4b2d      	ldr	r3, [pc, #180]	@ (800a3d4 <prvAddNewTaskToReadyList+0xc4>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3301      	adds	r3, #1
 800a322:	4a2c      	ldr	r2, [pc, #176]	@ (800a3d4 <prvAddNewTaskToReadyList+0xc4>)
 800a324:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a326:	4b2c      	ldr	r3, [pc, #176]	@ (800a3d8 <prvAddNewTaskToReadyList+0xc8>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d109      	bne.n	800a342 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a32e:	4a2a      	ldr	r2, [pc, #168]	@ (800a3d8 <prvAddNewTaskToReadyList+0xc8>)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a334:	4b27      	ldr	r3, [pc, #156]	@ (800a3d4 <prvAddNewTaskToReadyList+0xc4>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d110      	bne.n	800a35e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a33c:	f000 fc46 	bl	800abcc <prvInitialiseTaskLists>
 800a340:	e00d      	b.n	800a35e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a342:	4b26      	ldr	r3, [pc, #152]	@ (800a3dc <prvAddNewTaskToReadyList+0xcc>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d109      	bne.n	800a35e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a34a:	4b23      	ldr	r3, [pc, #140]	@ (800a3d8 <prvAddNewTaskToReadyList+0xc8>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a354:	429a      	cmp	r2, r3
 800a356:	d802      	bhi.n	800a35e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a358:	4a1f      	ldr	r2, [pc, #124]	@ (800a3d8 <prvAddNewTaskToReadyList+0xc8>)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a35e:	4b20      	ldr	r3, [pc, #128]	@ (800a3e0 <prvAddNewTaskToReadyList+0xd0>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	3301      	adds	r3, #1
 800a364:	4a1e      	ldr	r2, [pc, #120]	@ (800a3e0 <prvAddNewTaskToReadyList+0xd0>)
 800a366:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a368:	4b1d      	ldr	r3, [pc, #116]	@ (800a3e0 <prvAddNewTaskToReadyList+0xd0>)
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a374:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e4 <prvAddNewTaskToReadyList+0xd4>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d903      	bls.n	800a384 <prvAddNewTaskToReadyList+0x74>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a380:	4a18      	ldr	r2, [pc, #96]	@ (800a3e4 <prvAddNewTaskToReadyList+0xd4>)
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a388:	4613      	mov	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4a15      	ldr	r2, [pc, #84]	@ (800a3e8 <prvAddNewTaskToReadyList+0xd8>)
 800a392:	441a      	add	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3304      	adds	r3, #4
 800a398:	4619      	mov	r1, r3
 800a39a:	4610      	mov	r0, r2
 800a39c:	f7ff f901 	bl	80095a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a3a0:	f001 fa74 	bl	800b88c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a3a4:	4b0d      	ldr	r3, [pc, #52]	@ (800a3dc <prvAddNewTaskToReadyList+0xcc>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00e      	beq.n	800a3ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d8 <prvAddNewTaskToReadyList+0xc8>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d207      	bcs.n	800a3ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a3ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a3ec <prvAddNewTaskToReadyList+0xdc>)
 800a3bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3c0:	601a      	str	r2, [r3, #0]
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3ca:	bf00      	nop
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	2000575c 	.word	0x2000575c
 800a3d8:	20005288 	.word	0x20005288
 800a3dc:	20005768 	.word	0x20005768
 800a3e0:	20005778 	.word	0x20005778
 800a3e4:	20005764 	.word	0x20005764
 800a3e8:	2000528c 	.word	0x2000528c
 800a3ec:	e000ed04 	.word	0xe000ed04

0800a3f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d018      	beq.n	800a434 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a402:	4b14      	ldr	r3, [pc, #80]	@ (800a454 <vTaskDelay+0x64>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00b      	beq.n	800a422 <vTaskDelay+0x32>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	60bb      	str	r3, [r7, #8]
}
 800a41c:	bf00      	nop
 800a41e:	bf00      	nop
 800a420:	e7fd      	b.n	800a41e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a422:	f000 f883 	bl	800a52c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a426:	2100      	movs	r1, #0
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fd1b 	bl	800ae64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a42e:	f000 f88b 	bl	800a548 <xTaskResumeAll>
 800a432:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d107      	bne.n	800a44a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a43a:	4b07      	ldr	r3, [pc, #28]	@ (800a458 <vTaskDelay+0x68>)
 800a43c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a440:	601a      	str	r2, [r3, #0]
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a44a:	bf00      	nop
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20005784 	.word	0x20005784
 800a458:	e000ed04 	.word	0xe000ed04

0800a45c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b08a      	sub	sp, #40	@ 0x28
 800a460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a462:	2300      	movs	r3, #0
 800a464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a466:	2300      	movs	r3, #0
 800a468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a46a:	463a      	mov	r2, r7
 800a46c:	1d39      	adds	r1, r7, #4
 800a46e:	f107 0308 	add.w	r3, r7, #8
 800a472:	4618      	mov	r0, r3
 800a474:	f7ff f834 	bl	80094e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	9202      	str	r2, [sp, #8]
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	2300      	movs	r3, #0
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	2300      	movs	r3, #0
 800a488:	460a      	mov	r2, r1
 800a48a:	4922      	ldr	r1, [pc, #136]	@ (800a514 <vTaskStartScheduler+0xb8>)
 800a48c:	4822      	ldr	r0, [pc, #136]	@ (800a518 <vTaskStartScheduler+0xbc>)
 800a48e:	f7ff fe09 	bl	800a0a4 <xTaskCreateStatic>
 800a492:	4603      	mov	r3, r0
 800a494:	4a21      	ldr	r2, [pc, #132]	@ (800a51c <vTaskStartScheduler+0xc0>)
 800a496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a498:	4b20      	ldr	r3, [pc, #128]	@ (800a51c <vTaskStartScheduler+0xc0>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	617b      	str	r3, [r7, #20]
 800a4a4:	e001      	b.n	800a4aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d102      	bne.n	800a4b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a4b0:	f000 fd2c 	bl	800af0c <xTimerCreateTimerTask>
 800a4b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d116      	bne.n	800a4ea <vTaskStartScheduler+0x8e>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	613b      	str	r3, [r7, #16]
}
 800a4ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a4d0:	4b13      	ldr	r3, [pc, #76]	@ (800a520 <vTaskStartScheduler+0xc4>)
 800a4d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a4d8:	4b12      	ldr	r3, [pc, #72]	@ (800a524 <vTaskStartScheduler+0xc8>)
 800a4da:	2201      	movs	r2, #1
 800a4dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a4de:	4b12      	ldr	r3, [pc, #72]	@ (800a528 <vTaskStartScheduler+0xcc>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a4e4:	f001 f8fc 	bl	800b6e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a4e8:	e00f      	b.n	800a50a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4f0:	d10b      	bne.n	800a50a <vTaskStartScheduler+0xae>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	60fb      	str	r3, [r7, #12]
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop
 800a508:	e7fd      	b.n	800a506 <vTaskStartScheduler+0xaa>
}
 800a50a:	bf00      	nop
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	0801a4e0 	.word	0x0801a4e0
 800a518:	0800ab9d 	.word	0x0800ab9d
 800a51c:	20005780 	.word	0x20005780
 800a520:	2000577c 	.word	0x2000577c
 800a524:	20005768 	.word	0x20005768
 800a528:	20005760 	.word	0x20005760

0800a52c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a52c:	b480      	push	{r7}
 800a52e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a530:	4b04      	ldr	r3, [pc, #16]	@ (800a544 <vTaskSuspendAll+0x18>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	3301      	adds	r3, #1
 800a536:	4a03      	ldr	r2, [pc, #12]	@ (800a544 <vTaskSuspendAll+0x18>)
 800a538:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a53a:	bf00      	nop
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	20005784 	.word	0x20005784

0800a548 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a552:	2300      	movs	r3, #0
 800a554:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a556:	4b42      	ldr	r3, [pc, #264]	@ (800a660 <xTaskResumeAll+0x118>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10b      	bne.n	800a576 <xTaskResumeAll+0x2e>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	603b      	str	r3, [r7, #0]
}
 800a570:	bf00      	nop
 800a572:	bf00      	nop
 800a574:	e7fd      	b.n	800a572 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a576:	f001 f957 	bl	800b828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a57a:	4b39      	ldr	r3, [pc, #228]	@ (800a660 <xTaskResumeAll+0x118>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3b01      	subs	r3, #1
 800a580:	4a37      	ldr	r2, [pc, #220]	@ (800a660 <xTaskResumeAll+0x118>)
 800a582:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a584:	4b36      	ldr	r3, [pc, #216]	@ (800a660 <xTaskResumeAll+0x118>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d162      	bne.n	800a652 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a58c:	4b35      	ldr	r3, [pc, #212]	@ (800a664 <xTaskResumeAll+0x11c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d05e      	beq.n	800a652 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a594:	e02f      	b.n	800a5f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a596:	4b34      	ldr	r3, [pc, #208]	@ (800a668 <xTaskResumeAll+0x120>)
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3318      	adds	r3, #24
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7ff f85a 	bl	800965c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7ff f855 	bl	800965c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5b6:	4b2d      	ldr	r3, [pc, #180]	@ (800a66c <xTaskResumeAll+0x124>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d903      	bls.n	800a5c6 <xTaskResumeAll+0x7e>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c2:	4a2a      	ldr	r2, [pc, #168]	@ (800a66c <xTaskResumeAll+0x124>)
 800a5c4:	6013      	str	r3, [r2, #0]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	4a27      	ldr	r2, [pc, #156]	@ (800a670 <xTaskResumeAll+0x128>)
 800a5d4:	441a      	add	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	3304      	adds	r3, #4
 800a5da:	4619      	mov	r1, r3
 800a5dc:	4610      	mov	r0, r2
 800a5de:	f7fe ffe0 	bl	80095a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5e6:	4b23      	ldr	r3, [pc, #140]	@ (800a674 <xTaskResumeAll+0x12c>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d302      	bcc.n	800a5f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a5f0:	4b21      	ldr	r3, [pc, #132]	@ (800a678 <xTaskResumeAll+0x130>)
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5f6:	4b1c      	ldr	r3, [pc, #112]	@ (800a668 <xTaskResumeAll+0x120>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1cb      	bne.n	800a596 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d001      	beq.n	800a608 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a604:	f000 fb80 	bl	800ad08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a608:	4b1c      	ldr	r3, [pc, #112]	@ (800a67c <xTaskResumeAll+0x134>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d010      	beq.n	800a636 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a614:	f000 f846 	bl	800a6a4 <xTaskIncrementTick>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d002      	beq.n	800a624 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a61e:	4b16      	ldr	r3, [pc, #88]	@ (800a678 <xTaskResumeAll+0x130>)
 800a620:	2201      	movs	r2, #1
 800a622:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	3b01      	subs	r3, #1
 800a628:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1f1      	bne.n	800a614 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a630:	4b12      	ldr	r3, [pc, #72]	@ (800a67c <xTaskResumeAll+0x134>)
 800a632:	2200      	movs	r2, #0
 800a634:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a636:	4b10      	ldr	r3, [pc, #64]	@ (800a678 <xTaskResumeAll+0x130>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d009      	beq.n	800a652 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a63e:	2301      	movs	r3, #1
 800a640:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a642:	4b0f      	ldr	r3, [pc, #60]	@ (800a680 <xTaskResumeAll+0x138>)
 800a644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a652:	f001 f91b 	bl	800b88c <vPortExitCritical>

	return xAlreadyYielded;
 800a656:	68bb      	ldr	r3, [r7, #8]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	20005784 	.word	0x20005784
 800a664:	2000575c 	.word	0x2000575c
 800a668:	2000571c 	.word	0x2000571c
 800a66c:	20005764 	.word	0x20005764
 800a670:	2000528c 	.word	0x2000528c
 800a674:	20005288 	.word	0x20005288
 800a678:	20005770 	.word	0x20005770
 800a67c:	2000576c 	.word	0x2000576c
 800a680:	e000ed04 	.word	0xe000ed04

0800a684 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a68a:	4b05      	ldr	r3, [pc, #20]	@ (800a6a0 <xTaskGetTickCount+0x1c>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a690:	687b      	ldr	r3, [r7, #4]
}
 800a692:	4618      	mov	r0, r3
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	20005760 	.word	0x20005760

0800a6a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ae:	4b4f      	ldr	r3, [pc, #316]	@ (800a7ec <xTaskIncrementTick+0x148>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f040 8090 	bne.w	800a7d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a6b8:	4b4d      	ldr	r3, [pc, #308]	@ (800a7f0 <xTaskIncrementTick+0x14c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a6c0:	4a4b      	ldr	r2, [pc, #300]	@ (800a7f0 <xTaskIncrementTick+0x14c>)
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d121      	bne.n	800a710 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a6cc:	4b49      	ldr	r3, [pc, #292]	@ (800a7f4 <xTaskIncrementTick+0x150>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00b      	beq.n	800a6ee <xTaskIncrementTick+0x4a>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	603b      	str	r3, [r7, #0]
}
 800a6e8:	bf00      	nop
 800a6ea:	bf00      	nop
 800a6ec:	e7fd      	b.n	800a6ea <xTaskIncrementTick+0x46>
 800a6ee:	4b41      	ldr	r3, [pc, #260]	@ (800a7f4 <xTaskIncrementTick+0x150>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	4b40      	ldr	r3, [pc, #256]	@ (800a7f8 <xTaskIncrementTick+0x154>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a3e      	ldr	r2, [pc, #248]	@ (800a7f4 <xTaskIncrementTick+0x150>)
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	4a3e      	ldr	r2, [pc, #248]	@ (800a7f8 <xTaskIncrementTick+0x154>)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6013      	str	r3, [r2, #0]
 800a702:	4b3e      	ldr	r3, [pc, #248]	@ (800a7fc <xTaskIncrementTick+0x158>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	3301      	adds	r3, #1
 800a708:	4a3c      	ldr	r2, [pc, #240]	@ (800a7fc <xTaskIncrementTick+0x158>)
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	f000 fafc 	bl	800ad08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a710:	4b3b      	ldr	r3, [pc, #236]	@ (800a800 <xTaskIncrementTick+0x15c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	429a      	cmp	r2, r3
 800a718:	d349      	bcc.n	800a7ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a71a:	4b36      	ldr	r3, [pc, #216]	@ (800a7f4 <xTaskIncrementTick+0x150>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d104      	bne.n	800a72e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a724:	4b36      	ldr	r3, [pc, #216]	@ (800a800 <xTaskIncrementTick+0x15c>)
 800a726:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a72a:	601a      	str	r2, [r3, #0]
					break;
 800a72c:	e03f      	b.n	800a7ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a72e:	4b31      	ldr	r3, [pc, #196]	@ (800a7f4 <xTaskIncrementTick+0x150>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a73e:	693a      	ldr	r2, [r7, #16]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	429a      	cmp	r2, r3
 800a744:	d203      	bcs.n	800a74e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a746:	4a2e      	ldr	r2, [pc, #184]	@ (800a800 <xTaskIncrementTick+0x15c>)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a74c:	e02f      	b.n	800a7ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	3304      	adds	r3, #4
 800a752:	4618      	mov	r0, r3
 800a754:	f7fe ff82 	bl	800965c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d004      	beq.n	800a76a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	3318      	adds	r3, #24
 800a764:	4618      	mov	r0, r3
 800a766:	f7fe ff79 	bl	800965c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a76e:	4b25      	ldr	r3, [pc, #148]	@ (800a804 <xTaskIncrementTick+0x160>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	429a      	cmp	r2, r3
 800a774:	d903      	bls.n	800a77e <xTaskIncrementTick+0xda>
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a77a:	4a22      	ldr	r2, [pc, #136]	@ (800a804 <xTaskIncrementTick+0x160>)
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a782:	4613      	mov	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4a1f      	ldr	r2, [pc, #124]	@ (800a808 <xTaskIncrementTick+0x164>)
 800a78c:	441a      	add	r2, r3
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	3304      	adds	r3, #4
 800a792:	4619      	mov	r1, r3
 800a794:	4610      	mov	r0, r2
 800a796:	f7fe ff04 	bl	80095a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a79e:	4b1b      	ldr	r3, [pc, #108]	@ (800a80c <xTaskIncrementTick+0x168>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d3b8      	bcc.n	800a71a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7ac:	e7b5      	b.n	800a71a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7ae:	4b17      	ldr	r3, [pc, #92]	@ (800a80c <xTaskIncrementTick+0x168>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7b4:	4914      	ldr	r1, [pc, #80]	@ (800a808 <xTaskIncrementTick+0x164>)
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	440b      	add	r3, r1
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d901      	bls.n	800a7ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a7ca:	4b11      	ldr	r3, [pc, #68]	@ (800a810 <xTaskIncrementTick+0x16c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d007      	beq.n	800a7e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	617b      	str	r3, [r7, #20]
 800a7d6:	e004      	b.n	800a7e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a7d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a814 <xTaskIncrementTick+0x170>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	4a0d      	ldr	r2, [pc, #52]	@ (800a814 <xTaskIncrementTick+0x170>)
 800a7e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a7e2:	697b      	ldr	r3, [r7, #20]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3718      	adds	r7, #24
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	20005784 	.word	0x20005784
 800a7f0:	20005760 	.word	0x20005760
 800a7f4:	20005714 	.word	0x20005714
 800a7f8:	20005718 	.word	0x20005718
 800a7fc:	20005774 	.word	0x20005774
 800a800:	2000577c 	.word	0x2000577c
 800a804:	20005764 	.word	0x20005764
 800a808:	2000528c 	.word	0x2000528c
 800a80c:	20005288 	.word	0x20005288
 800a810:	20005770 	.word	0x20005770
 800a814:	2000576c 	.word	0x2000576c

0800a818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a81e:	4b28      	ldr	r3, [pc, #160]	@ (800a8c0 <vTaskSwitchContext+0xa8>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d003      	beq.n	800a82e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a826:	4b27      	ldr	r3, [pc, #156]	@ (800a8c4 <vTaskSwitchContext+0xac>)
 800a828:	2201      	movs	r2, #1
 800a82a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a82c:	e042      	b.n	800a8b4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a82e:	4b25      	ldr	r3, [pc, #148]	@ (800a8c4 <vTaskSwitchContext+0xac>)
 800a830:	2200      	movs	r2, #0
 800a832:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a834:	4b24      	ldr	r3, [pc, #144]	@ (800a8c8 <vTaskSwitchContext+0xb0>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	e011      	b.n	800a860 <vTaskSwitchContext+0x48>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10b      	bne.n	800a85a <vTaskSwitchContext+0x42>
	__asm volatile
 800a842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	607b      	str	r3, [r7, #4]
}
 800a854:	bf00      	nop
 800a856:	bf00      	nop
 800a858:	e7fd      	b.n	800a856 <vTaskSwitchContext+0x3e>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	60fb      	str	r3, [r7, #12]
 800a860:	491a      	ldr	r1, [pc, #104]	@ (800a8cc <vTaskSwitchContext+0xb4>)
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	4613      	mov	r3, r2
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4413      	add	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	440b      	add	r3, r1
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d0e3      	beq.n	800a83c <vTaskSwitchContext+0x24>
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4613      	mov	r3, r2
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4a13      	ldr	r2, [pc, #76]	@ (800a8cc <vTaskSwitchContext+0xb4>)
 800a880:	4413      	add	r3, r2
 800a882:	60bb      	str	r3, [r7, #8]
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	685a      	ldr	r2, [r3, #4]
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	605a      	str	r2, [r3, #4]
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	685a      	ldr	r2, [r3, #4]
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	3308      	adds	r3, #8
 800a896:	429a      	cmp	r2, r3
 800a898:	d104      	bne.n	800a8a4 <vTaskSwitchContext+0x8c>
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	685a      	ldr	r2, [r3, #4]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	605a      	str	r2, [r3, #4]
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	4a09      	ldr	r2, [pc, #36]	@ (800a8d0 <vTaskSwitchContext+0xb8>)
 800a8ac:	6013      	str	r3, [r2, #0]
 800a8ae:	4a06      	ldr	r2, [pc, #24]	@ (800a8c8 <vTaskSwitchContext+0xb0>)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6013      	str	r3, [r2, #0]
}
 800a8b4:	bf00      	nop
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	20005784 	.word	0x20005784
 800a8c4:	20005770 	.word	0x20005770
 800a8c8:	20005764 	.word	0x20005764
 800a8cc:	2000528c 	.word	0x2000528c
 800a8d0:	20005288 	.word	0x20005288

0800a8d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10b      	bne.n	800a8fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	60fb      	str	r3, [r7, #12]
}
 800a8f6:	bf00      	nop
 800a8f8:	bf00      	nop
 800a8fa:	e7fd      	b.n	800a8f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a8fc:	4b07      	ldr	r3, [pc, #28]	@ (800a91c <vTaskPlaceOnEventList+0x48>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3318      	adds	r3, #24
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7fe fe70 	bl	80095ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a90a:	2101      	movs	r1, #1
 800a90c:	6838      	ldr	r0, [r7, #0]
 800a90e:	f000 faa9 	bl	800ae64 <prvAddCurrentTaskToDelayedList>
}
 800a912:	bf00      	nop
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	20005288 	.word	0x20005288

0800a920 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10b      	bne.n	800a94a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	617b      	str	r3, [r7, #20]
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop
 800a948:	e7fd      	b.n	800a946 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a94a:	4b0a      	ldr	r3, [pc, #40]	@ (800a974 <vTaskPlaceOnEventListRestricted+0x54>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3318      	adds	r3, #24
 800a950:	4619      	mov	r1, r3
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f7fe fe25 	bl	80095a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d002      	beq.n	800a964 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a95e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a962:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a964:	6879      	ldr	r1, [r7, #4]
 800a966:	68b8      	ldr	r0, [r7, #8]
 800a968:	f000 fa7c 	bl	800ae64 <prvAddCurrentTaskToDelayedList>
	}
 800a96c:	bf00      	nop
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20005288 	.word	0x20005288

0800a978 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10b      	bne.n	800a9a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	60fb      	str	r3, [r7, #12]
}
 800a9a0:	bf00      	nop
 800a9a2:	bf00      	nop
 800a9a4:	e7fd      	b.n	800a9a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	3318      	adds	r3, #24
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fe fe56 	bl	800965c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9b0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa28 <xTaskRemoveFromEventList+0xb0>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d11d      	bne.n	800a9f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	3304      	adds	r3, #4
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe fe4d 	bl	800965c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9c6:	4b19      	ldr	r3, [pc, #100]	@ (800aa2c <xTaskRemoveFromEventList+0xb4>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d903      	bls.n	800a9d6 <xTaskRemoveFromEventList+0x5e>
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d2:	4a16      	ldr	r2, [pc, #88]	@ (800aa2c <xTaskRemoveFromEventList+0xb4>)
 800a9d4:	6013      	str	r3, [r2, #0]
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9da:	4613      	mov	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4a13      	ldr	r2, [pc, #76]	@ (800aa30 <xTaskRemoveFromEventList+0xb8>)
 800a9e4:	441a      	add	r2, r3
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f7fe fdd8 	bl	80095a2 <vListInsertEnd>
 800a9f2:	e005      	b.n	800aa00 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	3318      	adds	r3, #24
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	480e      	ldr	r0, [pc, #56]	@ (800aa34 <xTaskRemoveFromEventList+0xbc>)
 800a9fc:	f7fe fdd1 	bl	80095a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa04:	4b0c      	ldr	r3, [pc, #48]	@ (800aa38 <xTaskRemoveFromEventList+0xc0>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d905      	bls.n	800aa1a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa12:	4b0a      	ldr	r3, [pc, #40]	@ (800aa3c <xTaskRemoveFromEventList+0xc4>)
 800aa14:	2201      	movs	r2, #1
 800aa16:	601a      	str	r2, [r3, #0]
 800aa18:	e001      	b.n	800aa1e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa1e:	697b      	ldr	r3, [r7, #20]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3718      	adds	r7, #24
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	20005784 	.word	0x20005784
 800aa2c:	20005764 	.word	0x20005764
 800aa30:	2000528c 	.word	0x2000528c
 800aa34:	2000571c 	.word	0x2000571c
 800aa38:	20005288 	.word	0x20005288
 800aa3c:	20005770 	.word	0x20005770

0800aa40 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10b      	bne.n	800aa66 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	60fb      	str	r3, [r7, #12]
}
 800aa60:	bf00      	nop
 800aa62:	bf00      	nop
 800aa64:	e7fd      	b.n	800aa62 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800aa66:	f000 fedf 	bl	800b828 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa6a:	4b07      	ldr	r3, [pc, #28]	@ (800aa88 <vTaskSetTimeOutState+0x48>)
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800aa72:	4b06      	ldr	r3, [pc, #24]	@ (800aa8c <vTaskSetTimeOutState+0x4c>)
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800aa7a:	f000 ff07 	bl	800b88c <vPortExitCritical>
}
 800aa7e:	bf00      	nop
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20005774 	.word	0x20005774
 800aa8c:	20005760 	.word	0x20005760

0800aa90 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa98:	4b06      	ldr	r3, [pc, #24]	@ (800aab4 <vTaskInternalSetTimeOutState+0x24>)
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aaa0:	4b05      	ldr	r3, [pc, #20]	@ (800aab8 <vTaskInternalSetTimeOutState+0x28>)
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	605a      	str	r2, [r3, #4]
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	20005774 	.word	0x20005774
 800aab8:	20005760 	.word	0x20005760

0800aabc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b088      	sub	sp, #32
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10b      	bne.n	800aae4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800aacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	613b      	str	r3, [r7, #16]
}
 800aade:	bf00      	nop
 800aae0:	bf00      	nop
 800aae2:	e7fd      	b.n	800aae0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10b      	bne.n	800ab02 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800aaea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	60fb      	str	r3, [r7, #12]
}
 800aafc:	bf00      	nop
 800aafe:	bf00      	nop
 800ab00:	e7fd      	b.n	800aafe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ab02:	f000 fe91 	bl	800b828 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab06:	4b1d      	ldr	r3, [pc, #116]	@ (800ab7c <xTaskCheckForTimeOut+0xc0>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	69ba      	ldr	r2, [r7, #24]
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab1e:	d102      	bne.n	800ab26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab20:	2300      	movs	r3, #0
 800ab22:	61fb      	str	r3, [r7, #28]
 800ab24:	e023      	b.n	800ab6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	4b15      	ldr	r3, [pc, #84]	@ (800ab80 <xTaskCheckForTimeOut+0xc4>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d007      	beq.n	800ab42 <xTaskCheckForTimeOut+0x86>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	69ba      	ldr	r2, [r7, #24]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d302      	bcc.n	800ab42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	61fb      	str	r3, [r7, #28]
 800ab40:	e015      	b.n	800ab6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d20b      	bcs.n	800ab64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	1ad2      	subs	r2, r2, r3
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f7ff ff99 	bl	800aa90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	61fb      	str	r3, [r7, #28]
 800ab62:	e004      	b.n	800ab6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	2200      	movs	r2, #0
 800ab68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab6e:	f000 fe8d 	bl	800b88c <vPortExitCritical>

	return xReturn;
 800ab72:	69fb      	ldr	r3, [r7, #28]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3720      	adds	r7, #32
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	20005760 	.word	0x20005760
 800ab80:	20005774 	.word	0x20005774

0800ab84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ab84:	b480      	push	{r7}
 800ab86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab88:	4b03      	ldr	r3, [pc, #12]	@ (800ab98 <vTaskMissedYield+0x14>)
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	601a      	str	r2, [r3, #0]
}
 800ab8e:	bf00      	nop
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	20005770 	.word	0x20005770

0800ab9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aba4:	f000 f852 	bl	800ac4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aba8:	4b06      	ldr	r3, [pc, #24]	@ (800abc4 <prvIdleTask+0x28>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d9f9      	bls.n	800aba4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800abb0:	4b05      	ldr	r3, [pc, #20]	@ (800abc8 <prvIdleTask+0x2c>)
 800abb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abb6:	601a      	str	r2, [r3, #0]
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800abc0:	e7f0      	b.n	800aba4 <prvIdleTask+0x8>
 800abc2:	bf00      	nop
 800abc4:	2000528c 	.word	0x2000528c
 800abc8:	e000ed04 	.word	0xe000ed04

0800abcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abd2:	2300      	movs	r3, #0
 800abd4:	607b      	str	r3, [r7, #4]
 800abd6:	e00c      	b.n	800abf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	4613      	mov	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4a12      	ldr	r2, [pc, #72]	@ (800ac2c <prvInitialiseTaskLists+0x60>)
 800abe4:	4413      	add	r3, r2
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fe fcae 	bl	8009548 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	3301      	adds	r3, #1
 800abf0:	607b      	str	r3, [r7, #4]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b37      	cmp	r3, #55	@ 0x37
 800abf6:	d9ef      	bls.n	800abd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abf8:	480d      	ldr	r0, [pc, #52]	@ (800ac30 <prvInitialiseTaskLists+0x64>)
 800abfa:	f7fe fca5 	bl	8009548 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abfe:	480d      	ldr	r0, [pc, #52]	@ (800ac34 <prvInitialiseTaskLists+0x68>)
 800ac00:	f7fe fca2 	bl	8009548 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac04:	480c      	ldr	r0, [pc, #48]	@ (800ac38 <prvInitialiseTaskLists+0x6c>)
 800ac06:	f7fe fc9f 	bl	8009548 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac0a:	480c      	ldr	r0, [pc, #48]	@ (800ac3c <prvInitialiseTaskLists+0x70>)
 800ac0c:	f7fe fc9c 	bl	8009548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac10:	480b      	ldr	r0, [pc, #44]	@ (800ac40 <prvInitialiseTaskLists+0x74>)
 800ac12:	f7fe fc99 	bl	8009548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac16:	4b0b      	ldr	r3, [pc, #44]	@ (800ac44 <prvInitialiseTaskLists+0x78>)
 800ac18:	4a05      	ldr	r2, [pc, #20]	@ (800ac30 <prvInitialiseTaskLists+0x64>)
 800ac1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac48 <prvInitialiseTaskLists+0x7c>)
 800ac1e:	4a05      	ldr	r2, [pc, #20]	@ (800ac34 <prvInitialiseTaskLists+0x68>)
 800ac20:	601a      	str	r2, [r3, #0]
}
 800ac22:	bf00      	nop
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	2000528c 	.word	0x2000528c
 800ac30:	200056ec 	.word	0x200056ec
 800ac34:	20005700 	.word	0x20005700
 800ac38:	2000571c 	.word	0x2000571c
 800ac3c:	20005730 	.word	0x20005730
 800ac40:	20005748 	.word	0x20005748
 800ac44:	20005714 	.word	0x20005714
 800ac48:	20005718 	.word	0x20005718

0800ac4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac52:	e019      	b.n	800ac88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac54:	f000 fde8 	bl	800b828 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac58:	4b10      	ldr	r3, [pc, #64]	@ (800ac9c <prvCheckTasksWaitingTermination+0x50>)
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	3304      	adds	r3, #4
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fe fcf9 	bl	800965c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac6a:	4b0d      	ldr	r3, [pc, #52]	@ (800aca0 <prvCheckTasksWaitingTermination+0x54>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	4a0b      	ldr	r2, [pc, #44]	@ (800aca0 <prvCheckTasksWaitingTermination+0x54>)
 800ac72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac74:	4b0b      	ldr	r3, [pc, #44]	@ (800aca4 <prvCheckTasksWaitingTermination+0x58>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	4a0a      	ldr	r2, [pc, #40]	@ (800aca4 <prvCheckTasksWaitingTermination+0x58>)
 800ac7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac7e:	f000 fe05 	bl	800b88c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 f810 	bl	800aca8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac88:	4b06      	ldr	r3, [pc, #24]	@ (800aca4 <prvCheckTasksWaitingTermination+0x58>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1e1      	bne.n	800ac54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20005730 	.word	0x20005730
 800aca0:	2000575c 	.word	0x2000575c
 800aca4:	20005744 	.word	0x20005744

0800aca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d108      	bne.n	800accc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acbe:	4618      	mov	r0, r3
 800acc0:	f000 ffa2 	bl	800bc08 <vPortFree>
				vPortFree( pxTCB );
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 ff9f 	bl	800bc08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800acca:	e019      	b.n	800ad00 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d103      	bne.n	800acde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 ff96 	bl	800bc08 <vPortFree>
	}
 800acdc:	e010      	b.n	800ad00 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d00b      	beq.n	800ad00 <prvDeleteTCB+0x58>
	__asm volatile
 800ace8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	60fb      	str	r3, [r7, #12]
}
 800acfa:	bf00      	nop
 800acfc:	bf00      	nop
 800acfe:	e7fd      	b.n	800acfc <prvDeleteTCB+0x54>
	}
 800ad00:	bf00      	nop
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ad40 <prvResetNextTaskUnblockTime+0x38>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d104      	bne.n	800ad22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad18:	4b0a      	ldr	r3, [pc, #40]	@ (800ad44 <prvResetNextTaskUnblockTime+0x3c>)
 800ad1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad20:	e008      	b.n	800ad34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad22:	4b07      	ldr	r3, [pc, #28]	@ (800ad40 <prvResetNextTaskUnblockTime+0x38>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	4a04      	ldr	r2, [pc, #16]	@ (800ad44 <prvResetNextTaskUnblockTime+0x3c>)
 800ad32:	6013      	str	r3, [r2, #0]
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	20005714 	.word	0x20005714
 800ad44:	2000577c 	.word	0x2000577c

0800ad48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad7c <xTaskGetSchedulerState+0x34>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d102      	bne.n	800ad5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad56:	2301      	movs	r3, #1
 800ad58:	607b      	str	r3, [r7, #4]
 800ad5a:	e008      	b.n	800ad6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad5c:	4b08      	ldr	r3, [pc, #32]	@ (800ad80 <xTaskGetSchedulerState+0x38>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d102      	bne.n	800ad6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad64:	2302      	movs	r3, #2
 800ad66:	607b      	str	r3, [r7, #4]
 800ad68:	e001      	b.n	800ad6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad6e:	687b      	ldr	r3, [r7, #4]
	}
 800ad70:	4618      	mov	r0, r3
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr
 800ad7c:	20005768 	.word	0x20005768
 800ad80:	20005784 	.word	0x20005784

0800ad84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ad90:	2300      	movs	r3, #0
 800ad92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d058      	beq.n	800ae4c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ad9a:	4b2f      	ldr	r3, [pc, #188]	@ (800ae58 <xTaskPriorityDisinherit+0xd4>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d00b      	beq.n	800adbc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ada4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	60fb      	str	r3, [r7, #12]
}
 800adb6:	bf00      	nop
 800adb8:	bf00      	nop
 800adba:	e7fd      	b.n	800adb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10b      	bne.n	800addc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	60bb      	str	r3, [r7, #8]
}
 800add6:	bf00      	nop
 800add8:	bf00      	nop
 800adda:	e7fd      	b.n	800add8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ade0:	1e5a      	subs	r2, r3, #1
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adee:	429a      	cmp	r2, r3
 800adf0:	d02c      	beq.n	800ae4c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d128      	bne.n	800ae4c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	3304      	adds	r3, #4
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fe fc2c 	bl	800965c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae10:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ae5c <xTaskPriorityDisinherit+0xd8>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d903      	bls.n	800ae2c <xTaskPriorityDisinherit+0xa8>
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae28:	4a0c      	ldr	r2, [pc, #48]	@ (800ae5c <xTaskPriorityDisinherit+0xd8>)
 800ae2a:	6013      	str	r3, [r2, #0]
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae30:	4613      	mov	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4a09      	ldr	r2, [pc, #36]	@ (800ae60 <xTaskPriorityDisinherit+0xdc>)
 800ae3a:	441a      	add	r2, r3
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	3304      	adds	r3, #4
 800ae40:	4619      	mov	r1, r3
 800ae42:	4610      	mov	r0, r2
 800ae44:	f7fe fbad 	bl	80095a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae4c:	697b      	ldr	r3, [r7, #20]
	}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3718      	adds	r7, #24
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20005288 	.word	0x20005288
 800ae5c:	20005764 	.word	0x20005764
 800ae60:	2000528c 	.word	0x2000528c

0800ae64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae6e:	4b21      	ldr	r3, [pc, #132]	@ (800aef4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae74:	4b20      	ldr	r3, [pc, #128]	@ (800aef8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fe fbee 	bl	800965c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae86:	d10a      	bne.n	800ae9e <prvAddCurrentTaskToDelayedList+0x3a>
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d007      	beq.n	800ae9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae8e:	4b1a      	ldr	r3, [pc, #104]	@ (800aef8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3304      	adds	r3, #4
 800ae94:	4619      	mov	r1, r3
 800ae96:	4819      	ldr	r0, [pc, #100]	@ (800aefc <prvAddCurrentTaskToDelayedList+0x98>)
 800ae98:	f7fe fb83 	bl	80095a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae9c:	e026      	b.n	800aeec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4413      	add	r3, r2
 800aea4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aea6:	4b14      	ldr	r3, [pc, #80]	@ (800aef8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d209      	bcs.n	800aeca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeb6:	4b12      	ldr	r3, [pc, #72]	@ (800af00 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	4b0f      	ldr	r3, [pc, #60]	@ (800aef8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3304      	adds	r3, #4
 800aec0:	4619      	mov	r1, r3
 800aec2:	4610      	mov	r0, r2
 800aec4:	f7fe fb91 	bl	80095ea <vListInsert>
}
 800aec8:	e010      	b.n	800aeec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeca:	4b0e      	ldr	r3, [pc, #56]	@ (800af04 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	4b0a      	ldr	r3, [pc, #40]	@ (800aef8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	3304      	adds	r3, #4
 800aed4:	4619      	mov	r1, r3
 800aed6:	4610      	mov	r0, r2
 800aed8:	f7fe fb87 	bl	80095ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aedc:	4b0a      	ldr	r3, [pc, #40]	@ (800af08 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d202      	bcs.n	800aeec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aee6:	4a08      	ldr	r2, [pc, #32]	@ (800af08 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	6013      	str	r3, [r2, #0]
}
 800aeec:	bf00      	nop
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	20005760 	.word	0x20005760
 800aef8:	20005288 	.word	0x20005288
 800aefc:	20005748 	.word	0x20005748
 800af00:	20005718 	.word	0x20005718
 800af04:	20005714 	.word	0x20005714
 800af08:	2000577c 	.word	0x2000577c

0800af0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08a      	sub	sp, #40	@ 0x28
 800af10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af12:	2300      	movs	r3, #0
 800af14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af16:	f000 fb13 	bl	800b540 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af1a:	4b1d      	ldr	r3, [pc, #116]	@ (800af90 <xTimerCreateTimerTask+0x84>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d021      	beq.n	800af66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af22:	2300      	movs	r3, #0
 800af24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af26:	2300      	movs	r3, #0
 800af28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af2a:	1d3a      	adds	r2, r7, #4
 800af2c:	f107 0108 	add.w	r1, r7, #8
 800af30:	f107 030c 	add.w	r3, r7, #12
 800af34:	4618      	mov	r0, r3
 800af36:	f7fe faed 	bl	8009514 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	9202      	str	r2, [sp, #8]
 800af42:	9301      	str	r3, [sp, #4]
 800af44:	2302      	movs	r3, #2
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	2300      	movs	r3, #0
 800af4a:	460a      	mov	r2, r1
 800af4c:	4911      	ldr	r1, [pc, #68]	@ (800af94 <xTimerCreateTimerTask+0x88>)
 800af4e:	4812      	ldr	r0, [pc, #72]	@ (800af98 <xTimerCreateTimerTask+0x8c>)
 800af50:	f7ff f8a8 	bl	800a0a4 <xTaskCreateStatic>
 800af54:	4603      	mov	r3, r0
 800af56:	4a11      	ldr	r2, [pc, #68]	@ (800af9c <xTimerCreateTimerTask+0x90>)
 800af58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af5a:	4b10      	ldr	r3, [pc, #64]	@ (800af9c <xTimerCreateTimerTask+0x90>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af62:	2301      	movs	r3, #1
 800af64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10b      	bne.n	800af84 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	613b      	str	r3, [r7, #16]
}
 800af7e:	bf00      	nop
 800af80:	bf00      	nop
 800af82:	e7fd      	b.n	800af80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800af84:	697b      	ldr	r3, [r7, #20]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3718      	adds	r7, #24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	200057b8 	.word	0x200057b8
 800af94:	0801a4e8 	.word	0x0801a4e8
 800af98:	0800b0d9 	.word	0x0800b0d9
 800af9c:	200057bc 	.word	0x200057bc

0800afa0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b08a      	sub	sp, #40	@ 0x28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800afae:	2300      	movs	r3, #0
 800afb0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d10b      	bne.n	800afd0 <xTimerGenericCommand+0x30>
	__asm volatile
 800afb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afbc:	f383 8811 	msr	BASEPRI, r3
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	623b      	str	r3, [r7, #32]
}
 800afca:	bf00      	nop
 800afcc:	bf00      	nop
 800afce:	e7fd      	b.n	800afcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800afd0:	4b19      	ldr	r3, [pc, #100]	@ (800b038 <xTimerGenericCommand+0x98>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d02a      	beq.n	800b02e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2b05      	cmp	r3, #5
 800afe8:	dc18      	bgt.n	800b01c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800afea:	f7ff fead 	bl	800ad48 <xTaskGetSchedulerState>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d109      	bne.n	800b008 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aff4:	4b10      	ldr	r3, [pc, #64]	@ (800b038 <xTimerGenericCommand+0x98>)
 800aff6:	6818      	ldr	r0, [r3, #0]
 800aff8:	f107 0110 	add.w	r1, r7, #16
 800affc:	2300      	movs	r3, #0
 800affe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b000:	f7fe fc60 	bl	80098c4 <xQueueGenericSend>
 800b004:	6278      	str	r0, [r7, #36]	@ 0x24
 800b006:	e012      	b.n	800b02e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b008:	4b0b      	ldr	r3, [pc, #44]	@ (800b038 <xTimerGenericCommand+0x98>)
 800b00a:	6818      	ldr	r0, [r3, #0]
 800b00c:	f107 0110 	add.w	r1, r7, #16
 800b010:	2300      	movs	r3, #0
 800b012:	2200      	movs	r2, #0
 800b014:	f7fe fc56 	bl	80098c4 <xQueueGenericSend>
 800b018:	6278      	str	r0, [r7, #36]	@ 0x24
 800b01a:	e008      	b.n	800b02e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b01c:	4b06      	ldr	r3, [pc, #24]	@ (800b038 <xTimerGenericCommand+0x98>)
 800b01e:	6818      	ldr	r0, [r3, #0]
 800b020:	f107 0110 	add.w	r1, r7, #16
 800b024:	2300      	movs	r3, #0
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	f7fe fd4e 	bl	8009ac8 <xQueueGenericSendFromISR>
 800b02c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b030:	4618      	mov	r0, r3
 800b032:	3728      	adds	r7, #40	@ 0x28
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	200057b8 	.word	0x200057b8

0800b03c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b088      	sub	sp, #32
 800b040:	af02      	add	r7, sp, #8
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b046:	4b23      	ldr	r3, [pc, #140]	@ (800b0d4 <prvProcessExpiredTimer+0x98>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	3304      	adds	r3, #4
 800b054:	4618      	mov	r0, r3
 800b056:	f7fe fb01 	bl	800965c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b060:	f003 0304 	and.w	r3, r3, #4
 800b064:	2b00      	cmp	r3, #0
 800b066:	d023      	beq.n	800b0b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	699a      	ldr	r2, [r3, #24]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	18d1      	adds	r1, r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	683a      	ldr	r2, [r7, #0]
 800b074:	6978      	ldr	r0, [r7, #20]
 800b076:	f000 f8d5 	bl	800b224 <prvInsertTimerInActiveList>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d020      	beq.n	800b0c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b080:	2300      	movs	r3, #0
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	2300      	movs	r3, #0
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	2100      	movs	r1, #0
 800b08a:	6978      	ldr	r0, [r7, #20]
 800b08c:	f7ff ff88 	bl	800afa0 <xTimerGenericCommand>
 800b090:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d114      	bne.n	800b0c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b09c:	f383 8811 	msr	BASEPRI, r3
 800b0a0:	f3bf 8f6f 	isb	sy
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	60fb      	str	r3, [r7, #12]
}
 800b0aa:	bf00      	nop
 800b0ac:	bf00      	nop
 800b0ae:	e7fd      	b.n	800b0ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0b6:	f023 0301 	bic.w	r3, r3, #1
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	6978      	ldr	r0, [r7, #20]
 800b0c8:	4798      	blx	r3
}
 800b0ca:	bf00      	nop
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	200057b0 	.word	0x200057b0

0800b0d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0e0:	f107 0308 	add.w	r3, r7, #8
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f000 f859 	bl	800b19c <prvGetNextExpireTime>
 800b0ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f000 f805 	bl	800b100 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b0f6:	f000 f8d7 	bl	800b2a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0fa:	bf00      	nop
 800b0fc:	e7f0      	b.n	800b0e0 <prvTimerTask+0x8>
	...

0800b100 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b10a:	f7ff fa0f 	bl	800a52c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b10e:	f107 0308 	add.w	r3, r7, #8
 800b112:	4618      	mov	r0, r3
 800b114:	f000 f866 	bl	800b1e4 <prvSampleTimeNow>
 800b118:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d130      	bne.n	800b182 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d10a      	bne.n	800b13c <prvProcessTimerOrBlockTask+0x3c>
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d806      	bhi.n	800b13c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b12e:	f7ff fa0b 	bl	800a548 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b132:	68f9      	ldr	r1, [r7, #12]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7ff ff81 	bl	800b03c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b13a:	e024      	b.n	800b186 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d008      	beq.n	800b154 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b142:	4b13      	ldr	r3, [pc, #76]	@ (800b190 <prvProcessTimerOrBlockTask+0x90>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <prvProcessTimerOrBlockTask+0x50>
 800b14c:	2301      	movs	r3, #1
 800b14e:	e000      	b.n	800b152 <prvProcessTimerOrBlockTask+0x52>
 800b150:	2300      	movs	r3, #0
 800b152:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b154:	4b0f      	ldr	r3, [pc, #60]	@ (800b194 <prvProcessTimerOrBlockTask+0x94>)
 800b156:	6818      	ldr	r0, [r3, #0]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	4619      	mov	r1, r3
 800b162:	f7fe ff6b 	bl	800a03c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b166:	f7ff f9ef 	bl	800a548 <xTaskResumeAll>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10a      	bne.n	800b186 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b170:	4b09      	ldr	r3, [pc, #36]	@ (800b198 <prvProcessTimerOrBlockTask+0x98>)
 800b172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b176:	601a      	str	r2, [r3, #0]
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	f3bf 8f6f 	isb	sy
}
 800b180:	e001      	b.n	800b186 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b182:	f7ff f9e1 	bl	800a548 <xTaskResumeAll>
}
 800b186:	bf00      	nop
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	200057b4 	.word	0x200057b4
 800b194:	200057b8 	.word	0x200057b8
 800b198:	e000ed04 	.word	0xe000ed04

0800b19c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b1a4:	4b0e      	ldr	r3, [pc, #56]	@ (800b1e0 <prvGetNextExpireTime+0x44>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d101      	bne.n	800b1b2 <prvGetNextExpireTime+0x16>
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	e000      	b.n	800b1b4 <prvGetNextExpireTime+0x18>
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d105      	bne.n	800b1cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1c0:	4b07      	ldr	r3, [pc, #28]	@ (800b1e0 <prvGetNextExpireTime+0x44>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	60fb      	str	r3, [r7, #12]
 800b1ca:	e001      	b.n	800b1d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	200057b0 	.word	0x200057b0

0800b1e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b1ec:	f7ff fa4a 	bl	800a684 <xTaskGetTickCount>
 800b1f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b1f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b220 <prvSampleTimeNow+0x3c>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d205      	bcs.n	800b208 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b1fc:	f000 f93a 	bl	800b474 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	601a      	str	r2, [r3, #0]
 800b206:	e002      	b.n	800b20e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b20e:	4a04      	ldr	r2, [pc, #16]	@ (800b220 <prvSampleTimeNow+0x3c>)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b214:	68fb      	ldr	r3, [r7, #12]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	200057c0 	.word	0x200057c0

0800b224 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
 800b230:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b232:	2300      	movs	r3, #0
 800b234:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	429a      	cmp	r2, r3
 800b248:	d812      	bhi.n	800b270 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	1ad2      	subs	r2, r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	699b      	ldr	r3, [r3, #24]
 800b254:	429a      	cmp	r2, r3
 800b256:	d302      	bcc.n	800b25e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b258:	2301      	movs	r3, #1
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	e01b      	b.n	800b296 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b25e:	4b10      	ldr	r3, [pc, #64]	@ (800b2a0 <prvInsertTimerInActiveList+0x7c>)
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	3304      	adds	r3, #4
 800b266:	4619      	mov	r1, r3
 800b268:	4610      	mov	r0, r2
 800b26a:	f7fe f9be 	bl	80095ea <vListInsert>
 800b26e:	e012      	b.n	800b296 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	429a      	cmp	r2, r3
 800b276:	d206      	bcs.n	800b286 <prvInsertTimerInActiveList+0x62>
 800b278:	68ba      	ldr	r2, [r7, #8]
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d302      	bcc.n	800b286 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b280:	2301      	movs	r3, #1
 800b282:	617b      	str	r3, [r7, #20]
 800b284:	e007      	b.n	800b296 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b286:	4b07      	ldr	r3, [pc, #28]	@ (800b2a4 <prvInsertTimerInActiveList+0x80>)
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	3304      	adds	r3, #4
 800b28e:	4619      	mov	r1, r3
 800b290:	4610      	mov	r0, r2
 800b292:	f7fe f9aa 	bl	80095ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b296:	697b      	ldr	r3, [r7, #20]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3718      	adds	r7, #24
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	200057b4 	.word	0x200057b4
 800b2a4:	200057b0 	.word	0x200057b0

0800b2a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08e      	sub	sp, #56	@ 0x38
 800b2ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2ae:	e0ce      	b.n	800b44e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	da19      	bge.n	800b2ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b2b6:	1d3b      	adds	r3, r7, #4
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10b      	bne.n	800b2da <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	61fb      	str	r3, [r7, #28]
}
 800b2d4:	bf00      	nop
 800b2d6:	bf00      	nop
 800b2d8:	e7fd      	b.n	800b2d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2e0:	6850      	ldr	r0, [r2, #4]
 800b2e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2e4:	6892      	ldr	r2, [r2, #8]
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f2c0 80ae 	blt.w	800b44e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d004      	beq.n	800b308 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b300:	3304      	adds	r3, #4
 800b302:	4618      	mov	r0, r3
 800b304:	f7fe f9aa 	bl	800965c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b308:	463b      	mov	r3, r7
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7ff ff6a 	bl	800b1e4 <prvSampleTimeNow>
 800b310:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2b09      	cmp	r3, #9
 800b316:	f200 8097 	bhi.w	800b448 <prvProcessReceivedCommands+0x1a0>
 800b31a:	a201      	add	r2, pc, #4	@ (adr r2, 800b320 <prvProcessReceivedCommands+0x78>)
 800b31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b320:	0800b349 	.word	0x0800b349
 800b324:	0800b349 	.word	0x0800b349
 800b328:	0800b349 	.word	0x0800b349
 800b32c:	0800b3bf 	.word	0x0800b3bf
 800b330:	0800b3d3 	.word	0x0800b3d3
 800b334:	0800b41f 	.word	0x0800b41f
 800b338:	0800b349 	.word	0x0800b349
 800b33c:	0800b349 	.word	0x0800b349
 800b340:	0800b3bf 	.word	0x0800b3bf
 800b344:	0800b3d3 	.word	0x0800b3d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b34e:	f043 0301 	orr.w	r3, r3, #1
 800b352:	b2da      	uxtb	r2, r3
 800b354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b356:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	18d1      	adds	r1, r2, r3
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b368:	f7ff ff5c 	bl	800b224 <prvInsertTimerInActiveList>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d06c      	beq.n	800b44c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b378:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b380:	f003 0304 	and.w	r3, r3, #4
 800b384:	2b00      	cmp	r3, #0
 800b386:	d061      	beq.n	800b44c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b388:	68ba      	ldr	r2, [r7, #8]
 800b38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38c:	699b      	ldr	r3, [r3, #24]
 800b38e:	441a      	add	r2, r3
 800b390:	2300      	movs	r3, #0
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	2300      	movs	r3, #0
 800b396:	2100      	movs	r1, #0
 800b398:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b39a:	f7ff fe01 	bl	800afa0 <xTimerGenericCommand>
 800b39e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b3a0:	6a3b      	ldr	r3, [r7, #32]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d152      	bne.n	800b44c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3aa:	f383 8811 	msr	BASEPRI, r3
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f3bf 8f4f 	dsb	sy
 800b3b6:	61bb      	str	r3, [r7, #24]
}
 800b3b8:	bf00      	nop
 800b3ba:	bf00      	nop
 800b3bc:	e7fd      	b.n	800b3ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3c4:	f023 0301 	bic.w	r3, r3, #1
 800b3c8:	b2da      	uxtb	r2, r3
 800b3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b3d0:	e03d      	b.n	800b44e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3d8:	f043 0301 	orr.w	r3, r3, #1
 800b3dc:	b2da      	uxtb	r2, r3
 800b3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ec:	699b      	ldr	r3, [r3, #24]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10b      	bne.n	800b40a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	617b      	str	r3, [r7, #20]
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop
 800b408:	e7fd      	b.n	800b406 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40c:	699a      	ldr	r2, [r3, #24]
 800b40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b410:	18d1      	adds	r1, r2, r3
 800b412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b418:	f7ff ff04 	bl	800b224 <prvInsertTimerInActiveList>
					break;
 800b41c:	e017      	b.n	800b44e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b420:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b424:	f003 0302 	and.w	r3, r3, #2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d103      	bne.n	800b434 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b42c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b42e:	f000 fbeb 	bl	800bc08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b432:	e00c      	b.n	800b44e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b436:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b43a:	f023 0301 	bic.w	r3, r3, #1
 800b43e:	b2da      	uxtb	r2, r3
 800b440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b442:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b446:	e002      	b.n	800b44e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b448:	bf00      	nop
 800b44a:	e000      	b.n	800b44e <prvProcessReceivedCommands+0x1a6>
					break;
 800b44c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b44e:	4b08      	ldr	r3, [pc, #32]	@ (800b470 <prvProcessReceivedCommands+0x1c8>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	1d39      	adds	r1, r7, #4
 800b454:	2200      	movs	r2, #0
 800b456:	4618      	mov	r0, r3
 800b458:	f7fe fbd4 	bl	8009c04 <xQueueReceive>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f47f af26 	bne.w	800b2b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b464:	bf00      	nop
 800b466:	bf00      	nop
 800b468:	3730      	adds	r7, #48	@ 0x30
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	200057b8 	.word	0x200057b8

0800b474 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b47a:	e049      	b.n	800b510 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b47c:	4b2e      	ldr	r3, [pc, #184]	@ (800b538 <prvSwitchTimerLists+0xc4>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b486:	4b2c      	ldr	r3, [pc, #176]	@ (800b538 <prvSwitchTimerLists+0xc4>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3304      	adds	r3, #4
 800b494:	4618      	mov	r0, r3
 800b496:	f7fe f8e1 	bl	800965c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6a1b      	ldr	r3, [r3, #32]
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4a8:	f003 0304 	and.w	r3, r3, #4
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d02f      	beq.n	800b510 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d90e      	bls.n	800b4e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4ce:	4b1a      	ldr	r3, [pc, #104]	@ (800b538 <prvSwitchTimerLists+0xc4>)
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	4610      	mov	r0, r2
 800b4da:	f7fe f886 	bl	80095ea <vListInsert>
 800b4de:	e017      	b.n	800b510 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f7ff fd58 	bl	800afa0 <xTimerGenericCommand>
 800b4f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10b      	bne.n	800b510 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fc:	f383 8811 	msr	BASEPRI, r3
 800b500:	f3bf 8f6f 	isb	sy
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	603b      	str	r3, [r7, #0]
}
 800b50a:	bf00      	nop
 800b50c:	bf00      	nop
 800b50e:	e7fd      	b.n	800b50c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b510:	4b09      	ldr	r3, [pc, #36]	@ (800b538 <prvSwitchTimerLists+0xc4>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d1b0      	bne.n	800b47c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b51a:	4b07      	ldr	r3, [pc, #28]	@ (800b538 <prvSwitchTimerLists+0xc4>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b520:	4b06      	ldr	r3, [pc, #24]	@ (800b53c <prvSwitchTimerLists+0xc8>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a04      	ldr	r2, [pc, #16]	@ (800b538 <prvSwitchTimerLists+0xc4>)
 800b526:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b528:	4a04      	ldr	r2, [pc, #16]	@ (800b53c <prvSwitchTimerLists+0xc8>)
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	6013      	str	r3, [r2, #0]
}
 800b52e:	bf00      	nop
 800b530:	3718      	adds	r7, #24
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	200057b0 	.word	0x200057b0
 800b53c:	200057b4 	.word	0x200057b4

0800b540 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b546:	f000 f96f 	bl	800b828 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b54a:	4b15      	ldr	r3, [pc, #84]	@ (800b5a0 <prvCheckForValidListAndQueue+0x60>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d120      	bne.n	800b594 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b552:	4814      	ldr	r0, [pc, #80]	@ (800b5a4 <prvCheckForValidListAndQueue+0x64>)
 800b554:	f7fd fff8 	bl	8009548 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b558:	4813      	ldr	r0, [pc, #76]	@ (800b5a8 <prvCheckForValidListAndQueue+0x68>)
 800b55a:	f7fd fff5 	bl	8009548 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b55e:	4b13      	ldr	r3, [pc, #76]	@ (800b5ac <prvCheckForValidListAndQueue+0x6c>)
 800b560:	4a10      	ldr	r2, [pc, #64]	@ (800b5a4 <prvCheckForValidListAndQueue+0x64>)
 800b562:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b564:	4b12      	ldr	r3, [pc, #72]	@ (800b5b0 <prvCheckForValidListAndQueue+0x70>)
 800b566:	4a10      	ldr	r2, [pc, #64]	@ (800b5a8 <prvCheckForValidListAndQueue+0x68>)
 800b568:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b56a:	2300      	movs	r3, #0
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	4b11      	ldr	r3, [pc, #68]	@ (800b5b4 <prvCheckForValidListAndQueue+0x74>)
 800b570:	4a11      	ldr	r2, [pc, #68]	@ (800b5b8 <prvCheckForValidListAndQueue+0x78>)
 800b572:	2110      	movs	r1, #16
 800b574:	200a      	movs	r0, #10
 800b576:	f7fe f905 	bl	8009784 <xQueueGenericCreateStatic>
 800b57a:	4603      	mov	r3, r0
 800b57c:	4a08      	ldr	r2, [pc, #32]	@ (800b5a0 <prvCheckForValidListAndQueue+0x60>)
 800b57e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b580:	4b07      	ldr	r3, [pc, #28]	@ (800b5a0 <prvCheckForValidListAndQueue+0x60>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d005      	beq.n	800b594 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b588:	4b05      	ldr	r3, [pc, #20]	@ (800b5a0 <prvCheckForValidListAndQueue+0x60>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	490b      	ldr	r1, [pc, #44]	@ (800b5bc <prvCheckForValidListAndQueue+0x7c>)
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fe fd2a 	bl	8009fe8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b594:	f000 f97a 	bl	800b88c <vPortExitCritical>
}
 800b598:	bf00      	nop
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	200057b8 	.word	0x200057b8
 800b5a4:	20005788 	.word	0x20005788
 800b5a8:	2000579c 	.word	0x2000579c
 800b5ac:	200057b0 	.word	0x200057b0
 800b5b0:	200057b4 	.word	0x200057b4
 800b5b4:	20005864 	.word	0x20005864
 800b5b8:	200057c4 	.word	0x200057c4
 800b5bc:	0801a4f0 	.word	0x0801a4f0

0800b5c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	3b04      	subs	r3, #4
 800b5d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b5d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	3b04      	subs	r3, #4
 800b5de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	f023 0201 	bic.w	r2, r3, #1
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	3b04      	subs	r3, #4
 800b5ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b5f0:	4a0c      	ldr	r2, [pc, #48]	@ (800b624 <pxPortInitialiseStack+0x64>)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	3b14      	subs	r3, #20
 800b5fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	3b04      	subs	r3, #4
 800b606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f06f 0202 	mvn.w	r2, #2
 800b60e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	3b20      	subs	r3, #32
 800b614:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b616:	68fb      	ldr	r3, [r7, #12]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	0800b629 	.word	0x0800b629

0800b628 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b62e:	2300      	movs	r3, #0
 800b630:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b632:	4b13      	ldr	r3, [pc, #76]	@ (800b680 <prvTaskExitError+0x58>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b63a:	d00b      	beq.n	800b654 <prvTaskExitError+0x2c>
	__asm volatile
 800b63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	60fb      	str	r3, [r7, #12]
}
 800b64e:	bf00      	nop
 800b650:	bf00      	nop
 800b652:	e7fd      	b.n	800b650 <prvTaskExitError+0x28>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	60bb      	str	r3, [r7, #8]
}
 800b666:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b668:	bf00      	nop
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d0fc      	beq.n	800b66a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b670:	bf00      	nop
 800b672:	bf00      	nop
 800b674:	3714      	adds	r7, #20
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr
 800b67e:	bf00      	nop
 800b680:	2000002c 	.word	0x2000002c
	...

0800b690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b690:	4b07      	ldr	r3, [pc, #28]	@ (800b6b0 <pxCurrentTCBConst2>)
 800b692:	6819      	ldr	r1, [r3, #0]
 800b694:	6808      	ldr	r0, [r1, #0]
 800b696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69a:	f380 8809 	msr	PSP, r0
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f04f 0000 	mov.w	r0, #0
 800b6a6:	f380 8811 	msr	BASEPRI, r0
 800b6aa:	4770      	bx	lr
 800b6ac:	f3af 8000 	nop.w

0800b6b0 <pxCurrentTCBConst2>:
 800b6b0:	20005288 	.word	0x20005288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6b4:	bf00      	nop
 800b6b6:	bf00      	nop

0800b6b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6b8:	4808      	ldr	r0, [pc, #32]	@ (800b6dc <prvPortStartFirstTask+0x24>)
 800b6ba:	6800      	ldr	r0, [r0, #0]
 800b6bc:	6800      	ldr	r0, [r0, #0]
 800b6be:	f380 8808 	msr	MSP, r0
 800b6c2:	f04f 0000 	mov.w	r0, #0
 800b6c6:	f380 8814 	msr	CONTROL, r0
 800b6ca:	b662      	cpsie	i
 800b6cc:	b661      	cpsie	f
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	df00      	svc	0
 800b6d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b6da:	bf00      	nop
 800b6dc:	e000ed08 	.word	0xe000ed08

0800b6e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b086      	sub	sp, #24
 800b6e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b6e6:	4b47      	ldr	r3, [pc, #284]	@ (800b804 <xPortStartScheduler+0x124>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a47      	ldr	r2, [pc, #284]	@ (800b808 <xPortStartScheduler+0x128>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d10b      	bne.n	800b708 <xPortStartScheduler+0x28>
	__asm volatile
 800b6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f4:	f383 8811 	msr	BASEPRI, r3
 800b6f8:	f3bf 8f6f 	isb	sy
 800b6fc:	f3bf 8f4f 	dsb	sy
 800b700:	60fb      	str	r3, [r7, #12]
}
 800b702:	bf00      	nop
 800b704:	bf00      	nop
 800b706:	e7fd      	b.n	800b704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b708:	4b3e      	ldr	r3, [pc, #248]	@ (800b804 <xPortStartScheduler+0x124>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a3f      	ldr	r2, [pc, #252]	@ (800b80c <xPortStartScheduler+0x12c>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d10b      	bne.n	800b72a <xPortStartScheduler+0x4a>
	__asm volatile
 800b712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	613b      	str	r3, [r7, #16]
}
 800b724:	bf00      	nop
 800b726:	bf00      	nop
 800b728:	e7fd      	b.n	800b726 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b72a:	4b39      	ldr	r3, [pc, #228]	@ (800b810 <xPortStartScheduler+0x130>)
 800b72c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	b2db      	uxtb	r3, r3
 800b734:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	22ff      	movs	r2, #255	@ 0xff
 800b73a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	b2db      	uxtb	r3, r3
 800b742:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b744:	78fb      	ldrb	r3, [r7, #3]
 800b746:	b2db      	uxtb	r3, r3
 800b748:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b74c:	b2da      	uxtb	r2, r3
 800b74e:	4b31      	ldr	r3, [pc, #196]	@ (800b814 <xPortStartScheduler+0x134>)
 800b750:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b752:	4b31      	ldr	r3, [pc, #196]	@ (800b818 <xPortStartScheduler+0x138>)
 800b754:	2207      	movs	r2, #7
 800b756:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b758:	e009      	b.n	800b76e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b75a:	4b2f      	ldr	r3, [pc, #188]	@ (800b818 <xPortStartScheduler+0x138>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	3b01      	subs	r3, #1
 800b760:	4a2d      	ldr	r2, [pc, #180]	@ (800b818 <xPortStartScheduler+0x138>)
 800b762:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	b2db      	uxtb	r3, r3
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b76e:	78fb      	ldrb	r3, [r7, #3]
 800b770:	b2db      	uxtb	r3, r3
 800b772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b776:	2b80      	cmp	r3, #128	@ 0x80
 800b778:	d0ef      	beq.n	800b75a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b77a:	4b27      	ldr	r3, [pc, #156]	@ (800b818 <xPortStartScheduler+0x138>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f1c3 0307 	rsb	r3, r3, #7
 800b782:	2b04      	cmp	r3, #4
 800b784:	d00b      	beq.n	800b79e <xPortStartScheduler+0xbe>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	60bb      	str	r3, [r7, #8]
}
 800b798:	bf00      	nop
 800b79a:	bf00      	nop
 800b79c:	e7fd      	b.n	800b79a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b79e:	4b1e      	ldr	r3, [pc, #120]	@ (800b818 <xPortStartScheduler+0x138>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	021b      	lsls	r3, r3, #8
 800b7a4:	4a1c      	ldr	r2, [pc, #112]	@ (800b818 <xPortStartScheduler+0x138>)
 800b7a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b7a8:	4b1b      	ldr	r3, [pc, #108]	@ (800b818 <xPortStartScheduler+0x138>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b7b0:	4a19      	ldr	r2, [pc, #100]	@ (800b818 <xPortStartScheduler+0x138>)
 800b7b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b7bc:	4b17      	ldr	r3, [pc, #92]	@ (800b81c <xPortStartScheduler+0x13c>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a16      	ldr	r2, [pc, #88]	@ (800b81c <xPortStartScheduler+0x13c>)
 800b7c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b7c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7c8:	4b14      	ldr	r3, [pc, #80]	@ (800b81c <xPortStartScheduler+0x13c>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a13      	ldr	r2, [pc, #76]	@ (800b81c <xPortStartScheduler+0x13c>)
 800b7ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b7d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b7d4:	f000 f8da 	bl	800b98c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b7d8:	4b11      	ldr	r3, [pc, #68]	@ (800b820 <xPortStartScheduler+0x140>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b7de:	f000 f8f9 	bl	800b9d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b7e2:	4b10      	ldr	r3, [pc, #64]	@ (800b824 <xPortStartScheduler+0x144>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a0f      	ldr	r2, [pc, #60]	@ (800b824 <xPortStartScheduler+0x144>)
 800b7e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b7ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b7ee:	f7ff ff63 	bl	800b6b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b7f2:	f7ff f811 	bl	800a818 <vTaskSwitchContext>
	prvTaskExitError();
 800b7f6:	f7ff ff17 	bl	800b628 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3718      	adds	r7, #24
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	e000ed00 	.word	0xe000ed00
 800b808:	410fc271 	.word	0x410fc271
 800b80c:	410fc270 	.word	0x410fc270
 800b810:	e000e400 	.word	0xe000e400
 800b814:	200058b4 	.word	0x200058b4
 800b818:	200058b8 	.word	0x200058b8
 800b81c:	e000ed20 	.word	0xe000ed20
 800b820:	2000002c 	.word	0x2000002c
 800b824:	e000ef34 	.word	0xe000ef34

0800b828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	607b      	str	r3, [r7, #4]
}
 800b840:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b842:	4b10      	ldr	r3, [pc, #64]	@ (800b884 <vPortEnterCritical+0x5c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	3301      	adds	r3, #1
 800b848:	4a0e      	ldr	r2, [pc, #56]	@ (800b884 <vPortEnterCritical+0x5c>)
 800b84a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b84c:	4b0d      	ldr	r3, [pc, #52]	@ (800b884 <vPortEnterCritical+0x5c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d110      	bne.n	800b876 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b854:	4b0c      	ldr	r3, [pc, #48]	@ (800b888 <vPortEnterCritical+0x60>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00b      	beq.n	800b876 <vPortEnterCritical+0x4e>
	__asm volatile
 800b85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	603b      	str	r3, [r7, #0]
}
 800b870:	bf00      	nop
 800b872:	bf00      	nop
 800b874:	e7fd      	b.n	800b872 <vPortEnterCritical+0x4a>
	}
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	2000002c 	.word	0x2000002c
 800b888:	e000ed04 	.word	0xe000ed04

0800b88c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b892:	4b12      	ldr	r3, [pc, #72]	@ (800b8dc <vPortExitCritical+0x50>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10b      	bne.n	800b8b2 <vPortExitCritical+0x26>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	607b      	str	r3, [r7, #4]
}
 800b8ac:	bf00      	nop
 800b8ae:	bf00      	nop
 800b8b0:	e7fd      	b.n	800b8ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b8b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b8dc <vPortExitCritical+0x50>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	4a08      	ldr	r2, [pc, #32]	@ (800b8dc <vPortExitCritical+0x50>)
 800b8ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b8bc:	4b07      	ldr	r3, [pc, #28]	@ (800b8dc <vPortExitCritical+0x50>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d105      	bne.n	800b8d0 <vPortExitCritical+0x44>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	f383 8811 	msr	BASEPRI, r3
}
 800b8ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b8d0:	bf00      	nop
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	2000002c 	.word	0x2000002c

0800b8e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b8e0:	f3ef 8009 	mrs	r0, PSP
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	4b15      	ldr	r3, [pc, #84]	@ (800b940 <pxCurrentTCBConst>)
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	f01e 0f10 	tst.w	lr, #16
 800b8f0:	bf08      	it	eq
 800b8f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8fa:	6010      	str	r0, [r2, #0]
 800b8fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b900:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b904:	f380 8811 	msr	BASEPRI, r0
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f7fe ff82 	bl	800a818 <vTaskSwitchContext>
 800b914:	f04f 0000 	mov.w	r0, #0
 800b918:	f380 8811 	msr	BASEPRI, r0
 800b91c:	bc09      	pop	{r0, r3}
 800b91e:	6819      	ldr	r1, [r3, #0]
 800b920:	6808      	ldr	r0, [r1, #0]
 800b922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b926:	f01e 0f10 	tst.w	lr, #16
 800b92a:	bf08      	it	eq
 800b92c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b930:	f380 8809 	msr	PSP, r0
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	f3af 8000 	nop.w

0800b940 <pxCurrentTCBConst>:
 800b940:	20005288 	.word	0x20005288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b944:	bf00      	nop
 800b946:	bf00      	nop

0800b948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	607b      	str	r3, [r7, #4]
}
 800b960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b962:	f7fe fe9f 	bl	800a6a4 <xTaskIncrementTick>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d003      	beq.n	800b974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b96c:	4b06      	ldr	r3, [pc, #24]	@ (800b988 <xPortSysTickHandler+0x40>)
 800b96e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	2300      	movs	r3, #0
 800b976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	f383 8811 	msr	BASEPRI, r3
}
 800b97e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b980:	bf00      	nop
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	e000ed04 	.word	0xe000ed04

0800b98c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b98c:	b480      	push	{r7}
 800b98e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b990:	4b0b      	ldr	r3, [pc, #44]	@ (800b9c0 <vPortSetupTimerInterrupt+0x34>)
 800b992:	2200      	movs	r2, #0
 800b994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b996:	4b0b      	ldr	r3, [pc, #44]	@ (800b9c4 <vPortSetupTimerInterrupt+0x38>)
 800b998:	2200      	movs	r2, #0
 800b99a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b99c:	4b0a      	ldr	r3, [pc, #40]	@ (800b9c8 <vPortSetupTimerInterrupt+0x3c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a0a      	ldr	r2, [pc, #40]	@ (800b9cc <vPortSetupTimerInterrupt+0x40>)
 800b9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9a6:	099b      	lsrs	r3, r3, #6
 800b9a8:	4a09      	ldr	r2, [pc, #36]	@ (800b9d0 <vPortSetupTimerInterrupt+0x44>)
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9ae:	4b04      	ldr	r3, [pc, #16]	@ (800b9c0 <vPortSetupTimerInterrupt+0x34>)
 800b9b0:	2207      	movs	r2, #7
 800b9b2:	601a      	str	r2, [r3, #0]
}
 800b9b4:	bf00      	nop
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	e000e010 	.word	0xe000e010
 800b9c4:	e000e018 	.word	0xe000e018
 800b9c8:	20000020 	.word	0x20000020
 800b9cc:	10624dd3 	.word	0x10624dd3
 800b9d0:	e000e014 	.word	0xe000e014

0800b9d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b9d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b9e4 <vPortEnableVFP+0x10>
 800b9d8:	6801      	ldr	r1, [r0, #0]
 800b9da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b9de:	6001      	str	r1, [r0, #0]
 800b9e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b9e2:	bf00      	nop
 800b9e4:	e000ed88 	.word	0xe000ed88

0800b9e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b9ee:	f3ef 8305 	mrs	r3, IPSR
 800b9f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2b0f      	cmp	r3, #15
 800b9f8:	d915      	bls.n	800ba26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9fa:	4a18      	ldr	r2, [pc, #96]	@ (800ba5c <vPortValidateInterruptPriority+0x74>)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	4413      	add	r3, r2
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba04:	4b16      	ldr	r3, [pc, #88]	@ (800ba60 <vPortValidateInterruptPriority+0x78>)
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	7afa      	ldrb	r2, [r7, #11]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d20b      	bcs.n	800ba26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ba0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	607b      	str	r3, [r7, #4]
}
 800ba20:	bf00      	nop
 800ba22:	bf00      	nop
 800ba24:	e7fd      	b.n	800ba22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba26:	4b0f      	ldr	r3, [pc, #60]	@ (800ba64 <vPortValidateInterruptPriority+0x7c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ba2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ba68 <vPortValidateInterruptPriority+0x80>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d90b      	bls.n	800ba4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ba36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	603b      	str	r3, [r7, #0]
}
 800ba48:	bf00      	nop
 800ba4a:	bf00      	nop
 800ba4c:	e7fd      	b.n	800ba4a <vPortValidateInterruptPriority+0x62>
	}
 800ba4e:	bf00      	nop
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	e000e3f0 	.word	0xe000e3f0
 800ba60:	200058b4 	.word	0x200058b4
 800ba64:	e000ed0c 	.word	0xe000ed0c
 800ba68:	200058b8 	.word	0x200058b8

0800ba6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08a      	sub	sp, #40	@ 0x28
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba74:	2300      	movs	r3, #0
 800ba76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba78:	f7fe fd58 	bl	800a52c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba7c:	4b5c      	ldr	r3, [pc, #368]	@ (800bbf0 <pvPortMalloc+0x184>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d101      	bne.n	800ba88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba84:	f000 f924 	bl	800bcd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba88:	4b5a      	ldr	r3, [pc, #360]	@ (800bbf4 <pvPortMalloc+0x188>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4013      	ands	r3, r2
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f040 8095 	bne.w	800bbc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d01e      	beq.n	800bada <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ba9c:	2208      	movs	r2, #8
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4413      	add	r3, r2
 800baa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f003 0307 	and.w	r3, r3, #7
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d015      	beq.n	800bada <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f023 0307 	bic.w	r3, r3, #7
 800bab4:	3308      	adds	r3, #8
 800bab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f003 0307 	and.w	r3, r3, #7
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00b      	beq.n	800bada <pvPortMalloc+0x6e>
	__asm volatile
 800bac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	617b      	str	r3, [r7, #20]
}
 800bad4:	bf00      	nop
 800bad6:	bf00      	nop
 800bad8:	e7fd      	b.n	800bad6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d06f      	beq.n	800bbc0 <pvPortMalloc+0x154>
 800bae0:	4b45      	ldr	r3, [pc, #276]	@ (800bbf8 <pvPortMalloc+0x18c>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d86a      	bhi.n	800bbc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800baea:	4b44      	ldr	r3, [pc, #272]	@ (800bbfc <pvPortMalloc+0x190>)
 800baec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800baee:	4b43      	ldr	r3, [pc, #268]	@ (800bbfc <pvPortMalloc+0x190>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800baf4:	e004      	b.n	800bb00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800baf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d903      	bls.n	800bb12 <pvPortMalloc+0xa6>
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1f1      	bne.n	800baf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb12:	4b37      	ldr	r3, [pc, #220]	@ (800bbf0 <pvPortMalloc+0x184>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d051      	beq.n	800bbc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb1c:	6a3b      	ldr	r3, [r7, #32]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2208      	movs	r2, #8
 800bb22:	4413      	add	r3, r2
 800bb24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	6a3b      	ldr	r3, [r7, #32]
 800bb2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	1ad2      	subs	r2, r2, r3
 800bb36:	2308      	movs	r3, #8
 800bb38:	005b      	lsls	r3, r3, #1
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d920      	bls.n	800bb80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4413      	add	r3, r2
 800bb44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	f003 0307 	and.w	r3, r3, #7
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00b      	beq.n	800bb68 <pvPortMalloc+0xfc>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	613b      	str	r3, [r7, #16]
}
 800bb62:	bf00      	nop
 800bb64:	bf00      	nop
 800bb66:	e7fd      	b.n	800bb64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	1ad2      	subs	r2, r2, r3
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb7a:	69b8      	ldr	r0, [r7, #24]
 800bb7c:	f000 f90a 	bl	800bd94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb80:	4b1d      	ldr	r3, [pc, #116]	@ (800bbf8 <pvPortMalloc+0x18c>)
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	4a1b      	ldr	r2, [pc, #108]	@ (800bbf8 <pvPortMalloc+0x18c>)
 800bb8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb8e:	4b1a      	ldr	r3, [pc, #104]	@ (800bbf8 <pvPortMalloc+0x18c>)
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	4b1b      	ldr	r3, [pc, #108]	@ (800bc00 <pvPortMalloc+0x194>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d203      	bcs.n	800bba2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb9a:	4b17      	ldr	r3, [pc, #92]	@ (800bbf8 <pvPortMalloc+0x18c>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4a18      	ldr	r2, [pc, #96]	@ (800bc00 <pvPortMalloc+0x194>)
 800bba0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	4b13      	ldr	r3, [pc, #76]	@ (800bbf4 <pvPortMalloc+0x188>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	431a      	orrs	r2, r3
 800bbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bbb6:	4b13      	ldr	r3, [pc, #76]	@ (800bc04 <pvPortMalloc+0x198>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	4a11      	ldr	r2, [pc, #68]	@ (800bc04 <pvPortMalloc+0x198>)
 800bbbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bbc0:	f7fe fcc2 	bl	800a548 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	f003 0307 	and.w	r3, r3, #7
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00b      	beq.n	800bbe6 <pvPortMalloc+0x17a>
	__asm volatile
 800bbce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	60fb      	str	r3, [r7, #12]
}
 800bbe0:	bf00      	nop
 800bbe2:	bf00      	nop
 800bbe4:	e7fd      	b.n	800bbe2 <pvPortMalloc+0x176>
	return pvReturn;
 800bbe6:	69fb      	ldr	r3, [r7, #28]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3728      	adds	r7, #40	@ 0x28
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	200064c4 	.word	0x200064c4
 800bbf4:	200064d8 	.word	0x200064d8
 800bbf8:	200064c8 	.word	0x200064c8
 800bbfc:	200064bc 	.word	0x200064bc
 800bc00:	200064cc 	.word	0x200064cc
 800bc04:	200064d0 	.word	0x200064d0

0800bc08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d04f      	beq.n	800bcba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc1a:	2308      	movs	r3, #8
 800bc1c:	425b      	negs	r3, r3
 800bc1e:	697a      	ldr	r2, [r7, #20]
 800bc20:	4413      	add	r3, r2
 800bc22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	685a      	ldr	r2, [r3, #4]
 800bc2c:	4b25      	ldr	r3, [pc, #148]	@ (800bcc4 <vPortFree+0xbc>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4013      	ands	r3, r2
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d10b      	bne.n	800bc4e <vPortFree+0x46>
	__asm volatile
 800bc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc3a:	f383 8811 	msr	BASEPRI, r3
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	f3bf 8f4f 	dsb	sy
 800bc46:	60fb      	str	r3, [r7, #12]
}
 800bc48:	bf00      	nop
 800bc4a:	bf00      	nop
 800bc4c:	e7fd      	b.n	800bc4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00b      	beq.n	800bc6e <vPortFree+0x66>
	__asm volatile
 800bc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5a:	f383 8811 	msr	BASEPRI, r3
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	f3bf 8f4f 	dsb	sy
 800bc66:	60bb      	str	r3, [r7, #8]
}
 800bc68:	bf00      	nop
 800bc6a:	bf00      	nop
 800bc6c:	e7fd      	b.n	800bc6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	685a      	ldr	r2, [r3, #4]
 800bc72:	4b14      	ldr	r3, [pc, #80]	@ (800bcc4 <vPortFree+0xbc>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4013      	ands	r3, r2
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d01e      	beq.n	800bcba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d11a      	bne.n	800bcba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	685a      	ldr	r2, [r3, #4]
 800bc88:	4b0e      	ldr	r3, [pc, #56]	@ (800bcc4 <vPortFree+0xbc>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	43db      	mvns	r3, r3
 800bc8e:	401a      	ands	r2, r3
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc94:	f7fe fc4a 	bl	800a52c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	685a      	ldr	r2, [r3, #4]
 800bc9c:	4b0a      	ldr	r3, [pc, #40]	@ (800bcc8 <vPortFree+0xc0>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4413      	add	r3, r2
 800bca2:	4a09      	ldr	r2, [pc, #36]	@ (800bcc8 <vPortFree+0xc0>)
 800bca4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bca6:	6938      	ldr	r0, [r7, #16]
 800bca8:	f000 f874 	bl	800bd94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bcac:	4b07      	ldr	r3, [pc, #28]	@ (800bccc <vPortFree+0xc4>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	4a06      	ldr	r2, [pc, #24]	@ (800bccc <vPortFree+0xc4>)
 800bcb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bcb6:	f7fe fc47 	bl	800a548 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bcba:	bf00      	nop
 800bcbc:	3718      	adds	r7, #24
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	200064d8 	.word	0x200064d8
 800bcc8:	200064c8 	.word	0x200064c8
 800bccc:	200064d4 	.word	0x200064d4

0800bcd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcd6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800bcda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bcdc:	4b27      	ldr	r3, [pc, #156]	@ (800bd7c <prvHeapInit+0xac>)
 800bcde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f003 0307 	and.w	r3, r3, #7
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00c      	beq.n	800bd04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	3307      	adds	r3, #7
 800bcee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f023 0307 	bic.w	r3, r3, #7
 800bcf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bcf8:	68ba      	ldr	r2, [r7, #8]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	4a1f      	ldr	r2, [pc, #124]	@ (800bd7c <prvHeapInit+0xac>)
 800bd00:	4413      	add	r3, r2
 800bd02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd08:	4a1d      	ldr	r2, [pc, #116]	@ (800bd80 <prvHeapInit+0xb0>)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd0e:	4b1c      	ldr	r3, [pc, #112]	@ (800bd80 <prvHeapInit+0xb0>)
 800bd10:	2200      	movs	r2, #0
 800bd12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	4413      	add	r3, r2
 800bd1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd1c:	2208      	movs	r2, #8
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	1a9b      	subs	r3, r3, r2
 800bd22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f023 0307 	bic.w	r3, r3, #7
 800bd2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	4a15      	ldr	r2, [pc, #84]	@ (800bd84 <prvHeapInit+0xb4>)
 800bd30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd32:	4b14      	ldr	r3, [pc, #80]	@ (800bd84 <prvHeapInit+0xb4>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2200      	movs	r2, #0
 800bd38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd3a:	4b12      	ldr	r3, [pc, #72]	@ (800bd84 <prvHeapInit+0xb4>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	1ad2      	subs	r2, r2, r3
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd50:	4b0c      	ldr	r3, [pc, #48]	@ (800bd84 <prvHeapInit+0xb4>)
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	4a0a      	ldr	r2, [pc, #40]	@ (800bd88 <prvHeapInit+0xb8>)
 800bd5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	4a09      	ldr	r2, [pc, #36]	@ (800bd8c <prvHeapInit+0xbc>)
 800bd66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd68:	4b09      	ldr	r3, [pc, #36]	@ (800bd90 <prvHeapInit+0xc0>)
 800bd6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bd6e:	601a      	str	r2, [r3, #0]
}
 800bd70:	bf00      	nop
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	200058bc 	.word	0x200058bc
 800bd80:	200064bc 	.word	0x200064bc
 800bd84:	200064c4 	.word	0x200064c4
 800bd88:	200064cc 	.word	0x200064cc
 800bd8c:	200064c8 	.word	0x200064c8
 800bd90:	200064d8 	.word	0x200064d8

0800bd94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd9c:	4b28      	ldr	r3, [pc, #160]	@ (800be40 <prvInsertBlockIntoFreeList+0xac>)
 800bd9e:	60fb      	str	r3, [r7, #12]
 800bda0:	e002      	b.n	800bda8 <prvInsertBlockIntoFreeList+0x14>
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	60fb      	str	r3, [r7, #12]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d8f7      	bhi.n	800bda2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d108      	bne.n	800bdd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	685a      	ldr	r2, [r3, #4]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	441a      	add	r2, r3
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	68ba      	ldr	r2, [r7, #8]
 800bde0:	441a      	add	r2, r3
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d118      	bne.n	800be1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	4b15      	ldr	r3, [pc, #84]	@ (800be44 <prvInsertBlockIntoFreeList+0xb0>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d00d      	beq.n	800be12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	685a      	ldr	r2, [r3, #4]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	441a      	add	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	601a      	str	r2, [r3, #0]
 800be10:	e008      	b.n	800be24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be12:	4b0c      	ldr	r3, [pc, #48]	@ (800be44 <prvInsertBlockIntoFreeList+0xb0>)
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	601a      	str	r2, [r3, #0]
 800be1a:	e003      	b.n	800be24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d002      	beq.n	800be32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be32:	bf00      	nop
 800be34:	3714      	adds	r7, #20
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	200064bc 	.word	0x200064bc
 800be44:	200064c4 	.word	0x200064c4

0800be48 <rcl_get_zero_initialized_init_options>:
 800be48:	2000      	movs	r0, #0
 800be4a:	4770      	bx	lr

0800be4c <rcl_init_options_init>:
 800be4c:	b084      	sub	sp, #16
 800be4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be50:	b097      	sub	sp, #92	@ 0x5c
 800be52:	ae1d      	add	r6, sp, #116	@ 0x74
 800be54:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800be58:	2800      	cmp	r0, #0
 800be5a:	d058      	beq.n	800bf0e <rcl_init_options_init+0xc2>
 800be5c:	6803      	ldr	r3, [r0, #0]
 800be5e:	4605      	mov	r5, r0
 800be60:	b133      	cbz	r3, 800be70 <rcl_init_options_init+0x24>
 800be62:	2464      	movs	r4, #100	@ 0x64
 800be64:	4620      	mov	r0, r4
 800be66:	b017      	add	sp, #92	@ 0x5c
 800be68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800be6c:	b004      	add	sp, #16
 800be6e:	4770      	bx	lr
 800be70:	4630      	mov	r0, r6
 800be72:	f001 f92f 	bl	800d0d4 <rcutils_allocator_is_valid>
 800be76:	2800      	cmp	r0, #0
 800be78:	d049      	beq.n	800bf0e <rcl_init_options_init+0xc2>
 800be7a:	46b4      	mov	ip, r6
 800be7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800be80:	ac11      	add	r4, sp, #68	@ 0x44
 800be82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be84:	f8dc 3000 	ldr.w	r3, [ip]
 800be88:	6023      	str	r3, [r4, #0]
 800be8a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800be8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800be8e:	2050      	movs	r0, #80	@ 0x50
 800be90:	4798      	blx	r3
 800be92:	4604      	mov	r4, r0
 800be94:	6028      	str	r0, [r5, #0]
 800be96:	2800      	cmp	r0, #0
 800be98:	d03b      	beq.n	800bf12 <rcl_init_options_init+0xc6>
 800be9a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800be9e:	4686      	mov	lr, r0
 800bea0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bea4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bea8:	f8dc 3000 	ldr.w	r3, [ip]
 800beac:	f8ce 3000 	str.w	r3, [lr]
 800beb0:	a802      	add	r0, sp, #8
 800beb2:	f001 f9a1 	bl	800d1f8 <rmw_get_zero_initialized_init_options>
 800beb6:	f10d 0e08 	add.w	lr, sp, #8
 800beba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bebe:	f104 0c18 	add.w	ip, r4, #24
 800bec2:	682f      	ldr	r7, [r5, #0]
 800bec4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bec8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800becc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bed0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bed4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bed8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bedc:	ac20      	add	r4, sp, #128	@ 0x80
 800bede:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bee2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bee6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800beea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800beee:	f107 0018 	add.w	r0, r7, #24
 800bef2:	f001 f9af 	bl	800d254 <rmw_init_options_init>
 800bef6:	4604      	mov	r4, r0
 800bef8:	2800      	cmp	r0, #0
 800befa:	d0b3      	beq.n	800be64 <rcl_init_options_init+0x18>
 800befc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800befe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800bf00:	6828      	ldr	r0, [r5, #0]
 800bf02:	4798      	blx	r3
 800bf04:	4620      	mov	r0, r4
 800bf06:	f007 fbb5 	bl	8013674 <rcl_convert_rmw_ret_to_rcl_ret>
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	e7aa      	b.n	800be64 <rcl_init_options_init+0x18>
 800bf0e:	240b      	movs	r4, #11
 800bf10:	e7a8      	b.n	800be64 <rcl_init_options_init+0x18>
 800bf12:	240a      	movs	r4, #10
 800bf14:	e7a6      	b.n	800be64 <rcl_init_options_init+0x18>
 800bf16:	bf00      	nop

0800bf18 <rcl_init_options_fini>:
 800bf18:	b530      	push	{r4, r5, lr}
 800bf1a:	b087      	sub	sp, #28
 800bf1c:	b1f0      	cbz	r0, 800bf5c <rcl_init_options_fini+0x44>
 800bf1e:	6803      	ldr	r3, [r0, #0]
 800bf20:	4604      	mov	r4, r0
 800bf22:	b1db      	cbz	r3, 800bf5c <rcl_init_options_fini+0x44>
 800bf24:	469c      	mov	ip, r3
 800bf26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bf2a:	f10d 0e04 	add.w	lr, sp, #4
 800bf2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bf32:	f8dc 3000 	ldr.w	r3, [ip]
 800bf36:	f8ce 3000 	str.w	r3, [lr]
 800bf3a:	a801      	add	r0, sp, #4
 800bf3c:	f001 f8ca 	bl	800d0d4 <rcutils_allocator_is_valid>
 800bf40:	b160      	cbz	r0, 800bf5c <rcl_init_options_fini+0x44>
 800bf42:	6820      	ldr	r0, [r4, #0]
 800bf44:	3018      	adds	r0, #24
 800bf46:	f001 fa5b 	bl	800d400 <rmw_init_options_fini>
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	b950      	cbnz	r0, 800bf64 <rcl_init_options_fini+0x4c>
 800bf4e:	6820      	ldr	r0, [r4, #0]
 800bf50:	9b02      	ldr	r3, [sp, #8]
 800bf52:	9905      	ldr	r1, [sp, #20]
 800bf54:	4798      	blx	r3
 800bf56:	4628      	mov	r0, r5
 800bf58:	b007      	add	sp, #28
 800bf5a:	bd30      	pop	{r4, r5, pc}
 800bf5c:	250b      	movs	r5, #11
 800bf5e:	4628      	mov	r0, r5
 800bf60:	b007      	add	sp, #28
 800bf62:	bd30      	pop	{r4, r5, pc}
 800bf64:	f007 fb86 	bl	8013674 <rcl_convert_rmw_ret_to_rcl_ret>
 800bf68:	4605      	mov	r5, r0
 800bf6a:	e7f8      	b.n	800bf5e <rcl_init_options_fini+0x46>

0800bf6c <rcl_init_options_copy>:
 800bf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf70:	b094      	sub	sp, #80	@ 0x50
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d058      	beq.n	800c028 <rcl_init_options_copy+0xbc>
 800bf76:	4604      	mov	r4, r0
 800bf78:	6800      	ldr	r0, [r0, #0]
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d054      	beq.n	800c028 <rcl_init_options_copy+0xbc>
 800bf7e:	460e      	mov	r6, r1
 800bf80:	f001 f8a8 	bl	800d0d4 <rcutils_allocator_is_valid>
 800bf84:	2800      	cmp	r0, #0
 800bf86:	d04f      	beq.n	800c028 <rcl_init_options_copy+0xbc>
 800bf88:	2e00      	cmp	r6, #0
 800bf8a:	d04d      	beq.n	800c028 <rcl_init_options_copy+0xbc>
 800bf8c:	6833      	ldr	r3, [r6, #0]
 800bf8e:	b123      	cbz	r3, 800bf9a <rcl_init_options_copy+0x2e>
 800bf90:	2464      	movs	r4, #100	@ 0x64
 800bf92:	4620      	mov	r0, r4
 800bf94:	b014      	add	sp, #80	@ 0x50
 800bf96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf9a:	6827      	ldr	r7, [r4, #0]
 800bf9c:	46bc      	mov	ip, r7
 800bf9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfa2:	ad0f      	add	r5, sp, #60	@ 0x3c
 800bfa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfa6:	f8dc 3000 	ldr.w	r3, [ip]
 800bfaa:	f8d7 8000 	ldr.w	r8, [r7]
 800bfae:	602b      	str	r3, [r5, #0]
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	2050      	movs	r0, #80	@ 0x50
 800bfb4:	47c0      	blx	r8
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	6030      	str	r0, [r6, #0]
 800bfba:	b3d0      	cbz	r0, 800c032 <rcl_init_options_copy+0xc6>
 800bfbc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800bfc0:	4686      	mov	lr, r0
 800bfc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bfca:	f8dc 3000 	ldr.w	r3, [ip]
 800bfce:	f8ce 3000 	str.w	r3, [lr]
 800bfd2:	4668      	mov	r0, sp
 800bfd4:	f001 f910 	bl	800d1f8 <rmw_get_zero_initialized_init_options>
 800bfd8:	46ee      	mov	lr, sp
 800bfda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bfde:	f105 0c18 	add.w	ip, r5, #24
 800bfe2:	6824      	ldr	r4, [r4, #0]
 800bfe4:	6835      	ldr	r5, [r6, #0]
 800bfe6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bfea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bfee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bff2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bff6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bffa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bffe:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c002:	f104 0018 	add.w	r0, r4, #24
 800c006:	f105 0118 	add.w	r1, r5, #24
 800c00a:	f001 f985 	bl	800d318 <rmw_init_options_copy>
 800c00e:	4604      	mov	r4, r0
 800c010:	2800      	cmp	r0, #0
 800c012:	d0be      	beq.n	800bf92 <rcl_init_options_copy+0x26>
 800c014:	f001 f86c 	bl	800d0f0 <rcutils_get_error_string>
 800c018:	f001 f882 	bl	800d120 <rcutils_reset_error>
 800c01c:	4630      	mov	r0, r6
 800c01e:	f7ff ff7b 	bl	800bf18 <rcl_init_options_fini>
 800c022:	b140      	cbz	r0, 800c036 <rcl_init_options_copy+0xca>
 800c024:	4604      	mov	r4, r0
 800c026:	e7b4      	b.n	800bf92 <rcl_init_options_copy+0x26>
 800c028:	240b      	movs	r4, #11
 800c02a:	4620      	mov	r0, r4
 800c02c:	b014      	add	sp, #80	@ 0x50
 800c02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c032:	240a      	movs	r4, #10
 800c034:	e7ad      	b.n	800bf92 <rcl_init_options_copy+0x26>
 800c036:	4620      	mov	r0, r4
 800c038:	b014      	add	sp, #80	@ 0x50
 800c03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c03e:	f007 bb19 	b.w	8013674 <rcl_convert_rmw_ret_to_rcl_ret>
 800c042:	bf00      	nop

0800c044 <rcl_init_options_set_domain_id>:
 800c044:	b120      	cbz	r0, 800c050 <rcl_init_options_set_domain_id+0xc>
 800c046:	6803      	ldr	r3, [r0, #0]
 800c048:	b113      	cbz	r3, 800c050 <rcl_init_options_set_domain_id+0xc>
 800c04a:	6259      	str	r1, [r3, #36]	@ 0x24
 800c04c:	2000      	movs	r0, #0
 800c04e:	4770      	bx	lr
 800c050:	200b      	movs	r0, #11
 800c052:	4770      	bx	lr

0800c054 <rcl_get_zero_initialized_publisher>:
 800c054:	4b01      	ldr	r3, [pc, #4]	@ (800c05c <rcl_get_zero_initialized_publisher+0x8>)
 800c056:	6818      	ldr	r0, [r3, #0]
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop
 800c05c:	0801a594 	.word	0x0801a594

0800c060 <rcl_publisher_init>:
 800c060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c064:	b088      	sub	sp, #32
 800c066:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c068:	2d00      	cmp	r5, #0
 800c06a:	d069      	beq.n	800c140 <rcl_publisher_init+0xe0>
 800c06c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c070:	4604      	mov	r4, r0
 800c072:	4648      	mov	r0, r9
 800c074:	460e      	mov	r6, r1
 800c076:	4690      	mov	r8, r2
 800c078:	461f      	mov	r7, r3
 800c07a:	f001 f82b 	bl	800d0d4 <rcutils_allocator_is_valid>
 800c07e:	2800      	cmp	r0, #0
 800c080:	d05e      	beq.n	800c140 <rcl_publisher_init+0xe0>
 800c082:	2c00      	cmp	r4, #0
 800c084:	d05c      	beq.n	800c140 <rcl_publisher_init+0xe0>
 800c086:	f8d4 a000 	ldr.w	sl, [r4]
 800c08a:	f1ba 0f00 	cmp.w	sl, #0
 800c08e:	d004      	beq.n	800c09a <rcl_publisher_init+0x3a>
 800c090:	2764      	movs	r7, #100	@ 0x64
 800c092:	4638      	mov	r0, r7
 800c094:	b008      	add	sp, #32
 800c096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c09a:	4630      	mov	r0, r6
 800c09c:	f007 fdce 	bl	8013c3c <rcl_node_is_valid>
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	d052      	beq.n	800c14a <rcl_publisher_init+0xea>
 800c0a4:	f1b8 0f00 	cmp.w	r8, #0
 800c0a8:	d04a      	beq.n	800c140 <rcl_publisher_init+0xe0>
 800c0aa:	2f00      	cmp	r7, #0
 800c0ac:	d048      	beq.n	800c140 <rcl_publisher_init+0xe0>
 800c0ae:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c0b2:	aa07      	add	r2, sp, #28
 800c0b4:	9205      	str	r2, [sp, #20]
 800c0b6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c0ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0be:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c0c2:	f8cd a01c 	str.w	sl, [sp, #28]
 800c0c6:	4639      	mov	r1, r7
 800c0c8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	f007 fe09 	bl	8013ce4 <rcl_node_resolve_name>
 800c0d2:	4607      	mov	r7, r0
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d14f      	bne.n	800c178 <rcl_publisher_init+0x118>
 800c0d8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c0da:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c0dc:	20c8      	movs	r0, #200	@ 0xc8
 800c0de:	4798      	blx	r3
 800c0e0:	6020      	str	r0, [r4, #0]
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d04e      	beq.n	800c184 <rcl_publisher_init+0x124>
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	f007 fdca 	bl	8013c80 <rcl_node_get_rmw_handle>
 800c0ec:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c0f0:	9300      	str	r3, [sp, #0]
 800c0f2:	9a07      	ldr	r2, [sp, #28]
 800c0f4:	6827      	ldr	r7, [r4, #0]
 800c0f6:	462b      	mov	r3, r5
 800c0f8:	4641      	mov	r1, r8
 800c0fa:	f001 fcad 	bl	800da58 <rmw_create_publisher>
 800c0fe:	6823      	ldr	r3, [r4, #0]
 800c100:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c104:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c108:	b370      	cbz	r0, 800c168 <rcl_publisher_init+0x108>
 800c10a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c10e:	f001 fd81 	bl	800dc14 <rmw_publisher_get_actual_qos>
 800c112:	6823      	ldr	r3, [r4, #0]
 800c114:	4607      	mov	r7, r0
 800c116:	b9d0      	cbnz	r0, 800c14e <rcl_publisher_init+0xee>
 800c118:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c11c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c120:	4629      	mov	r1, r5
 800c122:	2270      	movs	r2, #112	@ 0x70
 800c124:	4618      	mov	r0, r3
 800c126:	f00d fb64 	bl	80197f2 <memcpy>
 800c12a:	6832      	ldr	r2, [r6, #0]
 800c12c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c130:	9807      	ldr	r0, [sp, #28]
 800c132:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c134:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c136:	4798      	blx	r3
 800c138:	4638      	mov	r0, r7
 800c13a:	b008      	add	sp, #32
 800c13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c140:	270b      	movs	r7, #11
 800c142:	4638      	mov	r0, r7
 800c144:	b008      	add	sp, #32
 800c146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14a:	27c8      	movs	r7, #200	@ 0xc8
 800c14c:	e7a1      	b.n	800c092 <rcl_publisher_init+0x32>
 800c14e:	b18b      	cbz	r3, 800c174 <rcl_publisher_init+0x114>
 800c150:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c154:	b142      	cbz	r2, 800c168 <rcl_publisher_init+0x108>
 800c156:	4630      	mov	r0, r6
 800c158:	f007 fd92 	bl	8013c80 <rcl_node_get_rmw_handle>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c162:	f001 fd67 	bl	800dc34 <rmw_destroy_publisher>
 800c166:	6823      	ldr	r3, [r4, #0]
 800c168:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c16a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c16c:	4618      	mov	r0, r3
 800c16e:	4790      	blx	r2
 800c170:	2300      	movs	r3, #0
 800c172:	6023      	str	r3, [r4, #0]
 800c174:	2701      	movs	r7, #1
 800c176:	e7db      	b.n	800c130 <rcl_publisher_init+0xd0>
 800c178:	2867      	cmp	r0, #103	@ 0x67
 800c17a:	d0d9      	beq.n	800c130 <rcl_publisher_init+0xd0>
 800c17c:	2869      	cmp	r0, #105	@ 0x69
 800c17e:	d003      	beq.n	800c188 <rcl_publisher_init+0x128>
 800c180:	280a      	cmp	r0, #10
 800c182:	d1f7      	bne.n	800c174 <rcl_publisher_init+0x114>
 800c184:	270a      	movs	r7, #10
 800c186:	e7d3      	b.n	800c130 <rcl_publisher_init+0xd0>
 800c188:	2767      	movs	r7, #103	@ 0x67
 800c18a:	e7d1      	b.n	800c130 <rcl_publisher_init+0xd0>

0800c18c <rcl_publisher_get_default_options>:
 800c18c:	b570      	push	{r4, r5, r6, lr}
 800c18e:	4d14      	ldr	r5, [pc, #80]	@ (800c1e0 <rcl_publisher_get_default_options+0x54>)
 800c190:	4914      	ldr	r1, [pc, #80]	@ (800c1e4 <rcl_publisher_get_default_options+0x58>)
 800c192:	b088      	sub	sp, #32
 800c194:	4604      	mov	r4, r0
 800c196:	2250      	movs	r2, #80	@ 0x50
 800c198:	4628      	mov	r0, r5
 800c19a:	f00d fb2a 	bl	80197f2 <memcpy>
 800c19e:	a802      	add	r0, sp, #8
 800c1a0:	f000 ff8a 	bl	800d0b8 <rcutils_get_default_allocator>
 800c1a4:	f10d 0c08 	add.w	ip, sp, #8
 800c1a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c1ac:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c1b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c1b4:	466e      	mov	r6, sp
 800c1b6:	f8dc 3000 	ldr.w	r3, [ip]
 800c1ba:	f8ce 3000 	str.w	r3, [lr]
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f001 f82a 	bl	800d218 <rmw_get_default_publisher_options>
 800c1c4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c1c8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c1cc:	e883 0003 	stmia.w	r3, {r0, r1}
 800c1d0:	2270      	movs	r2, #112	@ 0x70
 800c1d2:	4629      	mov	r1, r5
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f00d fb0c 	bl	80197f2 <memcpy>
 800c1da:	4620      	mov	r0, r4
 800c1dc:	b008      	add	sp, #32
 800c1de:	bd70      	pop	{r4, r5, r6, pc}
 800c1e0:	200064e0 	.word	0x200064e0
 800c1e4:	0801a598 	.word	0x0801a598

0800c1e8 <rcl_publish>:
 800c1e8:	b1f8      	cbz	r0, 800c22a <rcl_publish+0x42>
 800c1ea:	6803      	ldr	r3, [r0, #0]
 800c1ec:	b570      	push	{r4, r5, r6, lr}
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	b1b3      	cbz	r3, 800c220 <rcl_publish+0x38>
 800c1f2:	4616      	mov	r6, r2
 800c1f4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c1f8:	b192      	cbz	r2, 800c220 <rcl_publish+0x38>
 800c1fa:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c1fe:	460d      	mov	r5, r1
 800c200:	f007 fa56 	bl	80136b0 <rcl_context_is_valid>
 800c204:	b160      	cbz	r0, 800c220 <rcl_publish+0x38>
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c20c:	b140      	cbz	r0, 800c220 <rcl_publish+0x38>
 800c20e:	b155      	cbz	r5, 800c226 <rcl_publish+0x3e>
 800c210:	4632      	mov	r2, r6
 800c212:	4629      	mov	r1, r5
 800c214:	f001 fbc0 	bl	800d998 <rmw_publish>
 800c218:	3800      	subs	r0, #0
 800c21a:	bf18      	it	ne
 800c21c:	2001      	movne	r0, #1
 800c21e:	bd70      	pop	{r4, r5, r6, pc}
 800c220:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c224:	bd70      	pop	{r4, r5, r6, pc}
 800c226:	200b      	movs	r0, #11
 800c228:	bd70      	pop	{r4, r5, r6, pc}
 800c22a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c22e:	4770      	bx	lr

0800c230 <rcl_publisher_is_valid>:
 800c230:	b1a0      	cbz	r0, 800c25c <rcl_publisher_is_valid+0x2c>
 800c232:	6803      	ldr	r3, [r0, #0]
 800c234:	b510      	push	{r4, lr}
 800c236:	4604      	mov	r4, r0
 800c238:	b173      	cbz	r3, 800c258 <rcl_publisher_is_valid+0x28>
 800c23a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c23e:	b15a      	cbz	r2, 800c258 <rcl_publisher_is_valid+0x28>
 800c240:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c244:	f007 fa34 	bl	80136b0 <rcl_context_is_valid>
 800c248:	b130      	cbz	r0, 800c258 <rcl_publisher_is_valid+0x28>
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c250:	3800      	subs	r0, #0
 800c252:	bf18      	it	ne
 800c254:	2001      	movne	r0, #1
 800c256:	bd10      	pop	{r4, pc}
 800c258:	2000      	movs	r0, #0
 800c25a:	bd10      	pop	{r4, pc}
 800c25c:	2000      	movs	r0, #0
 800c25e:	4770      	bx	lr

0800c260 <rcl_publisher_is_valid_except_context>:
 800c260:	b130      	cbz	r0, 800c270 <rcl_publisher_is_valid_except_context+0x10>
 800c262:	6800      	ldr	r0, [r0, #0]
 800c264:	b120      	cbz	r0, 800c270 <rcl_publisher_is_valid_except_context+0x10>
 800c266:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c26a:	3800      	subs	r0, #0
 800c26c:	bf18      	it	ne
 800c26e:	2001      	movne	r0, #1
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop

0800c274 <_rclc_check_for_new_data>:
 800c274:	2800      	cmp	r0, #0
 800c276:	d046      	beq.n	800c306 <_rclc_check_for_new_data+0x92>
 800c278:	b510      	push	{r4, lr}
 800c27a:	7802      	ldrb	r2, [r0, #0]
 800c27c:	b084      	sub	sp, #16
 800c27e:	4603      	mov	r3, r0
 800c280:	2a0a      	cmp	r2, #10
 800c282:	d842      	bhi.n	800c30a <_rclc_check_for_new_data+0x96>
 800c284:	e8df f002 	tbb	[pc, r2]
 800c288:	14181212 	.word	0x14181212
 800c28c:	06060614 	.word	0x06060614
 800c290:	2e1a      	.short	0x2e1a
 800c292:	16          	.byte	0x16
 800c293:	00          	.byte	0x00
 800c294:	6a0a      	ldr	r2, [r1, #32]
 800c296:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c298:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c29c:	2000      	movs	r0, #0
 800c29e:	1a12      	subs	r2, r2, r0
 800c2a0:	bf18      	it	ne
 800c2a2:	2201      	movne	r2, #1
 800c2a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c2a8:	b004      	add	sp, #16
 800c2aa:	bd10      	pop	{r4, pc}
 800c2ac:	680a      	ldr	r2, [r1, #0]
 800c2ae:	e7f2      	b.n	800c296 <_rclc_check_for_new_data+0x22>
 800c2b0:	698a      	ldr	r2, [r1, #24]
 800c2b2:	e7f0      	b.n	800c296 <_rclc_check_for_new_data+0x22>
 800c2b4:	688a      	ldr	r2, [r1, #8]
 800c2b6:	e7ee      	b.n	800c296 <_rclc_check_for_new_data+0x22>
 800c2b8:	690a      	ldr	r2, [r1, #16]
 800c2ba:	e7ec      	b.n	800c296 <_rclc_check_for_new_data+0x22>
 800c2bc:	685c      	ldr	r4, [r3, #4]
 800c2be:	4608      	mov	r0, r1
 800c2c0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c2c4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c2c8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c2cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c2d6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c2da:	f104 0110 	add.w	r1, r4, #16
 800c2de:	f009 f997 	bl	8015610 <rcl_action_client_wait_set_get_entities_ready>
 800c2e2:	e7e1      	b.n	800c2a8 <_rclc_check_for_new_data+0x34>
 800c2e4:	685c      	ldr	r4, [r3, #4]
 800c2e6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c2ea:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c2ee:	e9cd 3200 	strd	r3, r2, [sp]
 800c2f2:	4608      	mov	r0, r1
 800c2f4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c2f8:	f104 0220 	add.w	r2, r4, #32
 800c2fc:	f104 0110 	add.w	r1, r4, #16
 800c300:	f009 fb9e 	bl	8015a40 <rcl_action_server_wait_set_get_entities_ready>
 800c304:	e7d0      	b.n	800c2a8 <_rclc_check_for_new_data+0x34>
 800c306:	200b      	movs	r0, #11
 800c308:	4770      	bx	lr
 800c30a:	2001      	movs	r0, #1
 800c30c:	e7cc      	b.n	800c2a8 <_rclc_check_for_new_data+0x34>
 800c30e:	bf00      	nop

0800c310 <_rclc_take_new_data>:
 800c310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c312:	b09b      	sub	sp, #108	@ 0x6c
 800c314:	2800      	cmp	r0, #0
 800c316:	f000 8088 	beq.w	800c42a <_rclc_take_new_data+0x11a>
 800c31a:	7803      	ldrb	r3, [r0, #0]
 800c31c:	4604      	mov	r4, r0
 800c31e:	2b0a      	cmp	r3, #10
 800c320:	f200 8167 	bhi.w	800c5f2 <_rclc_take_new_data+0x2e2>
 800c324:	e8df f003 	tbb	[pc, r3]
 800c328:	44152d2d 	.word	0x44152d2d
 800c32c:	19191944 	.word	0x19191944
 800c330:	065a      	.short	0x065a
 800c332:	15          	.byte	0x15
 800c333:	00          	.byte	0x00
 800c334:	6840      	ldr	r0, [r0, #4]
 800c336:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f040 80b2 	bne.w	800c4a4 <_rclc_take_new_data+0x194>
 800c340:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c344:	2b00      	cmp	r3, #0
 800c346:	f040 80e4 	bne.w	800c512 <_rclc_take_new_data+0x202>
 800c34a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d16f      	bne.n	800c432 <_rclc_take_new_data+0x122>
 800c352:	2500      	movs	r5, #0
 800c354:	4628      	mov	r0, r5
 800c356:	b01b      	add	sp, #108	@ 0x6c
 800c358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c35a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c35c:	6a0b      	ldr	r3, [r1, #32]
 800c35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0f5      	beq.n	800c352 <_rclc_take_new_data+0x42>
 800c366:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c36a:	f104 0110 	add.w	r1, r4, #16
 800c36e:	f007 fd67 	bl	8013e40 <rcl_take_request>
 800c372:	4605      	mov	r5, r0
 800c374:	2800      	cmp	r0, #0
 800c376:	d0ec      	beq.n	800c352 <_rclc_take_new_data+0x42>
 800c378:	f240 2359 	movw	r3, #601	@ 0x259
 800c37c:	4298      	cmp	r0, r3
 800c37e:	d013      	beq.n	800c3a8 <_rclc_take_new_data+0x98>
 800c380:	e029      	b.n	800c3d6 <_rclc_take_new_data+0xc6>
 800c382:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c384:	680b      	ldr	r3, [r1, #0]
 800c386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d0e1      	beq.n	800c352 <_rclc_take_new_data+0x42>
 800c38e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c392:	2300      	movs	r3, #0
 800c394:	aa0a      	add	r2, sp, #40	@ 0x28
 800c396:	f007 fdb5 	bl	8013f04 <rcl_take>
 800c39a:	4605      	mov	r5, r0
 800c39c:	2800      	cmp	r0, #0
 800c39e:	d0d9      	beq.n	800c354 <_rclc_take_new_data+0x44>
 800c3a0:	f240 1391 	movw	r3, #401	@ 0x191
 800c3a4:	4298      	cmp	r0, r3
 800c3a6:	d116      	bne.n	800c3d6 <_rclc_take_new_data+0xc6>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c3ae:	e7d1      	b.n	800c354 <_rclc_take_new_data+0x44>
 800c3b0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c3b2:	698b      	ldr	r3, [r1, #24]
 800c3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d0ca      	beq.n	800c352 <_rclc_take_new_data+0x42>
 800c3bc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c3c0:	f104 0110 	add.w	r1, r4, #16
 800c3c4:	f007 f904 	bl	80135d0 <rcl_take_response>
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d0c1      	beq.n	800c352 <_rclc_take_new_data+0x42>
 800c3ce:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c3d2:	4298      	cmp	r0, r3
 800c3d4:	d0be      	beq.n	800c354 <_rclc_take_new_data+0x44>
 800c3d6:	f000 fea3 	bl	800d120 <rcutils_reset_error>
 800c3da:	e7bb      	b.n	800c354 <_rclc_take_new_data+0x44>
 800c3dc:	6840      	ldr	r0, [r0, #4]
 800c3de:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d17d      	bne.n	800c4e2 <_rclc_take_new_data+0x1d2>
 800c3e6:	69c3      	ldr	r3, [r0, #28]
 800c3e8:	b11b      	cbz	r3, 800c3f2 <_rclc_take_new_data+0xe2>
 800c3ea:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d144      	bne.n	800c47c <_rclc_take_new_data+0x16c>
 800c3f2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f040 80ac 	bne.w	800c554 <_rclc_take_new_data+0x244>
 800c3fc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c400:	2b00      	cmp	r3, #0
 800c402:	d0a6      	beq.n	800c352 <_rclc_take_new_data+0x42>
 800c404:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c406:	a90a      	add	r1, sp, #40	@ 0x28
 800c408:	3010      	adds	r0, #16
 800c40a:	f008 ffd9 	bl	80153c0 <rcl_action_take_result_response>
 800c40e:	4605      	mov	r5, r0
 800c410:	2800      	cmp	r0, #0
 800c412:	d1e0      	bne.n	800c3d6 <_rclc_take_new_data+0xc6>
 800c414:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c418:	6860      	ldr	r0, [r4, #4]
 800c41a:	f009 fc35 	bl	8015c88 <rclc_action_find_handle_by_result_request_sequence_number>
 800c41e:	2800      	cmp	r0, #0
 800c420:	d098      	beq.n	800c354 <_rclc_take_new_data+0x44>
 800c422:	2301      	movs	r3, #1
 800c424:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c428:	e794      	b.n	800c354 <_rclc_take_new_data+0x44>
 800c42a:	250b      	movs	r5, #11
 800c42c:	4628      	mov	r0, r5
 800c42e:	b01b      	add	sp, #108	@ 0x6c
 800c430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c432:	ae04      	add	r6, sp, #16
 800c434:	aa0a      	add	r2, sp, #40	@ 0x28
 800c436:	3010      	adds	r0, #16
 800c438:	4631      	mov	r1, r6
 800c43a:	f009 fa35 	bl	80158a8 <rcl_action_take_cancel_request>
 800c43e:	4605      	mov	r5, r0
 800c440:	2800      	cmp	r0, #0
 800c442:	d1c8      	bne.n	800c3d6 <_rclc_take_new_data+0xc6>
 800c444:	6860      	ldr	r0, [r4, #4]
 800c446:	a90a      	add	r1, sp, #40	@ 0x28
 800c448:	f009 fbdc 	bl	8015c04 <rclc_action_find_goal_handle_by_uuid>
 800c44c:	4607      	mov	r7, r0
 800c44e:	2800      	cmp	r0, #0
 800c450:	f000 80bb 	beq.w	800c5ca <_rclc_take_new_data+0x2ba>
 800c454:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c458:	2101      	movs	r1, #1
 800c45a:	f009 fb5d 	bl	8015b18 <rcl_action_transition_goal_state>
 800c45e:	2803      	cmp	r0, #3
 800c460:	4684      	mov	ip, r0
 800c462:	f040 80a7 	bne.w	800c5b4 <_rclc_take_new_data+0x2a4>
 800c466:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c468:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c46c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c46e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c472:	e884 0003 	stmia.w	r4, {r0, r1}
 800c476:	f887 c008 	strb.w	ip, [r7, #8]
 800c47a:	e76b      	b.n	800c354 <_rclc_take_new_data+0x44>
 800c47c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c47e:	3010      	adds	r0, #16
 800c480:	f009 f81e 	bl	80154c0 <rcl_action_take_feedback>
 800c484:	4605      	mov	r5, r0
 800c486:	2800      	cmp	r0, #0
 800c488:	d1a5      	bne.n	800c3d6 <_rclc_take_new_data+0xc6>
 800c48a:	6860      	ldr	r0, [r4, #4]
 800c48c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c48e:	f009 fbb9 	bl	8015c04 <rclc_action_find_goal_handle_by_uuid>
 800c492:	4603      	mov	r3, r0
 800c494:	2800      	cmp	r0, #0
 800c496:	f000 80a3 	beq.w	800c5e0 <_rclc_take_new_data+0x2d0>
 800c49a:	2201      	movs	r2, #1
 800c49c:	6860      	ldr	r0, [r4, #4]
 800c49e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c4a2:	e7a6      	b.n	800c3f2 <_rclc_take_new_data+0xe2>
 800c4a4:	f009 fb88 	bl	8015bb8 <rclc_action_take_goal_handle>
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	6860      	ldr	r0, [r4, #4]
 800c4ac:	2e00      	cmp	r6, #0
 800c4ae:	f43f af47 	beq.w	800c340 <_rclc_take_new_data+0x30>
 800c4b2:	6070      	str	r0, [r6, #4]
 800c4b4:	69f2      	ldr	r2, [r6, #28]
 800c4b6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c4ba:	3010      	adds	r0, #16
 800c4bc:	f009 f93c 	bl	8015738 <rcl_action_take_goal_request>
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	f040 808e 	bne.w	800c5e4 <_rclc_take_new_data+0x2d4>
 800c4c8:	69f7      	ldr	r7, [r6, #28]
 800c4ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c4cc:	7235      	strb	r5, [r6, #8]
 800c4ce:	f8c6 0009 	str.w	r0, [r6, #9]
 800c4d2:	f8c6 100d 	str.w	r1, [r6, #13]
 800c4d6:	6860      	ldr	r0, [r4, #4]
 800c4d8:	f8c6 2011 	str.w	r2, [r6, #17]
 800c4dc:	f8c6 3015 	str.w	r3, [r6, #21]
 800c4e0:	e72e      	b.n	800c340 <_rclc_take_new_data+0x30>
 800c4e2:	aa04      	add	r2, sp, #16
 800c4e4:	a90a      	add	r1, sp, #40	@ 0x28
 800c4e6:	3010      	adds	r0, #16
 800c4e8:	f008 fef2 	bl	80152d0 <rcl_action_take_goal_response>
 800c4ec:	4605      	mov	r5, r0
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	f47f af71 	bne.w	800c3d6 <_rclc_take_new_data+0xc6>
 800c4f4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4f8:	6860      	ldr	r0, [r4, #4]
 800c4fa:	f009 fbb3 	bl	8015c64 <rclc_action_find_handle_by_goal_request_sequence_number>
 800c4fe:	b130      	cbz	r0, 800c50e <_rclc_take_new_data+0x1fe>
 800c500:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c504:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c508:	2201      	movs	r2, #1
 800c50a:	f880 2020 	strb.w	r2, [r0, #32]
 800c50e:	6860      	ldr	r0, [r4, #4]
 800c510:	e769      	b.n	800c3e6 <_rclc_take_new_data+0xd6>
 800c512:	aa04      	add	r2, sp, #16
 800c514:	3010      	adds	r0, #16
 800c516:	a90a      	add	r1, sp, #40	@ 0x28
 800c518:	f009 f986 	bl	8015828 <rcl_action_take_result_request>
 800c51c:	4605      	mov	r5, r0
 800c51e:	2800      	cmp	r0, #0
 800c520:	f47f af59 	bne.w	800c3d6 <_rclc_take_new_data+0xc6>
 800c524:	6860      	ldr	r0, [r4, #4]
 800c526:	a904      	add	r1, sp, #16
 800c528:	f009 fb6c 	bl	8015c04 <rclc_action_find_goal_handle_by_uuid>
 800c52c:	4607      	mov	r7, r0
 800c52e:	b160      	cbz	r0, 800c54a <_rclc_take_new_data+0x23a>
 800c530:	ad0a      	add	r5, sp, #40	@ 0x28
 800c532:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c538:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c53a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c53e:	f04f 0c02 	mov.w	ip, #2
 800c542:	e886 0003 	stmia.w	r6, {r0, r1}
 800c546:	f887 c008 	strb.w	ip, [r7, #8]
 800c54a:	6860      	ldr	r0, [r4, #4]
 800c54c:	2300      	movs	r3, #0
 800c54e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c552:	e6fa      	b.n	800c34a <_rclc_take_new_data+0x3a>
 800c554:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c558:	a90a      	add	r1, sp, #40	@ 0x28
 800c55a:	3010      	adds	r0, #16
 800c55c:	f008 ff70 	bl	8015440 <rcl_action_take_cancel_response>
 800c560:	4605      	mov	r5, r0
 800c562:	2800      	cmp	r0, #0
 800c564:	f47f af37 	bne.w	800c3d6 <_rclc_take_new_data+0xc6>
 800c568:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c56c:	6860      	ldr	r0, [r4, #4]
 800c56e:	f009 fb9d 	bl	8015cac <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c572:	4606      	mov	r6, r0
 800c574:	6860      	ldr	r0, [r4, #4]
 800c576:	2e00      	cmp	r6, #0
 800c578:	f43f af40 	beq.w	800c3fc <_rclc_take_new_data+0xec>
 800c57c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c57e:	2701      	movs	r7, #1
 800c580:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c582:	2b00      	cmp	r3, #0
 800c584:	f43f af3a 	beq.w	800c3fc <_rclc_take_new_data+0xec>
 800c588:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c58a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c58e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c592:	f009 fb37 	bl	8015c04 <rclc_action_find_goal_handle_by_uuid>
 800c596:	b138      	cbz	r0, 800c5a8 <_rclc_take_new_data+0x298>
 800c598:	6860      	ldr	r0, [r4, #4]
 800c59a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c59c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c5a0:	3501      	adds	r5, #1
 800c5a2:	42ab      	cmp	r3, r5
 800c5a4:	d8f0      	bhi.n	800c588 <_rclc_take_new_data+0x278>
 800c5a6:	e729      	b.n	800c3fc <_rclc_take_new_data+0xec>
 800c5a8:	6860      	ldr	r0, [r4, #4]
 800c5aa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c5ac:	3501      	adds	r5, #1
 800c5ae:	42ab      	cmp	r3, r5
 800c5b0:	d8ea      	bhi.n	800c588 <_rclc_take_new_data+0x278>
 800c5b2:	e723      	b.n	800c3fc <_rclc_take_new_data+0xec>
 800c5b4:	ab06      	add	r3, sp, #24
 800c5b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c5b8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c5bc:	2103      	movs	r1, #3
 800c5be:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c5c2:	6860      	ldr	r0, [r4, #4]
 800c5c4:	f009 fbe8 	bl	8015d98 <rclc_action_server_goal_cancel_reject>
 800c5c8:	e6c4      	b.n	800c354 <_rclc_take_new_data+0x44>
 800c5ca:	ab06      	add	r3, sp, #24
 800c5cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c5ce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c5d2:	2102      	movs	r1, #2
 800c5d4:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c5d8:	6860      	ldr	r0, [r4, #4]
 800c5da:	f009 fbdd 	bl	8015d98 <rclc_action_server_goal_cancel_reject>
 800c5de:	e6b9      	b.n	800c354 <_rclc_take_new_data+0x44>
 800c5e0:	6860      	ldr	r0, [r4, #4]
 800c5e2:	e706      	b.n	800c3f2 <_rclc_take_new_data+0xe2>
 800c5e4:	6860      	ldr	r0, [r4, #4]
 800c5e6:	4631      	mov	r1, r6
 800c5e8:	f009 faf6 	bl	8015bd8 <rclc_action_remove_used_goal_handle>
 800c5ec:	f000 fd98 	bl	800d120 <rcutils_reset_error>
 800c5f0:	e6b0      	b.n	800c354 <_rclc_take_new_data+0x44>
 800c5f2:	2501      	movs	r5, #1
 800c5f4:	e6ae      	b.n	800c354 <_rclc_take_new_data+0x44>
 800c5f6:	bf00      	nop

0800c5f8 <_rclc_execute.part.0>:
 800c5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5fa:	7803      	ldrb	r3, [r0, #0]
 800c5fc:	b087      	sub	sp, #28
 800c5fe:	4604      	mov	r4, r0
 800c600:	2b0a      	cmp	r3, #10
 800c602:	f200 8136 	bhi.w	800c872 <_rclc_execute.part.0+0x27a>
 800c606:	e8df f003 	tbb	[pc, r3]
 800c60a:	435e      	.short	0x435e
 800c60c:	06a1664f 	.word	0x06a1664f
 800c610:	6c1e0606 	.word	0x6c1e0606
 800c614:	59          	.byte	0x59
 800c615:	00          	.byte	0x00
 800c616:	2b06      	cmp	r3, #6
 800c618:	f000 8122 	beq.w	800c860 <_rclc_execute.part.0+0x268>
 800c61c:	2b07      	cmp	r3, #7
 800c61e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c620:	f040 8118 	bne.w	800c854 <_rclc_execute.part.0+0x25c>
 800c624:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c628:	6880      	ldr	r0, [r0, #8]
 800c62a:	4798      	blx	r3
 800c62c:	f104 0110 	add.w	r1, r4, #16
 800c630:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c632:	6860      	ldr	r0, [r4, #4]
 800c634:	f007 fc44 	bl	8013ec0 <rcl_send_response>
 800c638:	2800      	cmp	r0, #0
 800c63a:	d033      	beq.n	800c6a4 <_rclc_execute.part.0+0xac>
 800c63c:	9005      	str	r0, [sp, #20]
 800c63e:	f000 fd6f 	bl	800d120 <rcutils_reset_error>
 800c642:	9805      	ldr	r0, [sp, #20]
 800c644:	e02e      	b.n	800c6a4 <_rclc_execute.part.0+0xac>
 800c646:	6840      	ldr	r0, [r0, #4]
 800c648:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	f000 8086 	beq.w	800c75e <_rclc_execute.part.0+0x166>
 800c652:	2600      	movs	r6, #0
 800c654:	2701      	movs	r7, #1
 800c656:	e004      	b.n	800c662 <_rclc_execute.part.0+0x6a>
 800c658:	f009 fa88 	bl	8015b6c <rclc_action_send_result_request>
 800c65c:	b998      	cbnz	r0, 800c686 <_rclc_execute.part.0+0x8e>
 800c65e:	722f      	strb	r7, [r5, #8]
 800c660:	6860      	ldr	r0, [r4, #4]
 800c662:	f009 fb35 	bl	8015cd0 <rclc_action_find_first_handle_with_goal_response>
 800c666:	4605      	mov	r5, r0
 800c668:	2800      	cmp	r0, #0
 800c66a:	d077      	beq.n	800c75c <_rclc_execute.part.0+0x164>
 800c66c:	6863      	ldr	r3, [r4, #4]
 800c66e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c670:	699b      	ldr	r3, [r3, #24]
 800c672:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c676:	f885 6020 	strb.w	r6, [r5, #32]
 800c67a:	4798      	blx	r3
 800c67c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c680:	4628      	mov	r0, r5
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1e8      	bne.n	800c658 <_rclc_execute.part.0+0x60>
 800c686:	6860      	ldr	r0, [r4, #4]
 800c688:	4629      	mov	r1, r5
 800c68a:	f009 faa5 	bl	8015bd8 <rclc_action_remove_used_goal_handle>
 800c68e:	e7e7      	b.n	800c660 <_rclc_execute.part.0+0x68>
 800c690:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c694:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c698:	2d00      	cmp	r5, #0
 800c69a:	f000 80c9 	beq.w	800c830 <_rclc_execute.part.0+0x238>
 800c69e:	6880      	ldr	r0, [r0, #8]
 800c6a0:	4798      	blx	r3
 800c6a2:	2000      	movs	r0, #0
 800c6a4:	b007      	add	sp, #28
 800c6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a8:	6840      	ldr	r0, [r0, #4]
 800c6aa:	f007 ff3b 	bl	8014524 <rcl_timer_call>
 800c6ae:	f240 3321 	movw	r3, #801	@ 0x321
 800c6b2:	4298      	cmp	r0, r3
 800c6b4:	d004      	beq.n	800c6c0 <_rclc_execute.part.0+0xc8>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	d0f4      	beq.n	800c6a4 <_rclc_execute.part.0+0xac>
 800c6ba:	e7bf      	b.n	800c63c <_rclc_execute.part.0+0x44>
 800c6bc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c6be:	4798      	blx	r3
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	b007      	add	sp, #28
 800c6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6c6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c6ca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c6cc:	b925      	cbnz	r5, 800c6d8 <_rclc_execute.part.0+0xe0>
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	4798      	blx	r3
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	e7e6      	b.n	800c6a4 <_rclc_execute.part.0+0xac>
 800c6d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c6d8:	68a0      	ldr	r0, [r4, #8]
 800c6da:	4798      	blx	r3
 800c6dc:	2000      	movs	r0, #0
 800c6de:	b007      	add	sp, #28
 800c6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6e2:	6840      	ldr	r0, [r0, #4]
 800c6e4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c6e8:	bb3b      	cbnz	r3, 800c73a <_rclc_execute.part.0+0x142>
 800c6ea:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d07b      	beq.n	800c7ea <_rclc_execute.part.0+0x1f2>
 800c6f2:	f640 0634 	movw	r6, #2100	@ 0x834
 800c6f6:	2701      	movs	r7, #1
 800c6f8:	e007      	b.n	800c70a <_rclc_execute.part.0+0x112>
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	f009 fb00 	bl	8015d00 <rclc_action_server_response_goal_request>
 800c700:	6860      	ldr	r0, [r4, #4]
 800c702:	4629      	mov	r1, r5
 800c704:	f009 fa68 	bl	8015bd8 <rclc_action_remove_used_goal_handle>
 800c708:	6860      	ldr	r0, [r4, #4]
 800c70a:	2100      	movs	r1, #0
 800c70c:	f009 fa92 	bl	8015c34 <rclc_action_find_first_handle_by_status>
 800c710:	4605      	mov	r5, r0
 800c712:	2800      	cmp	r0, #0
 800c714:	d066      	beq.n	800c7e4 <_rclc_execute.part.0+0x1ec>
 800c716:	6863      	ldr	r3, [r4, #4]
 800c718:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	4798      	blx	r3
 800c71e:	42b0      	cmp	r0, r6
 800c720:	f04f 0100 	mov.w	r1, #0
 800c724:	d1e9      	bne.n	800c6fa <_rclc_execute.part.0+0x102>
 800c726:	2101      	movs	r1, #1
 800c728:	4628      	mov	r0, r5
 800c72a:	f009 fae9 	bl	8015d00 <rclc_action_server_response_goal_request>
 800c72e:	722f      	strb	r7, [r5, #8]
 800c730:	e7ea      	b.n	800c708 <_rclc_execute.part.0+0x110>
 800c732:	6848      	ldr	r0, [r1, #4]
 800c734:	f009 fa50 	bl	8015bd8 <rclc_action_remove_used_goal_handle>
 800c738:	6860      	ldr	r0, [r4, #4]
 800c73a:	f009 fa87 	bl	8015c4c <rclc_action_find_first_terminated_handle>
 800c73e:	4601      	mov	r1, r0
 800c740:	2800      	cmp	r0, #0
 800c742:	d1f6      	bne.n	800c732 <_rclc_execute.part.0+0x13a>
 800c744:	6860      	ldr	r0, [r4, #4]
 800c746:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c74a:	e7ce      	b.n	800c6ea <_rclc_execute.part.0+0xf2>
 800c74c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c74e:	6880      	ldr	r0, [r0, #8]
 800c750:	f104 0110 	add.w	r1, r4, #16
 800c754:	4798      	blx	r3
 800c756:	2000      	movs	r0, #0
 800c758:	b007      	add	sp, #28
 800c75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c75c:	6860      	ldr	r0, [r4, #4]
 800c75e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c762:	b18b      	cbz	r3, 800c788 <_rclc_execute.part.0+0x190>
 800c764:	68c5      	ldr	r5, [r0, #12]
 800c766:	b32d      	cbz	r5, 800c7b4 <_rclc_execute.part.0+0x1bc>
 800c768:	2600      	movs	r6, #0
 800c76a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c76e:	b143      	cbz	r3, 800c782 <_rclc_execute.part.0+0x18a>
 800c770:	69c3      	ldr	r3, [r0, #28]
 800c772:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c776:	b123      	cbz	r3, 800c782 <_rclc_execute.part.0+0x18a>
 800c778:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c77a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c77c:	4628      	mov	r0, r5
 800c77e:	4798      	blx	r3
 800c780:	6860      	ldr	r0, [r4, #4]
 800c782:	682d      	ldr	r5, [r5, #0]
 800c784:	2d00      	cmp	r5, #0
 800c786:	d1f0      	bne.n	800c76a <_rclc_execute.part.0+0x172>
 800c788:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c78c:	b193      	cbz	r3, 800c7b4 <_rclc_execute.part.0+0x1bc>
 800c78e:	68c5      	ldr	r5, [r0, #12]
 800c790:	b185      	cbz	r5, 800c7b4 <_rclc_execute.part.0+0x1bc>
 800c792:	2600      	movs	r6, #0
 800c794:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c798:	b14b      	cbz	r3, 800c7ae <_rclc_execute.part.0+0x1b6>
 800c79a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c79c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c7a0:	b12b      	cbz	r3, 800c7ae <_rclc_execute.part.0+0x1b6>
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c7a8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c7aa:	4798      	blx	r3
 800c7ac:	6860      	ldr	r0, [r4, #4]
 800c7ae:	682d      	ldr	r5, [r5, #0]
 800c7b0:	2d00      	cmp	r5, #0
 800c7b2:	d1ef      	bne.n	800c794 <_rclc_execute.part.0+0x19c>
 800c7b4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d081      	beq.n	800c6c0 <_rclc_execute.part.0+0xc8>
 800c7bc:	2700      	movs	r7, #0
 800c7be:	e00b      	b.n	800c7d8 <_rclc_execute.part.0+0x1e0>
 800c7c0:	6863      	ldr	r3, [r4, #4]
 800c7c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c7c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c7c6:	6a1e      	ldr	r6, [r3, #32]
 800c7c8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c7cc:	47b0      	blx	r6
 800c7ce:	6860      	ldr	r0, [r4, #4]
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	f009 fa01 	bl	8015bd8 <rclc_action_remove_used_goal_handle>
 800c7d6:	6860      	ldr	r0, [r4, #4]
 800c7d8:	f009 fa86 	bl	8015ce8 <rclc_action_find_first_handle_with_result_response>
 800c7dc:	4605      	mov	r5, r0
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d1ee      	bne.n	800c7c0 <_rclc_execute.part.0+0x1c8>
 800c7e2:	e76d      	b.n	800c6c0 <_rclc_execute.part.0+0xc8>
 800c7e4:	6860      	ldr	r0, [r4, #4]
 800c7e6:	f880 5020 	strb.w	r5, [r0, #32]
 800c7ea:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f43f af66 	beq.w	800c6c0 <_rclc_execute.part.0+0xc8>
 800c7f4:	68c5      	ldr	r5, [r0, #12]
 800c7f6:	b1b5      	cbz	r5, 800c826 <_rclc_execute.part.0+0x22e>
 800c7f8:	2602      	movs	r6, #2
 800c7fa:	e001      	b.n	800c800 <_rclc_execute.part.0+0x208>
 800c7fc:	682d      	ldr	r5, [r5, #0]
 800c7fe:	b195      	cbz	r5, 800c826 <_rclc_execute.part.0+0x22e>
 800c800:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c804:	2b03      	cmp	r3, #3
 800c806:	d1f9      	bne.n	800c7fc <_rclc_execute.part.0+0x204>
 800c808:	69c3      	ldr	r3, [r0, #28]
 800c80a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c80c:	4628      	mov	r0, r5
 800c80e:	4798      	blx	r3
 800c810:	4603      	mov	r3, r0
 800c812:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c816:	4628      	mov	r0, r5
 800c818:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c81c:	b163      	cbz	r3, 800c838 <_rclc_execute.part.0+0x240>
 800c81e:	f009 fa8f 	bl	8015d40 <rclc_action_server_goal_cancel_accept>
 800c822:	6860      	ldr	r0, [r4, #4]
 800c824:	e7ea      	b.n	800c7fc <_rclc_execute.part.0+0x204>
 800c826:	2300      	movs	r3, #0
 800c828:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c82c:	4618      	mov	r0, r3
 800c82e:	e739      	b.n	800c6a4 <_rclc_execute.part.0+0xac>
 800c830:	4628      	mov	r0, r5
 800c832:	4798      	blx	r3
 800c834:	4628      	mov	r0, r5
 800c836:	e735      	b.n	800c6a4 <_rclc_execute.part.0+0xac>
 800c838:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c83a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c83e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c842:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c846:	6860      	ldr	r0, [r4, #4]
 800c848:	2101      	movs	r1, #1
 800c84a:	f009 faa5 	bl	8015d98 <rclc_action_server_goal_cancel_reject>
 800c84e:	722e      	strb	r6, [r5, #8]
 800c850:	6860      	ldr	r0, [r4, #4]
 800c852:	e7d3      	b.n	800c7fc <_rclc_execute.part.0+0x204>
 800c854:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c856:	6880      	ldr	r0, [r0, #8]
 800c858:	4798      	blx	r3
 800c85a:	f104 0110 	add.w	r1, r4, #16
 800c85e:	e6e7      	b.n	800c630 <_rclc_execute.part.0+0x38>
 800c860:	f100 0110 	add.w	r1, r0, #16
 800c864:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c866:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c868:	6880      	ldr	r0, [r0, #8]
 800c86a:	9105      	str	r1, [sp, #20]
 800c86c:	4798      	blx	r3
 800c86e:	9905      	ldr	r1, [sp, #20]
 800c870:	e6de      	b.n	800c630 <_rclc_execute.part.0+0x38>
 800c872:	2001      	movs	r0, #1
 800c874:	e716      	b.n	800c6a4 <_rclc_execute.part.0+0xac>
 800c876:	bf00      	nop

0800c878 <rclc_executor_trigger_any>:
 800c878:	2800      	cmp	r0, #0
 800c87a:	d03f      	beq.n	800c8fc <rclc_executor_trigger_any+0x84>
 800c87c:	2900      	cmp	r1, #0
 800c87e:	d03e      	beq.n	800c8fe <rclc_executor_trigger_any+0x86>
 800c880:	4603      	mov	r3, r0
 800c882:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c886:	2200      	movs	r2, #0
 800c888:	2800      	cmp	r0, #0
 800c88a:	d037      	beq.n	800c8fc <rclc_executor_trigger_any+0x84>
 800c88c:	b430      	push	{r4, r5}
 800c88e:	f893 c000 	ldrb.w	ip, [r3]
 800c892:	f1bc 0f08 	cmp.w	ip, #8
 800c896:	d11e      	bne.n	800c8d6 <rclc_executor_trigger_any+0x5e>
 800c898:	685c      	ldr	r4, [r3, #4]
 800c89a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c89c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c8a0:	d105      	bne.n	800c8ae <rclc_executor_trigger_any+0x36>
 800c8a2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c8a6:	b910      	cbnz	r0, 800c8ae <rclc_executor_trigger_any+0x36>
 800c8a8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c8ac:	b128      	cbz	r0, 800c8ba <rclc_executor_trigger_any+0x42>
 800c8ae:	bc30      	pop	{r4, r5}
 800c8b0:	4770      	bx	lr
 800c8b2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d1f9      	bne.n	800c8ae <rclc_executor_trigger_any+0x36>
 800c8ba:	3201      	adds	r2, #1
 800c8bc:	4291      	cmp	r1, r2
 800c8be:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c8c2:	d018      	beq.n	800c8f6 <rclc_executor_trigger_any+0x7e>
 800c8c4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	d0f0      	beq.n	800c8ae <rclc_executor_trigger_any+0x36>
 800c8cc:	f893 c000 	ldrb.w	ip, [r3]
 800c8d0:	f1bc 0f08 	cmp.w	ip, #8
 800c8d4:	d0e0      	beq.n	800c898 <rclc_executor_trigger_any+0x20>
 800c8d6:	f1bc 0f09 	cmp.w	ip, #9
 800c8da:	d1ea      	bne.n	800c8b2 <rclc_executor_trigger_any+0x3a>
 800c8dc:	685c      	ldr	r4, [r3, #4]
 800c8de:	6a25      	ldr	r5, [r4, #32]
 800c8e0:	2d00      	cmp	r5, #0
 800c8e2:	d1e4      	bne.n	800c8ae <rclc_executor_trigger_any+0x36>
 800c8e4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d1e0      	bne.n	800c8ae <rclc_executor_trigger_any+0x36>
 800c8ec:	3201      	adds	r2, #1
 800c8ee:	4291      	cmp	r1, r2
 800c8f0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c8f4:	d1e6      	bne.n	800c8c4 <rclc_executor_trigger_any+0x4c>
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	bc30      	pop	{r4, r5}
 800c8fa:	4770      	bx	lr
 800c8fc:	4770      	bx	lr
 800c8fe:	4608      	mov	r0, r1
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop

0800c904 <rclc_executor_get_zero_initialized_executor>:
 800c904:	b510      	push	{r4, lr}
 800c906:	4903      	ldr	r1, [pc, #12]	@ (800c914 <rclc_executor_get_zero_initialized_executor+0x10>)
 800c908:	4604      	mov	r4, r0
 800c90a:	2288      	movs	r2, #136	@ 0x88
 800c90c:	f00c ff71 	bl	80197f2 <memcpy>
 800c910:	4620      	mov	r0, r4
 800c912:	bd10      	pop	{r4, pc}
 800c914:	0801a5e8 	.word	0x0801a5e8

0800c918 <rclc_executor_init>:
 800c918:	2800      	cmp	r0, #0
 800c91a:	d05f      	beq.n	800c9dc <rclc_executor_init+0xc4>
 800c91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c920:	460c      	mov	r4, r1
 800c922:	b0b0      	sub	sp, #192	@ 0xc0
 800c924:	2900      	cmp	r1, #0
 800c926:	d051      	beq.n	800c9cc <rclc_executor_init+0xb4>
 800c928:	4605      	mov	r5, r0
 800c92a:	4618      	mov	r0, r3
 800c92c:	4616      	mov	r6, r2
 800c92e:	461f      	mov	r7, r3
 800c930:	f000 fbd0 	bl	800d0d4 <rcutils_allocator_is_valid>
 800c934:	2800      	cmp	r0, #0
 800c936:	d049      	beq.n	800c9cc <rclc_executor_init+0xb4>
 800c938:	2e00      	cmp	r6, #0
 800c93a:	d047      	beq.n	800c9cc <rclc_executor_init+0xb4>
 800c93c:	492c      	ldr	r1, [pc, #176]	@ (800c9f0 <rclc_executor_init+0xd8>)
 800c93e:	2288      	movs	r2, #136	@ 0x88
 800c940:	a80e      	add	r0, sp, #56	@ 0x38
 800c942:	f00c ff56 	bl	80197f2 <memcpy>
 800c946:	a90e      	add	r1, sp, #56	@ 0x38
 800c948:	2288      	movs	r2, #136	@ 0x88
 800c94a:	4628      	mov	r0, r5
 800c94c:	f00c ff51 	bl	80197f2 <memcpy>
 800c950:	602c      	str	r4, [r5, #0]
 800c952:	4668      	mov	r0, sp
 800c954:	60ae      	str	r6, [r5, #8]
 800c956:	466c      	mov	r4, sp
 800c958:	f007 feec 	bl	8014734 <rcl_get_zero_initialized_wait_set>
 800c95c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c95e:	f105 0c14 	add.w	ip, r5, #20
 800c962:	f8d7 8000 	ldr.w	r8, [r7]
 800c966:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c96a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c96c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c972:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c976:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c9e8 <rclc_executor_init+0xd0>
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	f8cc 3000 	str.w	r3, [ip]
 800c980:	6939      	ldr	r1, [r7, #16]
 800c982:	612f      	str	r7, [r5, #16]
 800c984:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c988:	01b0      	lsls	r0, r6, #6
 800c98a:	47c0      	blx	r8
 800c98c:	6068      	str	r0, [r5, #4]
 800c98e:	b338      	cbz	r0, 800c9e0 <rclc_executor_init+0xc8>
 800c990:	2400      	movs	r4, #0
 800c992:	e000      	b.n	800c996 <rclc_executor_init+0x7e>
 800c994:	6868      	ldr	r0, [r5, #4]
 800c996:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c99a:	4631      	mov	r1, r6
 800c99c:	3401      	adds	r4, #1
 800c99e:	f000 fa6b 	bl	800ce78 <rclc_executor_handle_init>
 800c9a2:	42a6      	cmp	r6, r4
 800c9a4:	d1f6      	bne.n	800c994 <rclc_executor_init+0x7c>
 800c9a6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c9aa:	f000 fa59 	bl	800ce60 <rclc_executor_handle_counters_zero_init>
 800c9ae:	4a11      	ldr	r2, [pc, #68]	@ (800c9f4 <rclc_executor_init+0xdc>)
 800c9b0:	686b      	ldr	r3, [r5, #4]
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c9b8:	b163      	cbz	r3, 800c9d4 <rclc_executor_init+0xbc>
 800c9ba:	692b      	ldr	r3, [r5, #16]
 800c9bc:	b153      	cbz	r3, 800c9d4 <rclc_executor_init+0xbc>
 800c9be:	68ab      	ldr	r3, [r5, #8]
 800c9c0:	b143      	cbz	r3, 800c9d4 <rclc_executor_init+0xbc>
 800c9c2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c9c6:	b030      	add	sp, #192	@ 0xc0
 800c9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9cc:	200b      	movs	r0, #11
 800c9ce:	b030      	add	sp, #192	@ 0xc0
 800c9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	b030      	add	sp, #192	@ 0xc0
 800c9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9dc:	200b      	movs	r0, #11
 800c9de:	4770      	bx	lr
 800c9e0:	200a      	movs	r0, #10
 800c9e2:	e7f4      	b.n	800c9ce <rclc_executor_init+0xb6>
 800c9e4:	f3af 8000 	nop.w
 800c9e8:	3b9aca00 	.word	0x3b9aca00
 800c9ec:	00000000 	.word	0x00000000
 800c9f0:	0801a5e8 	.word	0x0801a5e8
 800c9f4:	0800c879 	.word	0x0800c879

0800c9f8 <rclc_executor_add_timer>:
 800c9f8:	b300      	cbz	r0, 800ca3c <rclc_executor_add_timer+0x44>
 800c9fa:	b1f9      	cbz	r1, 800ca3c <rclc_executor_add_timer+0x44>
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ca02:	4293      	cmp	r3, r2
 800ca04:	4604      	mov	r4, r0
 800ca06:	d301      	bcc.n	800ca0c <rclc_executor_add_timer+0x14>
 800ca08:	2001      	movs	r0, #1
 800ca0a:	bd38      	pop	{r3, r4, r5, pc}
 800ca0c:	6840      	ldr	r0, [r0, #4]
 800ca0e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ca12:	019d      	lsls	r5, r3, #6
 800ca14:	6051      	str	r1, [r2, #4]
 800ca16:	2102      	movs	r1, #2
 800ca18:	5341      	strh	r1, [r0, r5]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	2101      	movs	r1, #1
 800ca20:	f104 0514 	add.w	r5, r4, #20
 800ca24:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800ca26:	8711      	strh	r1, [r2, #56]	@ 0x38
 800ca28:	4628      	mov	r0, r5
 800ca2a:	60e3      	str	r3, [r4, #12]
 800ca2c:	f007 fe96 	bl	801475c <rcl_wait_set_is_valid>
 800ca30:	b930      	cbnz	r0, 800ca40 <rclc_executor_add_timer+0x48>
 800ca32:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ca34:	3301      	adds	r3, #1
 800ca36:	2000      	movs	r0, #0
 800ca38:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800ca3a:	bd38      	pop	{r3, r4, r5, pc}
 800ca3c:	200b      	movs	r0, #11
 800ca3e:	4770      	bx	lr
 800ca40:	4628      	mov	r0, r5
 800ca42:	f007 fe91 	bl	8014768 <rcl_wait_set_fini>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d0f3      	beq.n	800ca32 <rclc_executor_add_timer+0x3a>
 800ca4a:	bd38      	pop	{r3, r4, r5, pc}

0800ca4c <rclc_executor_prepare>:
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	d044      	beq.n	800cada <rclc_executor_prepare+0x8e>
 800ca50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca52:	f100 0514 	add.w	r5, r0, #20
 800ca56:	b09b      	sub	sp, #108	@ 0x6c
 800ca58:	4604      	mov	r4, r0
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	f007 fe7e 	bl	801475c <rcl_wait_set_is_valid>
 800ca60:	b110      	cbz	r0, 800ca68 <rclc_executor_prepare+0x1c>
 800ca62:	2000      	movs	r0, #0
 800ca64:	b01b      	add	sp, #108	@ 0x6c
 800ca66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f007 fe7d 	bl	8014768 <rcl_wait_set_fini>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d130      	bne.n	800cad4 <rclc_executor_prepare+0x88>
 800ca72:	a80c      	add	r0, sp, #48	@ 0x30
 800ca74:	f007 fe5e 	bl	8014734 <rcl_get_zero_initialized_wait_set>
 800ca78:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ca7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca80:	46ae      	mov	lr, r5
 800ca82:	6927      	ldr	r7, [r4, #16]
 800ca84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca94:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca98:	f8dc 3000 	ldr.w	r3, [ip]
 800ca9c:	f8ce 3000 	str.w	r3, [lr]
 800caa0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800caa2:	ae04      	add	r6, sp, #16
 800caa4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	6822      	ldr	r2, [r4, #0]
 800caaa:	6033      	str	r3, [r6, #0]
 800caac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800caae:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800cab0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800cab4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800cab8:	e9cd 2100 	strd	r2, r1, [sp]
 800cabc:	4628      	mov	r0, r5
 800cabe:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800cac0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cac2:	f008 f94f 	bl	8014d64 <rcl_wait_set_init>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	d0cc      	beq.n	800ca64 <rclc_executor_prepare+0x18>
 800caca:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cacc:	f000 fb28 	bl	800d120 <rcutils_reset_error>
 800cad0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cad2:	e7c7      	b.n	800ca64 <rclc_executor_prepare+0x18>
 800cad4:	f000 fb24 	bl	800d120 <rcutils_reset_error>
 800cad8:	e7cb      	b.n	800ca72 <rclc_executor_prepare+0x26>
 800cada:	200b      	movs	r0, #11
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop

0800cae0 <rclc_executor_spin_some.part.0>:
 800cae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae4:	f100 0614 	add.w	r6, r0, #20
 800cae8:	b083      	sub	sp, #12
 800caea:	4691      	mov	r9, r2
 800caec:	4698      	mov	r8, r3
 800caee:	4605      	mov	r5, r0
 800caf0:	f7ff ffac 	bl	800ca4c <rclc_executor_prepare>
 800caf4:	4630      	mov	r0, r6
 800caf6:	f007 ff03 	bl	8014900 <rcl_wait_set_clear>
 800cafa:	4607      	mov	r7, r0
 800cafc:	2800      	cmp	r0, #0
 800cafe:	f040 80ed 	bne.w	800ccdc <rclc_executor_spin_some.part.0+0x1fc>
 800cb02:	68ab      	ldr	r3, [r5, #8]
 800cb04:	4604      	mov	r4, r0
 800cb06:	b303      	cbz	r3, 800cb4a <rclc_executor_spin_some.part.0+0x6a>
 800cb08:	6869      	ldr	r1, [r5, #4]
 800cb0a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800cb0e:	01a2      	lsls	r2, r4, #6
 800cb10:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800cb14:	b1cb      	cbz	r3, 800cb4a <rclc_executor_spin_some.part.0+0x6a>
 800cb16:	5c8b      	ldrb	r3, [r1, r2]
 800cb18:	2b0a      	cmp	r3, #10
 800cb1a:	f200 80d8 	bhi.w	800ccce <rclc_executor_spin_some.part.0+0x1ee>
 800cb1e:	e8df f003 	tbb	[pc, r3]
 800cb22:	9c9c      	.short	0x9c9c
 800cb24:	068c8ca7 	.word	0x068c8ca7
 800cb28:	bdc90606 	.word	0xbdc90606
 800cb2c:	b2          	.byte	0xb2
 800cb2d:	00          	.byte	0x00
 800cb2e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cb32:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cb36:	4630      	mov	r0, r6
 800cb38:	f008 fa2a 	bl	8014f90 <rcl_wait_set_add_service>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	f040 8086 	bne.w	800cc4e <rclc_executor_spin_some.part.0+0x16e>
 800cb42:	68ab      	ldr	r3, [r5, #8]
 800cb44:	3401      	adds	r4, #1
 800cb46:	429c      	cmp	r4, r3
 800cb48:	d3de      	bcc.n	800cb08 <rclc_executor_spin_some.part.0+0x28>
 800cb4a:	4643      	mov	r3, r8
 800cb4c:	464a      	mov	r2, r9
 800cb4e:	4630      	mov	r0, r6
 800cb50:	f008 fa4a 	bl	8014fe8 <rcl_wait>
 800cb54:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f000 80c7 	beq.w	800ccec <rclc_executor_spin_some.part.0+0x20c>
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	f040 80b5 	bne.w	800ccce <rclc_executor_spin_some.part.0+0x1ee>
 800cb64:	68ab      	ldr	r3, [r5, #8]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f000 8159 	beq.w	800ce1e <rclc_executor_spin_some.part.0+0x33e>
 800cb6c:	2400      	movs	r4, #0
 800cb6e:	46a0      	mov	r8, r4
 800cb70:	f240 1991 	movw	r9, #401	@ 0x191
 800cb74:	e00a      	b.n	800cb8c <rclc_executor_spin_some.part.0+0xac>
 800cb76:	f7ff fb7d 	bl	800c274 <_rclc_check_for_new_data>
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	b110      	cbz	r0, 800cb84 <rclc_executor_spin_some.part.0+0xa4>
 800cb7e:	4548      	cmp	r0, r9
 800cb80:	f040 80b2 	bne.w	800cce8 <rclc_executor_spin_some.part.0+0x208>
 800cb84:	68ab      	ldr	r3, [r5, #8]
 800cb86:	4598      	cmp	r8, r3
 800cb88:	f080 8126 	bcs.w	800cdd8 <rclc_executor_spin_some.part.0+0x2f8>
 800cb8c:	686a      	ldr	r2, [r5, #4]
 800cb8e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cb92:	4631      	mov	r1, r6
 800cb94:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cb98:	f108 0801 	add.w	r8, r8, #1
 800cb9c:	f1bc 0f00 	cmp.w	ip, #0
 800cba0:	d1e9      	bne.n	800cb76 <rclc_executor_spin_some.part.0+0x96>
 800cba2:	4619      	mov	r1, r3
 800cba4:	4610      	mov	r0, r2
 800cba6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cbaa:	4798      	blx	r3
 800cbac:	2800      	cmp	r0, #0
 800cbae:	f000 809b 	beq.w	800cce8 <rclc_executor_spin_some.part.0+0x208>
 800cbb2:	68ab      	ldr	r3, [r5, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f000 8097 	beq.w	800cce8 <rclc_executor_spin_some.part.0+0x208>
 800cbba:	f04f 0800 	mov.w	r8, #0
 800cbbe:	f240 1991 	movw	r9, #401	@ 0x191
 800cbc2:	e009      	b.n	800cbd8 <rclc_executor_spin_some.part.0+0xf8>
 800cbc4:	f7ff fba4 	bl	800c310 <_rclc_take_new_data>
 800cbc8:	4604      	mov	r4, r0
 800cbca:	b110      	cbz	r0, 800cbd2 <rclc_executor_spin_some.part.0+0xf2>
 800cbcc:	4548      	cmp	r0, r9
 800cbce:	f040 808b 	bne.w	800cce8 <rclc_executor_spin_some.part.0+0x208>
 800cbd2:	68ab      	ldr	r3, [r5, #8]
 800cbd4:	4598      	cmp	r8, r3
 800cbd6:	d209      	bcs.n	800cbec <rclc_executor_spin_some.part.0+0x10c>
 800cbd8:	6868      	ldr	r0, [r5, #4]
 800cbda:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cbde:	4631      	mov	r1, r6
 800cbe0:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800cbe4:	f108 0801 	add.w	r8, r8, #1
 800cbe8:	2a00      	cmp	r2, #0
 800cbea:	d1eb      	bne.n	800cbc4 <rclc_executor_spin_some.part.0+0xe4>
 800cbec:	2600      	movs	r6, #0
 800cbee:	b97b      	cbnz	r3, 800cc10 <rclc_executor_spin_some.part.0+0x130>
 800cbf0:	e07a      	b.n	800cce8 <rclc_executor_spin_some.part.0+0x208>
 800cbf2:	f812 200c 	ldrb.w	r2, [r2, ip]
 800cbf6:	2a08      	cmp	r2, #8
 800cbf8:	f000 80fd 	beq.w	800cdf6 <rclc_executor_spin_some.part.0+0x316>
 800cbfc:	2a09      	cmp	r2, #9
 800cbfe:	f000 80ef 	beq.w	800cde0 <rclc_executor_spin_some.part.0+0x300>
 800cc02:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800cc06:	b98a      	cbnz	r2, 800cc2c <rclc_executor_spin_some.part.0+0x14c>
 800cc08:	3601      	adds	r6, #1
 800cc0a:	429e      	cmp	r6, r3
 800cc0c:	d262      	bcs.n	800ccd4 <rclc_executor_spin_some.part.0+0x1f4>
 800cc0e:	2400      	movs	r4, #0
 800cc10:	686a      	ldr	r2, [r5, #4]
 800cc12:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800cc16:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800cc1a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800cc1e:	2900      	cmp	r1, #0
 800cc20:	d062      	beq.n	800cce8 <rclc_executor_spin_some.part.0+0x208>
 800cc22:	7841      	ldrb	r1, [r0, #1]
 800cc24:	2900      	cmp	r1, #0
 800cc26:	d0e4      	beq.n	800cbf2 <rclc_executor_spin_some.part.0+0x112>
 800cc28:	2901      	cmp	r1, #1
 800cc2a:	d1ed      	bne.n	800cc08 <rclc_executor_spin_some.part.0+0x128>
 800cc2c:	f7ff fce4 	bl	800c5f8 <_rclc_execute.part.0>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	f040 80b6 	bne.w	800cda2 <rclc_executor_spin_some.part.0+0x2c2>
 800cc36:	68ab      	ldr	r3, [r5, #8]
 800cc38:	e7e6      	b.n	800cc08 <rclc_executor_spin_some.part.0+0x128>
 800cc3a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc3e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc42:	4630      	mov	r0, r6
 800cc44:	f008 f978 	bl	8014f38 <rcl_wait_set_add_client>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	f43f af7a 	beq.w	800cb42 <rclc_executor_spin_some.part.0+0x62>
 800cc4e:	9001      	str	r0, [sp, #4]
 800cc50:	f000 fa66 	bl	800d120 <rcutils_reset_error>
 800cc54:	9801      	ldr	r0, [sp, #4]
 800cc56:	4607      	mov	r7, r0
 800cc58:	e03c      	b.n	800ccd4 <rclc_executor_spin_some.part.0+0x1f4>
 800cc5a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc5e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc62:	4630      	mov	r0, r6
 800cc64:	f007 fe20 	bl	80148a8 <rcl_wait_set_add_subscription>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	f43f af6a 	beq.w	800cb42 <rclc_executor_spin_some.part.0+0x62>
 800cc6e:	e7ee      	b.n	800cc4e <rclc_executor_spin_some.part.0+0x16e>
 800cc70:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc74:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc78:	4630      	mov	r0, r6
 800cc7a:	f008 f92d 	bl	8014ed8 <rcl_wait_set_add_timer>
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	f43f af5f 	beq.w	800cb42 <rclc_executor_spin_some.part.0+0x62>
 800cc84:	e7e3      	b.n	800cc4e <rclc_executor_spin_some.part.0+0x16e>
 800cc86:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc8a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc8e:	4630      	mov	r0, r6
 800cc90:	f008 f8f6 	bl	8014e80 <rcl_wait_set_add_guard_condition>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	f43f af54 	beq.w	800cb42 <rclc_executor_spin_some.part.0+0x62>
 800cc9a:	e7d8      	b.n	800cc4e <rclc_executor_spin_some.part.0+0x16e>
 800cc9c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cca0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cca4:	3110      	adds	r1, #16
 800cca6:	4630      	mov	r0, r6
 800cca8:	f008 fe76 	bl	8015998 <rcl_action_wait_set_add_action_server>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	f43f af48 	beq.w	800cb42 <rclc_executor_spin_some.part.0+0x62>
 800ccb2:	e7cc      	b.n	800cc4e <rclc_executor_spin_some.part.0+0x16e>
 800ccb4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ccb8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ccbc:	3110      	adds	r1, #16
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	f008 fc41 	bl	8015548 <rcl_action_wait_set_add_action_client>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	f43f af3b 	beq.w	800cb42 <rclc_executor_spin_some.part.0+0x62>
 800cccc:	e7bf      	b.n	800cc4e <rclc_executor_spin_some.part.0+0x16e>
 800ccce:	f000 fa27 	bl	800d120 <rcutils_reset_error>
 800ccd2:	2701      	movs	r7, #1
 800ccd4:	4638      	mov	r0, r7
 800ccd6:	b003      	add	sp, #12
 800ccd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccdc:	f000 fa20 	bl	800d120 <rcutils_reset_error>
 800cce0:	4638      	mov	r0, r7
 800cce2:	b003      	add	sp, #12
 800cce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce8:	4627      	mov	r7, r4
 800ccea:	e7f3      	b.n	800ccd4 <rclc_executor_spin_some.part.0+0x1f4>
 800ccec:	68ab      	ldr	r3, [r5, #8]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f000 8092 	beq.w	800ce18 <rclc_executor_spin_some.part.0+0x338>
 800ccf4:	2400      	movs	r4, #0
 800ccf6:	46a0      	mov	r8, r4
 800ccf8:	f240 1991 	movw	r9, #401	@ 0x191
 800ccfc:	e008      	b.n	800cd10 <rclc_executor_spin_some.part.0+0x230>
 800ccfe:	f7ff fab9 	bl	800c274 <_rclc_check_for_new_data>
 800cd02:	4604      	mov	r4, r0
 800cd04:	b108      	cbz	r0, 800cd0a <rclc_executor_spin_some.part.0+0x22a>
 800cd06:	4548      	cmp	r0, r9
 800cd08:	d1ee      	bne.n	800cce8 <rclc_executor_spin_some.part.0+0x208>
 800cd0a:	68ab      	ldr	r3, [r5, #8]
 800cd0c:	4598      	cmp	r8, r3
 800cd0e:	d265      	bcs.n	800cddc <rclc_executor_spin_some.part.0+0x2fc>
 800cd10:	686a      	ldr	r2, [r5, #4]
 800cd12:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cd16:	4631      	mov	r1, r6
 800cd18:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cd1c:	f108 0801 	add.w	r8, r8, #1
 800cd20:	f1bc 0f00 	cmp.w	ip, #0
 800cd24:	d1eb      	bne.n	800ccfe <rclc_executor_spin_some.part.0+0x21e>
 800cd26:	4619      	mov	r1, r3
 800cd28:	4610      	mov	r0, r2
 800cd2a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cd2e:	4798      	blx	r3
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d0d9      	beq.n	800cce8 <rclc_executor_spin_some.part.0+0x208>
 800cd34:	68ab      	ldr	r3, [r5, #8]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d0d6      	beq.n	800cce8 <rclc_executor_spin_some.part.0+0x208>
 800cd3a:	f04f 0800 	mov.w	r8, #0
 800cd3e:	f240 1991 	movw	r9, #401	@ 0x191
 800cd42:	f240 2a59 	movw	sl, #601	@ 0x259
 800cd46:	e00e      	b.n	800cd66 <rclc_executor_spin_some.part.0+0x286>
 800cd48:	f813 300b 	ldrb.w	r3, [r3, fp]
 800cd4c:	2b08      	cmp	r3, #8
 800cd4e:	d033      	beq.n	800cdb8 <rclc_executor_spin_some.part.0+0x2d8>
 800cd50:	2b09      	cmp	r3, #9
 800cd52:	d028      	beq.n	800cda6 <rclc_executor_spin_some.part.0+0x2c6>
 800cd54:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800cd58:	b9fb      	cbnz	r3, 800cd9a <rclc_executor_spin_some.part.0+0x2ba>
 800cd5a:	68ab      	ldr	r3, [r5, #8]
 800cd5c:	f108 0801 	add.w	r8, r8, #1
 800cd60:	4598      	cmp	r8, r3
 800cd62:	d2b7      	bcs.n	800ccd4 <rclc_executor_spin_some.part.0+0x1f4>
 800cd64:	2400      	movs	r4, #0
 800cd66:	6868      	ldr	r0, [r5, #4]
 800cd68:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cd6c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800cd70:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d0b7      	beq.n	800cce8 <rclc_executor_spin_some.part.0+0x208>
 800cd78:	4631      	mov	r1, r6
 800cd7a:	f7ff fac9 	bl	800c310 <_rclc_take_new_data>
 800cd7e:	b118      	cbz	r0, 800cd88 <rclc_executor_spin_some.part.0+0x2a8>
 800cd80:	4548      	cmp	r0, r9
 800cd82:	d001      	beq.n	800cd88 <rclc_executor_spin_some.part.0+0x2a8>
 800cd84:	4550      	cmp	r0, sl
 800cd86:	d10c      	bne.n	800cda2 <rclc_executor_spin_some.part.0+0x2c2>
 800cd88:	686b      	ldr	r3, [r5, #4]
 800cd8a:	eb13 000b 	adds.w	r0, r3, fp
 800cd8e:	d021      	beq.n	800cdd4 <rclc_executor_spin_some.part.0+0x2f4>
 800cd90:	7842      	ldrb	r2, [r0, #1]
 800cd92:	2a00      	cmp	r2, #0
 800cd94:	d0d8      	beq.n	800cd48 <rclc_executor_spin_some.part.0+0x268>
 800cd96:	2a01      	cmp	r2, #1
 800cd98:	d1df      	bne.n	800cd5a <rclc_executor_spin_some.part.0+0x27a>
 800cd9a:	f7ff fc2d 	bl	800c5f8 <_rclc_execute.part.0>
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d0db      	beq.n	800cd5a <rclc_executor_spin_some.part.0+0x27a>
 800cda2:	4607      	mov	r7, r0
 800cda4:	e796      	b.n	800ccd4 <rclc_executor_spin_some.part.0+0x1f4>
 800cda6:	6843      	ldr	r3, [r0, #4]
 800cda8:	6a1a      	ldr	r2, [r3, #32]
 800cdaa:	2a00      	cmp	r2, #0
 800cdac:	d1f5      	bne.n	800cd9a <rclc_executor_spin_some.part.0+0x2ba>
 800cdae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d0d1      	beq.n	800cd5a <rclc_executor_spin_some.part.0+0x27a>
 800cdb6:	e7f0      	b.n	800cd9a <rclc_executor_spin_some.part.0+0x2ba>
 800cdb8:	6843      	ldr	r3, [r0, #4]
 800cdba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cdbc:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800cdc0:	d1eb      	bne.n	800cd9a <rclc_executor_spin_some.part.0+0x2ba>
 800cdc2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cdc6:	2a00      	cmp	r2, #0
 800cdc8:	d1e7      	bne.n	800cd9a <rclc_executor_spin_some.part.0+0x2ba>
 800cdca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d0c3      	beq.n	800cd5a <rclc_executor_spin_some.part.0+0x27a>
 800cdd2:	e7e2      	b.n	800cd9a <rclc_executor_spin_some.part.0+0x2ba>
 800cdd4:	270b      	movs	r7, #11
 800cdd6:	e77d      	b.n	800ccd4 <rclc_executor_spin_some.part.0+0x1f4>
 800cdd8:	686a      	ldr	r2, [r5, #4]
 800cdda:	e6e2      	b.n	800cba2 <rclc_executor_spin_some.part.0+0xc2>
 800cddc:	686a      	ldr	r2, [r5, #4]
 800cdde:	e7a2      	b.n	800cd26 <rclc_executor_spin_some.part.0+0x246>
 800cde0:	6842      	ldr	r2, [r0, #4]
 800cde2:	6a11      	ldr	r1, [r2, #32]
 800cde4:	2900      	cmp	r1, #0
 800cde6:	f47f af21 	bne.w	800cc2c <rclc_executor_spin_some.part.0+0x14c>
 800cdea:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800cdee:	2a00      	cmp	r2, #0
 800cdf0:	f43f af0a 	beq.w	800cc08 <rclc_executor_spin_some.part.0+0x128>
 800cdf4:	e71a      	b.n	800cc2c <rclc_executor_spin_some.part.0+0x14c>
 800cdf6:	6842      	ldr	r2, [r0, #4]
 800cdf8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800cdfa:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800cdfe:	f47f af15 	bne.w	800cc2c <rclc_executor_spin_some.part.0+0x14c>
 800ce02:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800ce06:	2900      	cmp	r1, #0
 800ce08:	f47f af10 	bne.w	800cc2c <rclc_executor_spin_some.part.0+0x14c>
 800ce0c:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800ce10:	2a00      	cmp	r2, #0
 800ce12:	f43f aef9 	beq.w	800cc08 <rclc_executor_spin_some.part.0+0x128>
 800ce16:	e709      	b.n	800cc2c <rclc_executor_spin_some.part.0+0x14c>
 800ce18:	686a      	ldr	r2, [r5, #4]
 800ce1a:	461c      	mov	r4, r3
 800ce1c:	e783      	b.n	800cd26 <rclc_executor_spin_some.part.0+0x246>
 800ce1e:	686a      	ldr	r2, [r5, #4]
 800ce20:	461c      	mov	r4, r3
 800ce22:	e6be      	b.n	800cba2 <rclc_executor_spin_some.part.0+0xc2>

0800ce24 <rclc_executor_spin>:
 800ce24:	b1d0      	cbz	r0, 800ce5c <rclc_executor_spin+0x38>
 800ce26:	b510      	push	{r4, lr}
 800ce28:	4604      	mov	r4, r0
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800ce30:	6820      	ldr	r0, [r4, #0]
 800ce32:	e9cd 2300 	strd	r2, r3, [sp]
 800ce36:	f006 fc3b 	bl	80136b0 <rcl_context_is_valid>
 800ce3a:	4601      	mov	r1, r0
 800ce3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce40:	4620      	mov	r0, r4
 800ce42:	b131      	cbz	r1, 800ce52 <rclc_executor_spin+0x2e>
 800ce44:	f7ff fe4c 	bl	800cae0 <rclc_executor_spin_some.part.0>
 800ce48:	f030 0302 	bics.w	r3, r0, #2
 800ce4c:	d0ee      	beq.n	800ce2c <rclc_executor_spin+0x8>
 800ce4e:	b002      	add	sp, #8
 800ce50:	bd10      	pop	{r4, pc}
 800ce52:	f000 f965 	bl	800d120 <rcutils_reset_error>
 800ce56:	2001      	movs	r0, #1
 800ce58:	b002      	add	sp, #8
 800ce5a:	bd10      	pop	{r4, pc}
 800ce5c:	200b      	movs	r0, #11
 800ce5e:	4770      	bx	lr

0800ce60 <rclc_executor_handle_counters_zero_init>:
 800ce60:	b130      	cbz	r0, 800ce70 <rclc_executor_handle_counters_zero_init+0x10>
 800ce62:	b508      	push	{r3, lr}
 800ce64:	2220      	movs	r2, #32
 800ce66:	2100      	movs	r1, #0
 800ce68:	f00c fbfa 	bl	8019660 <memset>
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	bd08      	pop	{r3, pc}
 800ce70:	200b      	movs	r0, #11
 800ce72:	4770      	bx	lr
 800ce74:	0000      	movs	r0, r0
	...

0800ce78 <rclc_executor_handle_init>:
 800ce78:	b168      	cbz	r0, 800ce96 <rclc_executor_handle_init+0x1e>
 800ce7a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800cea0 <rclc_executor_handle_init+0x28>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	220b      	movs	r2, #11
 800ce82:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800ce86:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800ce8a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800ce8e:	8002      	strh	r2, [r0, #0]
 800ce90:	8703      	strh	r3, [r0, #56]	@ 0x38
 800ce92:	4618      	mov	r0, r3
 800ce94:	4770      	bx	lr
 800ce96:	200b      	movs	r0, #11
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	f3af 8000 	nop.w
	...

0800cea8 <rclc_support_init_with_options>:
 800cea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ceac:	b083      	sub	sp, #12
 800ceae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ceb0:	b340      	cbz	r0, 800cf04 <rclc_support_init_with_options+0x5c>
 800ceb2:	461d      	mov	r5, r3
 800ceb4:	b333      	cbz	r3, 800cf04 <rclc_support_init_with_options+0x5c>
 800ceb6:	b32e      	cbz	r6, 800cf04 <rclc_support_init_with_options+0x5c>
 800ceb8:	46e9      	mov	r9, sp
 800ceba:	4604      	mov	r4, r0
 800cebc:	4648      	mov	r0, r9
 800cebe:	460f      	mov	r7, r1
 800cec0:	4690      	mov	r8, r2
 800cec2:	f006 fbeb 	bl	801369c <rcl_get_zero_initialized_context>
 800cec6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ceca:	462a      	mov	r2, r5
 800cecc:	e884 0003 	stmia.w	r4, {r0, r1}
 800ced0:	4623      	mov	r3, r4
 800ced2:	4641      	mov	r1, r8
 800ced4:	4638      	mov	r0, r7
 800ced6:	f006 fc51 	bl	801377c <rcl_init>
 800ceda:	4605      	mov	r5, r0
 800cedc:	b960      	cbnz	r0, 800cef8 <rclc_support_init_with_options+0x50>
 800cede:	60a6      	str	r6, [r4, #8]
 800cee0:	4632      	mov	r2, r6
 800cee2:	f104 010c 	add.w	r1, r4, #12
 800cee6:	2003      	movs	r0, #3
 800cee8:	f007 f88c 	bl	8014004 <rcl_clock_init>
 800ceec:	4605      	mov	r5, r0
 800ceee:	b918      	cbnz	r0, 800cef8 <rclc_support_init_with_options+0x50>
 800cef0:	4628      	mov	r0, r5
 800cef2:	b003      	add	sp, #12
 800cef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cef8:	f000 f912 	bl	800d120 <rcutils_reset_error>
 800cefc:	4628      	mov	r0, r5
 800cefe:	b003      	add	sp, #12
 800cf00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf04:	250b      	movs	r5, #11
 800cf06:	4628      	mov	r0, r5
 800cf08:	b003      	add	sp, #12
 800cf0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf0e:	bf00      	nop

0800cf10 <rclc_node_init_default>:
 800cf10:	b3b8      	cbz	r0, 800cf82 <rclc_node_init_default+0x72>
 800cf12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf16:	460d      	mov	r5, r1
 800cf18:	b0a1      	sub	sp, #132	@ 0x84
 800cf1a:	b329      	cbz	r1, 800cf68 <rclc_node_init_default+0x58>
 800cf1c:	4616      	mov	r6, r2
 800cf1e:	b31a      	cbz	r2, 800cf68 <rclc_node_init_default+0x58>
 800cf20:	461f      	mov	r7, r3
 800cf22:	b30b      	cbz	r3, 800cf68 <rclc_node_init_default+0x58>
 800cf24:	f10d 0810 	add.w	r8, sp, #16
 800cf28:	4604      	mov	r4, r0
 800cf2a:	4640      	mov	r0, r8
 800cf2c:	f006 fd36 	bl	801399c <rcl_get_zero_initialized_node>
 800cf30:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cf34:	f10d 0918 	add.w	r9, sp, #24
 800cf38:	e884 0003 	stmia.w	r4, {r0, r1}
 800cf3c:	4648      	mov	r0, r9
 800cf3e:	f006 fea5 	bl	8013c8c <rcl_node_get_default_options>
 800cf42:	4640      	mov	r0, r8
 800cf44:	f006 fd2a 	bl	801399c <rcl_get_zero_initialized_node>
 800cf48:	f8cd 9000 	str.w	r9, [sp]
 800cf4c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cf50:	463b      	mov	r3, r7
 800cf52:	e884 0003 	stmia.w	r4, {r0, r1}
 800cf56:	4632      	mov	r2, r6
 800cf58:	4629      	mov	r1, r5
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f006 fd28 	bl	80139b0 <rcl_node_init>
 800cf60:	b930      	cbnz	r0, 800cf70 <rclc_node_init_default+0x60>
 800cf62:	b021      	add	sp, #132	@ 0x84
 800cf64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf68:	200b      	movs	r0, #11
 800cf6a:	b021      	add	sp, #132	@ 0x84
 800cf6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf70:	9003      	str	r0, [sp, #12]
 800cf72:	f000 f8d5 	bl	800d120 <rcutils_reset_error>
 800cf76:	f000 f8d3 	bl	800d120 <rcutils_reset_error>
 800cf7a:	9803      	ldr	r0, [sp, #12]
 800cf7c:	b021      	add	sp, #132	@ 0x84
 800cf7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf82:	200b      	movs	r0, #11
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop

0800cf88 <rclc_publisher_init_best_effort>:
 800cf88:	b368      	cbz	r0, 800cfe6 <rclc_publisher_init_best_effort+0x5e>
 800cf8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf8e:	460d      	mov	r5, r1
 800cf90:	b0a0      	sub	sp, #128	@ 0x80
 800cf92:	b321      	cbz	r1, 800cfde <rclc_publisher_init_best_effort+0x56>
 800cf94:	4616      	mov	r6, r2
 800cf96:	b312      	cbz	r2, 800cfde <rclc_publisher_init_best_effort+0x56>
 800cf98:	461f      	mov	r7, r3
 800cf9a:	b303      	cbz	r3, 800cfde <rclc_publisher_init_best_effort+0x56>
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	f7ff f859 	bl	800c054 <rcl_get_zero_initialized_publisher>
 800cfa2:	f10d 0810 	add.w	r8, sp, #16
 800cfa6:	6020      	str	r0, [r4, #0]
 800cfa8:	4640      	mov	r0, r8
 800cfaa:	f7ff f8ef 	bl	800c18c <rcl_publisher_get_default_options>
 800cfae:	490f      	ldr	r1, [pc, #60]	@ (800cfec <rclc_publisher_init_best_effort+0x64>)
 800cfb0:	2250      	movs	r2, #80	@ 0x50
 800cfb2:	4640      	mov	r0, r8
 800cfb4:	f00c fc1d 	bl	80197f2 <memcpy>
 800cfb8:	f8cd 8000 	str.w	r8, [sp]
 800cfbc:	463b      	mov	r3, r7
 800cfbe:	4632      	mov	r2, r6
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f7ff f84c 	bl	800c060 <rcl_publisher_init>
 800cfc8:	b910      	cbnz	r0, 800cfd0 <rclc_publisher_init_best_effort+0x48>
 800cfca:	b020      	add	sp, #128	@ 0x80
 800cfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd0:	9003      	str	r0, [sp, #12]
 800cfd2:	f000 f8a5 	bl	800d120 <rcutils_reset_error>
 800cfd6:	9803      	ldr	r0, [sp, #12]
 800cfd8:	b020      	add	sp, #128	@ 0x80
 800cfda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfde:	200b      	movs	r0, #11
 800cfe0:	b020      	add	sp, #128	@ 0x80
 800cfe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe6:	200b      	movs	r0, #11
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	0801a670 	.word	0x0801a670

0800cff0 <rclc_timer_init_default>:
 800cff0:	b360      	cbz	r0, 800d04c <rclc_timer_init_default+0x5c>
 800cff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff6:	460e      	mov	r6, r1
 800cff8:	b08a      	sub	sp, #40	@ 0x28
 800cffa:	b319      	cbz	r1, 800d044 <rclc_timer_init_default+0x54>
 800cffc:	4690      	mov	r8, r2
 800cffe:	461f      	mov	r7, r3
 800d000:	4605      	mov	r5, r0
 800d002:	f007 f9dd 	bl	80143c0 <rcl_get_zero_initialized_timer>
 800d006:	68b4      	ldr	r4, [r6, #8]
 800d008:	6028      	str	r0, [r5, #0]
 800d00a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d00c:	f10d 0c0c 	add.w	ip, sp, #12
 800d010:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d014:	6823      	ldr	r3, [r4, #0]
 800d016:	f8cc 3000 	str.w	r3, [ip]
 800d01a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d01c:	9302      	str	r3, [sp, #8]
 800d01e:	e9cd 8700 	strd	r8, r7, [sp]
 800d022:	4628      	mov	r0, r5
 800d024:	4632      	mov	r2, r6
 800d026:	f106 010c 	add.w	r1, r6, #12
 800d02a:	f007 f9d1 	bl	80143d0 <rcl_timer_init>
 800d02e:	b910      	cbnz	r0, 800d036 <rclc_timer_init_default+0x46>
 800d030:	b00a      	add	sp, #40	@ 0x28
 800d032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d036:	9009      	str	r0, [sp, #36]	@ 0x24
 800d038:	f000 f872 	bl	800d120 <rcutils_reset_error>
 800d03c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d03e:	b00a      	add	sp, #40	@ 0x28
 800d040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d044:	200b      	movs	r0, #11
 800d046:	b00a      	add	sp, #40	@ 0x28
 800d048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d04c:	200b      	movs	r0, #11
 800d04e:	4770      	bx	lr

0800d050 <__default_zero_allocate>:
 800d050:	f00b be16 	b.w	8018c80 <calloc>

0800d054 <__default_reallocate>:
 800d054:	f00b bfb4 	b.w	8018fc0 <realloc>

0800d058 <__default_deallocate>:
 800d058:	f00b be90 	b.w	8018d7c <free>

0800d05c <__default_allocate>:
 800d05c:	f00b be86 	b.w	8018d6c <malloc>

0800d060 <rcutils_get_zero_initialized_allocator>:
 800d060:	b510      	push	{r4, lr}
 800d062:	4c05      	ldr	r4, [pc, #20]	@ (800d078 <rcutils_get_zero_initialized_allocator+0x18>)
 800d064:	4686      	mov	lr, r0
 800d066:	4684      	mov	ip, r0
 800d068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d06a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	f8cc 3000 	str.w	r3, [ip]
 800d074:	4670      	mov	r0, lr
 800d076:	bd10      	pop	{r4, pc}
 800d078:	0801a6c0 	.word	0x0801a6c0

0800d07c <rcutils_set_default_allocator>:
 800d07c:	b1a8      	cbz	r0, 800d0aa <rcutils_set_default_allocator+0x2e>
 800d07e:	6802      	ldr	r2, [r0, #0]
 800d080:	b1a2      	cbz	r2, 800d0ac <rcutils_set_default_allocator+0x30>
 800d082:	6841      	ldr	r1, [r0, #4]
 800d084:	b1a1      	cbz	r1, 800d0b0 <rcutils_set_default_allocator+0x34>
 800d086:	b410      	push	{r4}
 800d088:	68c4      	ldr	r4, [r0, #12]
 800d08a:	b164      	cbz	r4, 800d0a6 <rcutils_set_default_allocator+0x2a>
 800d08c:	6880      	ldr	r0, [r0, #8]
 800d08e:	b138      	cbz	r0, 800d0a0 <rcutils_set_default_allocator+0x24>
 800d090:	4b08      	ldr	r3, [pc, #32]	@ (800d0b4 <rcutils_set_default_allocator+0x38>)
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	2200      	movs	r2, #0
 800d096:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d09a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d09e:	2001      	movs	r0, #1
 800d0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0a4:	4770      	bx	lr
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	e7fa      	b.n	800d0a0 <rcutils_set_default_allocator+0x24>
 800d0aa:	4770      	bx	lr
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	4770      	bx	lr
 800d0b0:	4608      	mov	r0, r1
 800d0b2:	4770      	bx	lr
 800d0b4:	20000030 	.word	0x20000030

0800d0b8 <rcutils_get_default_allocator>:
 800d0b8:	b510      	push	{r4, lr}
 800d0ba:	4c05      	ldr	r4, [pc, #20]	@ (800d0d0 <rcutils_get_default_allocator+0x18>)
 800d0bc:	4686      	mov	lr, r0
 800d0be:	4684      	mov	ip, r0
 800d0c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d0c6:	6823      	ldr	r3, [r4, #0]
 800d0c8:	f8cc 3000 	str.w	r3, [ip]
 800d0cc:	4670      	mov	r0, lr
 800d0ce:	bd10      	pop	{r4, pc}
 800d0d0:	20000030 	.word	0x20000030

0800d0d4 <rcutils_allocator_is_valid>:
 800d0d4:	b158      	cbz	r0, 800d0ee <rcutils_allocator_is_valid+0x1a>
 800d0d6:	6803      	ldr	r3, [r0, #0]
 800d0d8:	b143      	cbz	r3, 800d0ec <rcutils_allocator_is_valid+0x18>
 800d0da:	6843      	ldr	r3, [r0, #4]
 800d0dc:	b133      	cbz	r3, 800d0ec <rcutils_allocator_is_valid+0x18>
 800d0de:	68c3      	ldr	r3, [r0, #12]
 800d0e0:	b123      	cbz	r3, 800d0ec <rcutils_allocator_is_valid+0x18>
 800d0e2:	6880      	ldr	r0, [r0, #8]
 800d0e4:	3800      	subs	r0, #0
 800d0e6:	bf18      	it	ne
 800d0e8:	2001      	movne	r0, #1
 800d0ea:	4770      	bx	lr
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	4770      	bx	lr

0800d0f0 <rcutils_get_error_string>:
 800d0f0:	4b06      	ldr	r3, [pc, #24]	@ (800d10c <rcutils_get_error_string+0x1c>)
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	b13b      	cbz	r3, 800d106 <rcutils_get_error_string+0x16>
 800d0f6:	4b06      	ldr	r3, [pc, #24]	@ (800d110 <rcutils_get_error_string+0x20>)
 800d0f8:	781a      	ldrb	r2, [r3, #0]
 800d0fa:	b90a      	cbnz	r2, 800d100 <rcutils_get_error_string+0x10>
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	701a      	strb	r2, [r3, #0]
 800d100:	4b04      	ldr	r3, [pc, #16]	@ (800d114 <rcutils_get_error_string+0x24>)
 800d102:	7818      	ldrb	r0, [r3, #0]
 800d104:	4770      	bx	lr
 800d106:	4b04      	ldr	r3, [pc, #16]	@ (800d118 <rcutils_get_error_string+0x28>)
 800d108:	7818      	ldrb	r0, [r3, #0]
 800d10a:	4770      	bx	lr
 800d10c:	20006550 	.word	0x20006550
 800d110:	20006569 	.word	0x20006569
 800d114:	20006568 	.word	0x20006568
 800d118:	0801a6d4 	.word	0x0801a6d4
 800d11c:	00000000 	.word	0x00000000

0800d120 <rcutils_reset_error>:
 800d120:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d140 <rcutils_reset_error+0x20>
 800d124:	4a08      	ldr	r2, [pc, #32]	@ (800d148 <rcutils_reset_error+0x28>)
 800d126:	4809      	ldr	r0, [pc, #36]	@ (800d14c <rcutils_reset_error+0x2c>)
 800d128:	4909      	ldr	r1, [pc, #36]	@ (800d150 <rcutils_reset_error+0x30>)
 800d12a:	2300      	movs	r3, #0
 800d12c:	8013      	strh	r3, [r2, #0]
 800d12e:	ed82 7b02 	vstr	d7, [r2, #8]
 800d132:	4a08      	ldr	r2, [pc, #32]	@ (800d154 <rcutils_reset_error+0x34>)
 800d134:	7003      	strb	r3, [r0, #0]
 800d136:	700b      	strb	r3, [r1, #0]
 800d138:	7013      	strb	r3, [r2, #0]
 800d13a:	4770      	bx	lr
 800d13c:	f3af 8000 	nop.w
	...
 800d148:	20006558 	.word	0x20006558
 800d14c:	20006569 	.word	0x20006569
 800d150:	20006568 	.word	0x20006568
 800d154:	20006550 	.word	0x20006550

0800d158 <rcutils_system_time_now>:
 800d158:	b308      	cbz	r0, 800d19e <rcutils_system_time_now+0x46>
 800d15a:	b570      	push	{r4, r5, r6, lr}
 800d15c:	b084      	sub	sp, #16
 800d15e:	4604      	mov	r4, r0
 800d160:	4669      	mov	r1, sp
 800d162:	2001      	movs	r0, #1
 800d164:	f7f4 ff60 	bl	8002028 <clock_gettime>
 800d168:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d16c:	2d00      	cmp	r5, #0
 800d16e:	db13      	blt.n	800d198 <rcutils_system_time_now+0x40>
 800d170:	9902      	ldr	r1, [sp, #8]
 800d172:	2900      	cmp	r1, #0
 800d174:	db0d      	blt.n	800d192 <rcutils_system_time_now+0x3a>
 800d176:	4e0b      	ldr	r6, [pc, #44]	@ (800d1a4 <rcutils_system_time_now+0x4c>)
 800d178:	fba3 3206 	umull	r3, r2, r3, r6
 800d17c:	185b      	adds	r3, r3, r1
 800d17e:	fb06 2205 	mla	r2, r6, r5, r2
 800d182:	f04f 0000 	mov.w	r0, #0
 800d186:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d18a:	e9c4 3200 	strd	r3, r2, [r4]
 800d18e:	b004      	add	sp, #16
 800d190:	bd70      	pop	{r4, r5, r6, pc}
 800d192:	ea53 0205 	orrs.w	r2, r3, r5
 800d196:	d1ee      	bne.n	800d176 <rcutils_system_time_now+0x1e>
 800d198:	2002      	movs	r0, #2
 800d19a:	b004      	add	sp, #16
 800d19c:	bd70      	pop	{r4, r5, r6, pc}
 800d19e:	200b      	movs	r0, #11
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	3b9aca00 	.word	0x3b9aca00

0800d1a8 <rcutils_steady_time_now>:
 800d1a8:	b308      	cbz	r0, 800d1ee <rcutils_steady_time_now+0x46>
 800d1aa:	b570      	push	{r4, r5, r6, lr}
 800d1ac:	b084      	sub	sp, #16
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	4669      	mov	r1, sp
 800d1b2:	2000      	movs	r0, #0
 800d1b4:	f7f4 ff38 	bl	8002028 <clock_gettime>
 800d1b8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d1bc:	2d00      	cmp	r5, #0
 800d1be:	db13      	blt.n	800d1e8 <rcutils_steady_time_now+0x40>
 800d1c0:	9902      	ldr	r1, [sp, #8]
 800d1c2:	2900      	cmp	r1, #0
 800d1c4:	db0d      	blt.n	800d1e2 <rcutils_steady_time_now+0x3a>
 800d1c6:	4e0b      	ldr	r6, [pc, #44]	@ (800d1f4 <rcutils_steady_time_now+0x4c>)
 800d1c8:	fba3 3206 	umull	r3, r2, r3, r6
 800d1cc:	185b      	adds	r3, r3, r1
 800d1ce:	fb06 2205 	mla	r2, r6, r5, r2
 800d1d2:	f04f 0000 	mov.w	r0, #0
 800d1d6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d1da:	e9c4 3200 	strd	r3, r2, [r4]
 800d1de:	b004      	add	sp, #16
 800d1e0:	bd70      	pop	{r4, r5, r6, pc}
 800d1e2:	ea53 0205 	orrs.w	r2, r3, r5
 800d1e6:	d1ee      	bne.n	800d1c6 <rcutils_steady_time_now+0x1e>
 800d1e8:	2002      	movs	r0, #2
 800d1ea:	b004      	add	sp, #16
 800d1ec:	bd70      	pop	{r4, r5, r6, pc}
 800d1ee:	200b      	movs	r0, #11
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	3b9aca00 	.word	0x3b9aca00

0800d1f8 <rmw_get_zero_initialized_init_options>:
 800d1f8:	b510      	push	{r4, lr}
 800d1fa:	2238      	movs	r2, #56	@ 0x38
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	2100      	movs	r1, #0
 800d200:	f00c fa2e 	bl	8019660 <memset>
 800d204:	f104 0010 	add.w	r0, r4, #16
 800d208:	f000 f80a 	bl	800d220 <rmw_get_default_security_options>
 800d20c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d210:	60e3      	str	r3, [r4, #12]
 800d212:	4620      	mov	r0, r4
 800d214:	bd10      	pop	{r4, pc}
 800d216:	bf00      	nop

0800d218 <rmw_get_default_publisher_options>:
 800d218:	2200      	movs	r2, #0
 800d21a:	6002      	str	r2, [r0, #0]
 800d21c:	7102      	strb	r2, [r0, #4]
 800d21e:	4770      	bx	lr

0800d220 <rmw_get_default_security_options>:
 800d220:	2200      	movs	r2, #0
 800d222:	7002      	strb	r2, [r0, #0]
 800d224:	6042      	str	r2, [r0, #4]
 800d226:	4770      	bx	lr

0800d228 <rmw_uros_set_custom_transport>:
 800d228:	b470      	push	{r4, r5, r6}
 800d22a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d22e:	b162      	cbz	r2, 800d24a <rmw_uros_set_custom_transport+0x22>
 800d230:	b15b      	cbz	r3, 800d24a <rmw_uros_set_custom_transport+0x22>
 800d232:	b155      	cbz	r5, 800d24a <rmw_uros_set_custom_transport+0x22>
 800d234:	b14e      	cbz	r6, 800d24a <rmw_uros_set_custom_transport+0x22>
 800d236:	4c06      	ldr	r4, [pc, #24]	@ (800d250 <rmw_uros_set_custom_transport+0x28>)
 800d238:	7020      	strb	r0, [r4, #0]
 800d23a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d23e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d242:	6166      	str	r6, [r4, #20]
 800d244:	2000      	movs	r0, #0
 800d246:	bc70      	pop	{r4, r5, r6}
 800d248:	4770      	bx	lr
 800d24a:	200b      	movs	r0, #11
 800d24c:	bc70      	pop	{r4, r5, r6}
 800d24e:	4770      	bx	lr
 800d250:	2000656c 	.word	0x2000656c

0800d254 <rmw_init_options_init>:
 800d254:	b084      	sub	sp, #16
 800d256:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d258:	b083      	sub	sp, #12
 800d25a:	ad09      	add	r5, sp, #36	@ 0x24
 800d25c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d260:	b130      	cbz	r0, 800d270 <rmw_init_options_init+0x1c>
 800d262:	4604      	mov	r4, r0
 800d264:	4628      	mov	r0, r5
 800d266:	f7ff ff35 	bl	800d0d4 <rcutils_allocator_is_valid>
 800d26a:	b108      	cbz	r0, 800d270 <rmw_init_options_init+0x1c>
 800d26c:	68a6      	ldr	r6, [r4, #8]
 800d26e:	b12e      	cbz	r6, 800d27c <rmw_init_options_init+0x28>
 800d270:	200b      	movs	r0, #11
 800d272:	b003      	add	sp, #12
 800d274:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d278:	b004      	add	sp, #16
 800d27a:	4770      	bx	lr
 800d27c:	2200      	movs	r2, #0
 800d27e:	2300      	movs	r3, #0
 800d280:	e9c4 2300 	strd	r2, r3, [r4]
 800d284:	4b20      	ldr	r3, [pc, #128]	@ (800d308 <rmw_init_options_init+0xb4>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	60a3      	str	r3, [r4, #8]
 800d28a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d28c:	f104 0c20 	add.w	ip, r4, #32
 800d290:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d294:	466f      	mov	r7, sp
 800d296:	682b      	ldr	r3, [r5, #0]
 800d298:	f8cc 3000 	str.w	r3, [ip]
 800d29c:	4638      	mov	r0, r7
 800d29e:	61e6      	str	r6, [r4, #28]
 800d2a0:	60e6      	str	r6, [r4, #12]
 800d2a2:	f7ff ffbd 	bl	800d220 <rmw_get_default_security_options>
 800d2a6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d2aa:	f104 0310 	add.w	r3, r4, #16
 800d2ae:	e883 0003 	stmia.w	r3, {r0, r1}
 800d2b2:	2203      	movs	r2, #3
 800d2b4:	4815      	ldr	r0, [pc, #84]	@ (800d30c <rmw_init_options_init+0xb8>)
 800d2b6:	4916      	ldr	r1, [pc, #88]	@ (800d310 <rmw_init_options_init+0xbc>)
 800d2b8:	7626      	strb	r6, [r4, #24]
 800d2ba:	f000 fee9 	bl	800e090 <rmw_uxrce_init_init_options_impl_memory>
 800d2be:	4813      	ldr	r0, [pc, #76]	@ (800d30c <rmw_init_options_init+0xb8>)
 800d2c0:	f009 fb8e 	bl	80169e0 <get_memory>
 800d2c4:	b1f0      	cbz	r0, 800d304 <rmw_init_options_init+0xb0>
 800d2c6:	4a13      	ldr	r2, [pc, #76]	@ (800d314 <rmw_init_options_init+0xc0>)
 800d2c8:	6883      	ldr	r3, [r0, #8]
 800d2ca:	6851      	ldr	r1, [r2, #4]
 800d2cc:	7810      	ldrb	r0, [r2, #0]
 800d2ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2d0:	7418      	strb	r0, [r3, #16]
 800d2d2:	6159      	str	r1, [r3, #20]
 800d2d4:	68d1      	ldr	r1, [r2, #12]
 800d2d6:	61d9      	str	r1, [r3, #28]
 800d2d8:	6911      	ldr	r1, [r2, #16]
 800d2da:	6219      	str	r1, [r3, #32]
 800d2dc:	6951      	ldr	r1, [r2, #20]
 800d2de:	6892      	ldr	r2, [r2, #8]
 800d2e0:	619a      	str	r2, [r3, #24]
 800d2e2:	6259      	str	r1, [r3, #36]	@ 0x24
 800d2e4:	f004 ffee 	bl	80122c4 <uxr_nanos>
 800d2e8:	f00b fdfe 	bl	8018ee8 <srand>
 800d2ec:	f00b fe2a 	bl	8018f44 <rand>
 800d2f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d2f2:	6298      	str	r0, [r3, #40]	@ 0x28
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d0f9      	beq.n	800d2ec <rmw_init_options_init+0x98>
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	b003      	add	sp, #12
 800d2fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d300:	b004      	add	sp, #16
 800d302:	4770      	bx	lr
 800d304:	2001      	movs	r0, #1
 800d306:	e7b4      	b.n	800d272 <rmw_init_options_init+0x1e>
 800d308:	0801b0c8 	.word	0x0801b0c8
 800d30c:	2000ae84 	.word	0x2000ae84
 800d310:	20006720 	.word	0x20006720
 800d314:	2000656c 	.word	0x2000656c

0800d318 <rmw_init_options_copy>:
 800d318:	b570      	push	{r4, r5, r6, lr}
 800d31a:	b088      	sub	sp, #32
 800d31c:	b160      	cbz	r0, 800d338 <rmw_init_options_copy+0x20>
 800d31e:	460d      	mov	r5, r1
 800d320:	b151      	cbz	r1, 800d338 <rmw_init_options_copy+0x20>
 800d322:	4604      	mov	r4, r0
 800d324:	6880      	ldr	r0, [r0, #8]
 800d326:	b128      	cbz	r0, 800d334 <rmw_init_options_copy+0x1c>
 800d328:	4b33      	ldr	r3, [pc, #204]	@ (800d3f8 <rmw_init_options_copy+0xe0>)
 800d32a:	6819      	ldr	r1, [r3, #0]
 800d32c:	f7f2 ff78 	bl	8000220 <strcmp>
 800d330:	2800      	cmp	r0, #0
 800d332:	d154      	bne.n	800d3de <rmw_init_options_copy+0xc6>
 800d334:	68ab      	ldr	r3, [r5, #8]
 800d336:	b11b      	cbz	r3, 800d340 <rmw_init_options_copy+0x28>
 800d338:	240b      	movs	r4, #11
 800d33a:	4620      	mov	r0, r4
 800d33c:	b008      	add	sp, #32
 800d33e:	bd70      	pop	{r4, r5, r6, pc}
 800d340:	4623      	mov	r3, r4
 800d342:	462a      	mov	r2, r5
 800d344:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d348:	f8d3 c000 	ldr.w	ip, [r3]
 800d34c:	6858      	ldr	r0, [r3, #4]
 800d34e:	6899      	ldr	r1, [r3, #8]
 800d350:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d354:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d358:	3310      	adds	r3, #16
 800d35a:	42b3      	cmp	r3, r6
 800d35c:	f8c2 c000 	str.w	ip, [r2]
 800d360:	6050      	str	r0, [r2, #4]
 800d362:	6091      	str	r1, [r2, #8]
 800d364:	f102 0210 	add.w	r2, r2, #16
 800d368:	d1ee      	bne.n	800d348 <rmw_init_options_copy+0x30>
 800d36a:	6819      	ldr	r1, [r3, #0]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	6053      	str	r3, [r2, #4]
 800d370:	6011      	str	r1, [r2, #0]
 800d372:	f104 0e20 	add.w	lr, r4, #32
 800d376:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d37a:	f10d 0c0c 	add.w	ip, sp, #12
 800d37e:	4666      	mov	r6, ip
 800d380:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d384:	f8de 3000 	ldr.w	r3, [lr]
 800d388:	f8cc 3000 	str.w	r3, [ip]
 800d38c:	4630      	mov	r0, r6
 800d38e:	f7ff fea1 	bl	800d0d4 <rcutils_allocator_is_valid>
 800d392:	2800      	cmp	r0, #0
 800d394:	d0d0      	beq.n	800d338 <rmw_init_options_copy+0x20>
 800d396:	ab08      	add	r3, sp, #32
 800d398:	e913 0003 	ldmdb	r3, {r0, r1}
 800d39c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d3a0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d3a4:	69e0      	ldr	r0, [r4, #28]
 800d3a6:	f008 feed 	bl	8016184 <rcutils_strdup>
 800d3aa:	61e8      	str	r0, [r5, #28]
 800d3ac:	69e3      	ldr	r3, [r4, #28]
 800d3ae:	b103      	cbz	r3, 800d3b2 <rmw_init_options_copy+0x9a>
 800d3b0:	b1f8      	cbz	r0, 800d3f2 <rmw_init_options_copy+0xda>
 800d3b2:	4812      	ldr	r0, [pc, #72]	@ (800d3fc <rmw_init_options_copy+0xe4>)
 800d3b4:	f009 fb14 	bl	80169e0 <get_memory>
 800d3b8:	b1a8      	cbz	r0, 800d3e6 <rmw_init_options_copy+0xce>
 800d3ba:	6883      	ldr	r3, [r0, #8]
 800d3bc:	636b      	str	r3, [r5, #52]	@ 0x34
 800d3be:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d3c0:	f102 0c10 	add.w	ip, r2, #16
 800d3c4:	f103 0510 	add.w	r5, r3, #16
 800d3c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d3cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d3ce:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d3d2:	2400      	movs	r4, #0
 800d3d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d3d8:	4620      	mov	r0, r4
 800d3da:	b008      	add	sp, #32
 800d3dc:	bd70      	pop	{r4, r5, r6, pc}
 800d3de:	240c      	movs	r4, #12
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	b008      	add	sp, #32
 800d3e4:	bd70      	pop	{r4, r5, r6, pc}
 800d3e6:	9b04      	ldr	r3, [sp, #16]
 800d3e8:	9907      	ldr	r1, [sp, #28]
 800d3ea:	69e8      	ldr	r0, [r5, #28]
 800d3ec:	4798      	blx	r3
 800d3ee:	2401      	movs	r4, #1
 800d3f0:	e7a3      	b.n	800d33a <rmw_init_options_copy+0x22>
 800d3f2:	240a      	movs	r4, #10
 800d3f4:	e7a1      	b.n	800d33a <rmw_init_options_copy+0x22>
 800d3f6:	bf00      	nop
 800d3f8:	0801b0c8 	.word	0x0801b0c8
 800d3fc:	2000ae84 	.word	0x2000ae84

0800d400 <rmw_init_options_fini>:
 800d400:	2800      	cmp	r0, #0
 800d402:	d041      	beq.n	800d488 <rmw_init_options_fini+0x88>
 800d404:	b510      	push	{r4, lr}
 800d406:	4604      	mov	r4, r0
 800d408:	b08e      	sub	sp, #56	@ 0x38
 800d40a:	3020      	adds	r0, #32
 800d40c:	f7ff fe62 	bl	800d0d4 <rcutils_allocator_is_valid>
 800d410:	b380      	cbz	r0, 800d474 <rmw_init_options_fini+0x74>
 800d412:	68a0      	ldr	r0, [r4, #8]
 800d414:	b120      	cbz	r0, 800d420 <rmw_init_options_fini+0x20>
 800d416:	4b1e      	ldr	r3, [pc, #120]	@ (800d490 <rmw_init_options_fini+0x90>)
 800d418:	6819      	ldr	r1, [r3, #0]
 800d41a:	f7f2 ff01 	bl	8000220 <strcmp>
 800d41e:	bb88      	cbnz	r0, 800d484 <rmw_init_options_fini+0x84>
 800d420:	4b1c      	ldr	r3, [pc, #112]	@ (800d494 <rmw_init_options_fini+0x94>)
 800d422:	6819      	ldr	r1, [r3, #0]
 800d424:	b351      	cbz	r1, 800d47c <rmw_init_options_fini+0x7c>
 800d426:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d428:	e001      	b.n	800d42e <rmw_init_options_fini+0x2e>
 800d42a:	6849      	ldr	r1, [r1, #4]
 800d42c:	b331      	cbz	r1, 800d47c <rmw_init_options_fini+0x7c>
 800d42e:	688b      	ldr	r3, [r1, #8]
 800d430:	429a      	cmp	r2, r3
 800d432:	d1fa      	bne.n	800d42a <rmw_init_options_fini+0x2a>
 800d434:	4817      	ldr	r0, [pc, #92]	@ (800d494 <rmw_init_options_fini+0x94>)
 800d436:	f009 fae3 	bl	8016a00 <put_memory>
 800d43a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d43c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d43e:	69e0      	ldr	r0, [r4, #28]
 800d440:	4798      	blx	r3
 800d442:	4668      	mov	r0, sp
 800d444:	f7ff fed8 	bl	800d1f8 <rmw_get_zero_initialized_init_options>
 800d448:	46ee      	mov	lr, sp
 800d44a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d44e:	46a4      	mov	ip, r4
 800d450:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d454:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d458:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d45c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d460:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d464:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d468:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d46c:	2300      	movs	r3, #0
 800d46e:	4618      	mov	r0, r3
 800d470:	b00e      	add	sp, #56	@ 0x38
 800d472:	bd10      	pop	{r4, pc}
 800d474:	230b      	movs	r3, #11
 800d476:	4618      	mov	r0, r3
 800d478:	b00e      	add	sp, #56	@ 0x38
 800d47a:	bd10      	pop	{r4, pc}
 800d47c:	2301      	movs	r3, #1
 800d47e:	4618      	mov	r0, r3
 800d480:	b00e      	add	sp, #56	@ 0x38
 800d482:	bd10      	pop	{r4, pc}
 800d484:	230c      	movs	r3, #12
 800d486:	e7f2      	b.n	800d46e <rmw_init_options_fini+0x6e>
 800d488:	230b      	movs	r3, #11
 800d48a:	4618      	mov	r0, r3
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	0801b0c8 	.word	0x0801b0c8
 800d494:	2000ae84 	.word	0x2000ae84

0800d498 <rmw_init>:
 800d498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d49c:	b083      	sub	sp, #12
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	f000 80d3 	beq.w	800d64a <rmw_init+0x1b2>
 800d4a4:	460e      	mov	r6, r1
 800d4a6:	2900      	cmp	r1, #0
 800d4a8:	f000 80cf 	beq.w	800d64a <rmw_init+0x1b2>
 800d4ac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d4ae:	4605      	mov	r5, r0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f000 80ca 	beq.w	800d64a <rmw_init+0x1b2>
 800d4b6:	4b78      	ldr	r3, [pc, #480]	@ (800d698 <rmw_init+0x200>)
 800d4b8:	6880      	ldr	r0, [r0, #8]
 800d4ba:	681f      	ldr	r7, [r3, #0]
 800d4bc:	b128      	cbz	r0, 800d4ca <rmw_init+0x32>
 800d4be:	4639      	mov	r1, r7
 800d4c0:	f7f2 feae 	bl	8000220 <strcmp>
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	f040 80ca 	bne.w	800d65e <rmw_init+0x1c6>
 800d4ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d4ce:	4c73      	ldr	r4, [pc, #460]	@ (800d69c <rmw_init+0x204>)
 800d4d0:	4973      	ldr	r1, [pc, #460]	@ (800d6a0 <rmw_init+0x208>)
 800d4d2:	4874      	ldr	r0, [pc, #464]	@ (800d6a4 <rmw_init+0x20c>)
 800d4d4:	60b7      	str	r7, [r6, #8]
 800d4d6:	e9c6 2300 	strd	r2, r3, [r6]
 800d4da:	68eb      	ldr	r3, [r5, #12]
 800d4dc:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f000 fd76 	bl	800dfd0 <rmw_uxrce_init_session_memory>
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	4970      	ldr	r1, [pc, #448]	@ (800d6a8 <rmw_init+0x210>)
 800d4e8:	2204      	movs	r2, #4
 800d4ea:	f000 fdb1 	bl	800e050 <rmw_uxrce_init_static_input_buffer_memory>
 800d4ee:	f04f 0800 	mov.w	r8, #0
 800d4f2:	486c      	ldr	r0, [pc, #432]	@ (800d6a4 <rmw_init+0x20c>)
 800d4f4:	f884 800d 	strb.w	r8, [r4, #13]
 800d4f8:	f009 fa72 	bl	80169e0 <get_memory>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	f000 80a9 	beq.w	800d654 <rmw_init+0x1bc>
 800d502:	6884      	ldr	r4, [r0, #8]
 800d504:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d506:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d508:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d50c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d510:	9101      	str	r1, [sp, #4]
 800d512:	6a00      	ldr	r0, [r0, #32]
 800d514:	9000      	str	r0, [sp, #0]
 800d516:	f104 0910 	add.w	r9, r4, #16
 800d51a:	4661      	mov	r1, ip
 800d51c:	4648      	mov	r0, r9
 800d51e:	f002 fe53 	bl	80101c8 <uxr_set_custom_transport_callbacks>
 800d522:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d526:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d52a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d52e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d532:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d536:	495d      	ldr	r1, [pc, #372]	@ (800d6ac <rmw_init+0x214>)
 800d538:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d53c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d540:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d544:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d548:	4859      	ldr	r0, [pc, #356]	@ (800d6b0 <rmw_init+0x218>)
 800d54a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d54e:	2201      	movs	r2, #1
 800d550:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d552:	f000 fd1d 	bl	800df90 <rmw_uxrce_init_node_memory>
 800d556:	4957      	ldr	r1, [pc, #348]	@ (800d6b4 <rmw_init+0x21c>)
 800d558:	4857      	ldr	r0, [pc, #348]	@ (800d6b8 <rmw_init+0x220>)
 800d55a:	2205      	movs	r2, #5
 800d55c:	f000 fcf8 	bl	800df50 <rmw_uxrce_init_subscription_memory>
 800d560:	4956      	ldr	r1, [pc, #344]	@ (800d6bc <rmw_init+0x224>)
 800d562:	4857      	ldr	r0, [pc, #348]	@ (800d6c0 <rmw_init+0x228>)
 800d564:	220a      	movs	r2, #10
 800d566:	f000 fcd3 	bl	800df10 <rmw_uxrce_init_publisher_memory>
 800d56a:	4956      	ldr	r1, [pc, #344]	@ (800d6c4 <rmw_init+0x22c>)
 800d56c:	4856      	ldr	r0, [pc, #344]	@ (800d6c8 <rmw_init+0x230>)
 800d56e:	2201      	movs	r2, #1
 800d570:	f000 fc8e 	bl	800de90 <rmw_uxrce_init_service_memory>
 800d574:	4955      	ldr	r1, [pc, #340]	@ (800d6cc <rmw_init+0x234>)
 800d576:	4856      	ldr	r0, [pc, #344]	@ (800d6d0 <rmw_init+0x238>)
 800d578:	2201      	movs	r2, #1
 800d57a:	f000 fca9 	bl	800ded0 <rmw_uxrce_init_client_memory>
 800d57e:	4955      	ldr	r1, [pc, #340]	@ (800d6d4 <rmw_init+0x23c>)
 800d580:	4855      	ldr	r0, [pc, #340]	@ (800d6d8 <rmw_init+0x240>)
 800d582:	220f      	movs	r2, #15
 800d584:	f000 fd44 	bl	800e010 <rmw_uxrce_init_topic_memory>
 800d588:	4954      	ldr	r1, [pc, #336]	@ (800d6dc <rmw_init+0x244>)
 800d58a:	4855      	ldr	r0, [pc, #340]	@ (800d6e0 <rmw_init+0x248>)
 800d58c:	2203      	movs	r2, #3
 800d58e:	f000 fd7f 	bl	800e090 <rmw_uxrce_init_init_options_impl_memory>
 800d592:	4954      	ldr	r1, [pc, #336]	@ (800d6e4 <rmw_init+0x24c>)
 800d594:	4854      	ldr	r0, [pc, #336]	@ (800d6e8 <rmw_init+0x250>)
 800d596:	2204      	movs	r2, #4
 800d598:	f000 fd9a 	bl	800e0d0 <rmw_uxrce_init_wait_set_memory>
 800d59c:	4953      	ldr	r1, [pc, #332]	@ (800d6ec <rmw_init+0x254>)
 800d59e:	4854      	ldr	r0, [pc, #336]	@ (800d6f0 <rmw_init+0x258>)
 800d5a0:	2204      	movs	r2, #4
 800d5a2:	f000 fdb5 	bl	800e110 <rmw_uxrce_init_guard_condition_memory>
 800d5a6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d5a8:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d5aa:	4642      	mov	r2, r8
 800d5ac:	f000 fc38 	bl	800de20 <rmw_uxrce_transport_init>
 800d5b0:	4607      	mov	r7, r0
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	d158      	bne.n	800d668 <rmw_init+0x1d0>
 800d5b6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d5b8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d5bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d5be:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	f002 fffc 	bl	80105c0 <uxr_init_session>
 800d5c8:	494a      	ldr	r1, [pc, #296]	@ (800d6f4 <rmw_init+0x25c>)
 800d5ca:	4622      	mov	r2, r4
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	f003 f81b 	bl	8010608 <uxr_set_topic_callback>
 800d5d2:	4949      	ldr	r1, [pc, #292]	@ (800d6f8 <rmw_init+0x260>)
 800d5d4:	463a      	mov	r2, r7
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f003 f812 	bl	8010600 <uxr_set_status_callback>
 800d5dc:	4947      	ldr	r1, [pc, #284]	@ (800d6fc <rmw_init+0x264>)
 800d5de:	463a      	mov	r2, r7
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	f003 f815 	bl	8010610 <uxr_set_request_callback>
 800d5e6:	4946      	ldr	r1, [pc, #280]	@ (800d700 <rmw_init+0x268>)
 800d5e8:	463a      	mov	r2, r7
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	f003 f814 	bl	8010618 <uxr_set_reply_callback>
 800d5f0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d5f4:	2304      	movs	r3, #4
 800d5f6:	0092      	lsls	r2, r2, #2
 800d5f8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	f003 f849 	bl	8010694 <uxr_create_input_reliable_stream>
 800d602:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d606:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d60a:	0092      	lsls	r2, r2, #2
 800d60c:	2304      	movs	r3, #4
 800d60e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d612:	4628      	mov	r0, r5
 800d614:	f003 f816 	bl	8010644 <uxr_create_output_reliable_stream>
 800d618:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d61c:	4628      	mov	r0, r5
 800d61e:	f003 f833 	bl	8010688 <uxr_create_input_best_effort_stream>
 800d622:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d626:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d62a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d62e:	3114      	adds	r1, #20
 800d630:	4628      	mov	r0, r5
 800d632:	f002 fff5 	bl	8010620 <uxr_create_output_best_effort_stream>
 800d636:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d63a:	4628      	mov	r0, r5
 800d63c:	f003 fdd4 	bl	80111e8 <uxr_create_session>
 800d640:	b1f8      	cbz	r0, 800d682 <rmw_init+0x1ea>
 800d642:	4638      	mov	r0, r7
 800d644:	b003      	add	sp, #12
 800d646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d64a:	270b      	movs	r7, #11
 800d64c:	4638      	mov	r0, r7
 800d64e:	b003      	add	sp, #12
 800d650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d654:	2701      	movs	r7, #1
 800d656:	4638      	mov	r0, r7
 800d658:	b003      	add	sp, #12
 800d65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d65e:	270c      	movs	r7, #12
 800d660:	4638      	mov	r0, r7
 800d662:	b003      	add	sp, #12
 800d664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d668:	4648      	mov	r0, r9
 800d66a:	f002 fdef 	bl	801024c <uxr_close_custom_transport>
 800d66e:	480d      	ldr	r0, [pc, #52]	@ (800d6a4 <rmw_init+0x20c>)
 800d670:	4621      	mov	r1, r4
 800d672:	f009 f9c5 	bl	8016a00 <put_memory>
 800d676:	4638      	mov	r0, r7
 800d678:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800d67c:	b003      	add	sp, #12
 800d67e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d682:	4648      	mov	r0, r9
 800d684:	f002 fde2 	bl	801024c <uxr_close_custom_transport>
 800d688:	4806      	ldr	r0, [pc, #24]	@ (800d6a4 <rmw_init+0x20c>)
 800d68a:	4621      	mov	r1, r4
 800d68c:	f009 f9b8 	bl	8016a00 <put_memory>
 800d690:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800d692:	2701      	movs	r7, #1
 800d694:	e7d5      	b.n	800d642 <rmw_init+0x1aa>
 800d696:	bf00      	nop
 800d698:	0801b0c8 	.word	0x0801b0c8
 800d69c:	2000aed4 	.word	0x2000aed4
 800d6a0:	20007180 	.word	0x20007180
 800d6a4:	2000aec4 	.word	0x2000aec4
 800d6a8:	20008728 	.word	0x20008728
 800d6ac:	200067a4 	.word	0x200067a4
 800d6b0:	2000ae94 	.word	0x2000ae94
 800d6b4:	2000a828 	.word	0x2000a828
 800d6b8:	2000aee4 	.word	0x2000aee4
 800d6bc:	20006848 	.word	0x20006848
 800d6c0:	2000aea4 	.word	0x2000aea4
 800d6c4:	200070b8 	.word	0x200070b8
 800d6c8:	2000aeb4 	.word	0x2000aeb4
 800d6cc:	200065d8 	.word	0x200065d8
 800d6d0:	200065c4 	.word	0x200065c4
 800d6d4:	2000ac60 	.word	0x2000ac60
 800d6d8:	2000aef4 	.word	0x2000aef4
 800d6dc:	20006720 	.word	0x20006720
 800d6e0:	2000ae84 	.word	0x2000ae84
 800d6e4:	2000ae04 	.word	0x2000ae04
 800d6e8:	2000af04 	.word	0x2000af04
 800d6ec:	200066a0 	.word	0x200066a0
 800d6f0:	2000ae74 	.word	0x2000ae74
 800d6f4:	08016819 	.word	0x08016819
 800d6f8:	08016811 	.word	0x08016811
 800d6fc:	080168b1 	.word	0x080168b1
 800d700:	0801694d 	.word	0x0801694d

0800d704 <rmw_context_fini>:
 800d704:	4b17      	ldr	r3, [pc, #92]	@ (800d764 <rmw_context_fini+0x60>)
 800d706:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d708:	b570      	push	{r4, r5, r6, lr}
 800d70a:	681c      	ldr	r4, [r3, #0]
 800d70c:	4605      	mov	r5, r0
 800d70e:	b334      	cbz	r4, 800d75e <rmw_context_fini+0x5a>
 800d710:	2600      	movs	r6, #0
 800d712:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d716:	6902      	ldr	r2, [r0, #16]
 800d718:	428a      	cmp	r2, r1
 800d71a:	d018      	beq.n	800d74e <rmw_context_fini+0x4a>
 800d71c:	2c00      	cmp	r4, #0
 800d71e:	d1f8      	bne.n	800d712 <rmw_context_fini+0xe>
 800d720:	b189      	cbz	r1, 800d746 <rmw_context_fini+0x42>
 800d722:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d726:	789b      	ldrb	r3, [r3, #2]
 800d728:	2b01      	cmp	r3, #1
 800d72a:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d72e:	bf14      	ite	ne
 800d730:	210a      	movne	r1, #10
 800d732:	2100      	moveq	r1, #0
 800d734:	f003 fd30 	bl	8011198 <uxr_delete_session_retries>
 800d738:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d73a:	f000 fd09 	bl	800e150 <rmw_uxrce_fini_session_memory>
 800d73e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d740:	3010      	adds	r0, #16
 800d742:	f002 fd83 	bl	801024c <uxr_close_custom_transport>
 800d746:	2300      	movs	r3, #0
 800d748:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d74a:	4630      	mov	r0, r6
 800d74c:	bd70      	pop	{r4, r5, r6, pc}
 800d74e:	3018      	adds	r0, #24
 800d750:	f000 f89c 	bl	800d88c <rmw_destroy_node>
 800d754:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d756:	4606      	mov	r6, r0
 800d758:	2c00      	cmp	r4, #0
 800d75a:	d1da      	bne.n	800d712 <rmw_context_fini+0xe>
 800d75c:	e7e0      	b.n	800d720 <rmw_context_fini+0x1c>
 800d75e:	4626      	mov	r6, r4
 800d760:	e7de      	b.n	800d720 <rmw_context_fini+0x1c>
 800d762:	bf00      	nop
 800d764:	2000ae94 	.word	0x2000ae94

0800d768 <create_node>:
 800d768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d76c:	b083      	sub	sp, #12
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d05f      	beq.n	800d832 <create_node+0xca>
 800d772:	4606      	mov	r6, r0
 800d774:	4835      	ldr	r0, [pc, #212]	@ (800d84c <create_node+0xe4>)
 800d776:	460f      	mov	r7, r1
 800d778:	4690      	mov	r8, r2
 800d77a:	461d      	mov	r5, r3
 800d77c:	f009 f930 	bl	80169e0 <get_memory>
 800d780:	2800      	cmp	r0, #0
 800d782:	d056      	beq.n	800d832 <create_node+0xca>
 800d784:	6884      	ldr	r4, [r0, #8]
 800d786:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d788:	6123      	str	r3, [r4, #16]
 800d78a:	f009 f991 	bl	8016ab0 <rmw_get_implementation_identifier>
 800d78e:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800d792:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800d796:	f8c4 9020 	str.w	r9, [r4, #32]
 800d79a:	4630      	mov	r0, r6
 800d79c:	f7f2 fd4a 	bl	8000234 <strlen>
 800d7a0:	1c42      	adds	r2, r0, #1
 800d7a2:	2a3c      	cmp	r2, #60	@ 0x3c
 800d7a4:	f104 0518 	add.w	r5, r4, #24
 800d7a8:	d840      	bhi.n	800d82c <create_node+0xc4>
 800d7aa:	4648      	mov	r0, r9
 800d7ac:	4631      	mov	r1, r6
 800d7ae:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800d7b2:	f00c f81e 	bl	80197f2 <memcpy>
 800d7b6:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	f7f2 fd3a 	bl	8000234 <strlen>
 800d7c0:	1c42      	adds	r2, r0, #1
 800d7c2:	2a3c      	cmp	r2, #60	@ 0x3c
 800d7c4:	d832      	bhi.n	800d82c <create_node+0xc4>
 800d7c6:	4639      	mov	r1, r7
 800d7c8:	4648      	mov	r0, r9
 800d7ca:	f00c f812 	bl	80197f2 <memcpy>
 800d7ce:	6923      	ldr	r3, [r4, #16]
 800d7d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7d4:	2101      	movs	r1, #1
 800d7d6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800d7da:	1842      	adds	r2, r0, r1
 800d7dc:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800d7e0:	f002 fd38 	bl	8010254 <uxr_object_id>
 800d7e4:	6160      	str	r0, [r4, #20]
 800d7e6:	783b      	ldrb	r3, [r7, #0]
 800d7e8:	2b2f      	cmp	r3, #47	@ 0x2f
 800d7ea:	d127      	bne.n	800d83c <create_node+0xd4>
 800d7ec:	787b      	ldrb	r3, [r7, #1]
 800d7ee:	bb2b      	cbnz	r3, 800d83c <create_node+0xd4>
 800d7f0:	4a17      	ldr	r2, [pc, #92]	@ (800d850 <create_node+0xe8>)
 800d7f2:	4818      	ldr	r0, [pc, #96]	@ (800d854 <create_node+0xec>)
 800d7f4:	4633      	mov	r3, r6
 800d7f6:	213c      	movs	r1, #60	@ 0x3c
 800d7f8:	f00b fdbe 	bl	8019378 <sniprintf>
 800d7fc:	6920      	ldr	r0, [r4, #16]
 800d7fe:	4915      	ldr	r1, [pc, #84]	@ (800d854 <create_node+0xec>)
 800d800:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800d804:	9100      	str	r1, [sp, #0]
 800d806:	2106      	movs	r1, #6
 800d808:	9101      	str	r1, [sp, #4]
 800d80a:	6811      	ldr	r1, [r2, #0]
 800d80c:	6962      	ldr	r2, [r4, #20]
 800d80e:	fa1f f388 	uxth.w	r3, r8
 800d812:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d816:	f002 fb4d 	bl	800feb4 <uxr_buffer_create_participant_bin>
 800d81a:	4602      	mov	r2, r0
 800d81c:	6920      	ldr	r0, [r4, #16]
 800d81e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d822:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d826:	f000 fe09 	bl	800e43c <run_xrce_session>
 800d82a:	b918      	cbnz	r0, 800d834 <create_node+0xcc>
 800d82c:	4628      	mov	r0, r5
 800d82e:	f000 fc95 	bl	800e15c <rmw_uxrce_fini_node_memory>
 800d832:	2500      	movs	r5, #0
 800d834:	4628      	mov	r0, r5
 800d836:	b003      	add	sp, #12
 800d838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d83c:	4a06      	ldr	r2, [pc, #24]	@ (800d858 <create_node+0xf0>)
 800d83e:	9600      	str	r6, [sp, #0]
 800d840:	463b      	mov	r3, r7
 800d842:	213c      	movs	r1, #60	@ 0x3c
 800d844:	4803      	ldr	r0, [pc, #12]	@ (800d854 <create_node+0xec>)
 800d846:	f00b fd97 	bl	8019378 <sniprintf>
 800d84a:	e7d7      	b.n	800d7fc <create_node+0x94>
 800d84c:	2000ae94 	.word	0x2000ae94
 800d850:	0801a714 	.word	0x0801a714
 800d854:	20006588 	.word	0x20006588
 800d858:	0801a6d8 	.word	0x0801a6d8

0800d85c <rmw_create_node>:
 800d85c:	b199      	cbz	r1, 800d886 <rmw_create_node+0x2a>
 800d85e:	780b      	ldrb	r3, [r1, #0]
 800d860:	468c      	mov	ip, r1
 800d862:	b183      	cbz	r3, 800d886 <rmw_create_node+0x2a>
 800d864:	b410      	push	{r4}
 800d866:	4614      	mov	r4, r2
 800d868:	b14a      	cbz	r2, 800d87e <rmw_create_node+0x22>
 800d86a:	7813      	ldrb	r3, [r2, #0]
 800d86c:	b13b      	cbz	r3, 800d87e <rmw_create_node+0x22>
 800d86e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800d870:	4603      	mov	r3, r0
 800d872:	4621      	mov	r1, r4
 800d874:	4660      	mov	r0, ip
 800d876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d87a:	f7ff bf75 	b.w	800d768 <create_node>
 800d87e:	2000      	movs	r0, #0
 800d880:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d884:	4770      	bx	lr
 800d886:	2000      	movs	r0, #0
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop

0800d88c <rmw_destroy_node>:
 800d88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88e:	b328      	cbz	r0, 800d8dc <rmw_destroy_node+0x50>
 800d890:	4607      	mov	r7, r0
 800d892:	6800      	ldr	r0, [r0, #0]
 800d894:	b120      	cbz	r0, 800d8a0 <rmw_destroy_node+0x14>
 800d896:	4b36      	ldr	r3, [pc, #216]	@ (800d970 <rmw_destroy_node+0xe4>)
 800d898:	6819      	ldr	r1, [r3, #0]
 800d89a:	f7f2 fcc1 	bl	8000220 <strcmp>
 800d89e:	b9e8      	cbnz	r0, 800d8dc <rmw_destroy_node+0x50>
 800d8a0:	687d      	ldr	r5, [r7, #4]
 800d8a2:	b1dd      	cbz	r5, 800d8dc <rmw_destroy_node+0x50>
 800d8a4:	4b33      	ldr	r3, [pc, #204]	@ (800d974 <rmw_destroy_node+0xe8>)
 800d8a6:	681c      	ldr	r4, [r3, #0]
 800d8a8:	2c00      	cmp	r4, #0
 800d8aa:	d05f      	beq.n	800d96c <rmw_destroy_node+0xe0>
 800d8ac:	2600      	movs	r6, #0
 800d8ae:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d8b2:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800d8b6:	429d      	cmp	r5, r3
 800d8b8:	d013      	beq.n	800d8e2 <rmw_destroy_node+0x56>
 800d8ba:	2c00      	cmp	r4, #0
 800d8bc:	d1f7      	bne.n	800d8ae <rmw_destroy_node+0x22>
 800d8be:	4b2e      	ldr	r3, [pc, #184]	@ (800d978 <rmw_destroy_node+0xec>)
 800d8c0:	681c      	ldr	r4, [r3, #0]
 800d8c2:	b1c4      	cbz	r4, 800d8f6 <rmw_destroy_node+0x6a>
 800d8c4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d8c8:	6a0b      	ldr	r3, [r1, #32]
 800d8ca:	429d      	cmp	r5, r3
 800d8cc:	d1f9      	bne.n	800d8c2 <rmw_destroy_node+0x36>
 800d8ce:	317c      	adds	r1, #124	@ 0x7c
 800d8d0:	4638      	mov	r0, r7
 800d8d2:	f000 fa45 	bl	800dd60 <rmw_destroy_subscription>
 800d8d6:	2801      	cmp	r0, #1
 800d8d8:	4606      	mov	r6, r0
 800d8da:	d1f2      	bne.n	800d8c2 <rmw_destroy_node+0x36>
 800d8dc:	2601      	movs	r6, #1
 800d8de:	4630      	mov	r0, r6
 800d8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8e2:	3184      	adds	r1, #132	@ 0x84
 800d8e4:	4638      	mov	r0, r7
 800d8e6:	f000 f9a5 	bl	800dc34 <rmw_destroy_publisher>
 800d8ea:	2801      	cmp	r0, #1
 800d8ec:	4606      	mov	r6, r0
 800d8ee:	d0f5      	beq.n	800d8dc <rmw_destroy_node+0x50>
 800d8f0:	2c00      	cmp	r4, #0
 800d8f2:	d1dc      	bne.n	800d8ae <rmw_destroy_node+0x22>
 800d8f4:	e7e3      	b.n	800d8be <rmw_destroy_node+0x32>
 800d8f6:	4b21      	ldr	r3, [pc, #132]	@ (800d97c <rmw_destroy_node+0xf0>)
 800d8f8:	681c      	ldr	r4, [r3, #0]
 800d8fa:	b16c      	cbz	r4, 800d918 <rmw_destroy_node+0x8c>
 800d8fc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d900:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800d902:	429d      	cmp	r5, r3
 800d904:	d1f9      	bne.n	800d8fa <rmw_destroy_node+0x6e>
 800d906:	317c      	adds	r1, #124	@ 0x7c
 800d908:	4638      	mov	r0, r7
 800d90a:	f000 f9e5 	bl	800dcd8 <rmw_destroy_service>
 800d90e:	2801      	cmp	r0, #1
 800d910:	4606      	mov	r6, r0
 800d912:	d0e3      	beq.n	800d8dc <rmw_destroy_node+0x50>
 800d914:	2c00      	cmp	r4, #0
 800d916:	d1f1      	bne.n	800d8fc <rmw_destroy_node+0x70>
 800d918:	4b19      	ldr	r3, [pc, #100]	@ (800d980 <rmw_destroy_node+0xf4>)
 800d91a:	681c      	ldr	r4, [r3, #0]
 800d91c:	b16c      	cbz	r4, 800d93a <rmw_destroy_node+0xae>
 800d91e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d922:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800d924:	429d      	cmp	r5, r3
 800d926:	d1f9      	bne.n	800d91c <rmw_destroy_node+0x90>
 800d928:	317c      	adds	r1, #124	@ 0x7c
 800d92a:	4638      	mov	r0, r7
 800d92c:	f009 f87c 	bl	8016a28 <rmw_destroy_client>
 800d930:	2801      	cmp	r0, #1
 800d932:	4606      	mov	r6, r0
 800d934:	d0d2      	beq.n	800d8dc <rmw_destroy_node+0x50>
 800d936:	2c00      	cmp	r4, #0
 800d938:	d1f1      	bne.n	800d91e <rmw_destroy_node+0x92>
 800d93a:	6928      	ldr	r0, [r5, #16]
 800d93c:	696a      	ldr	r2, [r5, #20]
 800d93e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d942:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d946:	6819      	ldr	r1, [r3, #0]
 800d948:	f002 fa68 	bl	800fe1c <uxr_buffer_delete_entity>
 800d94c:	4602      	mov	r2, r0
 800d94e:	6928      	ldr	r0, [r5, #16]
 800d950:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d954:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d958:	f000 fd70 	bl	800e43c <run_xrce_session>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	bf08      	it	eq
 800d960:	2602      	moveq	r6, #2
 800d962:	4638      	mov	r0, r7
 800d964:	f000 fbfa 	bl	800e15c <rmw_uxrce_fini_node_memory>
 800d968:	4630      	mov	r0, r6
 800d96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d96c:	4626      	mov	r6, r4
 800d96e:	e7a6      	b.n	800d8be <rmw_destroy_node+0x32>
 800d970:	0801b0c8 	.word	0x0801b0c8
 800d974:	2000aea4 	.word	0x2000aea4
 800d978:	2000aee4 	.word	0x2000aee4
 800d97c:	2000aeb4 	.word	0x2000aeb4
 800d980:	200065c4 	.word	0x200065c4

0800d984 <rmw_node_get_graph_guard_condition>:
 800d984:	6843      	ldr	r3, [r0, #4]
 800d986:	6918      	ldr	r0, [r3, #16]
 800d988:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop

0800d990 <flush_session>:
 800d990:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800d992:	f003 ba65 	b.w	8010e60 <uxr_run_session_until_confirm_delivery>
 800d996:	bf00      	nop

0800d998 <rmw_publish>:
 800d998:	2800      	cmp	r0, #0
 800d99a:	d053      	beq.n	800da44 <rmw_publish+0xac>
 800d99c:	b570      	push	{r4, r5, r6, lr}
 800d99e:	460d      	mov	r5, r1
 800d9a0:	b08e      	sub	sp, #56	@ 0x38
 800d9a2:	2900      	cmp	r1, #0
 800d9a4:	d04b      	beq.n	800da3e <rmw_publish+0xa6>
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	6800      	ldr	r0, [r0, #0]
 800d9aa:	f000 fdc7 	bl	800e53c <is_uxrce_rmw_identifier_valid>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	d045      	beq.n	800da3e <rmw_publish+0xa6>
 800d9b2:	6866      	ldr	r6, [r4, #4]
 800d9b4:	2e00      	cmp	r6, #0
 800d9b6:	d042      	beq.n	800da3e <rmw_publish+0xa6>
 800d9b8:	69b4      	ldr	r4, [r6, #24]
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	6923      	ldr	r3, [r4, #16]
 800d9be:	4798      	blx	r3
 800d9c0:	69f3      	ldr	r3, [r6, #28]
 800d9c2:	9005      	str	r0, [sp, #20]
 800d9c4:	b113      	cbz	r3, 800d9cc <rmw_publish+0x34>
 800d9c6:	a805      	add	r0, sp, #20
 800d9c8:	4798      	blx	r3
 800d9ca:	9805      	ldr	r0, [sp, #20]
 800d9cc:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d9d0:	691b      	ldr	r3, [r3, #16]
 800d9d2:	9000      	str	r0, [sp, #0]
 800d9d4:	6972      	ldr	r2, [r6, #20]
 800d9d6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d9d8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d9dc:	ab06      	add	r3, sp, #24
 800d9de:	f004 fd11 	bl	8012404 <uxr_prepare_output_stream>
 800d9e2:	b1d8      	cbz	r0, 800da1c <rmw_publish+0x84>
 800d9e4:	68a3      	ldr	r3, [r4, #8]
 800d9e6:	a906      	add	r1, sp, #24
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	4798      	blx	r3
 800d9ec:	6a33      	ldr	r3, [r6, #32]
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	b10b      	cbz	r3, 800d9f6 <rmw_publish+0x5e>
 800d9f2:	a806      	add	r0, sp, #24
 800d9f4:	4798      	blx	r3
 800d9f6:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800da00:	d022      	beq.n	800da48 <rmw_publish+0xb0>
 800da02:	6918      	ldr	r0, [r3, #16]
 800da04:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800da06:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800da0a:	f003 fa29 	bl	8010e60 <uxr_run_session_until_confirm_delivery>
 800da0e:	4020      	ands	r0, r4
 800da10:	b2c4      	uxtb	r4, r0
 800da12:	f084 0001 	eor.w	r0, r4, #1
 800da16:	b2c0      	uxtb	r0, r0
 800da18:	b00e      	add	sp, #56	@ 0x38
 800da1a:	bd70      	pop	{r4, r5, r6, pc}
 800da1c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800da20:	6918      	ldr	r0, [r3, #16]
 800da22:	9b05      	ldr	r3, [sp, #20]
 800da24:	9300      	str	r3, [sp, #0]
 800da26:	4b0b      	ldr	r3, [pc, #44]	@ (800da54 <rmw_publish+0xbc>)
 800da28:	9301      	str	r3, [sp, #4]
 800da2a:	9602      	str	r6, [sp, #8]
 800da2c:	6972      	ldr	r2, [r6, #20]
 800da2e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800da30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800da34:	ab06      	add	r3, sp, #24
 800da36:	f004 fd15 	bl	8012464 <uxr_prepare_output_stream_fragmented>
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d1d2      	bne.n	800d9e4 <rmw_publish+0x4c>
 800da3e:	2001      	movs	r0, #1
 800da40:	b00e      	add	sp, #56	@ 0x38
 800da42:	bd70      	pop	{r4, r5, r6, pc}
 800da44:	2001      	movs	r0, #1
 800da46:	4770      	bx	lr
 800da48:	6918      	ldr	r0, [r3, #16]
 800da4a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800da4e:	f002 fe47 	bl	80106e0 <uxr_flash_output_streams>
 800da52:	e7de      	b.n	800da12 <rmw_publish+0x7a>
 800da54:	0800d991 	.word	0x0800d991

0800da58 <rmw_create_publisher>:
 800da58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5c:	b087      	sub	sp, #28
 800da5e:	2800      	cmp	r0, #0
 800da60:	f000 80cc 	beq.w	800dbfc <rmw_create_publisher+0x1a4>
 800da64:	460e      	mov	r6, r1
 800da66:	2900      	cmp	r1, #0
 800da68:	f000 80c8 	beq.w	800dbfc <rmw_create_publisher+0x1a4>
 800da6c:	4604      	mov	r4, r0
 800da6e:	6800      	ldr	r0, [r0, #0]
 800da70:	4615      	mov	r5, r2
 800da72:	4698      	mov	r8, r3
 800da74:	f000 fd62 	bl	800e53c <is_uxrce_rmw_identifier_valid>
 800da78:	2800      	cmp	r0, #0
 800da7a:	f000 80bf 	beq.w	800dbfc <rmw_create_publisher+0x1a4>
 800da7e:	2d00      	cmp	r5, #0
 800da80:	f000 80bc 	beq.w	800dbfc <rmw_create_publisher+0x1a4>
 800da84:	782b      	ldrb	r3, [r5, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	f000 80b8 	beq.w	800dbfc <rmw_create_publisher+0x1a4>
 800da8c:	f1b8 0f00 	cmp.w	r8, #0
 800da90:	f000 80b4 	beq.w	800dbfc <rmw_create_publisher+0x1a4>
 800da94:	485c      	ldr	r0, [pc, #368]	@ (800dc08 <rmw_create_publisher+0x1b0>)
 800da96:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800da9a:	f008 ffa1 	bl	80169e0 <get_memory>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	f000 80ac 	beq.w	800dbfc <rmw_create_publisher+0x1a4>
 800daa4:	6884      	ldr	r4, [r0, #8]
 800daa6:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800daaa:	f009 f801 	bl	8016ab0 <rmw_get_implementation_identifier>
 800daae:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800dab2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800dab6:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800daba:	4628      	mov	r0, r5
 800dabc:	f7f2 fbba 	bl	8000234 <strlen>
 800dac0:	3001      	adds	r0, #1
 800dac2:	283c      	cmp	r0, #60	@ 0x3c
 800dac4:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800dac8:	f200 8091 	bhi.w	800dbee <rmw_create_publisher+0x196>
 800dacc:	4a4f      	ldr	r2, [pc, #316]	@ (800dc0c <rmw_create_publisher+0x1b4>)
 800dace:	462b      	mov	r3, r5
 800dad0:	213c      	movs	r1, #60	@ 0x3c
 800dad2:	4650      	mov	r0, sl
 800dad4:	f00b fc50 	bl	8019378 <sniprintf>
 800dad8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dadc:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800dade:	4641      	mov	r1, r8
 800dae0:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800dae4:	2250      	movs	r2, #80	@ 0x50
 800dae6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800daea:	f00b fe82 	bl	80197f2 <memcpy>
 800daee:	f898 3008 	ldrb.w	r3, [r8, #8]
 800daf2:	4947      	ldr	r1, [pc, #284]	@ (800dc10 <rmw_create_publisher+0x1b8>)
 800daf4:	2b02      	cmp	r3, #2
 800daf6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dafa:	bf0c      	ite	eq
 800dafc:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800db00:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800db04:	67a3      	str	r3, [r4, #120]	@ 0x78
 800db06:	2300      	movs	r3, #0
 800db08:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800db0c:	4630      	mov	r0, r6
 800db0e:	f000 fd23 	bl	800e558 <get_message_typesupport_handle>
 800db12:	2800      	cmp	r0, #0
 800db14:	d06b      	beq.n	800dbee <rmw_create_publisher+0x196>
 800db16:	6842      	ldr	r2, [r0, #4]
 800db18:	61a2      	str	r2, [r4, #24]
 800db1a:	2a00      	cmp	r2, #0
 800db1c:	d067      	beq.n	800dbee <rmw_create_publisher+0x196>
 800db1e:	4629      	mov	r1, r5
 800db20:	4643      	mov	r3, r8
 800db22:	4648      	mov	r0, r9
 800db24:	f008 ffca 	bl	8016abc <create_topic>
 800db28:	6260      	str	r0, [r4, #36]	@ 0x24
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d063      	beq.n	800dbf6 <rmw_create_publisher+0x19e>
 800db2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800db36:	2103      	movs	r1, #3
 800db38:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800db3c:	1c42      	adds	r2, r0, #1
 800db3e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800db42:	f002 fb87 	bl	8010254 <uxr_object_id>
 800db46:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800db4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db4e:	6120      	str	r0, [r4, #16]
 800db50:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800db54:	6910      	ldr	r0, [r2, #16]
 800db56:	2506      	movs	r5, #6
 800db58:	9500      	str	r5, [sp, #0]
 800db5a:	6819      	ldr	r1, [r3, #0]
 800db5c:	6922      	ldr	r2, [r4, #16]
 800db5e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800db62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db66:	f002 fa0d 	bl	800ff84 <uxr_buffer_create_publisher_bin>
 800db6a:	4602      	mov	r2, r0
 800db6c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800db70:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800db74:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800db78:	f000 fc60 	bl	800e43c <run_xrce_session>
 800db7c:	b3b8      	cbz	r0, 800dbee <rmw_create_publisher+0x196>
 800db7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800db86:	2105      	movs	r1, #5
 800db88:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800db8c:	1c42      	adds	r2, r0, #1
 800db8e:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800db92:	f002 fb5f 	bl	8010254 <uxr_object_id>
 800db96:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800db9a:	6160      	str	r0, [r4, #20]
 800db9c:	691e      	ldr	r6, [r3, #16]
 800db9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dba2:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800dba6:	f10d 0a10 	add.w	sl, sp, #16
 800dbaa:	4641      	mov	r1, r8
 800dbac:	4650      	mov	r0, sl
 800dbae:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800dbb2:	f000 fc5f 	bl	800e474 <convert_qos_profile>
 800dbb6:	9503      	str	r5, [sp, #12]
 800dbb8:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800dbbc:	9001      	str	r0, [sp, #4]
 800dbbe:	f8ad 1008 	strh.w	r1, [sp, #8]
 800dbc2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dbc6:	9300      	str	r3, [sp, #0]
 800dbc8:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800dbcc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800dbd0:	f8d8 1000 	ldr.w	r1, [r8]
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f002 fa05 	bl	800ffe4 <uxr_buffer_create_datawriter_bin>
 800dbda:	4602      	mov	r2, r0
 800dbdc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dbe0:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dbe4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dbe8:	f000 fc28 	bl	800e43c <run_xrce_session>
 800dbec:	b938      	cbnz	r0, 800dbfe <rmw_create_publisher+0x1a6>
 800dbee:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800dbf0:	b108      	cbz	r0, 800dbf6 <rmw_create_publisher+0x19e>
 800dbf2:	f000 fb23 	bl	800e23c <rmw_uxrce_fini_topic_memory>
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	f000 fac8 	bl	800e18c <rmw_uxrce_fini_publisher_memory>
 800dbfc:	2700      	movs	r7, #0
 800dbfe:	4638      	mov	r0, r7
 800dc00:	b007      	add	sp, #28
 800dc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc06:	bf00      	nop
 800dc08:	2000aea4 	.word	0x2000aea4
 800dc0c:	0801a714 	.word	0x0801a714
 800dc10:	0801a6e0 	.word	0x0801a6e0

0800dc14 <rmw_publisher_get_actual_qos>:
 800dc14:	b150      	cbz	r0, 800dc2c <rmw_publisher_get_actual_qos+0x18>
 800dc16:	b508      	push	{r3, lr}
 800dc18:	460b      	mov	r3, r1
 800dc1a:	b149      	cbz	r1, 800dc30 <rmw_publisher_get_actual_qos+0x1c>
 800dc1c:	6841      	ldr	r1, [r0, #4]
 800dc1e:	2250      	movs	r2, #80	@ 0x50
 800dc20:	3128      	adds	r1, #40	@ 0x28
 800dc22:	4618      	mov	r0, r3
 800dc24:	f00b fde5 	bl	80197f2 <memcpy>
 800dc28:	2000      	movs	r0, #0
 800dc2a:	bd08      	pop	{r3, pc}
 800dc2c:	200b      	movs	r0, #11
 800dc2e:	4770      	bx	lr
 800dc30:	200b      	movs	r0, #11
 800dc32:	bd08      	pop	{r3, pc}

0800dc34 <rmw_destroy_publisher>:
 800dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc36:	b128      	cbz	r0, 800dc44 <rmw_destroy_publisher+0x10>
 800dc38:	4604      	mov	r4, r0
 800dc3a:	6800      	ldr	r0, [r0, #0]
 800dc3c:	460d      	mov	r5, r1
 800dc3e:	f000 fc7d 	bl	800e53c <is_uxrce_rmw_identifier_valid>
 800dc42:	b910      	cbnz	r0, 800dc4a <rmw_destroy_publisher+0x16>
 800dc44:	2401      	movs	r4, #1
 800dc46:	4620      	mov	r0, r4
 800dc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc4a:	6863      	ldr	r3, [r4, #4]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d0f9      	beq.n	800dc44 <rmw_destroy_publisher+0x10>
 800dc50:	2d00      	cmp	r5, #0
 800dc52:	d0f7      	beq.n	800dc44 <rmw_destroy_publisher+0x10>
 800dc54:	6828      	ldr	r0, [r5, #0]
 800dc56:	f000 fc71 	bl	800e53c <is_uxrce_rmw_identifier_valid>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	d0f2      	beq.n	800dc44 <rmw_destroy_publisher+0x10>
 800dc5e:	686c      	ldr	r4, [r5, #4]
 800dc60:	2c00      	cmp	r4, #0
 800dc62:	d0ef      	beq.n	800dc44 <rmw_destroy_publisher+0x10>
 800dc64:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800dc66:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800dc6a:	f008 ff77 	bl	8016b5c <destroy_topic>
 800dc6e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dc72:	6962      	ldr	r2, [r4, #20]
 800dc74:	6918      	ldr	r0, [r3, #16]
 800dc76:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dc7a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc7e:	6819      	ldr	r1, [r3, #0]
 800dc80:	f002 f8cc 	bl	800fe1c <uxr_buffer_delete_entity>
 800dc84:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dc88:	6922      	ldr	r2, [r4, #16]
 800dc8a:	691b      	ldr	r3, [r3, #16]
 800dc8c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800dc90:	4604      	mov	r4, r0
 800dc92:	6809      	ldr	r1, [r1, #0]
 800dc94:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dc98:	f002 f8c0 	bl	800fe1c <uxr_buffer_delete_entity>
 800dc9c:	693e      	ldr	r6, [r7, #16]
 800dc9e:	4622      	mov	r2, r4
 800dca0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800dca4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800dca8:	4604      	mov	r4, r0
 800dcaa:	4630      	mov	r0, r6
 800dcac:	f000 fbc6 	bl	800e43c <run_xrce_session>
 800dcb0:	693e      	ldr	r6, [r7, #16]
 800dcb2:	4622      	mov	r2, r4
 800dcb4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800dcb8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	f000 fbbc 	bl	800e43c <run_xrce_session>
 800dcc4:	b12c      	cbz	r4, 800dcd2 <rmw_destroy_publisher+0x9e>
 800dcc6:	b120      	cbz	r0, 800dcd2 <rmw_destroy_publisher+0x9e>
 800dcc8:	2400      	movs	r4, #0
 800dcca:	4628      	mov	r0, r5
 800dccc:	f000 fa5e 	bl	800e18c <rmw_uxrce_fini_publisher_memory>
 800dcd0:	e7b9      	b.n	800dc46 <rmw_destroy_publisher+0x12>
 800dcd2:	2402      	movs	r4, #2
 800dcd4:	e7f9      	b.n	800dcca <rmw_destroy_publisher+0x96>
 800dcd6:	bf00      	nop

0800dcd8 <rmw_destroy_service>:
 800dcd8:	b570      	push	{r4, r5, r6, lr}
 800dcda:	b128      	cbz	r0, 800dce8 <rmw_destroy_service+0x10>
 800dcdc:	4604      	mov	r4, r0
 800dcde:	6800      	ldr	r0, [r0, #0]
 800dce0:	460d      	mov	r5, r1
 800dce2:	f000 fc2b 	bl	800e53c <is_uxrce_rmw_identifier_valid>
 800dce6:	b910      	cbnz	r0, 800dcee <rmw_destroy_service+0x16>
 800dce8:	2401      	movs	r4, #1
 800dcea:	4620      	mov	r0, r4
 800dcec:	bd70      	pop	{r4, r5, r6, pc}
 800dcee:	6863      	ldr	r3, [r4, #4]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d0f9      	beq.n	800dce8 <rmw_destroy_service+0x10>
 800dcf4:	2d00      	cmp	r5, #0
 800dcf6:	d0f7      	beq.n	800dce8 <rmw_destroy_service+0x10>
 800dcf8:	6828      	ldr	r0, [r5, #0]
 800dcfa:	f000 fc1f 	bl	800e53c <is_uxrce_rmw_identifier_valid>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d0f2      	beq.n	800dce8 <rmw_destroy_service+0x10>
 800dd02:	686e      	ldr	r6, [r5, #4]
 800dd04:	2e00      	cmp	r6, #0
 800dd06:	d0ef      	beq.n	800dce8 <rmw_destroy_service+0x10>
 800dd08:	6864      	ldr	r4, [r4, #4]
 800dd0a:	6932      	ldr	r2, [r6, #16]
 800dd0c:	6920      	ldr	r0, [r4, #16]
 800dd0e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dd12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd16:	6819      	ldr	r1, [r3, #0]
 800dd18:	f002 facc 	bl	80102b4 <uxr_buffer_cancel_data>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	6920      	ldr	r0, [r4, #16]
 800dd20:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800dd24:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dd28:	f000 fb88 	bl	800e43c <run_xrce_session>
 800dd2c:	6920      	ldr	r0, [r4, #16]
 800dd2e:	6932      	ldr	r2, [r6, #16]
 800dd30:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dd34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd38:	6819      	ldr	r1, [r3, #0]
 800dd3a:	f002 f86f 	bl	800fe1c <uxr_buffer_delete_entity>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	6920      	ldr	r0, [r4, #16]
 800dd42:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800dd46:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dd4a:	f000 fb77 	bl	800e43c <run_xrce_session>
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	4628      	mov	r0, r5
 800dd52:	bf14      	ite	ne
 800dd54:	2400      	movne	r4, #0
 800dd56:	2402      	moveq	r4, #2
 800dd58:	f000 fa44 	bl	800e1e4 <rmw_uxrce_fini_service_memory>
 800dd5c:	e7c5      	b.n	800dcea <rmw_destroy_service+0x12>
 800dd5e:	bf00      	nop

0800dd60 <rmw_destroy_subscription>:
 800dd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd62:	b128      	cbz	r0, 800dd70 <rmw_destroy_subscription+0x10>
 800dd64:	4604      	mov	r4, r0
 800dd66:	6800      	ldr	r0, [r0, #0]
 800dd68:	460d      	mov	r5, r1
 800dd6a:	f000 fbe7 	bl	800e53c <is_uxrce_rmw_identifier_valid>
 800dd6e:	b910      	cbnz	r0, 800dd76 <rmw_destroy_subscription+0x16>
 800dd70:	2401      	movs	r4, #1
 800dd72:	4620      	mov	r0, r4
 800dd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd76:	6863      	ldr	r3, [r4, #4]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d0f9      	beq.n	800dd70 <rmw_destroy_subscription+0x10>
 800dd7c:	2d00      	cmp	r5, #0
 800dd7e:	d0f7      	beq.n	800dd70 <rmw_destroy_subscription+0x10>
 800dd80:	6828      	ldr	r0, [r5, #0]
 800dd82:	f000 fbdb 	bl	800e53c <is_uxrce_rmw_identifier_valid>
 800dd86:	2800      	cmp	r0, #0
 800dd88:	d0f2      	beq.n	800dd70 <rmw_destroy_subscription+0x10>
 800dd8a:	686c      	ldr	r4, [r5, #4]
 800dd8c:	2c00      	cmp	r4, #0
 800dd8e:	d0ef      	beq.n	800dd70 <rmw_destroy_subscription+0x10>
 800dd90:	6a26      	ldr	r6, [r4, #32]
 800dd92:	6962      	ldr	r2, [r4, #20]
 800dd94:	6930      	ldr	r0, [r6, #16]
 800dd96:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dd9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd9e:	6819      	ldr	r1, [r3, #0]
 800dda0:	f002 fa88 	bl	80102b4 <uxr_buffer_cancel_data>
 800dda4:	4602      	mov	r2, r0
 800dda6:	6930      	ldr	r0, [r6, #16]
 800dda8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ddac:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ddb0:	f000 fb44 	bl	800e43c <run_xrce_session>
 800ddb4:	69e0      	ldr	r0, [r4, #28]
 800ddb6:	f008 fed1 	bl	8016b5c <destroy_topic>
 800ddba:	6a23      	ldr	r3, [r4, #32]
 800ddbc:	6962      	ldr	r2, [r4, #20]
 800ddbe:	6918      	ldr	r0, [r3, #16]
 800ddc0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ddc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ddc8:	6819      	ldr	r1, [r3, #0]
 800ddca:	f002 f827 	bl	800fe1c <uxr_buffer_delete_entity>
 800ddce:	6a23      	ldr	r3, [r4, #32]
 800ddd0:	6922      	ldr	r2, [r4, #16]
 800ddd2:	691b      	ldr	r3, [r3, #16]
 800ddd4:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ddd8:	4604      	mov	r4, r0
 800ddda:	6809      	ldr	r1, [r1, #0]
 800dddc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dde0:	f002 f81c 	bl	800fe1c <uxr_buffer_delete_entity>
 800dde4:	6937      	ldr	r7, [r6, #16]
 800dde6:	4622      	mov	r2, r4
 800dde8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ddec:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	4638      	mov	r0, r7
 800ddf4:	f000 fb22 	bl	800e43c <run_xrce_session>
 800ddf8:	6936      	ldr	r6, [r6, #16]
 800ddfa:	4622      	mov	r2, r4
 800ddfc:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800de00:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800de04:	4604      	mov	r4, r0
 800de06:	4630      	mov	r0, r6
 800de08:	f000 fb18 	bl	800e43c <run_xrce_session>
 800de0c:	b12c      	cbz	r4, 800de1a <rmw_destroy_subscription+0xba>
 800de0e:	b120      	cbz	r0, 800de1a <rmw_destroy_subscription+0xba>
 800de10:	2400      	movs	r4, #0
 800de12:	4628      	mov	r0, r5
 800de14:	f000 f9d0 	bl	800e1b8 <rmw_uxrce_fini_subscription_memory>
 800de18:	e7ab      	b.n	800dd72 <rmw_destroy_subscription+0x12>
 800de1a:	2402      	movs	r4, #2
 800de1c:	e7f9      	b.n	800de12 <rmw_destroy_subscription+0xb2>
 800de1e:	bf00      	nop

0800de20 <rmw_uxrce_transport_init>:
 800de20:	b508      	push	{r3, lr}
 800de22:	b108      	cbz	r0, 800de28 <rmw_uxrce_transport_init+0x8>
 800de24:	f100 0210 	add.w	r2, r0, #16
 800de28:	b139      	cbz	r1, 800de3a <rmw_uxrce_transport_init+0x1a>
 800de2a:	6949      	ldr	r1, [r1, #20]
 800de2c:	4610      	mov	r0, r2
 800de2e:	f002 f9d9 	bl	80101e4 <uxr_init_custom_transport>
 800de32:	f080 0001 	eor.w	r0, r0, #1
 800de36:	b2c0      	uxtb	r0, r0
 800de38:	bd08      	pop	{r3, pc}
 800de3a:	4b04      	ldr	r3, [pc, #16]	@ (800de4c <rmw_uxrce_transport_init+0x2c>)
 800de3c:	4610      	mov	r0, r2
 800de3e:	6859      	ldr	r1, [r3, #4]
 800de40:	f002 f9d0 	bl	80101e4 <uxr_init_custom_transport>
 800de44:	f080 0001 	eor.w	r0, r0, #1
 800de48:	b2c0      	uxtb	r0, r0
 800de4a:	bd08      	pop	{r3, pc}
 800de4c:	2000656c 	.word	0x2000656c

0800de50 <rmw_uros_epoch_nanos>:
 800de50:	4b05      	ldr	r3, [pc, #20]	@ (800de68 <rmw_uros_epoch_nanos+0x18>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	b123      	cbz	r3, 800de60 <rmw_uros_epoch_nanos+0x10>
 800de56:	6898      	ldr	r0, [r3, #8]
 800de58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de5c:	f002 bc36 	b.w	80106cc <uxr_epoch_nanos>
 800de60:	2000      	movs	r0, #0
 800de62:	2100      	movs	r1, #0
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop
 800de68:	2000aec4 	.word	0x2000aec4

0800de6c <rmw_uros_sync_session>:
 800de6c:	b508      	push	{r3, lr}
 800de6e:	4b07      	ldr	r3, [pc, #28]	@ (800de8c <rmw_uros_sync_session+0x20>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	b14b      	cbz	r3, 800de88 <rmw_uros_sync_session+0x1c>
 800de74:	4601      	mov	r1, r0
 800de76:	6898      	ldr	r0, [r3, #8]
 800de78:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de7c:	f003 f868 	bl	8010f50 <uxr_sync_session>
 800de80:	f080 0001 	eor.w	r0, r0, #1
 800de84:	b2c0      	uxtb	r0, r0
 800de86:	bd08      	pop	{r3, pc}
 800de88:	2001      	movs	r0, #1
 800de8a:	bd08      	pop	{r3, pc}
 800de8c:	2000aec4 	.word	0x2000aec4

0800de90 <rmw_uxrce_init_service_memory>:
 800de90:	b1e2      	cbz	r2, 800decc <rmw_uxrce_init_service_memory+0x3c>
 800de92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de96:	7b05      	ldrb	r5, [r0, #12]
 800de98:	4606      	mov	r6, r0
 800de9a:	b9ad      	cbnz	r5, 800dec8 <rmw_uxrce_init_service_memory+0x38>
 800de9c:	23c8      	movs	r3, #200	@ 0xc8
 800de9e:	e9c0 5500 	strd	r5, r5, [r0]
 800dea2:	6083      	str	r3, [r0, #8]
 800dea4:	f240 1301 	movw	r3, #257	@ 0x101
 800dea8:	4617      	mov	r7, r2
 800deaa:	8183      	strh	r3, [r0, #12]
 800deac:	460c      	mov	r4, r1
 800deae:	46a8      	mov	r8, r5
 800deb0:	4621      	mov	r1, r4
 800deb2:	4630      	mov	r0, r6
 800deb4:	3501      	adds	r5, #1
 800deb6:	f008 fda3 	bl	8016a00 <put_memory>
 800deba:	42af      	cmp	r7, r5
 800debc:	60a4      	str	r4, [r4, #8]
 800debe:	f884 800c 	strb.w	r8, [r4, #12]
 800dec2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800dec6:	d1f3      	bne.n	800deb0 <rmw_uxrce_init_service_memory+0x20>
 800dec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800decc:	4770      	bx	lr
 800dece:	bf00      	nop

0800ded0 <rmw_uxrce_init_client_memory>:
 800ded0:	b1e2      	cbz	r2, 800df0c <rmw_uxrce_init_client_memory+0x3c>
 800ded2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ded6:	7b05      	ldrb	r5, [r0, #12]
 800ded8:	4606      	mov	r6, r0
 800deda:	b9ad      	cbnz	r5, 800df08 <rmw_uxrce_init_client_memory+0x38>
 800dedc:	23c8      	movs	r3, #200	@ 0xc8
 800dede:	e9c0 5500 	strd	r5, r5, [r0]
 800dee2:	6083      	str	r3, [r0, #8]
 800dee4:	f240 1301 	movw	r3, #257	@ 0x101
 800dee8:	4617      	mov	r7, r2
 800deea:	8183      	strh	r3, [r0, #12]
 800deec:	460c      	mov	r4, r1
 800deee:	46a8      	mov	r8, r5
 800def0:	4621      	mov	r1, r4
 800def2:	4630      	mov	r0, r6
 800def4:	3501      	adds	r5, #1
 800def6:	f008 fd83 	bl	8016a00 <put_memory>
 800defa:	42af      	cmp	r7, r5
 800defc:	60a4      	str	r4, [r4, #8]
 800defe:	f884 800c 	strb.w	r8, [r4, #12]
 800df02:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800df06:	d1f3      	bne.n	800def0 <rmw_uxrce_init_client_memory+0x20>
 800df08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop

0800df10 <rmw_uxrce_init_publisher_memory>:
 800df10:	b1e2      	cbz	r2, 800df4c <rmw_uxrce_init_publisher_memory+0x3c>
 800df12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df16:	7b05      	ldrb	r5, [r0, #12]
 800df18:	4606      	mov	r6, r0
 800df1a:	b9ad      	cbnz	r5, 800df48 <rmw_uxrce_init_publisher_memory+0x38>
 800df1c:	23d8      	movs	r3, #216	@ 0xd8
 800df1e:	e9c0 5500 	strd	r5, r5, [r0]
 800df22:	6083      	str	r3, [r0, #8]
 800df24:	f240 1301 	movw	r3, #257	@ 0x101
 800df28:	4617      	mov	r7, r2
 800df2a:	8183      	strh	r3, [r0, #12]
 800df2c:	460c      	mov	r4, r1
 800df2e:	46a8      	mov	r8, r5
 800df30:	4621      	mov	r1, r4
 800df32:	4630      	mov	r0, r6
 800df34:	3501      	adds	r5, #1
 800df36:	f008 fd63 	bl	8016a00 <put_memory>
 800df3a:	42af      	cmp	r7, r5
 800df3c:	60a4      	str	r4, [r4, #8]
 800df3e:	f884 800c 	strb.w	r8, [r4, #12]
 800df42:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800df46:	d1f3      	bne.n	800df30 <rmw_uxrce_init_publisher_memory+0x20>
 800df48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop

0800df50 <rmw_uxrce_init_subscription_memory>:
 800df50:	b1e2      	cbz	r2, 800df8c <rmw_uxrce_init_subscription_memory+0x3c>
 800df52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df56:	7b05      	ldrb	r5, [r0, #12]
 800df58:	4606      	mov	r6, r0
 800df5a:	b9ad      	cbnz	r5, 800df88 <rmw_uxrce_init_subscription_memory+0x38>
 800df5c:	23d8      	movs	r3, #216	@ 0xd8
 800df5e:	e9c0 5500 	strd	r5, r5, [r0]
 800df62:	6083      	str	r3, [r0, #8]
 800df64:	f240 1301 	movw	r3, #257	@ 0x101
 800df68:	4617      	mov	r7, r2
 800df6a:	8183      	strh	r3, [r0, #12]
 800df6c:	460c      	mov	r4, r1
 800df6e:	46a8      	mov	r8, r5
 800df70:	4621      	mov	r1, r4
 800df72:	4630      	mov	r0, r6
 800df74:	3501      	adds	r5, #1
 800df76:	f008 fd43 	bl	8016a00 <put_memory>
 800df7a:	42af      	cmp	r7, r5
 800df7c:	60a4      	str	r4, [r4, #8]
 800df7e:	f884 800c 	strb.w	r8, [r4, #12]
 800df82:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800df86:	d1f3      	bne.n	800df70 <rmw_uxrce_init_subscription_memory+0x20>
 800df88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop

0800df90 <rmw_uxrce_init_node_memory>:
 800df90:	b1e2      	cbz	r2, 800dfcc <rmw_uxrce_init_node_memory+0x3c>
 800df92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df96:	7b05      	ldrb	r5, [r0, #12]
 800df98:	4606      	mov	r6, r0
 800df9a:	b9ad      	cbnz	r5, 800dfc8 <rmw_uxrce_init_node_memory+0x38>
 800df9c:	23a4      	movs	r3, #164	@ 0xa4
 800df9e:	e9c0 5500 	strd	r5, r5, [r0]
 800dfa2:	6083      	str	r3, [r0, #8]
 800dfa4:	f240 1301 	movw	r3, #257	@ 0x101
 800dfa8:	4617      	mov	r7, r2
 800dfaa:	8183      	strh	r3, [r0, #12]
 800dfac:	460c      	mov	r4, r1
 800dfae:	46a8      	mov	r8, r5
 800dfb0:	4621      	mov	r1, r4
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	3501      	adds	r5, #1
 800dfb6:	f008 fd23 	bl	8016a00 <put_memory>
 800dfba:	42af      	cmp	r7, r5
 800dfbc:	60a4      	str	r4, [r4, #8]
 800dfbe:	f884 800c 	strb.w	r8, [r4, #12]
 800dfc2:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800dfc6:	d1f3      	bne.n	800dfb0 <rmw_uxrce_init_node_memory+0x20>
 800dfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop

0800dfd0 <rmw_uxrce_init_session_memory>:
 800dfd0:	b1ea      	cbz	r2, 800e00e <rmw_uxrce_init_session_memory+0x3e>
 800dfd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfd6:	7b05      	ldrb	r5, [r0, #12]
 800dfd8:	4606      	mov	r6, r0
 800dfda:	b9b5      	cbnz	r5, 800e00a <rmw_uxrce_init_session_memory+0x3a>
 800dfdc:	e9c0 5500 	strd	r5, r5, [r0]
 800dfe0:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800dfe4:	f240 1301 	movw	r3, #257	@ 0x101
 800dfe8:	4617      	mov	r7, r2
 800dfea:	f8c0 8008 	str.w	r8, [r0, #8]
 800dfee:	460c      	mov	r4, r1
 800dff0:	8183      	strh	r3, [r0, #12]
 800dff2:	46a9      	mov	r9, r5
 800dff4:	4621      	mov	r1, r4
 800dff6:	4630      	mov	r0, r6
 800dff8:	3501      	adds	r5, #1
 800dffa:	f008 fd01 	bl	8016a00 <put_memory>
 800dffe:	42af      	cmp	r7, r5
 800e000:	60a4      	str	r4, [r4, #8]
 800e002:	f884 900c 	strb.w	r9, [r4, #12]
 800e006:	4444      	add	r4, r8
 800e008:	d1f4      	bne.n	800dff4 <rmw_uxrce_init_session_memory+0x24>
 800e00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e00e:	4770      	bx	lr

0800e010 <rmw_uxrce_init_topic_memory>:
 800e010:	b1e2      	cbz	r2, 800e04c <rmw_uxrce_init_topic_memory+0x3c>
 800e012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e016:	7b05      	ldrb	r5, [r0, #12]
 800e018:	4606      	mov	r6, r0
 800e01a:	b9ad      	cbnz	r5, 800e048 <rmw_uxrce_init_topic_memory+0x38>
 800e01c:	231c      	movs	r3, #28
 800e01e:	e9c0 5500 	strd	r5, r5, [r0]
 800e022:	6083      	str	r3, [r0, #8]
 800e024:	f240 1301 	movw	r3, #257	@ 0x101
 800e028:	4617      	mov	r7, r2
 800e02a:	8183      	strh	r3, [r0, #12]
 800e02c:	460c      	mov	r4, r1
 800e02e:	46a8      	mov	r8, r5
 800e030:	4621      	mov	r1, r4
 800e032:	4630      	mov	r0, r6
 800e034:	3501      	adds	r5, #1
 800e036:	f008 fce3 	bl	8016a00 <put_memory>
 800e03a:	42af      	cmp	r7, r5
 800e03c:	60a4      	str	r4, [r4, #8]
 800e03e:	f884 800c 	strb.w	r8, [r4, #12]
 800e042:	f104 041c 	add.w	r4, r4, #28
 800e046:	d1f3      	bne.n	800e030 <rmw_uxrce_init_topic_memory+0x20>
 800e048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e04c:	4770      	bx	lr
 800e04e:	bf00      	nop

0800e050 <rmw_uxrce_init_static_input_buffer_memory>:
 800e050:	b1ea      	cbz	r2, 800e08e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e056:	7b05      	ldrb	r5, [r0, #12]
 800e058:	4606      	mov	r6, r0
 800e05a:	b9b5      	cbnz	r5, 800e08a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e05c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e060:	e9c0 5500 	strd	r5, r5, [r0]
 800e064:	6083      	str	r3, [r0, #8]
 800e066:	f240 1301 	movw	r3, #257	@ 0x101
 800e06a:	4617      	mov	r7, r2
 800e06c:	8183      	strh	r3, [r0, #12]
 800e06e:	460c      	mov	r4, r1
 800e070:	46a8      	mov	r8, r5
 800e072:	4621      	mov	r1, r4
 800e074:	4630      	mov	r0, r6
 800e076:	3501      	adds	r5, #1
 800e078:	f008 fcc2 	bl	8016a00 <put_memory>
 800e07c:	42af      	cmp	r7, r5
 800e07e:	60a4      	str	r4, [r4, #8]
 800e080:	f884 800c 	strb.w	r8, [r4, #12]
 800e084:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e088:	d1f3      	bne.n	800e072 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e08e:	4770      	bx	lr

0800e090 <rmw_uxrce_init_init_options_impl_memory>:
 800e090:	b1e2      	cbz	r2, 800e0cc <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e096:	7b05      	ldrb	r5, [r0, #12]
 800e098:	4606      	mov	r6, r0
 800e09a:	b9ad      	cbnz	r5, 800e0c8 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e09c:	232c      	movs	r3, #44	@ 0x2c
 800e09e:	e9c0 5500 	strd	r5, r5, [r0]
 800e0a2:	6083      	str	r3, [r0, #8]
 800e0a4:	f240 1301 	movw	r3, #257	@ 0x101
 800e0a8:	4617      	mov	r7, r2
 800e0aa:	8183      	strh	r3, [r0, #12]
 800e0ac:	460c      	mov	r4, r1
 800e0ae:	46a8      	mov	r8, r5
 800e0b0:	4621      	mov	r1, r4
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	3501      	adds	r5, #1
 800e0b6:	f008 fca3 	bl	8016a00 <put_memory>
 800e0ba:	42af      	cmp	r7, r5
 800e0bc:	60a4      	str	r4, [r4, #8]
 800e0be:	f884 800c 	strb.w	r8, [r4, #12]
 800e0c2:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800e0c6:	d1f3      	bne.n	800e0b0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop

0800e0d0 <rmw_uxrce_init_wait_set_memory>:
 800e0d0:	b1e2      	cbz	r2, 800e10c <rmw_uxrce_init_wait_set_memory+0x3c>
 800e0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d6:	7b05      	ldrb	r5, [r0, #12]
 800e0d8:	4606      	mov	r6, r0
 800e0da:	b9ad      	cbnz	r5, 800e108 <rmw_uxrce_init_wait_set_memory+0x38>
 800e0dc:	231c      	movs	r3, #28
 800e0de:	e9c0 5500 	strd	r5, r5, [r0]
 800e0e2:	6083      	str	r3, [r0, #8]
 800e0e4:	f240 1301 	movw	r3, #257	@ 0x101
 800e0e8:	4617      	mov	r7, r2
 800e0ea:	8183      	strh	r3, [r0, #12]
 800e0ec:	460c      	mov	r4, r1
 800e0ee:	46a8      	mov	r8, r5
 800e0f0:	4621      	mov	r1, r4
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	3501      	adds	r5, #1
 800e0f6:	f008 fc83 	bl	8016a00 <put_memory>
 800e0fa:	42af      	cmp	r7, r5
 800e0fc:	60a4      	str	r4, [r4, #8]
 800e0fe:	f884 800c 	strb.w	r8, [r4, #12]
 800e102:	f104 041c 	add.w	r4, r4, #28
 800e106:	d1f3      	bne.n	800e0f0 <rmw_uxrce_init_wait_set_memory+0x20>
 800e108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop

0800e110 <rmw_uxrce_init_guard_condition_memory>:
 800e110:	b1e2      	cbz	r2, 800e14c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e116:	7b05      	ldrb	r5, [r0, #12]
 800e118:	4606      	mov	r6, r0
 800e11a:	b9ad      	cbnz	r5, 800e148 <rmw_uxrce_init_guard_condition_memory+0x38>
 800e11c:	2320      	movs	r3, #32
 800e11e:	e9c0 5500 	strd	r5, r5, [r0]
 800e122:	6083      	str	r3, [r0, #8]
 800e124:	f240 1301 	movw	r3, #257	@ 0x101
 800e128:	4617      	mov	r7, r2
 800e12a:	8183      	strh	r3, [r0, #12]
 800e12c:	460c      	mov	r4, r1
 800e12e:	46a8      	mov	r8, r5
 800e130:	4621      	mov	r1, r4
 800e132:	4630      	mov	r0, r6
 800e134:	3501      	adds	r5, #1
 800e136:	f008 fc63 	bl	8016a00 <put_memory>
 800e13a:	42af      	cmp	r7, r5
 800e13c:	60a4      	str	r4, [r4, #8]
 800e13e:	f884 800c 	strb.w	r8, [r4, #12]
 800e142:	f104 0420 	add.w	r4, r4, #32
 800e146:	d1f3      	bne.n	800e130 <rmw_uxrce_init_guard_condition_memory+0x20>
 800e148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e14c:	4770      	bx	lr
 800e14e:	bf00      	nop

0800e150 <rmw_uxrce_fini_session_memory>:
 800e150:	4601      	mov	r1, r0
 800e152:	4801      	ldr	r0, [pc, #4]	@ (800e158 <rmw_uxrce_fini_session_memory+0x8>)
 800e154:	f008 bc54 	b.w	8016a00 <put_memory>
 800e158:	2000aec4 	.word	0x2000aec4

0800e15c <rmw_uxrce_fini_node_memory>:
 800e15c:	b538      	push	{r3, r4, r5, lr}
 800e15e:	4604      	mov	r4, r0
 800e160:	6800      	ldr	r0, [r0, #0]
 800e162:	b128      	cbz	r0, 800e170 <rmw_uxrce_fini_node_memory+0x14>
 800e164:	4b07      	ldr	r3, [pc, #28]	@ (800e184 <rmw_uxrce_fini_node_memory+0x28>)
 800e166:	6819      	ldr	r1, [r3, #0]
 800e168:	f7f2 f85a 	bl	8000220 <strcmp>
 800e16c:	b940      	cbnz	r0, 800e180 <rmw_uxrce_fini_node_memory+0x24>
 800e16e:	6020      	str	r0, [r4, #0]
 800e170:	6861      	ldr	r1, [r4, #4]
 800e172:	b129      	cbz	r1, 800e180 <rmw_uxrce_fini_node_memory+0x24>
 800e174:	2500      	movs	r5, #0
 800e176:	4804      	ldr	r0, [pc, #16]	@ (800e188 <rmw_uxrce_fini_node_memory+0x2c>)
 800e178:	610d      	str	r5, [r1, #16]
 800e17a:	f008 fc41 	bl	8016a00 <put_memory>
 800e17e:	6065      	str	r5, [r4, #4]
 800e180:	bd38      	pop	{r3, r4, r5, pc}
 800e182:	bf00      	nop
 800e184:	0801b0c8 	.word	0x0801b0c8
 800e188:	2000ae94 	.word	0x2000ae94

0800e18c <rmw_uxrce_fini_publisher_memory>:
 800e18c:	b510      	push	{r4, lr}
 800e18e:	4604      	mov	r4, r0
 800e190:	6800      	ldr	r0, [r0, #0]
 800e192:	b128      	cbz	r0, 800e1a0 <rmw_uxrce_fini_publisher_memory+0x14>
 800e194:	4b06      	ldr	r3, [pc, #24]	@ (800e1b0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e196:	6819      	ldr	r1, [r3, #0]
 800e198:	f7f2 f842 	bl	8000220 <strcmp>
 800e19c:	b938      	cbnz	r0, 800e1ae <rmw_uxrce_fini_publisher_memory+0x22>
 800e19e:	6020      	str	r0, [r4, #0]
 800e1a0:	6861      	ldr	r1, [r4, #4]
 800e1a2:	b121      	cbz	r1, 800e1ae <rmw_uxrce_fini_publisher_memory+0x22>
 800e1a4:	4803      	ldr	r0, [pc, #12]	@ (800e1b4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e1a6:	f008 fc2b 	bl	8016a00 <put_memory>
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	6063      	str	r3, [r4, #4]
 800e1ae:	bd10      	pop	{r4, pc}
 800e1b0:	0801b0c8 	.word	0x0801b0c8
 800e1b4:	2000aea4 	.word	0x2000aea4

0800e1b8 <rmw_uxrce_fini_subscription_memory>:
 800e1b8:	b510      	push	{r4, lr}
 800e1ba:	4604      	mov	r4, r0
 800e1bc:	6800      	ldr	r0, [r0, #0]
 800e1be:	b128      	cbz	r0, 800e1cc <rmw_uxrce_fini_subscription_memory+0x14>
 800e1c0:	4b06      	ldr	r3, [pc, #24]	@ (800e1dc <rmw_uxrce_fini_subscription_memory+0x24>)
 800e1c2:	6819      	ldr	r1, [r3, #0]
 800e1c4:	f7f2 f82c 	bl	8000220 <strcmp>
 800e1c8:	b938      	cbnz	r0, 800e1da <rmw_uxrce_fini_subscription_memory+0x22>
 800e1ca:	6020      	str	r0, [r4, #0]
 800e1cc:	6861      	ldr	r1, [r4, #4]
 800e1ce:	b121      	cbz	r1, 800e1da <rmw_uxrce_fini_subscription_memory+0x22>
 800e1d0:	4803      	ldr	r0, [pc, #12]	@ (800e1e0 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e1d2:	f008 fc15 	bl	8016a00 <put_memory>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	6063      	str	r3, [r4, #4]
 800e1da:	bd10      	pop	{r4, pc}
 800e1dc:	0801b0c8 	.word	0x0801b0c8
 800e1e0:	2000aee4 	.word	0x2000aee4

0800e1e4 <rmw_uxrce_fini_service_memory>:
 800e1e4:	b510      	push	{r4, lr}
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	6800      	ldr	r0, [r0, #0]
 800e1ea:	b128      	cbz	r0, 800e1f8 <rmw_uxrce_fini_service_memory+0x14>
 800e1ec:	4b06      	ldr	r3, [pc, #24]	@ (800e208 <rmw_uxrce_fini_service_memory+0x24>)
 800e1ee:	6819      	ldr	r1, [r3, #0]
 800e1f0:	f7f2 f816 	bl	8000220 <strcmp>
 800e1f4:	b938      	cbnz	r0, 800e206 <rmw_uxrce_fini_service_memory+0x22>
 800e1f6:	6020      	str	r0, [r4, #0]
 800e1f8:	6861      	ldr	r1, [r4, #4]
 800e1fa:	b121      	cbz	r1, 800e206 <rmw_uxrce_fini_service_memory+0x22>
 800e1fc:	4803      	ldr	r0, [pc, #12]	@ (800e20c <rmw_uxrce_fini_service_memory+0x28>)
 800e1fe:	f008 fbff 	bl	8016a00 <put_memory>
 800e202:	2300      	movs	r3, #0
 800e204:	6063      	str	r3, [r4, #4]
 800e206:	bd10      	pop	{r4, pc}
 800e208:	0801b0c8 	.word	0x0801b0c8
 800e20c:	2000aeb4 	.word	0x2000aeb4

0800e210 <rmw_uxrce_fini_client_memory>:
 800e210:	b510      	push	{r4, lr}
 800e212:	4604      	mov	r4, r0
 800e214:	6800      	ldr	r0, [r0, #0]
 800e216:	b128      	cbz	r0, 800e224 <rmw_uxrce_fini_client_memory+0x14>
 800e218:	4b06      	ldr	r3, [pc, #24]	@ (800e234 <rmw_uxrce_fini_client_memory+0x24>)
 800e21a:	6819      	ldr	r1, [r3, #0]
 800e21c:	f7f2 f800 	bl	8000220 <strcmp>
 800e220:	b938      	cbnz	r0, 800e232 <rmw_uxrce_fini_client_memory+0x22>
 800e222:	6020      	str	r0, [r4, #0]
 800e224:	6861      	ldr	r1, [r4, #4]
 800e226:	b121      	cbz	r1, 800e232 <rmw_uxrce_fini_client_memory+0x22>
 800e228:	4803      	ldr	r0, [pc, #12]	@ (800e238 <rmw_uxrce_fini_client_memory+0x28>)
 800e22a:	f008 fbe9 	bl	8016a00 <put_memory>
 800e22e:	2300      	movs	r3, #0
 800e230:	6063      	str	r3, [r4, #4]
 800e232:	bd10      	pop	{r4, pc}
 800e234:	0801b0c8 	.word	0x0801b0c8
 800e238:	200065c4 	.word	0x200065c4

0800e23c <rmw_uxrce_fini_topic_memory>:
 800e23c:	b510      	push	{r4, lr}
 800e23e:	4604      	mov	r4, r0
 800e240:	4621      	mov	r1, r4
 800e242:	4803      	ldr	r0, [pc, #12]	@ (800e250 <rmw_uxrce_fini_topic_memory+0x14>)
 800e244:	f008 fbdc 	bl	8016a00 <put_memory>
 800e248:	2300      	movs	r3, #0
 800e24a:	61a3      	str	r3, [r4, #24]
 800e24c:	bd10      	pop	{r4, pc}
 800e24e:	bf00      	nop
 800e250:	2000aef4 	.word	0x2000aef4

0800e254 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e254:	b082      	sub	sp, #8
 800e256:	b530      	push	{r4, r5, lr}
 800e258:	4925      	ldr	r1, [pc, #148]	@ (800e2f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e25a:	680d      	ldr	r5, [r1, #0]
 800e25c:	ac03      	add	r4, sp, #12
 800e25e:	e884 000c 	stmia.w	r4, {r2, r3}
 800e262:	461c      	mov	r4, r3
 800e264:	2d00      	cmp	r5, #0
 800e266:	d041      	beq.n	800e2ec <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800e268:	462b      	mov	r3, r5
 800e26a:	2100      	movs	r1, #0
 800e26c:	689a      	ldr	r2, [r3, #8]
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800e274:	4290      	cmp	r0, r2
 800e276:	bf08      	it	eq
 800e278:	3101      	addeq	r1, #1
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1f6      	bne.n	800e26c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e27e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e282:	2b02      	cmp	r3, #2
 800e284:	d029      	beq.n	800e2da <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e286:	d907      	bls.n	800e298 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e288:	2b03      	cmp	r3, #3
 800e28a:	d005      	beq.n	800e298 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e28c:	2100      	movs	r1, #0
 800e28e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e292:	4608      	mov	r0, r1
 800e294:	b002      	add	sp, #8
 800e296:	4770      	bx	lr
 800e298:	b314      	cbz	r4, 800e2e0 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e29a:	428c      	cmp	r4, r1
 800e29c:	d820      	bhi.n	800e2e0 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e29e:	2d00      	cmp	r5, #0
 800e2a0:	d0f4      	beq.n	800e28c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e2a2:	2100      	movs	r1, #0
 800e2a4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800e2a8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e2ac:	e002      	b.n	800e2b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800e2ae:	686d      	ldr	r5, [r5, #4]
 800e2b0:	2d00      	cmp	r5, #0
 800e2b2:	d0ec      	beq.n	800e28e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e2b4:	68ab      	ldr	r3, [r5, #8]
 800e2b6:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e2ba:	4290      	cmp	r0, r2
 800e2bc:	d1f7      	bne.n	800e2ae <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e2be:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e2c2:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e2c6:	4562      	cmp	r2, ip
 800e2c8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e2cc:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e2d0:	daed      	bge.n	800e2ae <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e2d2:	4694      	mov	ip, r2
 800e2d4:	461c      	mov	r4, r3
 800e2d6:	4629      	mov	r1, r5
 800e2d8:	e7e9      	b.n	800e2ae <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e2da:	b10c      	cbz	r4, 800e2e0 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e2dc:	428c      	cmp	r4, r1
 800e2de:	d9d5      	bls.n	800e28c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e2e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2e4:	4802      	ldr	r0, [pc, #8]	@ (800e2f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e2e6:	b002      	add	sp, #8
 800e2e8:	f008 bb7a 	b.w	80169e0 <get_memory>
 800e2ec:	4629      	mov	r1, r5
 800e2ee:	e7c6      	b.n	800e27e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e2f0:	2000aed4 	.word	0x2000aed4

0800e2f4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e2f4:	4b11      	ldr	r3, [pc, #68]	@ (800e33c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	b530      	push	{r4, r5, lr}
 800e2fa:	b1e3      	cbz	r3, 800e336 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e2fc:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800e300:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e304:	2400      	movs	r4, #0
 800e306:	e001      	b.n	800e30c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	b193      	cbz	r3, 800e332 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800e30c:	689a      	ldr	r2, [r3, #8]
 800e30e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e312:	4288      	cmp	r0, r1
 800e314:	d1f8      	bne.n	800e308 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e316:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e31a:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e31e:	4571      	cmp	r1, lr
 800e320:	eb72 050c 	sbcs.w	r5, r2, ip
 800e324:	daf0      	bge.n	800e308 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e326:	461c      	mov	r4, r3
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	468e      	mov	lr, r1
 800e32c:	4694      	mov	ip, r2
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d1ec      	bne.n	800e30c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e332:	4620      	mov	r0, r4
 800e334:	bd30      	pop	{r4, r5, pc}
 800e336:	461c      	mov	r4, r3
 800e338:	4620      	mov	r0, r4
 800e33a:	bd30      	pop	{r4, r5, pc}
 800e33c:	2000aed4 	.word	0x2000aed4

0800e340 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	4b3c      	ldr	r3, [pc, #240]	@ (800e438 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e346:	ed2d 8b06 	vpush	{d8-d10}
 800e34a:	681f      	ldr	r7, [r3, #0]
 800e34c:	b08d      	sub	sp, #52	@ 0x34
 800e34e:	f7ff fd7f 	bl	800de50 <rmw_uros_epoch_nanos>
 800e352:	2f00      	cmp	r7, #0
 800e354:	d05d      	beq.n	800e412 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e356:	46b8      	mov	r8, r7
 800e358:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800e420 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e35c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e360:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e364:	2b04      	cmp	r3, #4
 800e366:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800e428 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e36a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800e430 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e36e:	4681      	mov	r9, r0
 800e370:	468a      	mov	sl, r1
 800e372:	ac04      	add	r4, sp, #16
 800e374:	d03f      	beq.n	800e3f6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e376:	2b05      	cmp	r3, #5
 800e378:	d044      	beq.n	800e404 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e37a:	2b03      	cmp	r3, #3
 800e37c:	d03b      	beq.n	800e3f6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e37e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e382:	ed8d ab06 	vstr	d10, [sp, #24]
 800e386:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e38a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e38e:	ab08      	add	r3, sp, #32
 800e390:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e392:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e396:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e39a:	f008 f86d 	bl	8016478 <rmw_time_equal>
 800e39e:	b118      	cbz	r0, 800e3a8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e3a0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e3a4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e3a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e3ac:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800e3b0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800e3b4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e3b8:	f008 f8b2 	bl	8016520 <rmw_time_total_nsec>
 800e3bc:	1830      	adds	r0, r6, r0
 800e3be:	eb47 0101 	adc.w	r1, r7, r1
 800e3c2:	4548      	cmp	r0, r9
 800e3c4:	eb71 030a 	sbcs.w	r3, r1, sl
 800e3c8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e3cc:	db05      	blt.n	800e3da <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e3ce:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e3d2:	4591      	cmp	r9, r2
 800e3d4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e3d8:	da03      	bge.n	800e3e2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e3da:	4817      	ldr	r0, [pc, #92]	@ (800e438 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e3dc:	4641      	mov	r1, r8
 800e3de:	f008 fb0f 	bl	8016a00 <put_memory>
 800e3e2:	f1bb 0f00 	cmp.w	fp, #0
 800e3e6:	d014      	beq.n	800e412 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e3e8:	46d8      	mov	r8, fp
 800e3ea:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e3ee:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e3f2:	2b04      	cmp	r3, #4
 800e3f4:	d1bf      	bne.n	800e376 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e3f6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e3fa:	3340      	adds	r3, #64	@ 0x40
 800e3fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e3fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e402:	e7c0      	b.n	800e386 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e404:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e408:	3348      	adds	r3, #72	@ 0x48
 800e40a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e40c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e410:	e7b9      	b.n	800e386 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e412:	b00d      	add	sp, #52	@ 0x34
 800e414:	ecbd 8b06 	vpop	{d8-d10}
 800e418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e41c:	f3af 8000 	nop.w
	...
 800e428:	00000001 	.word	0x00000001
 800e42c:	00000000 	.word	0x00000000
 800e430:	0000001e 	.word	0x0000001e
 800e434:	00000000 	.word	0x00000000
 800e438:	2000aed4 	.word	0x2000aed4

0800e43c <run_xrce_session>:
 800e43c:	b510      	push	{r4, lr}
 800e43e:	788c      	ldrb	r4, [r1, #2]
 800e440:	b086      	sub	sp, #24
 800e442:	2c01      	cmp	r4, #1
 800e444:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e448:	d00c      	beq.n	800e464 <run_xrce_session+0x28>
 800e44a:	4619      	mov	r1, r3
 800e44c:	2301      	movs	r3, #1
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	f10d 020e 	add.w	r2, sp, #14
 800e454:	f10d 0317 	add.w	r3, sp, #23
 800e458:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e45c:	f002 fd26 	bl	8010eac <uxr_run_session_until_all_status>
 800e460:	b006      	add	sp, #24
 800e462:	bd10      	pop	{r4, pc}
 800e464:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e468:	f002 f93a 	bl	80106e0 <uxr_flash_output_streams>
 800e46c:	4620      	mov	r0, r4
 800e46e:	b006      	add	sp, #24
 800e470:	bd10      	pop	{r4, pc}
 800e472:	bf00      	nop

0800e474 <convert_qos_profile>:
 800e474:	7a4a      	ldrb	r2, [r1, #9]
 800e476:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e47a:	2a02      	cmp	r2, #2
 800e47c:	bf18      	it	ne
 800e47e:	2200      	movne	r2, #0
 800e480:	7002      	strb	r2, [r0, #0]
 800e482:	780a      	ldrb	r2, [r1, #0]
 800e484:	8889      	ldrh	r1, [r1, #4]
 800e486:	8081      	strh	r1, [r0, #4]
 800e488:	f1ac 0c02 	sub.w	ip, ip, #2
 800e48c:	f1a2 0202 	sub.w	r2, r2, #2
 800e490:	fabc fc8c 	clz	ip, ip
 800e494:	fab2 f282 	clz	r2, r2
 800e498:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e49c:	0952      	lsrs	r2, r2, #5
 800e49e:	f880 c001 	strb.w	ip, [r0, #1]
 800e4a2:	7082      	strb	r2, [r0, #2]
 800e4a4:	4770      	bx	lr
 800e4a6:	bf00      	nop

0800e4a8 <generate_type_name>:
 800e4a8:	b530      	push	{r4, r5, lr}
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	700b      	strb	r3, [r1, #0]
 800e4ae:	6803      	ldr	r3, [r0, #0]
 800e4b0:	b087      	sub	sp, #28
 800e4b2:	4614      	mov	r4, r2
 800e4b4:	b1d3      	cbz	r3, 800e4ec <generate_type_name+0x44>
 800e4b6:	4a0f      	ldr	r2, [pc, #60]	@ (800e4f4 <generate_type_name+0x4c>)
 800e4b8:	4615      	mov	r5, r2
 800e4ba:	9203      	str	r2, [sp, #12]
 800e4bc:	9500      	str	r5, [sp, #0]
 800e4be:	6842      	ldr	r2, [r0, #4]
 800e4c0:	480d      	ldr	r0, [pc, #52]	@ (800e4f8 <generate_type_name+0x50>)
 800e4c2:	9001      	str	r0, [sp, #4]
 800e4c4:	4608      	mov	r0, r1
 800e4c6:	490d      	ldr	r1, [pc, #52]	@ (800e4fc <generate_type_name+0x54>)
 800e4c8:	9204      	str	r2, [sp, #16]
 800e4ca:	9105      	str	r1, [sp, #20]
 800e4cc:	9102      	str	r1, [sp, #8]
 800e4ce:	4a0c      	ldr	r2, [pc, #48]	@ (800e500 <generate_type_name+0x58>)
 800e4d0:	4621      	mov	r1, r4
 800e4d2:	f00a ff51 	bl	8019378 <sniprintf>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	db05      	blt.n	800e4e6 <generate_type_name+0x3e>
 800e4da:	4284      	cmp	r4, r0
 800e4dc:	bfd4      	ite	le
 800e4de:	2000      	movle	r0, #0
 800e4e0:	2001      	movgt	r0, #1
 800e4e2:	b007      	add	sp, #28
 800e4e4:	bd30      	pop	{r4, r5, pc}
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	b007      	add	sp, #28
 800e4ea:	bd30      	pop	{r4, r5, pc}
 800e4ec:	4b05      	ldr	r3, [pc, #20]	@ (800e504 <generate_type_name+0x5c>)
 800e4ee:	4a01      	ldr	r2, [pc, #4]	@ (800e4f4 <generate_type_name+0x4c>)
 800e4f0:	461d      	mov	r5, r3
 800e4f2:	e7e2      	b.n	800e4ba <generate_type_name+0x12>
 800e4f4:	0801a704 	.word	0x0801a704
 800e4f8:	0801a71c 	.word	0x0801a71c
 800e4fc:	0801a718 	.word	0x0801a718
 800e500:	0801a708 	.word	0x0801a708
 800e504:	0801ac94 	.word	0x0801ac94

0800e508 <generate_topic_name>:
 800e508:	b510      	push	{r4, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	4614      	mov	r4, r2
 800e50e:	9000      	str	r0, [sp, #0]
 800e510:	4b08      	ldr	r3, [pc, #32]	@ (800e534 <generate_topic_name+0x2c>)
 800e512:	4a09      	ldr	r2, [pc, #36]	@ (800e538 <generate_topic_name+0x30>)
 800e514:	4608      	mov	r0, r1
 800e516:	4621      	mov	r1, r4
 800e518:	f00a ff2e 	bl	8019378 <sniprintf>
 800e51c:	2800      	cmp	r0, #0
 800e51e:	db05      	blt.n	800e52c <generate_topic_name+0x24>
 800e520:	4284      	cmp	r4, r0
 800e522:	bfd4      	ite	le
 800e524:	2000      	movle	r0, #0
 800e526:	2001      	movgt	r0, #1
 800e528:	b002      	add	sp, #8
 800e52a:	bd10      	pop	{r4, pc}
 800e52c:	2000      	movs	r0, #0
 800e52e:	b002      	add	sp, #8
 800e530:	bd10      	pop	{r4, pc}
 800e532:	bf00      	nop
 800e534:	0801ad3c 	.word	0x0801ad3c
 800e538:	0801a720 	.word	0x0801a720

0800e53c <is_uxrce_rmw_identifier_valid>:
 800e53c:	b510      	push	{r4, lr}
 800e53e:	4604      	mov	r4, r0
 800e540:	b140      	cbz	r0, 800e554 <is_uxrce_rmw_identifier_valid+0x18>
 800e542:	f008 fab5 	bl	8016ab0 <rmw_get_implementation_identifier>
 800e546:	4601      	mov	r1, r0
 800e548:	4620      	mov	r0, r4
 800e54a:	f7f1 fe69 	bl	8000220 <strcmp>
 800e54e:	fab0 f080 	clz	r0, r0
 800e552:	0940      	lsrs	r0, r0, #5
 800e554:	bd10      	pop	{r4, pc}
 800e556:	bf00      	nop

0800e558 <get_message_typesupport_handle>:
 800e558:	6883      	ldr	r3, [r0, #8]
 800e55a:	4718      	bx	r3

0800e55c <get_message_typesupport_handle_function>:
 800e55c:	b510      	push	{r4, lr}
 800e55e:	4604      	mov	r4, r0
 800e560:	6800      	ldr	r0, [r0, #0]
 800e562:	f7f1 fe5d 	bl	8000220 <strcmp>
 800e566:	2800      	cmp	r0, #0
 800e568:	bf0c      	ite	eq
 800e56a:	4620      	moveq	r0, r4
 800e56c:	2000      	movne	r0, #0
 800e56e:	bd10      	pop	{r4, pc}

0800e570 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800e570:	4b04      	ldr	r3, [pc, #16]	@ (800e584 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	b10a      	cbz	r2, 800e57a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xa>
 800e576:	4803      	ldr	r0, [pc, #12]	@ (800e584 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800e578:	4770      	bx	lr
 800e57a:	4a03      	ldr	r2, [pc, #12]	@ (800e588 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x18>)
 800e57c:	4801      	ldr	r0, [pc, #4]	@ (800e584 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800e57e:	6812      	ldr	r2, [r2, #0]
 800e580:	601a      	str	r2, [r3, #0]
 800e582:	4770      	bx	lr
 800e584:	2000004c 	.word	0x2000004c
 800e588:	200001b0 	.word	0x200001b0

0800e58c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800e58c:	4a02      	ldr	r2, [pc, #8]	@ (800e598 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xc>)
 800e58e:	4b03      	ldr	r3, [pc, #12]	@ (800e59c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x10>)
 800e590:	6812      	ldr	r2, [r2, #0]
 800e592:	601a      	str	r2, [r3, #0]
 800e594:	4770      	bx	lr
 800e596:	bf00      	nop
 800e598:	200001b0 	.word	0x200001b0
 800e59c:	2000004c 	.word	0x2000004c

0800e5a0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 800e5a0:	6840      	ldr	r0, [r0, #4]
 800e5a2:	4770      	bx	lr

0800e5a4 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 800e5a4:	6800      	ldr	r0, [r0, #0]
 800e5a6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e5aa:	4770      	bx	lr

0800e5ac <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 800e5ac:	6803      	ldr	r3, [r0, #0]
 800e5ae:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e5b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5b6:	e9c2 0100 	strd	r0, r1, [r2]
 800e5ba:	4770      	bx	lr

0800e5bc <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 800e5bc:	6803      	ldr	r3, [r0, #0]
 800e5be:	ed92 7b00 	vldr	d7, [r2]
 800e5c2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e5c6:	ed81 7b00 	vstr	d7, [r1]
 800e5ca:	4770      	bx	lr

0800e5cc <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 800e5cc:	f008 be7e 	b.w	80172cc <std_msgs__msg__Float64MultiArray__init>

0800e5d0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 800e5d0:	f008 bea0 	b.w	8017314 <std_msgs__msg__Float64MultiArray__fini>

0800e5d4 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 800e5d4:	b510      	push	{r4, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	4604      	mov	r4, r0
 800e5da:	9101      	str	r1, [sp, #4]
 800e5dc:	f008 fe34 	bl	8017248 <rosidl_runtime_c__double__Sequence__fini>
 800e5e0:	9901      	ldr	r1, [sp, #4]
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	b002      	add	sp, #8
 800e5e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5ea:	f008 be15 	b.w	8017218 <rosidl_runtime_c__double__Sequence__init>
 800e5ee:	bf00      	nop

0800e5f0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 800e5f0:	6800      	ldr	r0, [r0, #0]
 800e5f2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e5f6:	4770      	bx	lr

0800e5f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800e5f8:	b508      	push	{r3, lr}
 800e5fa:	f000 f857 	bl	800e6ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800e5fe:	4b06      	ldr	r3, [pc, #24]	@ (800e618 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800e600:	4906      	ldr	r1, [pc, #24]	@ (800e61c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	60c8      	str	r0, [r1, #12]
 800e606:	b10a      	cbz	r2, 800e60c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 800e608:	4803      	ldr	r0, [pc, #12]	@ (800e618 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800e60a:	bd08      	pop	{r3, pc}
 800e60c:	4a04      	ldr	r2, [pc, #16]	@ (800e620 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 800e60e:	4802      	ldr	r0, [pc, #8]	@ (800e618 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800e610:	6812      	ldr	r2, [r2, #0]
 800e612:	601a      	str	r2, [r3, #0]
 800e614:	bd08      	pop	{r3, pc}
 800e616:	bf00      	nop
 800e618:	200000d0 	.word	0x200000d0
 800e61c:	20000058 	.word	0x20000058
 800e620:	200001b4 	.word	0x200001b4

0800e624 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800e624:	6840      	ldr	r0, [r0, #4]
 800e626:	4770      	bx	lr

0800e628 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800e628:	6800      	ldr	r0, [r0, #0]
 800e62a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e62e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800e632:	4770      	bx	lr

0800e634 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800e634:	6803      	ldr	r3, [r0, #0]
 800e636:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e63a:	b500      	push	{lr}
 800e63c:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800e640:	4694      	mov	ip, r2
 800e642:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e646:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e64a:	f8de 3000 	ldr.w	r3, [lr]
 800e64e:	f8cc 3000 	str.w	r3, [ip]
 800e652:	f85d fb04 	ldr.w	pc, [sp], #4
 800e656:	bf00      	nop

0800e658 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800e658:	6803      	ldr	r3, [r0, #0]
 800e65a:	b500      	push	{lr}
 800e65c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e660:	4696      	mov	lr, r2
 800e662:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800e666:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e66a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e66e:	f8de 3000 	ldr.w	r3, [lr]
 800e672:	f8cc 3000 	str.w	r3, [ip]
 800e676:	f85d fb04 	ldr.w	pc, [sp], #4
 800e67a:	bf00      	nop

0800e67c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800e67c:	f008 bee0 	b.w	8017440 <std_msgs__msg__MultiArrayLayout__init>

0800e680 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800e680:	f008 bef0 	b.w	8017464 <std_msgs__msg__MultiArrayLayout__fini>

0800e684 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800e684:	b510      	push	{r4, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	4604      	mov	r4, r0
 800e68a:	9101      	str	r1, [sp, #4]
 800e68c:	f008 feb0 	bl	80173f0 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800e690:	9901      	ldr	r1, [sp, #4]
 800e692:	4620      	mov	r0, r4
 800e694:	b002      	add	sp, #8
 800e696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e69a:	f008 bea5 	b.w	80173e8 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800e69e:	bf00      	nop

0800e6a0 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800e6a0:	6800      	ldr	r0, [r0, #0]
 800e6a2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e6a6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800e6aa:	4770      	bx	lr

0800e6ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800e6ac:	b508      	push	{r3, lr}
 800e6ae:	f008 fee1 	bl	8017474 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800e6b2:	4b06      	ldr	r3, [pc, #24]	@ (800e6cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800e6b4:	4906      	ldr	r1, [pc, #24]	@ (800e6d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	60c8      	str	r0, [r1, #12]
 800e6ba:	b10a      	cbz	r2, 800e6c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800e6bc:	4803      	ldr	r0, [pc, #12]	@ (800e6cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800e6be:	bd08      	pop	{r3, pc}
 800e6c0:	4a04      	ldr	r2, [pc, #16]	@ (800e6d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800e6c2:	4802      	ldr	r0, [pc, #8]	@ (800e6cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800e6c4:	6812      	ldr	r2, [r2, #0]
 800e6c6:	601a      	str	r2, [r3, #0]
 800e6c8:	bd08      	pop	{r3, pc}
 800e6ca:	bf00      	nop
 800e6cc:	20000154 	.word	0x20000154
 800e6d0:	200000dc 	.word	0x200000dc
 800e6d4:	200001b4 	.word	0x200001b4

0800e6d8 <_Float64MultiArray__max_serialized_size>:
 800e6d8:	b500      	push	{lr}
 800e6da:	b083      	sub	sp, #12
 800e6dc:	2301      	movs	r3, #1
 800e6de:	2100      	movs	r1, #0
 800e6e0:	f10d 0007 	add.w	r0, sp, #7
 800e6e4:	f88d 3007 	strb.w	r3, [sp, #7]
 800e6e8:	f000 f91c 	bl	800e924 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800e6ec:	b003      	add	sp, #12
 800e6ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800e6f2:	bf00      	nop

0800e6f4 <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 800e6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	b160      	cbz	r0, 800e714 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 800e6fa:	460d      	mov	r5, r1
 800e6fc:	f000 f8b6 	bl	800e86c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800e700:	182e      	adds	r6, r5, r0
 800e702:	4630      	mov	r0, r6
 800e704:	2104      	movs	r1, #4
 800e706:	6967      	ldr	r7, [r4, #20]
 800e708:	f001 fa98 	bl	800fc3c <ucdr_alignment>
 800e70c:	1d03      	adds	r3, r0, #4
 800e70e:	441e      	add	r6, r3
 800e710:	b90f      	cbnz	r7, 800e716 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 800e712:	1b70      	subs	r0, r6, r5
 800e714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e716:	4630      	mov	r0, r6
 800e718:	2108      	movs	r1, #8
 800e71a:	f001 fa8f 	bl	800fc3c <ucdr_alignment>
 800e71e:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800e722:	181e      	adds	r6, r3, r0
 800e724:	1b70      	subs	r0, r6, r5
 800e726:	e7f5      	b.n	800e714 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

0800e728 <_Float64MultiArray__cdr_deserialize>:
 800e728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e72a:	460c      	mov	r4, r1
 800e72c:	b083      	sub	sp, #12
 800e72e:	b1d1      	cbz	r1, 800e766 <_Float64MultiArray__cdr_deserialize+0x3e>
 800e730:	4606      	mov	r6, r0
 800e732:	f000 f901 	bl	800e938 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800e736:	6843      	ldr	r3, [r0, #4]
 800e738:	4621      	mov	r1, r4
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	4630      	mov	r0, r6
 800e73e:	4798      	blx	r3
 800e740:	69a7      	ldr	r7, [r4, #24]
 800e742:	6921      	ldr	r1, [r4, #16]
 800e744:	ab01      	add	r3, sp, #4
 800e746:	463a      	mov	r2, r7
 800e748:	4630      	mov	r0, r6
 800e74a:	f001 fb4d 	bl	800fde8 <ucdr_deserialize_sequence_double>
 800e74e:	9b01      	ldr	r3, [sp, #4]
 800e750:	4605      	mov	r5, r0
 800e752:	b920      	cbnz	r0, 800e75e <_Float64MultiArray__cdr_deserialize+0x36>
 800e754:	429f      	cmp	r7, r3
 800e756:	d30a      	bcc.n	800e76e <_Float64MultiArray__cdr_deserialize+0x46>
 800e758:	4628      	mov	r0, r5
 800e75a:	b003      	add	sp, #12
 800e75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e75e:	4628      	mov	r0, r5
 800e760:	6163      	str	r3, [r4, #20]
 800e762:	b003      	add	sp, #12
 800e764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e766:	460d      	mov	r5, r1
 800e768:	4628      	mov	r0, r5
 800e76a:	b003      	add	sp, #12
 800e76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e76e:	2301      	movs	r3, #1
 800e770:	75b0      	strb	r0, [r6, #22]
 800e772:	7573      	strb	r3, [r6, #21]
 800e774:	4630      	mov	r0, r6
 800e776:	6165      	str	r5, [r4, #20]
 800e778:	2108      	movs	r1, #8
 800e77a:	f001 fa75 	bl	800fc68 <ucdr_align_to>
 800e77e:	9901      	ldr	r1, [sp, #4]
 800e780:	4630      	mov	r0, r6
 800e782:	00c9      	lsls	r1, r1, #3
 800e784:	f001 faa6 	bl	800fcd4 <ucdr_advance_buffer>
 800e788:	4628      	mov	r0, r5
 800e78a:	b003      	add	sp, #12
 800e78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e78e:	bf00      	nop

0800e790 <_Float64MultiArray__cdr_serialize>:
 800e790:	b180      	cbz	r0, 800e7b4 <_Float64MultiArray__cdr_serialize+0x24>
 800e792:	b538      	push	{r3, r4, r5, lr}
 800e794:	460d      	mov	r5, r1
 800e796:	4604      	mov	r4, r0
 800e798:	f000 f8ce 	bl	800e938 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800e79c:	6843      	ldr	r3, [r0, #4]
 800e79e:	4629      	mov	r1, r5
 800e7a0:	689b      	ldr	r3, [r3, #8]
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	4798      	blx	r3
 800e7a6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7b0:	f001 bb08 	b.w	800fdc4 <ucdr_serialize_sequence_double>
 800e7b4:	4770      	bx	lr
 800e7b6:	bf00      	nop

0800e7b8 <_Float64MultiArray__get_serialized_size>:
 800e7b8:	b570      	push	{r4, r5, r6, lr}
 800e7ba:	4604      	mov	r4, r0
 800e7bc:	b150      	cbz	r0, 800e7d4 <_Float64MultiArray__get_serialized_size+0x1c>
 800e7be:	2100      	movs	r1, #0
 800e7c0:	f000 f854 	bl	800e86c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800e7c4:	2104      	movs	r1, #4
 800e7c6:	6966      	ldr	r6, [r4, #20]
 800e7c8:	4605      	mov	r5, r0
 800e7ca:	f001 fa37 	bl	800fc3c <ucdr_alignment>
 800e7ce:	4428      	add	r0, r5
 800e7d0:	1d04      	adds	r4, r0, #4
 800e7d2:	b90e      	cbnz	r6, 800e7d8 <_Float64MultiArray__get_serialized_size+0x20>
 800e7d4:	4620      	mov	r0, r4
 800e7d6:	bd70      	pop	{r4, r5, r6, pc}
 800e7d8:	4620      	mov	r0, r4
 800e7da:	2108      	movs	r1, #8
 800e7dc:	f001 fa2e 	bl	800fc3c <ucdr_alignment>
 800e7e0:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e7e4:	4404      	add	r4, r0
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	bd70      	pop	{r4, r5, r6, pc}
 800e7ea:	bf00      	nop

0800e7ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800e7ec:	4800      	ldr	r0, [pc, #0]	@ (800e7f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 800e7ee:	4770      	bx	lr
 800e7f0:	20000160 	.word	0x20000160

0800e7f4 <_MultiArrayLayout__max_serialized_size>:
 800e7f4:	b508      	push	{r3, lr}
 800e7f6:	2104      	movs	r1, #4
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	f001 fa1f 	bl	800fc3c <ucdr_alignment>
 800e7fe:	3004      	adds	r0, #4
 800e800:	bd08      	pop	{r3, pc}
 800e802:	bf00      	nop

0800e804 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800e804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e808:	4689      	mov	r9, r1
 800e80a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e80e:	4607      	mov	r7, r0
 800e810:	2104      	movs	r1, #4
 800e812:	4648      	mov	r0, r9
 800e814:	f001 fa12 	bl	800fc3c <ucdr_alignment>
 800e818:	f109 0304 	add.w	r3, r9, #4
 800e81c:	18c6      	adds	r6, r0, r3
 800e81e:	f1b8 0f00 	cmp.w	r8, #0
 800e822:	d018      	beq.n	800e856 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 800e824:	2500      	movs	r5, #0
 800e826:	f008 fec3 	bl	80175b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800e82a:	683a      	ldr	r2, [r7, #0]
 800e82c:	6843      	ldr	r3, [r0, #4]
 800e82e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800e832:	4631      	mov	r1, r6
 800e834:	695b      	ldr	r3, [r3, #20]
 800e836:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800e83a:	4798      	blx	r3
 800e83c:	4604      	mov	r4, r0
 800e83e:	2c04      	cmp	r4, #4
 800e840:	4621      	mov	r1, r4
 800e842:	4630      	mov	r0, r6
 800e844:	bf28      	it	cs
 800e846:	2104      	movcs	r1, #4
 800e848:	f001 f9f8 	bl	800fc3c <ucdr_alignment>
 800e84c:	3501      	adds	r5, #1
 800e84e:	4404      	add	r4, r0
 800e850:	45a8      	cmp	r8, r5
 800e852:	4426      	add	r6, r4
 800e854:	d1e7      	bne.n	800e826 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800e856:	2104      	movs	r1, #4
 800e858:	4630      	mov	r0, r6
 800e85a:	f001 f9ef 	bl	800fc3c <ucdr_alignment>
 800e85e:	f1c9 0904 	rsb	r9, r9, #4
 800e862:	444e      	add	r6, r9
 800e864:	4430      	add	r0, r6
 800e866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e86a:	bf00      	nop

0800e86c <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800e86c:	b108      	cbz	r0, 800e872 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800e86e:	f7ff bfc9 	b.w	800e804 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800e872:	4770      	bx	lr

0800e874 <_MultiArrayLayout__get_serialized_size>:
 800e874:	b110      	cbz	r0, 800e87c <_MultiArrayLayout__get_serialized_size+0x8>
 800e876:	2100      	movs	r1, #0
 800e878:	f7ff bfc4 	b.w	800e804 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800e87c:	4770      	bx	lr
 800e87e:	bf00      	nop

0800e880 <_MultiArrayLayout__cdr_deserialize>:
 800e880:	b349      	cbz	r1, 800e8d6 <_MultiArrayLayout__cdr_deserialize+0x56>
 800e882:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e884:	460e      	mov	r6, r1
 800e886:	b083      	sub	sp, #12
 800e888:	a901      	add	r1, sp, #4
 800e88a:	4607      	mov	r7, r0
 800e88c:	f000 fbcc 	bl	800f028 <ucdr_deserialize_uint32_t>
 800e890:	9b01      	ldr	r3, [sp, #4]
 800e892:	68b2      	ldr	r2, [r6, #8]
 800e894:	429a      	cmp	r2, r3
 800e896:	d31b      	bcc.n	800e8d0 <_MultiArrayLayout__cdr_deserialize+0x50>
 800e898:	6073      	str	r3, [r6, #4]
 800e89a:	b18b      	cbz	r3, 800e8c0 <_MultiArrayLayout__cdr_deserialize+0x40>
 800e89c:	2400      	movs	r4, #0
 800e89e:	4625      	mov	r5, r4
 800e8a0:	e002      	b.n	800e8a8 <_MultiArrayLayout__cdr_deserialize+0x28>
 800e8a2:	9b01      	ldr	r3, [sp, #4]
 800e8a4:	429d      	cmp	r5, r3
 800e8a6:	d20b      	bcs.n	800e8c0 <_MultiArrayLayout__cdr_deserialize+0x40>
 800e8a8:	f008 fe82 	bl	80175b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800e8ac:	6831      	ldr	r1, [r6, #0]
 800e8ae:	6843      	ldr	r3, [r0, #4]
 800e8b0:	4421      	add	r1, r4
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	4638      	mov	r0, r7
 800e8b6:	4798      	blx	r3
 800e8b8:	3501      	adds	r5, #1
 800e8ba:	3414      	adds	r4, #20
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	d1f0      	bne.n	800e8a2 <_MultiArrayLayout__cdr_deserialize+0x22>
 800e8c0:	f106 010c 	add.w	r1, r6, #12
 800e8c4:	4638      	mov	r0, r7
 800e8c6:	b003      	add	sp, #12
 800e8c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e8cc:	f000 bbac 	b.w	800f028 <ucdr_deserialize_uint32_t>
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	b003      	add	sp, #12
 800e8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8d6:	2000      	movs	r0, #0
 800e8d8:	4770      	bx	lr
 800e8da:	bf00      	nop

0800e8dc <_MultiArrayLayout__cdr_serialize>:
 800e8dc:	b308      	cbz	r0, 800e922 <_MultiArrayLayout__cdr_serialize+0x46>
 800e8de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8e0:	6847      	ldr	r7, [r0, #4]
 800e8e2:	460e      	mov	r6, r1
 800e8e4:	4605      	mov	r5, r0
 800e8e6:	4608      	mov	r0, r1
 800e8e8:	4639      	mov	r1, r7
 800e8ea:	f000 fa6d 	bl	800edc8 <ucdr_serialize_uint32_t>
 800e8ee:	b190      	cbz	r0, 800e916 <_MultiArrayLayout__cdr_serialize+0x3a>
 800e8f0:	b18f      	cbz	r7, 800e916 <_MultiArrayLayout__cdr_serialize+0x3a>
 800e8f2:	2400      	movs	r4, #0
 800e8f4:	e001      	b.n	800e8fa <_MultiArrayLayout__cdr_serialize+0x1e>
 800e8f6:	42a7      	cmp	r7, r4
 800e8f8:	d00d      	beq.n	800e916 <_MultiArrayLayout__cdr_serialize+0x3a>
 800e8fa:	f008 fe59 	bl	80175b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800e8fe:	682a      	ldr	r2, [r5, #0]
 800e900:	6843      	ldr	r3, [r0, #4]
 800e902:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800e906:	689b      	ldr	r3, [r3, #8]
 800e908:	4631      	mov	r1, r6
 800e90a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800e90e:	3401      	adds	r4, #1
 800e910:	4798      	blx	r3
 800e912:	2800      	cmp	r0, #0
 800e914:	d1ef      	bne.n	800e8f6 <_MultiArrayLayout__cdr_serialize+0x1a>
 800e916:	68e9      	ldr	r1, [r5, #12]
 800e918:	4630      	mov	r0, r6
 800e91a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e91e:	f000 ba53 	b.w	800edc8 <ucdr_serialize_uint32_t>
 800e922:	4770      	bx	lr

0800e924 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800e924:	b508      	push	{r3, lr}
 800e926:	4603      	mov	r3, r0
 800e928:	2200      	movs	r2, #0
 800e92a:	4608      	mov	r0, r1
 800e92c:	701a      	strb	r2, [r3, #0]
 800e92e:	2104      	movs	r1, #4
 800e930:	f001 f984 	bl	800fc3c <ucdr_alignment>
 800e934:	3004      	adds	r0, #4
 800e936:	bd08      	pop	{r3, pc}

0800e938 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800e938:	4800      	ldr	r0, [pc, #0]	@ (800e93c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800e93a:	4770      	bx	lr
 800e93c:	20000188 	.word	0x20000188

0800e940 <ucdr_serialize_bool>:
 800e940:	b538      	push	{r3, r4, r5, lr}
 800e942:	460d      	mov	r5, r1
 800e944:	2101      	movs	r1, #1
 800e946:	4604      	mov	r4, r0
 800e948:	f001 f92c 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800e94c:	b148      	cbz	r0, 800e962 <ucdr_serialize_bool+0x22>
 800e94e:	68a3      	ldr	r3, [r4, #8]
 800e950:	701d      	strb	r5, [r3, #0]
 800e952:	68a2      	ldr	r2, [r4, #8]
 800e954:	6923      	ldr	r3, [r4, #16]
 800e956:	2101      	movs	r1, #1
 800e958:	440a      	add	r2, r1
 800e95a:	440b      	add	r3, r1
 800e95c:	60a2      	str	r2, [r4, #8]
 800e95e:	6123      	str	r3, [r4, #16]
 800e960:	7561      	strb	r1, [r4, #21]
 800e962:	7da0      	ldrb	r0, [r4, #22]
 800e964:	f080 0001 	eor.w	r0, r0, #1
 800e968:	bd38      	pop	{r3, r4, r5, pc}
 800e96a:	bf00      	nop

0800e96c <ucdr_deserialize_bool>:
 800e96c:	b538      	push	{r3, r4, r5, lr}
 800e96e:	460d      	mov	r5, r1
 800e970:	2101      	movs	r1, #1
 800e972:	4604      	mov	r4, r0
 800e974:	f001 f916 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800e978:	b160      	cbz	r0, 800e994 <ucdr_deserialize_bool+0x28>
 800e97a:	68a2      	ldr	r2, [r4, #8]
 800e97c:	6923      	ldr	r3, [r4, #16]
 800e97e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e982:	3900      	subs	r1, #0
 800e984:	bf18      	it	ne
 800e986:	2101      	movne	r1, #1
 800e988:	7029      	strb	r1, [r5, #0]
 800e98a:	3301      	adds	r3, #1
 800e98c:	2101      	movs	r1, #1
 800e98e:	60a2      	str	r2, [r4, #8]
 800e990:	6123      	str	r3, [r4, #16]
 800e992:	7561      	strb	r1, [r4, #21]
 800e994:	7da0      	ldrb	r0, [r4, #22]
 800e996:	f080 0001 	eor.w	r0, r0, #1
 800e99a:	bd38      	pop	{r3, r4, r5, pc}

0800e99c <ucdr_serialize_uint8_t>:
 800e99c:	b538      	push	{r3, r4, r5, lr}
 800e99e:	460d      	mov	r5, r1
 800e9a0:	2101      	movs	r1, #1
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	f001 f8fe 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800e9a8:	b148      	cbz	r0, 800e9be <ucdr_serialize_uint8_t+0x22>
 800e9aa:	68a3      	ldr	r3, [r4, #8]
 800e9ac:	701d      	strb	r5, [r3, #0]
 800e9ae:	68a2      	ldr	r2, [r4, #8]
 800e9b0:	6923      	ldr	r3, [r4, #16]
 800e9b2:	2101      	movs	r1, #1
 800e9b4:	440a      	add	r2, r1
 800e9b6:	440b      	add	r3, r1
 800e9b8:	60a2      	str	r2, [r4, #8]
 800e9ba:	6123      	str	r3, [r4, #16]
 800e9bc:	7561      	strb	r1, [r4, #21]
 800e9be:	7da0      	ldrb	r0, [r4, #22]
 800e9c0:	f080 0001 	eor.w	r0, r0, #1
 800e9c4:	bd38      	pop	{r3, r4, r5, pc}
 800e9c6:	bf00      	nop

0800e9c8 <ucdr_deserialize_uint8_t>:
 800e9c8:	b538      	push	{r3, r4, r5, lr}
 800e9ca:	460d      	mov	r5, r1
 800e9cc:	2101      	movs	r1, #1
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	f001 f8e8 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800e9d4:	b150      	cbz	r0, 800e9ec <ucdr_deserialize_uint8_t+0x24>
 800e9d6:	68a3      	ldr	r3, [r4, #8]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	702b      	strb	r3, [r5, #0]
 800e9dc:	68a2      	ldr	r2, [r4, #8]
 800e9de:	6923      	ldr	r3, [r4, #16]
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	440a      	add	r2, r1
 800e9e4:	440b      	add	r3, r1
 800e9e6:	60a2      	str	r2, [r4, #8]
 800e9e8:	6123      	str	r3, [r4, #16]
 800e9ea:	7561      	strb	r1, [r4, #21]
 800e9ec:	7da0      	ldrb	r0, [r4, #22]
 800e9ee:	f080 0001 	eor.w	r0, r0, #1
 800e9f2:	bd38      	pop	{r3, r4, r5, pc}

0800e9f4 <ucdr_serialize_uint16_t>:
 800e9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9f8:	b082      	sub	sp, #8
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	2102      	movs	r1, #2
 800e9fe:	4604      	mov	r4, r0
 800ea00:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ea04:	f001 f922 	bl	800fc4c <ucdr_buffer_alignment>
 800ea08:	4601      	mov	r1, r0
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	7d67      	ldrb	r7, [r4, #21]
 800ea0e:	f001 f961 	bl	800fcd4 <ucdr_advance_buffer>
 800ea12:	2102      	movs	r1, #2
 800ea14:	4620      	mov	r0, r4
 800ea16:	f001 f8b9 	bl	800fb8c <ucdr_check_buffer_available_for>
 800ea1a:	bb78      	cbnz	r0, 800ea7c <ucdr_serialize_uint16_t+0x88>
 800ea1c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ea20:	42ab      	cmp	r3, r5
 800ea22:	d926      	bls.n	800ea72 <ucdr_serialize_uint16_t+0x7e>
 800ea24:	1b5e      	subs	r6, r3, r5
 800ea26:	60a3      	str	r3, [r4, #8]
 800ea28:	6923      	ldr	r3, [r4, #16]
 800ea2a:	f1c6 0802 	rsb	r8, r6, #2
 800ea2e:	4433      	add	r3, r6
 800ea30:	6123      	str	r3, [r4, #16]
 800ea32:	4641      	mov	r1, r8
 800ea34:	4620      	mov	r0, r4
 800ea36:	f001 f8b5 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	d03b      	beq.n	800eab6 <ucdr_serialize_uint16_t+0xc2>
 800ea3e:	7d23      	ldrb	r3, [r4, #20]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d04a      	beq.n	800eada <ucdr_serialize_uint16_t+0xe6>
 800ea44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ea48:	702b      	strb	r3, [r5, #0]
 800ea4a:	2e00      	cmp	r6, #0
 800ea4c:	d040      	beq.n	800ead0 <ucdr_serialize_uint16_t+0xdc>
 800ea4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ea52:	706b      	strb	r3, [r5, #1]
 800ea54:	6923      	ldr	r3, [r4, #16]
 800ea56:	68a2      	ldr	r2, [r4, #8]
 800ea58:	7da0      	ldrb	r0, [r4, #22]
 800ea5a:	3302      	adds	r3, #2
 800ea5c:	1b9e      	subs	r6, r3, r6
 800ea5e:	4442      	add	r2, r8
 800ea60:	2302      	movs	r3, #2
 800ea62:	f080 0001 	eor.w	r0, r0, #1
 800ea66:	60a2      	str	r2, [r4, #8]
 800ea68:	6126      	str	r6, [r4, #16]
 800ea6a:	7563      	strb	r3, [r4, #21]
 800ea6c:	b002      	add	sp, #8
 800ea6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea72:	2102      	movs	r1, #2
 800ea74:	4620      	mov	r0, r4
 800ea76:	f001 f895 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800ea7a:	b190      	cbz	r0, 800eaa2 <ucdr_serialize_uint16_t+0xae>
 800ea7c:	7d23      	ldrb	r3, [r4, #20]
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	68a3      	ldr	r3, [r4, #8]
 800ea82:	d014      	beq.n	800eaae <ucdr_serialize_uint16_t+0xba>
 800ea84:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ea88:	701a      	strb	r2, [r3, #0]
 800ea8a:	68a3      	ldr	r3, [r4, #8]
 800ea8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea90:	705a      	strb	r2, [r3, #1]
 800ea92:	68a2      	ldr	r2, [r4, #8]
 800ea94:	6923      	ldr	r3, [r4, #16]
 800ea96:	3202      	adds	r2, #2
 800ea98:	3302      	adds	r3, #2
 800ea9a:	2102      	movs	r1, #2
 800ea9c:	60a2      	str	r2, [r4, #8]
 800ea9e:	6123      	str	r3, [r4, #16]
 800eaa0:	7561      	strb	r1, [r4, #21]
 800eaa2:	7da0      	ldrb	r0, [r4, #22]
 800eaa4:	f080 0001 	eor.w	r0, r0, #1
 800eaa8:	b002      	add	sp, #8
 800eaaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eab2:	801a      	strh	r2, [r3, #0]
 800eab4:	e7ed      	b.n	800ea92 <ucdr_serialize_uint16_t+0x9e>
 800eab6:	68a2      	ldr	r2, [r4, #8]
 800eab8:	6923      	ldr	r3, [r4, #16]
 800eaba:	7da0      	ldrb	r0, [r4, #22]
 800eabc:	7567      	strb	r7, [r4, #21]
 800eabe:	1b92      	subs	r2, r2, r6
 800eac0:	1b9b      	subs	r3, r3, r6
 800eac2:	f080 0001 	eor.w	r0, r0, #1
 800eac6:	60a2      	str	r2, [r4, #8]
 800eac8:	6123      	str	r3, [r4, #16]
 800eaca:	b002      	add	sp, #8
 800eacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ead0:	68a3      	ldr	r3, [r4, #8]
 800ead2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ead6:	701a      	strb	r2, [r3, #0]
 800ead8:	e7bc      	b.n	800ea54 <ucdr_serialize_uint16_t+0x60>
 800eada:	4628      	mov	r0, r5
 800eadc:	f10d 0506 	add.w	r5, sp, #6
 800eae0:	4629      	mov	r1, r5
 800eae2:	4632      	mov	r2, r6
 800eae4:	f00a fe85 	bl	80197f2 <memcpy>
 800eae8:	68a0      	ldr	r0, [r4, #8]
 800eaea:	4642      	mov	r2, r8
 800eaec:	19a9      	adds	r1, r5, r6
 800eaee:	f00a fe80 	bl	80197f2 <memcpy>
 800eaf2:	e7af      	b.n	800ea54 <ucdr_serialize_uint16_t+0x60>

0800eaf4 <ucdr_serialize_endian_uint16_t>:
 800eaf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eaf8:	b083      	sub	sp, #12
 800eafa:	460d      	mov	r5, r1
 800eafc:	2102      	movs	r1, #2
 800eafe:	4604      	mov	r4, r0
 800eb00:	f8ad 2006 	strh.w	r2, [sp, #6]
 800eb04:	f001 f8a2 	bl	800fc4c <ucdr_buffer_alignment>
 800eb08:	4601      	mov	r1, r0
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eb10:	f001 f8e0 	bl	800fcd4 <ucdr_advance_buffer>
 800eb14:	2102      	movs	r1, #2
 800eb16:	4620      	mov	r0, r4
 800eb18:	f001 f838 	bl	800fb8c <ucdr_check_buffer_available_for>
 800eb1c:	bb70      	cbnz	r0, 800eb7c <ucdr_serialize_endian_uint16_t+0x88>
 800eb1e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800eb22:	42be      	cmp	r6, r7
 800eb24:	d925      	bls.n	800eb72 <ucdr_serialize_endian_uint16_t+0x7e>
 800eb26:	6923      	ldr	r3, [r4, #16]
 800eb28:	60a6      	str	r6, [r4, #8]
 800eb2a:	1bf6      	subs	r6, r6, r7
 800eb2c:	4433      	add	r3, r6
 800eb2e:	f1c6 0902 	rsb	r9, r6, #2
 800eb32:	6123      	str	r3, [r4, #16]
 800eb34:	4649      	mov	r1, r9
 800eb36:	4620      	mov	r0, r4
 800eb38:	f001 f834 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	d039      	beq.n	800ebb4 <ucdr_serialize_endian_uint16_t+0xc0>
 800eb40:	2d01      	cmp	r5, #1
 800eb42:	d04a      	beq.n	800ebda <ucdr_serialize_endian_uint16_t+0xe6>
 800eb44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb48:	703b      	strb	r3, [r7, #0]
 800eb4a:	2e00      	cmp	r6, #0
 800eb4c:	d040      	beq.n	800ebd0 <ucdr_serialize_endian_uint16_t+0xdc>
 800eb4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb52:	707b      	strb	r3, [r7, #1]
 800eb54:	6923      	ldr	r3, [r4, #16]
 800eb56:	68a2      	ldr	r2, [r4, #8]
 800eb58:	7da0      	ldrb	r0, [r4, #22]
 800eb5a:	3302      	adds	r3, #2
 800eb5c:	444a      	add	r2, r9
 800eb5e:	1b9b      	subs	r3, r3, r6
 800eb60:	2102      	movs	r1, #2
 800eb62:	f080 0001 	eor.w	r0, r0, #1
 800eb66:	60a2      	str	r2, [r4, #8]
 800eb68:	6123      	str	r3, [r4, #16]
 800eb6a:	7561      	strb	r1, [r4, #21]
 800eb6c:	b003      	add	sp, #12
 800eb6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb72:	2102      	movs	r1, #2
 800eb74:	4620      	mov	r0, r4
 800eb76:	f001 f815 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800eb7a:	b188      	cbz	r0, 800eba0 <ucdr_serialize_endian_uint16_t+0xac>
 800eb7c:	2d01      	cmp	r5, #1
 800eb7e:	68a3      	ldr	r3, [r4, #8]
 800eb80:	d014      	beq.n	800ebac <ucdr_serialize_endian_uint16_t+0xb8>
 800eb82:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800eb86:	701a      	strb	r2, [r3, #0]
 800eb88:	68a3      	ldr	r3, [r4, #8]
 800eb8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb8e:	705a      	strb	r2, [r3, #1]
 800eb90:	68a2      	ldr	r2, [r4, #8]
 800eb92:	6923      	ldr	r3, [r4, #16]
 800eb94:	3202      	adds	r2, #2
 800eb96:	3302      	adds	r3, #2
 800eb98:	2102      	movs	r1, #2
 800eb9a:	60a2      	str	r2, [r4, #8]
 800eb9c:	6123      	str	r3, [r4, #16]
 800eb9e:	7561      	strb	r1, [r4, #21]
 800eba0:	7da0      	ldrb	r0, [r4, #22]
 800eba2:	f080 0001 	eor.w	r0, r0, #1
 800eba6:	b003      	add	sp, #12
 800eba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ebb0:	801a      	strh	r2, [r3, #0]
 800ebb2:	e7ed      	b.n	800eb90 <ucdr_serialize_endian_uint16_t+0x9c>
 800ebb4:	68a2      	ldr	r2, [r4, #8]
 800ebb6:	6923      	ldr	r3, [r4, #16]
 800ebb8:	7da0      	ldrb	r0, [r4, #22]
 800ebba:	f884 8015 	strb.w	r8, [r4, #21]
 800ebbe:	1b92      	subs	r2, r2, r6
 800ebc0:	1b9b      	subs	r3, r3, r6
 800ebc2:	f080 0001 	eor.w	r0, r0, #1
 800ebc6:	60a2      	str	r2, [r4, #8]
 800ebc8:	6123      	str	r3, [r4, #16]
 800ebca:	b003      	add	sp, #12
 800ebcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebd0:	68a3      	ldr	r3, [r4, #8]
 800ebd2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ebd6:	701a      	strb	r2, [r3, #0]
 800ebd8:	e7bc      	b.n	800eb54 <ucdr_serialize_endian_uint16_t+0x60>
 800ebda:	f10d 0506 	add.w	r5, sp, #6
 800ebde:	4629      	mov	r1, r5
 800ebe0:	4632      	mov	r2, r6
 800ebe2:	4638      	mov	r0, r7
 800ebe4:	f00a fe05 	bl	80197f2 <memcpy>
 800ebe8:	68a0      	ldr	r0, [r4, #8]
 800ebea:	464a      	mov	r2, r9
 800ebec:	19a9      	adds	r1, r5, r6
 800ebee:	f00a fe00 	bl	80197f2 <memcpy>
 800ebf2:	e7af      	b.n	800eb54 <ucdr_serialize_endian_uint16_t+0x60>

0800ebf4 <ucdr_deserialize_uint16_t>:
 800ebf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebf8:	460d      	mov	r5, r1
 800ebfa:	2102      	movs	r1, #2
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	f001 f825 	bl	800fc4c <ucdr_buffer_alignment>
 800ec02:	4601      	mov	r1, r0
 800ec04:	4620      	mov	r0, r4
 800ec06:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ec0a:	f001 f863 	bl	800fcd4 <ucdr_advance_buffer>
 800ec0e:	2102      	movs	r1, #2
 800ec10:	4620      	mov	r0, r4
 800ec12:	f000 ffbb 	bl	800fb8c <ucdr_check_buffer_available_for>
 800ec16:	bb60      	cbnz	r0, 800ec72 <ucdr_deserialize_uint16_t+0x7e>
 800ec18:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ec1c:	42be      	cmp	r6, r7
 800ec1e:	d923      	bls.n	800ec68 <ucdr_deserialize_uint16_t+0x74>
 800ec20:	6923      	ldr	r3, [r4, #16]
 800ec22:	60a6      	str	r6, [r4, #8]
 800ec24:	1bf6      	subs	r6, r6, r7
 800ec26:	4433      	add	r3, r6
 800ec28:	f1c6 0902 	rsb	r9, r6, #2
 800ec2c:	6123      	str	r3, [r4, #16]
 800ec2e:	4649      	mov	r1, r9
 800ec30:	4620      	mov	r0, r4
 800ec32:	f000 ffb7 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d034      	beq.n	800eca4 <ucdr_deserialize_uint16_t+0xb0>
 800ec3a:	7d23      	ldrb	r3, [r4, #20]
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d042      	beq.n	800ecc6 <ucdr_deserialize_uint16_t+0xd2>
 800ec40:	787b      	ldrb	r3, [r7, #1]
 800ec42:	702b      	strb	r3, [r5, #0]
 800ec44:	2e00      	cmp	r6, #0
 800ec46:	d03a      	beq.n	800ecbe <ucdr_deserialize_uint16_t+0xca>
 800ec48:	783b      	ldrb	r3, [r7, #0]
 800ec4a:	706b      	strb	r3, [r5, #1]
 800ec4c:	6923      	ldr	r3, [r4, #16]
 800ec4e:	68a2      	ldr	r2, [r4, #8]
 800ec50:	7da0      	ldrb	r0, [r4, #22]
 800ec52:	2102      	movs	r1, #2
 800ec54:	3302      	adds	r3, #2
 800ec56:	444a      	add	r2, r9
 800ec58:	1b9b      	subs	r3, r3, r6
 800ec5a:	7561      	strb	r1, [r4, #21]
 800ec5c:	60a2      	str	r2, [r4, #8]
 800ec5e:	6123      	str	r3, [r4, #16]
 800ec60:	f080 0001 	eor.w	r0, r0, #1
 800ec64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec68:	2102      	movs	r1, #2
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f000 ff9a 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800ec70:	b180      	cbz	r0, 800ec94 <ucdr_deserialize_uint16_t+0xa0>
 800ec72:	7d23      	ldrb	r3, [r4, #20]
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	68a3      	ldr	r3, [r4, #8]
 800ec78:	d011      	beq.n	800ec9e <ucdr_deserialize_uint16_t+0xaa>
 800ec7a:	785b      	ldrb	r3, [r3, #1]
 800ec7c:	702b      	strb	r3, [r5, #0]
 800ec7e:	68a3      	ldr	r3, [r4, #8]
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	706b      	strb	r3, [r5, #1]
 800ec84:	68a2      	ldr	r2, [r4, #8]
 800ec86:	6923      	ldr	r3, [r4, #16]
 800ec88:	3202      	adds	r2, #2
 800ec8a:	3302      	adds	r3, #2
 800ec8c:	2102      	movs	r1, #2
 800ec8e:	60a2      	str	r2, [r4, #8]
 800ec90:	6123      	str	r3, [r4, #16]
 800ec92:	7561      	strb	r1, [r4, #21]
 800ec94:	7da0      	ldrb	r0, [r4, #22]
 800ec96:	f080 0001 	eor.w	r0, r0, #1
 800ec9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec9e:	881b      	ldrh	r3, [r3, #0]
 800eca0:	802b      	strh	r3, [r5, #0]
 800eca2:	e7ef      	b.n	800ec84 <ucdr_deserialize_uint16_t+0x90>
 800eca4:	68a2      	ldr	r2, [r4, #8]
 800eca6:	6923      	ldr	r3, [r4, #16]
 800eca8:	7da0      	ldrb	r0, [r4, #22]
 800ecaa:	f884 8015 	strb.w	r8, [r4, #21]
 800ecae:	1b92      	subs	r2, r2, r6
 800ecb0:	1b9b      	subs	r3, r3, r6
 800ecb2:	60a2      	str	r2, [r4, #8]
 800ecb4:	6123      	str	r3, [r4, #16]
 800ecb6:	f080 0001 	eor.w	r0, r0, #1
 800ecba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecbe:	68a3      	ldr	r3, [r4, #8]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	706b      	strb	r3, [r5, #1]
 800ecc4:	e7c2      	b.n	800ec4c <ucdr_deserialize_uint16_t+0x58>
 800ecc6:	4639      	mov	r1, r7
 800ecc8:	4632      	mov	r2, r6
 800ecca:	4628      	mov	r0, r5
 800eccc:	f00a fd91 	bl	80197f2 <memcpy>
 800ecd0:	68a1      	ldr	r1, [r4, #8]
 800ecd2:	464a      	mov	r2, r9
 800ecd4:	19a8      	adds	r0, r5, r6
 800ecd6:	f00a fd8c 	bl	80197f2 <memcpy>
 800ecda:	e7b7      	b.n	800ec4c <ucdr_deserialize_uint16_t+0x58>

0800ecdc <ucdr_deserialize_endian_uint16_t>:
 800ecdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ece0:	460e      	mov	r6, r1
 800ece2:	2102      	movs	r1, #2
 800ece4:	4604      	mov	r4, r0
 800ece6:	4615      	mov	r5, r2
 800ece8:	f000 ffb0 	bl	800fc4c <ucdr_buffer_alignment>
 800ecec:	4601      	mov	r1, r0
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ecf4:	f000 ffee 	bl	800fcd4 <ucdr_advance_buffer>
 800ecf8:	2102      	movs	r1, #2
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f000 ff46 	bl	800fb8c <ucdr_check_buffer_available_for>
 800ed00:	bb70      	cbnz	r0, 800ed60 <ucdr_deserialize_endian_uint16_t+0x84>
 800ed02:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ed06:	4547      	cmp	r7, r8
 800ed08:	d925      	bls.n	800ed56 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ed0a:	6923      	ldr	r3, [r4, #16]
 800ed0c:	60a7      	str	r7, [r4, #8]
 800ed0e:	eba7 0708 	sub.w	r7, r7, r8
 800ed12:	443b      	add	r3, r7
 800ed14:	f1c7 0a02 	rsb	sl, r7, #2
 800ed18:	6123      	str	r3, [r4, #16]
 800ed1a:	4651      	mov	r1, sl
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	f000 ff41 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800ed22:	2800      	cmp	r0, #0
 800ed24:	d034      	beq.n	800ed90 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ed26:	2e01      	cmp	r6, #1
 800ed28:	d043      	beq.n	800edb2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800ed2a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ed2e:	702b      	strb	r3, [r5, #0]
 800ed30:	2f00      	cmp	r7, #0
 800ed32:	d03a      	beq.n	800edaa <ucdr_deserialize_endian_uint16_t+0xce>
 800ed34:	f898 3000 	ldrb.w	r3, [r8]
 800ed38:	706b      	strb	r3, [r5, #1]
 800ed3a:	6923      	ldr	r3, [r4, #16]
 800ed3c:	68a2      	ldr	r2, [r4, #8]
 800ed3e:	7da0      	ldrb	r0, [r4, #22]
 800ed40:	2102      	movs	r1, #2
 800ed42:	3302      	adds	r3, #2
 800ed44:	4452      	add	r2, sl
 800ed46:	1bdb      	subs	r3, r3, r7
 800ed48:	7561      	strb	r1, [r4, #21]
 800ed4a:	60a2      	str	r2, [r4, #8]
 800ed4c:	6123      	str	r3, [r4, #16]
 800ed4e:	f080 0001 	eor.w	r0, r0, #1
 800ed52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed56:	2102      	movs	r1, #2
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f000 ff23 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800ed5e:	b178      	cbz	r0, 800ed80 <ucdr_deserialize_endian_uint16_t+0xa4>
 800ed60:	2e01      	cmp	r6, #1
 800ed62:	68a3      	ldr	r3, [r4, #8]
 800ed64:	d011      	beq.n	800ed8a <ucdr_deserialize_endian_uint16_t+0xae>
 800ed66:	785b      	ldrb	r3, [r3, #1]
 800ed68:	702b      	strb	r3, [r5, #0]
 800ed6a:	68a3      	ldr	r3, [r4, #8]
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	706b      	strb	r3, [r5, #1]
 800ed70:	68a2      	ldr	r2, [r4, #8]
 800ed72:	6923      	ldr	r3, [r4, #16]
 800ed74:	3202      	adds	r2, #2
 800ed76:	3302      	adds	r3, #2
 800ed78:	2102      	movs	r1, #2
 800ed7a:	60a2      	str	r2, [r4, #8]
 800ed7c:	6123      	str	r3, [r4, #16]
 800ed7e:	7561      	strb	r1, [r4, #21]
 800ed80:	7da0      	ldrb	r0, [r4, #22]
 800ed82:	f080 0001 	eor.w	r0, r0, #1
 800ed86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed8a:	881b      	ldrh	r3, [r3, #0]
 800ed8c:	802b      	strh	r3, [r5, #0]
 800ed8e:	e7ef      	b.n	800ed70 <ucdr_deserialize_endian_uint16_t+0x94>
 800ed90:	68a2      	ldr	r2, [r4, #8]
 800ed92:	6923      	ldr	r3, [r4, #16]
 800ed94:	7da0      	ldrb	r0, [r4, #22]
 800ed96:	f884 9015 	strb.w	r9, [r4, #21]
 800ed9a:	1bd2      	subs	r2, r2, r7
 800ed9c:	1bdb      	subs	r3, r3, r7
 800ed9e:	60a2      	str	r2, [r4, #8]
 800eda0:	6123      	str	r3, [r4, #16]
 800eda2:	f080 0001 	eor.w	r0, r0, #1
 800eda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edaa:	68a3      	ldr	r3, [r4, #8]
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	706b      	strb	r3, [r5, #1]
 800edb0:	e7c3      	b.n	800ed3a <ucdr_deserialize_endian_uint16_t+0x5e>
 800edb2:	4641      	mov	r1, r8
 800edb4:	463a      	mov	r2, r7
 800edb6:	4628      	mov	r0, r5
 800edb8:	f00a fd1b 	bl	80197f2 <memcpy>
 800edbc:	68a1      	ldr	r1, [r4, #8]
 800edbe:	4652      	mov	r2, sl
 800edc0:	19e8      	adds	r0, r5, r7
 800edc2:	f00a fd16 	bl	80197f2 <memcpy>
 800edc6:	e7b8      	b.n	800ed3a <ucdr_deserialize_endian_uint16_t+0x5e>

0800edc8 <ucdr_serialize_uint32_t>:
 800edc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edcc:	b082      	sub	sp, #8
 800edce:	4604      	mov	r4, r0
 800edd0:	9101      	str	r1, [sp, #4]
 800edd2:	2104      	movs	r1, #4
 800edd4:	f000 ff3a 	bl	800fc4c <ucdr_buffer_alignment>
 800edd8:	4601      	mov	r1, r0
 800edda:	4620      	mov	r0, r4
 800eddc:	7d67      	ldrb	r7, [r4, #21]
 800edde:	f000 ff79 	bl	800fcd4 <ucdr_advance_buffer>
 800ede2:	2104      	movs	r1, #4
 800ede4:	4620      	mov	r0, r4
 800ede6:	f000 fed1 	bl	800fb8c <ucdr_check_buffer_available_for>
 800edea:	2800      	cmp	r0, #0
 800edec:	d139      	bne.n	800ee62 <ucdr_serialize_uint32_t+0x9a>
 800edee:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800edf2:	42ab      	cmp	r3, r5
 800edf4:	d930      	bls.n	800ee58 <ucdr_serialize_uint32_t+0x90>
 800edf6:	1b5e      	subs	r6, r3, r5
 800edf8:	60a3      	str	r3, [r4, #8]
 800edfa:	6923      	ldr	r3, [r4, #16]
 800edfc:	f1c6 0804 	rsb	r8, r6, #4
 800ee00:	4433      	add	r3, r6
 800ee02:	6123      	str	r3, [r4, #16]
 800ee04:	4641      	mov	r1, r8
 800ee06:	4620      	mov	r0, r4
 800ee08:	f000 fecc 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800ee0c:	2800      	cmp	r0, #0
 800ee0e:	d04c      	beq.n	800eeaa <ucdr_serialize_uint32_t+0xe2>
 800ee10:	7d23      	ldrb	r3, [r4, #20]
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d063      	beq.n	800eede <ucdr_serialize_uint32_t+0x116>
 800ee16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee1a:	702b      	strb	r3, [r5, #0]
 800ee1c:	2e00      	cmp	r6, #0
 800ee1e:	d051      	beq.n	800eec4 <ucdr_serialize_uint32_t+0xfc>
 800ee20:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ee24:	706b      	strb	r3, [r5, #1]
 800ee26:	2e01      	cmp	r6, #1
 800ee28:	d050      	beq.n	800eecc <ucdr_serialize_uint32_t+0x104>
 800ee2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ee2e:	70ab      	strb	r3, [r5, #2]
 800ee30:	2e02      	cmp	r6, #2
 800ee32:	d04f      	beq.n	800eed4 <ucdr_serialize_uint32_t+0x10c>
 800ee34:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ee38:	70eb      	strb	r3, [r5, #3]
 800ee3a:	6923      	ldr	r3, [r4, #16]
 800ee3c:	68a2      	ldr	r2, [r4, #8]
 800ee3e:	7da0      	ldrb	r0, [r4, #22]
 800ee40:	3304      	adds	r3, #4
 800ee42:	1b9e      	subs	r6, r3, r6
 800ee44:	4442      	add	r2, r8
 800ee46:	2304      	movs	r3, #4
 800ee48:	f080 0001 	eor.w	r0, r0, #1
 800ee4c:	60a2      	str	r2, [r4, #8]
 800ee4e:	6126      	str	r6, [r4, #16]
 800ee50:	7563      	strb	r3, [r4, #21]
 800ee52:	b002      	add	sp, #8
 800ee54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee58:	2104      	movs	r1, #4
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	f000 fea2 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800ee60:	b1d0      	cbz	r0, 800ee98 <ucdr_serialize_uint32_t+0xd0>
 800ee62:	7d23      	ldrb	r3, [r4, #20]
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	68a3      	ldr	r3, [r4, #8]
 800ee68:	d01c      	beq.n	800eea4 <ucdr_serialize_uint32_t+0xdc>
 800ee6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ee6e:	701a      	strb	r2, [r3, #0]
 800ee70:	68a3      	ldr	r3, [r4, #8]
 800ee72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ee76:	705a      	strb	r2, [r3, #1]
 800ee78:	68a3      	ldr	r3, [r4, #8]
 800ee7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ee7e:	709a      	strb	r2, [r3, #2]
 800ee80:	68a3      	ldr	r3, [r4, #8]
 800ee82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ee86:	70da      	strb	r2, [r3, #3]
 800ee88:	68a2      	ldr	r2, [r4, #8]
 800ee8a:	6923      	ldr	r3, [r4, #16]
 800ee8c:	3204      	adds	r2, #4
 800ee8e:	3304      	adds	r3, #4
 800ee90:	2104      	movs	r1, #4
 800ee92:	60a2      	str	r2, [r4, #8]
 800ee94:	6123      	str	r3, [r4, #16]
 800ee96:	7561      	strb	r1, [r4, #21]
 800ee98:	7da0      	ldrb	r0, [r4, #22]
 800ee9a:	f080 0001 	eor.w	r0, r0, #1
 800ee9e:	b002      	add	sp, #8
 800eea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea4:	9a01      	ldr	r2, [sp, #4]
 800eea6:	601a      	str	r2, [r3, #0]
 800eea8:	e7ee      	b.n	800ee88 <ucdr_serialize_uint32_t+0xc0>
 800eeaa:	68a2      	ldr	r2, [r4, #8]
 800eeac:	6923      	ldr	r3, [r4, #16]
 800eeae:	7da0      	ldrb	r0, [r4, #22]
 800eeb0:	7567      	strb	r7, [r4, #21]
 800eeb2:	1b92      	subs	r2, r2, r6
 800eeb4:	1b9b      	subs	r3, r3, r6
 800eeb6:	f080 0001 	eor.w	r0, r0, #1
 800eeba:	60a2      	str	r2, [r4, #8]
 800eebc:	6123      	str	r3, [r4, #16]
 800eebe:	b002      	add	sp, #8
 800eec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec4:	68a3      	ldr	r3, [r4, #8]
 800eec6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eeca:	701a      	strb	r2, [r3, #0]
 800eecc:	68a3      	ldr	r3, [r4, #8]
 800eece:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eed2:	701a      	strb	r2, [r3, #0]
 800eed4:	68a3      	ldr	r3, [r4, #8]
 800eed6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eeda:	701a      	strb	r2, [r3, #0]
 800eedc:	e7ad      	b.n	800ee3a <ucdr_serialize_uint32_t+0x72>
 800eede:	4628      	mov	r0, r5
 800eee0:	ad01      	add	r5, sp, #4
 800eee2:	4629      	mov	r1, r5
 800eee4:	4632      	mov	r2, r6
 800eee6:	f00a fc84 	bl	80197f2 <memcpy>
 800eeea:	68a0      	ldr	r0, [r4, #8]
 800eeec:	4642      	mov	r2, r8
 800eeee:	19a9      	adds	r1, r5, r6
 800eef0:	f00a fc7f 	bl	80197f2 <memcpy>
 800eef4:	e7a1      	b.n	800ee3a <ucdr_serialize_uint32_t+0x72>
 800eef6:	bf00      	nop

0800eef8 <ucdr_serialize_endian_uint32_t>:
 800eef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eefc:	b083      	sub	sp, #12
 800eefe:	460d      	mov	r5, r1
 800ef00:	2104      	movs	r1, #4
 800ef02:	4604      	mov	r4, r0
 800ef04:	9201      	str	r2, [sp, #4]
 800ef06:	f000 fea1 	bl	800fc4c <ucdr_buffer_alignment>
 800ef0a:	4601      	mov	r1, r0
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ef12:	f000 fedf 	bl	800fcd4 <ucdr_advance_buffer>
 800ef16:	2104      	movs	r1, #4
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f000 fe37 	bl	800fb8c <ucdr_check_buffer_available_for>
 800ef1e:	2800      	cmp	r0, #0
 800ef20:	d138      	bne.n	800ef94 <ucdr_serialize_endian_uint32_t+0x9c>
 800ef22:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ef26:	42b7      	cmp	r7, r6
 800ef28:	d92f      	bls.n	800ef8a <ucdr_serialize_endian_uint32_t+0x92>
 800ef2a:	6923      	ldr	r3, [r4, #16]
 800ef2c:	60a7      	str	r7, [r4, #8]
 800ef2e:	1bbf      	subs	r7, r7, r6
 800ef30:	443b      	add	r3, r7
 800ef32:	f1c7 0904 	rsb	r9, r7, #4
 800ef36:	6123      	str	r3, [r4, #16]
 800ef38:	4649      	mov	r1, r9
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	f000 fe32 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800ef40:	2800      	cmp	r0, #0
 800ef42:	d04a      	beq.n	800efda <ucdr_serialize_endian_uint32_t+0xe2>
 800ef44:	2d01      	cmp	r5, #1
 800ef46:	d063      	beq.n	800f010 <ucdr_serialize_endian_uint32_t+0x118>
 800ef48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef4c:	7033      	strb	r3, [r6, #0]
 800ef4e:	2f00      	cmp	r7, #0
 800ef50:	d051      	beq.n	800eff6 <ucdr_serialize_endian_uint32_t+0xfe>
 800ef52:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ef56:	7073      	strb	r3, [r6, #1]
 800ef58:	2f01      	cmp	r7, #1
 800ef5a:	d050      	beq.n	800effe <ucdr_serialize_endian_uint32_t+0x106>
 800ef5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ef60:	70b3      	strb	r3, [r6, #2]
 800ef62:	2f02      	cmp	r7, #2
 800ef64:	d04f      	beq.n	800f006 <ucdr_serialize_endian_uint32_t+0x10e>
 800ef66:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef6a:	70f3      	strb	r3, [r6, #3]
 800ef6c:	6923      	ldr	r3, [r4, #16]
 800ef6e:	68a2      	ldr	r2, [r4, #8]
 800ef70:	7da0      	ldrb	r0, [r4, #22]
 800ef72:	3304      	adds	r3, #4
 800ef74:	444a      	add	r2, r9
 800ef76:	1bdb      	subs	r3, r3, r7
 800ef78:	2104      	movs	r1, #4
 800ef7a:	f080 0001 	eor.w	r0, r0, #1
 800ef7e:	60a2      	str	r2, [r4, #8]
 800ef80:	6123      	str	r3, [r4, #16]
 800ef82:	7561      	strb	r1, [r4, #21]
 800ef84:	b003      	add	sp, #12
 800ef86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef8a:	2104      	movs	r1, #4
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f000 fe09 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800ef92:	b1c8      	cbz	r0, 800efc8 <ucdr_serialize_endian_uint32_t+0xd0>
 800ef94:	2d01      	cmp	r5, #1
 800ef96:	68a3      	ldr	r3, [r4, #8]
 800ef98:	d01c      	beq.n	800efd4 <ucdr_serialize_endian_uint32_t+0xdc>
 800ef9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ef9e:	701a      	strb	r2, [r3, #0]
 800efa0:	68a3      	ldr	r3, [r4, #8]
 800efa2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800efa6:	705a      	strb	r2, [r3, #1]
 800efa8:	68a3      	ldr	r3, [r4, #8]
 800efaa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800efae:	709a      	strb	r2, [r3, #2]
 800efb0:	68a3      	ldr	r3, [r4, #8]
 800efb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800efb6:	70da      	strb	r2, [r3, #3]
 800efb8:	68a2      	ldr	r2, [r4, #8]
 800efba:	6923      	ldr	r3, [r4, #16]
 800efbc:	3204      	adds	r2, #4
 800efbe:	3304      	adds	r3, #4
 800efc0:	2104      	movs	r1, #4
 800efc2:	60a2      	str	r2, [r4, #8]
 800efc4:	6123      	str	r3, [r4, #16]
 800efc6:	7561      	strb	r1, [r4, #21]
 800efc8:	7da0      	ldrb	r0, [r4, #22]
 800efca:	f080 0001 	eor.w	r0, r0, #1
 800efce:	b003      	add	sp, #12
 800efd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efd4:	9a01      	ldr	r2, [sp, #4]
 800efd6:	601a      	str	r2, [r3, #0]
 800efd8:	e7ee      	b.n	800efb8 <ucdr_serialize_endian_uint32_t+0xc0>
 800efda:	68a2      	ldr	r2, [r4, #8]
 800efdc:	6923      	ldr	r3, [r4, #16]
 800efde:	7da0      	ldrb	r0, [r4, #22]
 800efe0:	f884 8015 	strb.w	r8, [r4, #21]
 800efe4:	1bd2      	subs	r2, r2, r7
 800efe6:	1bdb      	subs	r3, r3, r7
 800efe8:	f080 0001 	eor.w	r0, r0, #1
 800efec:	60a2      	str	r2, [r4, #8]
 800efee:	6123      	str	r3, [r4, #16]
 800eff0:	b003      	add	sp, #12
 800eff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eff6:	68a3      	ldr	r3, [r4, #8]
 800eff8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800effc:	701a      	strb	r2, [r3, #0]
 800effe:	68a3      	ldr	r3, [r4, #8]
 800f000:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f004:	701a      	strb	r2, [r3, #0]
 800f006:	68a3      	ldr	r3, [r4, #8]
 800f008:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f00c:	701a      	strb	r2, [r3, #0]
 800f00e:	e7ad      	b.n	800ef6c <ucdr_serialize_endian_uint32_t+0x74>
 800f010:	ad01      	add	r5, sp, #4
 800f012:	4629      	mov	r1, r5
 800f014:	463a      	mov	r2, r7
 800f016:	4630      	mov	r0, r6
 800f018:	f00a fbeb 	bl	80197f2 <memcpy>
 800f01c:	68a0      	ldr	r0, [r4, #8]
 800f01e:	464a      	mov	r2, r9
 800f020:	19e9      	adds	r1, r5, r7
 800f022:	f00a fbe6 	bl	80197f2 <memcpy>
 800f026:	e7a1      	b.n	800ef6c <ucdr_serialize_endian_uint32_t+0x74>

0800f028 <ucdr_deserialize_uint32_t>:
 800f028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f02c:	460d      	mov	r5, r1
 800f02e:	2104      	movs	r1, #4
 800f030:	4604      	mov	r4, r0
 800f032:	f000 fe0b 	bl	800fc4c <ucdr_buffer_alignment>
 800f036:	4601      	mov	r1, r0
 800f038:	4620      	mov	r0, r4
 800f03a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f03e:	f000 fe49 	bl	800fcd4 <ucdr_advance_buffer>
 800f042:	2104      	movs	r1, #4
 800f044:	4620      	mov	r0, r4
 800f046:	f000 fda1 	bl	800fb8c <ucdr_check_buffer_available_for>
 800f04a:	2800      	cmp	r0, #0
 800f04c:	d138      	bne.n	800f0c0 <ucdr_deserialize_uint32_t+0x98>
 800f04e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f052:	42b7      	cmp	r7, r6
 800f054:	d92f      	bls.n	800f0b6 <ucdr_deserialize_uint32_t+0x8e>
 800f056:	6923      	ldr	r3, [r4, #16]
 800f058:	60a7      	str	r7, [r4, #8]
 800f05a:	1bbf      	subs	r7, r7, r6
 800f05c:	443b      	add	r3, r7
 800f05e:	f1c7 0904 	rsb	r9, r7, #4
 800f062:	6123      	str	r3, [r4, #16]
 800f064:	4649      	mov	r1, r9
 800f066:	4620      	mov	r0, r4
 800f068:	f000 fd9c 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d046      	beq.n	800f0fe <ucdr_deserialize_uint32_t+0xd6>
 800f070:	7d23      	ldrb	r3, [r4, #20]
 800f072:	2b01      	cmp	r3, #1
 800f074:	d05c      	beq.n	800f130 <ucdr_deserialize_uint32_t+0x108>
 800f076:	78f3      	ldrb	r3, [r6, #3]
 800f078:	702b      	strb	r3, [r5, #0]
 800f07a:	2f00      	cmp	r7, #0
 800f07c:	d04c      	beq.n	800f118 <ucdr_deserialize_uint32_t+0xf0>
 800f07e:	78b3      	ldrb	r3, [r6, #2]
 800f080:	706b      	strb	r3, [r5, #1]
 800f082:	2f01      	cmp	r7, #1
 800f084:	f105 0302 	add.w	r3, r5, #2
 800f088:	d04a      	beq.n	800f120 <ucdr_deserialize_uint32_t+0xf8>
 800f08a:	7873      	ldrb	r3, [r6, #1]
 800f08c:	70ab      	strb	r3, [r5, #2]
 800f08e:	2f02      	cmp	r7, #2
 800f090:	f105 0303 	add.w	r3, r5, #3
 800f094:	d048      	beq.n	800f128 <ucdr_deserialize_uint32_t+0x100>
 800f096:	7833      	ldrb	r3, [r6, #0]
 800f098:	70eb      	strb	r3, [r5, #3]
 800f09a:	6923      	ldr	r3, [r4, #16]
 800f09c:	68a2      	ldr	r2, [r4, #8]
 800f09e:	7da0      	ldrb	r0, [r4, #22]
 800f0a0:	2104      	movs	r1, #4
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	444a      	add	r2, r9
 800f0a6:	1bdb      	subs	r3, r3, r7
 800f0a8:	7561      	strb	r1, [r4, #21]
 800f0aa:	60a2      	str	r2, [r4, #8]
 800f0ac:	6123      	str	r3, [r4, #16]
 800f0ae:	f080 0001 	eor.w	r0, r0, #1
 800f0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0b6:	2104      	movs	r1, #4
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f000 fd73 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f0be:	b1b0      	cbz	r0, 800f0ee <ucdr_deserialize_uint32_t+0xc6>
 800f0c0:	7d23      	ldrb	r3, [r4, #20]
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	68a3      	ldr	r3, [r4, #8]
 800f0c6:	d017      	beq.n	800f0f8 <ucdr_deserialize_uint32_t+0xd0>
 800f0c8:	78db      	ldrb	r3, [r3, #3]
 800f0ca:	702b      	strb	r3, [r5, #0]
 800f0cc:	68a3      	ldr	r3, [r4, #8]
 800f0ce:	789b      	ldrb	r3, [r3, #2]
 800f0d0:	706b      	strb	r3, [r5, #1]
 800f0d2:	68a3      	ldr	r3, [r4, #8]
 800f0d4:	785b      	ldrb	r3, [r3, #1]
 800f0d6:	70ab      	strb	r3, [r5, #2]
 800f0d8:	68a3      	ldr	r3, [r4, #8]
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	70eb      	strb	r3, [r5, #3]
 800f0de:	68a2      	ldr	r2, [r4, #8]
 800f0e0:	6923      	ldr	r3, [r4, #16]
 800f0e2:	3204      	adds	r2, #4
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	2104      	movs	r1, #4
 800f0e8:	60a2      	str	r2, [r4, #8]
 800f0ea:	6123      	str	r3, [r4, #16]
 800f0ec:	7561      	strb	r1, [r4, #21]
 800f0ee:	7da0      	ldrb	r0, [r4, #22]
 800f0f0:	f080 0001 	eor.w	r0, r0, #1
 800f0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	602b      	str	r3, [r5, #0]
 800f0fc:	e7ef      	b.n	800f0de <ucdr_deserialize_uint32_t+0xb6>
 800f0fe:	68a2      	ldr	r2, [r4, #8]
 800f100:	6923      	ldr	r3, [r4, #16]
 800f102:	7da0      	ldrb	r0, [r4, #22]
 800f104:	f884 8015 	strb.w	r8, [r4, #21]
 800f108:	1bd2      	subs	r2, r2, r7
 800f10a:	1bdb      	subs	r3, r3, r7
 800f10c:	60a2      	str	r2, [r4, #8]
 800f10e:	6123      	str	r3, [r4, #16]
 800f110:	f080 0001 	eor.w	r0, r0, #1
 800f114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f118:	68a3      	ldr	r3, [r4, #8]
 800f11a:	789b      	ldrb	r3, [r3, #2]
 800f11c:	706b      	strb	r3, [r5, #1]
 800f11e:	1cab      	adds	r3, r5, #2
 800f120:	68a2      	ldr	r2, [r4, #8]
 800f122:	7852      	ldrb	r2, [r2, #1]
 800f124:	f803 2b01 	strb.w	r2, [r3], #1
 800f128:	68a2      	ldr	r2, [r4, #8]
 800f12a:	7812      	ldrb	r2, [r2, #0]
 800f12c:	701a      	strb	r2, [r3, #0]
 800f12e:	e7b4      	b.n	800f09a <ucdr_deserialize_uint32_t+0x72>
 800f130:	4631      	mov	r1, r6
 800f132:	463a      	mov	r2, r7
 800f134:	4628      	mov	r0, r5
 800f136:	f00a fb5c 	bl	80197f2 <memcpy>
 800f13a:	68a1      	ldr	r1, [r4, #8]
 800f13c:	464a      	mov	r2, r9
 800f13e:	19e8      	adds	r0, r5, r7
 800f140:	f00a fb57 	bl	80197f2 <memcpy>
 800f144:	e7a9      	b.n	800f09a <ucdr_deserialize_uint32_t+0x72>
 800f146:	bf00      	nop

0800f148 <ucdr_deserialize_endian_uint32_t>:
 800f148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f14c:	460e      	mov	r6, r1
 800f14e:	2104      	movs	r1, #4
 800f150:	4604      	mov	r4, r0
 800f152:	4615      	mov	r5, r2
 800f154:	f000 fd7a 	bl	800fc4c <ucdr_buffer_alignment>
 800f158:	4601      	mov	r1, r0
 800f15a:	4620      	mov	r0, r4
 800f15c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f160:	f000 fdb8 	bl	800fcd4 <ucdr_advance_buffer>
 800f164:	2104      	movs	r1, #4
 800f166:	4620      	mov	r0, r4
 800f168:	f000 fd10 	bl	800fb8c <ucdr_check_buffer_available_for>
 800f16c:	2800      	cmp	r0, #0
 800f16e:	d13c      	bne.n	800f1ea <ucdr_deserialize_endian_uint32_t+0xa2>
 800f170:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f174:	42bb      	cmp	r3, r7
 800f176:	d933      	bls.n	800f1e0 <ucdr_deserialize_endian_uint32_t+0x98>
 800f178:	eba3 0807 	sub.w	r8, r3, r7
 800f17c:	60a3      	str	r3, [r4, #8]
 800f17e:	6923      	ldr	r3, [r4, #16]
 800f180:	f1c8 0a04 	rsb	sl, r8, #4
 800f184:	4443      	add	r3, r8
 800f186:	6123      	str	r3, [r4, #16]
 800f188:	4651      	mov	r1, sl
 800f18a:	4620      	mov	r0, r4
 800f18c:	f000 fd0a 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f190:	2800      	cmp	r0, #0
 800f192:	d048      	beq.n	800f226 <ucdr_deserialize_endian_uint32_t+0xde>
 800f194:	2e01      	cmp	r6, #1
 800f196:	d061      	beq.n	800f25c <ucdr_deserialize_endian_uint32_t+0x114>
 800f198:	78fb      	ldrb	r3, [r7, #3]
 800f19a:	702b      	strb	r3, [r5, #0]
 800f19c:	f1b8 0f00 	cmp.w	r8, #0
 800f1a0:	d050      	beq.n	800f244 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f1a2:	78bb      	ldrb	r3, [r7, #2]
 800f1a4:	706b      	strb	r3, [r5, #1]
 800f1a6:	f1b8 0f01 	cmp.w	r8, #1
 800f1aa:	f105 0302 	add.w	r3, r5, #2
 800f1ae:	d04d      	beq.n	800f24c <ucdr_deserialize_endian_uint32_t+0x104>
 800f1b0:	787b      	ldrb	r3, [r7, #1]
 800f1b2:	70ab      	strb	r3, [r5, #2]
 800f1b4:	f1b8 0f02 	cmp.w	r8, #2
 800f1b8:	f105 0303 	add.w	r3, r5, #3
 800f1bc:	d04a      	beq.n	800f254 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f1be:	783b      	ldrb	r3, [r7, #0]
 800f1c0:	70eb      	strb	r3, [r5, #3]
 800f1c2:	6923      	ldr	r3, [r4, #16]
 800f1c4:	68a2      	ldr	r2, [r4, #8]
 800f1c6:	7da0      	ldrb	r0, [r4, #22]
 800f1c8:	2104      	movs	r1, #4
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	4452      	add	r2, sl
 800f1ce:	eba3 0308 	sub.w	r3, r3, r8
 800f1d2:	7561      	strb	r1, [r4, #21]
 800f1d4:	60a2      	str	r2, [r4, #8]
 800f1d6:	6123      	str	r3, [r4, #16]
 800f1d8:	f080 0001 	eor.w	r0, r0, #1
 800f1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1e0:	2104      	movs	r1, #4
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	f000 fcde 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f1e8:	b1a8      	cbz	r0, 800f216 <ucdr_deserialize_endian_uint32_t+0xce>
 800f1ea:	2e01      	cmp	r6, #1
 800f1ec:	68a3      	ldr	r3, [r4, #8]
 800f1ee:	d017      	beq.n	800f220 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f1f0:	78db      	ldrb	r3, [r3, #3]
 800f1f2:	702b      	strb	r3, [r5, #0]
 800f1f4:	68a3      	ldr	r3, [r4, #8]
 800f1f6:	789b      	ldrb	r3, [r3, #2]
 800f1f8:	706b      	strb	r3, [r5, #1]
 800f1fa:	68a3      	ldr	r3, [r4, #8]
 800f1fc:	785b      	ldrb	r3, [r3, #1]
 800f1fe:	70ab      	strb	r3, [r5, #2]
 800f200:	68a3      	ldr	r3, [r4, #8]
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	70eb      	strb	r3, [r5, #3]
 800f206:	68a2      	ldr	r2, [r4, #8]
 800f208:	6923      	ldr	r3, [r4, #16]
 800f20a:	3204      	adds	r2, #4
 800f20c:	3304      	adds	r3, #4
 800f20e:	2104      	movs	r1, #4
 800f210:	60a2      	str	r2, [r4, #8]
 800f212:	6123      	str	r3, [r4, #16]
 800f214:	7561      	strb	r1, [r4, #21]
 800f216:	7da0      	ldrb	r0, [r4, #22]
 800f218:	f080 0001 	eor.w	r0, r0, #1
 800f21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	602b      	str	r3, [r5, #0]
 800f224:	e7ef      	b.n	800f206 <ucdr_deserialize_endian_uint32_t+0xbe>
 800f226:	68a2      	ldr	r2, [r4, #8]
 800f228:	6923      	ldr	r3, [r4, #16]
 800f22a:	7da0      	ldrb	r0, [r4, #22]
 800f22c:	f884 9015 	strb.w	r9, [r4, #21]
 800f230:	eba2 0208 	sub.w	r2, r2, r8
 800f234:	eba3 0308 	sub.w	r3, r3, r8
 800f238:	60a2      	str	r2, [r4, #8]
 800f23a:	6123      	str	r3, [r4, #16]
 800f23c:	f080 0001 	eor.w	r0, r0, #1
 800f240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f244:	68a3      	ldr	r3, [r4, #8]
 800f246:	789b      	ldrb	r3, [r3, #2]
 800f248:	706b      	strb	r3, [r5, #1]
 800f24a:	1cab      	adds	r3, r5, #2
 800f24c:	68a2      	ldr	r2, [r4, #8]
 800f24e:	7852      	ldrb	r2, [r2, #1]
 800f250:	f803 2b01 	strb.w	r2, [r3], #1
 800f254:	68a2      	ldr	r2, [r4, #8]
 800f256:	7812      	ldrb	r2, [r2, #0]
 800f258:	701a      	strb	r2, [r3, #0]
 800f25a:	e7b2      	b.n	800f1c2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f25c:	4639      	mov	r1, r7
 800f25e:	4642      	mov	r2, r8
 800f260:	4628      	mov	r0, r5
 800f262:	f00a fac6 	bl	80197f2 <memcpy>
 800f266:	68a1      	ldr	r1, [r4, #8]
 800f268:	4652      	mov	r2, sl
 800f26a:	eb05 0008 	add.w	r0, r5, r8
 800f26e:	f00a fac0 	bl	80197f2 <memcpy>
 800f272:	e7a6      	b.n	800f1c2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f274 <ucdr_serialize_uint64_t>:
 800f274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f278:	2108      	movs	r1, #8
 800f27a:	b082      	sub	sp, #8
 800f27c:	4604      	mov	r4, r0
 800f27e:	e9cd 2300 	strd	r2, r3, [sp]
 800f282:	f000 fce3 	bl	800fc4c <ucdr_buffer_alignment>
 800f286:	4601      	mov	r1, r0
 800f288:	4620      	mov	r0, r4
 800f28a:	7d67      	ldrb	r7, [r4, #21]
 800f28c:	f000 fd22 	bl	800fcd4 <ucdr_advance_buffer>
 800f290:	2108      	movs	r1, #8
 800f292:	4620      	mov	r0, r4
 800f294:	f000 fc7a 	bl	800fb8c <ucdr_check_buffer_available_for>
 800f298:	2800      	cmp	r0, #0
 800f29a:	d14e      	bne.n	800f33a <ucdr_serialize_uint64_t+0xc6>
 800f29c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f2a0:	42ab      	cmp	r3, r5
 800f2a2:	d945      	bls.n	800f330 <ucdr_serialize_uint64_t+0xbc>
 800f2a4:	1b5e      	subs	r6, r3, r5
 800f2a6:	60a3      	str	r3, [r4, #8]
 800f2a8:	6923      	ldr	r3, [r4, #16]
 800f2aa:	f1c6 0808 	rsb	r8, r6, #8
 800f2ae:	4433      	add	r3, r6
 800f2b0:	6123      	str	r3, [r4, #16]
 800f2b2:	4641      	mov	r1, r8
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f000 fc75 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f2ba:	2800      	cmp	r0, #0
 800f2bc:	d074      	beq.n	800f3a8 <ucdr_serialize_uint64_t+0x134>
 800f2be:	7d23      	ldrb	r3, [r4, #20]
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	f000 809b 	beq.w	800f3fc <ucdr_serialize_uint64_t+0x188>
 800f2c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f2ca:	702b      	strb	r3, [r5, #0]
 800f2cc:	2e00      	cmp	r6, #0
 800f2ce:	d078      	beq.n	800f3c2 <ucdr_serialize_uint64_t+0x14e>
 800f2d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f2d4:	706b      	strb	r3, [r5, #1]
 800f2d6:	2e01      	cmp	r6, #1
 800f2d8:	d077      	beq.n	800f3ca <ucdr_serialize_uint64_t+0x156>
 800f2da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f2de:	70ab      	strb	r3, [r5, #2]
 800f2e0:	2e02      	cmp	r6, #2
 800f2e2:	d076      	beq.n	800f3d2 <ucdr_serialize_uint64_t+0x15e>
 800f2e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f2e8:	70eb      	strb	r3, [r5, #3]
 800f2ea:	2e03      	cmp	r6, #3
 800f2ec:	d075      	beq.n	800f3da <ucdr_serialize_uint64_t+0x166>
 800f2ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f2f2:	712b      	strb	r3, [r5, #4]
 800f2f4:	2e04      	cmp	r6, #4
 800f2f6:	d074      	beq.n	800f3e2 <ucdr_serialize_uint64_t+0x16e>
 800f2f8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f2fc:	716b      	strb	r3, [r5, #5]
 800f2fe:	2e05      	cmp	r6, #5
 800f300:	d073      	beq.n	800f3ea <ucdr_serialize_uint64_t+0x176>
 800f302:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f306:	71ab      	strb	r3, [r5, #6]
 800f308:	2e06      	cmp	r6, #6
 800f30a:	d072      	beq.n	800f3f2 <ucdr_serialize_uint64_t+0x17e>
 800f30c:	f89d 3000 	ldrb.w	r3, [sp]
 800f310:	71eb      	strb	r3, [r5, #7]
 800f312:	6923      	ldr	r3, [r4, #16]
 800f314:	68a2      	ldr	r2, [r4, #8]
 800f316:	7da0      	ldrb	r0, [r4, #22]
 800f318:	3308      	adds	r3, #8
 800f31a:	1b9e      	subs	r6, r3, r6
 800f31c:	4442      	add	r2, r8
 800f31e:	2308      	movs	r3, #8
 800f320:	f080 0001 	eor.w	r0, r0, #1
 800f324:	60a2      	str	r2, [r4, #8]
 800f326:	6126      	str	r6, [r4, #16]
 800f328:	7563      	strb	r3, [r4, #21]
 800f32a:	b002      	add	sp, #8
 800f32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f330:	2108      	movs	r1, #8
 800f332:	4620      	mov	r0, r4
 800f334:	f000 fc36 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f338:	b350      	cbz	r0, 800f390 <ucdr_serialize_uint64_t+0x11c>
 800f33a:	7d23      	ldrb	r3, [r4, #20]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d02d      	beq.n	800f39c <ucdr_serialize_uint64_t+0x128>
 800f340:	68a3      	ldr	r3, [r4, #8]
 800f342:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f346:	701a      	strb	r2, [r3, #0]
 800f348:	68a3      	ldr	r3, [r4, #8]
 800f34a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f34e:	705a      	strb	r2, [r3, #1]
 800f350:	68a3      	ldr	r3, [r4, #8]
 800f352:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f356:	709a      	strb	r2, [r3, #2]
 800f358:	68a3      	ldr	r3, [r4, #8]
 800f35a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f35e:	70da      	strb	r2, [r3, #3]
 800f360:	68a3      	ldr	r3, [r4, #8]
 800f362:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f366:	711a      	strb	r2, [r3, #4]
 800f368:	68a3      	ldr	r3, [r4, #8]
 800f36a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f36e:	715a      	strb	r2, [r3, #5]
 800f370:	68a3      	ldr	r3, [r4, #8]
 800f372:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f376:	719a      	strb	r2, [r3, #6]
 800f378:	68a3      	ldr	r3, [r4, #8]
 800f37a:	f89d 2000 	ldrb.w	r2, [sp]
 800f37e:	71da      	strb	r2, [r3, #7]
 800f380:	68a2      	ldr	r2, [r4, #8]
 800f382:	6923      	ldr	r3, [r4, #16]
 800f384:	3208      	adds	r2, #8
 800f386:	3308      	adds	r3, #8
 800f388:	2108      	movs	r1, #8
 800f38a:	60a2      	str	r2, [r4, #8]
 800f38c:	6123      	str	r3, [r4, #16]
 800f38e:	7561      	strb	r1, [r4, #21]
 800f390:	7da0      	ldrb	r0, [r4, #22]
 800f392:	f080 0001 	eor.w	r0, r0, #1
 800f396:	b002      	add	sp, #8
 800f398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f39c:	466b      	mov	r3, sp
 800f39e:	cb03      	ldmia	r3!, {r0, r1}
 800f3a0:	68a3      	ldr	r3, [r4, #8]
 800f3a2:	6018      	str	r0, [r3, #0]
 800f3a4:	6059      	str	r1, [r3, #4]
 800f3a6:	e7eb      	b.n	800f380 <ucdr_serialize_uint64_t+0x10c>
 800f3a8:	68a2      	ldr	r2, [r4, #8]
 800f3aa:	6923      	ldr	r3, [r4, #16]
 800f3ac:	7da0      	ldrb	r0, [r4, #22]
 800f3ae:	7567      	strb	r7, [r4, #21]
 800f3b0:	1b92      	subs	r2, r2, r6
 800f3b2:	1b9b      	subs	r3, r3, r6
 800f3b4:	f080 0001 	eor.w	r0, r0, #1
 800f3b8:	60a2      	str	r2, [r4, #8]
 800f3ba:	6123      	str	r3, [r4, #16]
 800f3bc:	b002      	add	sp, #8
 800f3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c2:	68a3      	ldr	r3, [r4, #8]
 800f3c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f3c8:	701a      	strb	r2, [r3, #0]
 800f3ca:	68a3      	ldr	r3, [r4, #8]
 800f3cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f3d0:	701a      	strb	r2, [r3, #0]
 800f3d2:	68a3      	ldr	r3, [r4, #8]
 800f3d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f3d8:	701a      	strb	r2, [r3, #0]
 800f3da:	68a3      	ldr	r3, [r4, #8]
 800f3dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f3e0:	701a      	strb	r2, [r3, #0]
 800f3e2:	68a3      	ldr	r3, [r4, #8]
 800f3e4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f3e8:	701a      	strb	r2, [r3, #0]
 800f3ea:	68a3      	ldr	r3, [r4, #8]
 800f3ec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f3f0:	701a      	strb	r2, [r3, #0]
 800f3f2:	68a3      	ldr	r3, [r4, #8]
 800f3f4:	f89d 2000 	ldrb.w	r2, [sp]
 800f3f8:	701a      	strb	r2, [r3, #0]
 800f3fa:	e78a      	b.n	800f312 <ucdr_serialize_uint64_t+0x9e>
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	466d      	mov	r5, sp
 800f400:	4629      	mov	r1, r5
 800f402:	4632      	mov	r2, r6
 800f404:	f00a f9f5 	bl	80197f2 <memcpy>
 800f408:	68a0      	ldr	r0, [r4, #8]
 800f40a:	4642      	mov	r2, r8
 800f40c:	19a9      	adds	r1, r5, r6
 800f40e:	f00a f9f0 	bl	80197f2 <memcpy>
 800f412:	e77e      	b.n	800f312 <ucdr_serialize_uint64_t+0x9e>

0800f414 <ucdr_serialize_int16_t>:
 800f414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f418:	b082      	sub	sp, #8
 800f41a:	460b      	mov	r3, r1
 800f41c:	2102      	movs	r1, #2
 800f41e:	4604      	mov	r4, r0
 800f420:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f424:	f000 fc12 	bl	800fc4c <ucdr_buffer_alignment>
 800f428:	4601      	mov	r1, r0
 800f42a:	4620      	mov	r0, r4
 800f42c:	7d67      	ldrb	r7, [r4, #21]
 800f42e:	f000 fc51 	bl	800fcd4 <ucdr_advance_buffer>
 800f432:	2102      	movs	r1, #2
 800f434:	4620      	mov	r0, r4
 800f436:	f000 fba9 	bl	800fb8c <ucdr_check_buffer_available_for>
 800f43a:	bb78      	cbnz	r0, 800f49c <ucdr_serialize_int16_t+0x88>
 800f43c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f440:	42ab      	cmp	r3, r5
 800f442:	d926      	bls.n	800f492 <ucdr_serialize_int16_t+0x7e>
 800f444:	1b5e      	subs	r6, r3, r5
 800f446:	60a3      	str	r3, [r4, #8]
 800f448:	6923      	ldr	r3, [r4, #16]
 800f44a:	f1c6 0802 	rsb	r8, r6, #2
 800f44e:	4433      	add	r3, r6
 800f450:	6123      	str	r3, [r4, #16]
 800f452:	4641      	mov	r1, r8
 800f454:	4620      	mov	r0, r4
 800f456:	f000 fba5 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d03b      	beq.n	800f4d6 <ucdr_serialize_int16_t+0xc2>
 800f45e:	7d23      	ldrb	r3, [r4, #20]
 800f460:	2b01      	cmp	r3, #1
 800f462:	d04a      	beq.n	800f4fa <ucdr_serialize_int16_t+0xe6>
 800f464:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f468:	702b      	strb	r3, [r5, #0]
 800f46a:	2e00      	cmp	r6, #0
 800f46c:	d040      	beq.n	800f4f0 <ucdr_serialize_int16_t+0xdc>
 800f46e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f472:	706b      	strb	r3, [r5, #1]
 800f474:	6923      	ldr	r3, [r4, #16]
 800f476:	68a2      	ldr	r2, [r4, #8]
 800f478:	7da0      	ldrb	r0, [r4, #22]
 800f47a:	3302      	adds	r3, #2
 800f47c:	1b9e      	subs	r6, r3, r6
 800f47e:	4442      	add	r2, r8
 800f480:	2302      	movs	r3, #2
 800f482:	f080 0001 	eor.w	r0, r0, #1
 800f486:	60a2      	str	r2, [r4, #8]
 800f488:	6126      	str	r6, [r4, #16]
 800f48a:	7563      	strb	r3, [r4, #21]
 800f48c:	b002      	add	sp, #8
 800f48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f492:	2102      	movs	r1, #2
 800f494:	4620      	mov	r0, r4
 800f496:	f000 fb85 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f49a:	b190      	cbz	r0, 800f4c2 <ucdr_serialize_int16_t+0xae>
 800f49c:	7d23      	ldrb	r3, [r4, #20]
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	68a3      	ldr	r3, [r4, #8]
 800f4a2:	d014      	beq.n	800f4ce <ucdr_serialize_int16_t+0xba>
 800f4a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f4a8:	701a      	strb	r2, [r3, #0]
 800f4aa:	68a3      	ldr	r3, [r4, #8]
 800f4ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f4b0:	705a      	strb	r2, [r3, #1]
 800f4b2:	68a2      	ldr	r2, [r4, #8]
 800f4b4:	6923      	ldr	r3, [r4, #16]
 800f4b6:	3202      	adds	r2, #2
 800f4b8:	3302      	adds	r3, #2
 800f4ba:	2102      	movs	r1, #2
 800f4bc:	60a2      	str	r2, [r4, #8]
 800f4be:	6123      	str	r3, [r4, #16]
 800f4c0:	7561      	strb	r1, [r4, #21]
 800f4c2:	7da0      	ldrb	r0, [r4, #22]
 800f4c4:	f080 0001 	eor.w	r0, r0, #1
 800f4c8:	b002      	add	sp, #8
 800f4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f4d2:	801a      	strh	r2, [r3, #0]
 800f4d4:	e7ed      	b.n	800f4b2 <ucdr_serialize_int16_t+0x9e>
 800f4d6:	68a2      	ldr	r2, [r4, #8]
 800f4d8:	6923      	ldr	r3, [r4, #16]
 800f4da:	7da0      	ldrb	r0, [r4, #22]
 800f4dc:	7567      	strb	r7, [r4, #21]
 800f4de:	1b92      	subs	r2, r2, r6
 800f4e0:	1b9b      	subs	r3, r3, r6
 800f4e2:	f080 0001 	eor.w	r0, r0, #1
 800f4e6:	60a2      	str	r2, [r4, #8]
 800f4e8:	6123      	str	r3, [r4, #16]
 800f4ea:	b002      	add	sp, #8
 800f4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4f0:	68a3      	ldr	r3, [r4, #8]
 800f4f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f4f6:	701a      	strb	r2, [r3, #0]
 800f4f8:	e7bc      	b.n	800f474 <ucdr_serialize_int16_t+0x60>
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	f10d 0506 	add.w	r5, sp, #6
 800f500:	4629      	mov	r1, r5
 800f502:	4632      	mov	r2, r6
 800f504:	f00a f975 	bl	80197f2 <memcpy>
 800f508:	68a0      	ldr	r0, [r4, #8]
 800f50a:	4642      	mov	r2, r8
 800f50c:	19a9      	adds	r1, r5, r6
 800f50e:	f00a f970 	bl	80197f2 <memcpy>
 800f512:	e7af      	b.n	800f474 <ucdr_serialize_int16_t+0x60>

0800f514 <ucdr_deserialize_int16_t>:
 800f514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f518:	460d      	mov	r5, r1
 800f51a:	2102      	movs	r1, #2
 800f51c:	4604      	mov	r4, r0
 800f51e:	f000 fb95 	bl	800fc4c <ucdr_buffer_alignment>
 800f522:	4601      	mov	r1, r0
 800f524:	4620      	mov	r0, r4
 800f526:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f52a:	f000 fbd3 	bl	800fcd4 <ucdr_advance_buffer>
 800f52e:	2102      	movs	r1, #2
 800f530:	4620      	mov	r0, r4
 800f532:	f000 fb2b 	bl	800fb8c <ucdr_check_buffer_available_for>
 800f536:	bb60      	cbnz	r0, 800f592 <ucdr_deserialize_int16_t+0x7e>
 800f538:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f53c:	42be      	cmp	r6, r7
 800f53e:	d923      	bls.n	800f588 <ucdr_deserialize_int16_t+0x74>
 800f540:	6923      	ldr	r3, [r4, #16]
 800f542:	60a6      	str	r6, [r4, #8]
 800f544:	1bf6      	subs	r6, r6, r7
 800f546:	4433      	add	r3, r6
 800f548:	f1c6 0902 	rsb	r9, r6, #2
 800f54c:	6123      	str	r3, [r4, #16]
 800f54e:	4649      	mov	r1, r9
 800f550:	4620      	mov	r0, r4
 800f552:	f000 fb27 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f556:	2800      	cmp	r0, #0
 800f558:	d034      	beq.n	800f5c4 <ucdr_deserialize_int16_t+0xb0>
 800f55a:	7d23      	ldrb	r3, [r4, #20]
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d042      	beq.n	800f5e6 <ucdr_deserialize_int16_t+0xd2>
 800f560:	787b      	ldrb	r3, [r7, #1]
 800f562:	702b      	strb	r3, [r5, #0]
 800f564:	2e00      	cmp	r6, #0
 800f566:	d03a      	beq.n	800f5de <ucdr_deserialize_int16_t+0xca>
 800f568:	783b      	ldrb	r3, [r7, #0]
 800f56a:	706b      	strb	r3, [r5, #1]
 800f56c:	6923      	ldr	r3, [r4, #16]
 800f56e:	68a2      	ldr	r2, [r4, #8]
 800f570:	7da0      	ldrb	r0, [r4, #22]
 800f572:	2102      	movs	r1, #2
 800f574:	3302      	adds	r3, #2
 800f576:	444a      	add	r2, r9
 800f578:	1b9b      	subs	r3, r3, r6
 800f57a:	7561      	strb	r1, [r4, #21]
 800f57c:	60a2      	str	r2, [r4, #8]
 800f57e:	6123      	str	r3, [r4, #16]
 800f580:	f080 0001 	eor.w	r0, r0, #1
 800f584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f588:	2102      	movs	r1, #2
 800f58a:	4620      	mov	r0, r4
 800f58c:	f000 fb0a 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f590:	b180      	cbz	r0, 800f5b4 <ucdr_deserialize_int16_t+0xa0>
 800f592:	7d23      	ldrb	r3, [r4, #20]
 800f594:	2b01      	cmp	r3, #1
 800f596:	68a3      	ldr	r3, [r4, #8]
 800f598:	d011      	beq.n	800f5be <ucdr_deserialize_int16_t+0xaa>
 800f59a:	785b      	ldrb	r3, [r3, #1]
 800f59c:	702b      	strb	r3, [r5, #0]
 800f59e:	68a3      	ldr	r3, [r4, #8]
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	706b      	strb	r3, [r5, #1]
 800f5a4:	68a2      	ldr	r2, [r4, #8]
 800f5a6:	6923      	ldr	r3, [r4, #16]
 800f5a8:	3202      	adds	r2, #2
 800f5aa:	3302      	adds	r3, #2
 800f5ac:	2102      	movs	r1, #2
 800f5ae:	60a2      	str	r2, [r4, #8]
 800f5b0:	6123      	str	r3, [r4, #16]
 800f5b2:	7561      	strb	r1, [r4, #21]
 800f5b4:	7da0      	ldrb	r0, [r4, #22]
 800f5b6:	f080 0001 	eor.w	r0, r0, #1
 800f5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5be:	881b      	ldrh	r3, [r3, #0]
 800f5c0:	802b      	strh	r3, [r5, #0]
 800f5c2:	e7ef      	b.n	800f5a4 <ucdr_deserialize_int16_t+0x90>
 800f5c4:	68a2      	ldr	r2, [r4, #8]
 800f5c6:	6923      	ldr	r3, [r4, #16]
 800f5c8:	7da0      	ldrb	r0, [r4, #22]
 800f5ca:	f884 8015 	strb.w	r8, [r4, #21]
 800f5ce:	1b92      	subs	r2, r2, r6
 800f5d0:	1b9b      	subs	r3, r3, r6
 800f5d2:	60a2      	str	r2, [r4, #8]
 800f5d4:	6123      	str	r3, [r4, #16]
 800f5d6:	f080 0001 	eor.w	r0, r0, #1
 800f5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5de:	68a3      	ldr	r3, [r4, #8]
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	706b      	strb	r3, [r5, #1]
 800f5e4:	e7c2      	b.n	800f56c <ucdr_deserialize_int16_t+0x58>
 800f5e6:	4639      	mov	r1, r7
 800f5e8:	4632      	mov	r2, r6
 800f5ea:	4628      	mov	r0, r5
 800f5ec:	f00a f901 	bl	80197f2 <memcpy>
 800f5f0:	68a1      	ldr	r1, [r4, #8]
 800f5f2:	464a      	mov	r2, r9
 800f5f4:	19a8      	adds	r0, r5, r6
 800f5f6:	f00a f8fc 	bl	80197f2 <memcpy>
 800f5fa:	e7b7      	b.n	800f56c <ucdr_deserialize_int16_t+0x58>

0800f5fc <ucdr_serialize_int32_t>:
 800f5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f600:	b082      	sub	sp, #8
 800f602:	4604      	mov	r4, r0
 800f604:	9101      	str	r1, [sp, #4]
 800f606:	2104      	movs	r1, #4
 800f608:	f000 fb20 	bl	800fc4c <ucdr_buffer_alignment>
 800f60c:	4601      	mov	r1, r0
 800f60e:	4620      	mov	r0, r4
 800f610:	7d67      	ldrb	r7, [r4, #21]
 800f612:	f000 fb5f 	bl	800fcd4 <ucdr_advance_buffer>
 800f616:	2104      	movs	r1, #4
 800f618:	4620      	mov	r0, r4
 800f61a:	f000 fab7 	bl	800fb8c <ucdr_check_buffer_available_for>
 800f61e:	2800      	cmp	r0, #0
 800f620:	d139      	bne.n	800f696 <ucdr_serialize_int32_t+0x9a>
 800f622:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f626:	42ab      	cmp	r3, r5
 800f628:	d930      	bls.n	800f68c <ucdr_serialize_int32_t+0x90>
 800f62a:	1b5e      	subs	r6, r3, r5
 800f62c:	60a3      	str	r3, [r4, #8]
 800f62e:	6923      	ldr	r3, [r4, #16]
 800f630:	f1c6 0804 	rsb	r8, r6, #4
 800f634:	4433      	add	r3, r6
 800f636:	6123      	str	r3, [r4, #16]
 800f638:	4641      	mov	r1, r8
 800f63a:	4620      	mov	r0, r4
 800f63c:	f000 fab2 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f640:	2800      	cmp	r0, #0
 800f642:	d04c      	beq.n	800f6de <ucdr_serialize_int32_t+0xe2>
 800f644:	7d23      	ldrb	r3, [r4, #20]
 800f646:	2b01      	cmp	r3, #1
 800f648:	d063      	beq.n	800f712 <ucdr_serialize_int32_t+0x116>
 800f64a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f64e:	702b      	strb	r3, [r5, #0]
 800f650:	2e00      	cmp	r6, #0
 800f652:	d051      	beq.n	800f6f8 <ucdr_serialize_int32_t+0xfc>
 800f654:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f658:	706b      	strb	r3, [r5, #1]
 800f65a:	2e01      	cmp	r6, #1
 800f65c:	d050      	beq.n	800f700 <ucdr_serialize_int32_t+0x104>
 800f65e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f662:	70ab      	strb	r3, [r5, #2]
 800f664:	2e02      	cmp	r6, #2
 800f666:	d04f      	beq.n	800f708 <ucdr_serialize_int32_t+0x10c>
 800f668:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f66c:	70eb      	strb	r3, [r5, #3]
 800f66e:	6923      	ldr	r3, [r4, #16]
 800f670:	68a2      	ldr	r2, [r4, #8]
 800f672:	7da0      	ldrb	r0, [r4, #22]
 800f674:	3304      	adds	r3, #4
 800f676:	1b9e      	subs	r6, r3, r6
 800f678:	4442      	add	r2, r8
 800f67a:	2304      	movs	r3, #4
 800f67c:	f080 0001 	eor.w	r0, r0, #1
 800f680:	60a2      	str	r2, [r4, #8]
 800f682:	6126      	str	r6, [r4, #16]
 800f684:	7563      	strb	r3, [r4, #21]
 800f686:	b002      	add	sp, #8
 800f688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f68c:	2104      	movs	r1, #4
 800f68e:	4620      	mov	r0, r4
 800f690:	f000 fa88 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f694:	b1d0      	cbz	r0, 800f6cc <ucdr_serialize_int32_t+0xd0>
 800f696:	7d23      	ldrb	r3, [r4, #20]
 800f698:	2b01      	cmp	r3, #1
 800f69a:	68a3      	ldr	r3, [r4, #8]
 800f69c:	d01c      	beq.n	800f6d8 <ucdr_serialize_int32_t+0xdc>
 800f69e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f6a2:	701a      	strb	r2, [r3, #0]
 800f6a4:	68a3      	ldr	r3, [r4, #8]
 800f6a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6aa:	705a      	strb	r2, [r3, #1]
 800f6ac:	68a3      	ldr	r3, [r4, #8]
 800f6ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f6b2:	709a      	strb	r2, [r3, #2]
 800f6b4:	68a3      	ldr	r3, [r4, #8]
 800f6b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f6ba:	70da      	strb	r2, [r3, #3]
 800f6bc:	68a2      	ldr	r2, [r4, #8]
 800f6be:	6923      	ldr	r3, [r4, #16]
 800f6c0:	3204      	adds	r2, #4
 800f6c2:	3304      	adds	r3, #4
 800f6c4:	2104      	movs	r1, #4
 800f6c6:	60a2      	str	r2, [r4, #8]
 800f6c8:	6123      	str	r3, [r4, #16]
 800f6ca:	7561      	strb	r1, [r4, #21]
 800f6cc:	7da0      	ldrb	r0, [r4, #22]
 800f6ce:	f080 0001 	eor.w	r0, r0, #1
 800f6d2:	b002      	add	sp, #8
 800f6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6d8:	9a01      	ldr	r2, [sp, #4]
 800f6da:	601a      	str	r2, [r3, #0]
 800f6dc:	e7ee      	b.n	800f6bc <ucdr_serialize_int32_t+0xc0>
 800f6de:	68a2      	ldr	r2, [r4, #8]
 800f6e0:	6923      	ldr	r3, [r4, #16]
 800f6e2:	7da0      	ldrb	r0, [r4, #22]
 800f6e4:	7567      	strb	r7, [r4, #21]
 800f6e6:	1b92      	subs	r2, r2, r6
 800f6e8:	1b9b      	subs	r3, r3, r6
 800f6ea:	f080 0001 	eor.w	r0, r0, #1
 800f6ee:	60a2      	str	r2, [r4, #8]
 800f6f0:	6123      	str	r3, [r4, #16]
 800f6f2:	b002      	add	sp, #8
 800f6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6f8:	68a3      	ldr	r3, [r4, #8]
 800f6fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6fe:	701a      	strb	r2, [r3, #0]
 800f700:	68a3      	ldr	r3, [r4, #8]
 800f702:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f706:	701a      	strb	r2, [r3, #0]
 800f708:	68a3      	ldr	r3, [r4, #8]
 800f70a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f70e:	701a      	strb	r2, [r3, #0]
 800f710:	e7ad      	b.n	800f66e <ucdr_serialize_int32_t+0x72>
 800f712:	4628      	mov	r0, r5
 800f714:	ad01      	add	r5, sp, #4
 800f716:	4629      	mov	r1, r5
 800f718:	4632      	mov	r2, r6
 800f71a:	f00a f86a 	bl	80197f2 <memcpy>
 800f71e:	68a0      	ldr	r0, [r4, #8]
 800f720:	4642      	mov	r2, r8
 800f722:	19a9      	adds	r1, r5, r6
 800f724:	f00a f865 	bl	80197f2 <memcpy>
 800f728:	e7a1      	b.n	800f66e <ucdr_serialize_int32_t+0x72>
 800f72a:	bf00      	nop

0800f72c <ucdr_deserialize_int32_t>:
 800f72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f730:	460d      	mov	r5, r1
 800f732:	2104      	movs	r1, #4
 800f734:	4604      	mov	r4, r0
 800f736:	f000 fa89 	bl	800fc4c <ucdr_buffer_alignment>
 800f73a:	4601      	mov	r1, r0
 800f73c:	4620      	mov	r0, r4
 800f73e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f742:	f000 fac7 	bl	800fcd4 <ucdr_advance_buffer>
 800f746:	2104      	movs	r1, #4
 800f748:	4620      	mov	r0, r4
 800f74a:	f000 fa1f 	bl	800fb8c <ucdr_check_buffer_available_for>
 800f74e:	2800      	cmp	r0, #0
 800f750:	d138      	bne.n	800f7c4 <ucdr_deserialize_int32_t+0x98>
 800f752:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f756:	42b7      	cmp	r7, r6
 800f758:	d92f      	bls.n	800f7ba <ucdr_deserialize_int32_t+0x8e>
 800f75a:	6923      	ldr	r3, [r4, #16]
 800f75c:	60a7      	str	r7, [r4, #8]
 800f75e:	1bbf      	subs	r7, r7, r6
 800f760:	443b      	add	r3, r7
 800f762:	f1c7 0904 	rsb	r9, r7, #4
 800f766:	6123      	str	r3, [r4, #16]
 800f768:	4649      	mov	r1, r9
 800f76a:	4620      	mov	r0, r4
 800f76c:	f000 fa1a 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f770:	2800      	cmp	r0, #0
 800f772:	d046      	beq.n	800f802 <ucdr_deserialize_int32_t+0xd6>
 800f774:	7d23      	ldrb	r3, [r4, #20]
 800f776:	2b01      	cmp	r3, #1
 800f778:	d05c      	beq.n	800f834 <ucdr_deserialize_int32_t+0x108>
 800f77a:	78f3      	ldrb	r3, [r6, #3]
 800f77c:	702b      	strb	r3, [r5, #0]
 800f77e:	2f00      	cmp	r7, #0
 800f780:	d04c      	beq.n	800f81c <ucdr_deserialize_int32_t+0xf0>
 800f782:	78b3      	ldrb	r3, [r6, #2]
 800f784:	706b      	strb	r3, [r5, #1]
 800f786:	2f01      	cmp	r7, #1
 800f788:	f105 0302 	add.w	r3, r5, #2
 800f78c:	d04a      	beq.n	800f824 <ucdr_deserialize_int32_t+0xf8>
 800f78e:	7873      	ldrb	r3, [r6, #1]
 800f790:	70ab      	strb	r3, [r5, #2]
 800f792:	2f02      	cmp	r7, #2
 800f794:	f105 0303 	add.w	r3, r5, #3
 800f798:	d048      	beq.n	800f82c <ucdr_deserialize_int32_t+0x100>
 800f79a:	7833      	ldrb	r3, [r6, #0]
 800f79c:	70eb      	strb	r3, [r5, #3]
 800f79e:	6923      	ldr	r3, [r4, #16]
 800f7a0:	68a2      	ldr	r2, [r4, #8]
 800f7a2:	7da0      	ldrb	r0, [r4, #22]
 800f7a4:	2104      	movs	r1, #4
 800f7a6:	3304      	adds	r3, #4
 800f7a8:	444a      	add	r2, r9
 800f7aa:	1bdb      	subs	r3, r3, r7
 800f7ac:	7561      	strb	r1, [r4, #21]
 800f7ae:	60a2      	str	r2, [r4, #8]
 800f7b0:	6123      	str	r3, [r4, #16]
 800f7b2:	f080 0001 	eor.w	r0, r0, #1
 800f7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ba:	2104      	movs	r1, #4
 800f7bc:	4620      	mov	r0, r4
 800f7be:	f000 f9f1 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f7c2:	b1b0      	cbz	r0, 800f7f2 <ucdr_deserialize_int32_t+0xc6>
 800f7c4:	7d23      	ldrb	r3, [r4, #20]
 800f7c6:	2b01      	cmp	r3, #1
 800f7c8:	68a3      	ldr	r3, [r4, #8]
 800f7ca:	d017      	beq.n	800f7fc <ucdr_deserialize_int32_t+0xd0>
 800f7cc:	78db      	ldrb	r3, [r3, #3]
 800f7ce:	702b      	strb	r3, [r5, #0]
 800f7d0:	68a3      	ldr	r3, [r4, #8]
 800f7d2:	789b      	ldrb	r3, [r3, #2]
 800f7d4:	706b      	strb	r3, [r5, #1]
 800f7d6:	68a3      	ldr	r3, [r4, #8]
 800f7d8:	785b      	ldrb	r3, [r3, #1]
 800f7da:	70ab      	strb	r3, [r5, #2]
 800f7dc:	68a3      	ldr	r3, [r4, #8]
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	70eb      	strb	r3, [r5, #3]
 800f7e2:	68a2      	ldr	r2, [r4, #8]
 800f7e4:	6923      	ldr	r3, [r4, #16]
 800f7e6:	3204      	adds	r2, #4
 800f7e8:	3304      	adds	r3, #4
 800f7ea:	2104      	movs	r1, #4
 800f7ec:	60a2      	str	r2, [r4, #8]
 800f7ee:	6123      	str	r3, [r4, #16]
 800f7f0:	7561      	strb	r1, [r4, #21]
 800f7f2:	7da0      	ldrb	r0, [r4, #22]
 800f7f4:	f080 0001 	eor.w	r0, r0, #1
 800f7f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	602b      	str	r3, [r5, #0]
 800f800:	e7ef      	b.n	800f7e2 <ucdr_deserialize_int32_t+0xb6>
 800f802:	68a2      	ldr	r2, [r4, #8]
 800f804:	6923      	ldr	r3, [r4, #16]
 800f806:	7da0      	ldrb	r0, [r4, #22]
 800f808:	f884 8015 	strb.w	r8, [r4, #21]
 800f80c:	1bd2      	subs	r2, r2, r7
 800f80e:	1bdb      	subs	r3, r3, r7
 800f810:	60a2      	str	r2, [r4, #8]
 800f812:	6123      	str	r3, [r4, #16]
 800f814:	f080 0001 	eor.w	r0, r0, #1
 800f818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f81c:	68a3      	ldr	r3, [r4, #8]
 800f81e:	789b      	ldrb	r3, [r3, #2]
 800f820:	706b      	strb	r3, [r5, #1]
 800f822:	1cab      	adds	r3, r5, #2
 800f824:	68a2      	ldr	r2, [r4, #8]
 800f826:	7852      	ldrb	r2, [r2, #1]
 800f828:	f803 2b01 	strb.w	r2, [r3], #1
 800f82c:	68a2      	ldr	r2, [r4, #8]
 800f82e:	7812      	ldrb	r2, [r2, #0]
 800f830:	701a      	strb	r2, [r3, #0]
 800f832:	e7b4      	b.n	800f79e <ucdr_deserialize_int32_t+0x72>
 800f834:	4631      	mov	r1, r6
 800f836:	463a      	mov	r2, r7
 800f838:	4628      	mov	r0, r5
 800f83a:	f009 ffda 	bl	80197f2 <memcpy>
 800f83e:	68a1      	ldr	r1, [r4, #8]
 800f840:	464a      	mov	r2, r9
 800f842:	19e8      	adds	r0, r5, r7
 800f844:	f009 ffd5 	bl	80197f2 <memcpy>
 800f848:	e7a9      	b.n	800f79e <ucdr_deserialize_int32_t+0x72>
 800f84a:	bf00      	nop

0800f84c <ucdr_serialize_endian_double>:
 800f84c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f850:	460e      	mov	r6, r1
 800f852:	b083      	sub	sp, #12
 800f854:	2108      	movs	r1, #8
 800f856:	4604      	mov	r4, r0
 800f858:	ed8d 0b00 	vstr	d0, [sp]
 800f85c:	f000 f9f6 	bl	800fc4c <ucdr_buffer_alignment>
 800f860:	4601      	mov	r1, r0
 800f862:	4620      	mov	r0, r4
 800f864:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f868:	f000 fa34 	bl	800fcd4 <ucdr_advance_buffer>
 800f86c:	2108      	movs	r1, #8
 800f86e:	4620      	mov	r0, r4
 800f870:	f000 f98c 	bl	800fb8c <ucdr_check_buffer_available_for>
 800f874:	2800      	cmp	r0, #0
 800f876:	d14d      	bne.n	800f914 <ucdr_serialize_endian_double+0xc8>
 800f878:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800f87c:	42bd      	cmp	r5, r7
 800f87e:	d944      	bls.n	800f90a <ucdr_serialize_endian_double+0xbe>
 800f880:	6923      	ldr	r3, [r4, #16]
 800f882:	60a5      	str	r5, [r4, #8]
 800f884:	1bed      	subs	r5, r5, r7
 800f886:	442b      	add	r3, r5
 800f888:	f1c5 0908 	rsb	r9, r5, #8
 800f88c:	6123      	str	r3, [r4, #16]
 800f88e:	4649      	mov	r1, r9
 800f890:	4620      	mov	r0, r4
 800f892:	f000 f987 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f896:	2800      	cmp	r0, #0
 800f898:	d072      	beq.n	800f980 <ucdr_serialize_endian_double+0x134>
 800f89a:	2e01      	cmp	r6, #1
 800f89c:	f000 809b 	beq.w	800f9d6 <ucdr_serialize_endian_double+0x18a>
 800f8a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f8a4:	703b      	strb	r3, [r7, #0]
 800f8a6:	2d00      	cmp	r5, #0
 800f8a8:	d078      	beq.n	800f99c <ucdr_serialize_endian_double+0x150>
 800f8aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f8ae:	707b      	strb	r3, [r7, #1]
 800f8b0:	2d01      	cmp	r5, #1
 800f8b2:	d077      	beq.n	800f9a4 <ucdr_serialize_endian_double+0x158>
 800f8b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f8b8:	70bb      	strb	r3, [r7, #2]
 800f8ba:	2d02      	cmp	r5, #2
 800f8bc:	d076      	beq.n	800f9ac <ucdr_serialize_endian_double+0x160>
 800f8be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f8c2:	70fb      	strb	r3, [r7, #3]
 800f8c4:	2d03      	cmp	r5, #3
 800f8c6:	d075      	beq.n	800f9b4 <ucdr_serialize_endian_double+0x168>
 800f8c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f8cc:	713b      	strb	r3, [r7, #4]
 800f8ce:	2d04      	cmp	r5, #4
 800f8d0:	d074      	beq.n	800f9bc <ucdr_serialize_endian_double+0x170>
 800f8d2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f8d6:	717b      	strb	r3, [r7, #5]
 800f8d8:	2d05      	cmp	r5, #5
 800f8da:	d073      	beq.n	800f9c4 <ucdr_serialize_endian_double+0x178>
 800f8dc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f8e0:	71bb      	strb	r3, [r7, #6]
 800f8e2:	2d06      	cmp	r5, #6
 800f8e4:	d072      	beq.n	800f9cc <ucdr_serialize_endian_double+0x180>
 800f8e6:	f89d 3000 	ldrb.w	r3, [sp]
 800f8ea:	71fb      	strb	r3, [r7, #7]
 800f8ec:	6923      	ldr	r3, [r4, #16]
 800f8ee:	68a2      	ldr	r2, [r4, #8]
 800f8f0:	7da0      	ldrb	r0, [r4, #22]
 800f8f2:	3308      	adds	r3, #8
 800f8f4:	1b5d      	subs	r5, r3, r5
 800f8f6:	444a      	add	r2, r9
 800f8f8:	2308      	movs	r3, #8
 800f8fa:	f080 0001 	eor.w	r0, r0, #1
 800f8fe:	60a2      	str	r2, [r4, #8]
 800f900:	6125      	str	r5, [r4, #16]
 800f902:	7563      	strb	r3, [r4, #21]
 800f904:	b003      	add	sp, #12
 800f906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f90a:	2108      	movs	r1, #8
 800f90c:	4620      	mov	r0, r4
 800f90e:	f000 f949 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800f912:	b348      	cbz	r0, 800f968 <ucdr_serialize_endian_double+0x11c>
 800f914:	2e01      	cmp	r6, #1
 800f916:	d02d      	beq.n	800f974 <ucdr_serialize_endian_double+0x128>
 800f918:	68a3      	ldr	r3, [r4, #8]
 800f91a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f91e:	701a      	strb	r2, [r3, #0]
 800f920:	68a3      	ldr	r3, [r4, #8]
 800f922:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f926:	705a      	strb	r2, [r3, #1]
 800f928:	68a3      	ldr	r3, [r4, #8]
 800f92a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f92e:	709a      	strb	r2, [r3, #2]
 800f930:	68a3      	ldr	r3, [r4, #8]
 800f932:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f936:	70da      	strb	r2, [r3, #3]
 800f938:	68a3      	ldr	r3, [r4, #8]
 800f93a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f93e:	711a      	strb	r2, [r3, #4]
 800f940:	68a3      	ldr	r3, [r4, #8]
 800f942:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f946:	715a      	strb	r2, [r3, #5]
 800f948:	68a3      	ldr	r3, [r4, #8]
 800f94a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f94e:	719a      	strb	r2, [r3, #6]
 800f950:	68a3      	ldr	r3, [r4, #8]
 800f952:	f89d 2000 	ldrb.w	r2, [sp]
 800f956:	71da      	strb	r2, [r3, #7]
 800f958:	68a2      	ldr	r2, [r4, #8]
 800f95a:	6923      	ldr	r3, [r4, #16]
 800f95c:	3208      	adds	r2, #8
 800f95e:	3308      	adds	r3, #8
 800f960:	2108      	movs	r1, #8
 800f962:	60a2      	str	r2, [r4, #8]
 800f964:	6123      	str	r3, [r4, #16]
 800f966:	7561      	strb	r1, [r4, #21]
 800f968:	7da0      	ldrb	r0, [r4, #22]
 800f96a:	f080 0001 	eor.w	r0, r0, #1
 800f96e:	b003      	add	sp, #12
 800f970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f974:	466b      	mov	r3, sp
 800f976:	cb03      	ldmia	r3!, {r0, r1}
 800f978:	68a3      	ldr	r3, [r4, #8]
 800f97a:	6018      	str	r0, [r3, #0]
 800f97c:	6059      	str	r1, [r3, #4]
 800f97e:	e7eb      	b.n	800f958 <ucdr_serialize_endian_double+0x10c>
 800f980:	68a2      	ldr	r2, [r4, #8]
 800f982:	6923      	ldr	r3, [r4, #16]
 800f984:	7da0      	ldrb	r0, [r4, #22]
 800f986:	f884 8015 	strb.w	r8, [r4, #21]
 800f98a:	1b52      	subs	r2, r2, r5
 800f98c:	1b5b      	subs	r3, r3, r5
 800f98e:	f080 0001 	eor.w	r0, r0, #1
 800f992:	60a2      	str	r2, [r4, #8]
 800f994:	6123      	str	r3, [r4, #16]
 800f996:	b003      	add	sp, #12
 800f998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f99c:	68a3      	ldr	r3, [r4, #8]
 800f99e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f9a2:	701a      	strb	r2, [r3, #0]
 800f9a4:	68a3      	ldr	r3, [r4, #8]
 800f9a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f9aa:	701a      	strb	r2, [r3, #0]
 800f9ac:	68a3      	ldr	r3, [r4, #8]
 800f9ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f9b2:	701a      	strb	r2, [r3, #0]
 800f9b4:	68a3      	ldr	r3, [r4, #8]
 800f9b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f9ba:	701a      	strb	r2, [r3, #0]
 800f9bc:	68a3      	ldr	r3, [r4, #8]
 800f9be:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f9c2:	701a      	strb	r2, [r3, #0]
 800f9c4:	68a3      	ldr	r3, [r4, #8]
 800f9c6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f9ca:	701a      	strb	r2, [r3, #0]
 800f9cc:	68a3      	ldr	r3, [r4, #8]
 800f9ce:	f89d 2000 	ldrb.w	r2, [sp]
 800f9d2:	701a      	strb	r2, [r3, #0]
 800f9d4:	e78a      	b.n	800f8ec <ucdr_serialize_endian_double+0xa0>
 800f9d6:	466e      	mov	r6, sp
 800f9d8:	4631      	mov	r1, r6
 800f9da:	462a      	mov	r2, r5
 800f9dc:	4638      	mov	r0, r7
 800f9de:	f009 ff08 	bl	80197f2 <memcpy>
 800f9e2:	68a0      	ldr	r0, [r4, #8]
 800f9e4:	464a      	mov	r2, r9
 800f9e6:	1971      	adds	r1, r6, r5
 800f9e8:	f009 ff03 	bl	80197f2 <memcpy>
 800f9ec:	e77e      	b.n	800f8ec <ucdr_serialize_endian_double+0xa0>
 800f9ee:	bf00      	nop

0800f9f0 <ucdr_deserialize_endian_double>:
 800f9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9f4:	460f      	mov	r7, r1
 800f9f6:	2108      	movs	r1, #8
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	4615      	mov	r5, r2
 800f9fc:	f000 f926 	bl	800fc4c <ucdr_buffer_alignment>
 800fa00:	4601      	mov	r1, r0
 800fa02:	4620      	mov	r0, r4
 800fa04:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fa08:	f000 f964 	bl	800fcd4 <ucdr_advance_buffer>
 800fa0c:	2108      	movs	r1, #8
 800fa0e:	4620      	mov	r0, r4
 800fa10:	f000 f8bc 	bl	800fb8c <ucdr_check_buffer_available_for>
 800fa14:	2800      	cmp	r0, #0
 800fa16:	d159      	bne.n	800facc <ucdr_deserialize_endian_double+0xdc>
 800fa18:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800fa1c:	4546      	cmp	r6, r8
 800fa1e:	d950      	bls.n	800fac2 <ucdr_deserialize_endian_double+0xd2>
 800fa20:	6923      	ldr	r3, [r4, #16]
 800fa22:	60a6      	str	r6, [r4, #8]
 800fa24:	eba6 0608 	sub.w	r6, r6, r8
 800fa28:	4433      	add	r3, r6
 800fa2a:	f1c6 0a08 	rsb	sl, r6, #8
 800fa2e:	6123      	str	r3, [r4, #16]
 800fa30:	4651      	mov	r1, sl
 800fa32:	4620      	mov	r0, r4
 800fa34:	f000 f8b6 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d073      	beq.n	800fb24 <ucdr_deserialize_endian_double+0x134>
 800fa3c:	2f01      	cmp	r7, #1
 800fa3e:	f000 809a 	beq.w	800fb76 <ucdr_deserialize_endian_double+0x186>
 800fa42:	f898 3007 	ldrb.w	r3, [r8, #7]
 800fa46:	702b      	strb	r3, [r5, #0]
 800fa48:	2e00      	cmp	r6, #0
 800fa4a:	d078      	beq.n	800fb3e <ucdr_deserialize_endian_double+0x14e>
 800fa4c:	f898 3006 	ldrb.w	r3, [r8, #6]
 800fa50:	706b      	strb	r3, [r5, #1]
 800fa52:	2e01      	cmp	r6, #1
 800fa54:	f105 0302 	add.w	r3, r5, #2
 800fa58:	d075      	beq.n	800fb46 <ucdr_deserialize_endian_double+0x156>
 800fa5a:	f898 3005 	ldrb.w	r3, [r8, #5]
 800fa5e:	70ab      	strb	r3, [r5, #2]
 800fa60:	2e02      	cmp	r6, #2
 800fa62:	f105 0303 	add.w	r3, r5, #3
 800fa66:	d072      	beq.n	800fb4e <ucdr_deserialize_endian_double+0x15e>
 800fa68:	f898 3004 	ldrb.w	r3, [r8, #4]
 800fa6c:	70eb      	strb	r3, [r5, #3]
 800fa6e:	2e03      	cmp	r6, #3
 800fa70:	f105 0304 	add.w	r3, r5, #4
 800fa74:	d06f      	beq.n	800fb56 <ucdr_deserialize_endian_double+0x166>
 800fa76:	f898 3003 	ldrb.w	r3, [r8, #3]
 800fa7a:	712b      	strb	r3, [r5, #4]
 800fa7c:	2e04      	cmp	r6, #4
 800fa7e:	f105 0305 	add.w	r3, r5, #5
 800fa82:	d06c      	beq.n	800fb5e <ucdr_deserialize_endian_double+0x16e>
 800fa84:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fa88:	716b      	strb	r3, [r5, #5]
 800fa8a:	2e05      	cmp	r6, #5
 800fa8c:	f105 0306 	add.w	r3, r5, #6
 800fa90:	d069      	beq.n	800fb66 <ucdr_deserialize_endian_double+0x176>
 800fa92:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fa96:	71ab      	strb	r3, [r5, #6]
 800fa98:	2e06      	cmp	r6, #6
 800fa9a:	f105 0307 	add.w	r3, r5, #7
 800fa9e:	d066      	beq.n	800fb6e <ucdr_deserialize_endian_double+0x17e>
 800faa0:	f898 3000 	ldrb.w	r3, [r8]
 800faa4:	71eb      	strb	r3, [r5, #7]
 800faa6:	6923      	ldr	r3, [r4, #16]
 800faa8:	68a2      	ldr	r2, [r4, #8]
 800faaa:	7da0      	ldrb	r0, [r4, #22]
 800faac:	3308      	adds	r3, #8
 800faae:	1b9e      	subs	r6, r3, r6
 800fab0:	2308      	movs	r3, #8
 800fab2:	4452      	add	r2, sl
 800fab4:	7563      	strb	r3, [r4, #21]
 800fab6:	60a2      	str	r2, [r4, #8]
 800fab8:	6126      	str	r6, [r4, #16]
 800faba:	f080 0001 	eor.w	r0, r0, #1
 800fabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fac2:	2108      	movs	r1, #8
 800fac4:	4620      	mov	r0, r4
 800fac6:	f000 f86d 	bl	800fba4 <ucdr_check_final_buffer_behavior>
 800faca:	b308      	cbz	r0, 800fb10 <ucdr_deserialize_endian_double+0x120>
 800facc:	2f01      	cmp	r7, #1
 800face:	68a3      	ldr	r3, [r4, #8]
 800fad0:	d023      	beq.n	800fb1a <ucdr_deserialize_endian_double+0x12a>
 800fad2:	79db      	ldrb	r3, [r3, #7]
 800fad4:	702b      	strb	r3, [r5, #0]
 800fad6:	68a3      	ldr	r3, [r4, #8]
 800fad8:	799b      	ldrb	r3, [r3, #6]
 800fada:	706b      	strb	r3, [r5, #1]
 800fadc:	68a3      	ldr	r3, [r4, #8]
 800fade:	795b      	ldrb	r3, [r3, #5]
 800fae0:	70ab      	strb	r3, [r5, #2]
 800fae2:	68a3      	ldr	r3, [r4, #8]
 800fae4:	791b      	ldrb	r3, [r3, #4]
 800fae6:	70eb      	strb	r3, [r5, #3]
 800fae8:	68a3      	ldr	r3, [r4, #8]
 800faea:	78db      	ldrb	r3, [r3, #3]
 800faec:	712b      	strb	r3, [r5, #4]
 800faee:	68a3      	ldr	r3, [r4, #8]
 800faf0:	789b      	ldrb	r3, [r3, #2]
 800faf2:	716b      	strb	r3, [r5, #5]
 800faf4:	68a3      	ldr	r3, [r4, #8]
 800faf6:	785b      	ldrb	r3, [r3, #1]
 800faf8:	71ab      	strb	r3, [r5, #6]
 800fafa:	68a3      	ldr	r3, [r4, #8]
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	71eb      	strb	r3, [r5, #7]
 800fb00:	68a2      	ldr	r2, [r4, #8]
 800fb02:	6923      	ldr	r3, [r4, #16]
 800fb04:	3208      	adds	r2, #8
 800fb06:	3308      	adds	r3, #8
 800fb08:	2108      	movs	r1, #8
 800fb0a:	60a2      	str	r2, [r4, #8]
 800fb0c:	6123      	str	r3, [r4, #16]
 800fb0e:	7561      	strb	r1, [r4, #21]
 800fb10:	7da0      	ldrb	r0, [r4, #22]
 800fb12:	f080 0001 	eor.w	r0, r0, #1
 800fb16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb1a:	681a      	ldr	r2, [r3, #0]
 800fb1c:	685b      	ldr	r3, [r3, #4]
 800fb1e:	606b      	str	r3, [r5, #4]
 800fb20:	602a      	str	r2, [r5, #0]
 800fb22:	e7ed      	b.n	800fb00 <ucdr_deserialize_endian_double+0x110>
 800fb24:	68a2      	ldr	r2, [r4, #8]
 800fb26:	6923      	ldr	r3, [r4, #16]
 800fb28:	7da0      	ldrb	r0, [r4, #22]
 800fb2a:	f884 9015 	strb.w	r9, [r4, #21]
 800fb2e:	1b92      	subs	r2, r2, r6
 800fb30:	1b9b      	subs	r3, r3, r6
 800fb32:	60a2      	str	r2, [r4, #8]
 800fb34:	6123      	str	r3, [r4, #16]
 800fb36:	f080 0001 	eor.w	r0, r0, #1
 800fb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb3e:	68a3      	ldr	r3, [r4, #8]
 800fb40:	799b      	ldrb	r3, [r3, #6]
 800fb42:	706b      	strb	r3, [r5, #1]
 800fb44:	1cab      	adds	r3, r5, #2
 800fb46:	68a2      	ldr	r2, [r4, #8]
 800fb48:	7952      	ldrb	r2, [r2, #5]
 800fb4a:	f803 2b01 	strb.w	r2, [r3], #1
 800fb4e:	68a2      	ldr	r2, [r4, #8]
 800fb50:	7912      	ldrb	r2, [r2, #4]
 800fb52:	f803 2b01 	strb.w	r2, [r3], #1
 800fb56:	68a2      	ldr	r2, [r4, #8]
 800fb58:	78d2      	ldrb	r2, [r2, #3]
 800fb5a:	f803 2b01 	strb.w	r2, [r3], #1
 800fb5e:	68a2      	ldr	r2, [r4, #8]
 800fb60:	7892      	ldrb	r2, [r2, #2]
 800fb62:	f803 2b01 	strb.w	r2, [r3], #1
 800fb66:	68a2      	ldr	r2, [r4, #8]
 800fb68:	7852      	ldrb	r2, [r2, #1]
 800fb6a:	f803 2b01 	strb.w	r2, [r3], #1
 800fb6e:	68a2      	ldr	r2, [r4, #8]
 800fb70:	7812      	ldrb	r2, [r2, #0]
 800fb72:	701a      	strb	r2, [r3, #0]
 800fb74:	e797      	b.n	800faa6 <ucdr_deserialize_endian_double+0xb6>
 800fb76:	4641      	mov	r1, r8
 800fb78:	4632      	mov	r2, r6
 800fb7a:	4628      	mov	r0, r5
 800fb7c:	f009 fe39 	bl	80197f2 <memcpy>
 800fb80:	68a1      	ldr	r1, [r4, #8]
 800fb82:	4652      	mov	r2, sl
 800fb84:	19a8      	adds	r0, r5, r6
 800fb86:	f009 fe34 	bl	80197f2 <memcpy>
 800fb8a:	e78c      	b.n	800faa6 <ucdr_deserialize_endian_double+0xb6>

0800fb8c <ucdr_check_buffer_available_for>:
 800fb8c:	7d83      	ldrb	r3, [r0, #22]
 800fb8e:	b93b      	cbnz	r3, 800fba0 <ucdr_check_buffer_available_for+0x14>
 800fb90:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800fb94:	4419      	add	r1, r3
 800fb96:	4288      	cmp	r0, r1
 800fb98:	bf34      	ite	cc
 800fb9a:	2000      	movcc	r0, #0
 800fb9c:	2001      	movcs	r0, #1
 800fb9e:	4770      	bx	lr
 800fba0:	2000      	movs	r0, #0
 800fba2:	4770      	bx	lr

0800fba4 <ucdr_check_final_buffer_behavior>:
 800fba4:	7d83      	ldrb	r3, [r0, #22]
 800fba6:	b943      	cbnz	r3, 800fbba <ucdr_check_final_buffer_behavior+0x16>
 800fba8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800fbac:	4291      	cmp	r1, r2
 800fbae:	b510      	push	{r4, lr}
 800fbb0:	4604      	mov	r4, r0
 800fbb2:	d205      	bcs.n	800fbc0 <ucdr_check_final_buffer_behavior+0x1c>
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	bd10      	pop	{r4, pc}
 800fbba:	2300      	movs	r3, #0
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	4770      	bx	lr
 800fbc0:	6982      	ldr	r2, [r0, #24]
 800fbc2:	b13a      	cbz	r2, 800fbd4 <ucdr_check_final_buffer_behavior+0x30>
 800fbc4:	69c1      	ldr	r1, [r0, #28]
 800fbc6:	4790      	blx	r2
 800fbc8:	f080 0301 	eor.w	r3, r0, #1
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	75a0      	strb	r0, [r4, #22]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	bd10      	pop	{r4, pc}
 800fbd4:	2001      	movs	r0, #1
 800fbd6:	75a0      	strb	r0, [r4, #22]
 800fbd8:	e7fa      	b.n	800fbd0 <ucdr_check_final_buffer_behavior+0x2c>
 800fbda:	bf00      	nop

0800fbdc <ucdr_set_on_full_buffer_callback>:
 800fbdc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop

0800fbe4 <ucdr_init_buffer_origin_offset_endian>:
 800fbe4:	b410      	push	{r4}
 800fbe6:	9c01      	ldr	r4, [sp, #4]
 800fbe8:	6001      	str	r1, [r0, #0]
 800fbea:	440a      	add	r2, r1
 800fbec:	6042      	str	r2, [r0, #4]
 800fbee:	190a      	adds	r2, r1, r4
 800fbf0:	441c      	add	r4, r3
 800fbf2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800fbf6:	6082      	str	r2, [r0, #8]
 800fbf8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800fbfc:	7503      	strb	r3, [r0, #20]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800fc04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc08:	7542      	strb	r2, [r0, #21]
 800fc0a:	7582      	strb	r2, [r0, #22]
 800fc0c:	4770      	bx	lr
 800fc0e:	bf00      	nop

0800fc10 <ucdr_init_buffer_origin_offset>:
 800fc10:	b510      	push	{r4, lr}
 800fc12:	b082      	sub	sp, #8
 800fc14:	9c04      	ldr	r4, [sp, #16]
 800fc16:	9400      	str	r4, [sp, #0]
 800fc18:	2401      	movs	r4, #1
 800fc1a:	9401      	str	r4, [sp, #4]
 800fc1c:	f7ff ffe2 	bl	800fbe4 <ucdr_init_buffer_origin_offset_endian>
 800fc20:	b002      	add	sp, #8
 800fc22:	bd10      	pop	{r4, pc}

0800fc24 <ucdr_init_buffer_origin>:
 800fc24:	b510      	push	{r4, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	2400      	movs	r4, #0
 800fc2a:	9400      	str	r4, [sp, #0]
 800fc2c:	f7ff fff0 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 800fc30:	b002      	add	sp, #8
 800fc32:	bd10      	pop	{r4, pc}

0800fc34 <ucdr_init_buffer>:
 800fc34:	2300      	movs	r3, #0
 800fc36:	f7ff bff5 	b.w	800fc24 <ucdr_init_buffer_origin>
 800fc3a:	bf00      	nop

0800fc3c <ucdr_alignment>:
 800fc3c:	fbb0 f3f1 	udiv	r3, r0, r1
 800fc40:	fb03 0011 	mls	r0, r3, r1, r0
 800fc44:	1a08      	subs	r0, r1, r0
 800fc46:	3901      	subs	r1, #1
 800fc48:	4008      	ands	r0, r1
 800fc4a:	4770      	bx	lr

0800fc4c <ucdr_buffer_alignment>:
 800fc4c:	7d43      	ldrb	r3, [r0, #21]
 800fc4e:	428b      	cmp	r3, r1
 800fc50:	d208      	bcs.n	800fc64 <ucdr_buffer_alignment+0x18>
 800fc52:	6900      	ldr	r0, [r0, #16]
 800fc54:	fbb0 f3f1 	udiv	r3, r0, r1
 800fc58:	fb01 0013 	mls	r0, r1, r3, r0
 800fc5c:	1a08      	subs	r0, r1, r0
 800fc5e:	3901      	subs	r1, #1
 800fc60:	4008      	ands	r0, r1
 800fc62:	4770      	bx	lr
 800fc64:	2000      	movs	r0, #0
 800fc66:	4770      	bx	lr

0800fc68 <ucdr_align_to>:
 800fc68:	b538      	push	{r3, r4, r5, lr}
 800fc6a:	4604      	mov	r4, r0
 800fc6c:	460d      	mov	r5, r1
 800fc6e:	f7ff ffed 	bl	800fc4c <ucdr_buffer_alignment>
 800fc72:	68a3      	ldr	r3, [r4, #8]
 800fc74:	6921      	ldr	r1, [r4, #16]
 800fc76:	7565      	strb	r5, [r4, #21]
 800fc78:	181a      	adds	r2, r3, r0
 800fc7a:	6863      	ldr	r3, [r4, #4]
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	4408      	add	r0, r1
 800fc80:	bf28      	it	cs
 800fc82:	4613      	movcs	r3, r2
 800fc84:	6120      	str	r0, [r4, #16]
 800fc86:	60a3      	str	r3, [r4, #8]
 800fc88:	bd38      	pop	{r3, r4, r5, pc}
 800fc8a:	bf00      	nop

0800fc8c <ucdr_buffer_length>:
 800fc8c:	6882      	ldr	r2, [r0, #8]
 800fc8e:	6800      	ldr	r0, [r0, #0]
 800fc90:	1a10      	subs	r0, r2, r0
 800fc92:	4770      	bx	lr

0800fc94 <ucdr_buffer_remaining>:
 800fc94:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800fc98:	1a10      	subs	r0, r2, r0
 800fc9a:	4770      	bx	lr

0800fc9c <ucdr_check_final_buffer_behavior_array>:
 800fc9c:	b538      	push	{r3, r4, r5, lr}
 800fc9e:	7d83      	ldrb	r3, [r0, #22]
 800fca0:	b963      	cbnz	r3, 800fcbc <ucdr_check_final_buffer_behavior_array+0x20>
 800fca2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	4604      	mov	r4, r0
 800fcaa:	460d      	mov	r5, r1
 800fcac:	d308      	bcc.n	800fcc0 <ucdr_check_final_buffer_behavior_array+0x24>
 800fcae:	b139      	cbz	r1, 800fcc0 <ucdr_check_final_buffer_behavior_array+0x24>
 800fcb0:	6983      	ldr	r3, [r0, #24]
 800fcb2:	b163      	cbz	r3, 800fcce <ucdr_check_final_buffer_behavior_array+0x32>
 800fcb4:	69c1      	ldr	r1, [r0, #28]
 800fcb6:	4798      	blx	r3
 800fcb8:	75a0      	strb	r0, [r4, #22]
 800fcba:	b108      	cbz	r0, 800fcc0 <ucdr_check_final_buffer_behavior_array+0x24>
 800fcbc:	2000      	movs	r0, #0
 800fcbe:	bd38      	pop	{r3, r4, r5, pc}
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f7ff ffe7 	bl	800fc94 <ucdr_buffer_remaining>
 800fcc6:	42a8      	cmp	r0, r5
 800fcc8:	bf28      	it	cs
 800fcca:	4628      	movcs	r0, r5
 800fccc:	bd38      	pop	{r3, r4, r5, pc}
 800fcce:	2301      	movs	r3, #1
 800fcd0:	7583      	strb	r3, [r0, #22]
 800fcd2:	e7f3      	b.n	800fcbc <ucdr_check_final_buffer_behavior_array+0x20>

0800fcd4 <ucdr_advance_buffer>:
 800fcd4:	b538      	push	{r3, r4, r5, lr}
 800fcd6:	4604      	mov	r4, r0
 800fcd8:	460d      	mov	r5, r1
 800fcda:	f7ff ff57 	bl	800fb8c <ucdr_check_buffer_available_for>
 800fcde:	b178      	cbz	r0, 800fd00 <ucdr_advance_buffer+0x2c>
 800fce0:	6923      	ldr	r3, [r4, #16]
 800fce2:	68a2      	ldr	r2, [r4, #8]
 800fce4:	442b      	add	r3, r5
 800fce6:	6123      	str	r3, [r4, #16]
 800fce8:	2301      	movs	r3, #1
 800fcea:	442a      	add	r2, r5
 800fcec:	7563      	strb	r3, [r4, #21]
 800fcee:	60a2      	str	r2, [r4, #8]
 800fcf0:	bd38      	pop	{r3, r4, r5, pc}
 800fcf2:	68a2      	ldr	r2, [r4, #8]
 800fcf4:	6923      	ldr	r3, [r4, #16]
 800fcf6:	4402      	add	r2, r0
 800fcf8:	4403      	add	r3, r0
 800fcfa:	1a2d      	subs	r5, r5, r0
 800fcfc:	60a2      	str	r2, [r4, #8]
 800fcfe:	6123      	str	r3, [r4, #16]
 800fd00:	4629      	mov	r1, r5
 800fd02:	2201      	movs	r2, #1
 800fd04:	4620      	mov	r0, r4
 800fd06:	f7ff ffc9 	bl	800fc9c <ucdr_check_final_buffer_behavior_array>
 800fd0a:	2800      	cmp	r0, #0
 800fd0c:	d1f1      	bne.n	800fcf2 <ucdr_advance_buffer+0x1e>
 800fd0e:	2301      	movs	r3, #1
 800fd10:	7563      	strb	r3, [r4, #21]
 800fd12:	bd38      	pop	{r3, r4, r5, pc}

0800fd14 <ucdr_serialize_sequence_char>:
 800fd14:	b570      	push	{r4, r5, r6, lr}
 800fd16:	4615      	mov	r5, r2
 800fd18:	460e      	mov	r6, r1
 800fd1a:	7d01      	ldrb	r1, [r0, #20]
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	f7ff f8eb 	bl	800eef8 <ucdr_serialize_endian_uint32_t>
 800fd22:	b90d      	cbnz	r5, 800fd28 <ucdr_serialize_sequence_char+0x14>
 800fd24:	2001      	movs	r0, #1
 800fd26:	bd70      	pop	{r4, r5, r6, pc}
 800fd28:	7d21      	ldrb	r1, [r4, #20]
 800fd2a:	462b      	mov	r3, r5
 800fd2c:	4632      	mov	r2, r6
 800fd2e:	4620      	mov	r0, r4
 800fd30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd34:	f007 bc40 	b.w	80175b8 <ucdr_serialize_endian_array_char>

0800fd38 <ucdr_deserialize_sequence_char>:
 800fd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd3c:	461d      	mov	r5, r3
 800fd3e:	4616      	mov	r6, r2
 800fd40:	460f      	mov	r7, r1
 800fd42:	461a      	mov	r2, r3
 800fd44:	7d01      	ldrb	r1, [r0, #20]
 800fd46:	4604      	mov	r4, r0
 800fd48:	f7ff f9fe 	bl	800f148 <ucdr_deserialize_endian_uint32_t>
 800fd4c:	682b      	ldr	r3, [r5, #0]
 800fd4e:	429e      	cmp	r6, r3
 800fd50:	bf3c      	itt	cc
 800fd52:	2201      	movcc	r2, #1
 800fd54:	75a2      	strbcc	r2, [r4, #22]
 800fd56:	b913      	cbnz	r3, 800fd5e <ucdr_deserialize_sequence_char+0x26>
 800fd58:	2001      	movs	r0, #1
 800fd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd5e:	7d21      	ldrb	r1, [r4, #20]
 800fd60:	463a      	mov	r2, r7
 800fd62:	4620      	mov	r0, r4
 800fd64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd68:	f007 bc58 	b.w	801761c <ucdr_deserialize_endian_array_char>

0800fd6c <ucdr_serialize_sequence_uint8_t>:
 800fd6c:	b570      	push	{r4, r5, r6, lr}
 800fd6e:	4615      	mov	r5, r2
 800fd70:	460e      	mov	r6, r1
 800fd72:	7d01      	ldrb	r1, [r0, #20]
 800fd74:	4604      	mov	r4, r0
 800fd76:	f7ff f8bf 	bl	800eef8 <ucdr_serialize_endian_uint32_t>
 800fd7a:	b90d      	cbnz	r5, 800fd80 <ucdr_serialize_sequence_uint8_t+0x14>
 800fd7c:	2001      	movs	r0, #1
 800fd7e:	bd70      	pop	{r4, r5, r6, pc}
 800fd80:	7d21      	ldrb	r1, [r4, #20]
 800fd82:	462b      	mov	r3, r5
 800fd84:	4632      	mov	r2, r6
 800fd86:	4620      	mov	r0, r4
 800fd88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd8c:	f007 bcaa 	b.w	80176e4 <ucdr_serialize_endian_array_uint8_t>

0800fd90 <ucdr_deserialize_sequence_uint8_t>:
 800fd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd94:	461d      	mov	r5, r3
 800fd96:	4616      	mov	r6, r2
 800fd98:	460f      	mov	r7, r1
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	7d01      	ldrb	r1, [r0, #20]
 800fd9e:	4604      	mov	r4, r0
 800fda0:	f7ff f9d2 	bl	800f148 <ucdr_deserialize_endian_uint32_t>
 800fda4:	682b      	ldr	r3, [r5, #0]
 800fda6:	429e      	cmp	r6, r3
 800fda8:	bf3c      	itt	cc
 800fdaa:	2201      	movcc	r2, #1
 800fdac:	75a2      	strbcc	r2, [r4, #22]
 800fdae:	b913      	cbnz	r3, 800fdb6 <ucdr_deserialize_sequence_uint8_t+0x26>
 800fdb0:	2001      	movs	r0, #1
 800fdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb6:	7d21      	ldrb	r1, [r4, #20]
 800fdb8:	463a      	mov	r2, r7
 800fdba:	4620      	mov	r0, r4
 800fdbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc0:	f007 bcf4 	b.w	80177ac <ucdr_deserialize_endian_array_uint8_t>

0800fdc4 <ucdr_serialize_sequence_double>:
 800fdc4:	b570      	push	{r4, r5, r6, lr}
 800fdc6:	4615      	mov	r5, r2
 800fdc8:	460e      	mov	r6, r1
 800fdca:	7d01      	ldrb	r1, [r0, #20]
 800fdcc:	4604      	mov	r4, r0
 800fdce:	f7ff f893 	bl	800eef8 <ucdr_serialize_endian_uint32_t>
 800fdd2:	b90d      	cbnz	r5, 800fdd8 <ucdr_serialize_sequence_double+0x14>
 800fdd4:	2001      	movs	r0, #1
 800fdd6:	bd70      	pop	{r4, r5, r6, pc}
 800fdd8:	7d21      	ldrb	r1, [r4, #20]
 800fdda:	462b      	mov	r3, r5
 800fddc:	4632      	mov	r2, r6
 800fdde:	4620      	mov	r0, r4
 800fde0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fde4:	f007 bd14 	b.w	8017810 <ucdr_serialize_endian_array_double>

0800fde8 <ucdr_deserialize_sequence_double>:
 800fde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdec:	461d      	mov	r5, r3
 800fdee:	4616      	mov	r6, r2
 800fdf0:	460f      	mov	r7, r1
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	7d01      	ldrb	r1, [r0, #20]
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	f7ff f9a6 	bl	800f148 <ucdr_deserialize_endian_uint32_t>
 800fdfc:	682b      	ldr	r3, [r5, #0]
 800fdfe:	429e      	cmp	r6, r3
 800fe00:	bf3c      	itt	cc
 800fe02:	2201      	movcc	r2, #1
 800fe04:	75a2      	strbcc	r2, [r4, #22]
 800fe06:	b913      	cbnz	r3, 800fe0e <ucdr_deserialize_sequence_double+0x26>
 800fe08:	2001      	movs	r0, #1
 800fe0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe0e:	7d21      	ldrb	r1, [r4, #20]
 800fe10:	463a      	mov	r2, r7
 800fe12:	4620      	mov	r0, r4
 800fe14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe18:	f007 bd4e 	b.w	80178b8 <ucdr_deserialize_endian_array_double>

0800fe1c <uxr_buffer_delete_entity>:
 800fe1c:	b510      	push	{r4, lr}
 800fe1e:	2300      	movs	r3, #0
 800fe20:	b08e      	sub	sp, #56	@ 0x38
 800fe22:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fe26:	2303      	movs	r3, #3
 800fe28:	9300      	str	r3, [sp, #0]
 800fe2a:	2204      	movs	r2, #4
 800fe2c:	ab06      	add	r3, sp, #24
 800fe2e:	4604      	mov	r4, r0
 800fe30:	9103      	str	r1, [sp, #12]
 800fe32:	f001 fab7 	bl	80113a4 <uxr_prepare_stream_to_write_submessage>
 800fe36:	b918      	cbnz	r0, 800fe40 <uxr_buffer_delete_entity+0x24>
 800fe38:	4604      	mov	r4, r0
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	b00e      	add	sp, #56	@ 0x38
 800fe3e:	bd10      	pop	{r4, pc}
 800fe40:	9902      	ldr	r1, [sp, #8]
 800fe42:	aa05      	add	r2, sp, #20
 800fe44:	4620      	mov	r0, r4
 800fe46:	f001 fbe3 	bl	8011610 <uxr_init_base_object_request>
 800fe4a:	a905      	add	r1, sp, #20
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	a806      	add	r0, sp, #24
 800fe50:	f003 f9da 	bl	8013208 <uxr_serialize_DELETE_Payload>
 800fe54:	4620      	mov	r0, r4
 800fe56:	b00e      	add	sp, #56	@ 0x38
 800fe58:	bd10      	pop	{r4, pc}
 800fe5a:	bf00      	nop

0800fe5c <uxr_common_create_entity>:
 800fe5c:	b510      	push	{r4, lr}
 800fe5e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800fe62:	b08c      	sub	sp, #48	@ 0x30
 800fe64:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fe68:	f1bc 0f01 	cmp.w	ip, #1
 800fe6c:	bf0c      	ite	eq
 800fe6e:	f003 0201 	andeq.w	r2, r3, #1
 800fe72:	2200      	movne	r2, #0
 800fe74:	330e      	adds	r3, #14
 800fe76:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800fe7a:	9101      	str	r1, [sp, #4]
 800fe7c:	441a      	add	r2, r3
 800fe7e:	2301      	movs	r3, #1
 800fe80:	9300      	str	r3, [sp, #0]
 800fe82:	9903      	ldr	r1, [sp, #12]
 800fe84:	ab04      	add	r3, sp, #16
 800fe86:	b292      	uxth	r2, r2
 800fe88:	4604      	mov	r4, r0
 800fe8a:	f001 fa8b 	bl	80113a4 <uxr_prepare_stream_to_write_submessage>
 800fe8e:	b918      	cbnz	r0, 800fe98 <uxr_common_create_entity+0x3c>
 800fe90:	4604      	mov	r4, r0
 800fe92:	4620      	mov	r0, r4
 800fe94:	b00c      	add	sp, #48	@ 0x30
 800fe96:	bd10      	pop	{r4, pc}
 800fe98:	9902      	ldr	r1, [sp, #8]
 800fe9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	f001 fbb7 	bl	8011610 <uxr_init_base_object_request>
 800fea2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fea4:	4604      	mov	r4, r0
 800fea6:	a804      	add	r0, sp, #16
 800fea8:	f003 f90a 	bl	80130c0 <uxr_serialize_CREATE_Payload>
 800feac:	4620      	mov	r0, r4
 800feae:	b00c      	add	sp, #48	@ 0x30
 800feb0:	bd10      	pop	{r4, pc}
 800feb2:	bf00      	nop

0800feb4 <uxr_buffer_create_participant_bin>:
 800feb4:	b570      	push	{r4, r5, r6, lr}
 800feb6:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800feba:	ac11      	add	r4, sp, #68	@ 0x44
 800febc:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800fec0:	2303      	movs	r3, #3
 800fec2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fec6:	7223      	strb	r3, [r4, #8]
 800fec8:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800feca:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800fece:	2201      	movs	r2, #1
 800fed0:	2100      	movs	r1, #0
 800fed2:	4605      	mov	r5, r0
 800fed4:	7122      	strb	r2, [r4, #4]
 800fed6:	f88d 1014 	strb.w	r1, [sp, #20]
 800feda:	b1cb      	cbz	r3, 800ff10 <uxr_buffer_create_participant_bin+0x5c>
 800fedc:	f88d 201c 	strb.w	r2, [sp, #28]
 800fee0:	9308      	str	r3, [sp, #32]
 800fee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fee6:	a915      	add	r1, sp, #84	@ 0x54
 800fee8:	a809      	add	r0, sp, #36	@ 0x24
 800feea:	f7ff fea3 	bl	800fc34 <ucdr_init_buffer>
 800feee:	a905      	add	r1, sp, #20
 800fef0:	a809      	add	r0, sp, #36	@ 0x24
 800fef2:	f002 fdb3 	bl	8012a5c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fef8:	9600      	str	r6, [sp, #0]
 800fefa:	9401      	str	r4, [sp, #4]
 800fefc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ff00:	60e3      	str	r3, [r4, #12]
 800ff02:	4628      	mov	r0, r5
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	f7ff ffa9 	bl	800fe5c <uxr_common_create_entity>
 800ff0a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800ff0e:	bd70      	pop	{r4, r5, r6, pc}
 800ff10:	f88d 301c 	strb.w	r3, [sp, #28]
 800ff14:	e7e5      	b.n	800fee2 <uxr_buffer_create_participant_bin+0x2e>
 800ff16:	bf00      	nop

0800ff18 <uxr_buffer_create_topic_bin>:
 800ff18:	b570      	push	{r4, r5, r6, lr}
 800ff1a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800ff1e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ff22:	9105      	str	r1, [sp, #20]
 800ff24:	4605      	mov	r5, r0
 800ff26:	a997      	add	r1, sp, #604	@ 0x25c
 800ff28:	4618      	mov	r0, r3
 800ff2a:	2302      	movs	r3, #2
 800ff2c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800ff30:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800ff34:	f000 f9b0 	bl	8010298 <uxr_object_id_to_raw>
 800ff38:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800ff3a:	9306      	str	r3, [sp, #24]
 800ff3c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800ff3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff40:	2303      	movs	r3, #3
 800ff42:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ff46:	2301      	movs	r3, #1
 800ff48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff4c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800ff50:	a917      	add	r1, sp, #92	@ 0x5c
 800ff52:	2300      	movs	r3, #0
 800ff54:	a80b      	add	r0, sp, #44	@ 0x2c
 800ff56:	f88d 301c 	strb.w	r3, [sp, #28]
 800ff5a:	f7ff fe6b 	bl	800fc34 <ucdr_init_buffer>
 800ff5e:	a906      	add	r1, sp, #24
 800ff60:	a80b      	add	r0, sp, #44	@ 0x2c
 800ff62:	f002 fd9d 	bl	8012aa0 <uxr_serialize_OBJK_Topic_Binary>
 800ff66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff68:	9316      	str	r3, [sp, #88]	@ 0x58
 800ff6a:	ac13      	add	r4, sp, #76	@ 0x4c
 800ff6c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ff70:	9600      	str	r6, [sp, #0]
 800ff72:	9401      	str	r4, [sp, #4]
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	4628      	mov	r0, r5
 800ff78:	f7ff ff70 	bl	800fe5c <uxr_common_create_entity>
 800ff7c:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800ff80:	bd70      	pop	{r4, r5, r6, pc}
 800ff82:	bf00      	nop

0800ff84 <uxr_buffer_create_publisher_bin>:
 800ff84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff86:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800ff8a:	4605      	mov	r5, r0
 800ff8c:	9105      	str	r1, [sp, #20]
 800ff8e:	4618      	mov	r0, r3
 800ff90:	2603      	movs	r6, #3
 800ff92:	a992      	add	r1, sp, #584	@ 0x248
 800ff94:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ff98:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800ff9c:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800ffa0:	f000 f97a 	bl	8010298 <uxr_object_id_to_raw>
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ffaa:	a912      	add	r1, sp, #72	@ 0x48
 800ffac:	a806      	add	r0, sp, #24
 800ffae:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800ffb2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800ffb6:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800ffba:	f7ff fe3b 	bl	800fc34 <ucdr_init_buffer>
 800ffbe:	a993      	add	r1, sp, #588	@ 0x24c
 800ffc0:	a806      	add	r0, sp, #24
 800ffc2:	f002 fe21 	bl	8012c08 <uxr_serialize_OBJK_Publisher_Binary>
 800ffc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffc8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ffca:	ac0e      	add	r4, sp, #56	@ 0x38
 800ffcc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ffd0:	9700      	str	r7, [sp, #0]
 800ffd2:	9401      	str	r4, [sp, #4]
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	4628      	mov	r0, r5
 800ffd8:	f7ff ff40 	bl	800fe5c <uxr_common_create_entity>
 800ffdc:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800ffe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffe2:	bf00      	nop

0800ffe4 <uxr_buffer_create_datawriter_bin>:
 800ffe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe8:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ffec:	ac1d      	add	r4, sp, #116	@ 0x74
 800ffee:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fff2:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800fff6:	9105      	str	r1, [sp, #20]
 800fff8:	4606      	mov	r6, r0
 800fffa:	a9a1      	add	r1, sp, #644	@ 0x284
 800fffc:	4618      	mov	r0, r3
 800fffe:	2305      	movs	r3, #5
 8010000:	7123      	strb	r3, [r4, #4]
 8010002:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010006:	2703      	movs	r7, #3
 8010008:	f000 f946 	bl	8010298 <uxr_object_id_to_raw>
 801000c:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 801000e:	7227      	strb	r7, [r4, #8]
 8010010:	a90e      	add	r1, sp, #56	@ 0x38
 8010012:	f000 f941 	bl	8010298 <uxr_object_id_to_raw>
 8010016:	2300      	movs	r3, #0
 8010018:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801001c:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010020:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010024:	3d00      	subs	r5, #0
 8010026:	bf18      	it	ne
 8010028:	2501      	movne	r5, #1
 801002a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801002e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010032:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010036:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801003a:	2301      	movs	r3, #1
 801003c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010040:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010044:	bb8a      	cbnz	r2, 80100aa <uxr_buffer_create_datawriter_bin+0xc6>
 8010046:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801004a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801004e:	f04f 0c13 	mov.w	ip, #19
 8010052:	250b      	movs	r5, #11
 8010054:	2221      	movs	r2, #33	@ 0x21
 8010056:	2111      	movs	r1, #17
 8010058:	2009      	movs	r0, #9
 801005a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801005e:	b923      	cbnz	r3, 801006a <uxr_buffer_create_datawriter_bin+0x86>
 8010060:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010064:	4672      	mov	r2, lr
 8010066:	4661      	mov	r1, ip
 8010068:	4628      	mov	r0, r5
 801006a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801006e:	2b01      	cmp	r3, #1
 8010070:	d025      	beq.n	80100be <uxr_buffer_create_datawriter_bin+0xda>
 8010072:	2b03      	cmp	r3, #3
 8010074:	d029      	beq.n	80100ca <uxr_buffer_create_datawriter_bin+0xe6>
 8010076:	b32b      	cbz	r3, 80100c4 <uxr_buffer_create_datawriter_bin+0xe0>
 8010078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801007c:	a921      	add	r1, sp, #132	@ 0x84
 801007e:	a806      	add	r0, sp, #24
 8010080:	f7ff fdd8 	bl	800fc34 <ucdr_init_buffer>
 8010084:	a90e      	add	r1, sp, #56	@ 0x38
 8010086:	a806      	add	r0, sp, #24
 8010088:	f002 fe34 	bl	8012cf4 <uxr_serialize_OBJK_DataWriter_Binary>
 801008c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801008e:	f8cd 8000 	str.w	r8, [sp]
 8010092:	9401      	str	r4, [sp, #4]
 8010094:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010098:	60e3      	str	r3, [r4, #12]
 801009a:	4630      	mov	r0, r6
 801009c:	b29b      	uxth	r3, r3
 801009e:	f7ff fedd 	bl	800fe5c <uxr_common_create_entity>
 80100a2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80100a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100aa:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80100ae:	f04f 0c12 	mov.w	ip, #18
 80100b2:	250a      	movs	r5, #10
 80100b4:	2220      	movs	r2, #32
 80100b6:	2110      	movs	r1, #16
 80100b8:	2008      	movs	r0, #8
 80100ba:	2702      	movs	r7, #2
 80100bc:	e7cd      	b.n	801005a <uxr_buffer_create_datawriter_bin+0x76>
 80100be:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80100c2:	e7d9      	b.n	8010078 <uxr_buffer_create_datawriter_bin+0x94>
 80100c4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80100c8:	e7d6      	b.n	8010078 <uxr_buffer_create_datawriter_bin+0x94>
 80100ca:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80100ce:	e7d3      	b.n	8010078 <uxr_buffer_create_datawriter_bin+0x94>

080100d0 <get_custom_error>:
 80100d0:	4b01      	ldr	r3, [pc, #4]	@ (80100d8 <get_custom_error+0x8>)
 80100d2:	7818      	ldrb	r0, [r3, #0]
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop
 80100d8:	2000af14 	.word	0x2000af14

080100dc <recv_custom_msg>:
 80100dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e0:	4693      	mov	fp, r2
 80100e2:	b089      	sub	sp, #36	@ 0x24
 80100e4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80100e8:	9305      	str	r3, [sp, #20]
 80100ea:	468a      	mov	sl, r1
 80100ec:	2100      	movs	r1, #0
 80100ee:	4604      	mov	r4, r0
 80100f0:	f88d 101e 	strb.w	r1, [sp, #30]
 80100f4:	b322      	cbz	r2, 8010140 <recv_custom_msg+0x64>
 80100f6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80100fa:	f10d 081f 	add.w	r8, sp, #31
 80100fe:	af05      	add	r7, sp, #20
 8010100:	f10d 061e 	add.w	r6, sp, #30
 8010104:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010108:	e002      	b.n	8010110 <recv_custom_msg+0x34>
 801010a:	9b05      	ldr	r3, [sp, #20]
 801010c:	2b00      	cmp	r3, #0
 801010e:	dd0f      	ble.n	8010130 <recv_custom_msg+0x54>
 8010110:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010114:	4623      	mov	r3, r4
 8010116:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801011a:	e9cd 5600 	strd	r5, r6, [sp]
 801011e:	4622      	mov	r2, r4
 8010120:	4648      	mov	r0, r9
 8010122:	f001 fca3 	bl	8011a6c <uxr_read_framed_msg>
 8010126:	2800      	cmp	r0, #0
 8010128:	d0ef      	beq.n	801010a <recv_custom_msg+0x2e>
 801012a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801012e:	b1b3      	cbz	r3, 801015e <recv_custom_msg+0x82>
 8010130:	4b0f      	ldr	r3, [pc, #60]	@ (8010170 <recv_custom_msg+0x94>)
 8010132:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010136:	701a      	strb	r2, [r3, #0]
 8010138:	2000      	movs	r0, #0
 801013a:	b009      	add	sp, #36	@ 0x24
 801013c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010140:	f10d 021f 	add.w	r2, sp, #31
 8010144:	9200      	str	r2, [sp, #0]
 8010146:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801014a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801014e:	4601      	mov	r1, r0
 8010150:	47a8      	blx	r5
 8010152:	2800      	cmp	r0, #0
 8010154:	d0ec      	beq.n	8010130 <recv_custom_msg+0x54>
 8010156:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d1e8      	bne.n	8010130 <recv_custom_msg+0x54>
 801015e:	f8cb 0000 	str.w	r0, [fp]
 8010162:	2001      	movs	r0, #1
 8010164:	f8ca 4000 	str.w	r4, [sl]
 8010168:	b009      	add	sp, #36	@ 0x24
 801016a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801016e:	bf00      	nop
 8010170:	2000af14 	.word	0x2000af14

08010174 <send_custom_msg>:
 8010174:	b530      	push	{r4, r5, lr}
 8010176:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801017a:	b087      	sub	sp, #28
 801017c:	4615      	mov	r5, r2
 801017e:	b974      	cbnz	r4, 801019e <send_custom_msg+0x2a>
 8010180:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8010184:	f10d 0317 	add.w	r3, sp, #23
 8010188:	47a0      	blx	r4
 801018a:	b108      	cbz	r0, 8010190 <send_custom_msg+0x1c>
 801018c:	42a8      	cmp	r0, r5
 801018e:	d015      	beq.n	80101bc <send_custom_msg+0x48>
 8010190:	4b0c      	ldr	r3, [pc, #48]	@ (80101c4 <send_custom_msg+0x50>)
 8010192:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010196:	701a      	strb	r2, [r3, #0]
 8010198:	2000      	movs	r0, #0
 801019a:	b007      	add	sp, #28
 801019c:	bd30      	pop	{r4, r5, pc}
 801019e:	460b      	mov	r3, r1
 80101a0:	2200      	movs	r2, #0
 80101a2:	f10d 0117 	add.w	r1, sp, #23
 80101a6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80101aa:	4602      	mov	r2, r0
 80101ac:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80101b0:	9500      	str	r5, [sp, #0]
 80101b2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80101b6:	f001 fa61 	bl	801167c <uxr_write_framed_msg>
 80101ba:	e7e6      	b.n	801018a <send_custom_msg+0x16>
 80101bc:	2001      	movs	r0, #1
 80101be:	b007      	add	sp, #28
 80101c0:	bd30      	pop	{r4, r5, pc}
 80101c2:	bf00      	nop
 80101c4:	2000af14 	.word	0x2000af14

080101c8 <uxr_set_custom_transport_callbacks>:
 80101c8:	b410      	push	{r4}
 80101ca:	9c01      	ldr	r4, [sp, #4]
 80101cc:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80101d0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80101d4:	9b02      	ldr	r3, [sp, #8]
 80101d6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80101da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101de:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80101e2:	4770      	bx	lr

080101e4 <uxr_init_custom_transport>:
 80101e4:	b538      	push	{r3, r4, r5, lr}
 80101e6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80101ea:	b303      	cbz	r3, 801022e <uxr_init_custom_transport+0x4a>
 80101ec:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80101f0:	4604      	mov	r4, r0
 80101f2:	b1e2      	cbz	r2, 801022e <uxr_init_custom_transport+0x4a>
 80101f4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80101f8:	b1ca      	cbz	r2, 801022e <uxr_init_custom_transport+0x4a>
 80101fa:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80101fe:	b1b2      	cbz	r2, 801022e <uxr_init_custom_transport+0x4a>
 8010200:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010204:	4798      	blx	r3
 8010206:	4605      	mov	r5, r0
 8010208:	b188      	cbz	r0, 801022e <uxr_init_custom_transport+0x4a>
 801020a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801020e:	b98b      	cbnz	r3, 8010234 <uxr_init_custom_transport+0x50>
 8010210:	490b      	ldr	r1, [pc, #44]	@ (8010240 <uxr_init_custom_transport+0x5c>)
 8010212:	4b0c      	ldr	r3, [pc, #48]	@ (8010244 <uxr_init_custom_transport+0x60>)
 8010214:	4a0c      	ldr	r2, [pc, #48]	@ (8010248 <uxr_init_custom_transport+0x64>)
 8010216:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801021a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801021e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8010222:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010226:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801022a:	4628      	mov	r0, r5
 801022c:	bd38      	pop	{r3, r4, r5, pc}
 801022e:	2500      	movs	r5, #0
 8010230:	4628      	mov	r0, r5
 8010232:	bd38      	pop	{r3, r4, r5, pc}
 8010234:	2100      	movs	r1, #0
 8010236:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801023a:	f001 fa19 	bl	8011670 <uxr_init_framing_io>
 801023e:	e7e7      	b.n	8010210 <uxr_init_custom_transport+0x2c>
 8010240:	08010175 	.word	0x08010175
 8010244:	080100dd 	.word	0x080100dd
 8010248:	080100d1 	.word	0x080100d1

0801024c <uxr_close_custom_transport>:
 801024c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8010250:	4718      	bx	r3
 8010252:	bf00      	nop

08010254 <uxr_object_id>:
 8010254:	b082      	sub	sp, #8
 8010256:	2300      	movs	r3, #0
 8010258:	f88d 1006 	strb.w	r1, [sp, #6]
 801025c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010260:	f360 030f 	bfi	r3, r0, #0, #16
 8010264:	f362 431f 	bfi	r3, r2, #16, #16
 8010268:	4618      	mov	r0, r3
 801026a:	b002      	add	sp, #8
 801026c:	4770      	bx	lr
 801026e:	bf00      	nop

08010270 <uxr_object_id_from_raw>:
 8010270:	7843      	ldrb	r3, [r0, #1]
 8010272:	7801      	ldrb	r1, [r0, #0]
 8010274:	b082      	sub	sp, #8
 8010276:	f003 020f 	and.w	r2, r3, #15
 801027a:	f88d 2006 	strb.w	r2, [sp, #6]
 801027e:	091b      	lsrs	r3, r3, #4
 8010280:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010284:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010288:	2000      	movs	r0, #0
 801028a:	f363 000f 	bfi	r0, r3, #0, #16
 801028e:	f362 401f 	bfi	r0, r2, #16, #16
 8010292:	b002      	add	sp, #8
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop

08010298 <uxr_object_id_to_raw>:
 8010298:	4602      	mov	r2, r0
 801029a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801029e:	b082      	sub	sp, #8
 80102a0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80102a4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80102a8:	f881 c000 	strb.w	ip, [r1]
 80102ac:	7048      	strb	r0, [r1, #1]
 80102ae:	b002      	add	sp, #8
 80102b0:	4770      	bx	lr
 80102b2:	bf00      	nop

080102b4 <uxr_buffer_cancel_data>:
 80102b4:	b510      	push	{r4, lr}
 80102b6:	b094      	sub	sp, #80	@ 0x50
 80102b8:	2300      	movs	r3, #0
 80102ba:	9202      	str	r2, [sp, #8]
 80102bc:	9205      	str	r2, [sp, #20]
 80102be:	9301      	str	r3, [sp, #4]
 80102c0:	2201      	movs	r2, #1
 80102c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80102c6:	f88d 301e 	strb.w	r3, [sp, #30]
 80102ca:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80102ce:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80102d2:	2308      	movs	r3, #8
 80102d4:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80102d8:	9300      	str	r3, [sp, #0]
 80102da:	2210      	movs	r2, #16
 80102dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80102de:	4604      	mov	r4, r0
 80102e0:	9103      	str	r1, [sp, #12]
 80102e2:	f001 f85f 	bl	80113a4 <uxr_prepare_stream_to_write_submessage>
 80102e6:	b918      	cbnz	r0, 80102f0 <uxr_buffer_cancel_data+0x3c>
 80102e8:	4604      	mov	r4, r0
 80102ea:	4620      	mov	r0, r4
 80102ec:	b014      	add	sp, #80	@ 0x50
 80102ee:	bd10      	pop	{r4, pc}
 80102f0:	9905      	ldr	r1, [sp, #20]
 80102f2:	aa06      	add	r2, sp, #24
 80102f4:	4620      	mov	r0, r4
 80102f6:	f001 f98b 	bl	8011610 <uxr_init_base_object_request>
 80102fa:	a906      	add	r1, sp, #24
 80102fc:	4604      	mov	r4, r0
 80102fe:	a80c      	add	r0, sp, #48	@ 0x30
 8010300:	f003 f82c 	bl	801335c <uxr_serialize_READ_DATA_Payload>
 8010304:	4620      	mov	r0, r4
 8010306:	b014      	add	sp, #80	@ 0x50
 8010308:	bd10      	pop	{r4, pc}
 801030a:	bf00      	nop

0801030c <read_submessage_format>:
 801030c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010310:	b095      	sub	sp, #84	@ 0x54
 8010312:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8010316:	b113      	cbz	r3, 801031e <read_submessage_format+0x12>
 8010318:	b015      	add	sp, #84	@ 0x54
 801031a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801031e:	460c      	mov	r4, r1
 8010320:	4615      	mov	r5, r2
 8010322:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010326:	4607      	mov	r7, r0
 8010328:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801032a:	9004      	str	r0, [sp, #16]
 801032c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801032e:	9005      	str	r0, [sp, #20]
 8010330:	1a52      	subs	r2, r2, r1
 8010332:	a80c      	add	r0, sp, #48	@ 0x30
 8010334:	4699      	mov	r9, r3
 8010336:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801033a:	f7ff fc7b 	bl	800fc34 <ucdr_init_buffer>
 801033e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010342:	a80c      	add	r0, sp, #48	@ 0x30
 8010344:	f7ff fc4a 	bl	800fbdc <ucdr_set_on_full_buffer_callback>
 8010348:	69e2      	ldr	r2, [r4, #28]
 801034a:	b19a      	cbz	r2, 8010374 <read_submessage_format+0x68>
 801034c:	f1b8 0f07 	cmp.w	r8, #7
 8010350:	f882 9014 	strb.w	r9, [r2, #20]
 8010354:	d040      	beq.n	80103d8 <read_submessage_format+0xcc>
 8010356:	f1b8 0f08 	cmp.w	r8, #8
 801035a:	d02e      	beq.n	80103ba <read_submessage_format+0xae>
 801035c:	f1b8 0f06 	cmp.w	r8, #6
 8010360:	d011      	beq.n	8010386 <read_submessage_format+0x7a>
 8010362:	2301      	movs	r3, #1
 8010364:	7513      	strb	r3, [r2, #20]
 8010366:	4629      	mov	r1, r5
 8010368:	4620      	mov	r0, r4
 801036a:	f7ff fcb3 	bl	800fcd4 <ucdr_advance_buffer>
 801036e:	b015      	add	sp, #84	@ 0x54
 8010370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010374:	f1b8 0f07 	cmp.w	r8, #7
 8010378:	d02e      	beq.n	80103d8 <read_submessage_format+0xcc>
 801037a:	f1b8 0f08 	cmp.w	r8, #8
 801037e:	d01c      	beq.n	80103ba <read_submessage_format+0xae>
 8010380:	f1b8 0f06 	cmp.w	r8, #6
 8010384:	d1ef      	bne.n	8010366 <read_submessage_format+0x5a>
 8010386:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 801038a:	f1b8 0f00 	cmp.w	r8, #0
 801038e:	d011      	beq.n	80103b4 <read_submessage_format+0xa8>
 8010390:	ab0c      	add	r3, sp, #48	@ 0x30
 8010392:	e9cd 3500 	strd	r3, r5, [sp]
 8010396:	2306      	movs	r3, #6
 8010398:	f88d 3016 	strb.w	r3, [sp, #22]
 801039c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80103a0:	9302      	str	r3, [sp, #8]
 80103a2:	4632      	mov	r2, r6
 80103a4:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80103a8:	4638      	mov	r0, r7
 80103aa:	47c0      	blx	r8
 80103ac:	2301      	movs	r3, #1
 80103ae:	69e2      	ldr	r2, [r4, #28]
 80103b0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80103b4:	2a00      	cmp	r2, #0
 80103b6:	d1d4      	bne.n	8010362 <read_submessage_format+0x56>
 80103b8:	e7d5      	b.n	8010366 <read_submessage_format+0x5a>
 80103ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d0f8      	beq.n	80103b4 <read_submessage_format+0xa8>
 80103c2:	a906      	add	r1, sp, #24
 80103c4:	a80c      	add	r0, sp, #48	@ 0x30
 80103c6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80103ca:	f003 f89b 	bl	8013504 <uxr_deserialize_SampleIdentity>
 80103ce:	b9a0      	cbnz	r0, 80103fa <read_submessage_format+0xee>
 80103d0:	69e2      	ldr	r2, [r4, #28]
 80103d2:	2a00      	cmp	r2, #0
 80103d4:	d1c5      	bne.n	8010362 <read_submessage_format+0x56>
 80103d6:	e7c6      	b.n	8010366 <read_submessage_format+0x5a>
 80103d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80103dc:	b13b      	cbz	r3, 80103ee <read_submessage_format+0xe2>
 80103de:	a906      	add	r1, sp, #24
 80103e0:	a80c      	add	r0, sp, #48	@ 0x30
 80103e2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80103e6:	f002 fd53 	bl	8012e90 <uxr_deserialize_BaseObjectRequest>
 80103ea:	bb60      	cbnz	r0, 8010446 <read_submessage_format+0x13a>
 80103ec:	69e2      	ldr	r2, [r4, #28]
 80103ee:	68a3      	ldr	r3, [r4, #8]
 80103f0:	442b      	add	r3, r5
 80103f2:	60a3      	str	r3, [r4, #8]
 80103f4:	2a00      	cmp	r2, #0
 80103f6:	d1b4      	bne.n	8010362 <read_submessage_format+0x56>
 80103f8:	e7b5      	b.n	8010366 <read_submessage_format+0x5a>
 80103fa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80103fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010400:	1a52      	subs	r2, r2, r1
 8010402:	eba8 0803 	sub.w	r8, r8, r3
 8010406:	a80c      	add	r0, sp, #48	@ 0x30
 8010408:	f7ff fc14 	bl	800fc34 <ucdr_init_buffer>
 801040c:	44a8      	add	r8, r5
 801040e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010412:	a80c      	add	r0, sp, #48	@ 0x30
 8010414:	f7ff fbe2 	bl	800fbdc <ucdr_set_on_full_buffer_callback>
 8010418:	fa1f f888 	uxth.w	r8, r8
 801041c:	ab0c      	add	r3, sp, #48	@ 0x30
 801041e:	9300      	str	r3, [sp, #0]
 8010420:	f8cd 8004 	str.w	r8, [sp, #4]
 8010424:	2108      	movs	r1, #8
 8010426:	f88d 1016 	strb.w	r1, [sp, #22]
 801042a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801042e:	9102      	str	r1, [sp, #8]
 8010430:	ab06      	add	r3, sp, #24
 8010432:	4632      	mov	r2, r6
 8010434:	9905      	ldr	r1, [sp, #20]
 8010436:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801043a:	4638      	mov	r0, r7
 801043c:	47b0      	blx	r6
 801043e:	2301      	movs	r3, #1
 8010440:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010444:	e7c4      	b.n	80103d0 <read_submessage_format+0xc4>
 8010446:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801044a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801044c:	1a52      	subs	r2, r2, r1
 801044e:	a80c      	add	r0, sp, #48	@ 0x30
 8010450:	eba8 0803 	sub.w	r8, r8, r3
 8010454:	f7ff fbee 	bl	800fc34 <ucdr_init_buffer>
 8010458:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801045c:	a80c      	add	r0, sp, #48	@ 0x30
 801045e:	f7ff fbbd 	bl	800fbdc <ucdr_set_on_full_buffer_callback>
 8010462:	ab0c      	add	r3, sp, #48	@ 0x30
 8010464:	9300      	str	r3, [sp, #0]
 8010466:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801046a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801046e:	44a8      	add	r8, r5
 8010470:	fa1f f888 	uxth.w	r8, r8
 8010474:	f8cd 8004 	str.w	r8, [sp, #4]
 8010478:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801047c:	2107      	movs	r1, #7
 801047e:	f88d 1016 	strb.w	r1, [sp, #22]
 8010482:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8010486:	9102      	str	r1, [sp, #8]
 8010488:	4632      	mov	r2, r6
 801048a:	b29b      	uxth	r3, r3
 801048c:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8010490:	9905      	ldr	r1, [sp, #20]
 8010492:	4638      	mov	r0, r7
 8010494:	47b0      	blx	r6
 8010496:	2301      	movs	r3, #1
 8010498:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801049c:	e7a6      	b.n	80103ec <read_submessage_format+0xe0>
 801049e:	bf00      	nop

080104a0 <on_get_fragmentation_info>:
 80104a0:	b500      	push	{lr}
 80104a2:	b08b      	sub	sp, #44	@ 0x2c
 80104a4:	4601      	mov	r1, r0
 80104a6:	2204      	movs	r2, #4
 80104a8:	a802      	add	r0, sp, #8
 80104aa:	f7ff fbc3 	bl	800fc34 <ucdr_init_buffer>
 80104ae:	f10d 0305 	add.w	r3, sp, #5
 80104b2:	f10d 0206 	add.w	r2, sp, #6
 80104b6:	a901      	add	r1, sp, #4
 80104b8:	a802      	add	r0, sp, #8
 80104ba:	f001 febd 	bl	8012238 <uxr_read_submessage_header>
 80104be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80104c2:	2b0d      	cmp	r3, #13
 80104c4:	d003      	beq.n	80104ce <on_get_fragmentation_info+0x2e>
 80104c6:	2000      	movs	r0, #0
 80104c8:	b00b      	add	sp, #44	@ 0x2c
 80104ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80104ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80104d2:	f013 0f02 	tst.w	r3, #2
 80104d6:	bf14      	ite	ne
 80104d8:	2002      	movne	r0, #2
 80104da:	2001      	moveq	r0, #1
 80104dc:	b00b      	add	sp, #44	@ 0x2c
 80104de:	f85d fb04 	ldr.w	pc, [sp], #4
 80104e2:	bf00      	nop

080104e4 <read_submessage_get_info>:
 80104e4:	b570      	push	{r4, r5, r6, lr}
 80104e6:	2500      	movs	r5, #0
 80104e8:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80104ec:	4604      	mov	r4, r0
 80104ee:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80104f2:	460e      	mov	r6, r1
 80104f4:	a810      	add	r0, sp, #64	@ 0x40
 80104f6:	4629      	mov	r1, r5
 80104f8:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80104fc:	f009 f8b0 	bl	8019660 <memset>
 8010500:	a903      	add	r1, sp, #12
 8010502:	4630      	mov	r0, r6
 8010504:	f002 fe6c 	bl	80131e0 <uxr_deserialize_GET_INFO_Payload>
 8010508:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801050c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010510:	4620      	mov	r0, r4
 8010512:	f001 f875 	bl	8011600 <uxr_session_header_offset>
 8010516:	462b      	mov	r3, r5
 8010518:	9000      	str	r0, [sp, #0]
 801051a:	220c      	movs	r2, #12
 801051c:	a905      	add	r1, sp, #20
 801051e:	a808      	add	r0, sp, #32
 8010520:	f7ff fb76 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 8010524:	a910      	add	r1, sp, #64	@ 0x40
 8010526:	a808      	add	r0, sp, #32
 8010528:	f002 fecc 	bl	80132c4 <uxr_serialize_INFO_Payload>
 801052c:	9b08      	ldr	r3, [sp, #32]
 801052e:	462a      	mov	r2, r5
 8010530:	4629      	mov	r1, r5
 8010532:	4620      	mov	r0, r4
 8010534:	f001 f80e 	bl	8011554 <uxr_stamp_session_header>
 8010538:	a808      	add	r0, sp, #32
 801053a:	f7ff fba7 	bl	800fc8c <ucdr_buffer_length>
 801053e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010540:	4602      	mov	r2, r0
 8010542:	a905      	add	r1, sp, #20
 8010544:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010548:	47a0      	blx	r4
 801054a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801054e:	bd70      	pop	{r4, r5, r6, pc}

08010550 <write_submessage_acknack.isra.0>:
 8010550:	b570      	push	{r4, r5, r6, lr}
 8010552:	b092      	sub	sp, #72	@ 0x48
 8010554:	4605      	mov	r5, r0
 8010556:	460e      	mov	r6, r1
 8010558:	4614      	mov	r4, r2
 801055a:	f001 f851 	bl	8011600 <uxr_session_header_offset>
 801055e:	a905      	add	r1, sp, #20
 8010560:	9000      	str	r0, [sp, #0]
 8010562:	2300      	movs	r3, #0
 8010564:	a80a      	add	r0, sp, #40	@ 0x28
 8010566:	2211      	movs	r2, #17
 8010568:	f7ff fb52 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 801056c:	2218      	movs	r2, #24
 801056e:	fb02 5404 	mla	r4, r2, r4, r5
 8010572:	2300      	movs	r3, #0
 8010574:	2205      	movs	r2, #5
 8010576:	3450      	adds	r4, #80	@ 0x50
 8010578:	210a      	movs	r1, #10
 801057a:	a80a      	add	r0, sp, #40	@ 0x28
 801057c:	f001 fe42 	bl	8012204 <uxr_buffer_submessage_header>
 8010580:	a903      	add	r1, sp, #12
 8010582:	4620      	mov	r0, r4
 8010584:	f007 fba8 	bl	8017cd8 <uxr_compute_acknack>
 8010588:	ba40      	rev16	r0, r0
 801058a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801058e:	a903      	add	r1, sp, #12
 8010590:	a80a      	add	r0, sp, #40	@ 0x28
 8010592:	f88d 6010 	strb.w	r6, [sp, #16]
 8010596:	f002 ff05 	bl	80133a4 <uxr_serialize_ACKNACK_Payload>
 801059a:	2200      	movs	r2, #0
 801059c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801059e:	4611      	mov	r1, r2
 80105a0:	4628      	mov	r0, r5
 80105a2:	f000 ffd7 	bl	8011554 <uxr_stamp_session_header>
 80105a6:	a80a      	add	r0, sp, #40	@ 0x28
 80105a8:	f7ff fb70 	bl	800fc8c <ucdr_buffer_length>
 80105ac:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80105ae:	4602      	mov	r2, r0
 80105b0:	a905      	add	r1, sp, #20
 80105b2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80105b6:	47a0      	blx	r4
 80105b8:	b012      	add	sp, #72	@ 0x48
 80105ba:	bd70      	pop	{r4, r5, r6, pc}
 80105bc:	0000      	movs	r0, r0
	...

080105c0 <uxr_init_session>:
 80105c0:	b510      	push	{r4, lr}
 80105c2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80105f8 <uxr_init_session+0x38>
 80105c6:	2300      	movs	r3, #0
 80105c8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80105cc:	4604      	mov	r4, r0
 80105ce:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80105d2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80105d6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80105da:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80105de:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80105e2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80105e6:	2181      	movs	r1, #129	@ 0x81
 80105e8:	f000 ff20 	bl	801142c <uxr_init_session_info>
 80105ec:	f104 0008 	add.w	r0, r4, #8
 80105f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105f4:	f001 bd22 	b.w	801203c <uxr_init_stream_storage>
	...

08010600 <uxr_set_status_callback>:
 8010600:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010604:	4770      	bx	lr
 8010606:	bf00      	nop

08010608 <uxr_set_topic_callback>:
 8010608:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801060c:	4770      	bx	lr
 801060e:	bf00      	nop

08010610 <uxr_set_request_callback>:
 8010610:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010614:	4770      	bx	lr
 8010616:	bf00      	nop

08010618 <uxr_set_reply_callback>:
 8010618:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop

08010620 <uxr_create_output_best_effort_stream>:
 8010620:	b510      	push	{r4, lr}
 8010622:	b084      	sub	sp, #16
 8010624:	e9cd 2100 	strd	r2, r1, [sp]
 8010628:	4604      	mov	r4, r0
 801062a:	f000 ffe9 	bl	8011600 <uxr_session_header_offset>
 801062e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010632:	4603      	mov	r3, r0
 8010634:	f104 0008 	add.w	r0, r4, #8
 8010638:	b004      	add	sp, #16
 801063a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801063e:	f001 bd47 	b.w	80120d0 <uxr_add_output_best_effort_buffer>
 8010642:	bf00      	nop

08010644 <uxr_create_output_reliable_stream>:
 8010644:	b510      	push	{r4, lr}
 8010646:	b088      	sub	sp, #32
 8010648:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801064c:	4604      	mov	r4, r0
 801064e:	9303      	str	r3, [sp, #12]
 8010650:	f000 ffd6 	bl	8011600 <uxr_session_header_offset>
 8010654:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010658:	9000      	str	r0, [sp, #0]
 801065a:	9905      	ldr	r1, [sp, #20]
 801065c:	f104 0008 	add.w	r0, r4, #8
 8010660:	f001 fd4a 	bl	80120f8 <uxr_add_output_reliable_buffer>
 8010664:	2200      	movs	r2, #0
 8010666:	b2c3      	uxtb	r3, r0
 8010668:	f363 0207 	bfi	r2, r3, #0, #8
 801066c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010670:	f363 220f 	bfi	r2, r3, #8, #8
 8010674:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010678:	f363 4217 	bfi	r2, r3, #16, #8
 801067c:	0e03      	lsrs	r3, r0, #24
 801067e:	f363 621f 	bfi	r2, r3, #24, #8
 8010682:	4610      	mov	r0, r2
 8010684:	b008      	add	sp, #32
 8010686:	bd10      	pop	{r4, pc}

08010688 <uxr_create_input_best_effort_stream>:
 8010688:	b082      	sub	sp, #8
 801068a:	3008      	adds	r0, #8
 801068c:	b002      	add	sp, #8
 801068e:	f001 bd4d 	b.w	801212c <uxr_add_input_best_effort_buffer>
 8010692:	bf00      	nop

08010694 <uxr_create_input_reliable_stream>:
 8010694:	b510      	push	{r4, lr}
 8010696:	b084      	sub	sp, #16
 8010698:	4c0b      	ldr	r4, [pc, #44]	@ (80106c8 <uxr_create_input_reliable_stream+0x34>)
 801069a:	9400      	str	r4, [sp, #0]
 801069c:	3008      	adds	r0, #8
 801069e:	f001 fd5b 	bl	8012158 <uxr_add_input_reliable_buffer>
 80106a2:	2200      	movs	r2, #0
 80106a4:	b2c3      	uxtb	r3, r0
 80106a6:	f363 0207 	bfi	r2, r3, #0, #8
 80106aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80106ae:	f363 220f 	bfi	r2, r3, #8, #8
 80106b2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80106b6:	f363 4217 	bfi	r2, r3, #16, #8
 80106ba:	0e03      	lsrs	r3, r0, #24
 80106bc:	f363 621f 	bfi	r2, r3, #24, #8
 80106c0:	4610      	mov	r0, r2
 80106c2:	b004      	add	sp, #16
 80106c4:	bd10      	pop	{r4, pc}
 80106c6:	bf00      	nop
 80106c8:	080104a1 	.word	0x080104a1

080106cc <uxr_epoch_nanos>:
 80106cc:	b510      	push	{r4, lr}
 80106ce:	4604      	mov	r4, r0
 80106d0:	f001 fdf8 	bl	80122c4 <uxr_nanos>
 80106d4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80106d8:	1ac0      	subs	r0, r0, r3
 80106da:	eb61 0102 	sbc.w	r1, r1, r2
 80106de:	bd10      	pop	{r4, pc}

080106e0 <uxr_flash_output_streams>:
 80106e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106e4:	7e03      	ldrb	r3, [r0, #24]
 80106e6:	b084      	sub	sp, #16
 80106e8:	4604      	mov	r4, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d035      	beq.n	801075a <uxr_flash_output_streams+0x7a>
 80106ee:	f04f 0900 	mov.w	r9, #0
 80106f2:	4648      	mov	r0, r9
 80106f4:	f10d 0802 	add.w	r8, sp, #2
 80106f8:	af03      	add	r7, sp, #12
 80106fa:	ae02      	add	r6, sp, #8
 80106fc:	e006      	b.n	801070c <uxr_flash_output_streams+0x2c>
 80106fe:	7e23      	ldrb	r3, [r4, #24]
 8010700:	f109 0901 	add.w	r9, r9, #1
 8010704:	fa5f f089 	uxtb.w	r0, r9
 8010708:	4283      	cmp	r3, r0
 801070a:	d926      	bls.n	801075a <uxr_flash_output_streams+0x7a>
 801070c:	2201      	movs	r2, #1
 801070e:	4611      	mov	r1, r2
 8010710:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010714:	f001 fc3e 	bl	8011f94 <uxr_stream_id>
 8010718:	3508      	adds	r5, #8
 801071a:	4684      	mov	ip, r0
 801071c:	4643      	mov	r3, r8
 801071e:	463a      	mov	r2, r7
 8010720:	4631      	mov	r1, r6
 8010722:	4628      	mov	r0, r5
 8010724:	f8cd c004 	str.w	ip, [sp, #4]
 8010728:	f007 fb5c 	bl	8017de4 <uxr_prepare_best_effort_buffer_to_send>
 801072c:	2800      	cmp	r0, #0
 801072e:	d0e6      	beq.n	80106fe <uxr_flash_output_streams+0x1e>
 8010730:	9b02      	ldr	r3, [sp, #8]
 8010732:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010736:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801073a:	4620      	mov	r0, r4
 801073c:	f000 ff0a 	bl	8011554 <uxr_stamp_session_header>
 8010740:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010742:	9a03      	ldr	r2, [sp, #12]
 8010744:	685d      	ldr	r5, [r3, #4]
 8010746:	6818      	ldr	r0, [r3, #0]
 8010748:	9902      	ldr	r1, [sp, #8]
 801074a:	47a8      	blx	r5
 801074c:	f109 0901 	add.w	r9, r9, #1
 8010750:	7e23      	ldrb	r3, [r4, #24]
 8010752:	fa5f f089 	uxtb.w	r0, r9
 8010756:	4283      	cmp	r3, r0
 8010758:	d8d8      	bhi.n	801070c <uxr_flash_output_streams+0x2c>
 801075a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801075e:	b38b      	cbz	r3, 80107c4 <uxr_flash_output_streams+0xe4>
 8010760:	f04f 0900 	mov.w	r9, #0
 8010764:	f10d 0802 	add.w	r8, sp, #2
 8010768:	af03      	add	r7, sp, #12
 801076a:	ae02      	add	r6, sp, #8
 801076c:	4648      	mov	r0, r9
 801076e:	2201      	movs	r2, #1
 8010770:	2102      	movs	r1, #2
 8010772:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010776:	f001 fc0d 	bl	8011f94 <uxr_stream_id>
 801077a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801077e:	3520      	adds	r5, #32
 8010780:	9001      	str	r0, [sp, #4]
 8010782:	e00d      	b.n	80107a0 <uxr_flash_output_streams+0xc0>
 8010784:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010788:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801078c:	9b02      	ldr	r3, [sp, #8]
 801078e:	f000 fee1 	bl	8011554 <uxr_stamp_session_header>
 8010792:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010794:	9a03      	ldr	r2, [sp, #12]
 8010796:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801079a:	9902      	ldr	r1, [sp, #8]
 801079c:	6818      	ldr	r0, [r3, #0]
 801079e:	47d0      	blx	sl
 80107a0:	4643      	mov	r3, r8
 80107a2:	463a      	mov	r2, r7
 80107a4:	4631      	mov	r1, r6
 80107a6:	4628      	mov	r0, r5
 80107a8:	f007 fd3a 	bl	8018220 <uxr_prepare_next_reliable_buffer_to_send>
 80107ac:	4603      	mov	r3, r0
 80107ae:	4620      	mov	r0, r4
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d1e7      	bne.n	8010784 <uxr_flash_output_streams+0xa4>
 80107b4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80107b8:	f109 0901 	add.w	r9, r9, #1
 80107bc:	fa5f f089 	uxtb.w	r0, r9
 80107c0:	4283      	cmp	r3, r0
 80107c2:	d8d4      	bhi.n	801076e <uxr_flash_output_streams+0x8e>
 80107c4:	b004      	add	sp, #16
 80107c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107ca:	bf00      	nop

080107cc <read_submessage_info>:
 80107cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107d0:	460d      	mov	r5, r1
 80107d2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80107d6:	4669      	mov	r1, sp
 80107d8:	4607      	mov	r7, r0
 80107da:	4628      	mov	r0, r5
 80107dc:	f002 fc0e 	bl	8012ffc <uxr_deserialize_BaseObjectReply>
 80107e0:	a902      	add	r1, sp, #8
 80107e2:	4604      	mov	r4, r0
 80107e4:	4628      	mov	r0, r5
 80107e6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80107ea:	f7fe f8bf 	bl	800e96c <ucdr_deserialize_bool>
 80107ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80107f2:	4004      	ands	r4, r0
 80107f4:	b2e4      	uxtb	r4, r4
 80107f6:	b95b      	cbnz	r3, 8010810 <read_submessage_info+0x44>
 80107f8:	a987      	add	r1, sp, #540	@ 0x21c
 80107fa:	4628      	mov	r0, r5
 80107fc:	f7fe f8b6 	bl	800e96c <ucdr_deserialize_bool>
 8010800:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010804:	4606      	mov	r6, r0
 8010806:	b94b      	cbnz	r3, 801081c <read_submessage_info+0x50>
 8010808:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801080c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010810:	a903      	add	r1, sp, #12
 8010812:	4628      	mov	r0, r5
 8010814:	f002 fa9a 	bl	8012d4c <uxr_deserialize_ObjectVariant>
 8010818:	4004      	ands	r4, r0
 801081a:	e7ed      	b.n	80107f8 <read_submessage_info+0x2c>
 801081c:	a988      	add	r1, sp, #544	@ 0x220
 801081e:	4628      	mov	r0, r5
 8010820:	f7fe f8d2 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8010824:	4234      	tst	r4, r6
 8010826:	d0ef      	beq.n	8010808 <read_submessage_info+0x3c>
 8010828:	2800      	cmp	r0, #0
 801082a:	d0ed      	beq.n	8010808 <read_submessage_info+0x3c>
 801082c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010830:	2b0d      	cmp	r3, #13
 8010832:	d1e9      	bne.n	8010808 <read_submessage_info+0x3c>
 8010834:	a98a      	add	r1, sp, #552	@ 0x228
 8010836:	4628      	mov	r0, r5
 8010838:	f7fe fe6c 	bl	800f514 <ucdr_deserialize_int16_t>
 801083c:	b140      	cbz	r0, 8010850 <read_submessage_info+0x84>
 801083e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010842:	2b00      	cmp	r3, #0
 8010844:	dd07      	ble.n	8010856 <read_submessage_info+0x8a>
 8010846:	f1b8 0f00 	cmp.w	r8, #0
 801084a:	bf14      	ite	ne
 801084c:	2001      	movne	r0, #1
 801084e:	2002      	moveq	r0, #2
 8010850:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010854:	e7d8      	b.n	8010808 <read_submessage_info+0x3c>
 8010856:	2000      	movs	r0, #0
 8010858:	e7fa      	b.n	8010850 <read_submessage_info+0x84>
 801085a:	bf00      	nop

0801085c <read_submessage_list>:
 801085c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010860:	b097      	sub	sp, #92	@ 0x5c
 8010862:	4ec1      	ldr	r6, [pc, #772]	@ (8010b68 <read_submessage_list+0x30c>)
 8010864:	9209      	str	r2, [sp, #36]	@ 0x24
 8010866:	4604      	mov	r4, r0
 8010868:	460d      	mov	r5, r1
 801086a:	f04f 0801 	mov.w	r8, #1
 801086e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010872:	aa0c      	add	r2, sp, #48	@ 0x30
 8010874:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010878:	4628      	mov	r0, r5
 801087a:	f001 fcdd 	bl	8012238 <uxr_read_submessage_header>
 801087e:	2800      	cmp	r0, #0
 8010880:	f000 813e 	beq.w	8010b00 <read_submessage_list+0x2a4>
 8010884:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010888:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 801088c:	3b02      	subs	r3, #2
 801088e:	2b0d      	cmp	r3, #13
 8010890:	d8ed      	bhi.n	801086e <read_submessage_list+0x12>
 8010892:	a101      	add	r1, pc, #4	@ (adr r1, 8010898 <read_submessage_list+0x3c>)
 8010894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010898:	08010af7 	.word	0x08010af7
 801089c:	0801086f 	.word	0x0801086f
 80108a0:	08010ae7 	.word	0x08010ae7
 80108a4:	08010a85 	.word	0x08010a85
 80108a8:	08010a7b 	.word	0x08010a7b
 80108ac:	0801086f 	.word	0x0801086f
 80108b0:	0801086f 	.word	0x0801086f
 80108b4:	080109db 	.word	0x080109db
 80108b8:	0801096b 	.word	0x0801096b
 80108bc:	0801092b 	.word	0x0801092b
 80108c0:	0801086f 	.word	0x0801086f
 80108c4:	0801086f 	.word	0x0801086f
 80108c8:	0801086f 	.word	0x0801086f
 80108cc:	080108d1 	.word	0x080108d1
 80108d0:	a910      	add	r1, sp, #64	@ 0x40
 80108d2:	4628      	mov	r0, r5
 80108d4:	f002 fdc4 	bl	8013460 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80108d8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80108dc:	f1b9 0f00 	cmp.w	r9, #0
 80108e0:	f000 8116 	beq.w	8010b10 <read_submessage_list+0x2b4>
 80108e4:	f001 fcee 	bl	80122c4 <uxr_nanos>
 80108e8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80108ea:	4602      	mov	r2, r0
 80108ec:	460b      	mov	r3, r1
 80108ee:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80108f0:	2100      	movs	r1, #0
 80108f2:	468c      	mov	ip, r1
 80108f4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80108f8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80108fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80108fe:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8010900:	468c      	mov	ip, r1
 8010902:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010906:	46e2      	mov	sl, ip
 8010908:	46bc      	mov	ip, r7
 801090a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 801090e:	fbc0 7106 	smlal	r7, r1, r0, r6
 8010912:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8010916:	e9cd 7100 	strd	r7, r1, [sp]
 801091a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 801091e:	9106      	str	r1, [sp, #24]
 8010920:	4620      	mov	r0, r4
 8010922:	47c8      	blx	r9
 8010924:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8010928:	e7a1      	b.n	801086e <read_submessage_list+0x12>
 801092a:	a910      	add	r1, sp, #64	@ 0x40
 801092c:	4628      	mov	r0, r5
 801092e:	f002 fd77 	bl	8013420 <uxr_deserialize_HEARTBEAT_Payload>
 8010932:	2100      	movs	r1, #0
 8010934:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010938:	f001 fb56 	bl	8011fe8 <uxr_stream_id_from_raw>
 801093c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010940:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010942:	4639      	mov	r1, r7
 8010944:	f104 0008 	add.w	r0, r4, #8
 8010948:	f001 fc3c 	bl	80121c4 <uxr_get_input_reliable_stream>
 801094c:	2800      	cmp	r0, #0
 801094e:	d08e      	beq.n	801086e <read_submessage_list+0x12>
 8010950:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010954:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010958:	f007 f9b2 	bl	8017cc0 <uxr_process_heartbeat>
 801095c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010960:	463a      	mov	r2, r7
 8010962:	4620      	mov	r0, r4
 8010964:	f7ff fdf4 	bl	8010550 <write_submessage_acknack.isra.0>
 8010968:	e781      	b.n	801086e <read_submessage_list+0x12>
 801096a:	a910      	add	r1, sp, #64	@ 0x40
 801096c:	4628      	mov	r0, r5
 801096e:	f002 fd2f 	bl	80133d0 <uxr_deserialize_ACKNACK_Payload>
 8010972:	2100      	movs	r1, #0
 8010974:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010978:	f001 fb36 	bl	8011fe8 <uxr_stream_id_from_raw>
 801097c:	900d      	str	r0, [sp, #52]	@ 0x34
 801097e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010982:	f104 0008 	add.w	r0, r4, #8
 8010986:	f001 fc09 	bl	801219c <uxr_get_output_reliable_stream>
 801098a:	4607      	mov	r7, r0
 801098c:	2800      	cmp	r0, #0
 801098e:	f43f af6e 	beq.w	801086e <read_submessage_list+0x12>
 8010992:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8010996:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801099a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801099e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80109a2:	b289      	uxth	r1, r1
 80109a4:	f007 fce6 	bl	8018374 <uxr_process_acknack>
 80109a8:	4638      	mov	r0, r7
 80109aa:	f007 fca3 	bl	80182f4 <uxr_begin_output_nack_buffer_it>
 80109ae:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80109b2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80109b6:	e006      	b.n	80109c6 <read_submessage_list+0x16a>
 80109b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80109ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80109bc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80109c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80109c2:	6818      	ldr	r0, [r3, #0]
 80109c4:	47c8      	blx	r9
 80109c6:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80109ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 80109cc:	4651      	mov	r1, sl
 80109ce:	4638      	mov	r0, r7
 80109d0:	f007 fc92 	bl	80182f8 <uxr_next_reliable_nack_buffer_to_send>
 80109d4:	2800      	cmp	r0, #0
 80109d6:	d1ef      	bne.n	80109b8 <read_submessage_list+0x15c>
 80109d8:	e749      	b.n	801086e <read_submessage_list+0x12>
 80109da:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80109de:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80109e2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80109e6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80109ea:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80109ee:	4651      	mov	r1, sl
 80109f0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80109f4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80109f8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80109fc:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8010a00:	4628      	mov	r0, r5
 8010a02:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8010a06:	f002 fa43 	bl	8012e90 <uxr_deserialize_BaseObjectRequest>
 8010a0a:	4650      	mov	r0, sl
 8010a0c:	a90f      	add	r1, sp, #60	@ 0x3c
 8010a0e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010a12:	f000 fe1b 	bl	801164c <uxr_parse_base_object_request>
 8010a16:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010a1a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010a1c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010a20:	9110      	str	r1, [sp, #64]	@ 0x40
 8010a22:	3f04      	subs	r7, #4
 8010a24:	f009 090e 	and.w	r9, r9, #14
 8010a28:	b2bf      	uxth	r7, r7
 8010a2a:	f1bb 0f00 	cmp.w	fp, #0
 8010a2e:	d006      	beq.n	8010a3e <read_submessage_list+0x1e2>
 8010a30:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010a34:	9300      	str	r3, [sp, #0]
 8010a36:	4652      	mov	r2, sl
 8010a38:	2300      	movs	r3, #0
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	47d8      	blx	fp
 8010a3e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010a40:	b16a      	cbz	r2, 8010a5e <read_submessage_list+0x202>
 8010a42:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010a44:	2100      	movs	r1, #0
 8010a46:	3802      	subs	r0, #2
 8010a48:	e002      	b.n	8010a50 <read_submessage_list+0x1f4>
 8010a4a:	3101      	adds	r1, #1
 8010a4c:	4291      	cmp	r1, r2
 8010a4e:	d006      	beq.n	8010a5e <read_submessage_list+0x202>
 8010a50:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010a54:	4553      	cmp	r3, sl
 8010a56:	d1f8      	bne.n	8010a4a <read_submessage_list+0x1ee>
 8010a58:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	545a      	strb	r2, [r3, r1]
 8010a5e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8010a62:	9102      	str	r1, [sp, #8]
 8010a64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010a66:	9101      	str	r1, [sp, #4]
 8010a68:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010a6a:	9100      	str	r1, [sp, #0]
 8010a6c:	464b      	mov	r3, r9
 8010a6e:	463a      	mov	r2, r7
 8010a70:	4629      	mov	r1, r5
 8010a72:	4620      	mov	r0, r4
 8010a74:	f7ff fc4a 	bl	801030c <read_submessage_format>
 8010a78:	e6f9      	b.n	801086e <read_submessage_list+0x12>
 8010a7a:	4629      	mov	r1, r5
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	f7ff fea5 	bl	80107cc <read_submessage_info>
 8010a82:	e6f4      	b.n	801086e <read_submessage_list+0x12>
 8010a84:	2a00      	cmp	r2, #0
 8010a86:	d03e      	beq.n	8010b06 <read_submessage_list+0x2aa>
 8010a88:	a910      	add	r1, sp, #64	@ 0x40
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	f002 fbfc 	bl	8013288 <uxr_deserialize_STATUS_Payload>
 8010a90:	a90e      	add	r1, sp, #56	@ 0x38
 8010a92:	aa0d      	add	r2, sp, #52	@ 0x34
 8010a94:	a810      	add	r0, sp, #64	@ 0x40
 8010a96:	f000 fdd9 	bl	801164c <uxr_parse_base_object_request>
 8010a9a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010a9e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010aa0:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8010aa4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8010aa8:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010aaa:	f1ba 0f00 	cmp.w	sl, #0
 8010aae:	d006      	beq.n	8010abe <read_submessage_list+0x262>
 8010ab0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010ab4:	9300      	str	r3, [sp, #0]
 8010ab6:	463a      	mov	r2, r7
 8010ab8:	464b      	mov	r3, r9
 8010aba:	4620      	mov	r0, r4
 8010abc:	47d0      	blx	sl
 8010abe:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010ac0:	2a00      	cmp	r2, #0
 8010ac2:	f43f aed4 	beq.w	801086e <read_submessage_list+0x12>
 8010ac6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010ac8:	2100      	movs	r1, #0
 8010aca:	3802      	subs	r0, #2
 8010acc:	e003      	b.n	8010ad6 <read_submessage_list+0x27a>
 8010ace:	3101      	adds	r1, #1
 8010ad0:	4291      	cmp	r1, r2
 8010ad2:	f43f aecc 	beq.w	801086e <read_submessage_list+0x12>
 8010ad6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010ada:	42bb      	cmp	r3, r7
 8010adc:	d1f7      	bne.n	8010ace <read_submessage_list+0x272>
 8010ade:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010ae0:	f803 9001 	strb.w	r9, [r3, r1]
 8010ae4:	e6c3      	b.n	801086e <read_submessage_list+0x12>
 8010ae6:	2a00      	cmp	r2, #0
 8010ae8:	f47f aec1 	bne.w	801086e <read_submessage_list+0x12>
 8010aec:	4629      	mov	r1, r5
 8010aee:	4620      	mov	r0, r4
 8010af0:	f000 fcf2 	bl	80114d8 <uxr_read_create_session_status>
 8010af4:	e6bb      	b.n	801086e <read_submessage_list+0x12>
 8010af6:	4629      	mov	r1, r5
 8010af8:	4620      	mov	r0, r4
 8010afa:	f7ff fcf3 	bl	80104e4 <read_submessage_get_info>
 8010afe:	e6b6      	b.n	801086e <read_submessage_list+0x12>
 8010b00:	b017      	add	sp, #92	@ 0x5c
 8010b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b06:	4629      	mov	r1, r5
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f000 fcf1 	bl	80114f0 <uxr_read_delete_session_status>
 8010b0e:	e6ae      	b.n	801086e <read_submessage_list+0x12>
 8010b10:	f001 fbd8 	bl	80122c4 <uxr_nanos>
 8010b14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010b16:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010b18:	464f      	mov	r7, r9
 8010b1a:	fbc3 2706 	smlal	r2, r7, r3, r6
 8010b1e:	1812      	adds	r2, r2, r0
 8010b20:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010b22:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010b24:	eb47 0101 	adc.w	r1, r7, r1
 8010b28:	464f      	mov	r7, r9
 8010b2a:	fbc3 0706 	smlal	r0, r7, r3, r6
 8010b2e:	463b      	mov	r3, r7
 8010b30:	4684      	mov	ip, r0
 8010b32:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8010b36:	fbc7 0906 	smlal	r0, r9, r7, r6
 8010b3a:	eb1c 0c00 	adds.w	ip, ip, r0
 8010b3e:	464f      	mov	r7, r9
 8010b40:	eb43 0307 	adc.w	r3, r3, r7
 8010b44:	ebb2 0c0c 	subs.w	ip, r2, ip
 8010b48:	eb61 0303 	sbc.w	r3, r1, r3
 8010b4c:	0fda      	lsrs	r2, r3, #31
 8010b4e:	eb12 020c 	adds.w	r2, r2, ip
 8010b52:	f143 0300 	adc.w	r3, r3, #0
 8010b56:	0852      	lsrs	r2, r2, #1
 8010b58:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8010b5c:	105b      	asrs	r3, r3, #1
 8010b5e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8010b62:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8010b66:	e6dd      	b.n	8010924 <read_submessage_list+0xc8>
 8010b68:	3b9aca00 	.word	0x3b9aca00

08010b6c <listen_message_reliably>:
 8010b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b70:	1e0b      	subs	r3, r1, #0
 8010b72:	b09d      	sub	sp, #116	@ 0x74
 8010b74:	bfb8      	it	lt
 8010b76:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8010b7a:	4680      	mov	r8, r0
 8010b7c:	9305      	str	r3, [sp, #20]
 8010b7e:	f001 fb87 	bl	8012290 <uxr_millis>
 8010b82:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8010b86:	4681      	mov	r9, r0
 8010b88:	2a00      	cmp	r2, #0
 8010b8a:	f000 80a1 	beq.w	8010cd0 <listen_message_reliably+0x164>
 8010b8e:	2600      	movs	r6, #0
 8010b90:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010b94:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010b98:	9303      	str	r3, [sp, #12]
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	460f      	mov	r7, r1
 8010b9e:	e00f      	b.n	8010bc0 <listen_message_reliably+0x54>
 8010ba0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010ba4:	9903      	ldr	r1, [sp, #12]
 8010ba6:	455a      	cmp	r2, fp
 8010ba8:	f106 0601 	add.w	r6, r6, #1
 8010bac:	eb73 0101 	sbcs.w	r1, r3, r1
 8010bb0:	b2f0      	uxtb	r0, r6
 8010bb2:	da01      	bge.n	8010bb8 <listen_message_reliably+0x4c>
 8010bb4:	4693      	mov	fp, r2
 8010bb6:	9303      	str	r3, [sp, #12]
 8010bb8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010bbc:	4283      	cmp	r3, r0
 8010bbe:	d960      	bls.n	8010c82 <listen_message_reliably+0x116>
 8010bc0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010bc4:	2102      	movs	r1, #2
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	f001 f9e4 	bl	8011f94 <uxr_stream_id>
 8010bcc:	00e4      	lsls	r4, r4, #3
 8010bce:	f104 0520 	add.w	r5, r4, #32
 8010bd2:	4445      	add	r5, r8
 8010bd4:	4601      	mov	r1, r0
 8010bd6:	463b      	mov	r3, r7
 8010bd8:	464a      	mov	r2, r9
 8010bda:	4628      	mov	r0, r5
 8010bdc:	9109      	str	r1, [sp, #36]	@ 0x24
 8010bde:	f007 fb5f 	bl	80182a0 <uxr_update_output_stream_heartbeat_timestamp>
 8010be2:	eb08 0304 	add.w	r3, r8, r4
 8010be6:	2800      	cmp	r0, #0
 8010be8:	d0da      	beq.n	8010ba0 <listen_message_reliably+0x34>
 8010bea:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010bee:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8010bf2:	9304      	str	r3, [sp, #16]
 8010bf4:	4640      	mov	r0, r8
 8010bf6:	f000 fd03 	bl	8011600 <uxr_session_header_offset>
 8010bfa:	3501      	adds	r5, #1
 8010bfc:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8010c00:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010c04:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8010c08:	2300      	movs	r3, #0
 8010c0a:	2211      	movs	r2, #17
 8010c0c:	9000      	str	r0, [sp, #0]
 8010c0e:	a90c      	add	r1, sp, #48	@ 0x30
 8010c10:	4650      	mov	r0, sl
 8010c12:	f7fe fffd 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 8010c16:	2300      	movs	r3, #0
 8010c18:	2205      	movs	r2, #5
 8010c1a:	210b      	movs	r1, #11
 8010c1c:	4650      	mov	r0, sl
 8010c1e:	f001 faf1 	bl	8012204 <uxr_buffer_submessage_header>
 8010c22:	8968      	ldrh	r0, [r5, #10]
 8010c24:	2101      	movs	r1, #1
 8010c26:	f007 fbfd 	bl	8018424 <uxr_seq_num_add>
 8010c2a:	892b      	ldrh	r3, [r5, #8]
 8010c2c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010c30:	4602      	mov	r2, r0
 8010c32:	9b04      	ldr	r3, [sp, #16]
 8010c34:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010c38:	a90a      	add	r1, sp, #40	@ 0x28
 8010c3a:	4650      	mov	r0, sl
 8010c3c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010c40:	f002 fbda 	bl	80133f8 <uxr_serialize_HEARTBEAT_Payload>
 8010c44:	2200      	movs	r2, #0
 8010c46:	4611      	mov	r1, r2
 8010c48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010c4a:	4640      	mov	r0, r8
 8010c4c:	f000 fc82 	bl	8011554 <uxr_stamp_session_header>
 8010c50:	4650      	mov	r0, sl
 8010c52:	f7ff f81b 	bl	800fc8c <ucdr_buffer_length>
 8010c56:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010c5a:	4602      	mov	r2, r0
 8010c5c:	a90c      	add	r1, sp, #48	@ 0x30
 8010c5e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010c62:	4444      	add	r4, r8
 8010c64:	47a8      	blx	r5
 8010c66:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010c6a:	9903      	ldr	r1, [sp, #12]
 8010c6c:	455a      	cmp	r2, fp
 8010c6e:	f106 0601 	add.w	r6, r6, #1
 8010c72:	eb73 0101 	sbcs.w	r1, r3, r1
 8010c76:	b2f0      	uxtb	r0, r6
 8010c78:	db9c      	blt.n	8010bb4 <listen_message_reliably+0x48>
 8010c7a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010c7e:	4283      	cmp	r3, r0
 8010c80:	d89e      	bhi.n	8010bc0 <listen_message_reliably+0x54>
 8010c82:	9a03      	ldr	r2, [sp, #12]
 8010c84:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	bf08      	it	eq
 8010c8c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8010c90:	d01e      	beq.n	8010cd0 <listen_message_reliably+0x164>
 8010c92:	ebab 0309 	sub.w	r3, fp, r9
 8010c96:	9905      	ldr	r1, [sp, #20]
 8010c98:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	bf08      	it	eq
 8010ca0:	2301      	moveq	r3, #1
 8010ca2:	4299      	cmp	r1, r3
 8010ca4:	bfa8      	it	ge
 8010ca6:	4619      	movge	r1, r3
 8010ca8:	6894      	ldr	r4, [r2, #8]
 8010caa:	6810      	ldr	r0, [r2, #0]
 8010cac:	4689      	mov	r9, r1
 8010cae:	460b      	mov	r3, r1
 8010cb0:	aa08      	add	r2, sp, #32
 8010cb2:	a907      	add	r1, sp, #28
 8010cb4:	47a0      	blx	r4
 8010cb6:	b968      	cbnz	r0, 8010cd4 <listen_message_reliably+0x168>
 8010cb8:	9b05      	ldr	r3, [sp, #20]
 8010cba:	eba3 0309 	sub.w	r3, r3, r9
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	9305      	str	r3, [sp, #20]
 8010cc2:	f73f af5c 	bgt.w	8010b7e <listen_message_reliably+0x12>
 8010cc6:	4604      	mov	r4, r0
 8010cc8:	4620      	mov	r0, r4
 8010cca:	b01d      	add	sp, #116	@ 0x74
 8010ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cd0:	9b05      	ldr	r3, [sp, #20]
 8010cd2:	e7e0      	b.n	8010c96 <listen_message_reliably+0x12a>
 8010cd4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010cd8:	4604      	mov	r4, r0
 8010cda:	a80c      	add	r0, sp, #48	@ 0x30
 8010cdc:	f7fe ffaa 	bl	800fc34 <ucdr_init_buffer>
 8010ce0:	2500      	movs	r5, #0
 8010ce2:	f10d 031a 	add.w	r3, sp, #26
 8010ce6:	aa06      	add	r2, sp, #24
 8010ce8:	a90c      	add	r1, sp, #48	@ 0x30
 8010cea:	4640      	mov	r0, r8
 8010cec:	f88d 5018 	strb.w	r5, [sp, #24]
 8010cf0:	f000 fc44 	bl	801157c <uxr_read_session_header>
 8010cf4:	b918      	cbnz	r0, 8010cfe <listen_message_reliably+0x192>
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	b01d      	add	sp, #116	@ 0x74
 8010cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cfe:	4629      	mov	r1, r5
 8010d00:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010d04:	f001 f970 	bl	8011fe8 <uxr_stream_id_from_raw>
 8010d08:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8010d0c:	2d01      	cmp	r5, #1
 8010d0e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010d12:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010d16:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010d1a:	d04b      	beq.n	8010db4 <listen_message_reliably+0x248>
 8010d1c:	2d02      	cmp	r5, #2
 8010d1e:	d00f      	beq.n	8010d40 <listen_message_reliably+0x1d4>
 8010d20:	2d00      	cmp	r5, #0
 8010d22:	d1e8      	bne.n	8010cf6 <listen_message_reliably+0x18a>
 8010d24:	4629      	mov	r1, r5
 8010d26:	4628      	mov	r0, r5
 8010d28:	f001 f95e 	bl	8011fe8 <uxr_stream_id_from_raw>
 8010d2c:	a90c      	add	r1, sp, #48	@ 0x30
 8010d2e:	4602      	mov	r2, r0
 8010d30:	4640      	mov	r0, r8
 8010d32:	920a      	str	r2, [sp, #40]	@ 0x28
 8010d34:	f7ff fd92 	bl	801085c <read_submessage_list>
 8010d38:	4620      	mov	r0, r4
 8010d3a:	b01d      	add	sp, #116	@ 0x74
 8010d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d40:	4631      	mov	r1, r6
 8010d42:	f108 0008 	add.w	r0, r8, #8
 8010d46:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010d4a:	f001 fa3b 	bl	80121c4 <uxr_get_input_reliable_stream>
 8010d4e:	4607      	mov	r7, r0
 8010d50:	b338      	cbz	r0, 8010da2 <listen_message_reliably+0x236>
 8010d52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d54:	9203      	str	r2, [sp, #12]
 8010d56:	a80c      	add	r0, sp, #48	@ 0x30
 8010d58:	f7fe ff9c 	bl	800fc94 <ucdr_buffer_remaining>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	f10d 0019 	add.w	r0, sp, #25
 8010d62:	9000      	str	r0, [sp, #0]
 8010d64:	9a03      	ldr	r2, [sp, #12]
 8010d66:	4651      	mov	r1, sl
 8010d68:	4638      	mov	r0, r7
 8010d6a:	f006 feaf 	bl	8017acc <uxr_receive_reliable_message>
 8010d6e:	b1c0      	cbz	r0, 8010da2 <listen_message_reliably+0x236>
 8010d70:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010d74:	b393      	cbz	r3, 8010ddc <listen_message_reliably+0x270>
 8010d76:	ad14      	add	r5, sp, #80	@ 0x50
 8010d78:	f04f 0a02 	mov.w	sl, #2
 8010d7c:	e00a      	b.n	8010d94 <listen_message_reliably+0x228>
 8010d7e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8010d82:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8010d86:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010d8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010d8c:	4629      	mov	r1, r5
 8010d8e:	4640      	mov	r0, r8
 8010d90:	f7ff fd64 	bl	801085c <read_submessage_list>
 8010d94:	2204      	movs	r2, #4
 8010d96:	4629      	mov	r1, r5
 8010d98:	4638      	mov	r0, r7
 8010d9a:	f006 ff17 	bl	8017bcc <uxr_next_input_reliable_buffer_available>
 8010d9e:	2800      	cmp	r0, #0
 8010da0:	d1ed      	bne.n	8010d7e <listen_message_reliably+0x212>
 8010da2:	4640      	mov	r0, r8
 8010da4:	4632      	mov	r2, r6
 8010da6:	4649      	mov	r1, r9
 8010da8:	f7ff fbd2 	bl	8010550 <write_submessage_acknack.isra.0>
 8010dac:	4620      	mov	r0, r4
 8010dae:	b01d      	add	sp, #116	@ 0x74
 8010db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db4:	4631      	mov	r1, r6
 8010db6:	f108 0008 	add.w	r0, r8, #8
 8010dba:	f001 f9f9 	bl	80121b0 <uxr_get_input_best_effort_stream>
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	d099      	beq.n	8010cf6 <listen_message_reliably+0x18a>
 8010dc2:	4651      	mov	r1, sl
 8010dc4:	f006 fdee 	bl	80179a4 <uxr_receive_best_effort_message>
 8010dc8:	2800      	cmp	r0, #0
 8010dca:	d094      	beq.n	8010cf6 <listen_message_reliably+0x18a>
 8010dcc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010dd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010dd2:	a90c      	add	r1, sp, #48	@ 0x30
 8010dd4:	4640      	mov	r0, r8
 8010dd6:	f7ff fd41 	bl	801085c <read_submessage_list>
 8010dda:	e78c      	b.n	8010cf6 <listen_message_reliably+0x18a>
 8010ddc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010de0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010de2:	a90c      	add	r1, sp, #48	@ 0x30
 8010de4:	4640      	mov	r0, r8
 8010de6:	f7ff fd39 	bl	801085c <read_submessage_list>
 8010dea:	e7c4      	b.n	8010d76 <listen_message_reliably+0x20a>

08010dec <uxr_run_session_timeout>:
 8010dec:	b570      	push	{r4, r5, r6, lr}
 8010dee:	4604      	mov	r4, r0
 8010df0:	460d      	mov	r5, r1
 8010df2:	f001 fa4d 	bl	8012290 <uxr_millis>
 8010df6:	4606      	mov	r6, r0
 8010df8:	4620      	mov	r0, r4
 8010dfa:	f7ff fc71 	bl	80106e0 <uxr_flash_output_streams>
 8010dfe:	4629      	mov	r1, r5
 8010e00:	4620      	mov	r0, r4
 8010e02:	f7ff feb3 	bl	8010b6c <listen_message_reliably>
 8010e06:	f001 fa43 	bl	8012290 <uxr_millis>
 8010e0a:	1b83      	subs	r3, r0, r6
 8010e0c:	1ae9      	subs	r1, r5, r3
 8010e0e:	2900      	cmp	r1, #0
 8010e10:	dcf6      	bgt.n	8010e00 <uxr_run_session_timeout+0x14>
 8010e12:	f104 0008 	add.w	r0, r4, #8
 8010e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e1a:	f001 b9dd 	b.w	80121d8 <uxr_output_streams_confirmed>
 8010e1e:	bf00      	nop

08010e20 <uxr_run_session_until_data>:
 8010e20:	b570      	push	{r4, r5, r6, lr}
 8010e22:	4604      	mov	r4, r0
 8010e24:	460d      	mov	r5, r1
 8010e26:	f001 fa33 	bl	8012290 <uxr_millis>
 8010e2a:	4606      	mov	r6, r0
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f7ff fc57 	bl	80106e0 <uxr_flash_output_streams>
 8010e32:	2300      	movs	r3, #0
 8010e34:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010e38:	4629      	mov	r1, r5
 8010e3a:	e005      	b.n	8010e48 <uxr_run_session_until_data+0x28>
 8010e3c:	f001 fa28 	bl	8012290 <uxr_millis>
 8010e40:	1b83      	subs	r3, r0, r6
 8010e42:	1ae9      	subs	r1, r5, r3
 8010e44:	2900      	cmp	r1, #0
 8010e46:	dd07      	ble.n	8010e58 <uxr_run_session_until_data+0x38>
 8010e48:	4620      	mov	r0, r4
 8010e4a:	f7ff fe8f 	bl	8010b6c <listen_message_reliably>
 8010e4e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010e52:	2800      	cmp	r0, #0
 8010e54:	d0f2      	beq.n	8010e3c <uxr_run_session_until_data+0x1c>
 8010e56:	bd70      	pop	{r4, r5, r6, pc}
 8010e58:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010e5c:	bd70      	pop	{r4, r5, r6, pc}
 8010e5e:	bf00      	nop

08010e60 <uxr_run_session_until_confirm_delivery>:
 8010e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e64:	4606      	mov	r6, r0
 8010e66:	460d      	mov	r5, r1
 8010e68:	f001 fa12 	bl	8012290 <uxr_millis>
 8010e6c:	4607      	mov	r7, r0
 8010e6e:	4630      	mov	r0, r6
 8010e70:	f7ff fc36 	bl	80106e0 <uxr_flash_output_streams>
 8010e74:	2d00      	cmp	r5, #0
 8010e76:	f106 0808 	add.w	r8, r6, #8
 8010e7a:	bfa8      	it	ge
 8010e7c:	462c      	movge	r4, r5
 8010e7e:	da07      	bge.n	8010e90 <uxr_run_session_until_confirm_delivery+0x30>
 8010e80:	e00e      	b.n	8010ea0 <uxr_run_session_until_confirm_delivery+0x40>
 8010e82:	f7ff fe73 	bl	8010b6c <listen_message_reliably>
 8010e86:	f001 fa03 	bl	8012290 <uxr_millis>
 8010e8a:	1bc3      	subs	r3, r0, r7
 8010e8c:	1aec      	subs	r4, r5, r3
 8010e8e:	d407      	bmi.n	8010ea0 <uxr_run_session_until_confirm_delivery+0x40>
 8010e90:	4640      	mov	r0, r8
 8010e92:	f001 f9a1 	bl	80121d8 <uxr_output_streams_confirmed>
 8010e96:	4603      	mov	r3, r0
 8010e98:	4621      	mov	r1, r4
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d0f0      	beq.n	8010e82 <uxr_run_session_until_confirm_delivery+0x22>
 8010ea0:	4640      	mov	r0, r8
 8010ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea6:	f001 b997 	b.w	80121d8 <uxr_output_streams_confirmed>
 8010eaa:	bf00      	nop

08010eac <uxr_run_session_until_all_status>:
 8010eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010eb0:	9c08      	ldr	r4, [sp, #32]
 8010eb2:	4606      	mov	r6, r0
 8010eb4:	460f      	mov	r7, r1
 8010eb6:	4691      	mov	r9, r2
 8010eb8:	461d      	mov	r5, r3
 8010eba:	f7ff fc11 	bl	80106e0 <uxr_flash_output_streams>
 8010ebe:	b124      	cbz	r4, 8010eca <uxr_run_session_until_all_status+0x1e>
 8010ec0:	4622      	mov	r2, r4
 8010ec2:	21ff      	movs	r1, #255	@ 0xff
 8010ec4:	4628      	mov	r0, r5
 8010ec6:	f008 fbcb 	bl	8019660 <memset>
 8010eca:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8010ece:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010ed0:	f001 f9de 	bl	8012290 <uxr_millis>
 8010ed4:	3d01      	subs	r5, #1
 8010ed6:	f1a9 0902 	sub.w	r9, r9, #2
 8010eda:	4680      	mov	r8, r0
 8010edc:	4639      	mov	r1, r7
 8010ede:	4630      	mov	r0, r6
 8010ee0:	f7ff fe44 	bl	8010b6c <listen_message_reliably>
 8010ee4:	f001 f9d4 	bl	8012290 <uxr_millis>
 8010ee8:	eba0 0008 	sub.w	r0, r0, r8
 8010eec:	1a39      	subs	r1, r7, r0
 8010eee:	b344      	cbz	r4, 8010f42 <uxr_run_session_until_all_status+0x96>
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	46ac      	mov	ip, r5
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e002      	b.n	8010efe <uxr_run_session_until_all_status+0x52>
 8010ef8:	42a3      	cmp	r3, r4
 8010efa:	d20d      	bcs.n	8010f18 <uxr_run_session_until_all_status+0x6c>
 8010efc:	3301      	adds	r3, #1
 8010efe:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8010f02:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8010f06:	d1f7      	bne.n	8010ef8 <uxr_run_session_until_all_status+0x4c>
 8010f08:	42a3      	cmp	r3, r4
 8010f0a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8010f0e:	d213      	bcs.n	8010f38 <uxr_run_session_until_all_status+0x8c>
 8010f10:	2a00      	cmp	r2, #0
 8010f12:	d0f3      	beq.n	8010efc <uxr_run_session_until_all_status+0x50>
 8010f14:	2900      	cmp	r1, #0
 8010f16:	dce2      	bgt.n	8010ede <uxr_run_session_until_all_status+0x32>
 8010f18:	2300      	movs	r3, #0
 8010f1a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8010f1c:	442c      	add	r4, r5
 8010f1e:	e001      	b.n	8010f24 <uxr_run_session_until_all_status+0x78>
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d812      	bhi.n	8010f4a <uxr_run_session_until_all_status+0x9e>
 8010f24:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010f28:	4284      	cmp	r4, r0
 8010f2a:	d1f9      	bne.n	8010f20 <uxr_run_session_until_all_status+0x74>
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	bf8c      	ite	hi
 8010f30:	2000      	movhi	r0, #0
 8010f32:	2001      	movls	r0, #1
 8010f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f38:	2900      	cmp	r1, #0
 8010f3a:	dded      	ble.n	8010f18 <uxr_run_session_until_all_status+0x6c>
 8010f3c:	2a00      	cmp	r2, #0
 8010f3e:	d1ce      	bne.n	8010ede <uxr_run_session_until_all_status+0x32>
 8010f40:	e7ea      	b.n	8010f18 <uxr_run_session_until_all_status+0x6c>
 8010f42:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010f44:	2001      	movs	r0, #1
 8010f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f4a:	2000      	movs	r0, #0
 8010f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010f50 <uxr_sync_session>:
 8010f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f52:	b093      	sub	sp, #76	@ 0x4c
 8010f54:	4604      	mov	r4, r0
 8010f56:	460d      	mov	r5, r1
 8010f58:	f000 fb52 	bl	8011600 <uxr_session_header_offset>
 8010f5c:	2214      	movs	r2, #20
 8010f5e:	eb0d 0102 	add.w	r1, sp, r2
 8010f62:	9000      	str	r0, [sp, #0]
 8010f64:	2300      	movs	r3, #0
 8010f66:	a80a      	add	r0, sp, #40	@ 0x28
 8010f68:	f7fe fe52 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	2208      	movs	r2, #8
 8010f70:	210e      	movs	r1, #14
 8010f72:	a80a      	add	r0, sp, #40	@ 0x28
 8010f74:	f001 f946 	bl	8012204 <uxr_buffer_submessage_header>
 8010f78:	f001 f9a4 	bl	80122c4 <uxr_nanos>
 8010f7c:	a31c      	add	r3, pc, #112	@ (adr r3, 8010ff0 <uxr_sync_session+0xa0>)
 8010f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f82:	460e      	mov	r6, r1
 8010f84:	4607      	mov	r7, r0
 8010f86:	f7ef fb6f 	bl	8000668 <__aeabi_ldivmod>
 8010f8a:	4631      	mov	r1, r6
 8010f8c:	9003      	str	r0, [sp, #12]
 8010f8e:	a318      	add	r3, pc, #96	@ (adr r3, 8010ff0 <uxr_sync_session+0xa0>)
 8010f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f94:	4638      	mov	r0, r7
 8010f96:	f7ef fb67 	bl	8000668 <__aeabi_ldivmod>
 8010f9a:	a903      	add	r1, sp, #12
 8010f9c:	a80a      	add	r0, sp, #40	@ 0x28
 8010f9e:	9204      	str	r2, [sp, #16]
 8010fa0:	f002 fa50 	bl	8013444 <uxr_serialize_TIMESTAMP_Payload>
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	4611      	mov	r1, r2
 8010fa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010faa:	4620      	mov	r0, r4
 8010fac:	f000 fad2 	bl	8011554 <uxr_stamp_session_header>
 8010fb0:	a80a      	add	r0, sp, #40	@ 0x28
 8010fb2:	f7fe fe6b 	bl	800fc8c <ucdr_buffer_length>
 8010fb6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010fb8:	4602      	mov	r2, r0
 8010fba:	a905      	add	r1, sp, #20
 8010fbc:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010fc0:	47b0      	blx	r6
 8010fc2:	f001 f965 	bl	8012290 <uxr_millis>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	4606      	mov	r6, r0
 8010fca:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010fce:	4629      	mov	r1, r5
 8010fd0:	e000      	b.n	8010fd4 <uxr_sync_session+0x84>
 8010fd2:	b950      	cbnz	r0, 8010fea <uxr_sync_session+0x9a>
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	f7ff fdc9 	bl	8010b6c <listen_message_reliably>
 8010fda:	f001 f959 	bl	8012290 <uxr_millis>
 8010fde:	1b83      	subs	r3, r0, r6
 8010fe0:	1ae9      	subs	r1, r5, r3
 8010fe2:	2900      	cmp	r1, #0
 8010fe4:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8010fe8:	dcf3      	bgt.n	8010fd2 <uxr_sync_session+0x82>
 8010fea:	b013      	add	sp, #76	@ 0x4c
 8010fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	3b9aca00 	.word	0x3b9aca00
 8010ff4:	00000000 	.word	0x00000000

08010ff8 <wait_session_status>:
 8010ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ffc:	4604      	mov	r4, r0
 8010ffe:	b09d      	sub	sp, #116	@ 0x74
 8011000:	20ff      	movs	r0, #255	@ 0xff
 8011002:	7160      	strb	r0, [r4, #5]
 8011004:	9303      	str	r3, [sp, #12]
 8011006:	2b00      	cmp	r3, #0
 8011008:	f000 80b6 	beq.w	8011178 <wait_session_status+0x180>
 801100c:	468a      	mov	sl, r1
 801100e:	4691      	mov	r9, r2
 8011010:	f04f 0b00 	mov.w	fp, #0
 8011014:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011016:	464a      	mov	r2, r9
 8011018:	e9d3 0500 	ldrd	r0, r5, [r3]
 801101c:	4651      	mov	r1, sl
 801101e:	47a8      	blx	r5
 8011020:	f001 f936 	bl	8012290 <uxr_millis>
 8011024:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011028:	4605      	mov	r5, r0
 801102a:	e009      	b.n	8011040 <wait_session_status+0x48>
 801102c:	f001 f930 	bl	8012290 <uxr_millis>
 8011030:	1b40      	subs	r0, r0, r5
 8011032:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011036:	2b00      	cmp	r3, #0
 8011038:	dd40      	ble.n	80110bc <wait_session_status+0xc4>
 801103a:	7960      	ldrb	r0, [r4, #5]
 801103c:	28ff      	cmp	r0, #255	@ 0xff
 801103e:	d145      	bne.n	80110cc <wait_session_status+0xd4>
 8011040:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011042:	a908      	add	r1, sp, #32
 8011044:	6896      	ldr	r6, [r2, #8]
 8011046:	6810      	ldr	r0, [r2, #0]
 8011048:	aa09      	add	r2, sp, #36	@ 0x24
 801104a:	47b0      	blx	r6
 801104c:	2800      	cmp	r0, #0
 801104e:	d0ed      	beq.n	801102c <wait_session_status+0x34>
 8011050:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011054:	a80c      	add	r0, sp, #48	@ 0x30
 8011056:	f7fe fded 	bl	800fc34 <ucdr_init_buffer>
 801105a:	2600      	movs	r6, #0
 801105c:	f10d 031e 	add.w	r3, sp, #30
 8011060:	aa07      	add	r2, sp, #28
 8011062:	a90c      	add	r1, sp, #48	@ 0x30
 8011064:	4620      	mov	r0, r4
 8011066:	f88d 601c 	strb.w	r6, [sp, #28]
 801106a:	f000 fa87 	bl	801157c <uxr_read_session_header>
 801106e:	2800      	cmp	r0, #0
 8011070:	d0dc      	beq.n	801102c <wait_session_status+0x34>
 8011072:	4631      	mov	r1, r6
 8011074:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011078:	f000 ffb6 	bl	8011fe8 <uxr_stream_id_from_raw>
 801107c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011080:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011084:	9302      	str	r3, [sp, #8]
 8011086:	2f01      	cmp	r7, #1
 8011088:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801108c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011090:	d05c      	beq.n	801114c <wait_session_status+0x154>
 8011092:	2f02      	cmp	r7, #2
 8011094:	d020      	beq.n	80110d8 <wait_session_status+0xe0>
 8011096:	2f00      	cmp	r7, #0
 8011098:	d1c8      	bne.n	801102c <wait_session_status+0x34>
 801109a:	4639      	mov	r1, r7
 801109c:	4638      	mov	r0, r7
 801109e:	f000 ffa3 	bl	8011fe8 <uxr_stream_id_from_raw>
 80110a2:	a90c      	add	r1, sp, #48	@ 0x30
 80110a4:	4602      	mov	r2, r0
 80110a6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80110a8:	4620      	mov	r0, r4
 80110aa:	f7ff fbd7 	bl	801085c <read_submessage_list>
 80110ae:	f001 f8ef 	bl	8012290 <uxr_millis>
 80110b2:	1b40      	subs	r0, r0, r5
 80110b4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	dcbe      	bgt.n	801103a <wait_session_status+0x42>
 80110bc:	9b03      	ldr	r3, [sp, #12]
 80110be:	7960      	ldrb	r0, [r4, #5]
 80110c0:	f10b 0b01 	add.w	fp, fp, #1
 80110c4:	455b      	cmp	r3, fp
 80110c6:	d001      	beq.n	80110cc <wait_session_status+0xd4>
 80110c8:	28ff      	cmp	r0, #255	@ 0xff
 80110ca:	d0a3      	beq.n	8011014 <wait_session_status+0x1c>
 80110cc:	38ff      	subs	r0, #255	@ 0xff
 80110ce:	bf18      	it	ne
 80110d0:	2001      	movne	r0, #1
 80110d2:	b01d      	add	sp, #116	@ 0x74
 80110d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110d8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80110dc:	9304      	str	r3, [sp, #16]
 80110de:	4631      	mov	r1, r6
 80110e0:	f104 0008 	add.w	r0, r4, #8
 80110e4:	f001 f86e 	bl	80121c4 <uxr_get_input_reliable_stream>
 80110e8:	4680      	mov	r8, r0
 80110ea:	b348      	cbz	r0, 8011140 <wait_session_status+0x148>
 80110ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110ee:	9205      	str	r2, [sp, #20]
 80110f0:	a80c      	add	r0, sp, #48	@ 0x30
 80110f2:	f7fe fdcf 	bl	800fc94 <ucdr_buffer_remaining>
 80110f6:	4603      	mov	r3, r0
 80110f8:	f10d 001d 	add.w	r0, sp, #29
 80110fc:	9000      	str	r0, [sp, #0]
 80110fe:	9a05      	ldr	r2, [sp, #20]
 8011100:	9902      	ldr	r1, [sp, #8]
 8011102:	4640      	mov	r0, r8
 8011104:	f006 fce2 	bl	8017acc <uxr_receive_reliable_message>
 8011108:	b1d0      	cbz	r0, 8011140 <wait_session_status+0x148>
 801110a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d03a      	beq.n	8011188 <wait_session_status+0x190>
 8011112:	9f04      	ldr	r7, [sp, #16]
 8011114:	e00a      	b.n	801112c <wait_session_status+0x134>
 8011116:	f04f 0302 	mov.w	r3, #2
 801111a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801111e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011122:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8011126:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011128:	f7ff fb98 	bl	801085c <read_submessage_list>
 801112c:	a914      	add	r1, sp, #80	@ 0x50
 801112e:	2204      	movs	r2, #4
 8011130:	4640      	mov	r0, r8
 8011132:	f006 fd4b 	bl	8017bcc <uxr_next_input_reliable_buffer_available>
 8011136:	4603      	mov	r3, r0
 8011138:	a914      	add	r1, sp, #80	@ 0x50
 801113a:	4620      	mov	r0, r4
 801113c:	2b00      	cmp	r3, #0
 801113e:	d1ea      	bne.n	8011116 <wait_session_status+0x11e>
 8011140:	9904      	ldr	r1, [sp, #16]
 8011142:	4632      	mov	r2, r6
 8011144:	4620      	mov	r0, r4
 8011146:	f7ff fa03 	bl	8010550 <write_submessage_acknack.isra.0>
 801114a:	e76f      	b.n	801102c <wait_session_status+0x34>
 801114c:	4631      	mov	r1, r6
 801114e:	f104 0008 	add.w	r0, r4, #8
 8011152:	f001 f82d 	bl	80121b0 <uxr_get_input_best_effort_stream>
 8011156:	2800      	cmp	r0, #0
 8011158:	f43f af68 	beq.w	801102c <wait_session_status+0x34>
 801115c:	9902      	ldr	r1, [sp, #8]
 801115e:	f006 fc21 	bl	80179a4 <uxr_receive_best_effort_message>
 8011162:	2800      	cmp	r0, #0
 8011164:	f43f af62 	beq.w	801102c <wait_session_status+0x34>
 8011168:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801116c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801116e:	a90c      	add	r1, sp, #48	@ 0x30
 8011170:	4620      	mov	r0, r4
 8011172:	f7ff fb73 	bl	801085c <read_submessage_list>
 8011176:	e759      	b.n	801102c <wait_session_status+0x34>
 8011178:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801117a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801117e:	47a0      	blx	r4
 8011180:	2001      	movs	r0, #1
 8011182:	b01d      	add	sp, #116	@ 0x74
 8011184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011188:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801118c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801118e:	a90c      	add	r1, sp, #48	@ 0x30
 8011190:	4620      	mov	r0, r4
 8011192:	f7ff fb63 	bl	801085c <read_submessage_list>
 8011196:	e7bc      	b.n	8011112 <wait_session_status+0x11a>

08011198 <uxr_delete_session_retries>:
 8011198:	b530      	push	{r4, r5, lr}
 801119a:	b08f      	sub	sp, #60	@ 0x3c
 801119c:	4604      	mov	r4, r0
 801119e:	460d      	mov	r5, r1
 80111a0:	f000 fa2e 	bl	8011600 <uxr_session_header_offset>
 80111a4:	2300      	movs	r3, #0
 80111a6:	2210      	movs	r2, #16
 80111a8:	9000      	str	r0, [sp, #0]
 80111aa:	a902      	add	r1, sp, #8
 80111ac:	a806      	add	r0, sp, #24
 80111ae:	f7fe fd2f 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 80111b2:	a906      	add	r1, sp, #24
 80111b4:	4620      	mov	r0, r4
 80111b6:	f000 f973 	bl	80114a0 <uxr_buffer_delete_session>
 80111ba:	2200      	movs	r2, #0
 80111bc:	4611      	mov	r1, r2
 80111be:	9b06      	ldr	r3, [sp, #24]
 80111c0:	4620      	mov	r0, r4
 80111c2:	f000 f9c7 	bl	8011554 <uxr_stamp_session_header>
 80111c6:	a806      	add	r0, sp, #24
 80111c8:	f7fe fd60 	bl	800fc8c <ucdr_buffer_length>
 80111cc:	462b      	mov	r3, r5
 80111ce:	4602      	mov	r2, r0
 80111d0:	a902      	add	r1, sp, #8
 80111d2:	4620      	mov	r0, r4
 80111d4:	f7ff ff10 	bl	8010ff8 <wait_session_status>
 80111d8:	b118      	cbz	r0, 80111e2 <uxr_delete_session_retries+0x4a>
 80111da:	7960      	ldrb	r0, [r4, #5]
 80111dc:	fab0 f080 	clz	r0, r0
 80111e0:	0940      	lsrs	r0, r0, #5
 80111e2:	b00f      	add	sp, #60	@ 0x3c
 80111e4:	bd30      	pop	{r4, r5, pc}
 80111e6:	bf00      	nop

080111e8 <uxr_create_session>:
 80111e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ec:	f100 0b08 	add.w	fp, r0, #8
 80111f0:	b0ab      	sub	sp, #172	@ 0xac
 80111f2:	4604      	mov	r4, r0
 80111f4:	4658      	mov	r0, fp
 80111f6:	f000 ff2b 	bl	8012050 <uxr_reset_stream_storage>
 80111fa:	4620      	mov	r0, r4
 80111fc:	f000 fa00 	bl	8011600 <uxr_session_header_offset>
 8011200:	2300      	movs	r3, #0
 8011202:	9000      	str	r0, [sp, #0]
 8011204:	221c      	movs	r2, #28
 8011206:	a90b      	add	r1, sp, #44	@ 0x2c
 8011208:	a812      	add	r0, sp, #72	@ 0x48
 801120a:	f7fe fd01 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 801120e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011210:	8a1a      	ldrh	r2, [r3, #16]
 8011212:	3a04      	subs	r2, #4
 8011214:	b292      	uxth	r2, r2
 8011216:	a912      	add	r1, sp, #72	@ 0x48
 8011218:	4620      	mov	r0, r4
 801121a:	f000 f917 	bl	801144c <uxr_buffer_create_session>
 801121e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011220:	4620      	mov	r0, r4
 8011222:	f000 f983 	bl	801152c <uxr_stamp_create_session_header>
 8011226:	a812      	add	r0, sp, #72	@ 0x48
 8011228:	f7fe fd30 	bl	800fc8c <ucdr_buffer_length>
 801122c:	23ff      	movs	r3, #255	@ 0xff
 801122e:	7163      	strb	r3, [r4, #5]
 8011230:	230a      	movs	r3, #10
 8011232:	46da      	mov	sl, fp
 8011234:	9303      	str	r3, [sp, #12]
 8011236:	4683      	mov	fp, r0
 8011238:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801123a:	465a      	mov	r2, fp
 801123c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011240:	a90b      	add	r1, sp, #44	@ 0x2c
 8011242:	47a8      	blx	r5
 8011244:	f001 f824 	bl	8012290 <uxr_millis>
 8011248:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801124c:	4605      	mov	r5, r0
 801124e:	e009      	b.n	8011264 <uxr_create_session+0x7c>
 8011250:	f001 f81e 	bl	8012290 <uxr_millis>
 8011254:	1b40      	subs	r0, r0, r5
 8011256:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801125a:	2b00      	cmp	r3, #0
 801125c:	7962      	ldrb	r2, [r4, #5]
 801125e:	dd38      	ble.n	80112d2 <uxr_create_session+0xea>
 8011260:	2aff      	cmp	r2, #255	@ 0xff
 8011262:	d13c      	bne.n	80112de <uxr_create_session+0xf6>
 8011264:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011266:	a907      	add	r1, sp, #28
 8011268:	6896      	ldr	r6, [r2, #8]
 801126a:	6810      	ldr	r0, [r2, #0]
 801126c:	aa08      	add	r2, sp, #32
 801126e:	47b0      	blx	r6
 8011270:	2800      	cmp	r0, #0
 8011272:	d0ed      	beq.n	8011250 <uxr_create_session+0x68>
 8011274:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011278:	a81a      	add	r0, sp, #104	@ 0x68
 801127a:	f7fe fcdb 	bl	800fc34 <ucdr_init_buffer>
 801127e:	2600      	movs	r6, #0
 8011280:	f10d 031a 	add.w	r3, sp, #26
 8011284:	aa06      	add	r2, sp, #24
 8011286:	a91a      	add	r1, sp, #104	@ 0x68
 8011288:	4620      	mov	r0, r4
 801128a:	f88d 6018 	strb.w	r6, [sp, #24]
 801128e:	f000 f975 	bl	801157c <uxr_read_session_header>
 8011292:	2800      	cmp	r0, #0
 8011294:	d0dc      	beq.n	8011250 <uxr_create_session+0x68>
 8011296:	4631      	mov	r1, r6
 8011298:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801129c:	f000 fea4 	bl	8011fe8 <uxr_stream_id_from_raw>
 80112a0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80112a4:	2e01      	cmp	r6, #1
 80112a6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80112aa:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80112ae:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80112b2:	d053      	beq.n	801135c <uxr_create_session+0x174>
 80112b4:	2e02      	cmp	r6, #2
 80112b6:	d018      	beq.n	80112ea <uxr_create_session+0x102>
 80112b8:	2e00      	cmp	r6, #0
 80112ba:	d1c9      	bne.n	8011250 <uxr_create_session+0x68>
 80112bc:	4631      	mov	r1, r6
 80112be:	4630      	mov	r0, r6
 80112c0:	f000 fe92 	bl	8011fe8 <uxr_stream_id_from_raw>
 80112c4:	a91a      	add	r1, sp, #104	@ 0x68
 80112c6:	4602      	mov	r2, r0
 80112c8:	900a      	str	r0, [sp, #40]	@ 0x28
 80112ca:	4620      	mov	r0, r4
 80112cc:	f7ff fac6 	bl	801085c <read_submessage_list>
 80112d0:	e7be      	b.n	8011250 <uxr_create_session+0x68>
 80112d2:	9b03      	ldr	r3, [sp, #12]
 80112d4:	3b01      	subs	r3, #1
 80112d6:	9303      	str	r3, [sp, #12]
 80112d8:	d001      	beq.n	80112de <uxr_create_session+0xf6>
 80112da:	2aff      	cmp	r2, #255	@ 0xff
 80112dc:	d0ac      	beq.n	8011238 <uxr_create_session+0x50>
 80112de:	2a00      	cmp	r2, #0
 80112e0:	d051      	beq.n	8011386 <uxr_create_session+0x19e>
 80112e2:	2000      	movs	r0, #0
 80112e4:	b02b      	add	sp, #172	@ 0xac
 80112e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ea:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80112ee:	9304      	str	r3, [sp, #16]
 80112f0:	4639      	mov	r1, r7
 80112f2:	4650      	mov	r0, sl
 80112f4:	f000 ff66 	bl	80121c4 <uxr_get_input_reliable_stream>
 80112f8:	4680      	mov	r8, r0
 80112fa:	b348      	cbz	r0, 8011350 <uxr_create_session+0x168>
 80112fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80112fe:	9205      	str	r2, [sp, #20]
 8011300:	a81a      	add	r0, sp, #104	@ 0x68
 8011302:	f7fe fcc7 	bl	800fc94 <ucdr_buffer_remaining>
 8011306:	4603      	mov	r3, r0
 8011308:	f10d 0019 	add.w	r0, sp, #25
 801130c:	9000      	str	r0, [sp, #0]
 801130e:	9a05      	ldr	r2, [sp, #20]
 8011310:	4649      	mov	r1, r9
 8011312:	4640      	mov	r0, r8
 8011314:	f006 fbda 	bl	8017acc <uxr_receive_reliable_message>
 8011318:	b1d0      	cbz	r0, 8011350 <uxr_create_session+0x168>
 801131a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d038      	beq.n	8011394 <uxr_create_session+0x1ac>
 8011322:	9e04      	ldr	r6, [sp, #16]
 8011324:	e00a      	b.n	801133c <uxr_create_session+0x154>
 8011326:	f04f 0302 	mov.w	r3, #2
 801132a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 801132e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8011332:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011336:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011338:	f7ff fa90 	bl	801085c <read_submessage_list>
 801133c:	a922      	add	r1, sp, #136	@ 0x88
 801133e:	2204      	movs	r2, #4
 8011340:	4640      	mov	r0, r8
 8011342:	f006 fc43 	bl	8017bcc <uxr_next_input_reliable_buffer_available>
 8011346:	4603      	mov	r3, r0
 8011348:	a922      	add	r1, sp, #136	@ 0x88
 801134a:	4620      	mov	r0, r4
 801134c:	2b00      	cmp	r3, #0
 801134e:	d1ea      	bne.n	8011326 <uxr_create_session+0x13e>
 8011350:	9904      	ldr	r1, [sp, #16]
 8011352:	463a      	mov	r2, r7
 8011354:	4620      	mov	r0, r4
 8011356:	f7ff f8fb 	bl	8010550 <write_submessage_acknack.isra.0>
 801135a:	e779      	b.n	8011250 <uxr_create_session+0x68>
 801135c:	4639      	mov	r1, r7
 801135e:	4650      	mov	r0, sl
 8011360:	f000 ff26 	bl	80121b0 <uxr_get_input_best_effort_stream>
 8011364:	2800      	cmp	r0, #0
 8011366:	f43f af73 	beq.w	8011250 <uxr_create_session+0x68>
 801136a:	4649      	mov	r1, r9
 801136c:	f006 fb1a 	bl	80179a4 <uxr_receive_best_effort_message>
 8011370:	2800      	cmp	r0, #0
 8011372:	f43f af6d 	beq.w	8011250 <uxr_create_session+0x68>
 8011376:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801137a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801137c:	a91a      	add	r1, sp, #104	@ 0x68
 801137e:	4620      	mov	r0, r4
 8011380:	f7ff fa6c 	bl	801085c <read_submessage_list>
 8011384:	e764      	b.n	8011250 <uxr_create_session+0x68>
 8011386:	4650      	mov	r0, sl
 8011388:	f000 fe62 	bl	8012050 <uxr_reset_stream_storage>
 801138c:	2001      	movs	r0, #1
 801138e:	b02b      	add	sp, #172	@ 0xac
 8011390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011394:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011398:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801139a:	a91a      	add	r1, sp, #104	@ 0x68
 801139c:	4620      	mov	r0, r4
 801139e:	f7ff fa5d 	bl	801085c <read_submessage_list>
 80113a2:	e7be      	b.n	8011322 <uxr_create_session+0x13a>

080113a4 <uxr_prepare_stream_to_write_submessage>:
 80113a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113a8:	b082      	sub	sp, #8
 80113aa:	4682      	mov	sl, r0
 80113ac:	4610      	mov	r0, r2
 80113ae:	4615      	mov	r5, r2
 80113b0:	461e      	mov	r6, r3
 80113b2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80113b6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80113ba:	9101      	str	r1, [sp, #4]
 80113bc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80113c0:	f000 ff60 	bl	8012284 <uxr_submessage_padding>
 80113c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80113c8:	f105 0904 	add.w	r9, r5, #4
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	4481      	add	r9, r0
 80113d0:	d01d      	beq.n	801140e <uxr_prepare_stream_to_write_submessage+0x6a>
 80113d2:	2b02      	cmp	r3, #2
 80113d4:	d116      	bne.n	8011404 <uxr_prepare_stream_to_write_submessage+0x60>
 80113d6:	4621      	mov	r1, r4
 80113d8:	f10a 0008 	add.w	r0, sl, #8
 80113dc:	f000 fede 	bl	801219c <uxr_get_output_reliable_stream>
 80113e0:	4604      	mov	r4, r0
 80113e2:	b158      	cbz	r0, 80113fc <uxr_prepare_stream_to_write_submessage+0x58>
 80113e4:	4649      	mov	r1, r9
 80113e6:	4632      	mov	r2, r6
 80113e8:	f006 fdac 	bl	8017f44 <uxr_prepare_reliable_buffer_to_write>
 80113ec:	4604      	mov	r4, r0
 80113ee:	b12c      	cbz	r4, 80113fc <uxr_prepare_stream_to_write_submessage+0x58>
 80113f0:	4643      	mov	r3, r8
 80113f2:	b2aa      	uxth	r2, r5
 80113f4:	4639      	mov	r1, r7
 80113f6:	4630      	mov	r0, r6
 80113f8:	f000 ff04 	bl	8012204 <uxr_buffer_submessage_header>
 80113fc:	4620      	mov	r0, r4
 80113fe:	b002      	add	sp, #8
 8011400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011404:	2400      	movs	r4, #0
 8011406:	4620      	mov	r0, r4
 8011408:	b002      	add	sp, #8
 801140a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801140e:	4621      	mov	r1, r4
 8011410:	f10a 0008 	add.w	r0, sl, #8
 8011414:	f000 feba 	bl	801218c <uxr_get_output_best_effort_stream>
 8011418:	4604      	mov	r4, r0
 801141a:	2800      	cmp	r0, #0
 801141c:	d0ee      	beq.n	80113fc <uxr_prepare_stream_to_write_submessage+0x58>
 801141e:	4649      	mov	r1, r9
 8011420:	4632      	mov	r2, r6
 8011422:	f006 fcbf 	bl	8017da4 <uxr_prepare_best_effort_buffer_to_write>
 8011426:	4604      	mov	r4, r0
 8011428:	e7e1      	b.n	80113ee <uxr_prepare_stream_to_write_submessage+0x4a>
 801142a:	bf00      	nop

0801142c <uxr_init_session_info>:
 801142c:	0e13      	lsrs	r3, r2, #24
 801142e:	7043      	strb	r3, [r0, #1]
 8011430:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011434:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011438:	7001      	strb	r1, [r0, #0]
 801143a:	70c3      	strb	r3, [r0, #3]
 801143c:	2109      	movs	r1, #9
 801143e:	23ff      	movs	r3, #255	@ 0xff
 8011440:	f880 c002 	strb.w	ip, [r0, #2]
 8011444:	7102      	strb	r2, [r0, #4]
 8011446:	80c1      	strh	r1, [r0, #6]
 8011448:	7143      	strb	r3, [r0, #5]
 801144a:	4770      	bx	lr

0801144c <uxr_buffer_create_session>:
 801144c:	b530      	push	{r4, r5, lr}
 801144e:	b089      	sub	sp, #36	@ 0x24
 8011450:	2300      	movs	r3, #0
 8011452:	4d12      	ldr	r5, [pc, #72]	@ (801149c <uxr_buffer_create_session+0x50>)
 8011454:	9307      	str	r3, [sp, #28]
 8011456:	f8ad 201c 	strh.w	r2, [sp, #28]
 801145a:	2201      	movs	r2, #1
 801145c:	9301      	str	r3, [sp, #4]
 801145e:	80c2      	strh	r2, [r0, #6]
 8011460:	f88d 2004 	strb.w	r2, [sp, #4]
 8011464:	682a      	ldr	r2, [r5, #0]
 8011466:	9200      	str	r2, [sp, #0]
 8011468:	88aa      	ldrh	r2, [r5, #4]
 801146a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801146e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011472:	9202      	str	r2, [sp, #8]
 8011474:	460c      	mov	r4, r1
 8011476:	7802      	ldrb	r2, [r0, #0]
 8011478:	9303      	str	r3, [sp, #12]
 801147a:	4619      	mov	r1, r3
 801147c:	f88d 200c 	strb.w	r2, [sp, #12]
 8011480:	4620      	mov	r0, r4
 8011482:	2210      	movs	r2, #16
 8011484:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011488:	9306      	str	r3, [sp, #24]
 801148a:	f000 febb 	bl	8012204 <uxr_buffer_submessage_header>
 801148e:	4669      	mov	r1, sp
 8011490:	4620      	mov	r0, r4
 8011492:	f001 fe13 	bl	80130bc <uxr_serialize_CREATE_CLIENT_Payload>
 8011496:	b009      	add	sp, #36	@ 0x24
 8011498:	bd30      	pop	{r4, r5, pc}
 801149a:	bf00      	nop
 801149c:	0801a4f8 	.word	0x0801a4f8

080114a0 <uxr_buffer_delete_session>:
 80114a0:	b510      	push	{r4, lr}
 80114a2:	4b0c      	ldr	r3, [pc, #48]	@ (80114d4 <uxr_buffer_delete_session+0x34>)
 80114a4:	b082      	sub	sp, #8
 80114a6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80114aa:	f8ad c006 	strh.w	ip, [sp, #6]
 80114ae:	460c      	mov	r4, r1
 80114b0:	2202      	movs	r2, #2
 80114b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80114b6:	80c2      	strh	r2, [r0, #6]
 80114b8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80114bc:	2204      	movs	r2, #4
 80114be:	2300      	movs	r3, #0
 80114c0:	2103      	movs	r1, #3
 80114c2:	4620      	mov	r0, r4
 80114c4:	f000 fe9e 	bl	8012204 <uxr_buffer_submessage_header>
 80114c8:	a901      	add	r1, sp, #4
 80114ca:	4620      	mov	r0, r4
 80114cc:	f001 fe9c 	bl	8013208 <uxr_serialize_DELETE_Payload>
 80114d0:	b002      	add	sp, #8
 80114d2:	bd10      	pop	{r4, pc}
 80114d4:	0801a4f8 	.word	0x0801a4f8

080114d8 <uxr_read_create_session_status>:
 80114d8:	b510      	push	{r4, lr}
 80114da:	b088      	sub	sp, #32
 80114dc:	4604      	mov	r4, r0
 80114de:	4608      	mov	r0, r1
 80114e0:	a901      	add	r1, sp, #4
 80114e2:	f001 fea1 	bl	8013228 <uxr_deserialize_STATUS_AGENT_Payload>
 80114e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80114ea:	7163      	strb	r3, [r4, #5]
 80114ec:	b008      	add	sp, #32
 80114ee:	bd10      	pop	{r4, pc}

080114f0 <uxr_read_delete_session_status>:
 80114f0:	b510      	push	{r4, lr}
 80114f2:	4604      	mov	r4, r0
 80114f4:	b084      	sub	sp, #16
 80114f6:	4608      	mov	r0, r1
 80114f8:	a902      	add	r1, sp, #8
 80114fa:	f001 fec5 	bl	8013288 <uxr_deserialize_STATUS_Payload>
 80114fe:	88e3      	ldrh	r3, [r4, #6]
 8011500:	2b02      	cmp	r3, #2
 8011502:	d001      	beq.n	8011508 <uxr_read_delete_session_status+0x18>
 8011504:	b004      	add	sp, #16
 8011506:	bd10      	pop	{r4, pc}
 8011508:	f10d 000a 	add.w	r0, sp, #10
 801150c:	f7fe feb0 	bl	8010270 <uxr_object_id_from_raw>
 8011510:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011514:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011518:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801151c:	b29b      	uxth	r3, r3
 801151e:	2b02      	cmp	r3, #2
 8011520:	bf04      	itt	eq
 8011522:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011526:	7163      	strbeq	r3, [r4, #5]
 8011528:	b004      	add	sp, #16
 801152a:	bd10      	pop	{r4, pc}

0801152c <uxr_stamp_create_session_header>:
 801152c:	b510      	push	{r4, lr}
 801152e:	2208      	movs	r2, #8
 8011530:	b08a      	sub	sp, #40	@ 0x28
 8011532:	4604      	mov	r4, r0
 8011534:	eb0d 0002 	add.w	r0, sp, r2
 8011538:	f7fe fb7c 	bl	800fc34 <ucdr_init_buffer>
 801153c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011540:	9400      	str	r4, [sp, #0]
 8011542:	2300      	movs	r3, #0
 8011544:	461a      	mov	r2, r3
 8011546:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801154a:	a802      	add	r0, sp, #8
 801154c:	f001 f854 	bl	80125f8 <uxr_serialize_message_header>
 8011550:	b00a      	add	sp, #40	@ 0x28
 8011552:	bd10      	pop	{r4, pc}

08011554 <uxr_stamp_session_header>:
 8011554:	b530      	push	{r4, r5, lr}
 8011556:	b08d      	sub	sp, #52	@ 0x34
 8011558:	4604      	mov	r4, r0
 801155a:	460d      	mov	r5, r1
 801155c:	9203      	str	r2, [sp, #12]
 801155e:	4619      	mov	r1, r3
 8011560:	a804      	add	r0, sp, #16
 8011562:	2208      	movs	r2, #8
 8011564:	f7fe fb66 	bl	800fc34 <ucdr_init_buffer>
 8011568:	f814 1b01 	ldrb.w	r1, [r4], #1
 801156c:	9b03      	ldr	r3, [sp, #12]
 801156e:	9400      	str	r4, [sp, #0]
 8011570:	462a      	mov	r2, r5
 8011572:	a804      	add	r0, sp, #16
 8011574:	f001 f840 	bl	80125f8 <uxr_serialize_message_header>
 8011578:	b00d      	add	sp, #52	@ 0x34
 801157a:	bd30      	pop	{r4, r5, pc}

0801157c <uxr_read_session_header>:
 801157c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011580:	4607      	mov	r7, r0
 8011582:	b084      	sub	sp, #16
 8011584:	4608      	mov	r0, r1
 8011586:	460c      	mov	r4, r1
 8011588:	4615      	mov	r5, r2
 801158a:	461e      	mov	r6, r3
 801158c:	f7fe fb82 	bl	800fc94 <ucdr_buffer_remaining>
 8011590:	2808      	cmp	r0, #8
 8011592:	d803      	bhi.n	801159c <uxr_read_session_header+0x20>
 8011594:	2000      	movs	r0, #0
 8011596:	b004      	add	sp, #16
 8011598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801159c:	f10d 080c 	add.w	r8, sp, #12
 80115a0:	4633      	mov	r3, r6
 80115a2:	462a      	mov	r2, r5
 80115a4:	f8cd 8000 	str.w	r8, [sp]
 80115a8:	4620      	mov	r0, r4
 80115aa:	f10d 010b 	add.w	r1, sp, #11
 80115ae:	f001 f841 	bl	8012634 <uxr_deserialize_message_header>
 80115b2:	783a      	ldrb	r2, [r7, #0]
 80115b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80115b8:	4293      	cmp	r3, r2
 80115ba:	d1eb      	bne.n	8011594 <uxr_read_session_header+0x18>
 80115bc:	061b      	lsls	r3, r3, #24
 80115be:	d41c      	bmi.n	80115fa <uxr_read_session_header+0x7e>
 80115c0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80115c4:	787b      	ldrb	r3, [r7, #1]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d003      	beq.n	80115d2 <uxr_read_session_header+0x56>
 80115ca:	2001      	movs	r0, #1
 80115cc:	f080 0001 	eor.w	r0, r0, #1
 80115d0:	e7e1      	b.n	8011596 <uxr_read_session_header+0x1a>
 80115d2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80115d6:	78bb      	ldrb	r3, [r7, #2]
 80115d8:	429a      	cmp	r2, r3
 80115da:	f107 0102 	add.w	r1, r7, #2
 80115de:	d1f4      	bne.n	80115ca <uxr_read_session_header+0x4e>
 80115e0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80115e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d1ee      	bne.n	80115ca <uxr_read_session_header+0x4e>
 80115ec:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80115f0:	784b      	ldrb	r3, [r1, #1]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d1e9      	bne.n	80115ca <uxr_read_session_header+0x4e>
 80115f6:	2000      	movs	r0, #0
 80115f8:	e7e8      	b.n	80115cc <uxr_read_session_header+0x50>
 80115fa:	2001      	movs	r0, #1
 80115fc:	e7cb      	b.n	8011596 <uxr_read_session_header+0x1a>
 80115fe:	bf00      	nop

08011600 <uxr_session_header_offset>:
 8011600:	f990 3000 	ldrsb.w	r3, [r0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	bfac      	ite	ge
 8011608:	2008      	movge	r0, #8
 801160a:	2004      	movlt	r0, #4
 801160c:	4770      	bx	lr
 801160e:	bf00      	nop

08011610 <uxr_init_base_object_request>:
 8011610:	b510      	push	{r4, lr}
 8011612:	88c3      	ldrh	r3, [r0, #6]
 8011614:	b082      	sub	sp, #8
 8011616:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801161a:	9101      	str	r1, [sp, #4]
 801161c:	f1a3 010a 	sub.w	r1, r3, #10
 8011620:	b289      	uxth	r1, r1
 8011622:	42a1      	cmp	r1, r4
 8011624:	d80e      	bhi.n	8011644 <uxr_init_base_object_request+0x34>
 8011626:	3301      	adds	r3, #1
 8011628:	b29c      	uxth	r4, r3
 801162a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801162e:	b2db      	uxtb	r3, r3
 8011630:	80c4      	strh	r4, [r0, #6]
 8011632:	9801      	ldr	r0, [sp, #4]
 8011634:	7011      	strb	r1, [r2, #0]
 8011636:	7053      	strb	r3, [r2, #1]
 8011638:	1c91      	adds	r1, r2, #2
 801163a:	f7fe fe2d 	bl	8010298 <uxr_object_id_to_raw>
 801163e:	4620      	mov	r0, r4
 8011640:	b002      	add	sp, #8
 8011642:	bd10      	pop	{r4, pc}
 8011644:	230a      	movs	r3, #10
 8011646:	2100      	movs	r1, #0
 8011648:	461c      	mov	r4, r3
 801164a:	e7f1      	b.n	8011630 <uxr_init_base_object_request+0x20>

0801164c <uxr_parse_base_object_request>:
 801164c:	b570      	push	{r4, r5, r6, lr}
 801164e:	4604      	mov	r4, r0
 8011650:	3002      	adds	r0, #2
 8011652:	460d      	mov	r5, r1
 8011654:	4616      	mov	r6, r2
 8011656:	f7fe fe0b 	bl	8010270 <uxr_object_id_from_raw>
 801165a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801165e:	8028      	strh	r0, [r5, #0]
 8011660:	806b      	strh	r3, [r5, #2]
 8011662:	7822      	ldrb	r2, [r4, #0]
 8011664:	7863      	ldrb	r3, [r4, #1]
 8011666:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801166a:	8033      	strh	r3, [r6, #0]
 801166c:	bd70      	pop	{r4, r5, r6, pc}
 801166e:	bf00      	nop

08011670 <uxr_init_framing_io>:
 8011670:	2300      	movs	r3, #0
 8011672:	7041      	strb	r1, [r0, #1]
 8011674:	7003      	strb	r3, [r0, #0]
 8011676:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011678:	4770      	bx	lr
 801167a:	bf00      	nop

0801167c <uxr_write_framed_msg>:
 801167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011680:	4617      	mov	r7, r2
 8011682:	7842      	ldrb	r2, [r0, #1]
 8011684:	b083      	sub	sp, #12
 8011686:	460e      	mov	r6, r1
 8011688:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801168c:	469a      	mov	sl, r3
 801168e:	2901      	cmp	r1, #1
 8011690:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8011694:	4604      	mov	r4, r0
 8011696:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801169a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801169e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80116a2:	f240 8137 	bls.w	8011914 <uxr_write_framed_msg+0x298>
 80116a6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80116aa:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80116ae:	2901      	cmp	r1, #1
 80116b0:	f04f 0202 	mov.w	r2, #2
 80116b4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116b8:	f240 808f 	bls.w	80117da <uxr_write_framed_msg+0x15e>
 80116bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116be:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80116c2:	b2dd      	uxtb	r5, r3
 80116c4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80116c8:	2203      	movs	r2, #3
 80116ca:	2901      	cmp	r1, #1
 80116cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116d0:	f240 809a 	bls.w	8011808 <uxr_write_framed_msg+0x18c>
 80116d4:	18a1      	adds	r1, r4, r2
 80116d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116d8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80116dc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80116e0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80116e4:	3201      	adds	r2, #1
 80116e6:	2801      	cmp	r0, #1
 80116e8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116ec:	f240 80a0 	bls.w	8011830 <uxr_write_framed_msg+0x1b4>
 80116f0:	18a0      	adds	r0, r4, r2
 80116f2:	3201      	adds	r2, #1
 80116f4:	b2d2      	uxtb	r2, r2
 80116f6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80116fa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116fe:	2b00      	cmp	r3, #0
 8011700:	f000 80a9 	beq.w	8011856 <uxr_write_framed_msg+0x1da>
 8011704:	f04f 0900 	mov.w	r9, #0
 8011708:	46c8      	mov	r8, r9
 801170a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801170e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011712:	2901      	cmp	r1, #1
 8011714:	f240 80c3 	bls.w	801189e <uxr_write_framed_msg+0x222>
 8011718:	2a29      	cmp	r2, #41	@ 0x29
 801171a:	f200 809f 	bhi.w	801185c <uxr_write_framed_msg+0x1e0>
 801171e:	18a1      	adds	r1, r4, r2
 8011720:	3201      	adds	r2, #1
 8011722:	b2d2      	uxtb	r2, r2
 8011724:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011728:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801172c:	ea89 0303 	eor.w	r3, r9, r3
 8011730:	498c      	ldr	r1, [pc, #560]	@ (8011964 <uxr_write_framed_msg+0x2e8>)
 8011732:	b2db      	uxtb	r3, r3
 8011734:	f108 0801 	add.w	r8, r8, #1
 8011738:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801173c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011742:	4543      	cmp	r3, r8
 8011744:	d8e1      	bhi.n	801170a <uxr_write_framed_msg+0x8e>
 8011746:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801174a:	fa5f f889 	uxtb.w	r8, r9
 801174e:	9301      	str	r3, [sp, #4]
 8011750:	f04f 0900 	mov.w	r9, #0
 8011754:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8011758:	fa5f f18a 	uxtb.w	r1, sl
 801175c:	2901      	cmp	r1, #1
 801175e:	d921      	bls.n	80117a4 <uxr_write_framed_msg+0x128>
 8011760:	2a29      	cmp	r2, #41	@ 0x29
 8011762:	f240 80af 	bls.w	80118c4 <uxr_write_framed_msg+0x248>
 8011766:	2500      	movs	r5, #0
 8011768:	e000      	b.n	801176c <uxr_write_framed_msg+0xf0>
 801176a:	b160      	cbz	r0, 8011786 <uxr_write_framed_msg+0x10a>
 801176c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011770:	1b52      	subs	r2, r2, r5
 8011772:	465b      	mov	r3, fp
 8011774:	4421      	add	r1, r4
 8011776:	4638      	mov	r0, r7
 8011778:	47b0      	blx	r6
 801177a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801177e:	4405      	add	r5, r0
 8011780:	4295      	cmp	r5, r2
 8011782:	d3f2      	bcc.n	801176a <uxr_write_framed_msg+0xee>
 8011784:	d003      	beq.n	801178e <uxr_write_framed_msg+0x112>
 8011786:	2000      	movs	r0, #0
 8011788:	b003      	add	sp, #12
 801178a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801178e:	fa5f f18a 	uxtb.w	r1, sl
 8011792:	f04f 0300 	mov.w	r3, #0
 8011796:	2901      	cmp	r1, #1
 8011798:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801179c:	f04f 0200 	mov.w	r2, #0
 80117a0:	f200 8090 	bhi.w	80118c4 <uxr_write_framed_msg+0x248>
 80117a4:	1c51      	adds	r1, r2, #1
 80117a6:	b2c9      	uxtb	r1, r1
 80117a8:	2929      	cmp	r1, #41	@ 0x29
 80117aa:	d8dc      	bhi.n	8011766 <uxr_write_framed_msg+0xea>
 80117ac:	18a5      	adds	r5, r4, r2
 80117ae:	4421      	add	r1, r4
 80117b0:	3202      	adds	r2, #2
 80117b2:	f088 0820 	eor.w	r8, r8, #32
 80117b6:	4648      	mov	r0, r9
 80117b8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80117bc:	b2d2      	uxtb	r2, r2
 80117be:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80117c2:	f04f 0901 	mov.w	r9, #1
 80117c6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80117ca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80117ce:	2800      	cmp	r0, #0
 80117d0:	f040 8085 	bne.w	80118de <uxr_write_framed_msg+0x262>
 80117d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80117d8:	e7bc      	b.n	8011754 <uxr_write_framed_msg+0xd8>
 80117da:	4611      	mov	r1, r2
 80117dc:	f04f 0c03 	mov.w	ip, #3
 80117e0:	2204      	movs	r2, #4
 80117e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80117e4:	4421      	add	r1, r4
 80117e6:	b2dd      	uxtb	r5, r3
 80117e8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80117ec:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80117f0:	44a4      	add	ip, r4
 80117f2:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80117f6:	f080 0020 	eor.w	r0, r0, #32
 80117fa:	2901      	cmp	r1, #1
 80117fc:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8011800:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011804:	f63f af66 	bhi.w	80116d4 <uxr_write_framed_msg+0x58>
 8011808:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801180a:	18a0      	adds	r0, r4, r2
 801180c:	f085 0520 	eor.w	r5, r5, #32
 8011810:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011814:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011818:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801181c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8011820:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011824:	3202      	adds	r2, #2
 8011826:	2801      	cmp	r0, #1
 8011828:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801182c:	f63f af60 	bhi.w	80116f0 <uxr_write_framed_msg+0x74>
 8011830:	1c50      	adds	r0, r2, #1
 8011832:	18a5      	adds	r5, r4, r2
 8011834:	fa54 f080 	uxtab	r0, r4, r0
 8011838:	3202      	adds	r2, #2
 801183a:	f081 0120 	eor.w	r1, r1, #32
 801183e:	b2d2      	uxtb	r2, r2
 8011840:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011844:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8011848:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801184c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011850:	2b00      	cmp	r3, #0
 8011852:	f47f af57 	bne.w	8011704 <uxr_write_framed_msg+0x88>
 8011856:	9301      	str	r3, [sp, #4]
 8011858:	4698      	mov	r8, r3
 801185a:	e779      	b.n	8011750 <uxr_write_framed_msg+0xd4>
 801185c:	2500      	movs	r5, #0
 801185e:	e001      	b.n	8011864 <uxr_write_framed_msg+0x1e8>
 8011860:	2800      	cmp	r0, #0
 8011862:	d090      	beq.n	8011786 <uxr_write_framed_msg+0x10a>
 8011864:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011868:	1b52      	subs	r2, r2, r5
 801186a:	465b      	mov	r3, fp
 801186c:	4421      	add	r1, r4
 801186e:	4638      	mov	r0, r7
 8011870:	47b0      	blx	r6
 8011872:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011876:	4405      	add	r5, r0
 8011878:	4295      	cmp	r5, r2
 801187a:	d3f1      	bcc.n	8011860 <uxr_write_framed_msg+0x1e4>
 801187c:	d183      	bne.n	8011786 <uxr_write_framed_msg+0x10a>
 801187e:	f04f 0300 	mov.w	r3, #0
 8011882:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011886:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011888:	4543      	cmp	r3, r8
 801188a:	d964      	bls.n	8011956 <uxr_write_framed_msg+0x2da>
 801188c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011890:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011894:	2901      	cmp	r1, #1
 8011896:	f04f 0200 	mov.w	r2, #0
 801189a:	f63f af3d 	bhi.w	8011718 <uxr_write_framed_msg+0x9c>
 801189e:	1c51      	adds	r1, r2, #1
 80118a0:	b2c9      	uxtb	r1, r1
 80118a2:	2929      	cmp	r1, #41	@ 0x29
 80118a4:	d8da      	bhi.n	801185c <uxr_write_framed_msg+0x1e0>
 80118a6:	18a0      	adds	r0, r4, r2
 80118a8:	4421      	add	r1, r4
 80118aa:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80118ae:	3202      	adds	r2, #2
 80118b0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80118b4:	b2d2      	uxtb	r2, r2
 80118b6:	f083 0020 	eor.w	r0, r3, #32
 80118ba:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80118be:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80118c2:	e733      	b.n	801172c <uxr_write_framed_msg+0xb0>
 80118c4:	18a1      	adds	r1, r4, r2
 80118c6:	3201      	adds	r2, #1
 80118c8:	4648      	mov	r0, r9
 80118ca:	b2d2      	uxtb	r2, r2
 80118cc:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80118d0:	f04f 0901 	mov.w	r9, #1
 80118d4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80118d8:	2800      	cmp	r0, #0
 80118da:	f43f af7b 	beq.w	80117d4 <uxr_write_framed_msg+0x158>
 80118de:	2500      	movs	r5, #0
 80118e0:	e002      	b.n	80118e8 <uxr_write_framed_msg+0x26c>
 80118e2:	2800      	cmp	r0, #0
 80118e4:	f43f af4f 	beq.w	8011786 <uxr_write_framed_msg+0x10a>
 80118e8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80118ec:	1b52      	subs	r2, r2, r5
 80118ee:	465b      	mov	r3, fp
 80118f0:	4421      	add	r1, r4
 80118f2:	4638      	mov	r0, r7
 80118f4:	47b0      	blx	r6
 80118f6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80118fa:	4405      	add	r5, r0
 80118fc:	4295      	cmp	r5, r2
 80118fe:	d3f0      	bcc.n	80118e2 <uxr_write_framed_msg+0x266>
 8011900:	f47f af41 	bne.w	8011786 <uxr_write_framed_msg+0x10a>
 8011904:	2300      	movs	r3, #0
 8011906:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801190a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801190c:	b298      	uxth	r0, r3
 801190e:	b003      	add	sp, #12
 8011910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011914:	217d      	movs	r1, #125	@ 0x7d
 8011916:	f082 0220 	eor.w	r2, r2, #32
 801191a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801191e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011922:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8011926:	2901      	cmp	r1, #1
 8011928:	f04f 0203 	mov.w	r2, #3
 801192c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011930:	d804      	bhi.n	801193c <uxr_write_framed_msg+0x2c0>
 8011932:	4611      	mov	r1, r2
 8011934:	f04f 0c04 	mov.w	ip, #4
 8011938:	2205      	movs	r2, #5
 801193a:	e752      	b.n	80117e2 <uxr_write_framed_msg+0x166>
 801193c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801193e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8011942:	b2dd      	uxtb	r5, r3
 8011944:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011948:	2204      	movs	r2, #4
 801194a:	2901      	cmp	r1, #1
 801194c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011950:	f63f aec0 	bhi.w	80116d4 <uxr_write_framed_msg+0x58>
 8011954:	e758      	b.n	8011808 <uxr_write_framed_msg+0x18c>
 8011956:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801195a:	fa5f f889 	uxtb.w	r8, r9
 801195e:	9301      	str	r3, [sp, #4]
 8011960:	2200      	movs	r2, #0
 8011962:	e6f5      	b.n	8011750 <uxr_write_framed_msg+0xd4>
 8011964:	0801ad9c 	.word	0x0801ad9c

08011968 <uxr_framing_read_transport>:
 8011968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801196c:	4604      	mov	r4, r0
 801196e:	b083      	sub	sp, #12
 8011970:	461f      	mov	r7, r3
 8011972:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8011976:	4689      	mov	r9, r1
 8011978:	4692      	mov	sl, r2
 801197a:	f000 fc89 	bl	8012290 <uxr_millis>
 801197e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011982:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8011986:	42b3      	cmp	r3, r6
 8011988:	4680      	mov	r8, r0
 801198a:	d061      	beq.n	8011a50 <uxr_framing_read_transport+0xe8>
 801198c:	d81c      	bhi.n	80119c8 <uxr_framing_read_transport+0x60>
 801198e:	1e75      	subs	r5, r6, #1
 8011990:	1aed      	subs	r5, r5, r3
 8011992:	b2ed      	uxtb	r5, r5
 8011994:	2600      	movs	r6, #0
 8011996:	455d      	cmp	r5, fp
 8011998:	d81f      	bhi.n	80119da <uxr_framing_read_transport+0x72>
 801199a:	19ab      	adds	r3, r5, r6
 801199c:	455b      	cmp	r3, fp
 801199e:	bf84      	itt	hi
 80119a0:	ebab 0605 	subhi.w	r6, fp, r5
 80119a4:	b2f6      	uxtbhi	r6, r6
 80119a6:	b9ed      	cbnz	r5, 80119e4 <uxr_framing_read_transport+0x7c>
 80119a8:	f04f 0b00 	mov.w	fp, #0
 80119ac:	f000 fc70 	bl	8012290 <uxr_millis>
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	eba0 0808 	sub.w	r8, r0, r8
 80119b6:	eba3 0308 	sub.w	r3, r3, r8
 80119ba:	4658      	mov	r0, fp
 80119bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80119c0:	603b      	str	r3, [r7, #0]
 80119c2:	b003      	add	sp, #12
 80119c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c8:	2e00      	cmp	r6, #0
 80119ca:	d049      	beq.n	8011a60 <uxr_framing_read_transport+0xf8>
 80119cc:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80119d0:	b2ed      	uxtb	r5, r5
 80119d2:	3e01      	subs	r6, #1
 80119d4:	455d      	cmp	r5, fp
 80119d6:	b2f6      	uxtb	r6, r6
 80119d8:	d9df      	bls.n	801199a <uxr_framing_read_transport+0x32>
 80119da:	fa5f f58b 	uxtb.w	r5, fp
 80119de:	2600      	movs	r6, #0
 80119e0:	2d00      	cmp	r5, #0
 80119e2:	d0e1      	beq.n	80119a8 <uxr_framing_read_transport+0x40>
 80119e4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80119e8:	3102      	adds	r1, #2
 80119ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80119ec:	9300      	str	r3, [sp, #0]
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	4421      	add	r1, r4
 80119f2:	462a      	mov	r2, r5
 80119f4:	4650      	mov	r0, sl
 80119f6:	47c8      	blx	r9
 80119f8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80119fc:	4a1a      	ldr	r2, [pc, #104]	@ (8011a68 <uxr_framing_read_transport+0x100>)
 80119fe:	4403      	add	r3, r0
 8011a00:	0859      	lsrs	r1, r3, #1
 8011a02:	fba2 2101 	umull	r2, r1, r2, r1
 8011a06:	0889      	lsrs	r1, r1, #2
 8011a08:	222a      	movs	r2, #42	@ 0x2a
 8011a0a:	fb02 3111 	mls	r1, r2, r1, r3
 8011a0e:	4683      	mov	fp, r0
 8011a10:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8011a14:	2800      	cmp	r0, #0
 8011a16:	d0c7      	beq.n	80119a8 <uxr_framing_read_transport+0x40>
 8011a18:	42a8      	cmp	r0, r5
 8011a1a:	d1c7      	bne.n	80119ac <uxr_framing_read_transport+0x44>
 8011a1c:	2e00      	cmp	r6, #0
 8011a1e:	d0c5      	beq.n	80119ac <uxr_framing_read_transport+0x44>
 8011a20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011a22:	9300      	str	r3, [sp, #0]
 8011a24:	3102      	adds	r1, #2
 8011a26:	4632      	mov	r2, r6
 8011a28:	4421      	add	r1, r4
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	4650      	mov	r0, sl
 8011a2e:	47c8      	blx	r9
 8011a30:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011a34:	4a0c      	ldr	r2, [pc, #48]	@ (8011a68 <uxr_framing_read_transport+0x100>)
 8011a36:	180b      	adds	r3, r1, r0
 8011a38:	0859      	lsrs	r1, r3, #1
 8011a3a:	fba2 1201 	umull	r1, r2, r2, r1
 8011a3e:	0892      	lsrs	r2, r2, #2
 8011a40:	212a      	movs	r1, #42	@ 0x2a
 8011a42:	fb01 3312 	mls	r3, r1, r2, r3
 8011a46:	eb00 0b05 	add.w	fp, r0, r5
 8011a4a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8011a4e:	e7ad      	b.n	80119ac <uxr_framing_read_transport+0x44>
 8011a50:	2600      	movs	r6, #0
 8011a52:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8011a56:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8011a58:	d9bf      	bls.n	80119da <uxr_framing_read_transport+0x72>
 8011a5a:	2102      	movs	r1, #2
 8011a5c:	2529      	movs	r5, #41	@ 0x29
 8011a5e:	e7c4      	b.n	80119ea <uxr_framing_read_transport+0x82>
 8011a60:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8011a64:	b2ed      	uxtb	r5, r5
 8011a66:	e796      	b.n	8011996 <uxr_framing_read_transport+0x2e>
 8011a68:	30c30c31 	.word	0x30c30c31

08011a6c <uxr_read_framed_msg>:
 8011a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a70:	461e      	mov	r6, r3
 8011a72:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8011a76:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8011a7a:	429d      	cmp	r5, r3
 8011a7c:	b083      	sub	sp, #12
 8011a7e:	4604      	mov	r4, r0
 8011a80:	4688      	mov	r8, r1
 8011a82:	4691      	mov	r9, r2
 8011a84:	f000 8188 	beq.w	8011d98 <uxr_read_framed_msg+0x32c>
 8011a88:	7823      	ldrb	r3, [r4, #0]
 8011a8a:	4dc1      	ldr	r5, [pc, #772]	@ (8011d90 <uxr_read_framed_msg+0x324>)
 8011a8c:	4fc1      	ldr	r7, [pc, #772]	@ (8011d94 <uxr_read_framed_msg+0x328>)
 8011a8e:	2b07      	cmp	r3, #7
 8011a90:	d8fd      	bhi.n	8011a8e <uxr_read_framed_msg+0x22>
 8011a92:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011a96:	0115      	.short	0x0115
 8011a98:	00d600f6 	.word	0x00d600f6
 8011a9c:	009000b9 	.word	0x009000b9
 8011aa0:	0030004d 	.word	0x0030004d
 8011aa4:	0008      	.short	0x0008
 8011aa6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011aaa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011aae:	4299      	cmp	r1, r3
 8011ab0:	f000 814a 	beq.w	8011d48 <uxr_read_framed_msg+0x2dc>
 8011ab4:	18e2      	adds	r2, r4, r3
 8011ab6:	7892      	ldrb	r2, [r2, #2]
 8011ab8:	2a7d      	cmp	r2, #125	@ 0x7d
 8011aba:	f000 8199 	beq.w	8011df0 <uxr_read_framed_msg+0x384>
 8011abe:	3301      	adds	r3, #1
 8011ac0:	0858      	lsrs	r0, r3, #1
 8011ac2:	fba5 1000 	umull	r1, r0, r5, r0
 8011ac6:	0880      	lsrs	r0, r0, #2
 8011ac8:	212a      	movs	r1, #42	@ 0x2a
 8011aca:	fb01 3310 	mls	r3, r1, r0, r3
 8011ace:	2a7e      	cmp	r2, #126	@ 0x7e
 8011ad0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011ad4:	f000 8252 	beq.w	8011f7c <uxr_read_framed_msg+0x510>
 8011ad8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8011ada:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8011adc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	4299      	cmp	r1, r3
 8011ae6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8011ae8:	7022      	strb	r2, [r4, #0]
 8011aea:	f000 8179 	beq.w	8011de0 <uxr_read_framed_msg+0x374>
 8011aee:	2000      	movs	r0, #0
 8011af0:	b003      	add	sp, #12
 8011af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011af6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011afa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011afe:	4299      	cmp	r1, r3
 8011b00:	f000 8131 	beq.w	8011d66 <uxr_read_framed_msg+0x2fa>
 8011b04:	18e2      	adds	r2, r4, r3
 8011b06:	7890      	ldrb	r0, [r2, #2]
 8011b08:	287d      	cmp	r0, #125	@ 0x7d
 8011b0a:	f000 8190 	beq.w	8011e2e <uxr_read_framed_msg+0x3c2>
 8011b0e:	3301      	adds	r3, #1
 8011b10:	085a      	lsrs	r2, r3, #1
 8011b12:	fba5 1202 	umull	r1, r2, r5, r2
 8011b16:	0892      	lsrs	r2, r2, #2
 8011b18:	212a      	movs	r1, #42	@ 0x2a
 8011b1a:	fb01 3312 	mls	r3, r1, r2, r3
 8011b1e:	287e      	cmp	r0, #126	@ 0x7e
 8011b20:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011b24:	f000 821a 	beq.w	8011f5c <uxr_read_framed_msg+0x4f0>
 8011b28:	2307      	movs	r3, #7
 8011b2a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8011b2c:	7023      	strb	r3, [r4, #0]
 8011b2e:	e7ae      	b.n	8011a8e <uxr_read_framed_msg+0x22>
 8011b30:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011b32:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011b36:	459e      	cmp	lr, r3
 8011b38:	d938      	bls.n	8011bac <uxr_read_framed_msg+0x140>
 8011b3a:	ee07 8a90 	vmov	s15, r8
 8011b3e:	212a      	movs	r1, #42	@ 0x2a
 8011b40:	e020      	b.n	8011b84 <uxr_read_framed_msg+0x118>
 8011b42:	f89b c002 	ldrb.w	ip, [fp, #2]
 8011b46:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8011b4a:	f000 80d4 	beq.w	8011cf6 <uxr_read_framed_msg+0x28a>
 8011b4e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011b52:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011b56:	f000 8219 	beq.w	8011f8c <uxr_read_framed_msg+0x520>
 8011b5a:	f806 c003 	strb.w	ip, [r6, r3]
 8011b5e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8011b62:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011b64:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011b68:	ea8a 000c 	eor.w	r0, sl, ip
 8011b6c:	b2c0      	uxtb	r0, r0
 8011b6e:	3301      	adds	r3, #1
 8011b70:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8011b7a:	4573      	cmp	r3, lr
 8011b7c:	8663      	strh	r3, [r4, #50]	@ 0x32
 8011b7e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8011b80:	f080 8120 	bcs.w	8011dc4 <uxr_read_framed_msg+0x358>
 8011b84:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8011b88:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011b8c:	f100 0c01 	add.w	ip, r0, #1
 8011b90:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011b94:	fba5 8202 	umull	r8, r2, r5, r2
 8011b98:	0892      	lsrs	r2, r2, #2
 8011b9a:	4582      	cmp	sl, r0
 8011b9c:	eb04 0b00 	add.w	fp, r4, r0
 8011ba0:	fb01 c212 	mls	r2, r1, r2, ip
 8011ba4:	d1cd      	bne.n	8011b42 <uxr_read_framed_msg+0xd6>
 8011ba6:	ee17 8a90 	vmov	r8, s15
 8011baa:	459e      	cmp	lr, r3
 8011bac:	f040 8111 	bne.w	8011dd2 <uxr_read_framed_msg+0x366>
 8011bb0:	2306      	movs	r3, #6
 8011bb2:	7023      	strb	r3, [r4, #0]
 8011bb4:	e76b      	b.n	8011a8e <uxr_read_framed_msg+0x22>
 8011bb6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011bba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011bbe:	4298      	cmp	r0, r3
 8011bc0:	f000 80c2 	beq.w	8011d48 <uxr_read_framed_msg+0x2dc>
 8011bc4:	18e2      	adds	r2, r4, r3
 8011bc6:	7891      	ldrb	r1, [r2, #2]
 8011bc8:	297d      	cmp	r1, #125	@ 0x7d
 8011bca:	f000 814c 	beq.w	8011e66 <uxr_read_framed_msg+0x3fa>
 8011bce:	3301      	adds	r3, #1
 8011bd0:	085a      	lsrs	r2, r3, #1
 8011bd2:	fba5 0202 	umull	r0, r2, r5, r2
 8011bd6:	0892      	lsrs	r2, r2, #2
 8011bd8:	202a      	movs	r0, #42	@ 0x2a
 8011bda:	fb00 3312 	mls	r3, r0, r2, r3
 8011bde:	297e      	cmp	r1, #126	@ 0x7e
 8011be0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011be4:	f000 81ca 	beq.w	8011f7c <uxr_read_framed_msg+0x510>
 8011be8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8011bea:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011bee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	2000      	movs	r0, #0
 8011bf4:	428b      	cmp	r3, r1
 8011bf6:	8623      	strh	r3, [r4, #48]	@ 0x30
 8011bf8:	8660      	strh	r0, [r4, #50]	@ 0x32
 8011bfa:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8011bfc:	f240 80df 	bls.w	8011dbe <uxr_read_framed_msg+0x352>
 8011c00:	7020      	strb	r0, [r4, #0]
 8011c02:	b003      	add	sp, #12
 8011c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c08:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011c0c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011c10:	4299      	cmp	r1, r3
 8011c12:	f000 80a8 	beq.w	8011d66 <uxr_read_framed_msg+0x2fa>
 8011c16:	18e2      	adds	r2, r4, r3
 8011c18:	7890      	ldrb	r0, [r2, #2]
 8011c1a:	287d      	cmp	r0, #125	@ 0x7d
 8011c1c:	f000 8164 	beq.w	8011ee8 <uxr_read_framed_msg+0x47c>
 8011c20:	3301      	adds	r3, #1
 8011c22:	085a      	lsrs	r2, r3, #1
 8011c24:	fba5 1202 	umull	r1, r2, r5, r2
 8011c28:	0892      	lsrs	r2, r2, #2
 8011c2a:	212a      	movs	r1, #42	@ 0x2a
 8011c2c:	fb01 3312 	mls	r3, r1, r2, r3
 8011c30:	287e      	cmp	r0, #126	@ 0x7e
 8011c32:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011c36:	f000 8191 	beq.w	8011f5c <uxr_read_framed_msg+0x4f0>
 8011c3a:	2304      	movs	r3, #4
 8011c3c:	8620      	strh	r0, [r4, #48]	@ 0x30
 8011c3e:	7023      	strb	r3, [r4, #0]
 8011c40:	e725      	b.n	8011a8e <uxr_read_framed_msg+0x22>
 8011c42:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011c46:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011c4a:	4290      	cmp	r0, r2
 8011c4c:	f000 80b3 	beq.w	8011db6 <uxr_read_framed_msg+0x34a>
 8011c50:	18a3      	adds	r3, r4, r2
 8011c52:	7899      	ldrb	r1, [r3, #2]
 8011c54:	297d      	cmp	r1, #125	@ 0x7d
 8011c56:	f000 8164 	beq.w	8011f22 <uxr_read_framed_msg+0x4b6>
 8011c5a:	3201      	adds	r2, #1
 8011c5c:	0850      	lsrs	r0, r2, #1
 8011c5e:	fba5 3000 	umull	r3, r0, r5, r0
 8011c62:	0880      	lsrs	r0, r0, #2
 8011c64:	232a      	movs	r3, #42	@ 0x2a
 8011c66:	fb03 2210 	mls	r2, r3, r0, r2
 8011c6a:	297e      	cmp	r1, #126	@ 0x7e
 8011c6c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011c70:	f000 8188 	beq.w	8011f84 <uxr_read_framed_msg+0x518>
 8011c74:	7863      	ldrb	r3, [r4, #1]
 8011c76:	428b      	cmp	r3, r1
 8011c78:	bf0c      	ite	eq
 8011c7a:	2303      	moveq	r3, #3
 8011c7c:	2300      	movne	r3, #0
 8011c7e:	7023      	strb	r3, [r4, #0]
 8011c80:	e705      	b.n	8011a8e <uxr_read_framed_msg+0x22>
 8011c82:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011c86:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	4299      	cmp	r1, r3
 8011c8e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8011c92:	d06c      	beq.n	8011d6e <uxr_read_framed_msg+0x302>
 8011c94:	18e2      	adds	r2, r4, r3
 8011c96:	7890      	ldrb	r0, [r2, #2]
 8011c98:	287d      	cmp	r0, #125	@ 0x7d
 8011c9a:	f000 8101 	beq.w	8011ea0 <uxr_read_framed_msg+0x434>
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	085a      	lsrs	r2, r3, #1
 8011ca2:	fba5 1202 	umull	r1, r2, r5, r2
 8011ca6:	0892      	lsrs	r2, r2, #2
 8011ca8:	212a      	movs	r1, #42	@ 0x2a
 8011caa:	fb01 3312 	mls	r3, r1, r2, r3
 8011cae:	287e      	cmp	r0, #126	@ 0x7e
 8011cb0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8011cb4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011cb8:	d059      	beq.n	8011d6e <uxr_read_framed_msg+0x302>
 8011cba:	2302      	movs	r3, #2
 8011cbc:	7023      	strb	r3, [r4, #0]
 8011cbe:	e6e6      	b.n	8011a8e <uxr_read_framed_msg+0x22>
 8011cc0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011cc4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011cc8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8011ccc:	1c51      	adds	r1, r2, #1
 8011cce:	084b      	lsrs	r3, r1, #1
 8011cd0:	fba5 c303 	umull	ip, r3, r5, r3
 8011cd4:	089b      	lsrs	r3, r3, #2
 8011cd6:	fb0e 1313 	mls	r3, lr, r3, r1
 8011cda:	4592      	cmp	sl, r2
 8011cdc:	eb04 0002 	add.w	r0, r4, r2
 8011ce0:	b2da      	uxtb	r2, r3
 8011ce2:	f43f af04 	beq.w	8011aee <uxr_read_framed_msg+0x82>
 8011ce6:	7883      	ldrb	r3, [r0, #2]
 8011ce8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011cec:	2b7e      	cmp	r3, #126	@ 0x7e
 8011cee:	d1ed      	bne.n	8011ccc <uxr_read_framed_msg+0x260>
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	7023      	strb	r3, [r4, #0]
 8011cf4:	e6cb      	b.n	8011a8e <uxr_read_framed_msg+0x22>
 8011cf6:	f100 0c01 	add.w	ip, r0, #1
 8011cfa:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011cfe:	fba5 8202 	umull	r8, r2, r5, r2
 8011d02:	0892      	lsrs	r2, r2, #2
 8011d04:	fb01 c212 	mls	r2, r1, r2, ip
 8011d08:	eb04 0c02 	add.w	ip, r4, r2
 8011d0c:	b2d2      	uxtb	r2, r2
 8011d0e:	4592      	cmp	sl, r2
 8011d10:	f100 0002 	add.w	r0, r0, #2
 8011d14:	f43f af47 	beq.w	8011ba6 <uxr_read_framed_msg+0x13a>
 8011d18:	0842      	lsrs	r2, r0, #1
 8011d1a:	f89c a002 	ldrb.w	sl, [ip, #2]
 8011d1e:	fba5 8202 	umull	r8, r2, r5, r2
 8011d22:	0892      	lsrs	r2, r2, #2
 8011d24:	fb01 0012 	mls	r0, r1, r2, r0
 8011d28:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8011d2c:	f08a 0c20 	eor.w	ip, sl, #32
 8011d30:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8011d34:	f47f af11 	bne.w	8011b5a <uxr_read_framed_msg+0xee>
 8011d38:	459e      	cmp	lr, r3
 8011d3a:	ee17 8a90 	vmov	r8, s15
 8011d3e:	f43f af37 	beq.w	8011bb0 <uxr_read_framed_msg+0x144>
 8011d42:	2301      	movs	r3, #1
 8011d44:	7023      	strb	r3, [r4, #0]
 8011d46:	e6a2      	b.n	8011a8e <uxr_read_framed_msg+0x22>
 8011d48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d4a:	9300      	str	r3, [sp, #0]
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	9301      	str	r3, [sp, #4]
 8011d50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d52:	464a      	mov	r2, r9
 8011d54:	4641      	mov	r1, r8
 8011d56:	4620      	mov	r0, r4
 8011d58:	f7ff fe06 	bl	8011968 <uxr_framing_read_transport>
 8011d5c:	2800      	cmp	r0, #0
 8011d5e:	f43f aec6 	beq.w	8011aee <uxr_read_framed_msg+0x82>
 8011d62:	7823      	ldrb	r3, [r4, #0]
 8011d64:	e693      	b.n	8011a8e <uxr_read_framed_msg+0x22>
 8011d66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d68:	9300      	str	r3, [sp, #0]
 8011d6a:	2302      	movs	r3, #2
 8011d6c:	e7ef      	b.n	8011d4e <uxr_read_framed_msg+0x2e2>
 8011d6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d70:	9300      	str	r3, [sp, #0]
 8011d72:	2304      	movs	r3, #4
 8011d74:	9301      	str	r3, [sp, #4]
 8011d76:	464a      	mov	r2, r9
 8011d78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d7a:	4641      	mov	r1, r8
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	f7ff fdf3 	bl	8011968 <uxr_framing_read_transport>
 8011d82:	2800      	cmp	r0, #0
 8011d84:	d1ed      	bne.n	8011d62 <uxr_read_framed_msg+0x2f6>
 8011d86:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011d8a:	2b7e      	cmp	r3, #126	@ 0x7e
 8011d8c:	d0e9      	beq.n	8011d62 <uxr_read_framed_msg+0x2f6>
 8011d8e:	e6ae      	b.n	8011aee <uxr_read_framed_msg+0x82>
 8011d90:	30c30c31 	.word	0x30c30c31
 8011d94:	0801ad9c 	.word	0x0801ad9c
 8011d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d9a:	9300      	str	r3, [sp, #0]
 8011d9c:	2305      	movs	r3, #5
 8011d9e:	9301      	str	r3, [sp, #4]
 8011da0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011da2:	f7ff fde1 	bl	8011968 <uxr_framing_read_transport>
 8011da6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011daa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011dae:	429a      	cmp	r2, r3
 8011db0:	f43f ae9d 	beq.w	8011aee <uxr_read_framed_msg+0x82>
 8011db4:	e668      	b.n	8011a88 <uxr_read_framed_msg+0x1c>
 8011db6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011db8:	9300      	str	r3, [sp, #0]
 8011dba:	2303      	movs	r3, #3
 8011dbc:	e7c7      	b.n	8011d4e <uxr_read_framed_msg+0x2e2>
 8011dbe:	2305      	movs	r3, #5
 8011dc0:	7023      	strb	r3, [r4, #0]
 8011dc2:	e664      	b.n	8011a8e <uxr_read_framed_msg+0x22>
 8011dc4:	ee17 8a90 	vmov	r8, s15
 8011dc8:	f43f aef2 	beq.w	8011bb0 <uxr_read_framed_msg+0x144>
 8011dcc:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011dd0:	d08e      	beq.n	8011cf0 <uxr_read_framed_msg+0x284>
 8011dd2:	ebae 0303 	sub.w	r3, lr, r3
 8011dd6:	3302      	adds	r3, #2
 8011dd8:	9301      	str	r3, [sp, #4]
 8011dda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ddc:	9300      	str	r3, [sp, #0]
 8011dde:	e7b7      	b.n	8011d50 <uxr_read_framed_msg+0x2e4>
 8011de0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011de2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011de6:	7013      	strb	r3, [r2, #0]
 8011de8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8011dea:	b003      	add	sp, #12
 8011dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011df0:	f103 0c01 	add.w	ip, r3, #1
 8011df4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011df8:	fba5 0202 	umull	r0, r2, r5, r2
 8011dfc:	0892      	lsrs	r2, r2, #2
 8011dfe:	202a      	movs	r0, #42	@ 0x2a
 8011e00:	fb00 c212 	mls	r2, r0, r2, ip
 8011e04:	fa5f fc82 	uxtb.w	ip, r2
 8011e08:	4561      	cmp	r1, ip
 8011e0a:	d09d      	beq.n	8011d48 <uxr_read_framed_msg+0x2dc>
 8011e0c:	3302      	adds	r3, #2
 8011e0e:	4422      	add	r2, r4
 8011e10:	0859      	lsrs	r1, r3, #1
 8011e12:	7892      	ldrb	r2, [r2, #2]
 8011e14:	fba5 c101 	umull	ip, r1, r5, r1
 8011e18:	0889      	lsrs	r1, r1, #2
 8011e1a:	fb00 3311 	mls	r3, r0, r1, r3
 8011e1e:	2a7e      	cmp	r2, #126	@ 0x7e
 8011e20:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011e24:	f000 80aa 	beq.w	8011f7c <uxr_read_framed_msg+0x510>
 8011e28:	f082 0220 	eor.w	r2, r2, #32
 8011e2c:	e654      	b.n	8011ad8 <uxr_read_framed_msg+0x6c>
 8011e2e:	1c58      	adds	r0, r3, #1
 8011e30:	0842      	lsrs	r2, r0, #1
 8011e32:	fba5 c202 	umull	ip, r2, r5, r2
 8011e36:	0892      	lsrs	r2, r2, #2
 8011e38:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011e3c:	fb0c 0212 	mls	r2, ip, r2, r0
 8011e40:	b2d0      	uxtb	r0, r2
 8011e42:	4281      	cmp	r1, r0
 8011e44:	d08f      	beq.n	8011d66 <uxr_read_framed_msg+0x2fa>
 8011e46:	4422      	add	r2, r4
 8011e48:	3302      	adds	r3, #2
 8011e4a:	7890      	ldrb	r0, [r2, #2]
 8011e4c:	085a      	lsrs	r2, r3, #1
 8011e4e:	fba5 1202 	umull	r1, r2, r5, r2
 8011e52:	0892      	lsrs	r2, r2, #2
 8011e54:	fb0c 3312 	mls	r3, ip, r2, r3
 8011e58:	287e      	cmp	r0, #126	@ 0x7e
 8011e5a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011e5e:	d07d      	beq.n	8011f5c <uxr_read_framed_msg+0x4f0>
 8011e60:	f080 0020 	eor.w	r0, r0, #32
 8011e64:	e660      	b.n	8011b28 <uxr_read_framed_msg+0xbc>
 8011e66:	1c59      	adds	r1, r3, #1
 8011e68:	084a      	lsrs	r2, r1, #1
 8011e6a:	fba5 c202 	umull	ip, r2, r5, r2
 8011e6e:	0892      	lsrs	r2, r2, #2
 8011e70:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011e74:	fb0c 1212 	mls	r2, ip, r2, r1
 8011e78:	b2d1      	uxtb	r1, r2
 8011e7a:	4288      	cmp	r0, r1
 8011e7c:	f43f af64 	beq.w	8011d48 <uxr_read_framed_msg+0x2dc>
 8011e80:	4422      	add	r2, r4
 8011e82:	3302      	adds	r3, #2
 8011e84:	7891      	ldrb	r1, [r2, #2]
 8011e86:	085a      	lsrs	r2, r3, #1
 8011e88:	fba5 0202 	umull	r0, r2, r5, r2
 8011e8c:	0892      	lsrs	r2, r2, #2
 8011e8e:	fb0c 3312 	mls	r3, ip, r2, r3
 8011e92:	297e      	cmp	r1, #126	@ 0x7e
 8011e94:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011e98:	d070      	beq.n	8011f7c <uxr_read_framed_msg+0x510>
 8011e9a:	f081 0120 	eor.w	r1, r1, #32
 8011e9e:	e6a3      	b.n	8011be8 <uxr_read_framed_msg+0x17c>
 8011ea0:	f103 0c01 	add.w	ip, r3, #1
 8011ea4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011ea8:	fba5 0202 	umull	r0, r2, r5, r2
 8011eac:	0892      	lsrs	r2, r2, #2
 8011eae:	202a      	movs	r0, #42	@ 0x2a
 8011eb0:	fb00 c212 	mls	r2, r0, r2, ip
 8011eb4:	fa5f fc82 	uxtb.w	ip, r2
 8011eb8:	4561      	cmp	r1, ip
 8011eba:	f43f af58 	beq.w	8011d6e <uxr_read_framed_msg+0x302>
 8011ebe:	4422      	add	r2, r4
 8011ec0:	3302      	adds	r3, #2
 8011ec2:	7891      	ldrb	r1, [r2, #2]
 8011ec4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011ec8:	085a      	lsrs	r2, r3, #1
 8011eca:	fba5 c202 	umull	ip, r2, r5, r2
 8011ece:	0892      	lsrs	r2, r2, #2
 8011ed0:	fb00 3312 	mls	r3, r0, r2, r3
 8011ed4:	297e      	cmp	r1, #126	@ 0x7e
 8011ed6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011eda:	f43f af48 	beq.w	8011d6e <uxr_read_framed_msg+0x302>
 8011ede:	f081 0120 	eor.w	r1, r1, #32
 8011ee2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011ee6:	e6e8      	b.n	8011cba <uxr_read_framed_msg+0x24e>
 8011ee8:	1c58      	adds	r0, r3, #1
 8011eea:	0842      	lsrs	r2, r0, #1
 8011eec:	fba5 c202 	umull	ip, r2, r5, r2
 8011ef0:	0892      	lsrs	r2, r2, #2
 8011ef2:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011ef6:	fb0c 0212 	mls	r2, ip, r2, r0
 8011efa:	b2d0      	uxtb	r0, r2
 8011efc:	4281      	cmp	r1, r0
 8011efe:	f43f af32 	beq.w	8011d66 <uxr_read_framed_msg+0x2fa>
 8011f02:	4422      	add	r2, r4
 8011f04:	3302      	adds	r3, #2
 8011f06:	7890      	ldrb	r0, [r2, #2]
 8011f08:	085a      	lsrs	r2, r3, #1
 8011f0a:	fba5 1202 	umull	r1, r2, r5, r2
 8011f0e:	0892      	lsrs	r2, r2, #2
 8011f10:	fb0c 3312 	mls	r3, ip, r2, r3
 8011f14:	287e      	cmp	r0, #126	@ 0x7e
 8011f16:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011f1a:	d01f      	beq.n	8011f5c <uxr_read_framed_msg+0x4f0>
 8011f1c:	f080 0020 	eor.w	r0, r0, #32
 8011f20:	e68b      	b.n	8011c3a <uxr_read_framed_msg+0x1ce>
 8011f22:	1c51      	adds	r1, r2, #1
 8011f24:	084b      	lsrs	r3, r1, #1
 8011f26:	fba5 c303 	umull	ip, r3, r5, r3
 8011f2a:	089b      	lsrs	r3, r3, #2
 8011f2c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011f30:	fb0c 1313 	mls	r3, ip, r3, r1
 8011f34:	b2d9      	uxtb	r1, r3
 8011f36:	4288      	cmp	r0, r1
 8011f38:	f43f af3d 	beq.w	8011db6 <uxr_read_framed_msg+0x34a>
 8011f3c:	3202      	adds	r2, #2
 8011f3e:	4423      	add	r3, r4
 8011f40:	0850      	lsrs	r0, r2, #1
 8011f42:	789b      	ldrb	r3, [r3, #2]
 8011f44:	fba5 1000 	umull	r1, r0, r5, r0
 8011f48:	0880      	lsrs	r0, r0, #2
 8011f4a:	fb0c 2210 	mls	r2, ip, r0, r2
 8011f4e:	2b7e      	cmp	r3, #126	@ 0x7e
 8011f50:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011f54:	d016      	beq.n	8011f84 <uxr_read_framed_msg+0x518>
 8011f56:	f083 0120 	eor.w	r1, r3, #32
 8011f5a:	e68b      	b.n	8011c74 <uxr_read_framed_msg+0x208>
 8011f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f5e:	9300      	str	r3, [sp, #0]
 8011f60:	2302      	movs	r3, #2
 8011f62:	9301      	str	r3, [sp, #4]
 8011f64:	464a      	mov	r2, r9
 8011f66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f68:	4641      	mov	r1, r8
 8011f6a:	4620      	mov	r0, r4
 8011f6c:	f7ff fcfc 	bl	8011968 <uxr_framing_read_transport>
 8011f70:	2800      	cmp	r0, #0
 8011f72:	f47f aef6 	bne.w	8011d62 <uxr_read_framed_msg+0x2f6>
 8011f76:	2301      	movs	r3, #1
 8011f78:	7023      	strb	r3, [r4, #0]
 8011f7a:	e588      	b.n	8011a8e <uxr_read_framed_msg+0x22>
 8011f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f7e:	9300      	str	r3, [sp, #0]
 8011f80:	2301      	movs	r3, #1
 8011f82:	e7ee      	b.n	8011f62 <uxr_read_framed_msg+0x4f6>
 8011f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f86:	9300      	str	r3, [sp, #0]
 8011f88:	2303      	movs	r3, #3
 8011f8a:	e7ea      	b.n	8011f62 <uxr_read_framed_msg+0x4f6>
 8011f8c:	ee17 8a90 	vmov	r8, s15
 8011f90:	e6ae      	b.n	8011cf0 <uxr_read_framed_msg+0x284>
 8011f92:	bf00      	nop

08011f94 <uxr_stream_id>:
 8011f94:	2901      	cmp	r1, #1
 8011f96:	b082      	sub	sp, #8
 8011f98:	d01d      	beq.n	8011fd6 <uxr_stream_id+0x42>
 8011f9a:	2902      	cmp	r1, #2
 8011f9c:	f04f 0c00 	mov.w	ip, #0
 8011fa0:	d01e      	beq.n	8011fe0 <uxr_stream_id+0x4c>
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	f36c 0307 	bfi	r3, ip, #0, #8
 8011fa8:	f360 230f 	bfi	r3, r0, #8, #8
 8011fac:	f361 4317 	bfi	r3, r1, #16, #8
 8011fb0:	f362 631f 	bfi	r3, r2, #24, #8
 8011fb4:	b2da      	uxtb	r2, r3
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	f362 0007 	bfi	r0, r2, #0, #8
 8011fbc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011fc0:	f362 200f 	bfi	r0, r2, #8, #8
 8011fc4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011fc8:	f362 4017 	bfi	r0, r2, #16, #8
 8011fcc:	0e1b      	lsrs	r3, r3, #24
 8011fce:	f363 601f 	bfi	r0, r3, #24, #8
 8011fd2:	b002      	add	sp, #8
 8011fd4:	4770      	bx	lr
 8011fd6:	f100 0c01 	add.w	ip, r0, #1
 8011fda:	fa5f fc8c 	uxtb.w	ip, ip
 8011fde:	e7e0      	b.n	8011fa2 <uxr_stream_id+0xe>
 8011fe0:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011fe4:	e7dd      	b.n	8011fa2 <uxr_stream_id+0xe>
 8011fe6:	bf00      	nop

08011fe8 <uxr_stream_id_from_raw>:
 8011fe8:	b082      	sub	sp, #8
 8011fea:	b130      	cbz	r0, 8011ffa <uxr_stream_id_from_raw+0x12>
 8011fec:	0603      	lsls	r3, r0, #24
 8011fee:	d420      	bmi.n	8012032 <uxr_stream_id_from_raw+0x4a>
 8011ff0:	1e42      	subs	r2, r0, #1
 8011ff2:	b2d2      	uxtb	r2, r2
 8011ff4:	f04f 0c01 	mov.w	ip, #1
 8011ff8:	e001      	b.n	8011ffe <uxr_stream_id_from_raw+0x16>
 8011ffa:	4684      	mov	ip, r0
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	2300      	movs	r3, #0
 8012000:	f360 0307 	bfi	r3, r0, #0, #8
 8012004:	f362 230f 	bfi	r3, r2, #8, #8
 8012008:	f36c 4317 	bfi	r3, ip, #16, #8
 801200c:	f361 631f 	bfi	r3, r1, #24, #8
 8012010:	b2da      	uxtb	r2, r3
 8012012:	2000      	movs	r0, #0
 8012014:	f362 0007 	bfi	r0, r2, #0, #8
 8012018:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801201c:	f362 200f 	bfi	r0, r2, #8, #8
 8012020:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012024:	f362 4017 	bfi	r0, r2, #16, #8
 8012028:	0e1b      	lsrs	r3, r3, #24
 801202a:	f363 601f 	bfi	r0, r3, #24, #8
 801202e:	b002      	add	sp, #8
 8012030:	4770      	bx	lr
 8012032:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8012036:	f04f 0c02 	mov.w	ip, #2
 801203a:	e7e0      	b.n	8011ffe <uxr_stream_id_from_raw+0x16>

0801203c <uxr_init_stream_storage>:
 801203c:	2300      	movs	r3, #0
 801203e:	7403      	strb	r3, [r0, #16]
 8012040:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012044:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012048:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801204c:	4770      	bx	lr
 801204e:	bf00      	nop

08012050 <uxr_reset_stream_storage>:
 8012050:	b570      	push	{r4, r5, r6, lr}
 8012052:	7c03      	ldrb	r3, [r0, #16]
 8012054:	4604      	mov	r4, r0
 8012056:	b153      	cbz	r3, 801206e <uxr_reset_stream_storage+0x1e>
 8012058:	4606      	mov	r6, r0
 801205a:	2500      	movs	r5, #0
 801205c:	4630      	mov	r0, r6
 801205e:	f005 fe9b 	bl	8017d98 <uxr_reset_output_best_effort_stream>
 8012062:	7c23      	ldrb	r3, [r4, #16]
 8012064:	3501      	adds	r5, #1
 8012066:	42ab      	cmp	r3, r5
 8012068:	f106 0610 	add.w	r6, r6, #16
 801206c:	d8f6      	bhi.n	801205c <uxr_reset_stream_storage+0xc>
 801206e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012072:	b163      	cbz	r3, 801208e <uxr_reset_stream_storage+0x3e>
 8012074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012078:	2500      	movs	r5, #0
 801207a:	4630      	mov	r0, r6
 801207c:	f005 fc8e 	bl	801799c <uxr_reset_input_best_effort_stream>
 8012080:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012084:	3501      	adds	r5, #1
 8012086:	42ab      	cmp	r3, r5
 8012088:	f106 0602 	add.w	r6, r6, #2
 801208c:	d8f5      	bhi.n	801207a <uxr_reset_stream_storage+0x2a>
 801208e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012092:	b163      	cbz	r3, 80120ae <uxr_reset_stream_storage+0x5e>
 8012094:	f104 0618 	add.w	r6, r4, #24
 8012098:	2500      	movs	r5, #0
 801209a:	4630      	mov	r0, r6
 801209c:	f005 ff28 	bl	8017ef0 <uxr_reset_output_reliable_stream>
 80120a0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80120a4:	3501      	adds	r5, #1
 80120a6:	42ab      	cmp	r3, r5
 80120a8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80120ac:	d8f5      	bhi.n	801209a <uxr_reset_stream_storage+0x4a>
 80120ae:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80120b2:	b163      	cbz	r3, 80120ce <uxr_reset_stream_storage+0x7e>
 80120b4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80120b8:	2500      	movs	r5, #0
 80120ba:	4630      	mov	r0, r6
 80120bc:	f005 fce2 	bl	8017a84 <uxr_reset_input_reliable_stream>
 80120c0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80120c4:	3501      	adds	r5, #1
 80120c6:	42ab      	cmp	r3, r5
 80120c8:	f106 0618 	add.w	r6, r6, #24
 80120cc:	d8f5      	bhi.n	80120ba <uxr_reset_stream_storage+0x6a>
 80120ce:	bd70      	pop	{r4, r5, r6, pc}

080120d0 <uxr_add_output_best_effort_buffer>:
 80120d0:	b510      	push	{r4, lr}
 80120d2:	7c04      	ldrb	r4, [r0, #16]
 80120d4:	f104 0c01 	add.w	ip, r4, #1
 80120d8:	b082      	sub	sp, #8
 80120da:	f880 c010 	strb.w	ip, [r0, #16]
 80120de:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80120e2:	f005 fe4f 	bl	8017d84 <uxr_init_output_best_effort_stream>
 80120e6:	2201      	movs	r2, #1
 80120e8:	4611      	mov	r1, r2
 80120ea:	4620      	mov	r0, r4
 80120ec:	b002      	add	sp, #8
 80120ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120f2:	f7ff bf4f 	b.w	8011f94 <uxr_stream_id>
 80120f6:	bf00      	nop

080120f8 <uxr_add_output_reliable_buffer>:
 80120f8:	b510      	push	{r4, lr}
 80120fa:	b084      	sub	sp, #16
 80120fc:	4684      	mov	ip, r0
 80120fe:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012102:	9000      	str	r0, [sp, #0]
 8012104:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8012108:	2028      	movs	r0, #40	@ 0x28
 801210a:	fb00 c004 	mla	r0, r0, r4, ip
 801210e:	f104 0e01 	add.w	lr, r4, #1
 8012112:	3018      	adds	r0, #24
 8012114:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8012118:	f005 feb2 	bl	8017e80 <uxr_init_output_reliable_stream>
 801211c:	2201      	movs	r2, #1
 801211e:	2102      	movs	r1, #2
 8012120:	4620      	mov	r0, r4
 8012122:	b004      	add	sp, #16
 8012124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012128:	f7ff bf34 	b.w	8011f94 <uxr_stream_id>

0801212c <uxr_add_input_best_effort_buffer>:
 801212c:	b510      	push	{r4, lr}
 801212e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8012132:	4603      	mov	r3, r0
 8012134:	1c62      	adds	r2, r4, #1
 8012136:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801213a:	b082      	sub	sp, #8
 801213c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012144:	f005 fc26 	bl	8017994 <uxr_init_input_best_effort_stream>
 8012148:	2200      	movs	r2, #0
 801214a:	2101      	movs	r1, #1
 801214c:	4620      	mov	r0, r4
 801214e:	b002      	add	sp, #8
 8012150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012154:	f7ff bf1e 	b.w	8011f94 <uxr_stream_id>

08012158 <uxr_add_input_reliable_buffer>:
 8012158:	b510      	push	{r4, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	4684      	mov	ip, r0
 801215e:	9806      	ldr	r0, [sp, #24]
 8012160:	9000      	str	r0, [sp, #0]
 8012162:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8012166:	2018      	movs	r0, #24
 8012168:	fb00 c004 	mla	r0, r0, r4, ip
 801216c:	f104 0e01 	add.w	lr, r4, #1
 8012170:	3048      	adds	r0, #72	@ 0x48
 8012172:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8012176:	f005 fc59 	bl	8017a2c <uxr_init_input_reliable_stream>
 801217a:	2200      	movs	r2, #0
 801217c:	2102      	movs	r1, #2
 801217e:	4620      	mov	r0, r4
 8012180:	b004      	add	sp, #16
 8012182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012186:	f7ff bf05 	b.w	8011f94 <uxr_stream_id>
 801218a:	bf00      	nop

0801218c <uxr_get_output_best_effort_stream>:
 801218c:	7c03      	ldrb	r3, [r0, #16]
 801218e:	428b      	cmp	r3, r1
 8012190:	bf8c      	ite	hi
 8012192:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012196:	2000      	movls	r0, #0
 8012198:	4770      	bx	lr
 801219a:	bf00      	nop

0801219c <uxr_get_output_reliable_stream>:
 801219c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80121a0:	428b      	cmp	r3, r1
 80121a2:	bf83      	ittte	hi
 80121a4:	2328      	movhi	r3, #40	@ 0x28
 80121a6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80121aa:	3018      	addhi	r0, #24
 80121ac:	2000      	movls	r0, #0
 80121ae:	4770      	bx	lr

080121b0 <uxr_get_input_best_effort_stream>:
 80121b0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80121b4:	428b      	cmp	r3, r1
 80121b6:	bf86      	itte	hi
 80121b8:	3121      	addhi	r1, #33	@ 0x21
 80121ba:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80121be:	2000      	movls	r0, #0
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop

080121c4 <uxr_get_input_reliable_stream>:
 80121c4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80121c8:	428b      	cmp	r3, r1
 80121ca:	bf83      	ittte	hi
 80121cc:	2318      	movhi	r3, #24
 80121ce:	fb03 0001 	mlahi	r0, r3, r1, r0
 80121d2:	3048      	addhi	r0, #72	@ 0x48
 80121d4:	2000      	movls	r0, #0
 80121d6:	4770      	bx	lr

080121d8 <uxr_output_streams_confirmed>:
 80121d8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80121dc:	b183      	cbz	r3, 8012200 <uxr_output_streams_confirmed+0x28>
 80121de:	b570      	push	{r4, r5, r6, lr}
 80121e0:	4606      	mov	r6, r0
 80121e2:	f100 0518 	add.w	r5, r0, #24
 80121e6:	2400      	movs	r4, #0
 80121e8:	e001      	b.n	80121ee <uxr_output_streams_confirmed+0x16>
 80121ea:	3528      	adds	r5, #40	@ 0x28
 80121ec:	b138      	cbz	r0, 80121fe <uxr_output_streams_confirmed+0x26>
 80121ee:	4628      	mov	r0, r5
 80121f0:	f006 f8ee 	bl	80183d0 <uxr_is_output_up_to_date>
 80121f4:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80121f8:	3401      	adds	r4, #1
 80121fa:	42a3      	cmp	r3, r4
 80121fc:	d8f5      	bhi.n	80121ea <uxr_output_streams_confirmed+0x12>
 80121fe:	bd70      	pop	{r4, r5, r6, pc}
 8012200:	2001      	movs	r0, #1
 8012202:	4770      	bx	lr

08012204 <uxr_buffer_submessage_header>:
 8012204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012206:	4604      	mov	r4, r0
 8012208:	460e      	mov	r6, r1
 801220a:	2104      	movs	r1, #4
 801220c:	4615      	mov	r5, r2
 801220e:	461f      	mov	r7, r3
 8012210:	f7fd fd2a 	bl	800fc68 <ucdr_align_to>
 8012214:	2301      	movs	r3, #1
 8012216:	ea47 0203 	orr.w	r2, r7, r3
 801221a:	4631      	mov	r1, r6
 801221c:	7523      	strb	r3, [r4, #20]
 801221e:	4620      	mov	r0, r4
 8012220:	462b      	mov	r3, r5
 8012222:	f000 fa27 	bl	8012674 <uxr_serialize_submessage_header>
 8012226:	4620      	mov	r0, r4
 8012228:	f7fd fd34 	bl	800fc94 <ucdr_buffer_remaining>
 801222c:	42a8      	cmp	r0, r5
 801222e:	bf34      	ite	cc
 8012230:	2000      	movcc	r0, #0
 8012232:	2001      	movcs	r0, #1
 8012234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012236:	bf00      	nop

08012238 <uxr_read_submessage_header>:
 8012238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801223c:	4604      	mov	r4, r0
 801223e:	460d      	mov	r5, r1
 8012240:	2104      	movs	r1, #4
 8012242:	4616      	mov	r6, r2
 8012244:	4698      	mov	r8, r3
 8012246:	f7fd fd0f 	bl	800fc68 <ucdr_align_to>
 801224a:	4620      	mov	r0, r4
 801224c:	f7fd fd22 	bl	800fc94 <ucdr_buffer_remaining>
 8012250:	2803      	cmp	r0, #3
 8012252:	bf8c      	ite	hi
 8012254:	2701      	movhi	r7, #1
 8012256:	2700      	movls	r7, #0
 8012258:	d802      	bhi.n	8012260 <uxr_read_submessage_header+0x28>
 801225a:	4638      	mov	r0, r7
 801225c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012260:	4633      	mov	r3, r6
 8012262:	4642      	mov	r2, r8
 8012264:	4620      	mov	r0, r4
 8012266:	4629      	mov	r1, r5
 8012268:	f000 fa18 	bl	801269c <uxr_deserialize_submessage_header>
 801226c:	f898 3000 	ldrb.w	r3, [r8]
 8012270:	f003 0201 	and.w	r2, r3, #1
 8012274:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012278:	f888 3000 	strb.w	r3, [r8]
 801227c:	7522      	strb	r2, [r4, #20]
 801227e:	4638      	mov	r0, r7
 8012280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012284 <uxr_submessage_padding>:
 8012284:	f010 0003 	ands.w	r0, r0, #3
 8012288:	bf18      	it	ne
 801228a:	f1c0 0004 	rsbne	r0, r0, #4
 801228e:	4770      	bx	lr

08012290 <uxr_millis>:
 8012290:	b510      	push	{r4, lr}
 8012292:	b084      	sub	sp, #16
 8012294:	4669      	mov	r1, sp
 8012296:	2001      	movs	r0, #1
 8012298:	f7ef fec6 	bl	8002028 <clock_gettime>
 801229c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80122a0:	4906      	ldr	r1, [pc, #24]	@ (80122bc <uxr_millis+0x2c>)
 80122a2:	fba0 0301 	umull	r0, r3, r0, r1
 80122a6:	1900      	adds	r0, r0, r4
 80122a8:	fb01 3102 	mla	r1, r1, r2, r3
 80122ac:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80122b0:	4a03      	ldr	r2, [pc, #12]	@ (80122c0 <uxr_millis+0x30>)
 80122b2:	2300      	movs	r3, #0
 80122b4:	f7ee f9d8 	bl	8000668 <__aeabi_ldivmod>
 80122b8:	b004      	add	sp, #16
 80122ba:	bd10      	pop	{r4, pc}
 80122bc:	3b9aca00 	.word	0x3b9aca00
 80122c0:	000f4240 	.word	0x000f4240

080122c4 <uxr_nanos>:
 80122c4:	b510      	push	{r4, lr}
 80122c6:	b084      	sub	sp, #16
 80122c8:	4669      	mov	r1, sp
 80122ca:	2001      	movs	r0, #1
 80122cc:	f7ef feac 	bl	8002028 <clock_gettime>
 80122d0:	4a06      	ldr	r2, [pc, #24]	@ (80122ec <uxr_nanos+0x28>)
 80122d2:	9800      	ldr	r0, [sp, #0]
 80122d4:	9902      	ldr	r1, [sp, #8]
 80122d6:	9c01      	ldr	r4, [sp, #4]
 80122d8:	fba0 0302 	umull	r0, r3, r0, r2
 80122dc:	1840      	adds	r0, r0, r1
 80122de:	fb02 3304 	mla	r3, r2, r4, r3
 80122e2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80122e6:	b004      	add	sp, #16
 80122e8:	bd10      	pop	{r4, pc}
 80122ea:	bf00      	nop
 80122ec:	3b9aca00 	.word	0x3b9aca00

080122f0 <on_full_output_buffer_fragmented>:
 80122f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f4:	460c      	mov	r4, r1
 80122f6:	b08a      	sub	sp, #40	@ 0x28
 80122f8:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80122fc:	4606      	mov	r6, r0
 80122fe:	f104 0008 	add.w	r0, r4, #8
 8012302:	f7ff ff4b 	bl	801219c <uxr_get_output_reliable_stream>
 8012306:	4605      	mov	r5, r0
 8012308:	f006 f86c 	bl	80183e4 <get_available_free_slots>
 801230c:	b968      	cbnz	r0, 801232a <on_full_output_buffer_fragmented+0x3a>
 801230e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8012312:	4620      	mov	r0, r4
 8012314:	4798      	blx	r3
 8012316:	b918      	cbnz	r0, 8012320 <on_full_output_buffer_fragmented+0x30>
 8012318:	2001      	movs	r0, #1
 801231a:	b00a      	add	sp, #40	@ 0x28
 801231c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012320:	4628      	mov	r0, r5
 8012322:	f006 f85f 	bl	80183e4 <get_available_free_slots>
 8012326:	2800      	cmp	r0, #0
 8012328:	d0f6      	beq.n	8012318 <on_full_output_buffer_fragmented+0x28>
 801232a:	8929      	ldrh	r1, [r5, #8]
 801232c:	89eb      	ldrh	r3, [r5, #14]
 801232e:	7b28      	ldrb	r0, [r5, #12]
 8012330:	686a      	ldr	r2, [r5, #4]
 8012332:	fbb2 f8f1 	udiv	r8, r2, r1
 8012336:	fbb3 f2f1 	udiv	r2, r3, r1
 801233a:	fb01 3112 	mls	r1, r1, r2, r3
 801233e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8012342:	b289      	uxth	r1, r1
 8012344:	fb08 f101 	mul.w	r1, r8, r1
 8012348:	30fc      	adds	r0, #252	@ 0xfc
 801234a:	f1a8 0804 	sub.w	r8, r8, #4
 801234e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8012352:	4440      	add	r0, r8
 8012354:	b287      	uxth	r7, r0
 8012356:	1bdb      	subs	r3, r3, r7
 8012358:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801235c:	682b      	ldr	r3, [r5, #0]
 801235e:	3104      	adds	r1, #4
 8012360:	4419      	add	r1, r3
 8012362:	4642      	mov	r2, r8
 8012364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012368:	9300      	str	r3, [sp, #0]
 801236a:	a802      	add	r0, sp, #8
 801236c:	2300      	movs	r3, #0
 801236e:	f7fd fc4f 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 8012372:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012376:	f102 0308 	add.w	r3, r2, #8
 801237a:	4543      	cmp	r3, r8
 801237c:	d928      	bls.n	80123d0 <on_full_output_buffer_fragmented+0xe0>
 801237e:	463a      	mov	r2, r7
 8012380:	2300      	movs	r3, #0
 8012382:	210d      	movs	r1, #13
 8012384:	a802      	add	r0, sp, #8
 8012386:	f7ff ff3d 	bl	8012204 <uxr_buffer_submessage_header>
 801238a:	8929      	ldrh	r1, [r5, #8]
 801238c:	89eb      	ldrh	r3, [r5, #14]
 801238e:	fbb3 f2f1 	udiv	r2, r3, r1
 8012392:	fb01 3312 	mls	r3, r1, r2, r3
 8012396:	b29b      	uxth	r3, r3
 8012398:	686a      	ldr	r2, [r5, #4]
 801239a:	fbb2 f2f1 	udiv	r2, r2, r1
 801239e:	fb02 f303 	mul.w	r3, r2, r3
 80123a2:	682a      	ldr	r2, [r5, #0]
 80123a4:	f842 8003 	str.w	r8, [r2, r3]
 80123a8:	89e8      	ldrh	r0, [r5, #14]
 80123aa:	2101      	movs	r1, #1
 80123ac:	f006 f83a 	bl	8018424 <uxr_seq_num_add>
 80123b0:	9904      	ldr	r1, [sp, #16]
 80123b2:	9a03      	ldr	r2, [sp, #12]
 80123b4:	81e8      	strh	r0, [r5, #14]
 80123b6:	1a52      	subs	r2, r2, r1
 80123b8:	4630      	mov	r0, r6
 80123ba:	f7fd fc3b 	bl	800fc34 <ucdr_init_buffer>
 80123be:	4630      	mov	r0, r6
 80123c0:	490f      	ldr	r1, [pc, #60]	@ (8012400 <on_full_output_buffer_fragmented+0x110>)
 80123c2:	4622      	mov	r2, r4
 80123c4:	f7fd fc0a 	bl	800fbdc <ucdr_set_on_full_buffer_callback>
 80123c8:	2000      	movs	r0, #0
 80123ca:	b00a      	add	sp, #40	@ 0x28
 80123cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123d0:	b292      	uxth	r2, r2
 80123d2:	2302      	movs	r3, #2
 80123d4:	210d      	movs	r1, #13
 80123d6:	a802      	add	r0, sp, #8
 80123d8:	f7ff ff14 	bl	8012204 <uxr_buffer_submessage_header>
 80123dc:	8928      	ldrh	r0, [r5, #8]
 80123de:	89eb      	ldrh	r3, [r5, #14]
 80123e0:	fbb3 f1f0 	udiv	r1, r3, r0
 80123e4:	fb00 3311 	mls	r3, r0, r1, r3
 80123e8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80123ec:	6869      	ldr	r1, [r5, #4]
 80123ee:	fbb1 f1f0 	udiv	r1, r1, r0
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	fb01 f303 	mul.w	r3, r1, r3
 80123f8:	6829      	ldr	r1, [r5, #0]
 80123fa:	3208      	adds	r2, #8
 80123fc:	50ca      	str	r2, [r1, r3]
 80123fe:	e7d3      	b.n	80123a8 <on_full_output_buffer_fragmented+0xb8>
 8012400:	080122f1 	.word	0x080122f1

08012404 <uxr_prepare_output_stream>:
 8012404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012406:	b087      	sub	sp, #28
 8012408:	2707      	movs	r7, #7
 801240a:	9202      	str	r2, [sp, #8]
 801240c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801240e:	9103      	str	r1, [sp, #12]
 8012410:	2500      	movs	r5, #0
 8012412:	3204      	adds	r2, #4
 8012414:	e9cd 7500 	strd	r7, r5, [sp]
 8012418:	461c      	mov	r4, r3
 801241a:	4606      	mov	r6, r0
 801241c:	f7fe ffc2 	bl	80113a4 <uxr_prepare_stream_to_write_submessage>
 8012420:	f080 0201 	eor.w	r2, r0, #1
 8012424:	b2d2      	uxtb	r2, r2
 8012426:	75a2      	strb	r2, [r4, #22]
 8012428:	b112      	cbz	r2, 8012430 <uxr_prepare_output_stream+0x2c>
 801242a:	4628      	mov	r0, r5
 801242c:	b007      	add	sp, #28
 801242e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012430:	aa05      	add	r2, sp, #20
 8012432:	9902      	ldr	r1, [sp, #8]
 8012434:	4630      	mov	r0, r6
 8012436:	f7ff f8eb 	bl	8011610 <uxr_init_base_object_request>
 801243a:	a905      	add	r1, sp, #20
 801243c:	4605      	mov	r5, r0
 801243e:	4620      	mov	r0, r4
 8012440:	f000 ffa0 	bl	8013384 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012444:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012448:	69a6      	ldr	r6, [r4, #24]
 801244a:	69e7      	ldr	r7, [r4, #28]
 801244c:	1a52      	subs	r2, r2, r1
 801244e:	4620      	mov	r0, r4
 8012450:	f7fd fbf0 	bl	800fc34 <ucdr_init_buffer>
 8012454:	4620      	mov	r0, r4
 8012456:	463a      	mov	r2, r7
 8012458:	4631      	mov	r1, r6
 801245a:	f7fd fbbf 	bl	800fbdc <ucdr_set_on_full_buffer_callback>
 801245e:	4628      	mov	r0, r5
 8012460:	b007      	add	sp, #28
 8012462:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012464 <uxr_prepare_output_stream_fragmented>:
 8012464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012468:	b091      	sub	sp, #68	@ 0x44
 801246a:	4605      	mov	r5, r0
 801246c:	9105      	str	r1, [sp, #20]
 801246e:	3008      	adds	r0, #8
 8012470:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012474:	461e      	mov	r6, r3
 8012476:	9204      	str	r2, [sp, #16]
 8012478:	f7ff fe90 	bl	801219c <uxr_get_output_reliable_stream>
 801247c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012480:	2b01      	cmp	r3, #1
 8012482:	f000 8091 	beq.w	80125a8 <uxr_prepare_output_stream_fragmented+0x144>
 8012486:	4604      	mov	r4, r0
 8012488:	2800      	cmp	r0, #0
 801248a:	f000 808d 	beq.w	80125a8 <uxr_prepare_output_stream_fragmented+0x144>
 801248e:	f005 ffa9 	bl	80183e4 <get_available_free_slots>
 8012492:	2800      	cmp	r0, #0
 8012494:	f000 8083 	beq.w	801259e <uxr_prepare_output_stream_fragmented+0x13a>
 8012498:	8922      	ldrh	r2, [r4, #8]
 801249a:	89e7      	ldrh	r7, [r4, #14]
 801249c:	fbb7 f9f2 	udiv	r9, r7, r2
 80124a0:	fb02 7919 	mls	r9, r2, r9, r7
 80124a4:	fa1f f989 	uxth.w	r9, r9
 80124a8:	6863      	ldr	r3, [r4, #4]
 80124aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80124ae:	6823      	ldr	r3, [r4, #0]
 80124b0:	9203      	str	r2, [sp, #12]
 80124b2:	fb02 f909 	mul.w	r9, r2, r9
 80124b6:	f109 0904 	add.w	r9, r9, #4
 80124ba:	4499      	add	r9, r3
 80124bc:	7b23      	ldrb	r3, [r4, #12]
 80124be:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80124c2:	4543      	cmp	r3, r8
 80124c4:	f1a2 0b04 	sub.w	fp, r2, #4
 80124c8:	d37a      	bcc.n	80125c0 <uxr_prepare_output_stream_fragmented+0x15c>
 80124ca:	f1ab 0a04 	sub.w	sl, fp, #4
 80124ce:	ebaa 0a03 	sub.w	sl, sl, r3
 80124d2:	465a      	mov	r2, fp
 80124d4:	2300      	movs	r3, #0
 80124d6:	4649      	mov	r1, r9
 80124d8:	a808      	add	r0, sp, #32
 80124da:	f8cd 8000 	str.w	r8, [sp]
 80124de:	f7fd fb97 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 80124e2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80124e4:	fa1f fa8a 	uxth.w	sl, sl
 80124e8:	4652      	mov	r2, sl
 80124ea:	f103 0a08 	add.w	sl, r3, #8
 80124ee:	45da      	cmp	sl, fp
 80124f0:	bf34      	ite	cc
 80124f2:	2302      	movcc	r3, #2
 80124f4:	2300      	movcs	r3, #0
 80124f6:	210d      	movs	r1, #13
 80124f8:	a808      	add	r0, sp, #32
 80124fa:	f7ff fe83 	bl	8012204 <uxr_buffer_submessage_header>
 80124fe:	8921      	ldrh	r1, [r4, #8]
 8012500:	fbb7 f2f1 	udiv	r2, r7, r1
 8012504:	fb01 7212 	mls	r2, r1, r2, r7
 8012508:	b292      	uxth	r2, r2
 801250a:	6863      	ldr	r3, [r4, #4]
 801250c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012510:	fb02 f303 	mul.w	r3, r2, r3
 8012514:	6822      	ldr	r2, [r4, #0]
 8012516:	4638      	mov	r0, r7
 8012518:	f842 b003 	str.w	fp, [r2, r3]
 801251c:	2101      	movs	r1, #1
 801251e:	f005 ff81 	bl	8018424 <uxr_seq_num_add>
 8012522:	9b03      	ldr	r3, [sp, #12]
 8012524:	f108 0104 	add.w	r1, r8, #4
 8012528:	f1a3 0208 	sub.w	r2, r3, #8
 801252c:	eba2 0208 	sub.w	r2, r2, r8
 8012530:	4449      	add	r1, r9
 8012532:	4607      	mov	r7, r0
 8012534:	4630      	mov	r0, r6
 8012536:	f7fd fb7d 	bl	800fc34 <ucdr_init_buffer>
 801253a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801253c:	81e7      	strh	r7, [r4, #14]
 801253e:	1d1a      	adds	r2, r3, #4
 8012540:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012544:	bf28      	it	cs
 8012546:	2200      	movcs	r2, #0
 8012548:	2300      	movs	r3, #0
 801254a:	b292      	uxth	r2, r2
 801254c:	2107      	movs	r1, #7
 801254e:	4630      	mov	r0, r6
 8012550:	f7ff fe58 	bl	8012204 <uxr_buffer_submessage_header>
 8012554:	9904      	ldr	r1, [sp, #16]
 8012556:	aa07      	add	r2, sp, #28
 8012558:	4628      	mov	r0, r5
 801255a:	f7ff f859 	bl	8011610 <uxr_init_base_object_request>
 801255e:	4604      	mov	r4, r0
 8012560:	b318      	cbz	r0, 80125aa <uxr_prepare_output_stream_fragmented+0x146>
 8012562:	a907      	add	r1, sp, #28
 8012564:	4630      	mov	r0, r6
 8012566:	f000 ff0d 	bl	8013384 <uxr_serialize_WRITE_DATA_Payload_Data>
 801256a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801256e:	4630      	mov	r0, r6
 8012570:	1a52      	subs	r2, r2, r1
 8012572:	f7fd fb5f 	bl	800fc34 <ucdr_init_buffer>
 8012576:	9b05      	ldr	r3, [sp, #20]
 8012578:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801257c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801257e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012582:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012584:	491b      	ldr	r1, [pc, #108]	@ (80125f4 <uxr_prepare_output_stream_fragmented+0x190>)
 8012586:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801258a:	4630      	mov	r0, r6
 801258c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012590:	462a      	mov	r2, r5
 8012592:	f7fd fb23 	bl	800fbdc <ucdr_set_on_full_buffer_callback>
 8012596:	4620      	mov	r0, r4
 8012598:	b011      	add	sp, #68	@ 0x44
 801259a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801259e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80125a0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80125a2:	4628      	mov	r0, r5
 80125a4:	4798      	blx	r3
 80125a6:	b920      	cbnz	r0, 80125b2 <uxr_prepare_output_stream_fragmented+0x14e>
 80125a8:	2400      	movs	r4, #0
 80125aa:	4620      	mov	r0, r4
 80125ac:	b011      	add	sp, #68	@ 0x44
 80125ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b2:	4620      	mov	r0, r4
 80125b4:	f005 ff16 	bl	80183e4 <get_available_free_slots>
 80125b8:	2800      	cmp	r0, #0
 80125ba:	f47f af6d 	bne.w	8012498 <uxr_prepare_output_stream_fragmented+0x34>
 80125be:	e7f3      	b.n	80125a8 <uxr_prepare_output_stream_fragmented+0x144>
 80125c0:	4638      	mov	r0, r7
 80125c2:	2101      	movs	r1, #1
 80125c4:	f005 ff2e 	bl	8018424 <uxr_seq_num_add>
 80125c8:	8921      	ldrh	r1, [r4, #8]
 80125ca:	fbb0 f2f1 	udiv	r2, r0, r1
 80125ce:	fb01 0912 	mls	r9, r1, r2, r0
 80125d2:	fa1f f289 	uxth.w	r2, r9
 80125d6:	6863      	ldr	r3, [r4, #4]
 80125d8:	fbb3 f9f1 	udiv	r9, r3, r1
 80125dc:	6823      	ldr	r3, [r4, #0]
 80125de:	fb02 f909 	mul.w	r9, r2, r9
 80125e2:	f109 0904 	add.w	r9, r9, #4
 80125e6:	4499      	add	r9, r3
 80125e8:	4607      	mov	r7, r0
 80125ea:	7b23      	ldrb	r3, [r4, #12]
 80125ec:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80125f0:	e76b      	b.n	80124ca <uxr_prepare_output_stream_fragmented+0x66>
 80125f2:	bf00      	nop
 80125f4:	080122f1 	.word	0x080122f1

080125f8 <uxr_serialize_message_header>:
 80125f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125fa:	b083      	sub	sp, #12
 80125fc:	4616      	mov	r6, r2
 80125fe:	4604      	mov	r4, r0
 8012600:	9301      	str	r3, [sp, #4]
 8012602:	460d      	mov	r5, r1
 8012604:	9f08      	ldr	r7, [sp, #32]
 8012606:	f7fc f9c9 	bl	800e99c <ucdr_serialize_uint8_t>
 801260a:	4631      	mov	r1, r6
 801260c:	4620      	mov	r0, r4
 801260e:	f7fc f9c5 	bl	800e99c <ucdr_serialize_uint8_t>
 8012612:	9a01      	ldr	r2, [sp, #4]
 8012614:	2101      	movs	r1, #1
 8012616:	4620      	mov	r0, r4
 8012618:	f7fc fa6c 	bl	800eaf4 <ucdr_serialize_endian_uint16_t>
 801261c:	062b      	lsls	r3, r5, #24
 801261e:	d501      	bpl.n	8012624 <uxr_serialize_message_header+0x2c>
 8012620:	b003      	add	sp, #12
 8012622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012624:	2204      	movs	r2, #4
 8012626:	4639      	mov	r1, r7
 8012628:	4620      	mov	r0, r4
 801262a:	b003      	add	sp, #12
 801262c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012630:	f005 b826 	b.w	8017680 <ucdr_serialize_array_uint8_t>

08012634 <uxr_deserialize_message_header>:
 8012634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012636:	b083      	sub	sp, #12
 8012638:	4616      	mov	r6, r2
 801263a:	4604      	mov	r4, r0
 801263c:	9301      	str	r3, [sp, #4]
 801263e:	460d      	mov	r5, r1
 8012640:	9f08      	ldr	r7, [sp, #32]
 8012642:	f7fc f9c1 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8012646:	4631      	mov	r1, r6
 8012648:	4620      	mov	r0, r4
 801264a:	f7fc f9bd 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 801264e:	9a01      	ldr	r2, [sp, #4]
 8012650:	2101      	movs	r1, #1
 8012652:	4620      	mov	r0, r4
 8012654:	f7fc fb42 	bl	800ecdc <ucdr_deserialize_endian_uint16_t>
 8012658:	f995 3000 	ldrsb.w	r3, [r5]
 801265c:	2b00      	cmp	r3, #0
 801265e:	da01      	bge.n	8012664 <uxr_deserialize_message_header+0x30>
 8012660:	b003      	add	sp, #12
 8012662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012664:	2204      	movs	r2, #4
 8012666:	4639      	mov	r1, r7
 8012668:	4620      	mov	r0, r4
 801266a:	b003      	add	sp, #12
 801266c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012670:	f005 b86a 	b.w	8017748 <ucdr_deserialize_array_uint8_t>

08012674 <uxr_serialize_submessage_header>:
 8012674:	b530      	push	{r4, r5, lr}
 8012676:	b083      	sub	sp, #12
 8012678:	4615      	mov	r5, r2
 801267a:	4604      	mov	r4, r0
 801267c:	9301      	str	r3, [sp, #4]
 801267e:	f7fc f98d 	bl	800e99c <ucdr_serialize_uint8_t>
 8012682:	4629      	mov	r1, r5
 8012684:	4620      	mov	r0, r4
 8012686:	f7fc f989 	bl	800e99c <ucdr_serialize_uint8_t>
 801268a:	9a01      	ldr	r2, [sp, #4]
 801268c:	2101      	movs	r1, #1
 801268e:	4620      	mov	r0, r4
 8012690:	b003      	add	sp, #12
 8012692:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012696:	f7fc ba2d 	b.w	800eaf4 <ucdr_serialize_endian_uint16_t>
 801269a:	bf00      	nop

0801269c <uxr_deserialize_submessage_header>:
 801269c:	b530      	push	{r4, r5, lr}
 801269e:	b083      	sub	sp, #12
 80126a0:	4615      	mov	r5, r2
 80126a2:	4604      	mov	r4, r0
 80126a4:	9301      	str	r3, [sp, #4]
 80126a6:	f7fc f98f 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80126aa:	4629      	mov	r1, r5
 80126ac:	4620      	mov	r0, r4
 80126ae:	f7fc f98b 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80126b2:	9a01      	ldr	r2, [sp, #4]
 80126b4:	2101      	movs	r1, #1
 80126b6:	4620      	mov	r0, r4
 80126b8:	b003      	add	sp, #12
 80126ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126be:	f7fc bb0d 	b.w	800ecdc <ucdr_deserialize_endian_uint16_t>
 80126c2:	bf00      	nop

080126c4 <uxr_serialize_CLIENT_Representation>:
 80126c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126c8:	2204      	movs	r2, #4
 80126ca:	460e      	mov	r6, r1
 80126cc:	4605      	mov	r5, r0
 80126ce:	f004 ffd7 	bl	8017680 <ucdr_serialize_array_uint8_t>
 80126d2:	2202      	movs	r2, #2
 80126d4:	4607      	mov	r7, r0
 80126d6:	1d31      	adds	r1, r6, #4
 80126d8:	4628      	mov	r0, r5
 80126da:	f004 ffd1 	bl	8017680 <ucdr_serialize_array_uint8_t>
 80126de:	4038      	ands	r0, r7
 80126e0:	2202      	movs	r2, #2
 80126e2:	1db1      	adds	r1, r6, #6
 80126e4:	b2c7      	uxtb	r7, r0
 80126e6:	4628      	mov	r0, r5
 80126e8:	f004 ffca 	bl	8017680 <ucdr_serialize_array_uint8_t>
 80126ec:	2204      	movs	r2, #4
 80126ee:	4007      	ands	r7, r0
 80126f0:	f106 0108 	add.w	r1, r6, #8
 80126f4:	4628      	mov	r0, r5
 80126f6:	f004 ffc3 	bl	8017680 <ucdr_serialize_array_uint8_t>
 80126fa:	7b31      	ldrb	r1, [r6, #12]
 80126fc:	4007      	ands	r7, r0
 80126fe:	4628      	mov	r0, r5
 8012700:	f7fc f94c 	bl	800e99c <ucdr_serialize_uint8_t>
 8012704:	7b71      	ldrb	r1, [r6, #13]
 8012706:	4007      	ands	r7, r0
 8012708:	4628      	mov	r0, r5
 801270a:	f7fc f919 	bl	800e940 <ucdr_serialize_bool>
 801270e:	7b73      	ldrb	r3, [r6, #13]
 8012710:	ea07 0800 	and.w	r8, r7, r0
 8012714:	b93b      	cbnz	r3, 8012726 <uxr_serialize_CLIENT_Representation+0x62>
 8012716:	8bb1      	ldrh	r1, [r6, #28]
 8012718:	4628      	mov	r0, r5
 801271a:	f7fc f96b 	bl	800e9f4 <ucdr_serialize_uint16_t>
 801271e:	ea08 0000 	and.w	r0, r8, r0
 8012722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012726:	6931      	ldr	r1, [r6, #16]
 8012728:	4628      	mov	r0, r5
 801272a:	f7fc fb4d 	bl	800edc8 <ucdr_serialize_uint32_t>
 801272e:	6933      	ldr	r3, [r6, #16]
 8012730:	b1e3      	cbz	r3, 801276c <uxr_serialize_CLIENT_Representation+0xa8>
 8012732:	b1c0      	cbz	r0, 8012766 <uxr_serialize_CLIENT_Representation+0xa2>
 8012734:	4637      	mov	r7, r6
 8012736:	f04f 0900 	mov.w	r9, #0
 801273a:	e001      	b.n	8012740 <uxr_serialize_CLIENT_Representation+0x7c>
 801273c:	3708      	adds	r7, #8
 801273e:	b194      	cbz	r4, 8012766 <uxr_serialize_CLIENT_Representation+0xa2>
 8012740:	6979      	ldr	r1, [r7, #20]
 8012742:	4628      	mov	r0, r5
 8012744:	f005 f90e 	bl	8017964 <ucdr_serialize_string>
 8012748:	69b9      	ldr	r1, [r7, #24]
 801274a:	4604      	mov	r4, r0
 801274c:	4628      	mov	r0, r5
 801274e:	f005 f909 	bl	8017964 <ucdr_serialize_string>
 8012752:	6933      	ldr	r3, [r6, #16]
 8012754:	f109 0901 	add.w	r9, r9, #1
 8012758:	4004      	ands	r4, r0
 801275a:	4599      	cmp	r9, r3
 801275c:	b2e4      	uxtb	r4, r4
 801275e:	d3ed      	bcc.n	801273c <uxr_serialize_CLIENT_Representation+0x78>
 8012760:	ea08 0804 	and.w	r8, r8, r4
 8012764:	e7d7      	b.n	8012716 <uxr_serialize_CLIENT_Representation+0x52>
 8012766:	f04f 0800 	mov.w	r8, #0
 801276a:	e7d4      	b.n	8012716 <uxr_serialize_CLIENT_Representation+0x52>
 801276c:	ea08 0800 	and.w	r8, r8, r0
 8012770:	e7d1      	b.n	8012716 <uxr_serialize_CLIENT_Representation+0x52>
 8012772:	bf00      	nop

08012774 <uxr_deserialize_CLIENT_Representation>:
 8012774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012778:	2204      	movs	r2, #4
 801277a:	460c      	mov	r4, r1
 801277c:	4605      	mov	r5, r0
 801277e:	f004 ffe3 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8012782:	2202      	movs	r2, #2
 8012784:	4607      	mov	r7, r0
 8012786:	1d21      	adds	r1, r4, #4
 8012788:	4628      	mov	r0, r5
 801278a:	f004 ffdd 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 801278e:	4038      	ands	r0, r7
 8012790:	2202      	movs	r2, #2
 8012792:	1da1      	adds	r1, r4, #6
 8012794:	b2c6      	uxtb	r6, r0
 8012796:	4628      	mov	r0, r5
 8012798:	f004 ffd6 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 801279c:	2204      	movs	r2, #4
 801279e:	4006      	ands	r6, r0
 80127a0:	f104 0108 	add.w	r1, r4, #8
 80127a4:	4628      	mov	r0, r5
 80127a6:	f004 ffcf 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 80127aa:	f104 010c 	add.w	r1, r4, #12
 80127ae:	4006      	ands	r6, r0
 80127b0:	4628      	mov	r0, r5
 80127b2:	f7fc f909 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80127b6:	f104 010d 	add.w	r1, r4, #13
 80127ba:	ea06 0700 	and.w	r7, r6, r0
 80127be:	4628      	mov	r0, r5
 80127c0:	f7fc f8d4 	bl	800e96c <ucdr_deserialize_bool>
 80127c4:	7b63      	ldrb	r3, [r4, #13]
 80127c6:	4007      	ands	r7, r0
 80127c8:	b93b      	cbnz	r3, 80127da <uxr_deserialize_CLIENT_Representation+0x66>
 80127ca:	f104 011c 	add.w	r1, r4, #28
 80127ce:	4628      	mov	r0, r5
 80127d0:	f7fc fa10 	bl	800ebf4 <ucdr_deserialize_uint16_t>
 80127d4:	4038      	ands	r0, r7
 80127d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127da:	f104 0110 	add.w	r1, r4, #16
 80127de:	4628      	mov	r0, r5
 80127e0:	f7fc fc22 	bl	800f028 <ucdr_deserialize_uint32_t>
 80127e4:	6923      	ldr	r3, [r4, #16]
 80127e6:	2b01      	cmp	r3, #1
 80127e8:	d903      	bls.n	80127f2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80127ea:	2301      	movs	r3, #1
 80127ec:	75ab      	strb	r3, [r5, #22]
 80127ee:	2700      	movs	r7, #0
 80127f0:	e7eb      	b.n	80127ca <uxr_deserialize_CLIENT_Representation+0x56>
 80127f2:	b30b      	cbz	r3, 8012838 <uxr_deserialize_CLIENT_Representation+0xc4>
 80127f4:	2800      	cmp	r0, #0
 80127f6:	d0fa      	beq.n	80127ee <uxr_deserialize_CLIENT_Representation+0x7a>
 80127f8:	46a0      	mov	r8, r4
 80127fa:	f04f 0900 	mov.w	r9, #0
 80127fe:	e001      	b.n	8012804 <uxr_deserialize_CLIENT_Representation+0x90>
 8012800:	2e00      	cmp	r6, #0
 8012802:	d0f4      	beq.n	80127ee <uxr_deserialize_CLIENT_Representation+0x7a>
 8012804:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801280c:	4628      	mov	r0, r5
 801280e:	f005 f8b9 	bl	8017984 <ucdr_deserialize_string>
 8012812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012816:	4606      	mov	r6, r0
 8012818:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801281c:	4628      	mov	r0, r5
 801281e:	f005 f8b1 	bl	8017984 <ucdr_deserialize_string>
 8012822:	6923      	ldr	r3, [r4, #16]
 8012824:	f109 0901 	add.w	r9, r9, #1
 8012828:	4006      	ands	r6, r0
 801282a:	4599      	cmp	r9, r3
 801282c:	f108 0808 	add.w	r8, r8, #8
 8012830:	b2f6      	uxtb	r6, r6
 8012832:	d3e5      	bcc.n	8012800 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012834:	4037      	ands	r7, r6
 8012836:	e7c8      	b.n	80127ca <uxr_deserialize_CLIENT_Representation+0x56>
 8012838:	4007      	ands	r7, r0
 801283a:	e7c6      	b.n	80127ca <uxr_deserialize_CLIENT_Representation+0x56>

0801283c <uxr_serialize_AGENT_Representation>:
 801283c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012840:	2204      	movs	r2, #4
 8012842:	460f      	mov	r7, r1
 8012844:	4605      	mov	r5, r0
 8012846:	f004 ff1b 	bl	8017680 <ucdr_serialize_array_uint8_t>
 801284a:	2202      	movs	r2, #2
 801284c:	4604      	mov	r4, r0
 801284e:	1d39      	adds	r1, r7, #4
 8012850:	4628      	mov	r0, r5
 8012852:	f004 ff15 	bl	8017680 <ucdr_serialize_array_uint8_t>
 8012856:	4020      	ands	r0, r4
 8012858:	2202      	movs	r2, #2
 801285a:	1db9      	adds	r1, r7, #6
 801285c:	b2c4      	uxtb	r4, r0
 801285e:	4628      	mov	r0, r5
 8012860:	f004 ff0e 	bl	8017680 <ucdr_serialize_array_uint8_t>
 8012864:	7a39      	ldrb	r1, [r7, #8]
 8012866:	4004      	ands	r4, r0
 8012868:	4628      	mov	r0, r5
 801286a:	f7fc f869 	bl	800e940 <ucdr_serialize_bool>
 801286e:	7a3b      	ldrb	r3, [r7, #8]
 8012870:	ea00 0804 	and.w	r8, r0, r4
 8012874:	b913      	cbnz	r3, 801287c <uxr_serialize_AGENT_Representation+0x40>
 8012876:	4640      	mov	r0, r8
 8012878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801287c:	68f9      	ldr	r1, [r7, #12]
 801287e:	4628      	mov	r0, r5
 8012880:	f7fc faa2 	bl	800edc8 <ucdr_serialize_uint32_t>
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	b303      	cbz	r3, 80128ca <uxr_serialize_AGENT_Representation+0x8e>
 8012888:	b1d0      	cbz	r0, 80128c0 <uxr_serialize_AGENT_Representation+0x84>
 801288a:	463e      	mov	r6, r7
 801288c:	f04f 0900 	mov.w	r9, #0
 8012890:	e001      	b.n	8012896 <uxr_serialize_AGENT_Representation+0x5a>
 8012892:	3608      	adds	r6, #8
 8012894:	b1a4      	cbz	r4, 80128c0 <uxr_serialize_AGENT_Representation+0x84>
 8012896:	6931      	ldr	r1, [r6, #16]
 8012898:	4628      	mov	r0, r5
 801289a:	f005 f863 	bl	8017964 <ucdr_serialize_string>
 801289e:	6971      	ldr	r1, [r6, #20]
 80128a0:	4604      	mov	r4, r0
 80128a2:	4628      	mov	r0, r5
 80128a4:	f005 f85e 	bl	8017964 <ucdr_serialize_string>
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	f109 0901 	add.w	r9, r9, #1
 80128ae:	4004      	ands	r4, r0
 80128b0:	4599      	cmp	r9, r3
 80128b2:	b2e4      	uxtb	r4, r4
 80128b4:	d3ed      	bcc.n	8012892 <uxr_serialize_AGENT_Representation+0x56>
 80128b6:	ea08 0804 	and.w	r8, r8, r4
 80128ba:	4640      	mov	r0, r8
 80128bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128c0:	f04f 0800 	mov.w	r8, #0
 80128c4:	4640      	mov	r0, r8
 80128c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128ca:	ea08 0800 	and.w	r8, r8, r0
 80128ce:	e7d2      	b.n	8012876 <uxr_serialize_AGENT_Representation+0x3a>

080128d0 <uxr_serialize_DATAWRITER_Representation>:
 80128d0:	b570      	push	{r4, r5, r6, lr}
 80128d2:	460d      	mov	r5, r1
 80128d4:	7809      	ldrb	r1, [r1, #0]
 80128d6:	4606      	mov	r6, r0
 80128d8:	f7fc f860 	bl	800e99c <ucdr_serialize_uint8_t>
 80128dc:	4604      	mov	r4, r0
 80128de:	b130      	cbz	r0, 80128ee <uxr_serialize_DATAWRITER_Representation+0x1e>
 80128e0:	782b      	ldrb	r3, [r5, #0]
 80128e2:	2b02      	cmp	r3, #2
 80128e4:	d00c      	beq.n	8012900 <uxr_serialize_DATAWRITER_Representation+0x30>
 80128e6:	2b03      	cmp	r3, #3
 80128e8:	d010      	beq.n	801290c <uxr_serialize_DATAWRITER_Representation+0x3c>
 80128ea:	2b01      	cmp	r3, #1
 80128ec:	d008      	beq.n	8012900 <uxr_serialize_DATAWRITER_Representation+0x30>
 80128ee:	2202      	movs	r2, #2
 80128f0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80128f4:	4630      	mov	r0, r6
 80128f6:	f004 fec3 	bl	8017680 <ucdr_serialize_array_uint8_t>
 80128fa:	4020      	ands	r0, r4
 80128fc:	b2c0      	uxtb	r0, r0
 80128fe:	bd70      	pop	{r4, r5, r6, pc}
 8012900:	6869      	ldr	r1, [r5, #4]
 8012902:	4630      	mov	r0, r6
 8012904:	f005 f82e 	bl	8017964 <ucdr_serialize_string>
 8012908:	4604      	mov	r4, r0
 801290a:	e7f0      	b.n	80128ee <uxr_serialize_DATAWRITER_Representation+0x1e>
 801290c:	4629      	mov	r1, r5
 801290e:	4630      	mov	r0, r6
 8012910:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012914:	3104      	adds	r1, #4
 8012916:	f7fd fa29 	bl	800fd6c <ucdr_serialize_sequence_uint8_t>
 801291a:	4604      	mov	r4, r0
 801291c:	e7e7      	b.n	80128ee <uxr_serialize_DATAWRITER_Representation+0x1e>
 801291e:	bf00      	nop

08012920 <uxr_serialize_ObjectVariant.part.0>:
 8012920:	b570      	push	{r4, r5, r6, lr}
 8012922:	780b      	ldrb	r3, [r1, #0]
 8012924:	3b01      	subs	r3, #1
 8012926:	460c      	mov	r4, r1
 8012928:	4605      	mov	r5, r0
 801292a:	2b0d      	cmp	r3, #13
 801292c:	d854      	bhi.n	80129d8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801292e:	e8df f003 	tbb	[pc, r3]
 8012932:	0730      	.short	0x0730
 8012934:	07071b1b 	.word	0x07071b1b
 8012938:	0c530707 	.word	0x0c530707
 801293c:	494e0c0c 	.word	0x494e0c0c
 8012940:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012944:	3104      	adds	r1, #4
 8012946:	f7ff bfc3 	b.w	80128d0 <uxr_serialize_DATAWRITER_Representation>
 801294a:	7909      	ldrb	r1, [r1, #4]
 801294c:	f7fc f826 	bl	800e99c <ucdr_serialize_uint8_t>
 8012950:	b1e8      	cbz	r0, 801298e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8012952:	7923      	ldrb	r3, [r4, #4]
 8012954:	2b01      	cmp	r3, #1
 8012956:	d001      	beq.n	801295c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012958:	2b02      	cmp	r3, #2
 801295a:	d13d      	bne.n	80129d8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801295c:	68a1      	ldr	r1, [r4, #8]
 801295e:	4628      	mov	r0, r5
 8012960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012964:	f004 bffe 	b.w	8017964 <ucdr_serialize_string>
 8012968:	7909      	ldrb	r1, [r1, #4]
 801296a:	f7fc f817 	bl	800e99c <ucdr_serialize_uint8_t>
 801296e:	4606      	mov	r6, r0
 8012970:	b120      	cbz	r0, 801297c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012972:	7923      	ldrb	r3, [r4, #4]
 8012974:	2b02      	cmp	r3, #2
 8012976:	d039      	beq.n	80129ec <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012978:	2b03      	cmp	r3, #3
 801297a:	d02f      	beq.n	80129dc <uxr_serialize_ObjectVariant.part.0+0xbc>
 801297c:	2202      	movs	r2, #2
 801297e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8012982:	4628      	mov	r0, r5
 8012984:	f004 fe7c 	bl	8017680 <ucdr_serialize_array_uint8_t>
 8012988:	4030      	ands	r0, r6
 801298a:	b2c0      	uxtb	r0, r0
 801298c:	bd70      	pop	{r4, r5, r6, pc}
 801298e:	2000      	movs	r0, #0
 8012990:	bd70      	pop	{r4, r5, r6, pc}
 8012992:	7909      	ldrb	r1, [r1, #4]
 8012994:	f7fc f802 	bl	800e99c <ucdr_serialize_uint8_t>
 8012998:	4606      	mov	r6, r0
 801299a:	b158      	cbz	r0, 80129b4 <uxr_serialize_ObjectVariant.part.0+0x94>
 801299c:	7923      	ldrb	r3, [r4, #4]
 801299e:	2b02      	cmp	r3, #2
 80129a0:	d003      	beq.n	80129aa <uxr_serialize_ObjectVariant.part.0+0x8a>
 80129a2:	2b03      	cmp	r3, #3
 80129a4:	d028      	beq.n	80129f8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80129a6:	2b01      	cmp	r3, #1
 80129a8:	d104      	bne.n	80129b4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80129aa:	68a1      	ldr	r1, [r4, #8]
 80129ac:	4628      	mov	r0, r5
 80129ae:	f004 ffd9 	bl	8017964 <ucdr_serialize_string>
 80129b2:	4606      	mov	r6, r0
 80129b4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80129b8:	4628      	mov	r0, r5
 80129ba:	f7fc fd2b 	bl	800f414 <ucdr_serialize_int16_t>
 80129be:	4030      	ands	r0, r6
 80129c0:	b2c0      	uxtb	r0, r0
 80129c2:	bd70      	pop	{r4, r5, r6, pc}
 80129c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129c8:	3104      	adds	r1, #4
 80129ca:	f7ff be7b 	b.w	80126c4 <uxr_serialize_CLIENT_Representation>
 80129ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129d2:	3104      	adds	r1, #4
 80129d4:	f7ff bf32 	b.w	801283c <uxr_serialize_AGENT_Representation>
 80129d8:	2001      	movs	r0, #1
 80129da:	bd70      	pop	{r4, r5, r6, pc}
 80129dc:	68a2      	ldr	r2, [r4, #8]
 80129de:	f104 010c 	add.w	r1, r4, #12
 80129e2:	4628      	mov	r0, r5
 80129e4:	f7fd f9c2 	bl	800fd6c <ucdr_serialize_sequence_uint8_t>
 80129e8:	4606      	mov	r6, r0
 80129ea:	e7c7      	b.n	801297c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80129ec:	68a1      	ldr	r1, [r4, #8]
 80129ee:	4628      	mov	r0, r5
 80129f0:	f004 ffb8 	bl	8017964 <ucdr_serialize_string>
 80129f4:	4606      	mov	r6, r0
 80129f6:	e7c1      	b.n	801297c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80129f8:	68a2      	ldr	r2, [r4, #8]
 80129fa:	f104 010c 	add.w	r1, r4, #12
 80129fe:	4628      	mov	r0, r5
 8012a00:	f7fd f9b4 	bl	800fd6c <ucdr_serialize_sequence_uint8_t>
 8012a04:	4606      	mov	r6, r0
 8012a06:	e7d5      	b.n	80129b4 <uxr_serialize_ObjectVariant.part.0+0x94>

08012a08 <uxr_deserialize_DATAWRITER_Representation>:
 8012a08:	b570      	push	{r4, r5, r6, lr}
 8012a0a:	4606      	mov	r6, r0
 8012a0c:	460d      	mov	r5, r1
 8012a0e:	f7fb ffdb 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8012a12:	4604      	mov	r4, r0
 8012a14:	b130      	cbz	r0, 8012a24 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012a16:	782b      	ldrb	r3, [r5, #0]
 8012a18:	2b02      	cmp	r3, #2
 8012a1a:	d00c      	beq.n	8012a36 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012a1c:	2b03      	cmp	r3, #3
 8012a1e:	d012      	beq.n	8012a46 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012a20:	2b01      	cmp	r3, #1
 8012a22:	d008      	beq.n	8012a36 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012a24:	2202      	movs	r2, #2
 8012a26:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012a2a:	4630      	mov	r0, r6
 8012a2c:	f004 fe8c 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8012a30:	4020      	ands	r0, r4
 8012a32:	b2c0      	uxtb	r0, r0
 8012a34:	bd70      	pop	{r4, r5, r6, pc}
 8012a36:	6869      	ldr	r1, [r5, #4]
 8012a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a3c:	4630      	mov	r0, r6
 8012a3e:	f004 ffa1 	bl	8017984 <ucdr_deserialize_string>
 8012a42:	4604      	mov	r4, r0
 8012a44:	e7ee      	b.n	8012a24 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012a46:	1d2b      	adds	r3, r5, #4
 8012a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a4c:	f105 0108 	add.w	r1, r5, #8
 8012a50:	4630      	mov	r0, r6
 8012a52:	f7fd f99d 	bl	800fd90 <ucdr_deserialize_sequence_uint8_t>
 8012a56:	4604      	mov	r4, r0
 8012a58:	e7e4      	b.n	8012a24 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012a5a:	bf00      	nop

08012a5c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012a5c:	b570      	push	{r4, r5, r6, lr}
 8012a5e:	460d      	mov	r5, r1
 8012a60:	7809      	ldrb	r1, [r1, #0]
 8012a62:	4606      	mov	r6, r0
 8012a64:	f7fb ff6c 	bl	800e940 <ucdr_serialize_bool>
 8012a68:	782b      	ldrb	r3, [r5, #0]
 8012a6a:	4604      	mov	r4, r0
 8012a6c:	b94b      	cbnz	r3, 8012a82 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012a6e:	7a29      	ldrb	r1, [r5, #8]
 8012a70:	4630      	mov	r0, r6
 8012a72:	f7fb ff65 	bl	800e940 <ucdr_serialize_bool>
 8012a76:	7a2b      	ldrb	r3, [r5, #8]
 8012a78:	4004      	ands	r4, r0
 8012a7a:	b2e4      	uxtb	r4, r4
 8012a7c:	b943      	cbnz	r3, 8012a90 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012a7e:	4620      	mov	r0, r4
 8012a80:	bd70      	pop	{r4, r5, r6, pc}
 8012a82:	6869      	ldr	r1, [r5, #4]
 8012a84:	4630      	mov	r0, r6
 8012a86:	f004 ff6d 	bl	8017964 <ucdr_serialize_string>
 8012a8a:	4004      	ands	r4, r0
 8012a8c:	b2e4      	uxtb	r4, r4
 8012a8e:	e7ee      	b.n	8012a6e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012a90:	68e9      	ldr	r1, [r5, #12]
 8012a92:	4630      	mov	r0, r6
 8012a94:	f004 ff66 	bl	8017964 <ucdr_serialize_string>
 8012a98:	4004      	ands	r4, r0
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	bd70      	pop	{r4, r5, r6, pc}
 8012a9e:	bf00      	nop

08012aa0 <uxr_serialize_OBJK_Topic_Binary>:
 8012aa0:	b570      	push	{r4, r5, r6, lr}
 8012aa2:	460d      	mov	r5, r1
 8012aa4:	6809      	ldr	r1, [r1, #0]
 8012aa6:	4606      	mov	r6, r0
 8012aa8:	f004 ff5c 	bl	8017964 <ucdr_serialize_string>
 8012aac:	7929      	ldrb	r1, [r5, #4]
 8012aae:	4604      	mov	r4, r0
 8012ab0:	4630      	mov	r0, r6
 8012ab2:	f7fb ff45 	bl	800e940 <ucdr_serialize_bool>
 8012ab6:	792b      	ldrb	r3, [r5, #4]
 8012ab8:	4004      	ands	r4, r0
 8012aba:	b2e4      	uxtb	r4, r4
 8012abc:	b943      	cbnz	r3, 8012ad0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012abe:	7b29      	ldrb	r1, [r5, #12]
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	f7fb ff3d 	bl	800e940 <ucdr_serialize_bool>
 8012ac6:	7b2b      	ldrb	r3, [r5, #12]
 8012ac8:	4004      	ands	r4, r0
 8012aca:	b93b      	cbnz	r3, 8012adc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012acc:	4620      	mov	r0, r4
 8012ace:	bd70      	pop	{r4, r5, r6, pc}
 8012ad0:	68a9      	ldr	r1, [r5, #8]
 8012ad2:	4630      	mov	r0, r6
 8012ad4:	f004 ff46 	bl	8017964 <ucdr_serialize_string>
 8012ad8:	4004      	ands	r4, r0
 8012ada:	e7f0      	b.n	8012abe <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012adc:	6929      	ldr	r1, [r5, #16]
 8012ade:	4630      	mov	r0, r6
 8012ae0:	f004 ff40 	bl	8017964 <ucdr_serialize_string>
 8012ae4:	4004      	ands	r4, r0
 8012ae6:	b2e4      	uxtb	r4, r4
 8012ae8:	4620      	mov	r0, r4
 8012aea:	bd70      	pop	{r4, r5, r6, pc}

08012aec <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012af0:	460c      	mov	r4, r1
 8012af2:	7809      	ldrb	r1, [r1, #0]
 8012af4:	4606      	mov	r6, r0
 8012af6:	f7fb ff23 	bl	800e940 <ucdr_serialize_bool>
 8012afa:	7823      	ldrb	r3, [r4, #0]
 8012afc:	4605      	mov	r5, r0
 8012afe:	b96b      	cbnz	r3, 8012b1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012b00:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012b04:	4630      	mov	r0, r6
 8012b06:	f7fb ff1b 	bl	800e940 <ucdr_serialize_bool>
 8012b0a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012b0e:	4005      	ands	r5, r0
 8012b10:	b2ed      	uxtb	r5, r5
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d169      	bne.n	8012bea <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012b16:	4628      	mov	r0, r5
 8012b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b1c:	6861      	ldr	r1, [r4, #4]
 8012b1e:	4630      	mov	r0, r6
 8012b20:	f7fc f952 	bl	800edc8 <ucdr_serialize_uint32_t>
 8012b24:	6863      	ldr	r3, [r4, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d06b      	beq.n	8012c02 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012b2a:	2800      	cmp	r0, #0
 8012b2c:	d067      	beq.n	8012bfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b2e:	68a1      	ldr	r1, [r4, #8]
 8012b30:	4630      	mov	r0, r6
 8012b32:	f004 ff17 	bl	8017964 <ucdr_serialize_string>
 8012b36:	6863      	ldr	r3, [r4, #4]
 8012b38:	2b01      	cmp	r3, #1
 8012b3a:	d953      	bls.n	8012be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	d05e      	beq.n	8012bfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b40:	68e1      	ldr	r1, [r4, #12]
 8012b42:	4630      	mov	r0, r6
 8012b44:	f004 ff0e 	bl	8017964 <ucdr_serialize_string>
 8012b48:	6863      	ldr	r3, [r4, #4]
 8012b4a:	2b02      	cmp	r3, #2
 8012b4c:	d94a      	bls.n	8012be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b4e:	2800      	cmp	r0, #0
 8012b50:	d055      	beq.n	8012bfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b52:	6921      	ldr	r1, [r4, #16]
 8012b54:	4630      	mov	r0, r6
 8012b56:	f004 ff05 	bl	8017964 <ucdr_serialize_string>
 8012b5a:	6863      	ldr	r3, [r4, #4]
 8012b5c:	2b03      	cmp	r3, #3
 8012b5e:	d941      	bls.n	8012be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b60:	2800      	cmp	r0, #0
 8012b62:	d04c      	beq.n	8012bfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b64:	6961      	ldr	r1, [r4, #20]
 8012b66:	4630      	mov	r0, r6
 8012b68:	f004 fefc 	bl	8017964 <ucdr_serialize_string>
 8012b6c:	6863      	ldr	r3, [r4, #4]
 8012b6e:	2b04      	cmp	r3, #4
 8012b70:	d938      	bls.n	8012be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b72:	2800      	cmp	r0, #0
 8012b74:	d043      	beq.n	8012bfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b76:	69a1      	ldr	r1, [r4, #24]
 8012b78:	4630      	mov	r0, r6
 8012b7a:	f004 fef3 	bl	8017964 <ucdr_serialize_string>
 8012b7e:	6863      	ldr	r3, [r4, #4]
 8012b80:	2b05      	cmp	r3, #5
 8012b82:	d92f      	bls.n	8012be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b84:	2800      	cmp	r0, #0
 8012b86:	d03a      	beq.n	8012bfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b88:	69e1      	ldr	r1, [r4, #28]
 8012b8a:	4630      	mov	r0, r6
 8012b8c:	f004 feea 	bl	8017964 <ucdr_serialize_string>
 8012b90:	6863      	ldr	r3, [r4, #4]
 8012b92:	2b06      	cmp	r3, #6
 8012b94:	d926      	bls.n	8012be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b96:	b390      	cbz	r0, 8012bfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b98:	6a21      	ldr	r1, [r4, #32]
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	f004 fee2 	bl	8017964 <ucdr_serialize_string>
 8012ba0:	6863      	ldr	r3, [r4, #4]
 8012ba2:	2b07      	cmp	r3, #7
 8012ba4:	d91e      	bls.n	8012be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ba6:	b350      	cbz	r0, 8012bfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ba8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012baa:	4630      	mov	r0, r6
 8012bac:	f004 feda 	bl	8017964 <ucdr_serialize_string>
 8012bb0:	6863      	ldr	r3, [r4, #4]
 8012bb2:	2b08      	cmp	r3, #8
 8012bb4:	d916      	bls.n	8012be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012bb6:	b310      	cbz	r0, 8012bfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012bb8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012bba:	4630      	mov	r0, r6
 8012bbc:	f004 fed2 	bl	8017964 <ucdr_serialize_string>
 8012bc0:	6863      	ldr	r3, [r4, #4]
 8012bc2:	2b09      	cmp	r3, #9
 8012bc4:	d90e      	bls.n	8012be4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012bc6:	b1d0      	cbz	r0, 8012bfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012bc8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012bcc:	2709      	movs	r7, #9
 8012bce:	e000      	b.n	8012bd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012bd0:	b1a8      	cbz	r0, 8012bfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012bd2:	f858 1b04 	ldr.w	r1, [r8], #4
 8012bd6:	4630      	mov	r0, r6
 8012bd8:	f004 fec4 	bl	8017964 <ucdr_serialize_string>
 8012bdc:	6862      	ldr	r2, [r4, #4]
 8012bde:	3701      	adds	r7, #1
 8012be0:	4297      	cmp	r7, r2
 8012be2:	d3f5      	bcc.n	8012bd0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012be4:	4005      	ands	r5, r0
 8012be6:	b2ed      	uxtb	r5, r5
 8012be8:	e78a      	b.n	8012b00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012bea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012bec:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012bf0:	4630      	mov	r0, r6
 8012bf2:	f7fd f8bb 	bl	800fd6c <ucdr_serialize_sequence_uint8_t>
 8012bf6:	4005      	ands	r5, r0
 8012bf8:	4628      	mov	r0, r5
 8012bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bfe:	2500      	movs	r5, #0
 8012c00:	e77e      	b.n	8012b00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012c02:	4028      	ands	r0, r5
 8012c04:	b2c5      	uxtb	r5, r0
 8012c06:	e77b      	b.n	8012b00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012c08 <uxr_serialize_OBJK_Publisher_Binary>:
 8012c08:	b570      	push	{r4, r5, r6, lr}
 8012c0a:	460d      	mov	r5, r1
 8012c0c:	7809      	ldrb	r1, [r1, #0]
 8012c0e:	4606      	mov	r6, r0
 8012c10:	f7fb fe96 	bl	800e940 <ucdr_serialize_bool>
 8012c14:	782b      	ldrb	r3, [r5, #0]
 8012c16:	4604      	mov	r4, r0
 8012c18:	b94b      	cbnz	r3, 8012c2e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012c1a:	7a29      	ldrb	r1, [r5, #8]
 8012c1c:	4630      	mov	r0, r6
 8012c1e:	f7fb fe8f 	bl	800e940 <ucdr_serialize_bool>
 8012c22:	7a2b      	ldrb	r3, [r5, #8]
 8012c24:	4004      	ands	r4, r0
 8012c26:	b2e4      	uxtb	r4, r4
 8012c28:	b943      	cbnz	r3, 8012c3c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	bd70      	pop	{r4, r5, r6, pc}
 8012c2e:	6869      	ldr	r1, [r5, #4]
 8012c30:	4630      	mov	r0, r6
 8012c32:	f004 fe97 	bl	8017964 <ucdr_serialize_string>
 8012c36:	4004      	ands	r4, r0
 8012c38:	b2e4      	uxtb	r4, r4
 8012c3a:	e7ee      	b.n	8012c1a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012c3c:	f105 010c 	add.w	r1, r5, #12
 8012c40:	4630      	mov	r0, r6
 8012c42:	f7ff ff53 	bl	8012aec <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012c46:	4004      	ands	r4, r0
 8012c48:	4620      	mov	r0, r4
 8012c4a:	bd70      	pop	{r4, r5, r6, pc}

08012c4c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012c4c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012c50:	4688      	mov	r8, r1
 8012c52:	8809      	ldrh	r1, [r1, #0]
 8012c54:	4681      	mov	r9, r0
 8012c56:	f7fb fecd 	bl	800e9f4 <ucdr_serialize_uint16_t>
 8012c5a:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012c5e:	4606      	mov	r6, r0
 8012c60:	4648      	mov	r0, r9
 8012c62:	f7fb fe6d 	bl	800e940 <ucdr_serialize_bool>
 8012c66:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012c6a:	4006      	ands	r6, r0
 8012c6c:	b2f5      	uxtb	r5, r6
 8012c6e:	b9eb      	cbnz	r3, 8012cac <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012c70:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012c74:	4648      	mov	r0, r9
 8012c76:	f7fb fe63 	bl	800e940 <ucdr_serialize_bool>
 8012c7a:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012c7e:	4005      	ands	r5, r0
 8012c80:	bb7b      	cbnz	r3, 8012ce2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012c82:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012c86:	4648      	mov	r0, r9
 8012c88:	f7fb fe5a 	bl	800e940 <ucdr_serialize_bool>
 8012c8c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012c90:	4005      	ands	r5, r0
 8012c92:	b9f3      	cbnz	r3, 8012cd2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012c94:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012c98:	4648      	mov	r0, r9
 8012c9a:	f7fb fe51 	bl	800e940 <ucdr_serialize_bool>
 8012c9e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012ca2:	4005      	ands	r5, r0
 8012ca4:	b94b      	cbnz	r3, 8012cba <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012ca6:	4628      	mov	r0, r5
 8012ca8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012cac:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012cb0:	4648      	mov	r0, r9
 8012cb2:	f7fb fe9f 	bl	800e9f4 <ucdr_serialize_uint16_t>
 8012cb6:	4005      	ands	r5, r0
 8012cb8:	e7da      	b.n	8012c70 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012cba:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012cbe:	f108 011c 	add.w	r1, r8, #28
 8012cc2:	4648      	mov	r0, r9
 8012cc4:	f7fd f852 	bl	800fd6c <ucdr_serialize_sequence_uint8_t>
 8012cc8:	4028      	ands	r0, r5
 8012cca:	b2c5      	uxtb	r5, r0
 8012ccc:	4628      	mov	r0, r5
 8012cce:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012cd2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012cd6:	4648      	mov	r0, r9
 8012cd8:	f7fc f876 	bl	800edc8 <ucdr_serialize_uint32_t>
 8012cdc:	4028      	ands	r0, r5
 8012cde:	b2c5      	uxtb	r5, r0
 8012ce0:	e7d8      	b.n	8012c94 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012ce2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012ce6:	4648      	mov	r0, r9
 8012ce8:	f7fc f86e 	bl	800edc8 <ucdr_serialize_uint32_t>
 8012cec:	4028      	ands	r0, r5
 8012cee:	b2c5      	uxtb	r5, r0
 8012cf0:	e7c7      	b.n	8012c82 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012cf2:	bf00      	nop

08012cf4 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cf6:	2202      	movs	r2, #2
 8012cf8:	460d      	mov	r5, r1
 8012cfa:	4606      	mov	r6, r0
 8012cfc:	f004 fcc0 	bl	8017680 <ucdr_serialize_array_uint8_t>
 8012d00:	78a9      	ldrb	r1, [r5, #2]
 8012d02:	4604      	mov	r4, r0
 8012d04:	4630      	mov	r0, r6
 8012d06:	f7fb fe1b 	bl	800e940 <ucdr_serialize_bool>
 8012d0a:	78ab      	ldrb	r3, [r5, #2]
 8012d0c:	4004      	ands	r4, r0
 8012d0e:	b2e4      	uxtb	r4, r4
 8012d10:	b90b      	cbnz	r3, 8012d16 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012d12:	4620      	mov	r0, r4
 8012d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d16:	f105 0108 	add.w	r1, r5, #8
 8012d1a:	4630      	mov	r0, r6
 8012d1c:	f7ff ff96 	bl	8012c4c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012d20:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012d24:	4607      	mov	r7, r0
 8012d26:	4630      	mov	r0, r6
 8012d28:	f7fb fe0a 	bl	800e940 <ucdr_serialize_bool>
 8012d2c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012d30:	4038      	ands	r0, r7
 8012d32:	b2c7      	uxtb	r7, r0
 8012d34:	b913      	cbnz	r3, 8012d3c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012d36:	403c      	ands	r4, r7
 8012d38:	4620      	mov	r0, r4
 8012d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d3c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012d40:	4630      	mov	r0, r6
 8012d42:	f7fc fa97 	bl	800f274 <ucdr_serialize_uint64_t>
 8012d46:	4007      	ands	r7, r0
 8012d48:	e7f5      	b.n	8012d36 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012d4a:	bf00      	nop

08012d4c <uxr_deserialize_ObjectVariant>:
 8012d4c:	b570      	push	{r4, r5, r6, lr}
 8012d4e:	4605      	mov	r5, r0
 8012d50:	460e      	mov	r6, r1
 8012d52:	f7fb fe39 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8012d56:	b168      	cbz	r0, 8012d74 <uxr_deserialize_ObjectVariant+0x28>
 8012d58:	7833      	ldrb	r3, [r6, #0]
 8012d5a:	3b01      	subs	r3, #1
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	2b0d      	cmp	r3, #13
 8012d60:	d809      	bhi.n	8012d76 <uxr_deserialize_ObjectVariant+0x2a>
 8012d62:	e8df f003 	tbb	[pc, r3]
 8012d66:	0a41      	.short	0x0a41
 8012d68:	0a0a2323 	.word	0x0a0a2323
 8012d6c:	10080a0a 	.word	0x10080a0a
 8012d70:	565c1010 	.word	0x565c1010
 8012d74:	2400      	movs	r4, #0
 8012d76:	4620      	mov	r0, r4
 8012d78:	bd70      	pop	{r4, r5, r6, pc}
 8012d7a:	1d31      	adds	r1, r6, #4
 8012d7c:	4628      	mov	r0, r5
 8012d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d82:	f7ff be41 	b.w	8012a08 <uxr_deserialize_DATAWRITER_Representation>
 8012d86:	1d31      	adds	r1, r6, #4
 8012d88:	4628      	mov	r0, r5
 8012d8a:	f7fb fe1d 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8012d8e:	2800      	cmp	r0, #0
 8012d90:	d0f0      	beq.n	8012d74 <uxr_deserialize_ObjectVariant+0x28>
 8012d92:	7933      	ldrb	r3, [r6, #4]
 8012d94:	2b01      	cmp	r3, #1
 8012d96:	d001      	beq.n	8012d9c <uxr_deserialize_ObjectVariant+0x50>
 8012d98:	2b02      	cmp	r3, #2
 8012d9a:	d1ec      	bne.n	8012d76 <uxr_deserialize_ObjectVariant+0x2a>
 8012d9c:	68b1      	ldr	r1, [r6, #8]
 8012d9e:	4628      	mov	r0, r5
 8012da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012da8:	f004 bdec 	b.w	8017984 <ucdr_deserialize_string>
 8012dac:	1d31      	adds	r1, r6, #4
 8012dae:	4628      	mov	r0, r5
 8012db0:	f7fb fe0a 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8012db4:	4604      	mov	r4, r0
 8012db6:	b170      	cbz	r0, 8012dd6 <uxr_deserialize_ObjectVariant+0x8a>
 8012db8:	7933      	ldrb	r3, [r6, #4]
 8012dba:	2b02      	cmp	r3, #2
 8012dbc:	d04c      	beq.n	8012e58 <uxr_deserialize_ObjectVariant+0x10c>
 8012dbe:	2b03      	cmp	r3, #3
 8012dc0:	d109      	bne.n	8012dd6 <uxr_deserialize_ObjectVariant+0x8a>
 8012dc2:	f106 0308 	add.w	r3, r6, #8
 8012dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012dca:	f106 010c 	add.w	r1, r6, #12
 8012dce:	4628      	mov	r0, r5
 8012dd0:	f7fc ffde 	bl	800fd90 <ucdr_deserialize_sequence_uint8_t>
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	2202      	movs	r2, #2
 8012dd8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012ddc:	4628      	mov	r0, r5
 8012dde:	f004 fcb3 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8012de2:	4020      	ands	r0, r4
 8012de4:	b2c4      	uxtb	r4, r0
 8012de6:	e7c6      	b.n	8012d76 <uxr_deserialize_ObjectVariant+0x2a>
 8012de8:	1d31      	adds	r1, r6, #4
 8012dea:	4628      	mov	r0, r5
 8012dec:	f7fb fdec 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8012df0:	4604      	mov	r4, r0
 8012df2:	b130      	cbz	r0, 8012e02 <uxr_deserialize_ObjectVariant+0xb6>
 8012df4:	7933      	ldrb	r3, [r6, #4]
 8012df6:	2b02      	cmp	r3, #2
 8012df8:	d036      	beq.n	8012e68 <uxr_deserialize_ObjectVariant+0x11c>
 8012dfa:	2b03      	cmp	r3, #3
 8012dfc:	d03c      	beq.n	8012e78 <uxr_deserialize_ObjectVariant+0x12c>
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	d032      	beq.n	8012e68 <uxr_deserialize_ObjectVariant+0x11c>
 8012e02:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012e06:	4628      	mov	r0, r5
 8012e08:	f7fc fb84 	bl	800f514 <ucdr_deserialize_int16_t>
 8012e0c:	4020      	ands	r0, r4
 8012e0e:	b2c4      	uxtb	r4, r0
 8012e10:	e7b1      	b.n	8012d76 <uxr_deserialize_ObjectVariant+0x2a>
 8012e12:	1d31      	adds	r1, r6, #4
 8012e14:	4628      	mov	r0, r5
 8012e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e1a:	f7ff bcab 	b.w	8012774 <uxr_deserialize_CLIENT_Representation>
 8012e1e:	2204      	movs	r2, #4
 8012e20:	18b1      	adds	r1, r6, r2
 8012e22:	4628      	mov	r0, r5
 8012e24:	f004 fc90 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8012e28:	2202      	movs	r2, #2
 8012e2a:	f106 0108 	add.w	r1, r6, #8
 8012e2e:	4604      	mov	r4, r0
 8012e30:	4628      	mov	r0, r5
 8012e32:	f004 fc89 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8012e36:	2202      	movs	r2, #2
 8012e38:	4004      	ands	r4, r0
 8012e3a:	f106 010a 	add.w	r1, r6, #10
 8012e3e:	4628      	mov	r0, r5
 8012e40:	f004 fc82 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8012e44:	b2e4      	uxtb	r4, r4
 8012e46:	4603      	mov	r3, r0
 8012e48:	f106 010c 	add.w	r1, r6, #12
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	401c      	ands	r4, r3
 8012e50:	f7fb fd8c 	bl	800e96c <ucdr_deserialize_bool>
 8012e54:	4004      	ands	r4, r0
 8012e56:	e78e      	b.n	8012d76 <uxr_deserialize_ObjectVariant+0x2a>
 8012e58:	68b1      	ldr	r1, [r6, #8]
 8012e5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e5e:	4628      	mov	r0, r5
 8012e60:	f004 fd90 	bl	8017984 <ucdr_deserialize_string>
 8012e64:	4604      	mov	r4, r0
 8012e66:	e7b6      	b.n	8012dd6 <uxr_deserialize_ObjectVariant+0x8a>
 8012e68:	68b1      	ldr	r1, [r6, #8]
 8012e6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e6e:	4628      	mov	r0, r5
 8012e70:	f004 fd88 	bl	8017984 <ucdr_deserialize_string>
 8012e74:	4604      	mov	r4, r0
 8012e76:	e7c4      	b.n	8012e02 <uxr_deserialize_ObjectVariant+0xb6>
 8012e78:	f106 0308 	add.w	r3, r6, #8
 8012e7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e80:	f106 010c 	add.w	r1, r6, #12
 8012e84:	4628      	mov	r0, r5
 8012e86:	f7fc ff83 	bl	800fd90 <ucdr_deserialize_sequence_uint8_t>
 8012e8a:	4604      	mov	r4, r0
 8012e8c:	e7b9      	b.n	8012e02 <uxr_deserialize_ObjectVariant+0xb6>
 8012e8e:	bf00      	nop

08012e90 <uxr_deserialize_BaseObjectRequest>:
 8012e90:	b570      	push	{r4, r5, r6, lr}
 8012e92:	2202      	movs	r2, #2
 8012e94:	4605      	mov	r5, r0
 8012e96:	460e      	mov	r6, r1
 8012e98:	f004 fc56 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8012e9c:	2202      	movs	r2, #2
 8012e9e:	4604      	mov	r4, r0
 8012ea0:	18b1      	adds	r1, r6, r2
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	f004 fc50 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8012ea8:	4020      	ands	r0, r4
 8012eaa:	b2c0      	uxtb	r0, r0
 8012eac:	bd70      	pop	{r4, r5, r6, pc}
 8012eae:	bf00      	nop

08012eb0 <uxr_serialize_ActivityInfoVariant>:
 8012eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012eb4:	460d      	mov	r5, r1
 8012eb6:	7809      	ldrb	r1, [r1, #0]
 8012eb8:	4607      	mov	r7, r0
 8012eba:	f7fb fd6f 	bl	800e99c <ucdr_serialize_uint8_t>
 8012ebe:	4681      	mov	r9, r0
 8012ec0:	b138      	cbz	r0, 8012ed2 <uxr_serialize_ActivityInfoVariant+0x22>
 8012ec2:	782b      	ldrb	r3, [r5, #0]
 8012ec4:	2b06      	cmp	r3, #6
 8012ec6:	f000 8082 	beq.w	8012fce <uxr_serialize_ActivityInfoVariant+0x11e>
 8012eca:	2b0d      	cmp	r3, #13
 8012ecc:	d016      	beq.n	8012efc <uxr_serialize_ActivityInfoVariant+0x4c>
 8012ece:	2b05      	cmp	r3, #5
 8012ed0:	d002      	beq.n	8012ed8 <uxr_serialize_ActivityInfoVariant+0x28>
 8012ed2:	4648      	mov	r0, r9
 8012ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ed8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012edc:	4638      	mov	r0, r7
 8012ede:	f7fc fa99 	bl	800f414 <ucdr_serialize_int16_t>
 8012ee2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012ee6:	4681      	mov	r9, r0
 8012ee8:	4638      	mov	r0, r7
 8012eea:	f7fc f9c3 	bl	800f274 <ucdr_serialize_uint64_t>
 8012eee:	ea09 0000 	and.w	r0, r9, r0
 8012ef2:	fa5f f980 	uxtb.w	r9, r0
 8012ef6:	4648      	mov	r0, r9
 8012ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012efc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012f00:	4638      	mov	r0, r7
 8012f02:	f7fc fa87 	bl	800f414 <ucdr_serialize_int16_t>
 8012f06:	68e9      	ldr	r1, [r5, #12]
 8012f08:	4681      	mov	r9, r0
 8012f0a:	4638      	mov	r0, r7
 8012f0c:	f7fb ff5c 	bl	800edc8 <ucdr_serialize_uint32_t>
 8012f10:	68eb      	ldr	r3, [r5, #12]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d0eb      	beq.n	8012eee <uxr_serialize_ActivityInfoVariant+0x3e>
 8012f16:	b320      	cbz	r0, 8012f62 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012f18:	f105 080c 	add.w	r8, r5, #12
 8012f1c:	2600      	movs	r6, #0
 8012f1e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8012f22:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8012f26:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8012f2a:	4638      	mov	r0, r7
 8012f2c:	f7fb fd36 	bl	800e99c <ucdr_serialize_uint8_t>
 8012f30:	2800      	cmp	r0, #0
 8012f32:	d053      	beq.n	8012fdc <uxr_serialize_ActivityInfoVariant+0x12c>
 8012f34:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8012f38:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8012f3c:	0074      	lsls	r4, r6, #1
 8012f3e:	00c9      	lsls	r1, r1, #3
 8012f40:	2b03      	cmp	r3, #3
 8012f42:	d854      	bhi.n	8012fee <uxr_serialize_ActivityInfoVariant+0x13e>
 8012f44:	e8df f003 	tbb	[pc, r3]
 8012f48:	02102132 	.word	0x02102132
 8012f4c:	4441      	add	r1, r8
 8012f4e:	4638      	mov	r0, r7
 8012f50:	6889      	ldr	r1, [r1, #8]
 8012f52:	f004 fd07 	bl	8017964 <ucdr_serialize_string>
 8012f56:	68ea      	ldr	r2, [r5, #12]
 8012f58:	3601      	adds	r6, #1
 8012f5a:	4296      	cmp	r6, r2
 8012f5c:	d242      	bcs.n	8012fe4 <uxr_serialize_ActivityInfoVariant+0x134>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d1dd      	bne.n	8012f1e <uxr_serialize_ActivityInfoVariant+0x6e>
 8012f62:	f04f 0900 	mov.w	r9, #0
 8012f66:	e7b4      	b.n	8012ed2 <uxr_serialize_ActivityInfoVariant+0x22>
 8012f68:	3108      	adds	r1, #8
 8012f6a:	4441      	add	r1, r8
 8012f6c:	2210      	movs	r2, #16
 8012f6e:	4638      	mov	r0, r7
 8012f70:	f004 fb86 	bl	8017680 <ucdr_serialize_array_uint8_t>
 8012f74:	4434      	add	r4, r6
 8012f76:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f7e:	4638      	mov	r0, r7
 8012f80:	f7fb ff22 	bl	800edc8 <ucdr_serialize_uint32_t>
 8012f84:	4020      	ands	r0, r4
 8012f86:	b2c0      	uxtb	r0, r0
 8012f88:	e7e5      	b.n	8012f56 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012f8a:	3108      	adds	r1, #8
 8012f8c:	4441      	add	r1, r8
 8012f8e:	2204      	movs	r2, #4
 8012f90:	4638      	mov	r0, r7
 8012f92:	f004 fb75 	bl	8017680 <ucdr_serialize_array_uint8_t>
 8012f96:	4434      	add	r4, r6
 8012f98:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	8b19      	ldrh	r1, [r3, #24]
 8012fa0:	4638      	mov	r0, r7
 8012fa2:	f7fb fd27 	bl	800e9f4 <ucdr_serialize_uint16_t>
 8012fa6:	4020      	ands	r0, r4
 8012fa8:	b2c0      	uxtb	r0, r0
 8012faa:	e7d4      	b.n	8012f56 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012fac:	3108      	adds	r1, #8
 8012fae:	4441      	add	r1, r8
 8012fb0:	2202      	movs	r2, #2
 8012fb2:	4638      	mov	r0, r7
 8012fb4:	f004 fb64 	bl	8017680 <ucdr_serialize_array_uint8_t>
 8012fb8:	4434      	add	r4, r6
 8012fba:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012fbe:	4604      	mov	r4, r0
 8012fc0:	7d99      	ldrb	r1, [r3, #22]
 8012fc2:	4638      	mov	r0, r7
 8012fc4:	f7fb fcea 	bl	800e99c <ucdr_serialize_uint8_t>
 8012fc8:	4020      	ands	r0, r4
 8012fca:	b2c0      	uxtb	r0, r0
 8012fcc:	e7c3      	b.n	8012f56 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012fce:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012fd2:	4638      	mov	r0, r7
 8012fd4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fd8:	f7fc ba1c 	b.w	800f414 <ucdr_serialize_int16_t>
 8012fdc:	68ea      	ldr	r2, [r5, #12]
 8012fde:	3601      	adds	r6, #1
 8012fe0:	42b2      	cmp	r2, r6
 8012fe2:	d8be      	bhi.n	8012f62 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012fe4:	ea09 0900 	and.w	r9, r9, r0
 8012fe8:	fa5f f989 	uxtb.w	r9, r9
 8012fec:	e771      	b.n	8012ed2 <uxr_serialize_ActivityInfoVariant+0x22>
 8012fee:	68eb      	ldr	r3, [r5, #12]
 8012ff0:	3601      	adds	r6, #1
 8012ff2:	429e      	cmp	r6, r3
 8012ff4:	f10a 0a18 	add.w	sl, sl, #24
 8012ff8:	d395      	bcc.n	8012f26 <uxr_serialize_ActivityInfoVariant+0x76>
 8012ffa:	e76a      	b.n	8012ed2 <uxr_serialize_ActivityInfoVariant+0x22>

08012ffc <uxr_deserialize_BaseObjectReply>:
 8012ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013000:	2202      	movs	r2, #2
 8013002:	4606      	mov	r6, r0
 8013004:	460f      	mov	r7, r1
 8013006:	f004 fb9f 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 801300a:	2202      	movs	r2, #2
 801300c:	18b9      	adds	r1, r7, r2
 801300e:	4605      	mov	r5, r0
 8013010:	4630      	mov	r0, r6
 8013012:	f004 fb99 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8013016:	1d39      	adds	r1, r7, #4
 8013018:	4680      	mov	r8, r0
 801301a:	4630      	mov	r0, r6
 801301c:	f7fb fcd4 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8013020:	1d79      	adds	r1, r7, #5
 8013022:	4604      	mov	r4, r0
 8013024:	4630      	mov	r0, r6
 8013026:	f7fb fccf 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 801302a:	ea05 0508 	and.w	r5, r5, r8
 801302e:	402c      	ands	r4, r5
 8013030:	4020      	ands	r0, r4
 8013032:	b2c0      	uxtb	r0, r0
 8013034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013038 <uxr_serialize_ReadSpecification>:
 8013038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801303c:	460e      	mov	r6, r1
 801303e:	7809      	ldrb	r1, [r1, #0]
 8013040:	4607      	mov	r7, r0
 8013042:	f7fb fcab 	bl	800e99c <ucdr_serialize_uint8_t>
 8013046:	7871      	ldrb	r1, [r6, #1]
 8013048:	4604      	mov	r4, r0
 801304a:	4638      	mov	r0, r7
 801304c:	f7fb fca6 	bl	800e99c <ucdr_serialize_uint8_t>
 8013050:	78b1      	ldrb	r1, [r6, #2]
 8013052:	4004      	ands	r4, r0
 8013054:	4638      	mov	r0, r7
 8013056:	f7fb fc73 	bl	800e940 <ucdr_serialize_bool>
 801305a:	78b3      	ldrb	r3, [r6, #2]
 801305c:	b2e4      	uxtb	r4, r4
 801305e:	4004      	ands	r4, r0
 8013060:	b94b      	cbnz	r3, 8013076 <uxr_serialize_ReadSpecification+0x3e>
 8013062:	7a31      	ldrb	r1, [r6, #8]
 8013064:	4638      	mov	r0, r7
 8013066:	f7fb fc6b 	bl	800e940 <ucdr_serialize_bool>
 801306a:	7a33      	ldrb	r3, [r6, #8]
 801306c:	4004      	ands	r4, r0
 801306e:	b943      	cbnz	r3, 8013082 <uxr_serialize_ReadSpecification+0x4a>
 8013070:	4620      	mov	r0, r4
 8013072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013076:	6871      	ldr	r1, [r6, #4]
 8013078:	4638      	mov	r0, r7
 801307a:	f004 fc73 	bl	8017964 <ucdr_serialize_string>
 801307e:	4004      	ands	r4, r0
 8013080:	e7ef      	b.n	8013062 <uxr_serialize_ReadSpecification+0x2a>
 8013082:	8971      	ldrh	r1, [r6, #10]
 8013084:	4638      	mov	r0, r7
 8013086:	f7fb fcb5 	bl	800e9f4 <ucdr_serialize_uint16_t>
 801308a:	89b1      	ldrh	r1, [r6, #12]
 801308c:	4605      	mov	r5, r0
 801308e:	4638      	mov	r0, r7
 8013090:	f7fb fcb0 	bl	800e9f4 <ucdr_serialize_uint16_t>
 8013094:	89f1      	ldrh	r1, [r6, #14]
 8013096:	4005      	ands	r5, r0
 8013098:	4638      	mov	r0, r7
 801309a:	f7fb fcab 	bl	800e9f4 <ucdr_serialize_uint16_t>
 801309e:	8a31      	ldrh	r1, [r6, #16]
 80130a0:	4680      	mov	r8, r0
 80130a2:	4638      	mov	r0, r7
 80130a4:	f7fb fca6 	bl	800e9f4 <ucdr_serialize_uint16_t>
 80130a8:	b2ed      	uxtb	r5, r5
 80130aa:	4025      	ands	r5, r4
 80130ac:	ea08 0505 	and.w	r5, r8, r5
 80130b0:	ea00 0405 	and.w	r4, r0, r5
 80130b4:	4620      	mov	r0, r4
 80130b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ba:	bf00      	nop

080130bc <uxr_serialize_CREATE_CLIENT_Payload>:
 80130bc:	f7ff bb02 	b.w	80126c4 <uxr_serialize_CLIENT_Representation>

080130c0 <uxr_serialize_CREATE_Payload>:
 80130c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c2:	2202      	movs	r2, #2
 80130c4:	4607      	mov	r7, r0
 80130c6:	460e      	mov	r6, r1
 80130c8:	f004 fada 	bl	8017680 <ucdr_serialize_array_uint8_t>
 80130cc:	2202      	movs	r2, #2
 80130ce:	18b1      	adds	r1, r6, r2
 80130d0:	4605      	mov	r5, r0
 80130d2:	4638      	mov	r0, r7
 80130d4:	f004 fad4 	bl	8017680 <ucdr_serialize_array_uint8_t>
 80130d8:	7931      	ldrb	r1, [r6, #4]
 80130da:	4604      	mov	r4, r0
 80130dc:	4638      	mov	r0, r7
 80130de:	f7fb fc5d 	bl	800e99c <ucdr_serialize_uint8_t>
 80130e2:	b170      	cbz	r0, 8013102 <uxr_serialize_CREATE_Payload+0x42>
 80130e4:	7933      	ldrb	r3, [r6, #4]
 80130e6:	402c      	ands	r4, r5
 80130e8:	3b01      	subs	r3, #1
 80130ea:	b2e4      	uxtb	r4, r4
 80130ec:	2b0d      	cmp	r3, #13
 80130ee:	d809      	bhi.n	8013104 <uxr_serialize_CREATE_Payload+0x44>
 80130f0:	e8df f003 	tbb	[pc, r3]
 80130f4:	23230a4c 	.word	0x23230a4c
 80130f8:	0a0a0a0a 	.word	0x0a0a0a0a
 80130fc:	12121208 	.word	0x12121208
 8013100:	3e45      	.short	0x3e45
 8013102:	2400      	movs	r4, #0
 8013104:	4620      	mov	r0, r4
 8013106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013108:	f106 0108 	add.w	r1, r6, #8
 801310c:	4638      	mov	r0, r7
 801310e:	f7ff fbdf 	bl	80128d0 <uxr_serialize_DATAWRITER_Representation>
 8013112:	4004      	ands	r4, r0
 8013114:	4620      	mov	r0, r4
 8013116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013118:	7a31      	ldrb	r1, [r6, #8]
 801311a:	4638      	mov	r0, r7
 801311c:	f7fb fc3e 	bl	800e99c <ucdr_serialize_uint8_t>
 8013120:	2800      	cmp	r0, #0
 8013122:	d0ee      	beq.n	8013102 <uxr_serialize_CREATE_Payload+0x42>
 8013124:	7a33      	ldrb	r3, [r6, #8]
 8013126:	2b01      	cmp	r3, #1
 8013128:	d001      	beq.n	801312e <uxr_serialize_CREATE_Payload+0x6e>
 801312a:	2b02      	cmp	r3, #2
 801312c:	d1ea      	bne.n	8013104 <uxr_serialize_CREATE_Payload+0x44>
 801312e:	68f1      	ldr	r1, [r6, #12]
 8013130:	4638      	mov	r0, r7
 8013132:	f004 fc17 	bl	8017964 <ucdr_serialize_string>
 8013136:	4004      	ands	r4, r0
 8013138:	e7e4      	b.n	8013104 <uxr_serialize_CREATE_Payload+0x44>
 801313a:	7a31      	ldrb	r1, [r6, #8]
 801313c:	4638      	mov	r0, r7
 801313e:	f7fb fc2d 	bl	800e99c <ucdr_serialize_uint8_t>
 8013142:	4605      	mov	r5, r0
 8013144:	b158      	cbz	r0, 801315e <uxr_serialize_CREATE_Payload+0x9e>
 8013146:	7a33      	ldrb	r3, [r6, #8]
 8013148:	2b02      	cmp	r3, #2
 801314a:	d034      	beq.n	80131b6 <uxr_serialize_CREATE_Payload+0xf6>
 801314c:	2b03      	cmp	r3, #3
 801314e:	d106      	bne.n	801315e <uxr_serialize_CREATE_Payload+0x9e>
 8013150:	68f2      	ldr	r2, [r6, #12]
 8013152:	f106 0110 	add.w	r1, r6, #16
 8013156:	4638      	mov	r0, r7
 8013158:	f7fc fe08 	bl	800fd6c <ucdr_serialize_sequence_uint8_t>
 801315c:	4605      	mov	r5, r0
 801315e:	2202      	movs	r2, #2
 8013160:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8013164:	4638      	mov	r0, r7
 8013166:	f004 fa8b 	bl	8017680 <ucdr_serialize_array_uint8_t>
 801316a:	4028      	ands	r0, r5
 801316c:	4004      	ands	r4, r0
 801316e:	e7c9      	b.n	8013104 <uxr_serialize_CREATE_Payload+0x44>
 8013170:	f106 0108 	add.w	r1, r6, #8
 8013174:	4638      	mov	r0, r7
 8013176:	f7ff faa5 	bl	80126c4 <uxr_serialize_CLIENT_Representation>
 801317a:	4004      	ands	r4, r0
 801317c:	e7c2      	b.n	8013104 <uxr_serialize_CREATE_Payload+0x44>
 801317e:	f106 0108 	add.w	r1, r6, #8
 8013182:	4638      	mov	r0, r7
 8013184:	f7ff fb5a 	bl	801283c <uxr_serialize_AGENT_Representation>
 8013188:	4004      	ands	r4, r0
 801318a:	e7bb      	b.n	8013104 <uxr_serialize_CREATE_Payload+0x44>
 801318c:	7a31      	ldrb	r1, [r6, #8]
 801318e:	4638      	mov	r0, r7
 8013190:	f7fb fc04 	bl	800e99c <ucdr_serialize_uint8_t>
 8013194:	4605      	mov	r5, r0
 8013196:	b130      	cbz	r0, 80131a6 <uxr_serialize_CREATE_Payload+0xe6>
 8013198:	7a33      	ldrb	r3, [r6, #8]
 801319a:	2b02      	cmp	r3, #2
 801319c:	d011      	beq.n	80131c2 <uxr_serialize_CREATE_Payload+0x102>
 801319e:	2b03      	cmp	r3, #3
 80131a0:	d015      	beq.n	80131ce <uxr_serialize_CREATE_Payload+0x10e>
 80131a2:	2b01      	cmp	r3, #1
 80131a4:	d00d      	beq.n	80131c2 <uxr_serialize_CREATE_Payload+0x102>
 80131a6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80131aa:	4638      	mov	r0, r7
 80131ac:	f7fc f932 	bl	800f414 <ucdr_serialize_int16_t>
 80131b0:	4028      	ands	r0, r5
 80131b2:	4004      	ands	r4, r0
 80131b4:	e7a6      	b.n	8013104 <uxr_serialize_CREATE_Payload+0x44>
 80131b6:	68f1      	ldr	r1, [r6, #12]
 80131b8:	4638      	mov	r0, r7
 80131ba:	f004 fbd3 	bl	8017964 <ucdr_serialize_string>
 80131be:	4605      	mov	r5, r0
 80131c0:	e7cd      	b.n	801315e <uxr_serialize_CREATE_Payload+0x9e>
 80131c2:	68f1      	ldr	r1, [r6, #12]
 80131c4:	4638      	mov	r0, r7
 80131c6:	f004 fbcd 	bl	8017964 <ucdr_serialize_string>
 80131ca:	4605      	mov	r5, r0
 80131cc:	e7eb      	b.n	80131a6 <uxr_serialize_CREATE_Payload+0xe6>
 80131ce:	68f2      	ldr	r2, [r6, #12]
 80131d0:	f106 0110 	add.w	r1, r6, #16
 80131d4:	4638      	mov	r0, r7
 80131d6:	f7fc fdc9 	bl	800fd6c <ucdr_serialize_sequence_uint8_t>
 80131da:	4605      	mov	r5, r0
 80131dc:	e7e3      	b.n	80131a6 <uxr_serialize_CREATE_Payload+0xe6>
 80131de:	bf00      	nop

080131e0 <uxr_deserialize_GET_INFO_Payload>:
 80131e0:	b570      	push	{r4, r5, r6, lr}
 80131e2:	2202      	movs	r2, #2
 80131e4:	4605      	mov	r5, r0
 80131e6:	460e      	mov	r6, r1
 80131e8:	f004 faae 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 80131ec:	2202      	movs	r2, #2
 80131ee:	18b1      	adds	r1, r6, r2
 80131f0:	4604      	mov	r4, r0
 80131f2:	4628      	mov	r0, r5
 80131f4:	f004 faa8 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 80131f8:	1d31      	adds	r1, r6, #4
 80131fa:	4004      	ands	r4, r0
 80131fc:	4628      	mov	r0, r5
 80131fe:	f7fb ff13 	bl	800f028 <ucdr_deserialize_uint32_t>
 8013202:	b2e4      	uxtb	r4, r4
 8013204:	4020      	ands	r0, r4
 8013206:	bd70      	pop	{r4, r5, r6, pc}

08013208 <uxr_serialize_DELETE_Payload>:
 8013208:	b570      	push	{r4, r5, r6, lr}
 801320a:	2202      	movs	r2, #2
 801320c:	4605      	mov	r5, r0
 801320e:	460e      	mov	r6, r1
 8013210:	f004 fa36 	bl	8017680 <ucdr_serialize_array_uint8_t>
 8013214:	2202      	movs	r2, #2
 8013216:	4604      	mov	r4, r0
 8013218:	18b1      	adds	r1, r6, r2
 801321a:	4628      	mov	r0, r5
 801321c:	f004 fa30 	bl	8017680 <ucdr_serialize_array_uint8_t>
 8013220:	4020      	ands	r0, r4
 8013222:	b2c0      	uxtb	r0, r0
 8013224:	bd70      	pop	{r4, r5, r6, pc}
 8013226:	bf00      	nop

08013228 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801322c:	4605      	mov	r5, r0
 801322e:	460e      	mov	r6, r1
 8013230:	f7fb fbca 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 8013234:	1c71      	adds	r1, r6, #1
 8013236:	4604      	mov	r4, r0
 8013238:	4628      	mov	r0, r5
 801323a:	f7fb fbc5 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 801323e:	2204      	movs	r2, #4
 8013240:	18b1      	adds	r1, r6, r2
 8013242:	4680      	mov	r8, r0
 8013244:	4628      	mov	r0, r5
 8013246:	f004 fa7f 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 801324a:	f106 0108 	add.w	r1, r6, #8
 801324e:	4607      	mov	r7, r0
 8013250:	2202      	movs	r2, #2
 8013252:	4628      	mov	r0, r5
 8013254:	f004 fa78 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8013258:	ea04 0308 	and.w	r3, r4, r8
 801325c:	b2db      	uxtb	r3, r3
 801325e:	ea03 0407 	and.w	r4, r3, r7
 8013262:	2202      	movs	r2, #2
 8013264:	4607      	mov	r7, r0
 8013266:	f106 010a 	add.w	r1, r6, #10
 801326a:	4628      	mov	r0, r5
 801326c:	f004 fa6c 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8013270:	f106 010c 	add.w	r1, r6, #12
 8013274:	4603      	mov	r3, r0
 8013276:	4628      	mov	r0, r5
 8013278:	461d      	mov	r5, r3
 801327a:	f7fb fb77 	bl	800e96c <ucdr_deserialize_bool>
 801327e:	403c      	ands	r4, r7
 8013280:	4025      	ands	r5, r4
 8013282:	4028      	ands	r0, r5
 8013284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013288 <uxr_deserialize_STATUS_Payload>:
 8013288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801328c:	2202      	movs	r2, #2
 801328e:	4606      	mov	r6, r0
 8013290:	460f      	mov	r7, r1
 8013292:	f004 fa59 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8013296:	2202      	movs	r2, #2
 8013298:	18b9      	adds	r1, r7, r2
 801329a:	4605      	mov	r5, r0
 801329c:	4630      	mov	r0, r6
 801329e:	f004 fa53 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 80132a2:	1d39      	adds	r1, r7, #4
 80132a4:	4680      	mov	r8, r0
 80132a6:	4630      	mov	r0, r6
 80132a8:	f7fb fb8e 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80132ac:	1d79      	adds	r1, r7, #5
 80132ae:	4604      	mov	r4, r0
 80132b0:	4630      	mov	r0, r6
 80132b2:	f7fb fb89 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80132b6:	ea05 0508 	and.w	r5, r5, r8
 80132ba:	402c      	ands	r4, r5
 80132bc:	4020      	ands	r0, r4
 80132be:	b2c0      	uxtb	r0, r0
 80132c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132c4 <uxr_serialize_INFO_Payload>:
 80132c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132c8:	2202      	movs	r2, #2
 80132ca:	460c      	mov	r4, r1
 80132cc:	4605      	mov	r5, r0
 80132ce:	f004 f9d7 	bl	8017680 <ucdr_serialize_array_uint8_t>
 80132d2:	2202      	movs	r2, #2
 80132d4:	18a1      	adds	r1, r4, r2
 80132d6:	4680      	mov	r8, r0
 80132d8:	4628      	mov	r0, r5
 80132da:	f004 f9d1 	bl	8017680 <ucdr_serialize_array_uint8_t>
 80132de:	7921      	ldrb	r1, [r4, #4]
 80132e0:	4607      	mov	r7, r0
 80132e2:	4628      	mov	r0, r5
 80132e4:	f7fb fb5a 	bl	800e99c <ucdr_serialize_uint8_t>
 80132e8:	7961      	ldrb	r1, [r4, #5]
 80132ea:	4606      	mov	r6, r0
 80132ec:	4628      	mov	r0, r5
 80132ee:	f7fb fb55 	bl	800e99c <ucdr_serialize_uint8_t>
 80132f2:	ea08 0807 	and.w	r8, r8, r7
 80132f6:	ea06 0608 	and.w	r6, r6, r8
 80132fa:	4006      	ands	r6, r0
 80132fc:	7a21      	ldrb	r1, [r4, #8]
 80132fe:	4628      	mov	r0, r5
 8013300:	f7fb fb1e 	bl	800e940 <ucdr_serialize_bool>
 8013304:	7a23      	ldrb	r3, [r4, #8]
 8013306:	b2f7      	uxtb	r7, r6
 8013308:	4606      	mov	r6, r0
 801330a:	b96b      	cbnz	r3, 8013328 <uxr_serialize_INFO_Payload+0x64>
 801330c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013310:	4628      	mov	r0, r5
 8013312:	f7fb fb15 	bl	800e940 <ucdr_serialize_bool>
 8013316:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801331a:	4030      	ands	r0, r6
 801331c:	b2c6      	uxtb	r6, r0
 801331e:	b983      	cbnz	r3, 8013342 <uxr_serialize_INFO_Payload+0x7e>
 8013320:	ea06 0007 	and.w	r0, r6, r7
 8013324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013328:	7b21      	ldrb	r1, [r4, #12]
 801332a:	4628      	mov	r0, r5
 801332c:	f7fb fb36 	bl	800e99c <ucdr_serialize_uint8_t>
 8013330:	b188      	cbz	r0, 8013356 <uxr_serialize_INFO_Payload+0x92>
 8013332:	f104 010c 	add.w	r1, r4, #12
 8013336:	4628      	mov	r0, r5
 8013338:	f7ff faf2 	bl	8012920 <uxr_serialize_ObjectVariant.part.0>
 801333c:	4030      	ands	r0, r6
 801333e:	b2c6      	uxtb	r6, r0
 8013340:	e7e4      	b.n	801330c <uxr_serialize_INFO_Payload+0x48>
 8013342:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8013346:	4628      	mov	r0, r5
 8013348:	f7ff fdb2 	bl	8012eb0 <uxr_serialize_ActivityInfoVariant>
 801334c:	4006      	ands	r6, r0
 801334e:	ea06 0007 	and.w	r0, r6, r7
 8013352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013356:	4606      	mov	r6, r0
 8013358:	e7d8      	b.n	801330c <uxr_serialize_INFO_Payload+0x48>
 801335a:	bf00      	nop

0801335c <uxr_serialize_READ_DATA_Payload>:
 801335c:	b570      	push	{r4, r5, r6, lr}
 801335e:	2202      	movs	r2, #2
 8013360:	4605      	mov	r5, r0
 8013362:	460e      	mov	r6, r1
 8013364:	f004 f98c 	bl	8017680 <ucdr_serialize_array_uint8_t>
 8013368:	2202      	movs	r2, #2
 801336a:	18b1      	adds	r1, r6, r2
 801336c:	4604      	mov	r4, r0
 801336e:	4628      	mov	r0, r5
 8013370:	f004 f986 	bl	8017680 <ucdr_serialize_array_uint8_t>
 8013374:	1d31      	adds	r1, r6, #4
 8013376:	4004      	ands	r4, r0
 8013378:	4628      	mov	r0, r5
 801337a:	f7ff fe5d 	bl	8013038 <uxr_serialize_ReadSpecification>
 801337e:	b2e4      	uxtb	r4, r4
 8013380:	4020      	ands	r0, r4
 8013382:	bd70      	pop	{r4, r5, r6, pc}

08013384 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013384:	b570      	push	{r4, r5, r6, lr}
 8013386:	2202      	movs	r2, #2
 8013388:	4605      	mov	r5, r0
 801338a:	460e      	mov	r6, r1
 801338c:	f004 f978 	bl	8017680 <ucdr_serialize_array_uint8_t>
 8013390:	2202      	movs	r2, #2
 8013392:	4604      	mov	r4, r0
 8013394:	18b1      	adds	r1, r6, r2
 8013396:	4628      	mov	r0, r5
 8013398:	f004 f972 	bl	8017680 <ucdr_serialize_array_uint8_t>
 801339c:	4020      	ands	r0, r4
 801339e:	b2c0      	uxtb	r0, r0
 80133a0:	bd70      	pop	{r4, r5, r6, pc}
 80133a2:	bf00      	nop

080133a4 <uxr_serialize_ACKNACK_Payload>:
 80133a4:	b570      	push	{r4, r5, r6, lr}
 80133a6:	460c      	mov	r4, r1
 80133a8:	460e      	mov	r6, r1
 80133aa:	f834 1b02 	ldrh.w	r1, [r4], #2
 80133ae:	4605      	mov	r5, r0
 80133b0:	f7fb fb20 	bl	800e9f4 <ucdr_serialize_uint16_t>
 80133b4:	2202      	movs	r2, #2
 80133b6:	4621      	mov	r1, r4
 80133b8:	4604      	mov	r4, r0
 80133ba:	4628      	mov	r0, r5
 80133bc:	f004 f960 	bl	8017680 <ucdr_serialize_array_uint8_t>
 80133c0:	7931      	ldrb	r1, [r6, #4]
 80133c2:	4004      	ands	r4, r0
 80133c4:	4628      	mov	r0, r5
 80133c6:	f7fb fae9 	bl	800e99c <ucdr_serialize_uint8_t>
 80133ca:	b2e4      	uxtb	r4, r4
 80133cc:	4020      	ands	r0, r4
 80133ce:	bd70      	pop	{r4, r5, r6, pc}

080133d0 <uxr_deserialize_ACKNACK_Payload>:
 80133d0:	b570      	push	{r4, r5, r6, lr}
 80133d2:	4605      	mov	r5, r0
 80133d4:	460e      	mov	r6, r1
 80133d6:	f7fb fc0d 	bl	800ebf4 <ucdr_deserialize_uint16_t>
 80133da:	2202      	movs	r2, #2
 80133dc:	18b1      	adds	r1, r6, r2
 80133de:	4604      	mov	r4, r0
 80133e0:	4628      	mov	r0, r5
 80133e2:	f004 f9b1 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 80133e6:	1d31      	adds	r1, r6, #4
 80133e8:	4004      	ands	r4, r0
 80133ea:	4628      	mov	r0, r5
 80133ec:	f7fb faec 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 80133f0:	b2e4      	uxtb	r4, r4
 80133f2:	4020      	ands	r0, r4
 80133f4:	bd70      	pop	{r4, r5, r6, pc}
 80133f6:	bf00      	nop

080133f8 <uxr_serialize_HEARTBEAT_Payload>:
 80133f8:	b570      	push	{r4, r5, r6, lr}
 80133fa:	460d      	mov	r5, r1
 80133fc:	8809      	ldrh	r1, [r1, #0]
 80133fe:	4606      	mov	r6, r0
 8013400:	f7fb faf8 	bl	800e9f4 <ucdr_serialize_uint16_t>
 8013404:	8869      	ldrh	r1, [r5, #2]
 8013406:	4604      	mov	r4, r0
 8013408:	4630      	mov	r0, r6
 801340a:	f7fb faf3 	bl	800e9f4 <ucdr_serialize_uint16_t>
 801340e:	7929      	ldrb	r1, [r5, #4]
 8013410:	4004      	ands	r4, r0
 8013412:	4630      	mov	r0, r6
 8013414:	f7fb fac2 	bl	800e99c <ucdr_serialize_uint8_t>
 8013418:	b2e4      	uxtb	r4, r4
 801341a:	4020      	ands	r0, r4
 801341c:	bd70      	pop	{r4, r5, r6, pc}
 801341e:	bf00      	nop

08013420 <uxr_deserialize_HEARTBEAT_Payload>:
 8013420:	b570      	push	{r4, r5, r6, lr}
 8013422:	4605      	mov	r5, r0
 8013424:	460e      	mov	r6, r1
 8013426:	f7fb fbe5 	bl	800ebf4 <ucdr_deserialize_uint16_t>
 801342a:	1cb1      	adds	r1, r6, #2
 801342c:	4604      	mov	r4, r0
 801342e:	4628      	mov	r0, r5
 8013430:	f7fb fbe0 	bl	800ebf4 <ucdr_deserialize_uint16_t>
 8013434:	1d31      	adds	r1, r6, #4
 8013436:	4004      	ands	r4, r0
 8013438:	4628      	mov	r0, r5
 801343a:	f7fb fac5 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 801343e:	b2e4      	uxtb	r4, r4
 8013440:	4020      	ands	r0, r4
 8013442:	bd70      	pop	{r4, r5, r6, pc}

08013444 <uxr_serialize_TIMESTAMP_Payload>:
 8013444:	b570      	push	{r4, r5, r6, lr}
 8013446:	460d      	mov	r5, r1
 8013448:	6809      	ldr	r1, [r1, #0]
 801344a:	4606      	mov	r6, r0
 801344c:	f7fc f8d6 	bl	800f5fc <ucdr_serialize_int32_t>
 8013450:	6869      	ldr	r1, [r5, #4]
 8013452:	4604      	mov	r4, r0
 8013454:	4630      	mov	r0, r6
 8013456:	f7fb fcb7 	bl	800edc8 <ucdr_serialize_uint32_t>
 801345a:	4020      	ands	r0, r4
 801345c:	b2c0      	uxtb	r0, r0
 801345e:	bd70      	pop	{r4, r5, r6, pc}

08013460 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013464:	4605      	mov	r5, r0
 8013466:	460e      	mov	r6, r1
 8013468:	f7fc f960 	bl	800f72c <ucdr_deserialize_int32_t>
 801346c:	1d31      	adds	r1, r6, #4
 801346e:	4607      	mov	r7, r0
 8013470:	4628      	mov	r0, r5
 8013472:	f7fb fdd9 	bl	800f028 <ucdr_deserialize_uint32_t>
 8013476:	f106 0108 	add.w	r1, r6, #8
 801347a:	4680      	mov	r8, r0
 801347c:	4628      	mov	r0, r5
 801347e:	f7fc f955 	bl	800f72c <ucdr_deserialize_int32_t>
 8013482:	f106 010c 	add.w	r1, r6, #12
 8013486:	4604      	mov	r4, r0
 8013488:	4628      	mov	r0, r5
 801348a:	f7fb fdcd 	bl	800f028 <ucdr_deserialize_uint32_t>
 801348e:	ea07 0708 	and.w	r7, r7, r8
 8013492:	403c      	ands	r4, r7
 8013494:	f106 0110 	add.w	r1, r6, #16
 8013498:	4004      	ands	r4, r0
 801349a:	4628      	mov	r0, r5
 801349c:	f7fc f946 	bl	800f72c <ucdr_deserialize_int32_t>
 80134a0:	f106 0114 	add.w	r1, r6, #20
 80134a4:	4607      	mov	r7, r0
 80134a6:	4628      	mov	r0, r5
 80134a8:	f7fb fdbe 	bl	800f028 <ucdr_deserialize_uint32_t>
 80134ac:	b2e4      	uxtb	r4, r4
 80134ae:	403c      	ands	r4, r7
 80134b0:	4020      	ands	r0, r4
 80134b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134b6:	bf00      	nop

080134b8 <uxr_serialize_SampleIdentity>:
 80134b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134bc:	220c      	movs	r2, #12
 80134be:	4604      	mov	r4, r0
 80134c0:	460d      	mov	r5, r1
 80134c2:	f004 f8dd 	bl	8017680 <ucdr_serialize_array_uint8_t>
 80134c6:	2203      	movs	r2, #3
 80134c8:	f105 010c 	add.w	r1, r5, #12
 80134cc:	4607      	mov	r7, r0
 80134ce:	4620      	mov	r0, r4
 80134d0:	f004 f8d6 	bl	8017680 <ucdr_serialize_array_uint8_t>
 80134d4:	7be9      	ldrb	r1, [r5, #15]
 80134d6:	4680      	mov	r8, r0
 80134d8:	4620      	mov	r0, r4
 80134da:	f7fb fa5f 	bl	800e99c <ucdr_serialize_uint8_t>
 80134de:	6929      	ldr	r1, [r5, #16]
 80134e0:	4606      	mov	r6, r0
 80134e2:	4620      	mov	r0, r4
 80134e4:	f7fc f88a 	bl	800f5fc <ucdr_serialize_int32_t>
 80134e8:	6969      	ldr	r1, [r5, #20]
 80134ea:	4603      	mov	r3, r0
 80134ec:	4620      	mov	r0, r4
 80134ee:	ea07 0708 	and.w	r7, r7, r8
 80134f2:	461c      	mov	r4, r3
 80134f4:	f7fb fc68 	bl	800edc8 <ucdr_serialize_uint32_t>
 80134f8:	403e      	ands	r6, r7
 80134fa:	4034      	ands	r4, r6
 80134fc:	4020      	ands	r0, r4
 80134fe:	b2c0      	uxtb	r0, r0
 8013500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013504 <uxr_deserialize_SampleIdentity>:
 8013504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013508:	220c      	movs	r2, #12
 801350a:	4604      	mov	r4, r0
 801350c:	460d      	mov	r5, r1
 801350e:	f004 f91b 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8013512:	2203      	movs	r2, #3
 8013514:	f105 010c 	add.w	r1, r5, #12
 8013518:	4607      	mov	r7, r0
 801351a:	4620      	mov	r0, r4
 801351c:	f004 f914 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8013520:	f105 010f 	add.w	r1, r5, #15
 8013524:	4680      	mov	r8, r0
 8013526:	4620      	mov	r0, r4
 8013528:	f7fb fa4e 	bl	800e9c8 <ucdr_deserialize_uint8_t>
 801352c:	f105 0110 	add.w	r1, r5, #16
 8013530:	4606      	mov	r6, r0
 8013532:	4620      	mov	r0, r4
 8013534:	f7fc f8fa 	bl	800f72c <ucdr_deserialize_int32_t>
 8013538:	f105 0114 	add.w	r1, r5, #20
 801353c:	4603      	mov	r3, r0
 801353e:	4620      	mov	r0, r4
 8013540:	ea07 0708 	and.w	r7, r7, r8
 8013544:	461c      	mov	r4, r3
 8013546:	f7fb fd6f 	bl	800f028 <ucdr_deserialize_uint32_t>
 801354a:	403e      	ands	r6, r7
 801354c:	4034      	ands	r4, r6
 801354e:	4020      	ands	r0, r4
 8013550:	b2c0      	uxtb	r0, r0
 8013552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013556:	bf00      	nop

08013558 <rcl_client_get_rmw_handle>:
 8013558:	b118      	cbz	r0, 8013562 <rcl_client_get_rmw_handle+0xa>
 801355a:	6800      	ldr	r0, [r0, #0]
 801355c:	b108      	cbz	r0, 8013562 <rcl_client_get_rmw_handle+0xa>
 801355e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013562:	4770      	bx	lr

08013564 <rcl_send_request>:
 8013564:	b570      	push	{r4, r5, r6, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	b1e8      	cbz	r0, 80135a6 <rcl_send_request+0x42>
 801356a:	4604      	mov	r4, r0
 801356c:	6800      	ldr	r0, [r0, #0]
 801356e:	b1d0      	cbz	r0, 80135a6 <rcl_send_request+0x42>
 8013570:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8013574:	b1bb      	cbz	r3, 80135a6 <rcl_send_request+0x42>
 8013576:	460e      	mov	r6, r1
 8013578:	b1d1      	cbz	r1, 80135b0 <rcl_send_request+0x4c>
 801357a:	4615      	mov	r5, r2
 801357c:	b1c2      	cbz	r2, 80135b0 <rcl_send_request+0x4c>
 801357e:	2105      	movs	r1, #5
 8013580:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013584:	f002 fc28 	bl	8015dd8 <__atomic_load_8>
 8013588:	6823      	ldr	r3, [r4, #0]
 801358a:	e9c5 0100 	strd	r0, r1, [r5]
 801358e:	462a      	mov	r2, r5
 8013590:	4631      	mov	r1, r6
 8013592:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013596:	f003 fb03 	bl	8016ba0 <rmw_send_request>
 801359a:	4606      	mov	r6, r0
 801359c:	b160      	cbz	r0, 80135b8 <rcl_send_request+0x54>
 801359e:	2601      	movs	r6, #1
 80135a0:	4630      	mov	r0, r6
 80135a2:	b002      	add	sp, #8
 80135a4:	bd70      	pop	{r4, r5, r6, pc}
 80135a6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80135aa:	4630      	mov	r0, r6
 80135ac:	b002      	add	sp, #8
 80135ae:	bd70      	pop	{r4, r5, r6, pc}
 80135b0:	260b      	movs	r6, #11
 80135b2:	4630      	mov	r0, r6
 80135b4:	b002      	add	sp, #8
 80135b6:	bd70      	pop	{r4, r5, r6, pc}
 80135b8:	6820      	ldr	r0, [r4, #0]
 80135ba:	2105      	movs	r1, #5
 80135bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80135c0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80135c4:	9100      	str	r1, [sp, #0]
 80135c6:	f002 fc73 	bl	8015eb0 <__atomic_exchange_8>
 80135ca:	4630      	mov	r0, r6
 80135cc:	b002      	add	sp, #8
 80135ce:	bd70      	pop	{r4, r5, r6, pc}

080135d0 <rcl_take_response>:
 80135d0:	b570      	push	{r4, r5, r6, lr}
 80135d2:	468e      	mov	lr, r1
 80135d4:	460c      	mov	r4, r1
 80135d6:	4616      	mov	r6, r2
 80135d8:	4605      	mov	r5, r0
 80135da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80135de:	b08c      	sub	sp, #48	@ 0x30
 80135e0:	f10d 0c18 	add.w	ip, sp, #24
 80135e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80135ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 80135f0:	b35d      	cbz	r5, 801364a <rcl_take_response+0x7a>
 80135f2:	682b      	ldr	r3, [r5, #0]
 80135f4:	b34b      	cbz	r3, 801364a <rcl_take_response+0x7a>
 80135f6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80135fa:	b330      	cbz	r0, 801364a <rcl_take_response+0x7a>
 80135fc:	b346      	cbz	r6, 8013650 <rcl_take_response+0x80>
 80135fe:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8013658 <rcl_take_response+0x88>
 8013602:	2300      	movs	r3, #0
 8013604:	f88d 3007 	strb.w	r3, [sp, #7]
 8013608:	4632      	mov	r2, r6
 801360a:	f10d 0307 	add.w	r3, sp, #7
 801360e:	a902      	add	r1, sp, #8
 8013610:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013614:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013618:	f003 fbca 	bl	8016db0 <rmw_take_response>
 801361c:	4605      	mov	r5, r0
 801361e:	b9c8      	cbnz	r0, 8013654 <rcl_take_response+0x84>
 8013620:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013624:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8013628:	2a00      	cmp	r2, #0
 801362a:	bf08      	it	eq
 801362c:	461d      	moveq	r5, r3
 801362e:	f10d 0e18 	add.w	lr, sp, #24
 8013632:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013636:	46a4      	mov	ip, r4
 8013638:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801363c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013640:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013644:	4628      	mov	r0, r5
 8013646:	b00c      	add	sp, #48	@ 0x30
 8013648:	bd70      	pop	{r4, r5, r6, pc}
 801364a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801364e:	e7ee      	b.n	801362e <rcl_take_response+0x5e>
 8013650:	250b      	movs	r5, #11
 8013652:	e7ec      	b.n	801362e <rcl_take_response+0x5e>
 8013654:	2501      	movs	r5, #1
 8013656:	e7ea      	b.n	801362e <rcl_take_response+0x5e>
	...

08013660 <rcl_client_is_valid>:
 8013660:	b130      	cbz	r0, 8013670 <rcl_client_is_valid+0x10>
 8013662:	6800      	ldr	r0, [r0, #0]
 8013664:	b120      	cbz	r0, 8013670 <rcl_client_is_valid+0x10>
 8013666:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801366a:	3800      	subs	r0, #0
 801366c:	bf18      	it	ne
 801366e:	2001      	movne	r0, #1
 8013670:	4770      	bx	lr
 8013672:	bf00      	nop

08013674 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013674:	280b      	cmp	r0, #11
 8013676:	dc0d      	bgt.n	8013694 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013678:	2800      	cmp	r0, #0
 801367a:	db09      	blt.n	8013690 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801367c:	280b      	cmp	r0, #11
 801367e:	d807      	bhi.n	8013690 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013680:	e8df f000 	tbb	[pc, r0]
 8013684:	07060607 	.word	0x07060607
 8013688:	06060606 	.word	0x06060606
 801368c:	07070606 	.word	0x07070606
 8013690:	2001      	movs	r0, #1
 8013692:	4770      	bx	lr
 8013694:	28cb      	cmp	r0, #203	@ 0xcb
 8013696:	bf18      	it	ne
 8013698:	2001      	movne	r0, #1
 801369a:	4770      	bx	lr

0801369c <rcl_get_zero_initialized_context>:
 801369c:	4a03      	ldr	r2, [pc, #12]	@ (80136ac <rcl_get_zero_initialized_context+0x10>)
 801369e:	4603      	mov	r3, r0
 80136a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80136a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80136a8:	4618      	mov	r0, r3
 80136aa:	4770      	bx	lr
 80136ac:	0801af9c 	.word	0x0801af9c

080136b0 <rcl_context_is_valid>:
 80136b0:	b118      	cbz	r0, 80136ba <rcl_context_is_valid+0xa>
 80136b2:	6840      	ldr	r0, [r0, #4]
 80136b4:	3800      	subs	r0, #0
 80136b6:	bf18      	it	ne
 80136b8:	2001      	movne	r0, #1
 80136ba:	4770      	bx	lr

080136bc <__cleanup_context>:
 80136bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136c0:	4606      	mov	r6, r0
 80136c2:	6800      	ldr	r0, [r0, #0]
 80136c4:	2300      	movs	r3, #0
 80136c6:	6073      	str	r3, [r6, #4]
 80136c8:	2800      	cmp	r0, #0
 80136ca:	d049      	beq.n	8013760 <__cleanup_context+0xa4>
 80136cc:	6947      	ldr	r7, [r0, #20]
 80136ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80136d2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80136d6:	b137      	cbz	r7, 80136e6 <__cleanup_context+0x2a>
 80136d8:	3014      	adds	r0, #20
 80136da:	f7f8 fc1d 	bl	800bf18 <rcl_init_options_fini>
 80136de:	4607      	mov	r7, r0
 80136e0:	2800      	cmp	r0, #0
 80136e2:	d144      	bne.n	801376e <__cleanup_context+0xb2>
 80136e4:	6830      	ldr	r0, [r6, #0]
 80136e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80136e8:	b143      	cbz	r3, 80136fc <__cleanup_context+0x40>
 80136ea:	3028      	adds	r0, #40	@ 0x28
 80136ec:	f7fa f80a 	bl	800d704 <rmw_context_fini>
 80136f0:	b118      	cbz	r0, 80136fa <__cleanup_context+0x3e>
 80136f2:	2f00      	cmp	r7, #0
 80136f4:	d03e      	beq.n	8013774 <__cleanup_context+0xb8>
 80136f6:	f7f9 fd13 	bl	800d120 <rcutils_reset_error>
 80136fa:	6830      	ldr	r0, [r6, #0]
 80136fc:	6a03      	ldr	r3, [r0, #32]
 80136fe:	b1db      	cbz	r3, 8013738 <__cleanup_context+0x7c>
 8013700:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8013704:	2a01      	cmp	r2, #1
 8013706:	f17c 0100 	sbcs.w	r1, ip, #0
 801370a:	db11      	blt.n	8013730 <__cleanup_context+0x74>
 801370c:	2400      	movs	r4, #0
 801370e:	4625      	mov	r5, r4
 8013710:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013714:	4649      	mov	r1, r9
 8013716:	b1b8      	cbz	r0, 8013748 <__cleanup_context+0x8c>
 8013718:	47c0      	blx	r8
 801371a:	6833      	ldr	r3, [r6, #0]
 801371c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8013720:	3401      	adds	r4, #1
 8013722:	f145 0500 	adc.w	r5, r5, #0
 8013726:	4294      	cmp	r4, r2
 8013728:	eb75 010c 	sbcs.w	r1, r5, ip
 801372c:	6a1b      	ldr	r3, [r3, #32]
 801372e:	dbef      	blt.n	8013710 <__cleanup_context+0x54>
 8013730:	4618      	mov	r0, r3
 8013732:	4649      	mov	r1, r9
 8013734:	47c0      	blx	r8
 8013736:	6830      	ldr	r0, [r6, #0]
 8013738:	4649      	mov	r1, r9
 801373a:	47c0      	blx	r8
 801373c:	2300      	movs	r3, #0
 801373e:	e9c6 3300 	strd	r3, r3, [r6]
 8013742:	4638      	mov	r0, r7
 8013744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013748:	3401      	adds	r4, #1
 801374a:	f145 0500 	adc.w	r5, r5, #0
 801374e:	4294      	cmp	r4, r2
 8013750:	eb75 010c 	sbcs.w	r1, r5, ip
 8013754:	dbdc      	blt.n	8013710 <__cleanup_context+0x54>
 8013756:	4618      	mov	r0, r3
 8013758:	4649      	mov	r1, r9
 801375a:	47c0      	blx	r8
 801375c:	6830      	ldr	r0, [r6, #0]
 801375e:	e7eb      	b.n	8013738 <__cleanup_context+0x7c>
 8013760:	4607      	mov	r7, r0
 8013762:	2300      	movs	r3, #0
 8013764:	e9c6 3300 	strd	r3, r3, [r6]
 8013768:	4638      	mov	r0, r7
 801376a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801376e:	f7f9 fcd7 	bl	800d120 <rcutils_reset_error>
 8013772:	e7b7      	b.n	80136e4 <__cleanup_context+0x28>
 8013774:	f7ff ff7e 	bl	8013674 <rcl_convert_rmw_ret_to_rcl_ret>
 8013778:	4607      	mov	r7, r0
 801377a:	e7bc      	b.n	80136f6 <__cleanup_context+0x3a>

0801377c <rcl_init>:
 801377c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013780:	1e05      	subs	r5, r0, #0
 8013782:	b09c      	sub	sp, #112	@ 0x70
 8013784:	460e      	mov	r6, r1
 8013786:	4690      	mov	r8, r2
 8013788:	461f      	mov	r7, r3
 801378a:	f340 8099 	ble.w	80138c0 <rcl_init+0x144>
 801378e:	2900      	cmp	r1, #0
 8013790:	f000 8099 	beq.w	80138c6 <rcl_init+0x14a>
 8013794:	f1a1 0e04 	sub.w	lr, r1, #4
 8013798:	f04f 0c00 	mov.w	ip, #0
 801379c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80137a0:	f10c 0c01 	add.w	ip, ip, #1
 80137a4:	2c00      	cmp	r4, #0
 80137a6:	f000 808e 	beq.w	80138c6 <rcl_init+0x14a>
 80137aa:	4565      	cmp	r5, ip
 80137ac:	d1f6      	bne.n	801379c <rcl_init+0x20>
 80137ae:	f1b8 0f00 	cmp.w	r8, #0
 80137b2:	f000 8088 	beq.w	80138c6 <rcl_init+0x14a>
 80137b6:	f8d8 4000 	ldr.w	r4, [r8]
 80137ba:	2c00      	cmp	r4, #0
 80137bc:	f000 8083 	beq.w	80138c6 <rcl_init+0x14a>
 80137c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137c2:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80137c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80137ca:	6823      	ldr	r3, [r4, #0]
 80137cc:	f8cc 3000 	str.w	r3, [ip]
 80137d0:	a817      	add	r0, sp, #92	@ 0x5c
 80137d2:	f7f9 fc7f 	bl	800d0d4 <rcutils_allocator_is_valid>
 80137d6:	2800      	cmp	r0, #0
 80137d8:	d075      	beq.n	80138c6 <rcl_init+0x14a>
 80137da:	2f00      	cmp	r7, #0
 80137dc:	d073      	beq.n	80138c6 <rcl_init+0x14a>
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d175      	bne.n	80138d0 <rcl_init+0x154>
 80137e4:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 80137e8:	2178      	movs	r1, #120	@ 0x78
 80137ea:	2001      	movs	r0, #1
 80137ec:	4798      	blx	r3
 80137ee:	4604      	mov	r4, r0
 80137f0:	6038      	str	r0, [r7, #0]
 80137f2:	2800      	cmp	r0, #0
 80137f4:	f000 80a0 	beq.w	8013938 <rcl_init+0x1bc>
 80137f8:	a802      	add	r0, sp, #8
 80137fa:	f002 fe2d 	bl	8016458 <rmw_get_zero_initialized_context>
 80137fe:	a902      	add	r1, sp, #8
 8013800:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013804:	2250      	movs	r2, #80	@ 0x50
 8013806:	ac17      	add	r4, sp, #92	@ 0x5c
 8013808:	f005 fff3 	bl	80197f2 <memcpy>
 801380c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801380e:	f8d7 e000 	ldr.w	lr, [r7]
 8013812:	46f4      	mov	ip, lr
 8013814:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013818:	6823      	ldr	r3, [r4, #0]
 801381a:	f8cc 3000 	str.w	r3, [ip]
 801381e:	f10e 0114 	add.w	r1, lr, #20
 8013822:	4640      	mov	r0, r8
 8013824:	f7f8 fba2 	bl	800bf6c <rcl_init_options_copy>
 8013828:	4604      	mov	r4, r0
 801382a:	2800      	cmp	r0, #0
 801382c:	d144      	bne.n	80138b8 <rcl_init+0x13c>
 801382e:	f8d7 9000 	ldr.w	r9, [r7]
 8013832:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8013836:	f8c9 0020 	str.w	r0, [r9, #32]
 801383a:	f8c9 5018 	str.w	r5, [r9, #24]
 801383e:	f8c9 801c 	str.w	r8, [r9, #28]
 8013842:	2d00      	cmp	r5, #0
 8013844:	d04b      	beq.n	80138de <rcl_init+0x162>
 8013846:	2e00      	cmp	r6, #0
 8013848:	d049      	beq.n	80138de <rcl_init+0x162>
 801384a:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 801384e:	2104      	movs	r1, #4
 8013850:	4628      	mov	r0, r5
 8013852:	4798      	blx	r3
 8013854:	f8c9 0020 	str.w	r0, [r9, #32]
 8013858:	f8d7 9000 	ldr.w	r9, [r7]
 801385c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013860:	46ca      	mov	sl, r9
 8013862:	b343      	cbz	r3, 80138b6 <rcl_init+0x13a>
 8013864:	2d01      	cmp	r5, #1
 8013866:	f178 0300 	sbcs.w	r3, r8, #0
 801386a:	db38      	blt.n	80138de <rcl_init+0x162>
 801386c:	2400      	movs	r4, #0
 801386e:	3e04      	subs	r6, #4
 8013870:	46a1      	mov	r9, r4
 8013872:	e00b      	b.n	801388c <rcl_init+0x110>
 8013874:	6831      	ldr	r1, [r6, #0]
 8013876:	f005 ffbc 	bl	80197f2 <memcpy>
 801387a:	3401      	adds	r4, #1
 801387c:	f149 0900 	adc.w	r9, r9, #0
 8013880:	45c8      	cmp	r8, r9
 8013882:	bf08      	it	eq
 8013884:	42a5      	cmpeq	r5, r4
 8013886:	d028      	beq.n	80138da <rcl_init+0x15e>
 8013888:	f8d7 a000 	ldr.w	sl, [r7]
 801388c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013890:	f7ec fcd0 	bl	8000234 <strlen>
 8013894:	1c42      	adds	r2, r0, #1
 8013896:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013898:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801389a:	f8da a020 	ldr.w	sl, [sl, #32]
 801389e:	9201      	str	r2, [sp, #4]
 80138a0:	4610      	mov	r0, r2
 80138a2:	4798      	blx	r3
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80138aa:	6a1b      	ldr	r3, [r3, #32]
 80138ac:	9a01      	ldr	r2, [sp, #4]
 80138ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80138b2:	2800      	cmp	r0, #0
 80138b4:	d1de      	bne.n	8013874 <rcl_init+0xf8>
 80138b6:	240a      	movs	r4, #10
 80138b8:	4638      	mov	r0, r7
 80138ba:	f7ff feff 	bl	80136bc <__cleanup_context>
 80138be:	e003      	b.n	80138c8 <rcl_init+0x14c>
 80138c0:	2900      	cmp	r1, #0
 80138c2:	f43f af74 	beq.w	80137ae <rcl_init+0x32>
 80138c6:	240b      	movs	r4, #11
 80138c8:	4620      	mov	r0, r4
 80138ca:	b01c      	add	sp, #112	@ 0x70
 80138cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138d0:	2464      	movs	r4, #100	@ 0x64
 80138d2:	4620      	mov	r0, r4
 80138d4:	b01c      	add	sp, #112	@ 0x70
 80138d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138da:	f8d7 9000 	ldr.w	r9, [r7]
 80138de:	491d      	ldr	r1, [pc, #116]	@ (8013954 <rcl_init+0x1d8>)
 80138e0:	680b      	ldr	r3, [r1, #0]
 80138e2:	3301      	adds	r3, #1
 80138e4:	d023      	beq.n	801392e <rcl_init+0x1b2>
 80138e6:	600b      	str	r3, [r1, #0]
 80138e8:	461a      	mov	r2, r3
 80138ea:	2400      	movs	r4, #0
 80138ec:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80138f0:	607b      	str	r3, [r7, #4]
 80138f2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80138f4:	6182      	str	r2, [r0, #24]
 80138f6:	3301      	adds	r3, #1
 80138f8:	61c4      	str	r4, [r0, #28]
 80138fa:	d01f      	beq.n	801393c <rcl_init+0x1c0>
 80138fc:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8013900:	b94b      	cbnz	r3, 8013916 <rcl_init+0x19a>
 8013902:	3030      	adds	r0, #48	@ 0x30
 8013904:	f000 f828 	bl	8013958 <rcl_get_localhost_only>
 8013908:	4604      	mov	r4, r0
 801390a:	2800      	cmp	r0, #0
 801390c:	d1d4      	bne.n	80138b8 <rcl_init+0x13c>
 801390e:	f8d7 9000 	ldr.w	r9, [r7]
 8013912:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013916:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 801391a:	3018      	adds	r0, #24
 801391c:	f7f9 fdbc 	bl	800d498 <rmw_init>
 8013920:	4604      	mov	r4, r0
 8013922:	2800      	cmp	r0, #0
 8013924:	d0d0      	beq.n	80138c8 <rcl_init+0x14c>
 8013926:	f7ff fea5 	bl	8013674 <rcl_convert_rmw_ret_to_rcl_ret>
 801392a:	4604      	mov	r4, r0
 801392c:	e7c4      	b.n	80138b8 <rcl_init+0x13c>
 801392e:	2201      	movs	r2, #1
 8013930:	461c      	mov	r4, r3
 8013932:	600a      	str	r2, [r1, #0]
 8013934:	4613      	mov	r3, r2
 8013936:	e7d9      	b.n	80138ec <rcl_init+0x170>
 8013938:	240a      	movs	r4, #10
 801393a:	e7c5      	b.n	80138c8 <rcl_init+0x14c>
 801393c:	3024      	adds	r0, #36	@ 0x24
 801393e:	f004 fd91 	bl	8018464 <rcl_get_default_domain_id>
 8013942:	4604      	mov	r4, r0
 8013944:	2800      	cmp	r0, #0
 8013946:	d1b7      	bne.n	80138b8 <rcl_init+0x13c>
 8013948:	f8d7 9000 	ldr.w	r9, [r7]
 801394c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013950:	e7d4      	b.n	80138fc <rcl_init+0x180>
 8013952:	bf00      	nop
 8013954:	2000af18 	.word	0x2000af18

08013958 <rcl_get_localhost_only>:
 8013958:	b510      	push	{r4, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	2300      	movs	r3, #0
 801395e:	9301      	str	r3, [sp, #4]
 8013960:	b1b8      	cbz	r0, 8013992 <rcl_get_localhost_only+0x3a>
 8013962:	4604      	mov	r4, r0
 8013964:	a901      	add	r1, sp, #4
 8013966:	480c      	ldr	r0, [pc, #48]	@ (8013998 <rcl_get_localhost_only+0x40>)
 8013968:	f002 fada 	bl	8015f20 <rcutils_get_env>
 801396c:	b110      	cbz	r0, 8013974 <rcl_get_localhost_only+0x1c>
 801396e:	2001      	movs	r0, #1
 8013970:	b002      	add	sp, #8
 8013972:	bd10      	pop	{r4, pc}
 8013974:	9b01      	ldr	r3, [sp, #4]
 8013976:	b113      	cbz	r3, 801397e <rcl_get_localhost_only+0x26>
 8013978:	781a      	ldrb	r2, [r3, #0]
 801397a:	2a31      	cmp	r2, #49	@ 0x31
 801397c:	d004      	beq.n	8013988 <rcl_get_localhost_only+0x30>
 801397e:	2302      	movs	r3, #2
 8013980:	2000      	movs	r0, #0
 8013982:	7023      	strb	r3, [r4, #0]
 8013984:	b002      	add	sp, #8
 8013986:	bd10      	pop	{r4, pc}
 8013988:	785b      	ldrb	r3, [r3, #1]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d1f7      	bne.n	801397e <rcl_get_localhost_only+0x26>
 801398e:	2301      	movs	r3, #1
 8013990:	e7f6      	b.n	8013980 <rcl_get_localhost_only+0x28>
 8013992:	200b      	movs	r0, #11
 8013994:	b002      	add	sp, #8
 8013996:	bd10      	pop	{r4, pc}
 8013998:	0801a87c 	.word	0x0801a87c

0801399c <rcl_get_zero_initialized_node>:
 801399c:	4a03      	ldr	r2, [pc, #12]	@ (80139ac <rcl_get_zero_initialized_node+0x10>)
 801399e:	4603      	mov	r3, r0
 80139a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80139a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80139a8:	4618      	mov	r0, r3
 80139aa:	4770      	bx	lr
 80139ac:	0801afa4 	.word	0x0801afa4

080139b0 <rcl_node_init>:
 80139b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139b4:	b0a9      	sub	sp, #164	@ 0xa4
 80139b6:	4604      	mov	r4, r0
 80139b8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80139bc:	a823      	add	r0, sp, #140	@ 0x8c
 80139be:	460e      	mov	r6, r1
 80139c0:	4615      	mov	r5, r2
 80139c2:	461f      	mov	r7, r3
 80139c4:	f004 ffc2 	bl	801894c <rcl_guard_condition_get_default_options>
 80139c8:	f1b8 0f00 	cmp.w	r8, #0
 80139cc:	f000 80e6 	beq.w	8013b9c <rcl_node_init+0x1ec>
 80139d0:	4640      	mov	r0, r8
 80139d2:	f7f9 fb7f 	bl	800d0d4 <rcutils_allocator_is_valid>
 80139d6:	2800      	cmp	r0, #0
 80139d8:	f000 80e0 	beq.w	8013b9c <rcl_node_init+0x1ec>
 80139dc:	2e00      	cmp	r6, #0
 80139de:	f000 80dd 	beq.w	8013b9c <rcl_node_init+0x1ec>
 80139e2:	2d00      	cmp	r5, #0
 80139e4:	f000 80da 	beq.w	8013b9c <rcl_node_init+0x1ec>
 80139e8:	2c00      	cmp	r4, #0
 80139ea:	f000 80d7 	beq.w	8013b9c <rcl_node_init+0x1ec>
 80139ee:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80139f2:	f1b9 0f00 	cmp.w	r9, #0
 80139f6:	f040 80fd 	bne.w	8013bf4 <rcl_node_init+0x244>
 80139fa:	2f00      	cmp	r7, #0
 80139fc:	f000 80ce 	beq.w	8013b9c <rcl_node_init+0x1ec>
 8013a00:	4638      	mov	r0, r7
 8013a02:	f7ff fe55 	bl	80136b0 <rcl_context_is_valid>
 8013a06:	4682      	mov	sl, r0
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	f000 80cd 	beq.w	8013ba8 <rcl_node_init+0x1f8>
 8013a0e:	464a      	mov	r2, r9
 8013a10:	a922      	add	r1, sp, #136	@ 0x88
 8013a12:	4630      	mov	r0, r6
 8013a14:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8013a18:	f002 fe9c 	bl	8016754 <rmw_validate_node_name>
 8013a1c:	4681      	mov	r9, r0
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	f040 80be 	bne.w	8013ba0 <rcl_node_init+0x1f0>
 8013a24:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013a26:	2800      	cmp	r0, #0
 8013a28:	f040 80f0 	bne.w	8013c0c <rcl_node_init+0x25c>
 8013a2c:	4628      	mov	r0, r5
 8013a2e:	f7ec fc01 	bl	8000234 <strlen>
 8013a32:	2800      	cmp	r0, #0
 8013a34:	f040 80bb 	bne.w	8013bae <rcl_node_init+0x1fe>
 8013a38:	4d7c      	ldr	r5, [pc, #496]	@ (8013c2c <rcl_node_init+0x27c>)
 8013a3a:	a922      	add	r1, sp, #136	@ 0x88
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	4628      	mov	r0, r5
 8013a40:	f002 fe6a 	bl	8016718 <rmw_validate_namespace>
 8013a44:	4681      	mov	r9, r0
 8013a46:	2800      	cmp	r0, #0
 8013a48:	f040 80aa 	bne.w	8013ba0 <rcl_node_init+0x1f0>
 8013a4c:	4682      	mov	sl, r0
 8013a4e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013a50:	2800      	cmp	r0, #0
 8013a52:	f040 80e0 	bne.w	8013c16 <rcl_node_init+0x266>
 8013a56:	f8d8 3000 	ldr.w	r3, [r8]
 8013a5a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a5e:	2078      	movs	r0, #120	@ 0x78
 8013a60:	4798      	blx	r3
 8013a62:	4681      	mov	r9, r0
 8013a64:	6060      	str	r0, [r4, #4]
 8013a66:	2800      	cmp	r0, #0
 8013a68:	f000 80ca 	beq.w	8013c00 <rcl_node_init+0x250>
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	2300      	movs	r3, #0
 8013a70:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8013a74:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8013a78:	a808      	add	r0, sp, #32
 8013a7a:	f000 f907 	bl	8013c8c <rcl_node_get_default_options>
 8013a7e:	a908      	add	r1, sp, #32
 8013a80:	4648      	mov	r0, r9
 8013a82:	2268      	movs	r2, #104	@ 0x68
 8013a84:	f005 feb5 	bl	80197f2 <memcpy>
 8013a88:	6861      	ldr	r1, [r4, #4]
 8013a8a:	6027      	str	r7, [r4, #0]
 8013a8c:	4640      	mov	r0, r8
 8013a8e:	f000 f90b 	bl	8013ca8 <rcl_node_options_copy>
 8013a92:	2800      	cmp	r0, #0
 8013a94:	d158      	bne.n	8013b48 <rcl_node_init+0x198>
 8013a96:	4628      	mov	r0, r5
 8013a98:	f7ec fbcc 	bl	8000234 <strlen>
 8013a9c:	4428      	add	r0, r5
 8013a9e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013aa2:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013aa6:	2b2f      	cmp	r3, #47	@ 0x2f
 8013aa8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013aac:	9300      	str	r3, [sp, #0]
 8013aae:	bf0c      	ite	eq
 8013ab0:	4b5f      	ldreq	r3, [pc, #380]	@ (8013c30 <rcl_node_init+0x280>)
 8013ab2:	4b60      	ldrne	r3, [pc, #384]	@ (8013c34 <rcl_node_init+0x284>)
 8013ab4:	9302      	str	r3, [sp, #8]
 8013ab6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013aba:	9301      	str	r3, [sp, #4]
 8013abc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013ac0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013ac4:	f002 fa44 	bl	8015f50 <rcutils_format_string_limit>
 8013ac8:	6823      	ldr	r3, [r4, #0]
 8013aca:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8013ace:	6818      	ldr	r0, [r3, #0]
 8013ad0:	4631      	mov	r1, r6
 8013ad2:	3028      	adds	r0, #40	@ 0x28
 8013ad4:	462a      	mov	r2, r5
 8013ad6:	6866      	ldr	r6, [r4, #4]
 8013ad8:	f7f9 fec0 	bl	800d85c <rmw_create_node>
 8013adc:	6863      	ldr	r3, [r4, #4]
 8013ade:	66b0      	str	r0, [r6, #104]	@ 0x68
 8013ae0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013ae2:	2800      	cmp	r0, #0
 8013ae4:	d032      	beq.n	8013b4c <rcl_node_init+0x19c>
 8013ae6:	f7f9 ff4d 	bl	800d984 <rmw_node_get_graph_guard_condition>
 8013aea:	4681      	mov	r9, r0
 8013aec:	b360      	cbz	r0, 8013b48 <rcl_node_init+0x198>
 8013aee:	f8d8 3000 	ldr.w	r3, [r8]
 8013af2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013af6:	6866      	ldr	r6, [r4, #4]
 8013af8:	2008      	movs	r0, #8
 8013afa:	4798      	blx	r3
 8013afc:	6863      	ldr	r3, [r4, #4]
 8013afe:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8013b00:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8013b04:	f1bb 0f00 	cmp.w	fp, #0
 8013b08:	d020      	beq.n	8013b4c <rcl_node_init+0x19c>
 8013b0a:	a806      	add	r0, sp, #24
 8013b0c:	f004 fe42 	bl	8018794 <rcl_get_zero_initialized_guard_condition>
 8013b10:	a806      	add	r0, sp, #24
 8013b12:	c803      	ldmia	r0, {r0, r1}
 8013b14:	6863      	ldr	r3, [r4, #4]
 8013b16:	46c4      	mov	ip, r8
 8013b18:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8013b1c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013b20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b24:	ae23      	add	r6, sp, #140	@ 0x8c
 8013b26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013b28:	f8dc 3000 	ldr.w	r3, [ip]
 8013b2c:	6033      	str	r3, [r6, #0]
 8013b2e:	ab28      	add	r3, sp, #160	@ 0xa0
 8013b30:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013b34:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013b38:	4649      	mov	r1, r9
 8013b3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013b3c:	463a      	mov	r2, r7
 8013b3e:	4670      	mov	r0, lr
 8013b40:	f004 fe7e 	bl	8018840 <rcl_guard_condition_init_from_rmw>
 8013b44:	4681      	mov	r9, r0
 8013b46:	b328      	cbz	r0, 8013b94 <rcl_node_init+0x1e4>
 8013b48:	6863      	ldr	r3, [r4, #4]
 8013b4a:	b1f3      	cbz	r3, 8013b8a <rcl_node_init+0x1da>
 8013b4c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8013b4e:	b128      	cbz	r0, 8013b5c <rcl_node_init+0x1ac>
 8013b50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013b54:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013b58:	4798      	blx	r3
 8013b5a:	6863      	ldr	r3, [r4, #4]
 8013b5c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013b5e:	b110      	cbz	r0, 8013b66 <rcl_node_init+0x1b6>
 8013b60:	f7f9 fe94 	bl	800d88c <rmw_destroy_node>
 8013b64:	6863      	ldr	r3, [r4, #4]
 8013b66:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013b68:	b148      	cbz	r0, 8013b7e <rcl_node_init+0x1ce>
 8013b6a:	f004 fec9 	bl	8018900 <rcl_guard_condition_fini>
 8013b6e:	6863      	ldr	r3, [r4, #4]
 8013b70:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013b74:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013b76:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013b7a:	4798      	blx	r3
 8013b7c:	6863      	ldr	r3, [r4, #4]
 8013b7e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013b82:	4618      	mov	r0, r3
 8013b84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013b88:	4798      	blx	r3
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	e9c4 3300 	strd	r3, r3, [r4]
 8013b90:	f04f 0901 	mov.w	r9, #1
 8013b94:	f1ba 0f00 	cmp.w	sl, #0
 8013b98:	d125      	bne.n	8013be6 <rcl_node_init+0x236>
 8013b9a:	e001      	b.n	8013ba0 <rcl_node_init+0x1f0>
 8013b9c:	f04f 090b 	mov.w	r9, #11
 8013ba0:	4648      	mov	r0, r9
 8013ba2:	b029      	add	sp, #164	@ 0xa4
 8013ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ba8:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8013bac:	e7f8      	b.n	8013ba0 <rcl_node_init+0x1f0>
 8013bae:	782b      	ldrb	r3, [r5, #0]
 8013bb0:	2b2f      	cmp	r3, #47	@ 0x2f
 8013bb2:	f43f af42 	beq.w	8013a3a <rcl_node_init+0x8a>
 8013bb6:	9503      	str	r5, [sp, #12]
 8013bb8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013bbc:	9300      	str	r3, [sp, #0]
 8013bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8013c38 <rcl_node_init+0x288>)
 8013bc0:	9302      	str	r3, [sp, #8]
 8013bc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013bc6:	9301      	str	r3, [sp, #4]
 8013bc8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013bcc:	f002 f9c0 	bl	8015f50 <rcutils_format_string_limit>
 8013bd0:	4605      	mov	r5, r0
 8013bd2:	b340      	cbz	r0, 8013c26 <rcl_node_init+0x276>
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	a922      	add	r1, sp, #136	@ 0x88
 8013bd8:	9222      	str	r2, [sp, #136]	@ 0x88
 8013bda:	f002 fd9d 	bl	8016718 <rmw_validate_namespace>
 8013bde:	4681      	mov	r9, r0
 8013be0:	2800      	cmp	r0, #0
 8013be2:	f43f af34 	beq.w	8013a4e <rcl_node_init+0x9e>
 8013be6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013bea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013bee:	4628      	mov	r0, r5
 8013bf0:	4798      	blx	r3
 8013bf2:	e7d5      	b.n	8013ba0 <rcl_node_init+0x1f0>
 8013bf4:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8013bf8:	4648      	mov	r0, r9
 8013bfa:	b029      	add	sp, #164	@ 0xa4
 8013bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c00:	f04f 090a 	mov.w	r9, #10
 8013c04:	f1ba 0f00 	cmp.w	sl, #0
 8013c08:	d1ed      	bne.n	8013be6 <rcl_node_init+0x236>
 8013c0a:	e7c9      	b.n	8013ba0 <rcl_node_init+0x1f0>
 8013c0c:	f002 fdf4 	bl	80167f8 <rmw_node_name_validation_result_string>
 8013c10:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8013c14:	e7c4      	b.n	8013ba0 <rcl_node_init+0x1f0>
 8013c16:	f002 fd91 	bl	801673c <rmw_namespace_validation_result_string>
 8013c1a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8013c1e:	f1ba 0f00 	cmp.w	sl, #0
 8013c22:	d1e0      	bne.n	8013be6 <rcl_node_init+0x236>
 8013c24:	e7bc      	b.n	8013ba0 <rcl_node_init+0x1f0>
 8013c26:	f04f 090a 	mov.w	r9, #10
 8013c2a:	e7b9      	b.n	8013ba0 <rcl_node_init+0x1f0>
 8013c2c:	0801a894 	.word	0x0801a894
 8013c30:	0801a720 	.word	0x0801a720
 8013c34:	0801a6d8 	.word	0x0801a6d8
 8013c38:	0801a898 	.word	0x0801a898

08013c3c <rcl_node_is_valid>:
 8013c3c:	b130      	cbz	r0, 8013c4c <rcl_node_is_valid+0x10>
 8013c3e:	6843      	ldr	r3, [r0, #4]
 8013c40:	b123      	cbz	r3, 8013c4c <rcl_node_is_valid+0x10>
 8013c42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013c44:	b113      	cbz	r3, 8013c4c <rcl_node_is_valid+0x10>
 8013c46:	6800      	ldr	r0, [r0, #0]
 8013c48:	f7ff bd32 	b.w	80136b0 <rcl_context_is_valid>
 8013c4c:	2000      	movs	r0, #0
 8013c4e:	4770      	bx	lr

08013c50 <rcl_node_get_name>:
 8013c50:	b120      	cbz	r0, 8013c5c <rcl_node_get_name+0xc>
 8013c52:	6840      	ldr	r0, [r0, #4]
 8013c54:	b110      	cbz	r0, 8013c5c <rcl_node_get_name+0xc>
 8013c56:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013c58:	b100      	cbz	r0, 8013c5c <rcl_node_get_name+0xc>
 8013c5a:	6880      	ldr	r0, [r0, #8]
 8013c5c:	4770      	bx	lr
 8013c5e:	bf00      	nop

08013c60 <rcl_node_get_namespace>:
 8013c60:	b120      	cbz	r0, 8013c6c <rcl_node_get_namespace+0xc>
 8013c62:	6840      	ldr	r0, [r0, #4]
 8013c64:	b110      	cbz	r0, 8013c6c <rcl_node_get_namespace+0xc>
 8013c66:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013c68:	b100      	cbz	r0, 8013c6c <rcl_node_get_namespace+0xc>
 8013c6a:	68c0      	ldr	r0, [r0, #12]
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop

08013c70 <rcl_node_get_options>:
 8013c70:	b128      	cbz	r0, 8013c7e <rcl_node_get_options+0xe>
 8013c72:	6840      	ldr	r0, [r0, #4]
 8013c74:	b118      	cbz	r0, 8013c7e <rcl_node_get_options+0xe>
 8013c76:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	bf08      	it	eq
 8013c7c:	2000      	moveq	r0, #0
 8013c7e:	4770      	bx	lr

08013c80 <rcl_node_get_rmw_handle>:
 8013c80:	b110      	cbz	r0, 8013c88 <rcl_node_get_rmw_handle+0x8>
 8013c82:	6840      	ldr	r0, [r0, #4]
 8013c84:	b100      	cbz	r0, 8013c88 <rcl_node_get_rmw_handle+0x8>
 8013c86:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013c88:	4770      	bx	lr
 8013c8a:	bf00      	nop

08013c8c <rcl_node_get_default_options>:
 8013c8c:	b510      	push	{r4, lr}
 8013c8e:	2268      	movs	r2, #104	@ 0x68
 8013c90:	4604      	mov	r4, r0
 8013c92:	2100      	movs	r1, #0
 8013c94:	f005 fce4 	bl	8019660 <memset>
 8013c98:	4620      	mov	r0, r4
 8013c9a:	f7f9 fa0d 	bl	800d0b8 <rcutils_get_default_allocator>
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	7523      	strb	r3, [r4, #20]
 8013ca2:	4620      	mov	r0, r4
 8013ca4:	bd10      	pop	{r4, pc}
 8013ca6:	bf00      	nop

08013ca8 <rcl_node_options_copy>:
 8013ca8:	b1d0      	cbz	r0, 8013ce0 <rcl_node_options_copy+0x38>
 8013caa:	b570      	push	{r4, r5, r6, lr}
 8013cac:	460c      	mov	r4, r1
 8013cae:	b1a9      	cbz	r1, 8013cdc <rcl_node_options_copy+0x34>
 8013cb0:	4288      	cmp	r0, r1
 8013cb2:	4684      	mov	ip, r0
 8013cb4:	d012      	beq.n	8013cdc <rcl_node_options_copy+0x34>
 8013cb6:	4605      	mov	r5, r0
 8013cb8:	8a86      	ldrh	r6, [r0, #20]
 8013cba:	468e      	mov	lr, r1
 8013cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cbe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013cc2:	682b      	ldr	r3, [r5, #0]
 8013cc4:	f8ce 3000 	str.w	r3, [lr]
 8013cc8:	f10c 0118 	add.w	r1, ip, #24
 8013ccc:	2250      	movs	r2, #80	@ 0x50
 8013cce:	82a6      	strh	r6, [r4, #20]
 8013cd0:	f104 0018 	add.w	r0, r4, #24
 8013cd4:	f005 fd8d 	bl	80197f2 <memcpy>
 8013cd8:	2000      	movs	r0, #0
 8013cda:	bd70      	pop	{r4, r5, r6, pc}
 8013cdc:	200b      	movs	r0, #11
 8013cde:	bd70      	pop	{r4, r5, r6, pc}
 8013ce0:	200b      	movs	r0, #11
 8013ce2:	4770      	bx	lr

08013ce4 <rcl_node_resolve_name>:
 8013ce4:	b082      	sub	sp, #8
 8013ce6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cea:	b091      	sub	sp, #68	@ 0x44
 8013cec:	ac1a      	add	r4, sp, #104	@ 0x68
 8013cee:	e884 000c 	stmia.w	r4, {r2, r3}
 8013cf2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	d03b      	beq.n	8013d72 <rcl_node_resolve_name+0x8e>
 8013cfa:	460c      	mov	r4, r1
 8013cfc:	4605      	mov	r5, r0
 8013cfe:	f7ff ffb7 	bl	8013c70 <rcl_node_get_options>
 8013d02:	2800      	cmp	r0, #0
 8013d04:	d037      	beq.n	8013d76 <rcl_node_resolve_name+0x92>
 8013d06:	4628      	mov	r0, r5
 8013d08:	f7ff ffa2 	bl	8013c50 <rcl_node_get_name>
 8013d0c:	4606      	mov	r6, r0
 8013d0e:	4628      	mov	r0, r5
 8013d10:	f7ff ffa6 	bl	8013c60 <rcl_node_get_namespace>
 8013d14:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013d18:	4681      	mov	r9, r0
 8013d1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013d1e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8013d20:	46ac      	mov	ip, r5
 8013d22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d26:	f8de 3000 	ldr.w	r3, [lr]
 8013d2a:	f8cc 3000 	str.w	r3, [ip]
 8013d2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013d30:	b1fb      	cbz	r3, 8013d72 <rcl_node_resolve_name+0x8e>
 8013d32:	468a      	mov	sl, r1
 8013d34:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8013d38:	f002 fa62 	bl	8016200 <rcutils_get_zero_initialized_string_map>
 8013d3c:	ab10      	add	r3, sp, #64	@ 0x40
 8013d3e:	9008      	str	r0, [sp, #32]
 8013d40:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013d44:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013d48:	2100      	movs	r1, #0
 8013d4a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013d4e:	a808      	add	r0, sp, #32
 8013d50:	f002 face 	bl	80162f0 <rcutils_string_map_init>
 8013d54:	4607      	mov	r7, r0
 8013d56:	b180      	cbz	r0, 8013d7a <rcl_node_resolve_name+0x96>
 8013d58:	f7f9 f9ca 	bl	800d0f0 <rcutils_get_error_string>
 8013d5c:	f7f9 f9e0 	bl	800d120 <rcutils_reset_error>
 8013d60:	2f0a      	cmp	r7, #10
 8013d62:	bf18      	it	ne
 8013d64:	2701      	movne	r7, #1
 8013d66:	4638      	mov	r0, r7
 8013d68:	b011      	add	sp, #68	@ 0x44
 8013d6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d6e:	b002      	add	sp, #8
 8013d70:	4770      	bx	lr
 8013d72:	270b      	movs	r7, #11
 8013d74:	e7f7      	b.n	8013d66 <rcl_node_resolve_name+0x82>
 8013d76:	2701      	movs	r7, #1
 8013d78:	e7f5      	b.n	8013d66 <rcl_node_resolve_name+0x82>
 8013d7a:	9009      	str	r0, [sp, #36]	@ 0x24
 8013d7c:	9007      	str	r0, [sp, #28]
 8013d7e:	a808      	add	r0, sp, #32
 8013d80:	f004 fd02 	bl	8018788 <rcl_get_default_topic_name_substitutions>
 8013d84:	4607      	mov	r7, r0
 8013d86:	b1a8      	cbz	r0, 8013db4 <rcl_node_resolve_name+0xd0>
 8013d88:	280a      	cmp	r0, #10
 8013d8a:	9c07      	ldr	r4, [sp, #28]
 8013d8c:	d000      	beq.n	8013d90 <rcl_node_resolve_name+0xac>
 8013d8e:	2701      	movs	r7, #1
 8013d90:	a808      	add	r0, sp, #32
 8013d92:	f002 faed 	bl	8016370 <rcutils_string_map_fini>
 8013d96:	2800      	cmp	r0, #0
 8013d98:	d13d      	bne.n	8013e16 <rcl_node_resolve_name+0x132>
 8013d9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013d9c:	4659      	mov	r1, fp
 8013d9e:	47d0      	blx	sl
 8013da0:	4659      	mov	r1, fp
 8013da2:	4620      	mov	r0, r4
 8013da4:	47d0      	blx	sl
 8013da6:	f1b8 0f00 	cmp.w	r8, #0
 8013daa:	d0dc      	beq.n	8013d66 <rcl_node_resolve_name+0x82>
 8013dac:	2f67      	cmp	r7, #103	@ 0x67
 8013dae:	bf08      	it	eq
 8013db0:	2768      	moveq	r7, #104	@ 0x68
 8013db2:	e7d8      	b.n	8013d66 <rcl_node_resolve_name+0x82>
 8013db4:	ab09      	add	r3, sp, #36	@ 0x24
 8013db6:	9305      	str	r3, [sp, #20]
 8013db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013dba:	46ec      	mov	ip, sp
 8013dbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013dc0:	682b      	ldr	r3, [r5, #0]
 8013dc2:	f8cc 3000 	str.w	r3, [ip]
 8013dc6:	464a      	mov	r2, r9
 8013dc8:	4631      	mov	r1, r6
 8013dca:	4620      	mov	r0, r4
 8013dcc:	ab08      	add	r3, sp, #32
 8013dce:	f004 fb7d 	bl	80184cc <rcl_expand_topic_name>
 8013dd2:	4607      	mov	r7, r0
 8013dd4:	b9b8      	cbnz	r0, 8013e06 <rcl_node_resolve_name+0x122>
 8013dd6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013dd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8013dda:	4602      	mov	r2, r0
 8013ddc:	a90a      	add	r1, sp, #40	@ 0x28
 8013dde:	4620      	mov	r0, r4
 8013de0:	f002 fbd6 	bl	8016590 <rmw_validate_full_topic_name>
 8013de4:	b988      	cbnz	r0, 8013e0a <rcl_node_resolve_name+0x126>
 8013de6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013de8:	b9d5      	cbnz	r5, 8013e20 <rcl_node_resolve_name+0x13c>
 8013dea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013dec:	a808      	add	r0, sp, #32
 8013dee:	601c      	str	r4, [r3, #0]
 8013df0:	f002 fabe 	bl	8016370 <rcutils_string_map_fini>
 8013df4:	4607      	mov	r7, r0
 8013df6:	b1a8      	cbz	r0, 8013e24 <rcl_node_resolve_name+0x140>
 8013df8:	f7f9 f97a 	bl	800d0f0 <rcutils_get_error_string>
 8013dfc:	462c      	mov	r4, r5
 8013dfe:	f7f9 f98f 	bl	800d120 <rcutils_reset_error>
 8013e02:	2701      	movs	r7, #1
 8013e04:	e7c9      	b.n	8013d9a <rcl_node_resolve_name+0xb6>
 8013e06:	9c07      	ldr	r4, [sp, #28]
 8013e08:	e7c2      	b.n	8013d90 <rcl_node_resolve_name+0xac>
 8013e0a:	f7f9 f971 	bl	800d0f0 <rcutils_get_error_string>
 8013e0e:	2701      	movs	r7, #1
 8013e10:	f7f9 f986 	bl	800d120 <rcutils_reset_error>
 8013e14:	e7bc      	b.n	8013d90 <rcl_node_resolve_name+0xac>
 8013e16:	f7f9 f96b 	bl	800d0f0 <rcutils_get_error_string>
 8013e1a:	f7f9 f981 	bl	800d120 <rcutils_reset_error>
 8013e1e:	e7bc      	b.n	8013d9a <rcl_node_resolve_name+0xb6>
 8013e20:	2767      	movs	r7, #103	@ 0x67
 8013e22:	e7b5      	b.n	8013d90 <rcl_node_resolve_name+0xac>
 8013e24:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013e26:	4659      	mov	r1, fp
 8013e28:	47d0      	blx	sl
 8013e2a:	4659      	mov	r1, fp
 8013e2c:	4638      	mov	r0, r7
 8013e2e:	47d0      	blx	sl
 8013e30:	e799      	b.n	8013d66 <rcl_node_resolve_name+0x82>
 8013e32:	bf00      	nop

08013e34 <rcl_service_get_rmw_handle>:
 8013e34:	b118      	cbz	r0, 8013e3e <rcl_service_get_rmw_handle+0xa>
 8013e36:	6800      	ldr	r0, [r0, #0]
 8013e38:	b108      	cbz	r0, 8013e3e <rcl_service_get_rmw_handle+0xa>
 8013e3a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013e3e:	4770      	bx	lr

08013e40 <rcl_take_request>:
 8013e40:	b570      	push	{r4, r5, r6, lr}
 8013e42:	468e      	mov	lr, r1
 8013e44:	460c      	mov	r4, r1
 8013e46:	4616      	mov	r6, r2
 8013e48:	4605      	mov	r5, r0
 8013e4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013e4e:	b08c      	sub	sp, #48	@ 0x30
 8013e50:	f10d 0c18 	add.w	ip, sp, #24
 8013e54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e58:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013e5c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013e60:	b30d      	cbz	r5, 8013ea6 <rcl_take_request+0x66>
 8013e62:	682b      	ldr	r3, [r5, #0]
 8013e64:	b1fb      	cbz	r3, 8013ea6 <rcl_take_request+0x66>
 8013e66:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013e6a:	b1e0      	cbz	r0, 8013ea6 <rcl_take_request+0x66>
 8013e6c:	b336      	cbz	r6, 8013ebc <rcl_take_request+0x7c>
 8013e6e:	2300      	movs	r3, #0
 8013e70:	f88d 3007 	strb.w	r3, [sp, #7]
 8013e74:	4632      	mov	r2, r6
 8013e76:	f10d 0307 	add.w	r3, sp, #7
 8013e7a:	a902      	add	r1, sp, #8
 8013e7c:	f002 fede 	bl	8016c3c <rmw_take_request>
 8013e80:	4605      	mov	r5, r0
 8013e82:	b198      	cbz	r0, 8013eac <rcl_take_request+0x6c>
 8013e84:	280a      	cmp	r0, #10
 8013e86:	bf18      	it	ne
 8013e88:	2501      	movne	r5, #1
 8013e8a:	f10d 0e18 	add.w	lr, sp, #24
 8013e8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013e92:	46a4      	mov	ip, r4
 8013e94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e98:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013e9c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013ea0:	4628      	mov	r0, r5
 8013ea2:	b00c      	add	sp, #48	@ 0x30
 8013ea4:	bd70      	pop	{r4, r5, r6, pc}
 8013ea6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8013eaa:	e7ee      	b.n	8013e8a <rcl_take_request+0x4a>
 8013eac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013eb0:	f240 2359 	movw	r3, #601	@ 0x259
 8013eb4:	2a00      	cmp	r2, #0
 8013eb6:	bf08      	it	eq
 8013eb8:	461d      	moveq	r5, r3
 8013eba:	e7e6      	b.n	8013e8a <rcl_take_request+0x4a>
 8013ebc:	250b      	movs	r5, #11
 8013ebe:	e7e4      	b.n	8013e8a <rcl_take_request+0x4a>

08013ec0 <rcl_send_response>:
 8013ec0:	b170      	cbz	r0, 8013ee0 <rcl_send_response+0x20>
 8013ec2:	6800      	ldr	r0, [r0, #0]
 8013ec4:	b160      	cbz	r0, 8013ee0 <rcl_send_response+0x20>
 8013ec6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013eca:	b148      	cbz	r0, 8013ee0 <rcl_send_response+0x20>
 8013ecc:	b159      	cbz	r1, 8013ee6 <rcl_send_response+0x26>
 8013ece:	b510      	push	{r4, lr}
 8013ed0:	b15a      	cbz	r2, 8013eea <rcl_send_response+0x2a>
 8013ed2:	f002 ff11 	bl	8016cf8 <rmw_send_response>
 8013ed6:	b110      	cbz	r0, 8013ede <rcl_send_response+0x1e>
 8013ed8:	2802      	cmp	r0, #2
 8013eda:	bf18      	it	ne
 8013edc:	2001      	movne	r0, #1
 8013ede:	bd10      	pop	{r4, pc}
 8013ee0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8013ee4:	4770      	bx	lr
 8013ee6:	200b      	movs	r0, #11
 8013ee8:	4770      	bx	lr
 8013eea:	200b      	movs	r0, #11
 8013eec:	bd10      	pop	{r4, pc}
 8013eee:	bf00      	nop

08013ef0 <rcl_service_is_valid>:
 8013ef0:	b130      	cbz	r0, 8013f00 <rcl_service_is_valid+0x10>
 8013ef2:	6800      	ldr	r0, [r0, #0]
 8013ef4:	b120      	cbz	r0, 8013f00 <rcl_service_is_valid+0x10>
 8013ef6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013efa:	3800      	subs	r0, #0
 8013efc:	bf18      	it	ne
 8013efe:	2001      	movne	r0, #1
 8013f00:	4770      	bx	lr
 8013f02:	bf00      	nop

08013f04 <rcl_take>:
 8013f04:	2800      	cmp	r0, #0
 8013f06:	d04a      	beq.n	8013f9e <rcl_take+0x9a>
 8013f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	6800      	ldr	r0, [r0, #0]
 8013f10:	b0a4      	sub	sp, #144	@ 0x90
 8013f12:	2800      	cmp	r0, #0
 8013f14:	d03b      	beq.n	8013f8e <rcl_take+0x8a>
 8013f16:	461f      	mov	r7, r3
 8013f18:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d036      	beq.n	8013f8e <rcl_take+0x8a>
 8013f20:	460e      	mov	r6, r1
 8013f22:	2900      	cmp	r1, #0
 8013f24:	d039      	beq.n	8013f9a <rcl_take+0x96>
 8013f26:	4615      	mov	r5, r2
 8013f28:	2a00      	cmp	r2, #0
 8013f2a:	d03c      	beq.n	8013fa6 <rcl_take+0xa2>
 8013f2c:	a802      	add	r0, sp, #8
 8013f2e:	f002 fb27 	bl	8016580 <rmw_get_zero_initialized_message_info>
 8013f32:	f10d 0c08 	add.w	ip, sp, #8
 8013f36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f3a:	46ae      	mov	lr, r5
 8013f3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f4c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f50:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8013f54:	f04f 0800 	mov.w	r8, #0
 8013f58:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8013f5c:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8013f60:	6822      	ldr	r2, [r4, #0]
 8013f62:	462b      	mov	r3, r5
 8013f64:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8013f68:	9700      	str	r7, [sp, #0]
 8013f6a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8013f6e:	4631      	mov	r1, r6
 8013f70:	f002 ff68 	bl	8016e44 <rmw_take_with_info>
 8013f74:	4603      	mov	r3, r0
 8013f76:	b9c0      	cbnz	r0, 8013faa <rcl_take+0xa6>
 8013f78:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8013f7c:	f240 1291 	movw	r2, #401	@ 0x191
 8013f80:	2900      	cmp	r1, #0
 8013f82:	bf08      	it	eq
 8013f84:	4613      	moveq	r3, r2
 8013f86:	4618      	mov	r0, r3
 8013f88:	b024      	add	sp, #144	@ 0x90
 8013f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f8e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013f92:	4618      	mov	r0, r3
 8013f94:	b024      	add	sp, #144	@ 0x90
 8013f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f9a:	230b      	movs	r3, #11
 8013f9c:	e7f3      	b.n	8013f86 <rcl_take+0x82>
 8013f9e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	4770      	bx	lr
 8013fa6:	ad14      	add	r5, sp, #80	@ 0x50
 8013fa8:	e7c0      	b.n	8013f2c <rcl_take+0x28>
 8013faa:	f7ff fb63 	bl	8013674 <rcl_convert_rmw_ret_to_rcl_ret>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	e7e9      	b.n	8013f86 <rcl_take+0x82>
 8013fb2:	bf00      	nop

08013fb4 <rcl_subscription_get_rmw_handle>:
 8013fb4:	b118      	cbz	r0, 8013fbe <rcl_subscription_get_rmw_handle+0xa>
 8013fb6:	6800      	ldr	r0, [r0, #0]
 8013fb8:	b108      	cbz	r0, 8013fbe <rcl_subscription_get_rmw_handle+0xa>
 8013fba:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8013fbe:	4770      	bx	lr

08013fc0 <rcl_subscription_is_valid>:
 8013fc0:	b130      	cbz	r0, 8013fd0 <rcl_subscription_is_valid+0x10>
 8013fc2:	6800      	ldr	r0, [r0, #0]
 8013fc4:	b120      	cbz	r0, 8013fd0 <rcl_subscription_is_valid+0x10>
 8013fc6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8013fca:	3800      	subs	r0, #0
 8013fcc:	bf18      	it	ne
 8013fce:	2001      	movne	r0, #1
 8013fd0:	4770      	bx	lr
 8013fd2:	bf00      	nop

08013fd4 <rcl_get_system_time>:
 8013fd4:	4608      	mov	r0, r1
 8013fd6:	f7f9 b8bf 	b.w	800d158 <rcutils_system_time_now>
 8013fda:	bf00      	nop

08013fdc <rcl_get_steady_time>:
 8013fdc:	4608      	mov	r0, r1
 8013fde:	f7f9 b8e3 	b.w	800d1a8 <rcutils_steady_time_now>
 8013fe2:	bf00      	nop

08013fe4 <rcl_get_ros_time>:
 8013fe4:	7a03      	ldrb	r3, [r0, #8]
 8013fe6:	b510      	push	{r4, lr}
 8013fe8:	460c      	mov	r4, r1
 8013fea:	b133      	cbz	r3, 8013ffa <rcl_get_ros_time+0x16>
 8013fec:	2105      	movs	r1, #5
 8013fee:	f001 fef3 	bl	8015dd8 <__atomic_load_8>
 8013ff2:	e9c4 0100 	strd	r0, r1, [r4]
 8013ff6:	2000      	movs	r0, #0
 8013ff8:	bd10      	pop	{r4, pc}
 8013ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ffe:	4608      	mov	r0, r1
 8014000:	f7f9 b8aa 	b.w	800d158 <rcutils_system_time_now>

08014004 <rcl_clock_init>:
 8014004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014006:	4605      	mov	r5, r0
 8014008:	4610      	mov	r0, r2
 801400a:	4614      	mov	r4, r2
 801400c:	460e      	mov	r6, r1
 801400e:	f7f9 f861 	bl	800d0d4 <rcutils_allocator_is_valid>
 8014012:	b128      	cbz	r0, 8014020 <rcl_clock_init+0x1c>
 8014014:	2d03      	cmp	r5, #3
 8014016:	d803      	bhi.n	8014020 <rcl_clock_init+0x1c>
 8014018:	e8df f005 	tbb	[pc, r5]
 801401c:	06532e1d 	.word	0x06532e1d
 8014020:	f04f 0c0b 	mov.w	ip, #11
 8014024:	4660      	mov	r0, ip
 8014026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014028:	2e00      	cmp	r6, #0
 801402a:	d0f9      	beq.n	8014020 <rcl_clock_init+0x1c>
 801402c:	2c00      	cmp	r4, #0
 801402e:	d0f7      	beq.n	8014020 <rcl_clock_init+0x1c>
 8014030:	2300      	movs	r3, #0
 8014032:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014036:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80140ec <rcl_clock_init+0xe8>
 801403a:	6133      	str	r3, [r6, #16]
 801403c:	f106 0514 	add.w	r5, r6, #20
 8014040:	469c      	mov	ip, r3
 8014042:	2703      	movs	r7, #3
 8014044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014048:	6823      	ldr	r3, [r4, #0]
 801404a:	602b      	str	r3, [r5, #0]
 801404c:	7037      	strb	r7, [r6, #0]
 801404e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8014052:	4660      	mov	r0, ip
 8014054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014056:	2e00      	cmp	r6, #0
 8014058:	d0e2      	beq.n	8014020 <rcl_clock_init+0x1c>
 801405a:	2300      	movs	r3, #0
 801405c:	7033      	strb	r3, [r6, #0]
 801405e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014062:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014066:	469c      	mov	ip, r3
 8014068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801406a:	f106 0514 	add.w	r5, r6, #20
 801406e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014070:	6823      	ldr	r3, [r4, #0]
 8014072:	602b      	str	r3, [r5, #0]
 8014074:	4660      	mov	r0, ip
 8014076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014078:	2e00      	cmp	r6, #0
 801407a:	d0d1      	beq.n	8014020 <rcl_clock_init+0x1c>
 801407c:	2c00      	cmp	r4, #0
 801407e:	d0cf      	beq.n	8014020 <rcl_clock_init+0x1c>
 8014080:	2700      	movs	r7, #0
 8014082:	7037      	strb	r7, [r6, #0]
 8014084:	46a4      	mov	ip, r4
 8014086:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801408a:	f106 0514 	add.w	r5, r6, #20
 801408e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014092:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014098:	f8dc 3000 	ldr.w	r3, [ip]
 801409c:	602b      	str	r3, [r5, #0]
 801409e:	6921      	ldr	r1, [r4, #16]
 80140a0:	6823      	ldr	r3, [r4, #0]
 80140a2:	2010      	movs	r0, #16
 80140a4:	4798      	blx	r3
 80140a6:	6130      	str	r0, [r6, #16]
 80140a8:	b1d0      	cbz	r0, 80140e0 <rcl_clock_init+0xdc>
 80140aa:	2200      	movs	r2, #0
 80140ac:	2300      	movs	r3, #0
 80140ae:	e9c0 2300 	strd	r2, r3, [r0]
 80140b2:	2301      	movs	r3, #1
 80140b4:	7207      	strb	r7, [r0, #8]
 80140b6:	4a0c      	ldr	r2, [pc, #48]	@ (80140e8 <rcl_clock_init+0xe4>)
 80140b8:	7033      	strb	r3, [r6, #0]
 80140ba:	46bc      	mov	ip, r7
 80140bc:	60f2      	str	r2, [r6, #12]
 80140be:	4660      	mov	r0, ip
 80140c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140c2:	2e00      	cmp	r6, #0
 80140c4:	d0ac      	beq.n	8014020 <rcl_clock_init+0x1c>
 80140c6:	2c00      	cmp	r4, #0
 80140c8:	d0aa      	beq.n	8014020 <rcl_clock_init+0x1c>
 80140ca:	2300      	movs	r3, #0
 80140cc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80140d0:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80140f0 <rcl_clock_init+0xec>
 80140d4:	6133      	str	r3, [r6, #16]
 80140d6:	f106 0514 	add.w	r5, r6, #20
 80140da:	469c      	mov	ip, r3
 80140dc:	2702      	movs	r7, #2
 80140de:	e7b1      	b.n	8014044 <rcl_clock_init+0x40>
 80140e0:	f04f 0c0a 	mov.w	ip, #10
 80140e4:	e79e      	b.n	8014024 <rcl_clock_init+0x20>
 80140e6:	bf00      	nop
 80140e8:	08013fe5 	.word	0x08013fe5
 80140ec:	08013fdd 	.word	0x08013fdd
 80140f0:	08013fd5 	.word	0x08013fd5

080140f4 <rcl_clock_get_now>:
 80140f4:	b140      	cbz	r0, 8014108 <rcl_clock_get_now+0x14>
 80140f6:	b139      	cbz	r1, 8014108 <rcl_clock_get_now+0x14>
 80140f8:	7803      	ldrb	r3, [r0, #0]
 80140fa:	b11b      	cbz	r3, 8014104 <rcl_clock_get_now+0x10>
 80140fc:	68c3      	ldr	r3, [r0, #12]
 80140fe:	b10b      	cbz	r3, 8014104 <rcl_clock_get_now+0x10>
 8014100:	6900      	ldr	r0, [r0, #16]
 8014102:	4718      	bx	r3
 8014104:	2001      	movs	r0, #1
 8014106:	4770      	bx	lr
 8014108:	200b      	movs	r0, #11
 801410a:	4770      	bx	lr

0801410c <rcl_clock_add_jump_callback>:
 801410c:	b082      	sub	sp, #8
 801410e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014112:	a906      	add	r1, sp, #24
 8014114:	e881 000c 	stmia.w	r1, {r2, r3}
 8014118:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 801411c:	b320      	cbz	r0, 8014168 <rcl_clock_add_jump_callback+0x5c>
 801411e:	4604      	mov	r4, r0
 8014120:	3014      	adds	r0, #20
 8014122:	f7f8 ffd7 	bl	800d0d4 <rcutils_allocator_is_valid>
 8014126:	b1f8      	cbz	r0, 8014168 <rcl_clock_add_jump_callback+0x5c>
 8014128:	b1f6      	cbz	r6, 8014168 <rcl_clock_add_jump_callback+0x5c>
 801412a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801412c:	2b00      	cmp	r3, #0
 801412e:	db1b      	blt.n	8014168 <rcl_clock_add_jump_callback+0x5c>
 8014130:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014134:	2a01      	cmp	r2, #1
 8014136:	f173 0300 	sbcs.w	r3, r3, #0
 801413a:	da15      	bge.n	8014168 <rcl_clock_add_jump_callback+0x5c>
 801413c:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8014140:	2f00      	cmp	r7, #0
 8014142:	d042      	beq.n	80141ca <rcl_clock_add_jump_callback+0xbe>
 8014144:	2300      	movs	r3, #0
 8014146:	4602      	mov	r2, r0
 8014148:	e003      	b.n	8014152 <rcl_clock_add_jump_callback+0x46>
 801414a:	42bb      	cmp	r3, r7
 801414c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8014150:	d011      	beq.n	8014176 <rcl_clock_add_jump_callback+0x6a>
 8014152:	6811      	ldr	r1, [r2, #0]
 8014154:	42b1      	cmp	r1, r6
 8014156:	f103 0301 	add.w	r3, r3, #1
 801415a:	d1f6      	bne.n	801414a <rcl_clock_add_jump_callback+0x3e>
 801415c:	6a11      	ldr	r1, [r2, #32]
 801415e:	42a9      	cmp	r1, r5
 8014160:	d1f3      	bne.n	801414a <rcl_clock_add_jump_callback+0x3e>
 8014162:	f04f 0e01 	mov.w	lr, #1
 8014166:	e001      	b.n	801416c <rcl_clock_add_jump_callback+0x60>
 8014168:	f04f 0e0b 	mov.w	lr, #11
 801416c:	4670      	mov	r0, lr
 801416e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014172:	b002      	add	sp, #8
 8014174:	4770      	bx	lr
 8014176:	3301      	adds	r3, #1
 8014178:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801417c:	00d9      	lsls	r1, r3, #3
 801417e:	69e3      	ldr	r3, [r4, #28]
 8014180:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014182:	4798      	blx	r3
 8014184:	b1f0      	cbz	r0, 80141c4 <rcl_clock_add_jump_callback+0xb8>
 8014186:	68a3      	ldr	r3, [r4, #8]
 8014188:	6060      	str	r0, [r4, #4]
 801418a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801418e:	f10d 0c18 	add.w	ip, sp, #24
 8014192:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8014196:	f103 0801 	add.w	r8, r3, #1
 801419a:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801419e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80141a2:	f106 0708 	add.w	r7, r6, #8
 80141a6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80141a8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80141ac:	f04f 0e00 	mov.w	lr, #0
 80141b0:	e887 0003 	stmia.w	r7, {r0, r1}
 80141b4:	6235      	str	r5, [r6, #32]
 80141b6:	4670      	mov	r0, lr
 80141b8:	f8c4 8008 	str.w	r8, [r4, #8]
 80141bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141c0:	b002      	add	sp, #8
 80141c2:	4770      	bx	lr
 80141c4:	f04f 0e0a 	mov.w	lr, #10
 80141c8:	e7d0      	b.n	801416c <rcl_clock_add_jump_callback+0x60>
 80141ca:	2128      	movs	r1, #40	@ 0x28
 80141cc:	e7d7      	b.n	801417e <rcl_clock_add_jump_callback+0x72>
 80141ce:	bf00      	nop

080141d0 <rcl_clock_remove_jump_callback>:
 80141d0:	2800      	cmp	r0, #0
 80141d2:	d057      	beq.n	8014284 <rcl_clock_remove_jump_callback+0xb4>
 80141d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141d8:	4605      	mov	r5, r0
 80141da:	3014      	adds	r0, #20
 80141dc:	4688      	mov	r8, r1
 80141de:	4692      	mov	sl, r2
 80141e0:	f7f8 ff78 	bl	800d0d4 <rcutils_allocator_is_valid>
 80141e4:	2800      	cmp	r0, #0
 80141e6:	d03b      	beq.n	8014260 <rcl_clock_remove_jump_callback+0x90>
 80141e8:	f1b8 0f00 	cmp.w	r8, #0
 80141ec:	d038      	beq.n	8014260 <rcl_clock_remove_jump_callback+0x90>
 80141ee:	68ae      	ldr	r6, [r5, #8]
 80141f0:	b166      	cbz	r6, 801420c <rcl_clock_remove_jump_callback+0x3c>
 80141f2:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80141f6:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 80141fa:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80141fe:	464c      	mov	r4, r9
 8014200:	6823      	ldr	r3, [r4, #0]
 8014202:	4543      	cmp	r3, r8
 8014204:	d005      	beq.n	8014212 <rcl_clock_remove_jump_callback+0x42>
 8014206:	3428      	adds	r4, #40	@ 0x28
 8014208:	42a7      	cmp	r7, r4
 801420a:	d1f9      	bne.n	8014200 <rcl_clock_remove_jump_callback+0x30>
 801420c:	2001      	movs	r0, #1
 801420e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014212:	6a23      	ldr	r3, [r4, #32]
 8014214:	3428      	adds	r4, #40	@ 0x28
 8014216:	42bc      	cmp	r4, r7
 8014218:	d02d      	beq.n	8014276 <rcl_clock_remove_jump_callback+0xa6>
 801421a:	4553      	cmp	r3, sl
 801421c:	d1f0      	bne.n	8014200 <rcl_clock_remove_jump_callback+0x30>
 801421e:	46a6      	mov	lr, r4
 8014220:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014224:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8014228:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801422c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014230:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014234:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014238:	3428      	adds	r4, #40	@ 0x28
 801423a:	42a7      	cmp	r7, r4
 801423c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014240:	d1ed      	bne.n	801421e <rcl_clock_remove_jump_callback+0x4e>
 8014242:	3e01      	subs	r6, #1
 8014244:	60ae      	str	r6, [r5, #8]
 8014246:	b176      	cbz	r6, 8014266 <rcl_clock_remove_jump_callback+0x96>
 8014248:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801424c:	69eb      	ldr	r3, [r5, #28]
 801424e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8014250:	00f1      	lsls	r1, r6, #3
 8014252:	4648      	mov	r0, r9
 8014254:	4798      	blx	r3
 8014256:	b1b8      	cbz	r0, 8014288 <rcl_clock_remove_jump_callback+0xb8>
 8014258:	6068      	str	r0, [r5, #4]
 801425a:	2000      	movs	r0, #0
 801425c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014260:	200b      	movs	r0, #11
 8014262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014266:	4648      	mov	r0, r9
 8014268:	69ab      	ldr	r3, [r5, #24]
 801426a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801426c:	4798      	blx	r3
 801426e:	606e      	str	r6, [r5, #4]
 8014270:	4630      	mov	r0, r6
 8014272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014276:	4553      	cmp	r3, sl
 8014278:	d1c8      	bne.n	801420c <rcl_clock_remove_jump_callback+0x3c>
 801427a:	3e01      	subs	r6, #1
 801427c:	60ae      	str	r6, [r5, #8]
 801427e:	2e00      	cmp	r6, #0
 8014280:	d1e2      	bne.n	8014248 <rcl_clock_remove_jump_callback+0x78>
 8014282:	e7f0      	b.n	8014266 <rcl_clock_remove_jump_callback+0x96>
 8014284:	200b      	movs	r0, #11
 8014286:	4770      	bx	lr
 8014288:	200a      	movs	r0, #10
 801428a:	e7ea      	b.n	8014262 <rcl_clock_remove_jump_callback+0x92>

0801428c <_rcl_timer_time_jump>:
 801428c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014290:	4605      	mov	r5, r0
 8014292:	b084      	sub	sp, #16
 8014294:	4614      	mov	r4, r2
 8014296:	b131      	cbz	r1, 80142a6 <_rcl_timer_time_jump+0x1a>
 8014298:	7803      	ldrb	r3, [r0, #0]
 801429a:	3b02      	subs	r3, #2
 801429c:	2b01      	cmp	r3, #1
 801429e:	d93f      	bls.n	8014320 <_rcl_timer_time_jump+0x94>
 80142a0:	b004      	add	sp, #16
 80142a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142a6:	6813      	ldr	r3, [r2, #0]
 80142a8:	a902      	add	r1, sp, #8
 80142aa:	6818      	ldr	r0, [r3, #0]
 80142ac:	f7ff ff22 	bl	80140f4 <rcl_clock_get_now>
 80142b0:	2800      	cmp	r0, #0
 80142b2:	d1f5      	bne.n	80142a0 <_rcl_timer_time_jump+0x14>
 80142b4:	6820      	ldr	r0, [r4, #0]
 80142b6:	2105      	movs	r1, #5
 80142b8:	3020      	adds	r0, #32
 80142ba:	f001 fd8d 	bl	8015dd8 <__atomic_load_8>
 80142be:	6823      	ldr	r3, [r4, #0]
 80142c0:	4681      	mov	r9, r0
 80142c2:	4688      	mov	r8, r1
 80142c4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80142c8:	2105      	movs	r1, #5
 80142ca:	f001 fd85 	bl	8015dd8 <__atomic_load_8>
 80142ce:	4607      	mov	r7, r0
 80142d0:	6820      	ldr	r0, [r4, #0]
 80142d2:	460e      	mov	r6, r1
 80142d4:	3018      	adds	r0, #24
 80142d6:	2105      	movs	r1, #5
 80142d8:	f001 fd7e 	bl	8015dd8 <__atomic_load_8>
 80142dc:	782b      	ldrb	r3, [r5, #0]
 80142de:	9a02      	ldr	r2, [sp, #8]
 80142e0:	3b02      	subs	r3, #2
 80142e2:	2b01      	cmp	r3, #1
 80142e4:	460d      	mov	r5, r1
 80142e6:	9b03      	ldr	r3, [sp, #12]
 80142e8:	4682      	mov	sl, r0
 80142ea:	d937      	bls.n	801435c <_rcl_timer_time_jump+0xd0>
 80142ec:	42ba      	cmp	r2, r7
 80142ee:	eb73 0106 	sbcs.w	r1, r3, r6
 80142f2:	da5f      	bge.n	80143b4 <_rcl_timer_time_jump+0x128>
 80142f4:	454a      	cmp	r2, r9
 80142f6:	eb73 0108 	sbcs.w	r1, r3, r8
 80142fa:	dad1      	bge.n	80142a0 <_rcl_timer_time_jump+0x14>
 80142fc:	6820      	ldr	r0, [r4, #0]
 80142fe:	eb1a 0202 	adds.w	r2, sl, r2
 8014302:	eb43 0305 	adc.w	r3, r3, r5
 8014306:	2505      	movs	r5, #5
 8014308:	3028      	adds	r0, #40	@ 0x28
 801430a:	9500      	str	r5, [sp, #0]
 801430c:	f001 fd9a 	bl	8015e44 <__atomic_store_8>
 8014310:	6820      	ldr	r0, [r4, #0]
 8014312:	9500      	str	r5, [sp, #0]
 8014314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014318:	3020      	adds	r0, #32
 801431a:	f001 fd93 	bl	8015e44 <__atomic_store_8>
 801431e:	e7bf      	b.n	80142a0 <_rcl_timer_time_jump+0x14>
 8014320:	6813      	ldr	r3, [r2, #0]
 8014322:	a902      	add	r1, sp, #8
 8014324:	6818      	ldr	r0, [r3, #0]
 8014326:	f7ff fee5 	bl	80140f4 <rcl_clock_get_now>
 801432a:	2800      	cmp	r0, #0
 801432c:	d1b8      	bne.n	80142a0 <_rcl_timer_time_jump+0x14>
 801432e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014332:	4313      	orrs	r3, r2
 8014334:	d0b4      	beq.n	80142a0 <_rcl_timer_time_jump+0x14>
 8014336:	6820      	ldr	r0, [r4, #0]
 8014338:	2105      	movs	r1, #5
 801433a:	3028      	adds	r0, #40	@ 0x28
 801433c:	f001 fd4c 	bl	8015dd8 <__atomic_load_8>
 8014340:	9d02      	ldr	r5, [sp, #8]
 8014342:	9b03      	ldr	r3, [sp, #12]
 8014344:	4602      	mov	r2, r0
 8014346:	6820      	ldr	r0, [r4, #0]
 8014348:	1b52      	subs	r2, r2, r5
 801434a:	f04f 0405 	mov.w	r4, #5
 801434e:	9400      	str	r4, [sp, #0]
 8014350:	eb61 0303 	sbc.w	r3, r1, r3
 8014354:	3030      	adds	r0, #48	@ 0x30
 8014356:	f001 fd75 	bl	8015e44 <__atomic_store_8>
 801435a:	e7a1      	b.n	80142a0 <_rcl_timer_time_jump+0x14>
 801435c:	4313      	orrs	r3, r2
 801435e:	d09f      	beq.n	80142a0 <_rcl_timer_time_jump+0x14>
 8014360:	6820      	ldr	r0, [r4, #0]
 8014362:	f04f 0805 	mov.w	r8, #5
 8014366:	2300      	movs	r3, #0
 8014368:	f8cd 8000 	str.w	r8, [sp]
 801436c:	3030      	adds	r0, #48	@ 0x30
 801436e:	2200      	movs	r2, #0
 8014370:	f001 fd9e 	bl	8015eb0 <__atomic_exchange_8>
 8014374:	ea51 0300 	orrs.w	r3, r1, r0
 8014378:	4606      	mov	r6, r0
 801437a:	460f      	mov	r7, r1
 801437c:	d090      	beq.n	80142a0 <_rcl_timer_time_jump+0x14>
 801437e:	9a02      	ldr	r2, [sp, #8]
 8014380:	9b03      	ldr	r3, [sp, #12]
 8014382:	f8cd 8000 	str.w	r8, [sp]
 8014386:	1a12      	subs	r2, r2, r0
 8014388:	6820      	ldr	r0, [r4, #0]
 801438a:	eb63 0301 	sbc.w	r3, r3, r1
 801438e:	eb12 020a 	adds.w	r2, r2, sl
 8014392:	eb43 0305 	adc.w	r3, r3, r5
 8014396:	3028      	adds	r0, #40	@ 0x28
 8014398:	f001 fd54 	bl	8015e44 <__atomic_store_8>
 801439c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80143a0:	f8cd 8000 	str.w	r8, [sp]
 80143a4:	6820      	ldr	r0, [r4, #0]
 80143a6:	1b92      	subs	r2, r2, r6
 80143a8:	eb63 0307 	sbc.w	r3, r3, r7
 80143ac:	3020      	adds	r0, #32
 80143ae:	f001 fd49 	bl	8015e44 <__atomic_store_8>
 80143b2:	e775      	b.n	80142a0 <_rcl_timer_time_jump+0x14>
 80143b4:	6820      	ldr	r0, [r4, #0]
 80143b6:	3008      	adds	r0, #8
 80143b8:	f004 fae4 	bl	8018984 <rcl_trigger_guard_condition>
 80143bc:	e770      	b.n	80142a0 <_rcl_timer_time_jump+0x14>
 80143be:	bf00      	nop

080143c0 <rcl_get_zero_initialized_timer>:
 80143c0:	4b01      	ldr	r3, [pc, #4]	@ (80143c8 <rcl_get_zero_initialized_timer+0x8>)
 80143c2:	6818      	ldr	r0, [r3, #0]
 80143c4:	4770      	bx	lr
 80143c6:	bf00      	nop
 80143c8:	0801afac 	.word	0x0801afac
 80143cc:	00000000 	.word	0x00000000

080143d0 <rcl_timer_init>:
 80143d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143d4:	b0aa      	sub	sp, #168	@ 0xa8
 80143d6:	4604      	mov	r4, r0
 80143d8:	a835      	add	r0, sp, #212	@ 0xd4
 80143da:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80143de:	460d      	mov	r5, r1
 80143e0:	4692      	mov	sl, r2
 80143e2:	f7f8 fe77 	bl	800d0d4 <rcutils_allocator_is_valid>
 80143e6:	2800      	cmp	r0, #0
 80143e8:	d064      	beq.n	80144b4 <rcl_timer_init+0xe4>
 80143ea:	2c00      	cmp	r4, #0
 80143ec:	d062      	beq.n	80144b4 <rcl_timer_init+0xe4>
 80143ee:	2d00      	cmp	r5, #0
 80143f0:	d060      	beq.n	80144b4 <rcl_timer_init+0xe4>
 80143f2:	2f00      	cmp	r7, #0
 80143f4:	db5e      	blt.n	80144b4 <rcl_timer_init+0xe4>
 80143f6:	6823      	ldr	r3, [r4, #0]
 80143f8:	b123      	cbz	r3, 8014404 <rcl_timer_init+0x34>
 80143fa:	2664      	movs	r6, #100	@ 0x64
 80143fc:	4630      	mov	r0, r6
 80143fe:	b02a      	add	sp, #168	@ 0xa8
 8014400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014404:	a908      	add	r1, sp, #32
 8014406:	4628      	mov	r0, r5
 8014408:	f7ff fe74 	bl	80140f4 <rcl_clock_get_now>
 801440c:	4606      	mov	r6, r0
 801440e:	2800      	cmp	r0, #0
 8014410:	d1f4      	bne.n	80143fc <rcl_timer_init+0x2c>
 8014412:	ae06      	add	r6, sp, #24
 8014414:	4630      	mov	r0, r6
 8014416:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801441a:	f004 f9bb 	bl	8018794 <rcl_get_zero_initialized_guard_condition>
 801441e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014422:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8014426:	ae0b      	add	r6, sp, #44	@ 0x2c
 8014428:	e889 0003 	stmia.w	r9, {r0, r1}
 801442c:	4630      	mov	r0, r6
 801442e:	f004 fa8d 	bl	801894c <rcl_guard_condition_get_default_options>
 8014432:	ab0d      	add	r3, sp, #52	@ 0x34
 8014434:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014438:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801443c:	4651      	mov	r1, sl
 801443e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014442:	4648      	mov	r0, r9
 8014444:	f004 f9b0 	bl	80187a8 <rcl_guard_condition_init>
 8014448:	4606      	mov	r6, r0
 801444a:	2800      	cmp	r0, #0
 801444c:	d1d6      	bne.n	80143fc <rcl_timer_init+0x2c>
 801444e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014450:	781b      	ldrb	r3, [r3, #0]
 8014452:	2b01      	cmp	r3, #1
 8014454:	d033      	beq.n	80144be <rcl_timer_init+0xee>
 8014456:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8014458:	911a      	str	r1, [sp, #104]	@ 0x68
 801445a:	4642      	mov	r2, r8
 801445c:	463b      	mov	r3, r7
 801445e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8014462:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014466:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8014518 <rcl_timer_init+0x148>
 801446a:	eb12 0008 	adds.w	r0, r2, r8
 801446e:	eb47 0103 	adc.w	r1, r7, r3
 8014472:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8014476:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801447a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801447e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8014482:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014486:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801448a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801448e:	f8de 3000 	ldr.w	r3, [lr]
 8014492:	f8cc 3000 	str.w	r3, [ip]
 8014496:	f04f 0a00 	mov.w	sl, #0
 801449a:	4619      	mov	r1, r3
 801449c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 80144a0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80144a2:	2050      	movs	r0, #80	@ 0x50
 80144a4:	4798      	blx	r3
 80144a6:	6020      	str	r0, [r4, #0]
 80144a8:	b358      	cbz	r0, 8014502 <rcl_timer_init+0x132>
 80144aa:	2250      	movs	r2, #80	@ 0x50
 80144ac:	a916      	add	r1, sp, #88	@ 0x58
 80144ae:	f005 f9a0 	bl	80197f2 <memcpy>
 80144b2:	e7a3      	b.n	80143fc <rcl_timer_init+0x2c>
 80144b4:	260b      	movs	r6, #11
 80144b6:	4630      	mov	r0, r6
 80144b8:	b02a      	add	sp, #168	@ 0xa8
 80144ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144be:	2001      	movs	r0, #1
 80144c0:	2100      	movs	r1, #0
 80144c2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80144c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80144ca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80144ce:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80144d2:	4a13      	ldr	r2, [pc, #76]	@ (8014520 <rcl_timer_init+0x150>)
 80144d4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80144d8:	9405      	str	r4, [sp, #20]
 80144da:	9204      	str	r2, [sp, #16]
 80144dc:	ab12      	add	r3, sp, #72	@ 0x48
 80144de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80144e0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80144e4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80144e8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80144ec:	4628      	mov	r0, r5
 80144ee:	f7ff fe0d 	bl	801410c <rcl_clock_add_jump_callback>
 80144f2:	4682      	mov	sl, r0
 80144f4:	2800      	cmp	r0, #0
 80144f6:	d0ae      	beq.n	8014456 <rcl_timer_init+0x86>
 80144f8:	4648      	mov	r0, r9
 80144fa:	f004 fa01 	bl	8018900 <rcl_guard_condition_fini>
 80144fe:	4656      	mov	r6, sl
 8014500:	e77c      	b.n	80143fc <rcl_timer_init+0x2c>
 8014502:	4648      	mov	r0, r9
 8014504:	f004 f9fc 	bl	8018900 <rcl_guard_condition_fini>
 8014508:	4905      	ldr	r1, [pc, #20]	@ (8014520 <rcl_timer_init+0x150>)
 801450a:	4622      	mov	r2, r4
 801450c:	4628      	mov	r0, r5
 801450e:	f7ff fe5f 	bl	80141d0 <rcl_clock_remove_jump_callback>
 8014512:	260a      	movs	r6, #10
 8014514:	e772      	b.n	80143fc <rcl_timer_init+0x2c>
 8014516:	bf00      	nop
	...
 8014520:	0801428d 	.word	0x0801428d

08014524 <rcl_timer_call>:
 8014524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014528:	b087      	sub	sp, #28
 801452a:	2800      	cmp	r0, #0
 801452c:	d06d      	beq.n	801460a <rcl_timer_call+0xe6>
 801452e:	6803      	ldr	r3, [r0, #0]
 8014530:	4604      	mov	r4, r0
 8014532:	2b00      	cmp	r3, #0
 8014534:	d063      	beq.n	80145fe <rcl_timer_call+0xda>
 8014536:	f3bf 8f5b 	dmb	ish
 801453a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801453e:	f3bf 8f5b 	dmb	ish
 8014542:	2b00      	cmp	r3, #0
 8014544:	d150      	bne.n	80145e8 <rcl_timer_call+0xc4>
 8014546:	6803      	ldr	r3, [r0, #0]
 8014548:	a904      	add	r1, sp, #16
 801454a:	6818      	ldr	r0, [r3, #0]
 801454c:	f7ff fdd2 	bl	80140f4 <rcl_clock_get_now>
 8014550:	4605      	mov	r5, r0
 8014552:	2800      	cmp	r0, #0
 8014554:	d14a      	bne.n	80145ec <rcl_timer_call+0xc8>
 8014556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801455a:	2b00      	cmp	r3, #0
 801455c:	db4a      	blt.n	80145f4 <rcl_timer_call+0xd0>
 801455e:	6820      	ldr	r0, [r4, #0]
 8014560:	f04f 0a05 	mov.w	sl, #5
 8014564:	f8cd a000 	str.w	sl, [sp]
 8014568:	3020      	adds	r0, #32
 801456a:	f001 fca1 	bl	8015eb0 <__atomic_exchange_8>
 801456e:	6823      	ldr	r3, [r4, #0]
 8014570:	f3bf 8f5b 	dmb	ish
 8014574:	4680      	mov	r8, r0
 8014576:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801457a:	f3bf 8f5b 	dmb	ish
 801457e:	6820      	ldr	r0, [r4, #0]
 8014580:	4689      	mov	r9, r1
 8014582:	3028      	adds	r0, #40	@ 0x28
 8014584:	4651      	mov	r1, sl
 8014586:	f001 fc27 	bl	8015dd8 <__atomic_load_8>
 801458a:	4606      	mov	r6, r0
 801458c:	6820      	ldr	r0, [r4, #0]
 801458e:	460f      	mov	r7, r1
 8014590:	3018      	adds	r0, #24
 8014592:	4651      	mov	r1, sl
 8014594:	f001 fc20 	bl	8015dd8 <__atomic_load_8>
 8014598:	1836      	adds	r6, r6, r0
 801459a:	4602      	mov	r2, r0
 801459c:	4682      	mov	sl, r0
 801459e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80145a2:	eb47 0701 	adc.w	r7, r7, r1
 80145a6:	4286      	cmp	r6, r0
 80145a8:	460b      	mov	r3, r1
 80145aa:	eb77 010c 	sbcs.w	r1, r7, ip
 80145ae:	da04      	bge.n	80145ba <rcl_timer_call+0x96>
 80145b0:	ea53 0102 	orrs.w	r1, r3, r2
 80145b4:	d12e      	bne.n	8014614 <rcl_timer_call+0xf0>
 80145b6:	4606      	mov	r6, r0
 80145b8:	4667      	mov	r7, ip
 80145ba:	6820      	ldr	r0, [r4, #0]
 80145bc:	2105      	movs	r1, #5
 80145be:	4632      	mov	r2, r6
 80145c0:	463b      	mov	r3, r7
 80145c2:	3028      	adds	r0, #40	@ 0x28
 80145c4:	9100      	str	r1, [sp, #0]
 80145c6:	f001 fc3d 	bl	8015e44 <__atomic_store_8>
 80145ca:	f1bb 0f00 	cmp.w	fp, #0
 80145ce:	d00d      	beq.n	80145ec <rcl_timer_call+0xc8>
 80145d0:	9a04      	ldr	r2, [sp, #16]
 80145d2:	9b05      	ldr	r3, [sp, #20]
 80145d4:	ebb2 0208 	subs.w	r2, r2, r8
 80145d8:	4620      	mov	r0, r4
 80145da:	eb63 0309 	sbc.w	r3, r3, r9
 80145de:	47d8      	blx	fp
 80145e0:	4628      	mov	r0, r5
 80145e2:	b007      	add	sp, #28
 80145e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145e8:	f240 3521 	movw	r5, #801	@ 0x321
 80145ec:	4628      	mov	r0, r5
 80145ee:	b007      	add	sp, #28
 80145f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145f4:	2501      	movs	r5, #1
 80145f6:	4628      	mov	r0, r5
 80145f8:	b007      	add	sp, #28
 80145fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145fe:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8014602:	4628      	mov	r0, r5
 8014604:	b007      	add	sp, #28
 8014606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801460a:	250b      	movs	r5, #11
 801460c:	4628      	mov	r0, r5
 801460e:	b007      	add	sp, #28
 8014610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014614:	1b80      	subs	r0, r0, r6
 8014616:	eb6c 0107 	sbc.w	r1, ip, r7
 801461a:	3801      	subs	r0, #1
 801461c:	f161 0100 	sbc.w	r1, r1, #0
 8014620:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014624:	f7ec f820 	bl	8000668 <__aeabi_ldivmod>
 8014628:	9b02      	ldr	r3, [sp, #8]
 801462a:	3001      	adds	r0, #1
 801462c:	f141 0100 	adc.w	r1, r1, #0
 8014630:	fb00 f303 	mul.w	r3, r0, r3
 8014634:	fb01 330a 	mla	r3, r1, sl, r3
 8014638:	fba0 0a0a 	umull	r0, sl, r0, sl
 801463c:	1986      	adds	r6, r0, r6
 801463e:	4453      	add	r3, sl
 8014640:	eb43 0707 	adc.w	r7, r3, r7
 8014644:	e7b9      	b.n	80145ba <rcl_timer_call+0x96>
 8014646:	bf00      	nop

08014648 <rcl_timer_is_ready>:
 8014648:	b570      	push	{r4, r5, r6, lr}
 801464a:	b082      	sub	sp, #8
 801464c:	b378      	cbz	r0, 80146ae <rcl_timer_is_ready+0x66>
 801464e:	6803      	ldr	r3, [r0, #0]
 8014650:	4604      	mov	r4, r0
 8014652:	b383      	cbz	r3, 80146b6 <rcl_timer_is_ready+0x6e>
 8014654:	460d      	mov	r5, r1
 8014656:	b351      	cbz	r1, 80146ae <rcl_timer_is_ready+0x66>
 8014658:	f3bf 8f5b 	dmb	ish
 801465c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014660:	f3bf 8f5b 	dmb	ish
 8014664:	b953      	cbnz	r3, 801467c <rcl_timer_is_ready+0x34>
 8014666:	6803      	ldr	r3, [r0, #0]
 8014668:	4669      	mov	r1, sp
 801466a:	6818      	ldr	r0, [r3, #0]
 801466c:	f7ff fd42 	bl	80140f4 <rcl_clock_get_now>
 8014670:	4606      	mov	r6, r0
 8014672:	b140      	cbz	r0, 8014686 <rcl_timer_is_ready+0x3e>
 8014674:	f240 3321 	movw	r3, #801	@ 0x321
 8014678:	4298      	cmp	r0, r3
 801467a:	d101      	bne.n	8014680 <rcl_timer_is_ready+0x38>
 801467c:	2600      	movs	r6, #0
 801467e:	702e      	strb	r6, [r5, #0]
 8014680:	4630      	mov	r0, r6
 8014682:	b002      	add	sp, #8
 8014684:	bd70      	pop	{r4, r5, r6, pc}
 8014686:	6820      	ldr	r0, [r4, #0]
 8014688:	2105      	movs	r1, #5
 801468a:	3028      	adds	r0, #40	@ 0x28
 801468c:	f001 fba4 	bl	8015dd8 <__atomic_load_8>
 8014690:	9b00      	ldr	r3, [sp, #0]
 8014692:	1ac0      	subs	r0, r0, r3
 8014694:	9b01      	ldr	r3, [sp, #4]
 8014696:	eb61 0103 	sbc.w	r1, r1, r3
 801469a:	2801      	cmp	r0, #1
 801469c:	f171 0300 	sbcs.w	r3, r1, #0
 80146a0:	bfb4      	ite	lt
 80146a2:	2301      	movlt	r3, #1
 80146a4:	2300      	movge	r3, #0
 80146a6:	4630      	mov	r0, r6
 80146a8:	702b      	strb	r3, [r5, #0]
 80146aa:	b002      	add	sp, #8
 80146ac:	bd70      	pop	{r4, r5, r6, pc}
 80146ae:	260b      	movs	r6, #11
 80146b0:	4630      	mov	r0, r6
 80146b2:	b002      	add	sp, #8
 80146b4:	bd70      	pop	{r4, r5, r6, pc}
 80146b6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80146ba:	e7e1      	b.n	8014680 <rcl_timer_is_ready+0x38>

080146bc <rcl_timer_get_time_until_next_call>:
 80146bc:	b570      	push	{r4, r5, r6, lr}
 80146be:	b082      	sub	sp, #8
 80146c0:	b330      	cbz	r0, 8014710 <rcl_timer_get_time_until_next_call+0x54>
 80146c2:	6803      	ldr	r3, [r0, #0]
 80146c4:	4604      	mov	r4, r0
 80146c6:	b33b      	cbz	r3, 8014718 <rcl_timer_get_time_until_next_call+0x5c>
 80146c8:	460d      	mov	r5, r1
 80146ca:	b309      	cbz	r1, 8014710 <rcl_timer_get_time_until_next_call+0x54>
 80146cc:	f3bf 8f5b 	dmb	ish
 80146d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80146d4:	f3bf 8f5b 	dmb	ish
 80146d8:	b9ab      	cbnz	r3, 8014706 <rcl_timer_get_time_until_next_call+0x4a>
 80146da:	6803      	ldr	r3, [r0, #0]
 80146dc:	4669      	mov	r1, sp
 80146de:	6818      	ldr	r0, [r3, #0]
 80146e0:	f7ff fd08 	bl	80140f4 <rcl_clock_get_now>
 80146e4:	4606      	mov	r6, r0
 80146e6:	b958      	cbnz	r0, 8014700 <rcl_timer_get_time_until_next_call+0x44>
 80146e8:	6820      	ldr	r0, [r4, #0]
 80146ea:	2105      	movs	r1, #5
 80146ec:	3028      	adds	r0, #40	@ 0x28
 80146ee:	f001 fb73 	bl	8015dd8 <__atomic_load_8>
 80146f2:	9b00      	ldr	r3, [sp, #0]
 80146f4:	1ac0      	subs	r0, r0, r3
 80146f6:	9b01      	ldr	r3, [sp, #4]
 80146f8:	6028      	str	r0, [r5, #0]
 80146fa:	eb61 0103 	sbc.w	r1, r1, r3
 80146fe:	6069      	str	r1, [r5, #4]
 8014700:	4630      	mov	r0, r6
 8014702:	b002      	add	sp, #8
 8014704:	bd70      	pop	{r4, r5, r6, pc}
 8014706:	f240 3621 	movw	r6, #801	@ 0x321
 801470a:	4630      	mov	r0, r6
 801470c:	b002      	add	sp, #8
 801470e:	bd70      	pop	{r4, r5, r6, pc}
 8014710:	260b      	movs	r6, #11
 8014712:	4630      	mov	r0, r6
 8014714:	b002      	add	sp, #8
 8014716:	bd70      	pop	{r4, r5, r6, pc}
 8014718:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801471c:	e7f0      	b.n	8014700 <rcl_timer_get_time_until_next_call+0x44>
 801471e:	bf00      	nop

08014720 <rcl_timer_get_guard_condition>:
 8014720:	b130      	cbz	r0, 8014730 <rcl_timer_get_guard_condition+0x10>
 8014722:	6800      	ldr	r0, [r0, #0]
 8014724:	b120      	cbz	r0, 8014730 <rcl_timer_get_guard_condition+0x10>
 8014726:	68c3      	ldr	r3, [r0, #12]
 8014728:	b10b      	cbz	r3, 801472e <rcl_timer_get_guard_condition+0xe>
 801472a:	3008      	adds	r0, #8
 801472c:	4770      	bx	lr
 801472e:	4618      	mov	r0, r3
 8014730:	4770      	bx	lr
 8014732:	bf00      	nop

08014734 <rcl_get_zero_initialized_wait_set>:
 8014734:	b510      	push	{r4, lr}
 8014736:	4c08      	ldr	r4, [pc, #32]	@ (8014758 <rcl_get_zero_initialized_wait_set+0x24>)
 8014738:	4686      	mov	lr, r0
 801473a:	4684      	mov	ip, r0
 801473c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801473e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801474a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801474e:	6823      	ldr	r3, [r4, #0]
 8014750:	f8cc 3000 	str.w	r3, [ip]
 8014754:	4670      	mov	r0, lr
 8014756:	bd10      	pop	{r4, pc}
 8014758:	0801afb0 	.word	0x0801afb0

0801475c <rcl_wait_set_is_valid>:
 801475c:	b118      	cbz	r0, 8014766 <rcl_wait_set_is_valid+0xa>
 801475e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014760:	3800      	subs	r0, #0
 8014762:	bf18      	it	ne
 8014764:	2001      	movne	r0, #1
 8014766:	4770      	bx	lr

08014768 <rcl_wait_set_fini>:
 8014768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801476c:	b082      	sub	sp, #8
 801476e:	2800      	cmp	r0, #0
 8014770:	f000 8095 	beq.w	801489e <rcl_wait_set_fini+0x136>
 8014774:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014776:	4604      	mov	r4, r0
 8014778:	2e00      	cmp	r6, #0
 801477a:	f000 808c 	beq.w	8014896 <rcl_wait_set_fini+0x12e>
 801477e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014780:	f002 fd36 	bl	80171f0 <rmw_destroy_wait_set>
 8014784:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014786:	1e06      	subs	r6, r0, #0
 8014788:	bf18      	it	ne
 801478a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801478e:	2d00      	cmp	r5, #0
 8014790:	f000 8081 	beq.w	8014896 <rcl_wait_set_fini+0x12e>
 8014794:	6820      	ldr	r0, [r4, #0]
 8014796:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801479a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801479c:	2700      	movs	r7, #0
 801479e:	6067      	str	r7, [r4, #4]
 80147a0:	602f      	str	r7, [r5, #0]
 80147a2:	b120      	cbz	r0, 80147ae <rcl_wait_set_fini+0x46>
 80147a4:	9101      	str	r1, [sp, #4]
 80147a6:	47c0      	blx	r8
 80147a8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147aa:	9901      	ldr	r1, [sp, #4]
 80147ac:	6027      	str	r7, [r4, #0]
 80147ae:	68a8      	ldr	r0, [r5, #8]
 80147b0:	b120      	cbz	r0, 80147bc <rcl_wait_set_fini+0x54>
 80147b2:	47c0      	blx	r8
 80147b4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147b6:	2300      	movs	r3, #0
 80147b8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80147bc:	68a0      	ldr	r0, [r4, #8]
 80147be:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80147c0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80147c2:	f04f 0800 	mov.w	r8, #0
 80147c6:	f8c4 800c 	str.w	r8, [r4, #12]
 80147ca:	f8c5 800c 	str.w	r8, [r5, #12]
 80147ce:	b128      	cbz	r0, 80147dc <rcl_wait_set_fini+0x74>
 80147d0:	47b8      	blx	r7
 80147d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147d4:	f8c4 8008 	str.w	r8, [r4, #8]
 80147d8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80147da:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80147dc:	6968      	ldr	r0, [r5, #20]
 80147de:	f04f 0800 	mov.w	r8, #0
 80147e2:	f8c5 8010 	str.w	r8, [r5, #16]
 80147e6:	b128      	cbz	r0, 80147f4 <rcl_wait_set_fini+0x8c>
 80147e8:	47b8      	blx	r7
 80147ea:	f8c5 8014 	str.w	r8, [r5, #20]
 80147ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147f0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80147f2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80147f4:	6920      	ldr	r0, [r4, #16]
 80147f6:	f04f 0800 	mov.w	r8, #0
 80147fa:	f8c4 8014 	str.w	r8, [r4, #20]
 80147fe:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8014802:	b128      	cbz	r0, 8014810 <rcl_wait_set_fini+0xa8>
 8014804:	47b8      	blx	r7
 8014806:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014808:	f8c4 8010 	str.w	r8, [r4, #16]
 801480c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801480e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014810:	69a0      	ldr	r0, [r4, #24]
 8014812:	f04f 0800 	mov.w	r8, #0
 8014816:	f8c4 801c 	str.w	r8, [r4, #28]
 801481a:	f8c5 8018 	str.w	r8, [r5, #24]
 801481e:	b128      	cbz	r0, 801482c <rcl_wait_set_fini+0xc4>
 8014820:	9101      	str	r1, [sp, #4]
 8014822:	47b8      	blx	r7
 8014824:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014826:	9901      	ldr	r1, [sp, #4]
 8014828:	f8c4 8018 	str.w	r8, [r4, #24]
 801482c:	6a28      	ldr	r0, [r5, #32]
 801482e:	b120      	cbz	r0, 801483a <rcl_wait_set_fini+0xd2>
 8014830:	47b8      	blx	r7
 8014832:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014834:	2300      	movs	r3, #0
 8014836:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801483a:	6a20      	ldr	r0, [r4, #32]
 801483c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014840:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014842:	2700      	movs	r7, #0
 8014844:	6267      	str	r7, [r4, #36]	@ 0x24
 8014846:	626f      	str	r7, [r5, #36]	@ 0x24
 8014848:	b120      	cbz	r0, 8014854 <rcl_wait_set_fini+0xec>
 801484a:	9101      	str	r1, [sp, #4]
 801484c:	47c0      	blx	r8
 801484e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014850:	9901      	ldr	r1, [sp, #4]
 8014852:	6227      	str	r7, [r4, #32]
 8014854:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8014856:	b120      	cbz	r0, 8014862 <rcl_wait_set_fini+0xfa>
 8014858:	47c0      	blx	r8
 801485a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801485c:	2300      	movs	r3, #0
 801485e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014862:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014864:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014868:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801486a:	2700      	movs	r7, #0
 801486c:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801486e:	632f      	str	r7, [r5, #48]	@ 0x30
 8014870:	b120      	cbz	r0, 801487c <rcl_wait_set_fini+0x114>
 8014872:	9101      	str	r1, [sp, #4]
 8014874:	47c0      	blx	r8
 8014876:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014878:	9901      	ldr	r1, [sp, #4]
 801487a:	62a7      	str	r7, [r4, #40]	@ 0x28
 801487c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801487e:	b120      	cbz	r0, 801488a <rcl_wait_set_fini+0x122>
 8014880:	47c0      	blx	r8
 8014882:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014884:	2300      	movs	r3, #0
 8014886:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801488a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801488c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801488e:	4628      	mov	r0, r5
 8014890:	4798      	blx	r3
 8014892:	2300      	movs	r3, #0
 8014894:	6323      	str	r3, [r4, #48]	@ 0x30
 8014896:	4630      	mov	r0, r6
 8014898:	b002      	add	sp, #8
 801489a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801489e:	260b      	movs	r6, #11
 80148a0:	4630      	mov	r0, r6
 80148a2:	b002      	add	sp, #8
 80148a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080148a8 <rcl_wait_set_add_subscription>:
 80148a8:	b318      	cbz	r0, 80148f2 <rcl_wait_set_add_subscription+0x4a>
 80148aa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80148ac:	b570      	push	{r4, r5, r6, lr}
 80148ae:	4604      	mov	r4, r0
 80148b0:	b30b      	cbz	r3, 80148f6 <rcl_wait_set_add_subscription+0x4e>
 80148b2:	b319      	cbz	r1, 80148fc <rcl_wait_set_add_subscription+0x54>
 80148b4:	681d      	ldr	r5, [r3, #0]
 80148b6:	6840      	ldr	r0, [r0, #4]
 80148b8:	4285      	cmp	r5, r0
 80148ba:	d217      	bcs.n	80148ec <rcl_wait_set_add_subscription+0x44>
 80148bc:	6820      	ldr	r0, [r4, #0]
 80148be:	1c6e      	adds	r6, r5, #1
 80148c0:	601e      	str	r6, [r3, #0]
 80148c2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80148c6:	b102      	cbz	r2, 80148ca <rcl_wait_set_add_subscription+0x22>
 80148c8:	6015      	str	r5, [r2, #0]
 80148ca:	4608      	mov	r0, r1
 80148cc:	f7ff fb72 	bl	8013fb4 <rcl_subscription_get_rmw_handle>
 80148d0:	b150      	cbz	r0, 80148e8 <rcl_wait_set_add_subscription+0x40>
 80148d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148d4:	6842      	ldr	r2, [r0, #4]
 80148d6:	689b      	ldr	r3, [r3, #8]
 80148d8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80148dc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80148de:	6853      	ldr	r3, [r2, #4]
 80148e0:	3301      	adds	r3, #1
 80148e2:	2000      	movs	r0, #0
 80148e4:	6053      	str	r3, [r2, #4]
 80148e6:	bd70      	pop	{r4, r5, r6, pc}
 80148e8:	2001      	movs	r0, #1
 80148ea:	bd70      	pop	{r4, r5, r6, pc}
 80148ec:	f240 3086 	movw	r0, #902	@ 0x386
 80148f0:	bd70      	pop	{r4, r5, r6, pc}
 80148f2:	200b      	movs	r0, #11
 80148f4:	4770      	bx	lr
 80148f6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80148fa:	bd70      	pop	{r4, r5, r6, pc}
 80148fc:	200b      	movs	r0, #11
 80148fe:	bd70      	pop	{r4, r5, r6, pc}

08014900 <rcl_wait_set_clear>:
 8014900:	2800      	cmp	r0, #0
 8014902:	d073      	beq.n	80149ec <rcl_wait_set_clear+0xec>
 8014904:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014906:	b510      	push	{r4, lr}
 8014908:	4604      	mov	r4, r0
 801490a:	2b00      	cmp	r3, #0
 801490c:	d070      	beq.n	80149f0 <rcl_wait_set_clear+0xf0>
 801490e:	6800      	ldr	r0, [r0, #0]
 8014910:	b138      	cbz	r0, 8014922 <rcl_wait_set_clear+0x22>
 8014912:	6862      	ldr	r2, [r4, #4]
 8014914:	2100      	movs	r1, #0
 8014916:	0092      	lsls	r2, r2, #2
 8014918:	f004 fea2 	bl	8019660 <memset>
 801491c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801491e:	2200      	movs	r2, #0
 8014920:	601a      	str	r2, [r3, #0]
 8014922:	68a0      	ldr	r0, [r4, #8]
 8014924:	b138      	cbz	r0, 8014936 <rcl_wait_set_clear+0x36>
 8014926:	68e2      	ldr	r2, [r4, #12]
 8014928:	2100      	movs	r1, #0
 801492a:	0092      	lsls	r2, r2, #2
 801492c:	f004 fe98 	bl	8019660 <memset>
 8014930:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014932:	2200      	movs	r2, #0
 8014934:	60da      	str	r2, [r3, #12]
 8014936:	69a0      	ldr	r0, [r4, #24]
 8014938:	b138      	cbz	r0, 801494a <rcl_wait_set_clear+0x4a>
 801493a:	69e2      	ldr	r2, [r4, #28]
 801493c:	2100      	movs	r1, #0
 801493e:	0092      	lsls	r2, r2, #2
 8014940:	f004 fe8e 	bl	8019660 <memset>
 8014944:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014946:	2200      	movs	r2, #0
 8014948:	619a      	str	r2, [r3, #24]
 801494a:	6a20      	ldr	r0, [r4, #32]
 801494c:	b138      	cbz	r0, 801495e <rcl_wait_set_clear+0x5e>
 801494e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014950:	2100      	movs	r1, #0
 8014952:	0092      	lsls	r2, r2, #2
 8014954:	f004 fe84 	bl	8019660 <memset>
 8014958:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801495a:	2200      	movs	r2, #0
 801495c:	625a      	str	r2, [r3, #36]	@ 0x24
 801495e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014960:	b138      	cbz	r0, 8014972 <rcl_wait_set_clear+0x72>
 8014962:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014964:	2100      	movs	r1, #0
 8014966:	0092      	lsls	r2, r2, #2
 8014968:	f004 fe7a 	bl	8019660 <memset>
 801496c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801496e:	2200      	movs	r2, #0
 8014970:	631a      	str	r2, [r3, #48]	@ 0x30
 8014972:	6920      	ldr	r0, [r4, #16]
 8014974:	b138      	cbz	r0, 8014986 <rcl_wait_set_clear+0x86>
 8014976:	6962      	ldr	r2, [r4, #20]
 8014978:	2100      	movs	r1, #0
 801497a:	0092      	lsls	r2, r2, #2
 801497c:	f004 fe70 	bl	8019660 <memset>
 8014980:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014982:	2200      	movs	r2, #0
 8014984:	641a      	str	r2, [r3, #64]	@ 0x40
 8014986:	6898      	ldr	r0, [r3, #8]
 8014988:	b138      	cbz	r0, 801499a <rcl_wait_set_clear+0x9a>
 801498a:	685a      	ldr	r2, [r3, #4]
 801498c:	2100      	movs	r1, #0
 801498e:	0092      	lsls	r2, r2, #2
 8014990:	f004 fe66 	bl	8019660 <memset>
 8014994:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014996:	2200      	movs	r2, #0
 8014998:	605a      	str	r2, [r3, #4]
 801499a:	6958      	ldr	r0, [r3, #20]
 801499c:	b138      	cbz	r0, 80149ae <rcl_wait_set_clear+0xae>
 801499e:	691a      	ldr	r2, [r3, #16]
 80149a0:	2100      	movs	r1, #0
 80149a2:	0092      	lsls	r2, r2, #2
 80149a4:	f004 fe5c 	bl	8019660 <memset>
 80149a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149aa:	2200      	movs	r2, #0
 80149ac:	611a      	str	r2, [r3, #16]
 80149ae:	6a18      	ldr	r0, [r3, #32]
 80149b0:	b138      	cbz	r0, 80149c2 <rcl_wait_set_clear+0xc2>
 80149b2:	69da      	ldr	r2, [r3, #28]
 80149b4:	2100      	movs	r1, #0
 80149b6:	0092      	lsls	r2, r2, #2
 80149b8:	f004 fe52 	bl	8019660 <memset>
 80149bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149be:	2200      	movs	r2, #0
 80149c0:	61da      	str	r2, [r3, #28]
 80149c2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80149c4:	b138      	cbz	r0, 80149d6 <rcl_wait_set_clear+0xd6>
 80149c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80149c8:	2100      	movs	r1, #0
 80149ca:	0092      	lsls	r2, r2, #2
 80149cc:	f004 fe48 	bl	8019660 <memset>
 80149d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149d2:	2200      	movs	r2, #0
 80149d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80149d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80149d8:	b138      	cbz	r0, 80149ea <rcl_wait_set_clear+0xea>
 80149da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80149dc:	2100      	movs	r1, #0
 80149de:	0092      	lsls	r2, r2, #2
 80149e0:	f004 fe3e 	bl	8019660 <memset>
 80149e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149e6:	2000      	movs	r0, #0
 80149e8:	6358      	str	r0, [r3, #52]	@ 0x34
 80149ea:	bd10      	pop	{r4, pc}
 80149ec:	200b      	movs	r0, #11
 80149ee:	4770      	bx	lr
 80149f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80149f4:	bd10      	pop	{r4, pc}
 80149f6:	bf00      	nop

080149f8 <rcl_wait_set_resize>:
 80149f8:	2800      	cmp	r0, #0
 80149fa:	f000 8185 	beq.w	8014d08 <rcl_wait_set_resize+0x310>
 80149fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a02:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8014a04:	b083      	sub	sp, #12
 8014a06:	4605      	mov	r5, r0
 8014a08:	2c00      	cmp	r4, #0
 8014a0a:	f000 817f 	beq.w	8014d0c <rcl_wait_set_resize+0x314>
 8014a0e:	f04f 0900 	mov.w	r9, #0
 8014a12:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8014a16:	461f      	mov	r7, r3
 8014a18:	4688      	mov	r8, r1
 8014a1a:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8014a1e:	4616      	mov	r6, r2
 8014a20:	f8c0 9004 	str.w	r9, [r0, #4]
 8014a24:	f8c4 9000 	str.w	r9, [r4]
 8014a28:	2900      	cmp	r1, #0
 8014a2a:	f000 80bd 	beq.w	8014ba8 <rcl_wait_set_resize+0x1b0>
 8014a2e:	008c      	lsls	r4, r1, #2
 8014a30:	6800      	ldr	r0, [r0, #0]
 8014a32:	9301      	str	r3, [sp, #4]
 8014a34:	4652      	mov	r2, sl
 8014a36:	4621      	mov	r1, r4
 8014a38:	4798      	blx	r3
 8014a3a:	9b01      	ldr	r3, [sp, #4]
 8014a3c:	6028      	str	r0, [r5, #0]
 8014a3e:	2800      	cmp	r0, #0
 8014a40:	f000 80cb 	beq.w	8014bda <rcl_wait_set_resize+0x1e2>
 8014a44:	4622      	mov	r2, r4
 8014a46:	4649      	mov	r1, r9
 8014a48:	9301      	str	r3, [sp, #4]
 8014a4a:	f004 fe09 	bl	8019660 <memset>
 8014a4e:	f8c5 8004 	str.w	r8, [r5, #4]
 8014a52:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8014a56:	9b01      	ldr	r3, [sp, #4]
 8014a58:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014a5c:	f8c8 9004 	str.w	r9, [r8, #4]
 8014a60:	4652      	mov	r2, sl
 8014a62:	4621      	mov	r1, r4
 8014a64:	4798      	blx	r3
 8014a66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014a68:	f8c8 0008 	str.w	r0, [r8, #8]
 8014a6c:	689b      	ldr	r3, [r3, #8]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	f000 80ac 	beq.w	8014bcc <rcl_wait_set_resize+0x1d4>
 8014a74:	4622      	mov	r2, r4
 8014a76:	4649      	mov	r1, r9
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f004 fdf1 	bl	8019660 <memset>
 8014a7e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014a80:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014a84:	f04f 0800 	mov.w	r8, #0
 8014a88:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8014a8c:	f8c5 800c 	str.w	r8, [r5, #12]
 8014a90:	f8c4 800c 	str.w	r8, [r4, #12]
 8014a94:	2e00      	cmp	r6, #0
 8014a96:	f040 80a4 	bne.w	8014be2 <rcl_wait_set_resize+0x1ea>
 8014a9a:	68a8      	ldr	r0, [r5, #8]
 8014a9c:	b128      	cbz	r0, 8014aaa <rcl_wait_set_resize+0xb2>
 8014a9e:	4649      	mov	r1, r9
 8014aa0:	4790      	blx	r2
 8014aa2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014aa4:	60ae      	str	r6, [r5, #8]
 8014aa6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014aaa:	f04f 0800 	mov.w	r8, #0
 8014aae:	19f6      	adds	r6, r6, r7
 8014ab0:	f8c4 8010 	str.w	r8, [r4, #16]
 8014ab4:	f040 80ac 	bne.w	8014c10 <rcl_wait_set_resize+0x218>
 8014ab8:	6960      	ldr	r0, [r4, #20]
 8014aba:	b130      	cbz	r0, 8014aca <rcl_wait_set_resize+0xd2>
 8014abc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014abe:	4649      	mov	r1, r9
 8014ac0:	4798      	blx	r3
 8014ac2:	6166      	str	r6, [r4, #20]
 8014ac4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014ac6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014aca:	2600      	movs	r6, #0
 8014acc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014ad0:	616e      	str	r6, [r5, #20]
 8014ad2:	6426      	str	r6, [r4, #64]	@ 0x40
 8014ad4:	2f00      	cmp	r7, #0
 8014ad6:	f040 80ad 	bne.w	8014c34 <rcl_wait_set_resize+0x23c>
 8014ada:	6928      	ldr	r0, [r5, #16]
 8014adc:	b138      	cbz	r0, 8014aee <rcl_wait_set_resize+0xf6>
 8014ade:	4649      	mov	r1, r9
 8014ae0:	47d0      	blx	sl
 8014ae2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014ae4:	612f      	str	r7, [r5, #16]
 8014ae6:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014aea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014aee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014af0:	2600      	movs	r6, #0
 8014af2:	61ee      	str	r6, [r5, #28]
 8014af4:	61a6      	str	r6, [r4, #24]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	f040 80af 	bne.w	8014c5a <rcl_wait_set_resize+0x262>
 8014afc:	69a8      	ldr	r0, [r5, #24]
 8014afe:	b120      	cbz	r0, 8014b0a <rcl_wait_set_resize+0x112>
 8014b00:	4649      	mov	r1, r9
 8014b02:	47d0      	blx	sl
 8014b04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014b06:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b08:	61ab      	str	r3, [r5, #24]
 8014b0a:	6a20      	ldr	r0, [r4, #32]
 8014b0c:	b128      	cbz	r0, 8014b1a <rcl_wait_set_resize+0x122>
 8014b0e:	4649      	mov	r1, r9
 8014b10:	47d0      	blx	sl
 8014b12:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b14:	2300      	movs	r3, #0
 8014b16:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014b1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b1c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014b1e:	2600      	movs	r6, #0
 8014b20:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014b24:	626e      	str	r6, [r5, #36]	@ 0x24
 8014b26:	6266      	str	r6, [r4, #36]	@ 0x24
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	f000 80b6 	beq.w	8014c9a <rcl_wait_set_resize+0x2a2>
 8014b2e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014b32:	6a28      	ldr	r0, [r5, #32]
 8014b34:	463a      	mov	r2, r7
 8014b36:	4651      	mov	r1, sl
 8014b38:	47c8      	blx	r9
 8014b3a:	6228      	str	r0, [r5, #32]
 8014b3c:	2800      	cmp	r0, #0
 8014b3e:	d04c      	beq.n	8014bda <rcl_wait_set_resize+0x1e2>
 8014b40:	4652      	mov	r2, sl
 8014b42:	4631      	mov	r1, r6
 8014b44:	f004 fd8c 	bl	8019660 <memset>
 8014b48:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b4c:	626b      	str	r3, [r5, #36]	@ 0x24
 8014b4e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014b50:	62a6      	str	r6, [r4, #40]	@ 0x28
 8014b52:	463a      	mov	r2, r7
 8014b54:	4651      	mov	r1, sl
 8014b56:	47c8      	blx	r9
 8014b58:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014b5a:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8014b5c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8014b5e:	2c00      	cmp	r4, #0
 8014b60:	f000 80f0 	beq.w	8014d44 <rcl_wait_set_resize+0x34c>
 8014b64:	4620      	mov	r0, r4
 8014b66:	4652      	mov	r2, sl
 8014b68:	4631      	mov	r1, r6
 8014b6a:	f004 fd79 	bl	8019660 <memset>
 8014b6e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b72:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014b74:	2600      	movs	r6, #0
 8014b76:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014b7a:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8014b7c:	6326      	str	r6, [r4, #48]	@ 0x30
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	f040 809d 	bne.w	8014cbe <rcl_wait_set_resize+0x2c6>
 8014b84:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014b86:	b120      	cbz	r0, 8014b92 <rcl_wait_set_resize+0x19a>
 8014b88:	4639      	mov	r1, r7
 8014b8a:	47c0      	blx	r8
 8014b8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b8e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b90:	62ab      	str	r3, [r5, #40]	@ 0x28
 8014b92:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014b94:	b310      	cbz	r0, 8014bdc <rcl_wait_set_resize+0x1e4>
 8014b96:	4639      	mov	r1, r7
 8014b98:	47c0      	blx	r8
 8014b9a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014b9c:	2000      	movs	r0, #0
 8014b9e:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8014ba2:	b003      	add	sp, #12
 8014ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ba8:	6800      	ldr	r0, [r0, #0]
 8014baa:	b120      	cbz	r0, 8014bb6 <rcl_wait_set_resize+0x1be>
 8014bac:	4651      	mov	r1, sl
 8014bae:	47d8      	blx	fp
 8014bb0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014bb2:	f8c5 8000 	str.w	r8, [r5]
 8014bb6:	68a0      	ldr	r0, [r4, #8]
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	f43f af61 	beq.w	8014a80 <rcl_wait_set_resize+0x88>
 8014bbe:	4651      	mov	r1, sl
 8014bc0:	47d8      	blx	fp
 8014bc2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8014bca:	e759      	b.n	8014a80 <rcl_wait_set_resize+0x88>
 8014bcc:	6828      	ldr	r0, [r5, #0]
 8014bce:	9301      	str	r3, [sp, #4]
 8014bd0:	4651      	mov	r1, sl
 8014bd2:	47d8      	blx	fp
 8014bd4:	9b01      	ldr	r3, [sp, #4]
 8014bd6:	e9c5 3300 	strd	r3, r3, [r5]
 8014bda:	200a      	movs	r0, #10
 8014bdc:	b003      	add	sp, #12
 8014bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014be2:	00b4      	lsls	r4, r6, #2
 8014be4:	68a8      	ldr	r0, [r5, #8]
 8014be6:	464a      	mov	r2, r9
 8014be8:	4621      	mov	r1, r4
 8014bea:	4798      	blx	r3
 8014bec:	60a8      	str	r0, [r5, #8]
 8014bee:	2800      	cmp	r0, #0
 8014bf0:	d0f3      	beq.n	8014bda <rcl_wait_set_resize+0x1e2>
 8014bf2:	4622      	mov	r2, r4
 8014bf4:	4641      	mov	r1, r8
 8014bf6:	f004 fd33 	bl	8019660 <memset>
 8014bfa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014bfc:	60ee      	str	r6, [r5, #12]
 8014bfe:	f04f 0800 	mov.w	r8, #0
 8014c02:	19f6      	adds	r6, r6, r7
 8014c04:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014c08:	f8c4 8010 	str.w	r8, [r4, #16]
 8014c0c:	f43f af54 	beq.w	8014ab8 <rcl_wait_set_resize+0xc0>
 8014c10:	00b6      	lsls	r6, r6, #2
 8014c12:	464a      	mov	r2, r9
 8014c14:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8014c16:	6960      	ldr	r0, [r4, #20]
 8014c18:	4631      	mov	r1, r6
 8014c1a:	4798      	blx	r3
 8014c1c:	4681      	mov	r9, r0
 8014c1e:	6160      	str	r0, [r4, #20]
 8014c20:	2800      	cmp	r0, #0
 8014c22:	d076      	beq.n	8014d12 <rcl_wait_set_resize+0x31a>
 8014c24:	4632      	mov	r2, r6
 8014c26:	4641      	mov	r1, r8
 8014c28:	f004 fd1a 	bl	8019660 <memset>
 8014c2c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c2e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014c32:	e74a      	b.n	8014aca <rcl_wait_set_resize+0xd2>
 8014c34:	00bc      	lsls	r4, r7, #2
 8014c36:	6928      	ldr	r0, [r5, #16]
 8014c38:	464a      	mov	r2, r9
 8014c3a:	4621      	mov	r1, r4
 8014c3c:	47c0      	blx	r8
 8014c3e:	6128      	str	r0, [r5, #16]
 8014c40:	2800      	cmp	r0, #0
 8014c42:	d0ca      	beq.n	8014bda <rcl_wait_set_resize+0x1e2>
 8014c44:	4622      	mov	r2, r4
 8014c46:	4631      	mov	r1, r6
 8014c48:	f004 fd0a 	bl	8019660 <memset>
 8014c4c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c4e:	616f      	str	r7, [r5, #20]
 8014c50:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014c54:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014c58:	e749      	b.n	8014aee <rcl_wait_set_resize+0xf6>
 8014c5a:	009c      	lsls	r4, r3, #2
 8014c5c:	69a8      	ldr	r0, [r5, #24]
 8014c5e:	464a      	mov	r2, r9
 8014c60:	4621      	mov	r1, r4
 8014c62:	47c0      	blx	r8
 8014c64:	61a8      	str	r0, [r5, #24]
 8014c66:	2800      	cmp	r0, #0
 8014c68:	d0b7      	beq.n	8014bda <rcl_wait_set_resize+0x1e2>
 8014c6a:	4622      	mov	r2, r4
 8014c6c:	4631      	mov	r1, r6
 8014c6e:	f004 fcf7 	bl	8019660 <memset>
 8014c72:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8014c74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014c76:	61eb      	str	r3, [r5, #28]
 8014c78:	6a38      	ldr	r0, [r7, #32]
 8014c7a:	61fe      	str	r6, [r7, #28]
 8014c7c:	464a      	mov	r2, r9
 8014c7e:	4621      	mov	r1, r4
 8014c80:	47c0      	blx	r8
 8014c82:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014c84:	6238      	str	r0, [r7, #32]
 8014c86:	6a1f      	ldr	r7, [r3, #32]
 8014c88:	2f00      	cmp	r7, #0
 8014c8a:	d054      	beq.n	8014d36 <rcl_wait_set_resize+0x33e>
 8014c8c:	4622      	mov	r2, r4
 8014c8e:	4631      	mov	r1, r6
 8014c90:	4638      	mov	r0, r7
 8014c92:	f004 fce5 	bl	8019660 <memset>
 8014c96:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c98:	e73f      	b.n	8014b1a <rcl_wait_set_resize+0x122>
 8014c9a:	6a28      	ldr	r0, [r5, #32]
 8014c9c:	b120      	cbz	r0, 8014ca8 <rcl_wait_set_resize+0x2b0>
 8014c9e:	4639      	mov	r1, r7
 8014ca0:	47c0      	blx	r8
 8014ca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014ca4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014ca6:	622b      	str	r3, [r5, #32]
 8014ca8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014caa:	2800      	cmp	r0, #0
 8014cac:	f43f af60 	beq.w	8014b70 <rcl_wait_set_resize+0x178>
 8014cb0:	4639      	mov	r1, r7
 8014cb2:	47c0      	blx	r8
 8014cb4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014cbc:	e758      	b.n	8014b70 <rcl_wait_set_resize+0x178>
 8014cbe:	009c      	lsls	r4, r3, #2
 8014cc0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014cc2:	463a      	mov	r2, r7
 8014cc4:	4621      	mov	r1, r4
 8014cc6:	47c8      	blx	r9
 8014cc8:	62a8      	str	r0, [r5, #40]	@ 0x28
 8014cca:	2800      	cmp	r0, #0
 8014ccc:	d085      	beq.n	8014bda <rcl_wait_set_resize+0x1e2>
 8014cce:	4622      	mov	r2, r4
 8014cd0:	4631      	mov	r1, r6
 8014cd2:	f004 fcc5 	bl	8019660 <memset>
 8014cd6:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8014cda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014cdc:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8014cde:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8014ce2:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8014ce6:	463a      	mov	r2, r7
 8014ce8:	4621      	mov	r1, r4
 8014cea:	47c8      	blx	r9
 8014cec:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014cee:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8014cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014cf4:	b36b      	cbz	r3, 8014d52 <rcl_wait_set_resize+0x35a>
 8014cf6:	4622      	mov	r2, r4
 8014cf8:	4631      	mov	r1, r6
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f004 fcb0 	bl	8019660 <memset>
 8014d00:	4630      	mov	r0, r6
 8014d02:	b003      	add	sp, #12
 8014d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d08:	200b      	movs	r0, #11
 8014d0a:	4770      	bx	lr
 8014d0c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014d10:	e764      	b.n	8014bdc <rcl_wait_set_resize+0x1e4>
 8014d12:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014d14:	68a8      	ldr	r0, [r5, #8]
 8014d16:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d1a:	4798      	blx	r3
 8014d1c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014d1e:	6928      	ldr	r0, [r5, #16]
 8014d20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014d22:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014d24:	f8c5 900c 	str.w	r9, [r5, #12]
 8014d28:	f8c5 9008 	str.w	r9, [r5, #8]
 8014d2c:	4790      	blx	r2
 8014d2e:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8014d32:	200a      	movs	r0, #10
 8014d34:	e752      	b.n	8014bdc <rcl_wait_set_resize+0x1e4>
 8014d36:	69a8      	ldr	r0, [r5, #24]
 8014d38:	4649      	mov	r1, r9
 8014d3a:	47d0      	blx	sl
 8014d3c:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8014d40:	200a      	movs	r0, #10
 8014d42:	e74b      	b.n	8014bdc <rcl_wait_set_resize+0x1e4>
 8014d44:	6a28      	ldr	r0, [r5, #32]
 8014d46:	4639      	mov	r1, r7
 8014d48:	47c0      	blx	r8
 8014d4a:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8014d4e:	200a      	movs	r0, #10
 8014d50:	e744      	b.n	8014bdc <rcl_wait_set_resize+0x1e4>
 8014d52:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014d54:	9301      	str	r3, [sp, #4]
 8014d56:	4639      	mov	r1, r7
 8014d58:	47c0      	blx	r8
 8014d5a:	9b01      	ldr	r3, [sp, #4]
 8014d5c:	200a      	movs	r0, #10
 8014d5e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014d62:	e73b      	b.n	8014bdc <rcl_wait_set_resize+0x1e4>

08014d64 <rcl_wait_set_init>:
 8014d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d68:	b084      	sub	sp, #16
 8014d6a:	4604      	mov	r4, r0
 8014d6c:	a810      	add	r0, sp, #64	@ 0x40
 8014d6e:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8014d72:	460f      	mov	r7, r1
 8014d74:	4690      	mov	r8, r2
 8014d76:	4699      	mov	r9, r3
 8014d78:	f7f8 f9ac 	bl	800d0d4 <rcutils_allocator_is_valid>
 8014d7c:	2800      	cmp	r0, #0
 8014d7e:	d06b      	beq.n	8014e58 <rcl_wait_set_init+0xf4>
 8014d80:	2c00      	cmp	r4, #0
 8014d82:	d069      	beq.n	8014e58 <rcl_wait_set_init+0xf4>
 8014d84:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014d86:	b125      	cbz	r5, 8014d92 <rcl_wait_set_init+0x2e>
 8014d88:	2564      	movs	r5, #100	@ 0x64
 8014d8a:	4628      	mov	r0, r5
 8014d8c:	b004      	add	sp, #16
 8014d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d92:	f1ba 0f00 	cmp.w	sl, #0
 8014d96:	d05f      	beq.n	8014e58 <rcl_wait_set_init+0xf4>
 8014d98:	4650      	mov	r0, sl
 8014d9a:	f7fe fc89 	bl	80136b0 <rcl_context_is_valid>
 8014d9e:	2800      	cmp	r0, #0
 8014da0:	d067      	beq.n	8014e72 <rcl_wait_set_init+0x10e>
 8014da2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014da4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8014da6:	205c      	movs	r0, #92	@ 0x5c
 8014da8:	4798      	blx	r3
 8014daa:	6320      	str	r0, [r4, #48]	@ 0x30
 8014dac:	2800      	cmp	r0, #0
 8014dae:	d062      	beq.n	8014e76 <rcl_wait_set_init+0x112>
 8014db0:	4629      	mov	r1, r5
 8014db2:	225c      	movs	r2, #92	@ 0x5c
 8014db4:	f004 fc54 	bl	8019660 <memset>
 8014db8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8014dbc:	eb03 0e02 	add.w	lr, r3, r2
 8014dc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014dc2:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014dc4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014dc8:	449e      	add	lr, r3
 8014dca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014dce:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8014dd2:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8014dd6:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8014dda:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8014dde:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8014de2:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8014de6:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8014dea:	f8da a000 	ldr.w	sl, [sl]
 8014dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014df0:	44c6      	add	lr, r8
 8014df2:	f8dc 3000 	ldr.w	r3, [ip]
 8014df6:	602b      	str	r3, [r5, #0]
 8014df8:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8014dfc:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8014e00:	f002 f9ec 	bl	80171dc <rmw_create_wait_set>
 8014e04:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e06:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8014e08:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014e0a:	b350      	cbz	r0, 8014e62 <rcl_wait_set_init+0xfe>
 8014e0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e0e:	9302      	str	r3, [sp, #8]
 8014e10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e12:	9301      	str	r3, [sp, #4]
 8014e14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e16:	9300      	str	r3, [sp, #0]
 8014e18:	4642      	mov	r2, r8
 8014e1a:	464b      	mov	r3, r9
 8014e1c:	4639      	mov	r1, r7
 8014e1e:	4620      	mov	r0, r4
 8014e20:	f7ff fdea 	bl	80149f8 <rcl_wait_set_resize>
 8014e24:	4605      	mov	r5, r0
 8014e26:	2800      	cmp	r0, #0
 8014e28:	d0af      	beq.n	8014d8a <rcl_wait_set_init+0x26>
 8014e2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e2c:	bb2b      	cbnz	r3, 8014e7a <rcl_wait_set_init+0x116>
 8014e2e:	2600      	movs	r6, #0
 8014e30:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8014e34:	9600      	str	r6, [sp, #0]
 8014e36:	4633      	mov	r3, r6
 8014e38:	4632      	mov	r2, r6
 8014e3a:	4631      	mov	r1, r6
 8014e3c:	4620      	mov	r0, r4
 8014e3e:	f7ff fddb 	bl	80149f8 <rcl_wait_set_resize>
 8014e42:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014e44:	2800      	cmp	r0, #0
 8014e46:	d0a0      	beq.n	8014d8a <rcl_wait_set_init+0x26>
 8014e48:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8014e4a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8014e4c:	4798      	blx	r3
 8014e4e:	4628      	mov	r0, r5
 8014e50:	6326      	str	r6, [r4, #48]	@ 0x30
 8014e52:	b004      	add	sp, #16
 8014e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e58:	250b      	movs	r5, #11
 8014e5a:	4628      	mov	r0, r5
 8014e5c:	b004      	add	sp, #16
 8014e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e62:	2501      	movs	r5, #1
 8014e64:	f002 f9c4 	bl	80171f0 <rmw_destroy_wait_set>
 8014e68:	2800      	cmp	r0, #0
 8014e6a:	bf18      	it	ne
 8014e6c:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8014e70:	e7dd      	b.n	8014e2e <rcl_wait_set_init+0xca>
 8014e72:	2565      	movs	r5, #101	@ 0x65
 8014e74:	e789      	b.n	8014d8a <rcl_wait_set_init+0x26>
 8014e76:	250a      	movs	r5, #10
 8014e78:	e787      	b.n	8014d8a <rcl_wait_set_init+0x26>
 8014e7a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014e7c:	e7f2      	b.n	8014e64 <rcl_wait_set_init+0x100>
 8014e7e:	bf00      	nop

08014e80 <rcl_wait_set_add_guard_condition>:
 8014e80:	b318      	cbz	r0, 8014eca <rcl_wait_set_add_guard_condition+0x4a>
 8014e82:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014e84:	b570      	push	{r4, r5, r6, lr}
 8014e86:	4604      	mov	r4, r0
 8014e88:	b30b      	cbz	r3, 8014ece <rcl_wait_set_add_guard_condition+0x4e>
 8014e8a:	b319      	cbz	r1, 8014ed4 <rcl_wait_set_add_guard_condition+0x54>
 8014e8c:	68dd      	ldr	r5, [r3, #12]
 8014e8e:	68c0      	ldr	r0, [r0, #12]
 8014e90:	4285      	cmp	r5, r0
 8014e92:	d217      	bcs.n	8014ec4 <rcl_wait_set_add_guard_condition+0x44>
 8014e94:	68a0      	ldr	r0, [r4, #8]
 8014e96:	1c6e      	adds	r6, r5, #1
 8014e98:	60de      	str	r6, [r3, #12]
 8014e9a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014e9e:	b102      	cbz	r2, 8014ea2 <rcl_wait_set_add_guard_condition+0x22>
 8014ea0:	6015      	str	r5, [r2, #0]
 8014ea2:	4608      	mov	r0, r1
 8014ea4:	f003 fd7e 	bl	80189a4 <rcl_guard_condition_get_rmw_handle>
 8014ea8:	b150      	cbz	r0, 8014ec0 <rcl_wait_set_add_guard_condition+0x40>
 8014eaa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014eac:	6842      	ldr	r2, [r0, #4]
 8014eae:	695b      	ldr	r3, [r3, #20]
 8014eb0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014eb4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014eb6:	6913      	ldr	r3, [r2, #16]
 8014eb8:	3301      	adds	r3, #1
 8014eba:	2000      	movs	r0, #0
 8014ebc:	6113      	str	r3, [r2, #16]
 8014ebe:	bd70      	pop	{r4, r5, r6, pc}
 8014ec0:	2001      	movs	r0, #1
 8014ec2:	bd70      	pop	{r4, r5, r6, pc}
 8014ec4:	f240 3086 	movw	r0, #902	@ 0x386
 8014ec8:	bd70      	pop	{r4, r5, r6, pc}
 8014eca:	200b      	movs	r0, #11
 8014ecc:	4770      	bx	lr
 8014ece:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014ed2:	bd70      	pop	{r4, r5, r6, pc}
 8014ed4:	200b      	movs	r0, #11
 8014ed6:	bd70      	pop	{r4, r5, r6, pc}

08014ed8 <rcl_wait_set_add_timer>:
 8014ed8:	b328      	cbz	r0, 8014f26 <rcl_wait_set_add_timer+0x4e>
 8014eda:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014edc:	b570      	push	{r4, r5, r6, lr}
 8014ede:	4604      	mov	r4, r0
 8014ee0:	b31b      	cbz	r3, 8014f2a <rcl_wait_set_add_timer+0x52>
 8014ee2:	b329      	cbz	r1, 8014f30 <rcl_wait_set_add_timer+0x58>
 8014ee4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8014ee6:	6965      	ldr	r5, [r4, #20]
 8014ee8:	42a8      	cmp	r0, r5
 8014eea:	d219      	bcs.n	8014f20 <rcl_wait_set_add_timer+0x48>
 8014eec:	6925      	ldr	r5, [r4, #16]
 8014eee:	1c46      	adds	r6, r0, #1
 8014ef0:	641e      	str	r6, [r3, #64]	@ 0x40
 8014ef2:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8014ef6:	b102      	cbz	r2, 8014efa <rcl_wait_set_add_timer+0x22>
 8014ef8:	6010      	str	r0, [r2, #0]
 8014efa:	4608      	mov	r0, r1
 8014efc:	f7ff fc10 	bl	8014720 <rcl_timer_get_guard_condition>
 8014f00:	b168      	cbz	r0, 8014f1e <rcl_wait_set_add_timer+0x46>
 8014f02:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014f04:	68e3      	ldr	r3, [r4, #12]
 8014f06:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8014f08:	3b01      	subs	r3, #1
 8014f0a:	441d      	add	r5, r3
 8014f0c:	f003 fd4a 	bl	80189a4 <rcl_guard_condition_get_rmw_handle>
 8014f10:	b180      	cbz	r0, 8014f34 <rcl_wait_set_add_timer+0x5c>
 8014f12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f14:	6842      	ldr	r2, [r0, #4]
 8014f16:	695b      	ldr	r3, [r3, #20]
 8014f18:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f1c:	2000      	movs	r0, #0
 8014f1e:	bd70      	pop	{r4, r5, r6, pc}
 8014f20:	f240 3086 	movw	r0, #902	@ 0x386
 8014f24:	bd70      	pop	{r4, r5, r6, pc}
 8014f26:	200b      	movs	r0, #11
 8014f28:	4770      	bx	lr
 8014f2a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f2e:	bd70      	pop	{r4, r5, r6, pc}
 8014f30:	200b      	movs	r0, #11
 8014f32:	bd70      	pop	{r4, r5, r6, pc}
 8014f34:	2001      	movs	r0, #1
 8014f36:	bd70      	pop	{r4, r5, r6, pc}

08014f38 <rcl_wait_set_add_client>:
 8014f38:	b318      	cbz	r0, 8014f82 <rcl_wait_set_add_client+0x4a>
 8014f3a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014f3c:	b570      	push	{r4, r5, r6, lr}
 8014f3e:	4604      	mov	r4, r0
 8014f40:	b30b      	cbz	r3, 8014f86 <rcl_wait_set_add_client+0x4e>
 8014f42:	b319      	cbz	r1, 8014f8c <rcl_wait_set_add_client+0x54>
 8014f44:	699d      	ldr	r5, [r3, #24]
 8014f46:	69c0      	ldr	r0, [r0, #28]
 8014f48:	4285      	cmp	r5, r0
 8014f4a:	d217      	bcs.n	8014f7c <rcl_wait_set_add_client+0x44>
 8014f4c:	69a0      	ldr	r0, [r4, #24]
 8014f4e:	1c6e      	adds	r6, r5, #1
 8014f50:	619e      	str	r6, [r3, #24]
 8014f52:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014f56:	b102      	cbz	r2, 8014f5a <rcl_wait_set_add_client+0x22>
 8014f58:	6015      	str	r5, [r2, #0]
 8014f5a:	4608      	mov	r0, r1
 8014f5c:	f7fe fafc 	bl	8013558 <rcl_client_get_rmw_handle>
 8014f60:	b150      	cbz	r0, 8014f78 <rcl_wait_set_add_client+0x40>
 8014f62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f64:	6842      	ldr	r2, [r0, #4]
 8014f66:	6a1b      	ldr	r3, [r3, #32]
 8014f68:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f6c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014f6e:	69d3      	ldr	r3, [r2, #28]
 8014f70:	3301      	adds	r3, #1
 8014f72:	2000      	movs	r0, #0
 8014f74:	61d3      	str	r3, [r2, #28]
 8014f76:	bd70      	pop	{r4, r5, r6, pc}
 8014f78:	2001      	movs	r0, #1
 8014f7a:	bd70      	pop	{r4, r5, r6, pc}
 8014f7c:	f240 3086 	movw	r0, #902	@ 0x386
 8014f80:	bd70      	pop	{r4, r5, r6, pc}
 8014f82:	200b      	movs	r0, #11
 8014f84:	4770      	bx	lr
 8014f86:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f8a:	bd70      	pop	{r4, r5, r6, pc}
 8014f8c:	200b      	movs	r0, #11
 8014f8e:	bd70      	pop	{r4, r5, r6, pc}

08014f90 <rcl_wait_set_add_service>:
 8014f90:	b318      	cbz	r0, 8014fda <rcl_wait_set_add_service+0x4a>
 8014f92:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014f94:	b570      	push	{r4, r5, r6, lr}
 8014f96:	4604      	mov	r4, r0
 8014f98:	b30b      	cbz	r3, 8014fde <rcl_wait_set_add_service+0x4e>
 8014f9a:	b319      	cbz	r1, 8014fe4 <rcl_wait_set_add_service+0x54>
 8014f9c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8014f9e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8014fa0:	4285      	cmp	r5, r0
 8014fa2:	d217      	bcs.n	8014fd4 <rcl_wait_set_add_service+0x44>
 8014fa4:	6a20      	ldr	r0, [r4, #32]
 8014fa6:	1c6e      	adds	r6, r5, #1
 8014fa8:	625e      	str	r6, [r3, #36]	@ 0x24
 8014faa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014fae:	b102      	cbz	r2, 8014fb2 <rcl_wait_set_add_service+0x22>
 8014fb0:	6015      	str	r5, [r2, #0]
 8014fb2:	4608      	mov	r0, r1
 8014fb4:	f7fe ff3e 	bl	8013e34 <rcl_service_get_rmw_handle>
 8014fb8:	b150      	cbz	r0, 8014fd0 <rcl_wait_set_add_service+0x40>
 8014fba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014fbc:	6842      	ldr	r2, [r0, #4]
 8014fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fc0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014fc4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014fc6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8014fc8:	3301      	adds	r3, #1
 8014fca:	2000      	movs	r0, #0
 8014fcc:	6293      	str	r3, [r2, #40]	@ 0x28
 8014fce:	bd70      	pop	{r4, r5, r6, pc}
 8014fd0:	2001      	movs	r0, #1
 8014fd2:	bd70      	pop	{r4, r5, r6, pc}
 8014fd4:	f240 3086 	movw	r0, #902	@ 0x386
 8014fd8:	bd70      	pop	{r4, r5, r6, pc}
 8014fda:	200b      	movs	r0, #11
 8014fdc:	4770      	bx	lr
 8014fde:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014fe2:	bd70      	pop	{r4, r5, r6, pc}
 8014fe4:	200b      	movs	r0, #11
 8014fe6:	bd70      	pop	{r4, r5, r6, pc}

08014fe8 <rcl_wait>:
 8014fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fec:	ed2d 8b02 	vpush	{d8}
 8014ff0:	b08d      	sub	sp, #52	@ 0x34
 8014ff2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	f000 8143 	beq.w	8015282 <rcl_wait+0x29a>
 8014ffc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014ffe:	4605      	mov	r5, r0
 8015000:	2e00      	cmp	r6, #0
 8015002:	f000 8112 	beq.w	801522a <rcl_wait+0x242>
 8015006:	6843      	ldr	r3, [r0, #4]
 8015008:	b983      	cbnz	r3, 801502c <rcl_wait+0x44>
 801500a:	68eb      	ldr	r3, [r5, #12]
 801500c:	b973      	cbnz	r3, 801502c <rcl_wait+0x44>
 801500e:	696b      	ldr	r3, [r5, #20]
 8015010:	b963      	cbnz	r3, 801502c <rcl_wait+0x44>
 8015012:	69eb      	ldr	r3, [r5, #28]
 8015014:	b953      	cbnz	r3, 801502c <rcl_wait+0x44>
 8015016:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8015018:	b943      	cbnz	r3, 801502c <rcl_wait+0x44>
 801501a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801501c:	b933      	cbnz	r3, 801502c <rcl_wait+0x44>
 801501e:	f240 3085 	movw	r0, #901	@ 0x385
 8015022:	b00d      	add	sp, #52	@ 0x34
 8015024:	ecbd 8b02 	vpop	{d8}
 8015028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801502c:	9b04      	ldr	r3, [sp, #16]
 801502e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015030:	2b01      	cmp	r3, #1
 8015032:	9b05      	ldr	r3, [sp, #20]
 8015034:	f173 0300 	sbcs.w	r3, r3, #0
 8015038:	f2c0 80f0 	blt.w	801521c <rcl_wait+0x234>
 801503c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015040:	4643      	mov	r3, r8
 8015042:	2a00      	cmp	r2, #0
 8015044:	f000 8133 	beq.w	80152ae <rcl_wait+0x2c6>
 8015048:	2400      	movs	r4, #0
 801504a:	4613      	mov	r3, r2
 801504c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80152c0 <rcl_wait+0x2d8>
 8015050:	46a2      	mov	sl, r4
 8015052:	46a3      	mov	fp, r4
 8015054:	f240 3921 	movw	r9, #801	@ 0x321
 8015058:	4632      	mov	r2, r6
 801505a:	e014      	b.n	8015086 <rcl_wait+0x9e>
 801505c:	2800      	cmp	r0, #0
 801505e:	d1e0      	bne.n	8015022 <rcl_wait+0x3a>
 8015060:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015064:	4542      	cmp	r2, r8
 8015066:	eb73 0107 	sbcs.w	r1, r3, r7
 801506a:	da03      	bge.n	8015074 <rcl_wait+0x8c>
 801506c:	4690      	mov	r8, r2
 801506e:	461f      	mov	r7, r3
 8015070:	f04f 0b01 	mov.w	fp, #1
 8015074:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015076:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015078:	3401      	adds	r4, #1
 801507a:	f14a 0a00 	adc.w	sl, sl, #0
 801507e:	429c      	cmp	r4, r3
 8015080:	f17a 0100 	sbcs.w	r1, sl, #0
 8015084:	d228      	bcs.n	80150d8 <rcl_wait+0xf0>
 8015086:	6928      	ldr	r0, [r5, #16]
 8015088:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801508c:	a908      	add	r1, sp, #32
 801508e:	00a6      	lsls	r6, r4, #2
 8015090:	2800      	cmp	r0, #0
 8015092:	d0f1      	beq.n	8015078 <rcl_wait+0x90>
 8015094:	68eb      	ldr	r3, [r5, #12]
 8015096:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801509a:	4423      	add	r3, r4
 801509c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80150a0:	f1be 0f00 	cmp.w	lr, #0
 80150a4:	d006      	beq.n	80150b4 <rcl_wait+0xcc>
 80150a6:	6913      	ldr	r3, [r2, #16]
 80150a8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80150ac:	3301      	adds	r3, #1
 80150ae:	6113      	str	r3, [r2, #16]
 80150b0:	692b      	ldr	r3, [r5, #16]
 80150b2:	5998      	ldr	r0, [r3, r6]
 80150b4:	ed8d 8b08 	vstr	d8, [sp, #32]
 80150b8:	f7ff fb00 	bl	80146bc <rcl_timer_get_time_until_next_call>
 80150bc:	4548      	cmp	r0, r9
 80150be:	d1cd      	bne.n	801505c <rcl_wait+0x74>
 80150c0:	692b      	ldr	r3, [r5, #16]
 80150c2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80150c4:	2100      	movs	r1, #0
 80150c6:	5199      	str	r1, [r3, r6]
 80150c8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80150ca:	3401      	adds	r4, #1
 80150cc:	f14a 0a00 	adc.w	sl, sl, #0
 80150d0:	429c      	cmp	r4, r3
 80150d2:	f17a 0100 	sbcs.w	r1, sl, #0
 80150d6:	d3d6      	bcc.n	8015086 <rcl_wait+0x9e>
 80150d8:	4616      	mov	r6, r2
 80150da:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80150de:	4313      	orrs	r3, r2
 80150e0:	46d9      	mov	r9, fp
 80150e2:	f040 80a9 	bne.w	8015238 <rcl_wait+0x250>
 80150e6:	2300      	movs	r3, #0
 80150e8:	2200      	movs	r2, #0
 80150ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80150ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80150f2:	ab08      	add	r3, sp, #32
 80150f4:	9302      	str	r3, [sp, #8]
 80150f6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80150f8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80150fc:	e9cd 3200 	strd	r3, r2, [sp]
 8015100:	f106 0110 	add.w	r1, r6, #16
 8015104:	f106 031c 	add.w	r3, r6, #28
 8015108:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801510c:	1d30      	adds	r0, r6, #4
 801510e:	f001 feed 	bl	8016eec <rmw_wait>
 8015112:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015114:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015116:	4680      	mov	r8, r0
 8015118:	b1ca      	cbz	r2, 801514e <rcl_wait+0x166>
 801511a:	2400      	movs	r4, #0
 801511c:	4627      	mov	r7, r4
 801511e:	692a      	ldr	r2, [r5, #16]
 8015120:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8015124:	f10d 011f 	add.w	r1, sp, #31
 8015128:	00a6      	lsls	r6, r4, #2
 801512a:	b160      	cbz	r0, 8015146 <rcl_wait+0x15e>
 801512c:	f88d 701f 	strb.w	r7, [sp, #31]
 8015130:	f7ff fa8a 	bl	8014648 <rcl_timer_is_ready>
 8015134:	2800      	cmp	r0, #0
 8015136:	f47f af74 	bne.w	8015022 <rcl_wait+0x3a>
 801513a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801513e:	b90b      	cbnz	r3, 8015144 <rcl_wait+0x15c>
 8015140:	692a      	ldr	r2, [r5, #16]
 8015142:	5193      	str	r3, [r2, r6]
 8015144:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015146:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015148:	3401      	adds	r4, #1
 801514a:	42a2      	cmp	r2, r4
 801514c:	d8e7      	bhi.n	801511e <rcl_wait+0x136>
 801514e:	f038 0002 	bics.w	r0, r8, #2
 8015152:	f040 8090 	bne.w	8015276 <rcl_wait+0x28e>
 8015156:	686e      	ldr	r6, [r5, #4]
 8015158:	4602      	mov	r2, r0
 801515a:	b91e      	cbnz	r6, 8015164 <rcl_wait+0x17c>
 801515c:	e00d      	b.n	801517a <rcl_wait+0x192>
 801515e:	3201      	adds	r2, #1
 8015160:	42b2      	cmp	r2, r6
 8015162:	d00a      	beq.n	801517a <rcl_wait+0x192>
 8015164:	6899      	ldr	r1, [r3, #8]
 8015166:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801516a:	2900      	cmp	r1, #0
 801516c:	d1f7      	bne.n	801515e <rcl_wait+0x176>
 801516e:	682c      	ldr	r4, [r5, #0]
 8015170:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015174:	3201      	adds	r2, #1
 8015176:	42b2      	cmp	r2, r6
 8015178:	d1f4      	bne.n	8015164 <rcl_wait+0x17c>
 801517a:	68ee      	ldr	r6, [r5, #12]
 801517c:	2200      	movs	r2, #0
 801517e:	b91e      	cbnz	r6, 8015188 <rcl_wait+0x1a0>
 8015180:	e00d      	b.n	801519e <rcl_wait+0x1b6>
 8015182:	3201      	adds	r2, #1
 8015184:	42b2      	cmp	r2, r6
 8015186:	d00a      	beq.n	801519e <rcl_wait+0x1b6>
 8015188:	6959      	ldr	r1, [r3, #20]
 801518a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801518e:	2900      	cmp	r1, #0
 8015190:	d1f7      	bne.n	8015182 <rcl_wait+0x19a>
 8015192:	68ac      	ldr	r4, [r5, #8]
 8015194:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015198:	3201      	adds	r2, #1
 801519a:	42b2      	cmp	r2, r6
 801519c:	d1f4      	bne.n	8015188 <rcl_wait+0x1a0>
 801519e:	69ee      	ldr	r6, [r5, #28]
 80151a0:	2200      	movs	r2, #0
 80151a2:	b91e      	cbnz	r6, 80151ac <rcl_wait+0x1c4>
 80151a4:	e00d      	b.n	80151c2 <rcl_wait+0x1da>
 80151a6:	3201      	adds	r2, #1
 80151a8:	42b2      	cmp	r2, r6
 80151aa:	d00a      	beq.n	80151c2 <rcl_wait+0x1da>
 80151ac:	6a19      	ldr	r1, [r3, #32]
 80151ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80151b2:	2900      	cmp	r1, #0
 80151b4:	d1f7      	bne.n	80151a6 <rcl_wait+0x1be>
 80151b6:	69ac      	ldr	r4, [r5, #24]
 80151b8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80151bc:	3201      	adds	r2, #1
 80151be:	42b2      	cmp	r2, r6
 80151c0:	d1f4      	bne.n	80151ac <rcl_wait+0x1c4>
 80151c2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80151c4:	2200      	movs	r2, #0
 80151c6:	b91e      	cbnz	r6, 80151d0 <rcl_wait+0x1e8>
 80151c8:	e00d      	b.n	80151e6 <rcl_wait+0x1fe>
 80151ca:	3201      	adds	r2, #1
 80151cc:	4296      	cmp	r6, r2
 80151ce:	d00a      	beq.n	80151e6 <rcl_wait+0x1fe>
 80151d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80151d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80151d6:	2900      	cmp	r1, #0
 80151d8:	d1f7      	bne.n	80151ca <rcl_wait+0x1e2>
 80151da:	6a2c      	ldr	r4, [r5, #32]
 80151dc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80151e0:	3201      	adds	r2, #1
 80151e2:	4296      	cmp	r6, r2
 80151e4:	d1f4      	bne.n	80151d0 <rcl_wait+0x1e8>
 80151e6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80151e8:	2200      	movs	r2, #0
 80151ea:	b91e      	cbnz	r6, 80151f4 <rcl_wait+0x20c>
 80151ec:	e00d      	b.n	801520a <rcl_wait+0x222>
 80151ee:	3201      	adds	r2, #1
 80151f0:	42b2      	cmp	r2, r6
 80151f2:	d00a      	beq.n	801520a <rcl_wait+0x222>
 80151f4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80151f6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80151fa:	2900      	cmp	r1, #0
 80151fc:	d1f7      	bne.n	80151ee <rcl_wait+0x206>
 80151fe:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8015200:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015204:	3201      	adds	r2, #1
 8015206:	42b2      	cmp	r2, r6
 8015208:	d1f4      	bne.n	80151f4 <rcl_wait+0x20c>
 801520a:	f1b8 0f02 	cmp.w	r8, #2
 801520e:	f47f af08 	bne.w	8015022 <rcl_wait+0x3a>
 8015212:	464b      	mov	r3, r9
 8015214:	2b00      	cmp	r3, #0
 8015216:	bf08      	it	eq
 8015218:	2002      	moveq	r0, #2
 801521a:	e702      	b.n	8015022 <rcl_wait+0x3a>
 801521c:	2a00      	cmp	r2, #0
 801521e:	d03a      	beq.n	8015296 <rcl_wait+0x2ae>
 8015220:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015224:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015228:	e70e      	b.n	8015048 <rcl_wait+0x60>
 801522a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801522e:	b00d      	add	sp, #52	@ 0x34
 8015230:	ecbd 8b02 	vpop	{d8}
 8015234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015238:	9b04      	ldr	r3, [sp, #16]
 801523a:	2b01      	cmp	r3, #1
 801523c:	9b05      	ldr	r3, [sp, #20]
 801523e:	f173 0300 	sbcs.w	r3, r3, #0
 8015242:	db24      	blt.n	801528e <rcl_wait+0x2a6>
 8015244:	2f00      	cmp	r7, #0
 8015246:	bfbc      	itt	lt
 8015248:	f04f 0800 	movlt.w	r8, #0
 801524c:	4647      	movlt	r7, r8
 801524e:	a31e      	add	r3, pc, #120	@ (adr r3, 80152c8 <rcl_wait+0x2e0>)
 8015250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015254:	4640      	mov	r0, r8
 8015256:	4639      	mov	r1, r7
 8015258:	f7eb fa06 	bl	8000668 <__aeabi_ldivmod>
 801525c:	a31a      	add	r3, pc, #104	@ (adr r3, 80152c8 <rcl_wait+0x2e0>)
 801525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015262:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015266:	4640      	mov	r0, r8
 8015268:	4639      	mov	r1, r7
 801526a:	f7eb f9fd 	bl	8000668 <__aeabi_ldivmod>
 801526e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015272:	ab08      	add	r3, sp, #32
 8015274:	e73e      	b.n	80150f4 <rcl_wait+0x10c>
 8015276:	2001      	movs	r0, #1
 8015278:	b00d      	add	sp, #52	@ 0x34
 801527a:	ecbd 8b02 	vpop	{d8}
 801527e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015282:	200b      	movs	r0, #11
 8015284:	b00d      	add	sp, #52	@ 0x34
 8015286:	ecbd 8b02 	vpop	{d8}
 801528a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801528e:	465b      	mov	r3, fp
 8015290:	2b00      	cmp	r3, #0
 8015292:	d1d7      	bne.n	8015244 <rcl_wait+0x25c>
 8015294:	e72e      	b.n	80150f4 <rcl_wait+0x10c>
 8015296:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801529a:	430b      	orrs	r3, r1
 801529c:	bf08      	it	eq
 801529e:	4691      	moveq	r9, r2
 80152a0:	f43f af21 	beq.w	80150e6 <rcl_wait+0xfe>
 80152a4:	9b04      	ldr	r3, [sp, #16]
 80152a6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80152aa:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80152ae:	2b01      	cmp	r3, #1
 80152b0:	9b05      	ldr	r3, [sp, #20]
 80152b2:	f173 0300 	sbcs.w	r3, r3, #0
 80152b6:	f04f 0300 	mov.w	r3, #0
 80152ba:	4699      	mov	r9, r3
 80152bc:	dac2      	bge.n	8015244 <rcl_wait+0x25c>
 80152be:	e719      	b.n	80150f4 <rcl_wait+0x10c>
 80152c0:	ffffffff 	.word	0xffffffff
 80152c4:	7fffffff 	.word	0x7fffffff
 80152c8:	3b9aca00 	.word	0x3b9aca00
 80152cc:	00000000 	.word	0x00000000

080152d0 <rcl_action_take_goal_response>:
 80152d0:	2800      	cmp	r0, #0
 80152d2:	d039      	beq.n	8015348 <rcl_action_take_goal_response+0x78>
 80152d4:	b570      	push	{r4, r5, r6, lr}
 80152d6:	4604      	mov	r4, r0
 80152d8:	6800      	ldr	r0, [r0, #0]
 80152da:	b380      	cbz	r0, 801533e <rcl_action_take_goal_response+0x6e>
 80152dc:	460d      	mov	r5, r1
 80152de:	4616      	mov	r6, r2
 80152e0:	f7fe f9be 	bl	8013660 <rcl_client_is_valid>
 80152e4:	b330      	cbz	r0, 8015334 <rcl_action_take_goal_response+0x64>
 80152e6:	6820      	ldr	r0, [r4, #0]
 80152e8:	3004      	adds	r0, #4
 80152ea:	f7fe f9b9 	bl	8013660 <rcl_client_is_valid>
 80152ee:	b308      	cbz	r0, 8015334 <rcl_action_take_goal_response+0x64>
 80152f0:	6820      	ldr	r0, [r4, #0]
 80152f2:	3008      	adds	r0, #8
 80152f4:	f7fe f9b4 	bl	8013660 <rcl_client_is_valid>
 80152f8:	b1e0      	cbz	r0, 8015334 <rcl_action_take_goal_response+0x64>
 80152fa:	6820      	ldr	r0, [r4, #0]
 80152fc:	300c      	adds	r0, #12
 80152fe:	f7fe fe5f 	bl	8013fc0 <rcl_subscription_is_valid>
 8015302:	b1b8      	cbz	r0, 8015334 <rcl_action_take_goal_response+0x64>
 8015304:	6820      	ldr	r0, [r4, #0]
 8015306:	3010      	adds	r0, #16
 8015308:	f7fe fe5a 	bl	8013fc0 <rcl_subscription_is_valid>
 801530c:	b190      	cbz	r0, 8015334 <rcl_action_take_goal_response+0x64>
 801530e:	b1cd      	cbz	r5, 8015344 <rcl_action_take_goal_response+0x74>
 8015310:	b1c6      	cbz	r6, 8015344 <rcl_action_take_goal_response+0x74>
 8015312:	6820      	ldr	r0, [r4, #0]
 8015314:	4632      	mov	r2, r6
 8015316:	4629      	mov	r1, r5
 8015318:	f7fe f95a 	bl	80135d0 <rcl_take_response>
 801531c:	b148      	cbz	r0, 8015332 <rcl_action_take_goal_response+0x62>
 801531e:	280a      	cmp	r0, #10
 8015320:	d007      	beq.n	8015332 <rcl_action_take_goal_response+0x62>
 8015322:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015326:	f640 0337 	movw	r3, #2103	@ 0x837
 801532a:	4290      	cmp	r0, r2
 801532c:	bf0c      	ite	eq
 801532e:	4618      	moveq	r0, r3
 8015330:	2001      	movne	r0, #1
 8015332:	bd70      	pop	{r4, r5, r6, pc}
 8015334:	f7f7 fef4 	bl	800d120 <rcutils_reset_error>
 8015338:	f640 0036 	movw	r0, #2102	@ 0x836
 801533c:	bd70      	pop	{r4, r5, r6, pc}
 801533e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015342:	bd70      	pop	{r4, r5, r6, pc}
 8015344:	200b      	movs	r0, #11
 8015346:	bd70      	pop	{r4, r5, r6, pc}
 8015348:	f640 0036 	movw	r0, #2102	@ 0x836
 801534c:	4770      	bx	lr
 801534e:	bf00      	nop

08015350 <rcl_action_send_result_request>:
 8015350:	b390      	cbz	r0, 80153b8 <rcl_action_send_result_request+0x68>
 8015352:	b570      	push	{r4, r5, r6, lr}
 8015354:	4604      	mov	r4, r0
 8015356:	6800      	ldr	r0, [r0, #0]
 8015358:	b348      	cbz	r0, 80153ae <rcl_action_send_result_request+0x5e>
 801535a:	460d      	mov	r5, r1
 801535c:	4616      	mov	r6, r2
 801535e:	f7fe f97f 	bl	8013660 <rcl_client_is_valid>
 8015362:	b1f8      	cbz	r0, 80153a4 <rcl_action_send_result_request+0x54>
 8015364:	6820      	ldr	r0, [r4, #0]
 8015366:	3004      	adds	r0, #4
 8015368:	f7fe f97a 	bl	8013660 <rcl_client_is_valid>
 801536c:	b1d0      	cbz	r0, 80153a4 <rcl_action_send_result_request+0x54>
 801536e:	6820      	ldr	r0, [r4, #0]
 8015370:	3008      	adds	r0, #8
 8015372:	f7fe f975 	bl	8013660 <rcl_client_is_valid>
 8015376:	b1a8      	cbz	r0, 80153a4 <rcl_action_send_result_request+0x54>
 8015378:	6820      	ldr	r0, [r4, #0]
 801537a:	300c      	adds	r0, #12
 801537c:	f7fe fe20 	bl	8013fc0 <rcl_subscription_is_valid>
 8015380:	b180      	cbz	r0, 80153a4 <rcl_action_send_result_request+0x54>
 8015382:	6820      	ldr	r0, [r4, #0]
 8015384:	3010      	adds	r0, #16
 8015386:	f7fe fe1b 	bl	8013fc0 <rcl_subscription_is_valid>
 801538a:	b158      	cbz	r0, 80153a4 <rcl_action_send_result_request+0x54>
 801538c:	b195      	cbz	r5, 80153b4 <rcl_action_send_result_request+0x64>
 801538e:	b18e      	cbz	r6, 80153b4 <rcl_action_send_result_request+0x64>
 8015390:	6820      	ldr	r0, [r4, #0]
 8015392:	4632      	mov	r2, r6
 8015394:	4629      	mov	r1, r5
 8015396:	3008      	adds	r0, #8
 8015398:	f7fe f8e4 	bl	8013564 <rcl_send_request>
 801539c:	3800      	subs	r0, #0
 801539e:	bf18      	it	ne
 80153a0:	2001      	movne	r0, #1
 80153a2:	bd70      	pop	{r4, r5, r6, pc}
 80153a4:	f7f7 febc 	bl	800d120 <rcutils_reset_error>
 80153a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80153ac:	bd70      	pop	{r4, r5, r6, pc}
 80153ae:	f640 0036 	movw	r0, #2102	@ 0x836
 80153b2:	bd70      	pop	{r4, r5, r6, pc}
 80153b4:	200b      	movs	r0, #11
 80153b6:	bd70      	pop	{r4, r5, r6, pc}
 80153b8:	f640 0036 	movw	r0, #2102	@ 0x836
 80153bc:	4770      	bx	lr
 80153be:	bf00      	nop

080153c0 <rcl_action_take_result_response>:
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d03a      	beq.n	801543a <rcl_action_take_result_response+0x7a>
 80153c4:	b570      	push	{r4, r5, r6, lr}
 80153c6:	4604      	mov	r4, r0
 80153c8:	6800      	ldr	r0, [r0, #0]
 80153ca:	b388      	cbz	r0, 8015430 <rcl_action_take_result_response+0x70>
 80153cc:	460d      	mov	r5, r1
 80153ce:	4616      	mov	r6, r2
 80153d0:	f7fe f946 	bl	8013660 <rcl_client_is_valid>
 80153d4:	b338      	cbz	r0, 8015426 <rcl_action_take_result_response+0x66>
 80153d6:	6820      	ldr	r0, [r4, #0]
 80153d8:	3004      	adds	r0, #4
 80153da:	f7fe f941 	bl	8013660 <rcl_client_is_valid>
 80153de:	b310      	cbz	r0, 8015426 <rcl_action_take_result_response+0x66>
 80153e0:	6820      	ldr	r0, [r4, #0]
 80153e2:	3008      	adds	r0, #8
 80153e4:	f7fe f93c 	bl	8013660 <rcl_client_is_valid>
 80153e8:	b1e8      	cbz	r0, 8015426 <rcl_action_take_result_response+0x66>
 80153ea:	6820      	ldr	r0, [r4, #0]
 80153ec:	300c      	adds	r0, #12
 80153ee:	f7fe fde7 	bl	8013fc0 <rcl_subscription_is_valid>
 80153f2:	b1c0      	cbz	r0, 8015426 <rcl_action_take_result_response+0x66>
 80153f4:	6820      	ldr	r0, [r4, #0]
 80153f6:	3010      	adds	r0, #16
 80153f8:	f7fe fde2 	bl	8013fc0 <rcl_subscription_is_valid>
 80153fc:	b198      	cbz	r0, 8015426 <rcl_action_take_result_response+0x66>
 80153fe:	b1d5      	cbz	r5, 8015436 <rcl_action_take_result_response+0x76>
 8015400:	b1ce      	cbz	r6, 8015436 <rcl_action_take_result_response+0x76>
 8015402:	6820      	ldr	r0, [r4, #0]
 8015404:	4632      	mov	r2, r6
 8015406:	4629      	mov	r1, r5
 8015408:	3008      	adds	r0, #8
 801540a:	f7fe f8e1 	bl	80135d0 <rcl_take_response>
 801540e:	b148      	cbz	r0, 8015424 <rcl_action_take_result_response+0x64>
 8015410:	280a      	cmp	r0, #10
 8015412:	d007      	beq.n	8015424 <rcl_action_take_result_response+0x64>
 8015414:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015418:	f640 0337 	movw	r3, #2103	@ 0x837
 801541c:	4290      	cmp	r0, r2
 801541e:	bf0c      	ite	eq
 8015420:	4618      	moveq	r0, r3
 8015422:	2001      	movne	r0, #1
 8015424:	bd70      	pop	{r4, r5, r6, pc}
 8015426:	f7f7 fe7b 	bl	800d120 <rcutils_reset_error>
 801542a:	f640 0036 	movw	r0, #2102	@ 0x836
 801542e:	bd70      	pop	{r4, r5, r6, pc}
 8015430:	f640 0036 	movw	r0, #2102	@ 0x836
 8015434:	bd70      	pop	{r4, r5, r6, pc}
 8015436:	200b      	movs	r0, #11
 8015438:	bd70      	pop	{r4, r5, r6, pc}
 801543a:	f640 0036 	movw	r0, #2102	@ 0x836
 801543e:	4770      	bx	lr

08015440 <rcl_action_take_cancel_response>:
 8015440:	2800      	cmp	r0, #0
 8015442:	d03a      	beq.n	80154ba <rcl_action_take_cancel_response+0x7a>
 8015444:	b570      	push	{r4, r5, r6, lr}
 8015446:	4604      	mov	r4, r0
 8015448:	6800      	ldr	r0, [r0, #0]
 801544a:	b388      	cbz	r0, 80154b0 <rcl_action_take_cancel_response+0x70>
 801544c:	460d      	mov	r5, r1
 801544e:	4616      	mov	r6, r2
 8015450:	f7fe f906 	bl	8013660 <rcl_client_is_valid>
 8015454:	b338      	cbz	r0, 80154a6 <rcl_action_take_cancel_response+0x66>
 8015456:	6820      	ldr	r0, [r4, #0]
 8015458:	3004      	adds	r0, #4
 801545a:	f7fe f901 	bl	8013660 <rcl_client_is_valid>
 801545e:	b310      	cbz	r0, 80154a6 <rcl_action_take_cancel_response+0x66>
 8015460:	6820      	ldr	r0, [r4, #0]
 8015462:	3008      	adds	r0, #8
 8015464:	f7fe f8fc 	bl	8013660 <rcl_client_is_valid>
 8015468:	b1e8      	cbz	r0, 80154a6 <rcl_action_take_cancel_response+0x66>
 801546a:	6820      	ldr	r0, [r4, #0]
 801546c:	300c      	adds	r0, #12
 801546e:	f7fe fda7 	bl	8013fc0 <rcl_subscription_is_valid>
 8015472:	b1c0      	cbz	r0, 80154a6 <rcl_action_take_cancel_response+0x66>
 8015474:	6820      	ldr	r0, [r4, #0]
 8015476:	3010      	adds	r0, #16
 8015478:	f7fe fda2 	bl	8013fc0 <rcl_subscription_is_valid>
 801547c:	b198      	cbz	r0, 80154a6 <rcl_action_take_cancel_response+0x66>
 801547e:	b1d5      	cbz	r5, 80154b6 <rcl_action_take_cancel_response+0x76>
 8015480:	b1ce      	cbz	r6, 80154b6 <rcl_action_take_cancel_response+0x76>
 8015482:	6820      	ldr	r0, [r4, #0]
 8015484:	4632      	mov	r2, r6
 8015486:	4629      	mov	r1, r5
 8015488:	3004      	adds	r0, #4
 801548a:	f7fe f8a1 	bl	80135d0 <rcl_take_response>
 801548e:	b148      	cbz	r0, 80154a4 <rcl_action_take_cancel_response+0x64>
 8015490:	280a      	cmp	r0, #10
 8015492:	d007      	beq.n	80154a4 <rcl_action_take_cancel_response+0x64>
 8015494:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015498:	f640 0337 	movw	r3, #2103	@ 0x837
 801549c:	4290      	cmp	r0, r2
 801549e:	bf0c      	ite	eq
 80154a0:	4618      	moveq	r0, r3
 80154a2:	2001      	movne	r0, #1
 80154a4:	bd70      	pop	{r4, r5, r6, pc}
 80154a6:	f7f7 fe3b 	bl	800d120 <rcutils_reset_error>
 80154aa:	f640 0036 	movw	r0, #2102	@ 0x836
 80154ae:	bd70      	pop	{r4, r5, r6, pc}
 80154b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80154b4:	bd70      	pop	{r4, r5, r6, pc}
 80154b6:	200b      	movs	r0, #11
 80154b8:	bd70      	pop	{r4, r5, r6, pc}
 80154ba:	f640 0036 	movw	r0, #2102	@ 0x836
 80154be:	4770      	bx	lr

080154c0 <rcl_action_take_feedback>:
 80154c0:	2800      	cmp	r0, #0
 80154c2:	d038      	beq.n	8015536 <rcl_action_take_feedback+0x76>
 80154c4:	b530      	push	{r4, r5, lr}
 80154c6:	4604      	mov	r4, r0
 80154c8:	6800      	ldr	r0, [r0, #0]
 80154ca:	b091      	sub	sp, #68	@ 0x44
 80154cc:	b378      	cbz	r0, 801552e <rcl_action_take_feedback+0x6e>
 80154ce:	460d      	mov	r5, r1
 80154d0:	f7fe f8c6 	bl	8013660 <rcl_client_is_valid>
 80154d4:	b328      	cbz	r0, 8015522 <rcl_action_take_feedback+0x62>
 80154d6:	6820      	ldr	r0, [r4, #0]
 80154d8:	3004      	adds	r0, #4
 80154da:	f7fe f8c1 	bl	8013660 <rcl_client_is_valid>
 80154de:	b300      	cbz	r0, 8015522 <rcl_action_take_feedback+0x62>
 80154e0:	6820      	ldr	r0, [r4, #0]
 80154e2:	3008      	adds	r0, #8
 80154e4:	f7fe f8bc 	bl	8013660 <rcl_client_is_valid>
 80154e8:	b1d8      	cbz	r0, 8015522 <rcl_action_take_feedback+0x62>
 80154ea:	6820      	ldr	r0, [r4, #0]
 80154ec:	300c      	adds	r0, #12
 80154ee:	f7fe fd67 	bl	8013fc0 <rcl_subscription_is_valid>
 80154f2:	b1b0      	cbz	r0, 8015522 <rcl_action_take_feedback+0x62>
 80154f4:	6820      	ldr	r0, [r4, #0]
 80154f6:	3010      	adds	r0, #16
 80154f8:	f7fe fd62 	bl	8013fc0 <rcl_subscription_is_valid>
 80154fc:	b188      	cbz	r0, 8015522 <rcl_action_take_feedback+0x62>
 80154fe:	b1ed      	cbz	r5, 801553c <rcl_action_take_feedback+0x7c>
 8015500:	6820      	ldr	r0, [r4, #0]
 8015502:	2300      	movs	r3, #0
 8015504:	466a      	mov	r2, sp
 8015506:	4629      	mov	r1, r5
 8015508:	300c      	adds	r0, #12
 801550a:	f7fe fcfb 	bl	8013f04 <rcl_take>
 801550e:	b160      	cbz	r0, 801552a <rcl_action_take_feedback+0x6a>
 8015510:	f240 1391 	movw	r3, #401	@ 0x191
 8015514:	4298      	cmp	r0, r3
 8015516:	d014      	beq.n	8015542 <rcl_action_take_feedback+0x82>
 8015518:	280a      	cmp	r0, #10
 801551a:	bf18      	it	ne
 801551c:	2001      	movne	r0, #1
 801551e:	b011      	add	sp, #68	@ 0x44
 8015520:	bd30      	pop	{r4, r5, pc}
 8015522:	f7f7 fdfd 	bl	800d120 <rcutils_reset_error>
 8015526:	f640 0036 	movw	r0, #2102	@ 0x836
 801552a:	b011      	add	sp, #68	@ 0x44
 801552c:	bd30      	pop	{r4, r5, pc}
 801552e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015532:	b011      	add	sp, #68	@ 0x44
 8015534:	bd30      	pop	{r4, r5, pc}
 8015536:	f640 0036 	movw	r0, #2102	@ 0x836
 801553a:	4770      	bx	lr
 801553c:	200b      	movs	r0, #11
 801553e:	b011      	add	sp, #68	@ 0x44
 8015540:	bd30      	pop	{r4, r5, pc}
 8015542:	f640 0037 	movw	r0, #2103	@ 0x837
 8015546:	e7f0      	b.n	801552a <rcl_action_take_feedback+0x6a>

08015548 <rcl_action_wait_set_add_action_client>:
 8015548:	2800      	cmp	r0, #0
 801554a:	d048      	beq.n	80155de <rcl_action_wait_set_add_action_client+0x96>
 801554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801554e:	460c      	mov	r4, r1
 8015550:	2900      	cmp	r1, #0
 8015552:	d03c      	beq.n	80155ce <rcl_action_wait_set_add_action_client+0x86>
 8015554:	4605      	mov	r5, r0
 8015556:	6808      	ldr	r0, [r1, #0]
 8015558:	2800      	cmp	r0, #0
 801555a:	d038      	beq.n	80155ce <rcl_action_wait_set_add_action_client+0x86>
 801555c:	4617      	mov	r7, r2
 801555e:	461e      	mov	r6, r3
 8015560:	f7fe f87e 	bl	8013660 <rcl_client_is_valid>
 8015564:	b3b0      	cbz	r0, 80155d4 <rcl_action_wait_set_add_action_client+0x8c>
 8015566:	6820      	ldr	r0, [r4, #0]
 8015568:	3004      	adds	r0, #4
 801556a:	f7fe f879 	bl	8013660 <rcl_client_is_valid>
 801556e:	b388      	cbz	r0, 80155d4 <rcl_action_wait_set_add_action_client+0x8c>
 8015570:	6820      	ldr	r0, [r4, #0]
 8015572:	3008      	adds	r0, #8
 8015574:	f7fe f874 	bl	8013660 <rcl_client_is_valid>
 8015578:	b360      	cbz	r0, 80155d4 <rcl_action_wait_set_add_action_client+0x8c>
 801557a:	6820      	ldr	r0, [r4, #0]
 801557c:	300c      	adds	r0, #12
 801557e:	f7fe fd1f 	bl	8013fc0 <rcl_subscription_is_valid>
 8015582:	b338      	cbz	r0, 80155d4 <rcl_action_wait_set_add_action_client+0x8c>
 8015584:	6820      	ldr	r0, [r4, #0]
 8015586:	3010      	adds	r0, #16
 8015588:	f7fe fd1a 	bl	8013fc0 <rcl_subscription_is_valid>
 801558c:	b310      	cbz	r0, 80155d4 <rcl_action_wait_set_add_action_client+0x8c>
 801558e:	6821      	ldr	r1, [r4, #0]
 8015590:	4628      	mov	r0, r5
 8015592:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8015596:	f7ff fccf 	bl	8014f38 <rcl_wait_set_add_client>
 801559a:	b9b8      	cbnz	r0, 80155cc <rcl_action_wait_set_add_action_client+0x84>
 801559c:	6821      	ldr	r1, [r4, #0]
 801559e:	4628      	mov	r0, r5
 80155a0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80155a4:	3104      	adds	r1, #4
 80155a6:	f7ff fcc7 	bl	8014f38 <rcl_wait_set_add_client>
 80155aa:	b978      	cbnz	r0, 80155cc <rcl_action_wait_set_add_action_client+0x84>
 80155ac:	6821      	ldr	r1, [r4, #0]
 80155ae:	4628      	mov	r0, r5
 80155b0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80155b4:	3108      	adds	r1, #8
 80155b6:	f7ff fcbf 	bl	8014f38 <rcl_wait_set_add_client>
 80155ba:	b938      	cbnz	r0, 80155cc <rcl_action_wait_set_add_action_client+0x84>
 80155bc:	6821      	ldr	r1, [r4, #0]
 80155be:	4628      	mov	r0, r5
 80155c0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80155c4:	310c      	adds	r1, #12
 80155c6:	f7ff f96f 	bl	80148a8 <rcl_wait_set_add_subscription>
 80155ca:	b158      	cbz	r0, 80155e4 <rcl_action_wait_set_add_action_client+0x9c>
 80155cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155ce:	f640 0036 	movw	r0, #2102	@ 0x836
 80155d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155d4:	f7f7 fda4 	bl	800d120 <rcutils_reset_error>
 80155d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80155dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155de:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80155e2:	4770      	bx	lr
 80155e4:	6821      	ldr	r1, [r4, #0]
 80155e6:	4628      	mov	r0, r5
 80155e8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80155ec:	3110      	adds	r1, #16
 80155ee:	f7ff f95b 	bl	80148a8 <rcl_wait_set_add_subscription>
 80155f2:	2800      	cmp	r0, #0
 80155f4:	d1ea      	bne.n	80155cc <rcl_action_wait_set_add_action_client+0x84>
 80155f6:	b11f      	cbz	r7, 8015600 <rcl_action_wait_set_add_action_client+0xb8>
 80155f8:	6823      	ldr	r3, [r4, #0]
 80155fa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80155fe:	603b      	str	r3, [r7, #0]
 8015600:	2e00      	cmp	r6, #0
 8015602:	d0e3      	beq.n	80155cc <rcl_action_wait_set_add_action_client+0x84>
 8015604:	6823      	ldr	r3, [r4, #0]
 8015606:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801560a:	6033      	str	r3, [r6, #0]
 801560c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801560e:	bf00      	nop

08015610 <rcl_action_client_wait_set_get_entities_ready>:
 8015610:	2800      	cmp	r0, #0
 8015612:	f000 808d 	beq.w	8015730 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8015616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801561a:	460c      	mov	r4, r1
 801561c:	2900      	cmp	r1, #0
 801561e:	d077      	beq.n	8015710 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015620:	4605      	mov	r5, r0
 8015622:	6808      	ldr	r0, [r1, #0]
 8015624:	2800      	cmp	r0, #0
 8015626:	d073      	beq.n	8015710 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015628:	4616      	mov	r6, r2
 801562a:	461f      	mov	r7, r3
 801562c:	f7fe f818 	bl	8013660 <rcl_client_is_valid>
 8015630:	2800      	cmp	r0, #0
 8015632:	d071      	beq.n	8015718 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015634:	6820      	ldr	r0, [r4, #0]
 8015636:	3004      	adds	r0, #4
 8015638:	f7fe f812 	bl	8013660 <rcl_client_is_valid>
 801563c:	2800      	cmp	r0, #0
 801563e:	d06b      	beq.n	8015718 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015640:	6820      	ldr	r0, [r4, #0]
 8015642:	3008      	adds	r0, #8
 8015644:	f7fe f80c 	bl	8013660 <rcl_client_is_valid>
 8015648:	2800      	cmp	r0, #0
 801564a:	d065      	beq.n	8015718 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801564c:	6820      	ldr	r0, [r4, #0]
 801564e:	300c      	adds	r0, #12
 8015650:	f7fe fcb6 	bl	8013fc0 <rcl_subscription_is_valid>
 8015654:	2800      	cmp	r0, #0
 8015656:	d05f      	beq.n	8015718 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015658:	6820      	ldr	r0, [r4, #0]
 801565a:	3010      	adds	r0, #16
 801565c:	f7fe fcb0 	bl	8013fc0 <rcl_subscription_is_valid>
 8015660:	2800      	cmp	r0, #0
 8015662:	d059      	beq.n	8015718 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015664:	2e00      	cmp	r6, #0
 8015666:	d060      	beq.n	801572a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015668:	2f00      	cmp	r7, #0
 801566a:	d05e      	beq.n	801572a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801566c:	9b06      	ldr	r3, [sp, #24]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d05b      	beq.n	801572a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015672:	9b07      	ldr	r3, [sp, #28]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d058      	beq.n	801572a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015678:	9b08      	ldr	r3, [sp, #32]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d055      	beq.n	801572a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801567e:	6823      	ldr	r3, [r4, #0]
 8015680:	686a      	ldr	r2, [r5, #4]
 8015682:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8015686:	428a      	cmp	r2, r1
 8015688:	d94c      	bls.n	8015724 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801568a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801568e:	4282      	cmp	r2, r0
 8015690:	d948      	bls.n	8015724 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015692:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8015696:	69ea      	ldr	r2, [r5, #28]
 8015698:	42a2      	cmp	r2, r4
 801569a:	d943      	bls.n	8015724 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801569c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80156a0:	4562      	cmp	r2, ip
 80156a2:	d93f      	bls.n	8015724 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80156a4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80156a8:	4572      	cmp	r2, lr
 80156aa:	d93b      	bls.n	8015724 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80156ac:	69aa      	ldr	r2, [r5, #24]
 80156ae:	682d      	ldr	r5, [r5, #0]
 80156b0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80156b4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80156b8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80156bc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80156c0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80156c4:	f103 0c0c 	add.w	ip, r3, #12
 80156c8:	eba5 050c 	sub.w	r5, r5, ip
 80156cc:	fab5 f585 	clz	r5, r5
 80156d0:	096d      	lsrs	r5, r5, #5
 80156d2:	7035      	strb	r5, [r6, #0]
 80156d4:	f103 0510 	add.w	r5, r3, #16
 80156d8:	1b64      	subs	r4, r4, r5
 80156da:	fab4 f484 	clz	r4, r4
 80156de:	0964      	lsrs	r4, r4, #5
 80156e0:	703c      	strb	r4, [r7, #0]
 80156e2:	eba3 0008 	sub.w	r0, r3, r8
 80156e6:	1d1c      	adds	r4, r3, #4
 80156e8:	3308      	adds	r3, #8
 80156ea:	1ad3      	subs	r3, r2, r3
 80156ec:	fab0 f080 	clz	r0, r0
 80156f0:	9a06      	ldr	r2, [sp, #24]
 80156f2:	0940      	lsrs	r0, r0, #5
 80156f4:	1b09      	subs	r1, r1, r4
 80156f6:	7010      	strb	r0, [r2, #0]
 80156f8:	fab1 f181 	clz	r1, r1
 80156fc:	9a07      	ldr	r2, [sp, #28]
 80156fe:	0949      	lsrs	r1, r1, #5
 8015700:	7011      	strb	r1, [r2, #0]
 8015702:	fab3 f383 	clz	r3, r3
 8015706:	9a08      	ldr	r2, [sp, #32]
 8015708:	095b      	lsrs	r3, r3, #5
 801570a:	2000      	movs	r0, #0
 801570c:	7013      	strb	r3, [r2, #0]
 801570e:	e001      	b.n	8015714 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8015710:	f640 0036 	movw	r0, #2102	@ 0x836
 8015714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015718:	f7f7 fd02 	bl	800d120 <rcutils_reset_error>
 801571c:	f640 0036 	movw	r0, #2102	@ 0x836
 8015720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015724:	2001      	movs	r0, #1
 8015726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801572a:	200b      	movs	r0, #11
 801572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015730:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015734:	4770      	bx	lr
 8015736:	bf00      	nop

08015738 <rcl_action_take_goal_request>:
 8015738:	2800      	cmp	r0, #0
 801573a:	d039      	beq.n	80157b0 <rcl_action_take_goal_request+0x78>
 801573c:	b570      	push	{r4, r5, r6, lr}
 801573e:	4604      	mov	r4, r0
 8015740:	6800      	ldr	r0, [r0, #0]
 8015742:	b380      	cbz	r0, 80157a6 <rcl_action_take_goal_request+0x6e>
 8015744:	460d      	mov	r5, r1
 8015746:	4616      	mov	r6, r2
 8015748:	f7fe fbd2 	bl	8013ef0 <rcl_service_is_valid>
 801574c:	b330      	cbz	r0, 801579c <rcl_action_take_goal_request+0x64>
 801574e:	6820      	ldr	r0, [r4, #0]
 8015750:	3004      	adds	r0, #4
 8015752:	f7fe fbcd 	bl	8013ef0 <rcl_service_is_valid>
 8015756:	b308      	cbz	r0, 801579c <rcl_action_take_goal_request+0x64>
 8015758:	6820      	ldr	r0, [r4, #0]
 801575a:	3008      	adds	r0, #8
 801575c:	f7fe fbc8 	bl	8013ef0 <rcl_service_is_valid>
 8015760:	b1e0      	cbz	r0, 801579c <rcl_action_take_goal_request+0x64>
 8015762:	6820      	ldr	r0, [r4, #0]
 8015764:	300c      	adds	r0, #12
 8015766:	f7f6 fd63 	bl	800c230 <rcl_publisher_is_valid>
 801576a:	b1b8      	cbz	r0, 801579c <rcl_action_take_goal_request+0x64>
 801576c:	6820      	ldr	r0, [r4, #0]
 801576e:	3010      	adds	r0, #16
 8015770:	f7f6 fd5e 	bl	800c230 <rcl_publisher_is_valid>
 8015774:	b190      	cbz	r0, 801579c <rcl_action_take_goal_request+0x64>
 8015776:	b1cd      	cbz	r5, 80157ac <rcl_action_take_goal_request+0x74>
 8015778:	b1c6      	cbz	r6, 80157ac <rcl_action_take_goal_request+0x74>
 801577a:	6820      	ldr	r0, [r4, #0]
 801577c:	4632      	mov	r2, r6
 801577e:	4629      	mov	r1, r5
 8015780:	f7fe fb5e 	bl	8013e40 <rcl_take_request>
 8015784:	b148      	cbz	r0, 801579a <rcl_action_take_goal_request+0x62>
 8015786:	280a      	cmp	r0, #10
 8015788:	d007      	beq.n	801579a <rcl_action_take_goal_request+0x62>
 801578a:	f240 2259 	movw	r2, #601	@ 0x259
 801578e:	f640 0399 	movw	r3, #2201	@ 0x899
 8015792:	4290      	cmp	r0, r2
 8015794:	bf0c      	ite	eq
 8015796:	4618      	moveq	r0, r3
 8015798:	2001      	movne	r0, #1
 801579a:	bd70      	pop	{r4, r5, r6, pc}
 801579c:	f7f7 fcc0 	bl	800d120 <rcutils_reset_error>
 80157a0:	f640 0098 	movw	r0, #2200	@ 0x898
 80157a4:	bd70      	pop	{r4, r5, r6, pc}
 80157a6:	f640 0098 	movw	r0, #2200	@ 0x898
 80157aa:	bd70      	pop	{r4, r5, r6, pc}
 80157ac:	200b      	movs	r0, #11
 80157ae:	bd70      	pop	{r4, r5, r6, pc}
 80157b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80157b4:	4770      	bx	lr
 80157b6:	bf00      	nop

080157b8 <rcl_action_send_goal_response>:
 80157b8:	b390      	cbz	r0, 8015820 <rcl_action_send_goal_response+0x68>
 80157ba:	b570      	push	{r4, r5, r6, lr}
 80157bc:	4604      	mov	r4, r0
 80157be:	6800      	ldr	r0, [r0, #0]
 80157c0:	b348      	cbz	r0, 8015816 <rcl_action_send_goal_response+0x5e>
 80157c2:	460d      	mov	r5, r1
 80157c4:	4616      	mov	r6, r2
 80157c6:	f7fe fb93 	bl	8013ef0 <rcl_service_is_valid>
 80157ca:	b1f8      	cbz	r0, 801580c <rcl_action_send_goal_response+0x54>
 80157cc:	6820      	ldr	r0, [r4, #0]
 80157ce:	3004      	adds	r0, #4
 80157d0:	f7fe fb8e 	bl	8013ef0 <rcl_service_is_valid>
 80157d4:	b1d0      	cbz	r0, 801580c <rcl_action_send_goal_response+0x54>
 80157d6:	6820      	ldr	r0, [r4, #0]
 80157d8:	3008      	adds	r0, #8
 80157da:	f7fe fb89 	bl	8013ef0 <rcl_service_is_valid>
 80157de:	b1a8      	cbz	r0, 801580c <rcl_action_send_goal_response+0x54>
 80157e0:	6820      	ldr	r0, [r4, #0]
 80157e2:	300c      	adds	r0, #12
 80157e4:	f7f6 fd24 	bl	800c230 <rcl_publisher_is_valid>
 80157e8:	b180      	cbz	r0, 801580c <rcl_action_send_goal_response+0x54>
 80157ea:	6820      	ldr	r0, [r4, #0]
 80157ec:	3010      	adds	r0, #16
 80157ee:	f7f6 fd1f 	bl	800c230 <rcl_publisher_is_valid>
 80157f2:	b158      	cbz	r0, 801580c <rcl_action_send_goal_response+0x54>
 80157f4:	b195      	cbz	r5, 801581c <rcl_action_send_goal_response+0x64>
 80157f6:	b18e      	cbz	r6, 801581c <rcl_action_send_goal_response+0x64>
 80157f8:	6820      	ldr	r0, [r4, #0]
 80157fa:	4632      	mov	r2, r6
 80157fc:	4629      	mov	r1, r5
 80157fe:	f7fe fb5f 	bl	8013ec0 <rcl_send_response>
 8015802:	b110      	cbz	r0, 801580a <rcl_action_send_goal_response+0x52>
 8015804:	2802      	cmp	r0, #2
 8015806:	bf18      	it	ne
 8015808:	2001      	movne	r0, #1
 801580a:	bd70      	pop	{r4, r5, r6, pc}
 801580c:	f7f7 fc88 	bl	800d120 <rcutils_reset_error>
 8015810:	f640 0098 	movw	r0, #2200	@ 0x898
 8015814:	bd70      	pop	{r4, r5, r6, pc}
 8015816:	f640 0098 	movw	r0, #2200	@ 0x898
 801581a:	bd70      	pop	{r4, r5, r6, pc}
 801581c:	200b      	movs	r0, #11
 801581e:	bd70      	pop	{r4, r5, r6, pc}
 8015820:	f640 0098 	movw	r0, #2200	@ 0x898
 8015824:	4770      	bx	lr
 8015826:	bf00      	nop

08015828 <rcl_action_take_result_request>:
 8015828:	2800      	cmp	r0, #0
 801582a:	d03a      	beq.n	80158a2 <rcl_action_take_result_request+0x7a>
 801582c:	b570      	push	{r4, r5, r6, lr}
 801582e:	4604      	mov	r4, r0
 8015830:	6800      	ldr	r0, [r0, #0]
 8015832:	b388      	cbz	r0, 8015898 <rcl_action_take_result_request+0x70>
 8015834:	460d      	mov	r5, r1
 8015836:	4616      	mov	r6, r2
 8015838:	f7fe fb5a 	bl	8013ef0 <rcl_service_is_valid>
 801583c:	b338      	cbz	r0, 801588e <rcl_action_take_result_request+0x66>
 801583e:	6820      	ldr	r0, [r4, #0]
 8015840:	3004      	adds	r0, #4
 8015842:	f7fe fb55 	bl	8013ef0 <rcl_service_is_valid>
 8015846:	b310      	cbz	r0, 801588e <rcl_action_take_result_request+0x66>
 8015848:	6820      	ldr	r0, [r4, #0]
 801584a:	3008      	adds	r0, #8
 801584c:	f7fe fb50 	bl	8013ef0 <rcl_service_is_valid>
 8015850:	b1e8      	cbz	r0, 801588e <rcl_action_take_result_request+0x66>
 8015852:	6820      	ldr	r0, [r4, #0]
 8015854:	300c      	adds	r0, #12
 8015856:	f7f6 fceb 	bl	800c230 <rcl_publisher_is_valid>
 801585a:	b1c0      	cbz	r0, 801588e <rcl_action_take_result_request+0x66>
 801585c:	6820      	ldr	r0, [r4, #0]
 801585e:	3010      	adds	r0, #16
 8015860:	f7f6 fce6 	bl	800c230 <rcl_publisher_is_valid>
 8015864:	b198      	cbz	r0, 801588e <rcl_action_take_result_request+0x66>
 8015866:	b1d5      	cbz	r5, 801589e <rcl_action_take_result_request+0x76>
 8015868:	b1ce      	cbz	r6, 801589e <rcl_action_take_result_request+0x76>
 801586a:	6820      	ldr	r0, [r4, #0]
 801586c:	4632      	mov	r2, r6
 801586e:	4629      	mov	r1, r5
 8015870:	3008      	adds	r0, #8
 8015872:	f7fe fae5 	bl	8013e40 <rcl_take_request>
 8015876:	b148      	cbz	r0, 801588c <rcl_action_take_result_request+0x64>
 8015878:	280a      	cmp	r0, #10
 801587a:	d007      	beq.n	801588c <rcl_action_take_result_request+0x64>
 801587c:	f240 2259 	movw	r2, #601	@ 0x259
 8015880:	f640 0399 	movw	r3, #2201	@ 0x899
 8015884:	4290      	cmp	r0, r2
 8015886:	bf0c      	ite	eq
 8015888:	4618      	moveq	r0, r3
 801588a:	2001      	movne	r0, #1
 801588c:	bd70      	pop	{r4, r5, r6, pc}
 801588e:	f7f7 fc47 	bl	800d120 <rcutils_reset_error>
 8015892:	f640 0098 	movw	r0, #2200	@ 0x898
 8015896:	bd70      	pop	{r4, r5, r6, pc}
 8015898:	f640 0098 	movw	r0, #2200	@ 0x898
 801589c:	bd70      	pop	{r4, r5, r6, pc}
 801589e:	200b      	movs	r0, #11
 80158a0:	bd70      	pop	{r4, r5, r6, pc}
 80158a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80158a6:	4770      	bx	lr

080158a8 <rcl_action_take_cancel_request>:
 80158a8:	2800      	cmp	r0, #0
 80158aa:	d03a      	beq.n	8015922 <rcl_action_take_cancel_request+0x7a>
 80158ac:	b570      	push	{r4, r5, r6, lr}
 80158ae:	4604      	mov	r4, r0
 80158b0:	6800      	ldr	r0, [r0, #0]
 80158b2:	b388      	cbz	r0, 8015918 <rcl_action_take_cancel_request+0x70>
 80158b4:	460d      	mov	r5, r1
 80158b6:	4616      	mov	r6, r2
 80158b8:	f7fe fb1a 	bl	8013ef0 <rcl_service_is_valid>
 80158bc:	b338      	cbz	r0, 801590e <rcl_action_take_cancel_request+0x66>
 80158be:	6820      	ldr	r0, [r4, #0]
 80158c0:	3004      	adds	r0, #4
 80158c2:	f7fe fb15 	bl	8013ef0 <rcl_service_is_valid>
 80158c6:	b310      	cbz	r0, 801590e <rcl_action_take_cancel_request+0x66>
 80158c8:	6820      	ldr	r0, [r4, #0]
 80158ca:	3008      	adds	r0, #8
 80158cc:	f7fe fb10 	bl	8013ef0 <rcl_service_is_valid>
 80158d0:	b1e8      	cbz	r0, 801590e <rcl_action_take_cancel_request+0x66>
 80158d2:	6820      	ldr	r0, [r4, #0]
 80158d4:	300c      	adds	r0, #12
 80158d6:	f7f6 fcab 	bl	800c230 <rcl_publisher_is_valid>
 80158da:	b1c0      	cbz	r0, 801590e <rcl_action_take_cancel_request+0x66>
 80158dc:	6820      	ldr	r0, [r4, #0]
 80158de:	3010      	adds	r0, #16
 80158e0:	f7f6 fca6 	bl	800c230 <rcl_publisher_is_valid>
 80158e4:	b198      	cbz	r0, 801590e <rcl_action_take_cancel_request+0x66>
 80158e6:	b1d5      	cbz	r5, 801591e <rcl_action_take_cancel_request+0x76>
 80158e8:	b1ce      	cbz	r6, 801591e <rcl_action_take_cancel_request+0x76>
 80158ea:	6820      	ldr	r0, [r4, #0]
 80158ec:	4632      	mov	r2, r6
 80158ee:	4629      	mov	r1, r5
 80158f0:	3004      	adds	r0, #4
 80158f2:	f7fe faa5 	bl	8013e40 <rcl_take_request>
 80158f6:	b148      	cbz	r0, 801590c <rcl_action_take_cancel_request+0x64>
 80158f8:	280a      	cmp	r0, #10
 80158fa:	d007      	beq.n	801590c <rcl_action_take_cancel_request+0x64>
 80158fc:	f240 2259 	movw	r2, #601	@ 0x259
 8015900:	f640 0399 	movw	r3, #2201	@ 0x899
 8015904:	4290      	cmp	r0, r2
 8015906:	bf0c      	ite	eq
 8015908:	4618      	moveq	r0, r3
 801590a:	2001      	movne	r0, #1
 801590c:	bd70      	pop	{r4, r5, r6, pc}
 801590e:	f7f7 fc07 	bl	800d120 <rcutils_reset_error>
 8015912:	f640 0098 	movw	r0, #2200	@ 0x898
 8015916:	bd70      	pop	{r4, r5, r6, pc}
 8015918:	f640 0098 	movw	r0, #2200	@ 0x898
 801591c:	bd70      	pop	{r4, r5, r6, pc}
 801591e:	200b      	movs	r0, #11
 8015920:	bd70      	pop	{r4, r5, r6, pc}
 8015922:	f640 0098 	movw	r0, #2200	@ 0x898
 8015926:	4770      	bx	lr

08015928 <rcl_action_send_cancel_response>:
 8015928:	b398      	cbz	r0, 8015992 <rcl_action_send_cancel_response+0x6a>
 801592a:	b570      	push	{r4, r5, r6, lr}
 801592c:	4604      	mov	r4, r0
 801592e:	6800      	ldr	r0, [r0, #0]
 8015930:	b350      	cbz	r0, 8015988 <rcl_action_send_cancel_response+0x60>
 8015932:	460d      	mov	r5, r1
 8015934:	4616      	mov	r6, r2
 8015936:	f7fe fadb 	bl	8013ef0 <rcl_service_is_valid>
 801593a:	b300      	cbz	r0, 801597e <rcl_action_send_cancel_response+0x56>
 801593c:	6820      	ldr	r0, [r4, #0]
 801593e:	3004      	adds	r0, #4
 8015940:	f7fe fad6 	bl	8013ef0 <rcl_service_is_valid>
 8015944:	b1d8      	cbz	r0, 801597e <rcl_action_send_cancel_response+0x56>
 8015946:	6820      	ldr	r0, [r4, #0]
 8015948:	3008      	adds	r0, #8
 801594a:	f7fe fad1 	bl	8013ef0 <rcl_service_is_valid>
 801594e:	b1b0      	cbz	r0, 801597e <rcl_action_send_cancel_response+0x56>
 8015950:	6820      	ldr	r0, [r4, #0]
 8015952:	300c      	adds	r0, #12
 8015954:	f7f6 fc6c 	bl	800c230 <rcl_publisher_is_valid>
 8015958:	b188      	cbz	r0, 801597e <rcl_action_send_cancel_response+0x56>
 801595a:	6820      	ldr	r0, [r4, #0]
 801595c:	3010      	adds	r0, #16
 801595e:	f7f6 fc67 	bl	800c230 <rcl_publisher_is_valid>
 8015962:	b160      	cbz	r0, 801597e <rcl_action_send_cancel_response+0x56>
 8015964:	b19d      	cbz	r5, 801598e <rcl_action_send_cancel_response+0x66>
 8015966:	b196      	cbz	r6, 801598e <rcl_action_send_cancel_response+0x66>
 8015968:	6820      	ldr	r0, [r4, #0]
 801596a:	4632      	mov	r2, r6
 801596c:	4629      	mov	r1, r5
 801596e:	3004      	adds	r0, #4
 8015970:	f7fe faa6 	bl	8013ec0 <rcl_send_response>
 8015974:	b110      	cbz	r0, 801597c <rcl_action_send_cancel_response+0x54>
 8015976:	2802      	cmp	r0, #2
 8015978:	bf18      	it	ne
 801597a:	2001      	movne	r0, #1
 801597c:	bd70      	pop	{r4, r5, r6, pc}
 801597e:	f7f7 fbcf 	bl	800d120 <rcutils_reset_error>
 8015982:	f640 0098 	movw	r0, #2200	@ 0x898
 8015986:	bd70      	pop	{r4, r5, r6, pc}
 8015988:	f640 0098 	movw	r0, #2200	@ 0x898
 801598c:	bd70      	pop	{r4, r5, r6, pc}
 801598e:	200b      	movs	r0, #11
 8015990:	bd70      	pop	{r4, r5, r6, pc}
 8015992:	f640 0098 	movw	r0, #2200	@ 0x898
 8015996:	4770      	bx	lr

08015998 <rcl_action_wait_set_add_action_server>:
 8015998:	2800      	cmp	r0, #0
 801599a:	d04d      	beq.n	8015a38 <rcl_action_wait_set_add_action_server+0xa0>
 801599c:	b570      	push	{r4, r5, r6, lr}
 801599e:	460c      	mov	r4, r1
 80159a0:	b159      	cbz	r1, 80159ba <rcl_action_wait_set_add_action_server+0x22>
 80159a2:	4605      	mov	r5, r0
 80159a4:	6808      	ldr	r0, [r1, #0]
 80159a6:	b140      	cbz	r0, 80159ba <rcl_action_wait_set_add_action_server+0x22>
 80159a8:	4616      	mov	r6, r2
 80159aa:	f7fe faa1 	bl	8013ef0 <rcl_service_is_valid>
 80159ae:	b120      	cbz	r0, 80159ba <rcl_action_wait_set_add_action_server+0x22>
 80159b0:	6820      	ldr	r0, [r4, #0]
 80159b2:	3004      	adds	r0, #4
 80159b4:	f7fe fa9c 	bl	8013ef0 <rcl_service_is_valid>
 80159b8:	b910      	cbnz	r0, 80159c0 <rcl_action_wait_set_add_action_server+0x28>
 80159ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80159be:	bd70      	pop	{r4, r5, r6, pc}
 80159c0:	6820      	ldr	r0, [r4, #0]
 80159c2:	3008      	adds	r0, #8
 80159c4:	f7fe fa94 	bl	8013ef0 <rcl_service_is_valid>
 80159c8:	2800      	cmp	r0, #0
 80159ca:	d0f6      	beq.n	80159ba <rcl_action_wait_set_add_action_server+0x22>
 80159cc:	6820      	ldr	r0, [r4, #0]
 80159ce:	300c      	adds	r0, #12
 80159d0:	f7f6 fc46 	bl	800c260 <rcl_publisher_is_valid_except_context>
 80159d4:	2800      	cmp	r0, #0
 80159d6:	d0f0      	beq.n	80159ba <rcl_action_wait_set_add_action_server+0x22>
 80159d8:	6820      	ldr	r0, [r4, #0]
 80159da:	3010      	adds	r0, #16
 80159dc:	f7f6 fc40 	bl	800c260 <rcl_publisher_is_valid_except_context>
 80159e0:	2800      	cmp	r0, #0
 80159e2:	d0ea      	beq.n	80159ba <rcl_action_wait_set_add_action_server+0x22>
 80159e4:	6821      	ldr	r1, [r4, #0]
 80159e6:	4628      	mov	r0, r5
 80159e8:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80159ec:	f7ff fad0 	bl	8014f90 <rcl_wait_set_add_service>
 80159f0:	2800      	cmp	r0, #0
 80159f2:	d1e4      	bne.n	80159be <rcl_action_wait_set_add_action_server+0x26>
 80159f4:	6821      	ldr	r1, [r4, #0]
 80159f6:	4628      	mov	r0, r5
 80159f8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80159fc:	3104      	adds	r1, #4
 80159fe:	f7ff fac7 	bl	8014f90 <rcl_wait_set_add_service>
 8015a02:	2800      	cmp	r0, #0
 8015a04:	d1db      	bne.n	80159be <rcl_action_wait_set_add_action_server+0x26>
 8015a06:	6821      	ldr	r1, [r4, #0]
 8015a08:	4628      	mov	r0, r5
 8015a0a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8015a0e:	3108      	adds	r1, #8
 8015a10:	f7ff fabe 	bl	8014f90 <rcl_wait_set_add_service>
 8015a14:	2800      	cmp	r0, #0
 8015a16:	d1d2      	bne.n	80159be <rcl_action_wait_set_add_action_server+0x26>
 8015a18:	6821      	ldr	r1, [r4, #0]
 8015a1a:	4628      	mov	r0, r5
 8015a1c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8015a20:	3114      	adds	r1, #20
 8015a22:	f7ff fa59 	bl	8014ed8 <rcl_wait_set_add_timer>
 8015a26:	2800      	cmp	r0, #0
 8015a28:	d1c9      	bne.n	80159be <rcl_action_wait_set_add_action_server+0x26>
 8015a2a:	2e00      	cmp	r6, #0
 8015a2c:	d0c7      	beq.n	80159be <rcl_action_wait_set_add_action_server+0x26>
 8015a2e:	6823      	ldr	r3, [r4, #0]
 8015a30:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8015a34:	6033      	str	r3, [r6, #0]
 8015a36:	bd70      	pop	{r4, r5, r6, pc}
 8015a38:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015a3c:	4770      	bx	lr
 8015a3e:	bf00      	nop

08015a40 <rcl_action_server_wait_set_get_entities_ready>:
 8015a40:	2800      	cmp	r0, #0
 8015a42:	d05a      	beq.n	8015afa <rcl_action_server_wait_set_get_entities_ready+0xba>
 8015a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a46:	460c      	mov	r4, r1
 8015a48:	b161      	cbz	r1, 8015a64 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a4a:	4605      	mov	r5, r0
 8015a4c:	6808      	ldr	r0, [r1, #0]
 8015a4e:	b148      	cbz	r0, 8015a64 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a50:	4616      	mov	r6, r2
 8015a52:	461f      	mov	r7, r3
 8015a54:	f7fe fa4c 	bl	8013ef0 <rcl_service_is_valid>
 8015a58:	b120      	cbz	r0, 8015a64 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a5a:	6820      	ldr	r0, [r4, #0]
 8015a5c:	3004      	adds	r0, #4
 8015a5e:	f7fe fa47 	bl	8013ef0 <rcl_service_is_valid>
 8015a62:	b910      	cbnz	r0, 8015a6a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8015a64:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a6a:	6820      	ldr	r0, [r4, #0]
 8015a6c:	3008      	adds	r0, #8
 8015a6e:	f7fe fa3f 	bl	8013ef0 <rcl_service_is_valid>
 8015a72:	2800      	cmp	r0, #0
 8015a74:	d0f6      	beq.n	8015a64 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a76:	6820      	ldr	r0, [r4, #0]
 8015a78:	300c      	adds	r0, #12
 8015a7a:	f7f6 fbf1 	bl	800c260 <rcl_publisher_is_valid_except_context>
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	d0f0      	beq.n	8015a64 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a82:	6820      	ldr	r0, [r4, #0]
 8015a84:	3010      	adds	r0, #16
 8015a86:	f7f6 fbeb 	bl	800c260 <rcl_publisher_is_valid_except_context>
 8015a8a:	2800      	cmp	r0, #0
 8015a8c:	d0ea      	beq.n	8015a64 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a8e:	b3be      	cbz	r6, 8015b00 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a90:	b3b7      	cbz	r7, 8015b00 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a92:	9b06      	ldr	r3, [sp, #24]
 8015a94:	b3a3      	cbz	r3, 8015b00 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a96:	9b07      	ldr	r3, [sp, #28]
 8015a98:	b393      	cbz	r3, 8015b00 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a9a:	6821      	ldr	r1, [r4, #0]
 8015a9c:	692a      	ldr	r2, [r5, #16]
 8015a9e:	6a2c      	ldr	r4, [r5, #32]
 8015aa0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8015aa4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8015aa8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8015aac:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8015ab0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8015ab4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015ab8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015abc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8015ac0:	1a64      	subs	r4, r4, r1
 8015ac2:	fab4 f484 	clz	r4, r4
 8015ac6:	0964      	lsrs	r4, r4, #5
 8015ac8:	7034      	strb	r4, [r6, #0]
 8015aca:	1d0c      	adds	r4, r1, #4
 8015acc:	1b1b      	subs	r3, r3, r4
 8015ace:	fab3 f383 	clz	r3, r3
 8015ad2:	095b      	lsrs	r3, r3, #5
 8015ad4:	f101 0408 	add.w	r4, r1, #8
 8015ad8:	703b      	strb	r3, [r7, #0]
 8015ada:	f101 0314 	add.w	r3, r1, #20
 8015ade:	1b01      	subs	r1, r0, r4
 8015ae0:	1ad3      	subs	r3, r2, r3
 8015ae2:	fab1 f181 	clz	r1, r1
 8015ae6:	9a06      	ldr	r2, [sp, #24]
 8015ae8:	0949      	lsrs	r1, r1, #5
 8015aea:	7011      	strb	r1, [r2, #0]
 8015aec:	fab3 f383 	clz	r3, r3
 8015af0:	9a07      	ldr	r2, [sp, #28]
 8015af2:	095b      	lsrs	r3, r3, #5
 8015af4:	2000      	movs	r0, #0
 8015af6:	7013      	strb	r3, [r2, #0]
 8015af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015afa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015afe:	4770      	bx	lr
 8015b00:	200b      	movs	r0, #11
 8015b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015b04 <_execute_event_handler>:
 8015b04:	2002      	movs	r0, #2
 8015b06:	4770      	bx	lr

08015b08 <_cancel_goal_event_handler>:
 8015b08:	2003      	movs	r0, #3
 8015b0a:	4770      	bx	lr

08015b0c <_succeed_event_handler>:
 8015b0c:	2004      	movs	r0, #4
 8015b0e:	4770      	bx	lr

08015b10 <_abort_event_handler>:
 8015b10:	2006      	movs	r0, #6
 8015b12:	4770      	bx	lr

08015b14 <_canceled_event_handler>:
 8015b14:	2005      	movs	r0, #5
 8015b16:	4770      	bx	lr

08015b18 <rcl_action_transition_goal_state>:
 8015b18:	b2c2      	uxtb	r2, r0
 8015b1a:	2a06      	cmp	r2, #6
 8015b1c:	d80c      	bhi.n	8015b38 <rcl_action_transition_goal_state+0x20>
 8015b1e:	2904      	cmp	r1, #4
 8015b20:	d80a      	bhi.n	8015b38 <rcl_action_transition_goal_state+0x20>
 8015b22:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8015b26:	b410      	push	{r4}
 8015b28:	1853      	adds	r3, r2, r1
 8015b2a:	4c06      	ldr	r4, [pc, #24]	@ (8015b44 <rcl_action_transition_goal_state+0x2c>)
 8015b2c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015b30:	b123      	cbz	r3, 8015b3c <rcl_action_transition_goal_state+0x24>
 8015b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b36:	4718      	bx	r3
 8015b38:	2000      	movs	r0, #0
 8015b3a:	4770      	bx	lr
 8015b3c:	2000      	movs	r0, #0
 8015b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b42:	4770      	bx	lr
 8015b44:	0801afe4 	.word	0x0801afe4

08015b48 <rcl_action_get_zero_initialized_cancel_response>:
 8015b48:	b510      	push	{r4, lr}
 8015b4a:	4c07      	ldr	r4, [pc, #28]	@ (8015b68 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8015b4c:	4686      	mov	lr, r0
 8015b4e:	4684      	mov	ip, r0
 8015b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b5c:	6823      	ldr	r3, [r4, #0]
 8015b5e:	f8cc 3000 	str.w	r3, [ip]
 8015b62:	4670      	mov	r0, lr
 8015b64:	bd10      	pop	{r4, pc}
 8015b66:	bf00      	nop
 8015b68:	0801b070 	.word	0x0801b070

08015b6c <rclc_action_send_result_request>:
 8015b6c:	b1d0      	cbz	r0, 8015ba4 <rclc_action_send_result_request+0x38>
 8015b6e:	b500      	push	{lr}
 8015b70:	4684      	mov	ip, r0
 8015b72:	b087      	sub	sp, #28
 8015b74:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8015b78:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8015b7c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8015b80:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8015b84:	f10d 0e08 	add.w	lr, sp, #8
 8015b88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015b8c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015b90:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8015b94:	a902      	add	r1, sp, #8
 8015b96:	3010      	adds	r0, #16
 8015b98:	f7ff fbda 	bl	8015350 <rcl_action_send_result_request>
 8015b9c:	b920      	cbnz	r0, 8015ba8 <rclc_action_send_result_request+0x3c>
 8015b9e:	b007      	add	sp, #28
 8015ba0:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ba4:	200b      	movs	r0, #11
 8015ba6:	4770      	bx	lr
 8015ba8:	9001      	str	r0, [sp, #4]
 8015baa:	f7f7 fab9 	bl	800d120 <rcutils_reset_error>
 8015bae:	9801      	ldr	r0, [sp, #4]
 8015bb0:	b007      	add	sp, #28
 8015bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8015bb6:	bf00      	nop

08015bb8 <rclc_action_take_goal_handle>:
 8015bb8:	b160      	cbz	r0, 8015bd4 <rclc_action_take_goal_handle+0x1c>
 8015bba:	6883      	ldr	r3, [r0, #8]
 8015bbc:	b143      	cbz	r3, 8015bd0 <rclc_action_take_goal_handle+0x18>
 8015bbe:	6819      	ldr	r1, [r3, #0]
 8015bc0:	6081      	str	r1, [r0, #8]
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	721a      	strb	r2, [r3, #8]
 8015bc6:	68c1      	ldr	r1, [r0, #12]
 8015bc8:	6019      	str	r1, [r3, #0]
 8015bca:	621a      	str	r2, [r3, #32]
 8015bcc:	849a      	strh	r2, [r3, #36]	@ 0x24
 8015bce:	60c3      	str	r3, [r0, #12]
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	4770      	bx	lr
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	e7fb      	b.n	8015bd0 <rclc_action_take_goal_handle+0x18>

08015bd8 <rclc_action_remove_used_goal_handle>:
 8015bd8:	b180      	cbz	r0, 8015bfc <rclc_action_remove_used_goal_handle+0x24>
 8015bda:	b179      	cbz	r1, 8015bfc <rclc_action_remove_used_goal_handle+0x24>
 8015bdc:	68c3      	ldr	r3, [r0, #12]
 8015bde:	4299      	cmp	r1, r3
 8015be0:	d00d      	beq.n	8015bfe <rclc_action_remove_used_goal_handle+0x26>
 8015be2:	b12b      	cbz	r3, 8015bf0 <rclc_action_remove_used_goal_handle+0x18>
 8015be4:	681a      	ldr	r2, [r3, #0]
 8015be6:	4291      	cmp	r1, r2
 8015be8:	d003      	beq.n	8015bf2 <rclc_action_remove_used_goal_handle+0x1a>
 8015bea:	4613      	mov	r3, r2
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d1f9      	bne.n	8015be4 <rclc_action_remove_used_goal_handle+0xc>
 8015bf0:	4770      	bx	lr
 8015bf2:	680a      	ldr	r2, [r1, #0]
 8015bf4:	601a      	str	r2, [r3, #0]
 8015bf6:	6883      	ldr	r3, [r0, #8]
 8015bf8:	600b      	str	r3, [r1, #0]
 8015bfa:	6081      	str	r1, [r0, #8]
 8015bfc:	4770      	bx	lr
 8015bfe:	680b      	ldr	r3, [r1, #0]
 8015c00:	60c3      	str	r3, [r0, #12]
 8015c02:	e7f8      	b.n	8015bf6 <rclc_action_remove_used_goal_handle+0x1e>

08015c04 <rclc_action_find_goal_handle_by_uuid>:
 8015c04:	b538      	push	{r3, r4, r5, lr}
 8015c06:	b180      	cbz	r0, 8015c2a <rclc_action_find_goal_handle_by_uuid+0x26>
 8015c08:	460d      	mov	r5, r1
 8015c0a:	b181      	cbz	r1, 8015c2e <rclc_action_find_goal_handle_by_uuid+0x2a>
 8015c0c:	68c4      	ldr	r4, [r0, #12]
 8015c0e:	b914      	cbnz	r4, 8015c16 <rclc_action_find_goal_handle_by_uuid+0x12>
 8015c10:	e009      	b.n	8015c26 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015c12:	6824      	ldr	r4, [r4, #0]
 8015c14:	b13c      	cbz	r4, 8015c26 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015c16:	f104 0009 	add.w	r0, r4, #9
 8015c1a:	2210      	movs	r2, #16
 8015c1c:	4629      	mov	r1, r5
 8015c1e:	f003 fcf5 	bl	801960c <memcmp>
 8015c22:	2800      	cmp	r0, #0
 8015c24:	d1f5      	bne.n	8015c12 <rclc_action_find_goal_handle_by_uuid+0xe>
 8015c26:	4620      	mov	r0, r4
 8015c28:	bd38      	pop	{r3, r4, r5, pc}
 8015c2a:	4604      	mov	r4, r0
 8015c2c:	e7fb      	b.n	8015c26 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015c2e:	460c      	mov	r4, r1
 8015c30:	e7f9      	b.n	8015c26 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015c32:	bf00      	nop

08015c34 <rclc_action_find_first_handle_by_status>:
 8015c34:	b140      	cbz	r0, 8015c48 <rclc_action_find_first_handle_by_status+0x14>
 8015c36:	68c0      	ldr	r0, [r0, #12]
 8015c38:	b910      	cbnz	r0, 8015c40 <rclc_action_find_first_handle_by_status+0xc>
 8015c3a:	e005      	b.n	8015c48 <rclc_action_find_first_handle_by_status+0x14>
 8015c3c:	6800      	ldr	r0, [r0, #0]
 8015c3e:	b118      	cbz	r0, 8015c48 <rclc_action_find_first_handle_by_status+0x14>
 8015c40:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015c44:	428b      	cmp	r3, r1
 8015c46:	d1f9      	bne.n	8015c3c <rclc_action_find_first_handle_by_status+0x8>
 8015c48:	4770      	bx	lr
 8015c4a:	bf00      	nop

08015c4c <rclc_action_find_first_terminated_handle>:
 8015c4c:	b140      	cbz	r0, 8015c60 <rclc_action_find_first_terminated_handle+0x14>
 8015c4e:	68c0      	ldr	r0, [r0, #12]
 8015c50:	b910      	cbnz	r0, 8015c58 <rclc_action_find_first_terminated_handle+0xc>
 8015c52:	e005      	b.n	8015c60 <rclc_action_find_first_terminated_handle+0x14>
 8015c54:	6800      	ldr	r0, [r0, #0]
 8015c56:	b118      	cbz	r0, 8015c60 <rclc_action_find_first_terminated_handle+0x14>
 8015c58:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015c5c:	2b03      	cmp	r3, #3
 8015c5e:	ddf9      	ble.n	8015c54 <rclc_action_find_first_terminated_handle+0x8>
 8015c60:	4770      	bx	lr
 8015c62:	bf00      	nop

08015c64 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8015c64:	b170      	cbz	r0, 8015c84 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015c66:	68c0      	ldr	r0, [r0, #12]
 8015c68:	b160      	cbz	r0, 8015c84 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015c6a:	b410      	push	{r4}
 8015c6c:	e001      	b.n	8015c72 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8015c6e:	6800      	ldr	r0, [r0, #0]
 8015c70:	b128      	cbz	r0, 8015c7e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8015c72:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8015c76:	4299      	cmp	r1, r3
 8015c78:	bf08      	it	eq
 8015c7a:	4294      	cmpeq	r4, r2
 8015c7c:	d1f7      	bne.n	8015c6e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8015c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c82:	4770      	bx	lr
 8015c84:	4770      	bx	lr
 8015c86:	bf00      	nop

08015c88 <rclc_action_find_handle_by_result_request_sequence_number>:
 8015c88:	b170      	cbz	r0, 8015ca8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015c8a:	68c0      	ldr	r0, [r0, #12]
 8015c8c:	b160      	cbz	r0, 8015ca8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015c8e:	b410      	push	{r4}
 8015c90:	e001      	b.n	8015c96 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8015c92:	6800      	ldr	r0, [r0, #0]
 8015c94:	b128      	cbz	r0, 8015ca2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8015c96:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8015c9a:	4299      	cmp	r1, r3
 8015c9c:	bf08      	it	eq
 8015c9e:	4294      	cmpeq	r4, r2
 8015ca0:	d1f7      	bne.n	8015c92 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8015ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ca6:	4770      	bx	lr
 8015ca8:	4770      	bx	lr
 8015caa:	bf00      	nop

08015cac <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8015cac:	b170      	cbz	r0, 8015ccc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015cae:	68c0      	ldr	r0, [r0, #12]
 8015cb0:	b160      	cbz	r0, 8015ccc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015cb2:	b410      	push	{r4}
 8015cb4:	e001      	b.n	8015cba <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8015cb6:	6800      	ldr	r0, [r0, #0]
 8015cb8:	b128      	cbz	r0, 8015cc6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8015cba:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8015cbe:	4299      	cmp	r1, r3
 8015cc0:	bf08      	it	eq
 8015cc2:	4294      	cmpeq	r4, r2
 8015cc4:	d1f7      	bne.n	8015cb6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8015cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cca:	4770      	bx	lr
 8015ccc:	4770      	bx	lr
 8015cce:	bf00      	nop

08015cd0 <rclc_action_find_first_handle_with_goal_response>:
 8015cd0:	b140      	cbz	r0, 8015ce4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015cd2:	68c0      	ldr	r0, [r0, #12]
 8015cd4:	b910      	cbnz	r0, 8015cdc <rclc_action_find_first_handle_with_goal_response+0xc>
 8015cd6:	e005      	b.n	8015ce4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015cd8:	6800      	ldr	r0, [r0, #0]
 8015cda:	b118      	cbz	r0, 8015ce4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015cdc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d0f9      	beq.n	8015cd8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8015ce4:	4770      	bx	lr
 8015ce6:	bf00      	nop

08015ce8 <rclc_action_find_first_handle_with_result_response>:
 8015ce8:	b140      	cbz	r0, 8015cfc <rclc_action_find_first_handle_with_result_response+0x14>
 8015cea:	68c0      	ldr	r0, [r0, #12]
 8015cec:	b910      	cbnz	r0, 8015cf4 <rclc_action_find_first_handle_with_result_response+0xc>
 8015cee:	e005      	b.n	8015cfc <rclc_action_find_first_handle_with_result_response+0x14>
 8015cf0:	6800      	ldr	r0, [r0, #0]
 8015cf2:	b118      	cbz	r0, 8015cfc <rclc_action_find_first_handle_with_result_response+0x14>
 8015cf4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d0f9      	beq.n	8015cf0 <rclc_action_find_first_handle_with_result_response+0x8>
 8015cfc:	4770      	bx	lr
 8015cfe:	bf00      	nop

08015d00 <rclc_action_server_response_goal_request>:
 8015d00:	b198      	cbz	r0, 8015d2a <rclc_action_server_response_goal_request+0x2a>
 8015d02:	b510      	push	{r4, lr}
 8015d04:	6844      	ldr	r4, [r0, #4]
 8015d06:	b086      	sub	sp, #24
 8015d08:	2200      	movs	r2, #0
 8015d0a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015d0e:	460b      	mov	r3, r1
 8015d10:	9205      	str	r2, [sp, #20]
 8015d12:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8015d16:	aa03      	add	r2, sp, #12
 8015d18:	f104 0010 	add.w	r0, r4, #16
 8015d1c:	f88d 300c 	strb.w	r3, [sp, #12]
 8015d20:	f7ff fd4a 	bl	80157b8 <rcl_action_send_goal_response>
 8015d24:	b918      	cbnz	r0, 8015d2e <rclc_action_server_response_goal_request+0x2e>
 8015d26:	b006      	add	sp, #24
 8015d28:	bd10      	pop	{r4, pc}
 8015d2a:	200b      	movs	r0, #11
 8015d2c:	4770      	bx	lr
 8015d2e:	9001      	str	r0, [sp, #4]
 8015d30:	f7f7 f9f6 	bl	800d120 <rcutils_reset_error>
 8015d34:	9801      	ldr	r0, [sp, #4]
 8015d36:	b006      	add	sp, #24
 8015d38:	bd10      	pop	{r4, pc}
 8015d3a:	bf00      	nop
 8015d3c:	0000      	movs	r0, r0
	...

08015d40 <rclc_action_server_goal_cancel_accept>:
 8015d40:	b310      	cbz	r0, 8015d88 <rclc_action_server_goal_cancel_accept+0x48>
 8015d42:	b510      	push	{r4, lr}
 8015d44:	b090      	sub	sp, #64	@ 0x40
 8015d46:	4604      	mov	r4, r0
 8015d48:	a806      	add	r0, sp, #24
 8015d4a:	f7ff fefd 	bl	8015b48 <rcl_action_get_zero_initialized_cancel_response>
 8015d4e:	2300      	movs	r3, #0
 8015d50:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8015d54:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8015d58:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8015d5c:	f88d 3018 	strb.w	r3, [sp, #24]
 8015d60:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8015d64:	f8cd d01c 	str.w	sp, [sp, #28]
 8015d68:	46ec      	mov	ip, sp
 8015d6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d6e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015d90 <rclc_action_server_goal_cancel_accept+0x50>
 8015d72:	6860      	ldr	r0, [r4, #4]
 8015d74:	aa06      	add	r2, sp, #24
 8015d76:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8015d7a:	3010      	adds	r0, #16
 8015d7c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015d80:	f7ff fdd2 	bl	8015928 <rcl_action_send_cancel_response>
 8015d84:	b010      	add	sp, #64	@ 0x40
 8015d86:	bd10      	pop	{r4, pc}
 8015d88:	200b      	movs	r0, #11
 8015d8a:	4770      	bx	lr
 8015d8c:	f3af 8000 	nop.w
 8015d90:	00000001 	.word	0x00000001
 8015d94:	00000001 	.word	0x00000001

08015d98 <rclc_action_server_goal_cancel_reject>:
 8015d98:	b082      	sub	sp, #8
 8015d9a:	b530      	push	{r4, r5, lr}
 8015d9c:	b08b      	sub	sp, #44	@ 0x2c
 8015d9e:	ac0e      	add	r4, sp, #56	@ 0x38
 8015da0:	e884 000c 	stmia.w	r4, {r2, r3}
 8015da4:	b188      	cbz	r0, 8015dca <rclc_action_server_goal_cancel_reject+0x32>
 8015da6:	4604      	mov	r4, r0
 8015da8:	a801      	add	r0, sp, #4
 8015daa:	460d      	mov	r5, r1
 8015dac:	f7ff fecc 	bl	8015b48 <rcl_action_get_zero_initialized_cancel_response>
 8015db0:	aa01      	add	r2, sp, #4
 8015db2:	a90e      	add	r1, sp, #56	@ 0x38
 8015db4:	f104 0010 	add.w	r0, r4, #16
 8015db8:	f88d 5004 	strb.w	r5, [sp, #4]
 8015dbc:	f7ff fdb4 	bl	8015928 <rcl_action_send_cancel_response>
 8015dc0:	b00b      	add	sp, #44	@ 0x2c
 8015dc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015dc6:	b002      	add	sp, #8
 8015dc8:	4770      	bx	lr
 8015dca:	200b      	movs	r0, #11
 8015dcc:	b00b      	add	sp, #44	@ 0x2c
 8015dce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015dd2:	b002      	add	sp, #8
 8015dd4:	4770      	bx	lr
 8015dd6:	bf00      	nop

08015dd8 <__atomic_load_8>:
 8015dd8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015ddc:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015de0:	4a15      	ldr	r2, [pc, #84]	@ (8015e38 <__atomic_load_8+0x60>)
 8015de2:	4b16      	ldr	r3, [pc, #88]	@ (8015e3c <__atomic_load_8+0x64>)
 8015de4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015de8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015dec:	fb02 f101 	mul.w	r1, r2, r1
 8015df0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015df4:	fba3 2301 	umull	r2, r3, r3, r1
 8015df8:	091b      	lsrs	r3, r3, #4
 8015dfa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015dfe:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8015e02:	b4d0      	push	{r4, r6, r7}
 8015e04:	4c0e      	ldr	r4, [pc, #56]	@ (8015e40 <__atomic_load_8+0x68>)
 8015e06:	1ac9      	subs	r1, r1, r3
 8015e08:	1862      	adds	r2, r4, r1
 8015e0a:	f04f 0c01 	mov.w	ip, #1
 8015e0e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8015e12:	e8c2 cf46 	strexb	r6, ip, [r2]
 8015e16:	2e00      	cmp	r6, #0
 8015e18:	d1f9      	bne.n	8015e0e <__atomic_load_8+0x36>
 8015e1a:	f3bf 8f5b 	dmb	ish
 8015e1e:	b2db      	uxtb	r3, r3
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d1f4      	bne.n	8015e0e <__atomic_load_8+0x36>
 8015e24:	e9d0 6700 	ldrd	r6, r7, [r0]
 8015e28:	f3bf 8f5b 	dmb	ish
 8015e2c:	5463      	strb	r3, [r4, r1]
 8015e2e:	4630      	mov	r0, r6
 8015e30:	4639      	mov	r1, r7
 8015e32:	bcd0      	pop	{r4, r6, r7}
 8015e34:	4770      	bx	lr
 8015e36:	bf00      	nop
 8015e38:	27d4eb2d 	.word	0x27d4eb2d
 8015e3c:	b21642c9 	.word	0xb21642c9
 8015e40:	2000af1c 	.word	0x2000af1c

08015e44 <__atomic_store_8>:
 8015e44:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015e48:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015e4c:	b570      	push	{r4, r5, r6, lr}
 8015e4e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015e52:	4c14      	ldr	r4, [pc, #80]	@ (8015ea4 <__atomic_store_8+0x60>)
 8015e54:	4d14      	ldr	r5, [pc, #80]	@ (8015ea8 <__atomic_store_8+0x64>)
 8015e56:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015e5a:	fb04 f101 	mul.w	r1, r4, r1
 8015e5e:	4c13      	ldr	r4, [pc, #76]	@ (8015eac <__atomic_store_8+0x68>)
 8015e60:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015e64:	fba4 4e01 	umull	r4, lr, r4, r1
 8015e68:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8015e6c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8015e70:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8015e74:	eba1 0e0e 	sub.w	lr, r1, lr
 8015e78:	eb05 0c0e 	add.w	ip, r5, lr
 8015e7c:	f04f 0401 	mov.w	r4, #1
 8015e80:	e8dc 1f4f 	ldrexb	r1, [ip]
 8015e84:	e8cc 4f46 	strexb	r6, r4, [ip]
 8015e88:	2e00      	cmp	r6, #0
 8015e8a:	d1f9      	bne.n	8015e80 <__atomic_store_8+0x3c>
 8015e8c:	f3bf 8f5b 	dmb	ish
 8015e90:	b2c9      	uxtb	r1, r1
 8015e92:	2900      	cmp	r1, #0
 8015e94:	d1f4      	bne.n	8015e80 <__atomic_store_8+0x3c>
 8015e96:	e9c0 2300 	strd	r2, r3, [r0]
 8015e9a:	f3bf 8f5b 	dmb	ish
 8015e9e:	f805 100e 	strb.w	r1, [r5, lr]
 8015ea2:	bd70      	pop	{r4, r5, r6, pc}
 8015ea4:	27d4eb2d 	.word	0x27d4eb2d
 8015ea8:	2000af1c 	.word	0x2000af1c
 8015eac:	b21642c9 	.word	0xb21642c9

08015eb0 <__atomic_exchange_8>:
 8015eb0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8015eb4:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8015eb8:	4916      	ldr	r1, [pc, #88]	@ (8015f14 <__atomic_exchange_8+0x64>)
 8015eba:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8015ebe:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8015ec2:	fb01 fc0c 	mul.w	ip, r1, ip
 8015ec6:	4914      	ldr	r1, [pc, #80]	@ (8015f18 <__atomic_exchange_8+0x68>)
 8015ec8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8015ecc:	b570      	push	{r4, r5, r6, lr}
 8015ece:	4605      	mov	r5, r0
 8015ed0:	fba1 010c 	umull	r0, r1, r1, ip
 8015ed4:	0909      	lsrs	r1, r1, #4
 8015ed6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8015eda:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8015ede:	4e0f      	ldr	r6, [pc, #60]	@ (8015f1c <__atomic_exchange_8+0x6c>)
 8015ee0:	ebac 0c01 	sub.w	ip, ip, r1
 8015ee4:	eb06 010c 	add.w	r1, r6, ip
 8015ee8:	f04f 0e01 	mov.w	lr, #1
 8015eec:	e8d1 4f4f 	ldrexb	r4, [r1]
 8015ef0:	e8c1 ef40 	strexb	r0, lr, [r1]
 8015ef4:	2800      	cmp	r0, #0
 8015ef6:	d1f9      	bne.n	8015eec <__atomic_exchange_8+0x3c>
 8015ef8:	f3bf 8f5b 	dmb	ish
 8015efc:	b2e4      	uxtb	r4, r4
 8015efe:	2c00      	cmp	r4, #0
 8015f00:	d1f4      	bne.n	8015eec <__atomic_exchange_8+0x3c>
 8015f02:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015f06:	e9c5 2300 	strd	r2, r3, [r5]
 8015f0a:	f3bf 8f5b 	dmb	ish
 8015f0e:	f806 400c 	strb.w	r4, [r6, ip]
 8015f12:	bd70      	pop	{r4, r5, r6, pc}
 8015f14:	27d4eb2d 	.word	0x27d4eb2d
 8015f18:	b21642c9 	.word	0xb21642c9
 8015f1c:	2000af1c 	.word	0x2000af1c

08015f20 <rcutils_get_env>:
 8015f20:	b168      	cbz	r0, 8015f3e <rcutils_get_env+0x1e>
 8015f22:	b510      	push	{r4, lr}
 8015f24:	460c      	mov	r4, r1
 8015f26:	b129      	cbz	r1, 8015f34 <rcutils_get_env+0x14>
 8015f28:	f002 fed8 	bl	8018cdc <getenv>
 8015f2c:	b120      	cbz	r0, 8015f38 <rcutils_get_env+0x18>
 8015f2e:	6020      	str	r0, [r4, #0]
 8015f30:	2000      	movs	r0, #0
 8015f32:	bd10      	pop	{r4, pc}
 8015f34:	4803      	ldr	r0, [pc, #12]	@ (8015f44 <rcutils_get_env+0x24>)
 8015f36:	bd10      	pop	{r4, pc}
 8015f38:	4b03      	ldr	r3, [pc, #12]	@ (8015f48 <rcutils_get_env+0x28>)
 8015f3a:	6023      	str	r3, [r4, #0]
 8015f3c:	bd10      	pop	{r4, pc}
 8015f3e:	4803      	ldr	r0, [pc, #12]	@ (8015f4c <rcutils_get_env+0x2c>)
 8015f40:	4770      	bx	lr
 8015f42:	bf00      	nop
 8015f44:	0801a8b8 	.word	0x0801a8b8
 8015f48:	0801ac94 	.word	0x0801ac94
 8015f4c:	0801a89c 	.word	0x0801a89c

08015f50 <rcutils_format_string_limit>:
 8015f50:	b40f      	push	{r0, r1, r2, r3}
 8015f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f54:	b083      	sub	sp, #12
 8015f56:	ac08      	add	r4, sp, #32
 8015f58:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015f5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015f5e:	b34e      	cbz	r6, 8015fb4 <rcutils_format_string_limit+0x64>
 8015f60:	a808      	add	r0, sp, #32
 8015f62:	f7f7 f8b7 	bl	800d0d4 <rcutils_allocator_is_valid>
 8015f66:	b328      	cbz	r0, 8015fb4 <rcutils_format_string_limit+0x64>
 8015f68:	2100      	movs	r1, #0
 8015f6a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8015f6c:	4632      	mov	r2, r6
 8015f6e:	4608      	mov	r0, r1
 8015f70:	e9cd 3300 	strd	r3, r3, [sp]
 8015f74:	f000 f8f4 	bl	8016160 <rcutils_vsnprintf>
 8015f78:	1c43      	adds	r3, r0, #1
 8015f7a:	4605      	mov	r5, r0
 8015f7c:	d01a      	beq.n	8015fb4 <rcutils_format_string_limit+0x64>
 8015f7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015f80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015f82:	1c47      	adds	r7, r0, #1
 8015f84:	429f      	cmp	r7, r3
 8015f86:	bf84      	itt	hi
 8015f88:	461f      	movhi	r7, r3
 8015f8a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8015f8e:	4638      	mov	r0, r7
 8015f90:	9b08      	ldr	r3, [sp, #32]
 8015f92:	4798      	blx	r3
 8015f94:	4604      	mov	r4, r0
 8015f96:	b168      	cbz	r0, 8015fb4 <rcutils_format_string_limit+0x64>
 8015f98:	9b01      	ldr	r3, [sp, #4]
 8015f9a:	4632      	mov	r2, r6
 8015f9c:	4639      	mov	r1, r7
 8015f9e:	f000 f8df 	bl	8016160 <rcutils_vsnprintf>
 8015fa2:	2800      	cmp	r0, #0
 8015fa4:	db02      	blt.n	8015fac <rcutils_format_string_limit+0x5c>
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	5563      	strb	r3, [r4, r5]
 8015faa:	e004      	b.n	8015fb6 <rcutils_format_string_limit+0x66>
 8015fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015fae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015fb0:	4620      	mov	r0, r4
 8015fb2:	4798      	blx	r3
 8015fb4:	2400      	movs	r4, #0
 8015fb6:	4620      	mov	r0, r4
 8015fb8:	b003      	add	sp, #12
 8015fba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015fbe:	b004      	add	sp, #16
 8015fc0:	4770      	bx	lr
 8015fc2:	bf00      	nop

08015fc4 <rcutils_repl_str>:
 8015fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc8:	ed2d 8b02 	vpush	{d8}
 8015fcc:	b087      	sub	sp, #28
 8015fce:	4680      	mov	r8, r0
 8015fd0:	4608      	mov	r0, r1
 8015fd2:	f8cd 8004 	str.w	r8, [sp, #4]
 8015fd6:	ee08 2a10 	vmov	s16, r2
 8015fda:	468a      	mov	sl, r1
 8015fdc:	4699      	mov	r9, r3
 8015fde:	f7ea f929 	bl	8000234 <strlen>
 8015fe2:	2600      	movs	r6, #0
 8015fe4:	4647      	mov	r7, r8
 8015fe6:	9002      	str	r0, [sp, #8]
 8015fe8:	46b3      	mov	fp, r6
 8015fea:	2510      	movs	r5, #16
 8015fec:	46b0      	mov	r8, r6
 8015fee:	e01d      	b.n	801602c <rcutils_repl_str+0x68>
 8015ff0:	f10b 0b01 	add.w	fp, fp, #1
 8015ff4:	455e      	cmp	r6, fp
 8015ff6:	d211      	bcs.n	801601c <rcutils_repl_str+0x58>
 8015ff8:	442e      	add	r6, r5
 8015ffa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015ffe:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016002:	00b1      	lsls	r1, r6, #2
 8016004:	4798      	blx	r3
 8016006:	2800      	cmp	r0, #0
 8016008:	f000 8088 	beq.w	801611c <rcutils_repl_str+0x158>
 801600c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016010:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8016014:	4680      	mov	r8, r0
 8016016:	bf28      	it	cs
 8016018:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801601c:	9a01      	ldr	r2, [sp, #4]
 801601e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016022:	1aa2      	subs	r2, r4, r2
 8016024:	f843 2c04 	str.w	r2, [r3, #-4]
 8016028:	9b02      	ldr	r3, [sp, #8]
 801602a:	18e7      	adds	r7, r4, r3
 801602c:	4651      	mov	r1, sl
 801602e:	4638      	mov	r0, r7
 8016030:	f003 fb3d 	bl	80196ae <strstr>
 8016034:	4604      	mov	r4, r0
 8016036:	4640      	mov	r0, r8
 8016038:	2c00      	cmp	r4, #0
 801603a:	d1d9      	bne.n	8015ff0 <rcutils_repl_str+0x2c>
 801603c:	46b8      	mov	r8, r7
 801603e:	4607      	mov	r7, r0
 8016040:	4640      	mov	r0, r8
 8016042:	f7ea f8f7 	bl	8000234 <strlen>
 8016046:	9b01      	ldr	r3, [sp, #4]
 8016048:	eba8 0303 	sub.w	r3, r8, r3
 801604c:	181c      	adds	r4, r3, r0
 801604e:	9404      	str	r4, [sp, #16]
 8016050:	f1bb 0f00 	cmp.w	fp, #0
 8016054:	d04a      	beq.n	80160ec <rcutils_repl_str+0x128>
 8016056:	ee18 0a10 	vmov	r0, s16
 801605a:	f7ea f8eb 	bl	8000234 <strlen>
 801605e:	9b02      	ldr	r3, [sp, #8]
 8016060:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016064:	1ac3      	subs	r3, r0, r3
 8016066:	fb0b 4303 	mla	r3, fp, r3, r4
 801606a:	461a      	mov	r2, r3
 801606c:	9305      	str	r3, [sp, #20]
 801606e:	4606      	mov	r6, r0
 8016070:	f8d9 3000 	ldr.w	r3, [r9]
 8016074:	1c50      	adds	r0, r2, #1
 8016076:	4798      	blx	r3
 8016078:	9003      	str	r0, [sp, #12]
 801607a:	2800      	cmp	r0, #0
 801607c:	d04f      	beq.n	801611e <rcutils_repl_str+0x15a>
 801607e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016082:	683a      	ldr	r2, [r7, #0]
 8016084:	4641      	mov	r1, r8
 8016086:	f003 fbb4 	bl	80197f2 <memcpy>
 801608a:	683d      	ldr	r5, [r7, #0]
 801608c:	9b03      	ldr	r3, [sp, #12]
 801608e:	9701      	str	r7, [sp, #4]
 8016090:	46ba      	mov	sl, r7
 8016092:	441d      	add	r5, r3
 8016094:	9f02      	ldr	r7, [sp, #8]
 8016096:	f8cd 9008 	str.w	r9, [sp, #8]
 801609a:	2401      	movs	r4, #1
 801609c:	46d1      	mov	r9, sl
 801609e:	ee18 aa10 	vmov	sl, s16
 80160a2:	e00a      	b.n	80160ba <rcutils_repl_str+0xf6>
 80160a4:	f8d9 5000 	ldr.w	r5, [r9]
 80160a8:	1aaa      	subs	r2, r5, r2
 80160aa:	1885      	adds	r5, r0, r2
 80160ac:	f003 fba1 	bl	80197f2 <memcpy>
 80160b0:	45a3      	cmp	fp, r4
 80160b2:	f104 0201 	add.w	r2, r4, #1
 80160b6:	d935      	bls.n	8016124 <rcutils_repl_str+0x160>
 80160b8:	4614      	mov	r4, r2
 80160ba:	4632      	mov	r2, r6
 80160bc:	4651      	mov	r1, sl
 80160be:	4628      	mov	r0, r5
 80160c0:	f003 fb97 	bl	80197f2 <memcpy>
 80160c4:	f859 2b04 	ldr.w	r2, [r9], #4
 80160c8:	45a3      	cmp	fp, r4
 80160ca:	443a      	add	r2, r7
 80160cc:	eb05 0006 	add.w	r0, r5, r6
 80160d0:	eb08 0102 	add.w	r1, r8, r2
 80160d4:	d1e6      	bne.n	80160a4 <rcutils_repl_str+0xe0>
 80160d6:	9b04      	ldr	r3, [sp, #16]
 80160d8:	1a9a      	subs	r2, r3, r2
 80160da:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80160de:	f003 fb88 	bl	80197f2 <memcpy>
 80160e2:	9a03      	ldr	r2, [sp, #12]
 80160e4:	9905      	ldr	r1, [sp, #20]
 80160e6:	2300      	movs	r3, #0
 80160e8:	5453      	strb	r3, [r2, r1]
 80160ea:	e00b      	b.n	8016104 <rcutils_repl_str+0x140>
 80160ec:	4620      	mov	r0, r4
 80160ee:	f8d9 3000 	ldr.w	r3, [r9]
 80160f2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80160f6:	3001      	adds	r0, #1
 80160f8:	4798      	blx	r3
 80160fa:	9003      	str	r0, [sp, #12]
 80160fc:	b110      	cbz	r0, 8016104 <rcutils_repl_str+0x140>
 80160fe:	9901      	ldr	r1, [sp, #4]
 8016100:	f003 fb6f 	bl	80197e2 <strcpy>
 8016104:	4638      	mov	r0, r7
 8016106:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801610a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801610e:	4798      	blx	r3
 8016110:	9803      	ldr	r0, [sp, #12]
 8016112:	b007      	add	sp, #28
 8016114:	ecbd 8b02 	vpop	{d8}
 8016118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801611c:	4647      	mov	r7, r8
 801611e:	2300      	movs	r3, #0
 8016120:	9303      	str	r3, [sp, #12]
 8016122:	e7ef      	b.n	8016104 <rcutils_repl_str+0x140>
 8016124:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016128:	e7db      	b.n	80160e2 <rcutils_repl_str+0x11e>
 801612a:	bf00      	nop

0801612c <rcutils_snprintf>:
 801612c:	b40c      	push	{r2, r3}
 801612e:	b530      	push	{r4, r5, lr}
 8016130:	b083      	sub	sp, #12
 8016132:	ab06      	add	r3, sp, #24
 8016134:	f853 2b04 	ldr.w	r2, [r3], #4
 8016138:	9301      	str	r3, [sp, #4]
 801613a:	b152      	cbz	r2, 8016152 <rcutils_snprintf+0x26>
 801613c:	b138      	cbz	r0, 801614e <rcutils_snprintf+0x22>
 801613e:	b141      	cbz	r1, 8016152 <rcutils_snprintf+0x26>
 8016140:	f003 f9c2 	bl	80194c8 <vsniprintf>
 8016144:	b003      	add	sp, #12
 8016146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801614a:	b002      	add	sp, #8
 801614c:	4770      	bx	lr
 801614e:	2900      	cmp	r1, #0
 8016150:	d0f6      	beq.n	8016140 <rcutils_snprintf+0x14>
 8016152:	f003 fb19 	bl	8019788 <__errno>
 8016156:	2316      	movs	r3, #22
 8016158:	6003      	str	r3, [r0, #0]
 801615a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801615e:	e7f1      	b.n	8016144 <rcutils_snprintf+0x18>

08016160 <rcutils_vsnprintf>:
 8016160:	b570      	push	{r4, r5, r6, lr}
 8016162:	b13a      	cbz	r2, 8016174 <rcutils_vsnprintf+0x14>
 8016164:	b120      	cbz	r0, 8016170 <rcutils_vsnprintf+0x10>
 8016166:	b129      	cbz	r1, 8016174 <rcutils_vsnprintf+0x14>
 8016168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801616c:	f003 b9ac 	b.w	80194c8 <vsniprintf>
 8016170:	2900      	cmp	r1, #0
 8016172:	d0f9      	beq.n	8016168 <rcutils_vsnprintf+0x8>
 8016174:	f003 fb08 	bl	8019788 <__errno>
 8016178:	2316      	movs	r3, #22
 801617a:	6003      	str	r3, [r0, #0]
 801617c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016180:	bd70      	pop	{r4, r5, r6, pc}
 8016182:	bf00      	nop

08016184 <rcutils_strdup>:
 8016184:	b084      	sub	sp, #16
 8016186:	b570      	push	{r4, r5, r6, lr}
 8016188:	b082      	sub	sp, #8
 801618a:	ac07      	add	r4, sp, #28
 801618c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016190:	4605      	mov	r5, r0
 8016192:	b1b0      	cbz	r0, 80161c2 <rcutils_strdup+0x3e>
 8016194:	f7ea f84e 	bl	8000234 <strlen>
 8016198:	1c42      	adds	r2, r0, #1
 801619a:	9b07      	ldr	r3, [sp, #28]
 801619c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801619e:	9201      	str	r2, [sp, #4]
 80161a0:	4606      	mov	r6, r0
 80161a2:	4610      	mov	r0, r2
 80161a4:	4798      	blx	r3
 80161a6:	4604      	mov	r4, r0
 80161a8:	b128      	cbz	r0, 80161b6 <rcutils_strdup+0x32>
 80161aa:	9a01      	ldr	r2, [sp, #4]
 80161ac:	4629      	mov	r1, r5
 80161ae:	f003 fb20 	bl	80197f2 <memcpy>
 80161b2:	2300      	movs	r3, #0
 80161b4:	55a3      	strb	r3, [r4, r6]
 80161b6:	4620      	mov	r0, r4
 80161b8:	b002      	add	sp, #8
 80161ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161be:	b004      	add	sp, #16
 80161c0:	4770      	bx	lr
 80161c2:	4604      	mov	r4, r0
 80161c4:	e7f7      	b.n	80161b6 <rcutils_strdup+0x32>
 80161c6:	bf00      	nop

080161c8 <rcutils_strndup>:
 80161c8:	b082      	sub	sp, #8
 80161ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161cc:	ac06      	add	r4, sp, #24
 80161ce:	e884 000c 	stmia.w	r4, {r2, r3}
 80161d2:	4605      	mov	r5, r0
 80161d4:	b188      	cbz	r0, 80161fa <rcutils_strndup+0x32>
 80161d6:	1c4f      	adds	r7, r1, #1
 80161d8:	460e      	mov	r6, r1
 80161da:	4638      	mov	r0, r7
 80161dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80161de:	4790      	blx	r2
 80161e0:	4604      	mov	r4, r0
 80161e2:	b128      	cbz	r0, 80161f0 <rcutils_strndup+0x28>
 80161e4:	463a      	mov	r2, r7
 80161e6:	4629      	mov	r1, r5
 80161e8:	f003 fb03 	bl	80197f2 <memcpy>
 80161ec:	2300      	movs	r3, #0
 80161ee:	55a3      	strb	r3, [r4, r6]
 80161f0:	4620      	mov	r0, r4
 80161f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80161f6:	b002      	add	sp, #8
 80161f8:	4770      	bx	lr
 80161fa:	4604      	mov	r4, r0
 80161fc:	e7f8      	b.n	80161f0 <rcutils_strndup+0x28>
 80161fe:	bf00      	nop

08016200 <rcutils_get_zero_initialized_string_map>:
 8016200:	4b01      	ldr	r3, [pc, #4]	@ (8016208 <rcutils_get_zero_initialized_string_map+0x8>)
 8016202:	2000      	movs	r0, #0
 8016204:	6018      	str	r0, [r3, #0]
 8016206:	4770      	bx	lr
 8016208:	2000af34 	.word	0x2000af34

0801620c <rcutils_string_map_reserve>:
 801620c:	2800      	cmp	r0, #0
 801620e:	d05f      	beq.n	80162d0 <rcutils_string_map_reserve+0xc4>
 8016210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016214:	460c      	mov	r4, r1
 8016216:	6801      	ldr	r1, [r0, #0]
 8016218:	b082      	sub	sp, #8
 801621a:	4605      	mov	r5, r0
 801621c:	b129      	cbz	r1, 801622a <rcutils_string_map_reserve+0x1e>
 801621e:	68cb      	ldr	r3, [r1, #12]
 8016220:	42a3      	cmp	r3, r4
 8016222:	d906      	bls.n	8016232 <rcutils_string_map_reserve+0x26>
 8016224:	461c      	mov	r4, r3
 8016226:	2900      	cmp	r1, #0
 8016228:	d1f9      	bne.n	801621e <rcutils_string_map_reserve+0x12>
 801622a:	201f      	movs	r0, #31
 801622c:	b002      	add	sp, #8
 801622e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016232:	688b      	ldr	r3, [r1, #8]
 8016234:	42a3      	cmp	r3, r4
 8016236:	d047      	beq.n	80162c8 <rcutils_string_map_reserve+0xbc>
 8016238:	6a0e      	ldr	r6, [r1, #32]
 801623a:	2c00      	cmp	r4, #0
 801623c:	d034      	beq.n	80162a8 <rcutils_string_map_reserve+0x9c>
 801623e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8016242:	d243      	bcs.n	80162cc <rcutils_string_map_reserve+0xc0>
 8016244:	00a7      	lsls	r7, r4, #2
 8016246:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801624a:	6808      	ldr	r0, [r1, #0]
 801624c:	4632      	mov	r2, r6
 801624e:	4639      	mov	r1, r7
 8016250:	47c0      	blx	r8
 8016252:	2800      	cmp	r0, #0
 8016254:	d03a      	beq.n	80162cc <rcutils_string_map_reserve+0xc0>
 8016256:	682b      	ldr	r3, [r5, #0]
 8016258:	4632      	mov	r2, r6
 801625a:	6018      	str	r0, [r3, #0]
 801625c:	4639      	mov	r1, r7
 801625e:	6858      	ldr	r0, [r3, #4]
 8016260:	47c0      	blx	r8
 8016262:	2800      	cmp	r0, #0
 8016264:	d032      	beq.n	80162cc <rcutils_string_map_reserve+0xc0>
 8016266:	682d      	ldr	r5, [r5, #0]
 8016268:	68ab      	ldr	r3, [r5, #8]
 801626a:	6068      	str	r0, [r5, #4]
 801626c:	42a3      	cmp	r3, r4
 801626e:	d226      	bcs.n	80162be <rcutils_string_map_reserve+0xb2>
 8016270:	682a      	ldr	r2, [r5, #0]
 8016272:	eb00 0c07 	add.w	ip, r0, r7
 8016276:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801627a:	45e6      	cmp	lr, ip
 801627c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016280:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8016284:	d203      	bcs.n	801628e <rcutils_string_map_reserve+0x82>
 8016286:	eb02 0c07 	add.w	ip, r2, r7
 801628a:	4566      	cmp	r6, ip
 801628c:	d322      	bcc.n	80162d4 <rcutils_string_map_reserve+0xc8>
 801628e:	1ae3      	subs	r3, r4, r3
 8016290:	009a      	lsls	r2, r3, #2
 8016292:	4670      	mov	r0, lr
 8016294:	2100      	movs	r1, #0
 8016296:	9201      	str	r2, [sp, #4]
 8016298:	f003 f9e2 	bl	8019660 <memset>
 801629c:	9a01      	ldr	r2, [sp, #4]
 801629e:	2100      	movs	r1, #0
 80162a0:	4630      	mov	r0, r6
 80162a2:	f003 f9dd 	bl	8019660 <memset>
 80162a6:	e00a      	b.n	80162be <rcutils_string_map_reserve+0xb2>
 80162a8:	694f      	ldr	r7, [r1, #20]
 80162aa:	6808      	ldr	r0, [r1, #0]
 80162ac:	4631      	mov	r1, r6
 80162ae:	47b8      	blx	r7
 80162b0:	682b      	ldr	r3, [r5, #0]
 80162b2:	4631      	mov	r1, r6
 80162b4:	6858      	ldr	r0, [r3, #4]
 80162b6:	601c      	str	r4, [r3, #0]
 80162b8:	47b8      	blx	r7
 80162ba:	682d      	ldr	r5, [r5, #0]
 80162bc:	606c      	str	r4, [r5, #4]
 80162be:	2000      	movs	r0, #0
 80162c0:	60ac      	str	r4, [r5, #8]
 80162c2:	b002      	add	sp, #8
 80162c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162c8:	2000      	movs	r0, #0
 80162ca:	e7af      	b.n	801622c <rcutils_string_map_reserve+0x20>
 80162cc:	200a      	movs	r0, #10
 80162ce:	e7ad      	b.n	801622c <rcutils_string_map_reserve+0x20>
 80162d0:	200b      	movs	r0, #11
 80162d2:	4770      	bx	lr
 80162d4:	1f0b      	subs	r3, r1, #4
 80162d6:	4418      	add	r0, r3
 80162d8:	4413      	add	r3, r2
 80162da:	3a04      	subs	r2, #4
 80162dc:	4417      	add	r7, r2
 80162de:	2200      	movs	r2, #0
 80162e0:	f843 2f04 	str.w	r2, [r3, #4]!
 80162e4:	42bb      	cmp	r3, r7
 80162e6:	f840 2f04 	str.w	r2, [r0, #4]!
 80162ea:	d1f9      	bne.n	80162e0 <rcutils_string_map_reserve+0xd4>
 80162ec:	e7e7      	b.n	80162be <rcutils_string_map_reserve+0xb2>
 80162ee:	bf00      	nop

080162f0 <rcutils_string_map_init>:
 80162f0:	b082      	sub	sp, #8
 80162f2:	b570      	push	{r4, r5, r6, lr}
 80162f4:	ac04      	add	r4, sp, #16
 80162f6:	e884 000c 	stmia.w	r4, {r2, r3}
 80162fa:	b380      	cbz	r0, 801635e <rcutils_string_map_init+0x6e>
 80162fc:	6806      	ldr	r6, [r0, #0]
 80162fe:	4604      	mov	r4, r0
 8016300:	b12e      	cbz	r6, 801630e <rcutils_string_map_init+0x1e>
 8016302:	251e      	movs	r5, #30
 8016304:	4628      	mov	r0, r5
 8016306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801630a:	b002      	add	sp, #8
 801630c:	4770      	bx	lr
 801630e:	a804      	add	r0, sp, #16
 8016310:	460d      	mov	r5, r1
 8016312:	f7f6 fedf 	bl	800d0d4 <rcutils_allocator_is_valid>
 8016316:	b310      	cbz	r0, 801635e <rcutils_string_map_init+0x6e>
 8016318:	9b04      	ldr	r3, [sp, #16]
 801631a:	9908      	ldr	r1, [sp, #32]
 801631c:	2024      	movs	r0, #36	@ 0x24
 801631e:	4798      	blx	r3
 8016320:	6020      	str	r0, [r4, #0]
 8016322:	b310      	cbz	r0, 801636a <rcutils_string_map_init+0x7a>
 8016324:	f10d 0e10 	add.w	lr, sp, #16
 8016328:	e9c0 6600 	strd	r6, r6, [r0]
 801632c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016330:	f100 0c10 	add.w	ip, r0, #16
 8016334:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016338:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801633c:	f8de 3000 	ldr.w	r3, [lr]
 8016340:	f8cc 3000 	str.w	r3, [ip]
 8016344:	4629      	mov	r1, r5
 8016346:	4620      	mov	r0, r4
 8016348:	f7ff ff60 	bl	801620c <rcutils_string_map_reserve>
 801634c:	4605      	mov	r5, r0
 801634e:	2800      	cmp	r0, #0
 8016350:	d0d8      	beq.n	8016304 <rcutils_string_map_init+0x14>
 8016352:	9b05      	ldr	r3, [sp, #20]
 8016354:	9908      	ldr	r1, [sp, #32]
 8016356:	6820      	ldr	r0, [r4, #0]
 8016358:	4798      	blx	r3
 801635a:	6026      	str	r6, [r4, #0]
 801635c:	e7d2      	b.n	8016304 <rcutils_string_map_init+0x14>
 801635e:	250b      	movs	r5, #11
 8016360:	4628      	mov	r0, r5
 8016362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016366:	b002      	add	sp, #8
 8016368:	4770      	bx	lr
 801636a:	250a      	movs	r5, #10
 801636c:	e7ca      	b.n	8016304 <rcutils_string_map_init+0x14>
 801636e:	bf00      	nop

08016370 <rcutils_string_map_fini>:
 8016370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016374:	b082      	sub	sp, #8
 8016376:	2800      	cmp	r0, #0
 8016378:	d03a      	beq.n	80163f0 <rcutils_string_map_fini+0x80>
 801637a:	6804      	ldr	r4, [r0, #0]
 801637c:	4606      	mov	r6, r0
 801637e:	2c00      	cmp	r4, #0
 8016380:	d032      	beq.n	80163e8 <rcutils_string_map_fini+0x78>
 8016382:	68a3      	ldr	r3, [r4, #8]
 8016384:	b32b      	cbz	r3, 80163d2 <rcutils_string_map_fini+0x62>
 8016386:	2500      	movs	r5, #0
 8016388:	6822      	ldr	r2, [r4, #0]
 801638a:	462f      	mov	r7, r5
 801638c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016390:	b1e0      	cbz	r0, 80163cc <rcutils_string_map_fini+0x5c>
 8016392:	6a21      	ldr	r1, [r4, #32]
 8016394:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016398:	9101      	str	r1, [sp, #4]
 801639a:	47c0      	blx	r8
 801639c:	e9d4 2300 	ldrd	r2, r3, [r4]
 80163a0:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80163a4:	9901      	ldr	r1, [sp, #4]
 80163a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80163aa:	47c0      	blx	r8
 80163ac:	68e3      	ldr	r3, [r4, #12]
 80163ae:	6862      	ldr	r2, [r4, #4]
 80163b0:	3b01      	subs	r3, #1
 80163b2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80163b6:	60e3      	str	r3, [r4, #12]
 80163b8:	6834      	ldr	r4, [r6, #0]
 80163ba:	68a3      	ldr	r3, [r4, #8]
 80163bc:	3501      	adds	r5, #1
 80163be:	429d      	cmp	r5, r3
 80163c0:	d207      	bcs.n	80163d2 <rcutils_string_map_fini+0x62>
 80163c2:	6822      	ldr	r2, [r4, #0]
 80163c4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80163c8:	2800      	cmp	r0, #0
 80163ca:	d1e2      	bne.n	8016392 <rcutils_string_map_fini+0x22>
 80163cc:	3501      	adds	r5, #1
 80163ce:	429d      	cmp	r5, r3
 80163d0:	d3dc      	bcc.n	801638c <rcutils_string_map_fini+0x1c>
 80163d2:	2100      	movs	r1, #0
 80163d4:	4630      	mov	r0, r6
 80163d6:	f7ff ff19 	bl	801620c <rcutils_string_map_reserve>
 80163da:	4604      	mov	r4, r0
 80163dc:	b920      	cbnz	r0, 80163e8 <rcutils_string_map_fini+0x78>
 80163de:	6830      	ldr	r0, [r6, #0]
 80163e0:	6943      	ldr	r3, [r0, #20]
 80163e2:	6a01      	ldr	r1, [r0, #32]
 80163e4:	4798      	blx	r3
 80163e6:	6034      	str	r4, [r6, #0]
 80163e8:	4620      	mov	r0, r4
 80163ea:	b002      	add	sp, #8
 80163ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163f0:	240b      	movs	r4, #11
 80163f2:	4620      	mov	r0, r4
 80163f4:	b002      	add	sp, #8
 80163f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163fa:	bf00      	nop

080163fc <rcutils_string_map_getn>:
 80163fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016400:	b300      	cbz	r0, 8016444 <rcutils_string_map_getn+0x48>
 8016402:	6807      	ldr	r7, [r0, #0]
 8016404:	b1ff      	cbz	r7, 8016446 <rcutils_string_map_getn+0x4a>
 8016406:	4688      	mov	r8, r1
 8016408:	b1e1      	cbz	r1, 8016444 <rcutils_string_map_getn+0x48>
 801640a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801640e:	683e      	ldr	r6, [r7, #0]
 8016410:	f1ba 0f00 	cmp.w	sl, #0
 8016414:	d016      	beq.n	8016444 <rcutils_string_map_getn+0x48>
 8016416:	4691      	mov	r9, r2
 8016418:	3e04      	subs	r6, #4
 801641a:	2400      	movs	r4, #0
 801641c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016420:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016424:	4628      	mov	r0, r5
 8016426:	3401      	adds	r4, #1
 8016428:	b155      	cbz	r5, 8016440 <rcutils_string_map_getn+0x44>
 801642a:	f7e9 ff03 	bl	8000234 <strlen>
 801642e:	4548      	cmp	r0, r9
 8016430:	4602      	mov	r2, r0
 8016432:	4629      	mov	r1, r5
 8016434:	bf38      	it	cc
 8016436:	464a      	movcc	r2, r9
 8016438:	4640      	mov	r0, r8
 801643a:	f003 f926 	bl	801968a <strncmp>
 801643e:	b128      	cbz	r0, 801644c <rcutils_string_map_getn+0x50>
 8016440:	45a2      	cmp	sl, r4
 8016442:	d1eb      	bne.n	801641c <rcutils_string_map_getn+0x20>
 8016444:	2700      	movs	r7, #0
 8016446:	4638      	mov	r0, r7
 8016448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f853 700b 	ldr.w	r7, [r3, fp]
 8016452:	4638      	mov	r0, r7
 8016454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016458 <rmw_get_zero_initialized_context>:
 8016458:	b510      	push	{r4, lr}
 801645a:	4604      	mov	r4, r0
 801645c:	3010      	adds	r0, #16
 801645e:	f7f6 fecb 	bl	800d1f8 <rmw_get_zero_initialized_init_options>
 8016462:	2300      	movs	r3, #0
 8016464:	2000      	movs	r0, #0
 8016466:	2100      	movs	r1, #0
 8016468:	e9c4 0100 	strd	r0, r1, [r4]
 801646c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8016470:	60a3      	str	r3, [r4, #8]
 8016472:	4620      	mov	r0, r4
 8016474:	bd10      	pop	{r4, pc}
 8016476:	bf00      	nop

08016478 <rmw_time_equal>:
 8016478:	b4f0      	push	{r4, r5, r6, r7}
 801647a:	b084      	sub	sp, #16
 801647c:	ac04      	add	r4, sp, #16
 801647e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016482:	4603      	mov	r3, r0
 8016484:	4924      	ldr	r1, [pc, #144]	@ (8016518 <rmw_time_equal+0xa0>)
 8016486:	9e03      	ldr	r6, [sp, #12]
 8016488:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801648c:	2202      	movs	r2, #2
 801648e:	4299      	cmp	r1, r3
 8016490:	41aa      	sbcs	r2, r5
 8016492:	d330      	bcc.n	80164f6 <rmw_time_equal+0x7e>
 8016494:	4c21      	ldr	r4, [pc, #132]	@ (801651c <rmw_time_equal+0xa4>)
 8016496:	fba3 3204 	umull	r3, r2, r3, r4
 801649a:	fb04 2205 	mla	r2, r4, r5, r2
 801649e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80164a2:	43dd      	mvns	r5, r3
 80164a4:	1a8c      	subs	r4, r1, r2
 80164a6:	4285      	cmp	r5, r0
 80164a8:	41b4      	sbcs	r4, r6
 80164aa:	d332      	bcc.n	8016512 <rmw_time_equal+0x9a>
 80164ac:	eb10 0c03 	adds.w	ip, r0, r3
 80164b0:	eb42 0106 	adc.w	r1, r2, r6
 80164b4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80164b8:	4817      	ldr	r0, [pc, #92]	@ (8016518 <rmw_time_equal+0xa0>)
 80164ba:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80164bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80164be:	2202      	movs	r2, #2
 80164c0:	4298      	cmp	r0, r3
 80164c2:	41b2      	sbcs	r2, r6
 80164c4:	d31c      	bcc.n	8016500 <rmw_time_equal+0x88>
 80164c6:	4c15      	ldr	r4, [pc, #84]	@ (801651c <rmw_time_equal+0xa4>)
 80164c8:	fba3 3204 	umull	r3, r2, r3, r4
 80164cc:	fb04 2206 	mla	r2, r4, r6, r2
 80164d0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80164d4:	43de      	mvns	r6, r3
 80164d6:	1a84      	subs	r4, r0, r2
 80164d8:	42ae      	cmp	r6, r5
 80164da:	41bc      	sbcs	r4, r7
 80164dc:	d315      	bcc.n	801650a <rmw_time_equal+0x92>
 80164de:	195b      	adds	r3, r3, r5
 80164e0:	eb42 0207 	adc.w	r2, r2, r7
 80164e4:	428a      	cmp	r2, r1
 80164e6:	bf08      	it	eq
 80164e8:	4563      	cmpeq	r3, ip
 80164ea:	bf0c      	ite	eq
 80164ec:	2001      	moveq	r0, #1
 80164ee:	2000      	movne	r0, #0
 80164f0:	b004      	add	sp, #16
 80164f2:	bcf0      	pop	{r4, r5, r6, r7}
 80164f4:	4770      	bx	lr
 80164f6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80164fa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80164fe:	e7d9      	b.n	80164b4 <rmw_time_equal+0x3c>
 8016500:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016504:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016508:	e7ec      	b.n	80164e4 <rmw_time_equal+0x6c>
 801650a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801650e:	4602      	mov	r2, r0
 8016510:	e7e8      	b.n	80164e4 <rmw_time_equal+0x6c>
 8016512:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016516:	e7cd      	b.n	80164b4 <rmw_time_equal+0x3c>
 8016518:	25c17d04 	.word	0x25c17d04
 801651c:	3b9aca00 	.word	0x3b9aca00

08016520 <rmw_time_total_nsec>:
 8016520:	b470      	push	{r4, r5, r6}
 8016522:	b085      	sub	sp, #20
 8016524:	ac04      	add	r4, sp, #16
 8016526:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801652a:	4603      	mov	r3, r0
 801652c:	4912      	ldr	r1, [pc, #72]	@ (8016578 <rmw_time_total_nsec+0x58>)
 801652e:	9e03      	ldr	r6, [sp, #12]
 8016530:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016534:	2202      	movs	r2, #2
 8016536:	4299      	cmp	r1, r3
 8016538:	41aa      	sbcs	r2, r5
 801653a:	d311      	bcc.n	8016560 <rmw_time_total_nsec+0x40>
 801653c:	4c0f      	ldr	r4, [pc, #60]	@ (801657c <rmw_time_total_nsec+0x5c>)
 801653e:	fba3 3204 	umull	r3, r2, r3, r4
 8016542:	fb04 2205 	mla	r2, r4, r5, r2
 8016546:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801654a:	43dd      	mvns	r5, r3
 801654c:	1a8c      	subs	r4, r1, r2
 801654e:	4285      	cmp	r5, r0
 8016550:	41b4      	sbcs	r4, r6
 8016552:	d30c      	bcc.n	801656e <rmw_time_total_nsec+0x4e>
 8016554:	1818      	adds	r0, r3, r0
 8016556:	eb42 0106 	adc.w	r1, r2, r6
 801655a:	b005      	add	sp, #20
 801655c:	bc70      	pop	{r4, r5, r6}
 801655e:	4770      	bx	lr
 8016560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016564:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016568:	b005      	add	sp, #20
 801656a:	bc70      	pop	{r4, r5, r6}
 801656c:	4770      	bx	lr
 801656e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016572:	b005      	add	sp, #20
 8016574:	bc70      	pop	{r4, r5, r6}
 8016576:	4770      	bx	lr
 8016578:	25c17d04 	.word	0x25c17d04
 801657c:	3b9aca00 	.word	0x3b9aca00

08016580 <rmw_get_zero_initialized_message_info>:
 8016580:	b510      	push	{r4, lr}
 8016582:	2240      	movs	r2, #64	@ 0x40
 8016584:	4604      	mov	r4, r0
 8016586:	2100      	movs	r1, #0
 8016588:	f003 f86a 	bl	8019660 <memset>
 801658c:	4620      	mov	r0, r4
 801658e:	bd10      	pop	{r4, pc}

08016590 <rmw_validate_full_topic_name>:
 8016590:	2800      	cmp	r0, #0
 8016592:	d057      	beq.n	8016644 <rmw_validate_full_topic_name+0xb4>
 8016594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016598:	460d      	mov	r5, r1
 801659a:	2900      	cmp	r1, #0
 801659c:	d054      	beq.n	8016648 <rmw_validate_full_topic_name+0xb8>
 801659e:	4616      	mov	r6, r2
 80165a0:	4604      	mov	r4, r0
 80165a2:	f7e9 fe47 	bl	8000234 <strlen>
 80165a6:	b148      	cbz	r0, 80165bc <rmw_validate_full_topic_name+0x2c>
 80165a8:	7823      	ldrb	r3, [r4, #0]
 80165aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80165ac:	d00d      	beq.n	80165ca <rmw_validate_full_topic_name+0x3a>
 80165ae:	2302      	movs	r3, #2
 80165b0:	602b      	str	r3, [r5, #0]
 80165b2:	b13e      	cbz	r6, 80165c4 <rmw_validate_full_topic_name+0x34>
 80165b4:	2000      	movs	r0, #0
 80165b6:	6030      	str	r0, [r6, #0]
 80165b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165bc:	2301      	movs	r3, #1
 80165be:	602b      	str	r3, [r5, #0]
 80165c0:	2e00      	cmp	r6, #0
 80165c2:	d1f7      	bne.n	80165b4 <rmw_validate_full_topic_name+0x24>
 80165c4:	2000      	movs	r0, #0
 80165c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165ca:	1e43      	subs	r3, r0, #1
 80165cc:	5ce2      	ldrb	r2, [r4, r3]
 80165ce:	2a2f      	cmp	r2, #47	@ 0x2f
 80165d0:	d03c      	beq.n	801664c <rmw_validate_full_topic_name+0xbc>
 80165d2:	1e63      	subs	r3, r4, #1
 80165d4:	eb03 0800 	add.w	r8, r3, r0
 80165d8:	f1c4 0e01 	rsb	lr, r4, #1
 80165dc:	eb0e 0703 	add.w	r7, lr, r3
 80165e0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80165e4:	f021 0220 	bic.w	r2, r1, #32
 80165e8:	3a41      	subs	r2, #65	@ 0x41
 80165ea:	2a19      	cmp	r2, #25
 80165ec:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80165f0:	d90b      	bls.n	801660a <rmw_validate_full_topic_name+0x7a>
 80165f2:	295f      	cmp	r1, #95	@ 0x5f
 80165f4:	d009      	beq.n	801660a <rmw_validate_full_topic_name+0x7a>
 80165f6:	f1bc 0f0a 	cmp.w	ip, #10
 80165fa:	d906      	bls.n	801660a <rmw_validate_full_topic_name+0x7a>
 80165fc:	2304      	movs	r3, #4
 80165fe:	602b      	str	r3, [r5, #0]
 8016600:	2e00      	cmp	r6, #0
 8016602:	d0df      	beq.n	80165c4 <rmw_validate_full_topic_name+0x34>
 8016604:	6037      	str	r7, [r6, #0]
 8016606:	2000      	movs	r0, #0
 8016608:	e7d6      	b.n	80165b8 <rmw_validate_full_topic_name+0x28>
 801660a:	4543      	cmp	r3, r8
 801660c:	d1e6      	bne.n	80165dc <rmw_validate_full_topic_name+0x4c>
 801660e:	4f1a      	ldr	r7, [pc, #104]	@ (8016678 <rmw_validate_full_topic_name+0xe8>)
 8016610:	2301      	movs	r3, #1
 8016612:	e004      	b.n	801661e <rmw_validate_full_topic_name+0x8e>
 8016614:	4298      	cmp	r0, r3
 8016616:	f104 0401 	add.w	r4, r4, #1
 801661a:	d91c      	bls.n	8016656 <rmw_validate_full_topic_name+0xc6>
 801661c:	4613      	mov	r3, r2
 801661e:	4298      	cmp	r0, r3
 8016620:	f103 0201 	add.w	r2, r3, #1
 8016624:	d0f6      	beq.n	8016614 <rmw_validate_full_topic_name+0x84>
 8016626:	7821      	ldrb	r1, [r4, #0]
 8016628:	292f      	cmp	r1, #47	@ 0x2f
 801662a:	d1f3      	bne.n	8016614 <rmw_validate_full_topic_name+0x84>
 801662c:	7861      	ldrb	r1, [r4, #1]
 801662e:	292f      	cmp	r1, #47	@ 0x2f
 8016630:	d01c      	beq.n	801666c <rmw_validate_full_topic_name+0xdc>
 8016632:	5dc9      	ldrb	r1, [r1, r7]
 8016634:	0749      	lsls	r1, r1, #29
 8016636:	d5ed      	bpl.n	8016614 <rmw_validate_full_topic_name+0x84>
 8016638:	2206      	movs	r2, #6
 801663a:	602a      	str	r2, [r5, #0]
 801663c:	2e00      	cmp	r6, #0
 801663e:	d0c1      	beq.n	80165c4 <rmw_validate_full_topic_name+0x34>
 8016640:	6033      	str	r3, [r6, #0]
 8016642:	e7bf      	b.n	80165c4 <rmw_validate_full_topic_name+0x34>
 8016644:	200b      	movs	r0, #11
 8016646:	4770      	bx	lr
 8016648:	200b      	movs	r0, #11
 801664a:	e7b5      	b.n	80165b8 <rmw_validate_full_topic_name+0x28>
 801664c:	2203      	movs	r2, #3
 801664e:	602a      	str	r2, [r5, #0]
 8016650:	2e00      	cmp	r6, #0
 8016652:	d1f5      	bne.n	8016640 <rmw_validate_full_topic_name+0xb0>
 8016654:	e7b6      	b.n	80165c4 <rmw_validate_full_topic_name+0x34>
 8016656:	28f7      	cmp	r0, #247	@ 0xf7
 8016658:	d802      	bhi.n	8016660 <rmw_validate_full_topic_name+0xd0>
 801665a:	2000      	movs	r0, #0
 801665c:	6028      	str	r0, [r5, #0]
 801665e:	e7ab      	b.n	80165b8 <rmw_validate_full_topic_name+0x28>
 8016660:	2307      	movs	r3, #7
 8016662:	602b      	str	r3, [r5, #0]
 8016664:	2e00      	cmp	r6, #0
 8016666:	d0ad      	beq.n	80165c4 <rmw_validate_full_topic_name+0x34>
 8016668:	23f6      	movs	r3, #246	@ 0xf6
 801666a:	e7e9      	b.n	8016640 <rmw_validate_full_topic_name+0xb0>
 801666c:	2205      	movs	r2, #5
 801666e:	602a      	str	r2, [r5, #0]
 8016670:	2e00      	cmp	r6, #0
 8016672:	d1e5      	bne.n	8016640 <rmw_validate_full_topic_name+0xb0>
 8016674:	e7a6      	b.n	80165c4 <rmw_validate_full_topic_name+0x34>
 8016676:	bf00      	nop
 8016678:	0801b1cf 	.word	0x0801b1cf

0801667c <rmw_validate_namespace_with_size>:
 801667c:	b340      	cbz	r0, 80166d0 <rmw_validate_namespace_with_size+0x54>
 801667e:	b570      	push	{r4, r5, r6, lr}
 8016680:	4614      	mov	r4, r2
 8016682:	b0c2      	sub	sp, #264	@ 0x108
 8016684:	b332      	cbz	r2, 80166d4 <rmw_validate_namespace_with_size+0x58>
 8016686:	2901      	cmp	r1, #1
 8016688:	460d      	mov	r5, r1
 801668a:	461e      	mov	r6, r3
 801668c:	d102      	bne.n	8016694 <rmw_validate_namespace_with_size+0x18>
 801668e:	7803      	ldrb	r3, [r0, #0]
 8016690:	2b2f      	cmp	r3, #47	@ 0x2f
 8016692:	d012      	beq.n	80166ba <rmw_validate_namespace_with_size+0x3e>
 8016694:	aa01      	add	r2, sp, #4
 8016696:	4669      	mov	r1, sp
 8016698:	f7ff ff7a 	bl	8016590 <rmw_validate_full_topic_name>
 801669c:	b978      	cbnz	r0, 80166be <rmw_validate_namespace_with_size+0x42>
 801669e:	9b00      	ldr	r3, [sp, #0]
 80166a0:	b14b      	cbz	r3, 80166b6 <rmw_validate_namespace_with_size+0x3a>
 80166a2:	2b07      	cmp	r3, #7
 80166a4:	d007      	beq.n	80166b6 <rmw_validate_namespace_with_size+0x3a>
 80166a6:	1e5a      	subs	r2, r3, #1
 80166a8:	2a05      	cmp	r2, #5
 80166aa:	d82b      	bhi.n	8016704 <rmw_validate_namespace_with_size+0x88>
 80166ac:	e8df f002 	tbb	[pc, r2]
 80166b0:	1e212427 	.word	0x1e212427
 80166b4:	141b      	.short	0x141b
 80166b6:	2df5      	cmp	r5, #245	@ 0xf5
 80166b8:	d803      	bhi.n	80166c2 <rmw_validate_namespace_with_size+0x46>
 80166ba:	2000      	movs	r0, #0
 80166bc:	6020      	str	r0, [r4, #0]
 80166be:	b042      	add	sp, #264	@ 0x108
 80166c0:	bd70      	pop	{r4, r5, r6, pc}
 80166c2:	2307      	movs	r3, #7
 80166c4:	6023      	str	r3, [r4, #0]
 80166c6:	2e00      	cmp	r6, #0
 80166c8:	d0f9      	beq.n	80166be <rmw_validate_namespace_with_size+0x42>
 80166ca:	23f4      	movs	r3, #244	@ 0xf4
 80166cc:	6033      	str	r3, [r6, #0]
 80166ce:	e7f6      	b.n	80166be <rmw_validate_namespace_with_size+0x42>
 80166d0:	200b      	movs	r0, #11
 80166d2:	4770      	bx	lr
 80166d4:	200b      	movs	r0, #11
 80166d6:	e7f2      	b.n	80166be <rmw_validate_namespace_with_size+0x42>
 80166d8:	2306      	movs	r3, #6
 80166da:	6023      	str	r3, [r4, #0]
 80166dc:	2e00      	cmp	r6, #0
 80166de:	d0ee      	beq.n	80166be <rmw_validate_namespace_with_size+0x42>
 80166e0:	9b01      	ldr	r3, [sp, #4]
 80166e2:	6033      	str	r3, [r6, #0]
 80166e4:	e7eb      	b.n	80166be <rmw_validate_namespace_with_size+0x42>
 80166e6:	2305      	movs	r3, #5
 80166e8:	6023      	str	r3, [r4, #0]
 80166ea:	e7f7      	b.n	80166dc <rmw_validate_namespace_with_size+0x60>
 80166ec:	2304      	movs	r3, #4
 80166ee:	6023      	str	r3, [r4, #0]
 80166f0:	e7f4      	b.n	80166dc <rmw_validate_namespace_with_size+0x60>
 80166f2:	2303      	movs	r3, #3
 80166f4:	6023      	str	r3, [r4, #0]
 80166f6:	e7f1      	b.n	80166dc <rmw_validate_namespace_with_size+0x60>
 80166f8:	2302      	movs	r3, #2
 80166fa:	6023      	str	r3, [r4, #0]
 80166fc:	e7ee      	b.n	80166dc <rmw_validate_namespace_with_size+0x60>
 80166fe:	2301      	movs	r3, #1
 8016700:	6023      	str	r3, [r4, #0]
 8016702:	e7eb      	b.n	80166dc <rmw_validate_namespace_with_size+0x60>
 8016704:	4a03      	ldr	r2, [pc, #12]	@ (8016714 <rmw_validate_namespace_with_size+0x98>)
 8016706:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801670a:	a802      	add	r0, sp, #8
 801670c:	f7ff fd0e 	bl	801612c <rcutils_snprintf>
 8016710:	2001      	movs	r0, #1
 8016712:	e7d4      	b.n	80166be <rmw_validate_namespace_with_size+0x42>
 8016714:	0801a8d4 	.word	0x0801a8d4

08016718 <rmw_validate_namespace>:
 8016718:	b168      	cbz	r0, 8016736 <rmw_validate_namespace+0x1e>
 801671a:	b570      	push	{r4, r5, r6, lr}
 801671c:	460d      	mov	r5, r1
 801671e:	4616      	mov	r6, r2
 8016720:	4604      	mov	r4, r0
 8016722:	f7e9 fd87 	bl	8000234 <strlen>
 8016726:	4633      	mov	r3, r6
 8016728:	4601      	mov	r1, r0
 801672a:	462a      	mov	r2, r5
 801672c:	4620      	mov	r0, r4
 801672e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016732:	f7ff bfa3 	b.w	801667c <rmw_validate_namespace_with_size>
 8016736:	200b      	movs	r0, #11
 8016738:	4770      	bx	lr
 801673a:	bf00      	nop

0801673c <rmw_namespace_validation_result_string>:
 801673c:	2807      	cmp	r0, #7
 801673e:	bf9a      	itte	ls
 8016740:	4b02      	ldrls	r3, [pc, #8]	@ (801674c <rmw_namespace_validation_result_string+0x10>)
 8016742:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016746:	4802      	ldrhi	r0, [pc, #8]	@ (8016750 <rmw_namespace_validation_result_string+0x14>)
 8016748:	4770      	bx	lr
 801674a:	bf00      	nop
 801674c:	0801b094 	.word	0x0801b094
 8016750:	0801a924 	.word	0x0801a924

08016754 <rmw_validate_node_name>:
 8016754:	2800      	cmp	r0, #0
 8016756:	d03b      	beq.n	80167d0 <rmw_validate_node_name+0x7c>
 8016758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801675c:	460d      	mov	r5, r1
 801675e:	2900      	cmp	r1, #0
 8016760:	d038      	beq.n	80167d4 <rmw_validate_node_name+0x80>
 8016762:	4616      	mov	r6, r2
 8016764:	4604      	mov	r4, r0
 8016766:	f7e9 fd65 	bl	8000234 <strlen>
 801676a:	b1e0      	cbz	r0, 80167a6 <rmw_validate_node_name+0x52>
 801676c:	1e63      	subs	r3, r4, #1
 801676e:	eb03 0800 	add.w	r8, r3, r0
 8016772:	f1c4 0101 	rsb	r1, r4, #1
 8016776:	18cf      	adds	r7, r1, r3
 8016778:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801677c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8016780:	f02e 0c20 	bic.w	ip, lr, #32
 8016784:	2a09      	cmp	r2, #9
 8016786:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801678a:	d914      	bls.n	80167b6 <rmw_validate_node_name+0x62>
 801678c:	f1bc 0f19 	cmp.w	ip, #25
 8016790:	d911      	bls.n	80167b6 <rmw_validate_node_name+0x62>
 8016792:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8016796:	d00e      	beq.n	80167b6 <rmw_validate_node_name+0x62>
 8016798:	2302      	movs	r3, #2
 801679a:	602b      	str	r3, [r5, #0]
 801679c:	b106      	cbz	r6, 80167a0 <rmw_validate_node_name+0x4c>
 801679e:	6037      	str	r7, [r6, #0]
 80167a0:	2000      	movs	r0, #0
 80167a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167a6:	2301      	movs	r3, #1
 80167a8:	602b      	str	r3, [r5, #0]
 80167aa:	2e00      	cmp	r6, #0
 80167ac:	d0f8      	beq.n	80167a0 <rmw_validate_node_name+0x4c>
 80167ae:	2000      	movs	r0, #0
 80167b0:	6030      	str	r0, [r6, #0]
 80167b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167b6:	4543      	cmp	r3, r8
 80167b8:	d1dd      	bne.n	8016776 <rmw_validate_node_name+0x22>
 80167ba:	7822      	ldrb	r2, [r4, #0]
 80167bc:	4b0d      	ldr	r3, [pc, #52]	@ (80167f4 <rmw_validate_node_name+0xa0>)
 80167be:	5cd3      	ldrb	r3, [r2, r3]
 80167c0:	f013 0304 	ands.w	r3, r3, #4
 80167c4:	d110      	bne.n	80167e8 <rmw_validate_node_name+0x94>
 80167c6:	28ff      	cmp	r0, #255	@ 0xff
 80167c8:	d806      	bhi.n	80167d8 <rmw_validate_node_name+0x84>
 80167ca:	602b      	str	r3, [r5, #0]
 80167cc:	4618      	mov	r0, r3
 80167ce:	e7e8      	b.n	80167a2 <rmw_validate_node_name+0x4e>
 80167d0:	200b      	movs	r0, #11
 80167d2:	4770      	bx	lr
 80167d4:	200b      	movs	r0, #11
 80167d6:	e7e4      	b.n	80167a2 <rmw_validate_node_name+0x4e>
 80167d8:	2204      	movs	r2, #4
 80167da:	602a      	str	r2, [r5, #0]
 80167dc:	2e00      	cmp	r6, #0
 80167de:	d0df      	beq.n	80167a0 <rmw_validate_node_name+0x4c>
 80167e0:	22fe      	movs	r2, #254	@ 0xfe
 80167e2:	6032      	str	r2, [r6, #0]
 80167e4:	4618      	mov	r0, r3
 80167e6:	e7dc      	b.n	80167a2 <rmw_validate_node_name+0x4e>
 80167e8:	2303      	movs	r3, #3
 80167ea:	602b      	str	r3, [r5, #0]
 80167ec:	2e00      	cmp	r6, #0
 80167ee:	d1de      	bne.n	80167ae <rmw_validate_node_name+0x5a>
 80167f0:	e7d6      	b.n	80167a0 <rmw_validate_node_name+0x4c>
 80167f2:	bf00      	nop
 80167f4:	0801b1cf 	.word	0x0801b1cf

080167f8 <rmw_node_name_validation_result_string>:
 80167f8:	2804      	cmp	r0, #4
 80167fa:	bf9a      	itte	ls
 80167fc:	4b02      	ldrls	r3, [pc, #8]	@ (8016808 <rmw_node_name_validation_result_string+0x10>)
 80167fe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016802:	4802      	ldrhi	r0, [pc, #8]	@ (801680c <rmw_node_name_validation_result_string+0x14>)
 8016804:	4770      	bx	lr
 8016806:	bf00      	nop
 8016808:	0801b0b4 	.word	0x0801b0b4
 801680c:	0801aacc 	.word	0x0801aacc

08016810 <on_status>:
 8016810:	b082      	sub	sp, #8
 8016812:	b002      	add	sp, #8
 8016814:	4770      	bx	lr
 8016816:	bf00      	nop

08016818 <on_topic>:
 8016818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801681c:	4a22      	ldr	r2, [pc, #136]	@ (80168a8 <on_topic+0x90>)
 801681e:	b094      	sub	sp, #80	@ 0x50
 8016820:	6812      	ldr	r2, [r2, #0]
 8016822:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016824:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016828:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801682c:	b3c2      	cbz	r2, 80168a0 <on_topic+0x88>
 801682e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016832:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016836:	e001      	b.n	801683c <on_topic+0x24>
 8016838:	6852      	ldr	r2, [r2, #4]
 801683a:	b38a      	cbz	r2, 80168a0 <on_topic+0x88>
 801683c:	6894      	ldr	r4, [r2, #8]
 801683e:	8aa3      	ldrh	r3, [r4, #20]
 8016840:	428b      	cmp	r3, r1
 8016842:	d1f9      	bne.n	8016838 <on_topic+0x20>
 8016844:	7da3      	ldrb	r3, [r4, #22]
 8016846:	4283      	cmp	r3, r0
 8016848:	d1f6      	bne.n	8016838 <on_topic+0x20>
 801684a:	2248      	movs	r2, #72	@ 0x48
 801684c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016850:	4668      	mov	r0, sp
 8016852:	f002 ffce 	bl	80197f2 <memcpy>
 8016856:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801685a:	cb0c      	ldmia	r3, {r2, r3}
 801685c:	4620      	mov	r0, r4
 801685e:	f7f7 fcf9 	bl	800e254 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016862:	4607      	mov	r7, r0
 8016864:	b1e0      	cbz	r0, 80168a0 <on_topic+0x88>
 8016866:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801686a:	4632      	mov	r2, r6
 801686c:	4628      	mov	r0, r5
 801686e:	f108 0110 	add.w	r1, r8, #16
 8016872:	f000 ff69 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8016876:	b930      	cbnz	r0, 8016886 <on_topic+0x6e>
 8016878:	480c      	ldr	r0, [pc, #48]	@ (80168ac <on_topic+0x94>)
 801687a:	4639      	mov	r1, r7
 801687c:	b014      	add	sp, #80	@ 0x50
 801687e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016882:	f000 b8bd 	b.w	8016a00 <put_memory>
 8016886:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801688a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801688e:	f7f7 fadf 	bl	800de50 <rmw_uros_epoch_nanos>
 8016892:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8016896:	2305      	movs	r3, #5
 8016898:	e942 0102 	strd	r0, r1, [r2, #-8]
 801689c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80168a0:	b014      	add	sp, #80	@ 0x50
 80168a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168a6:	bf00      	nop
 80168a8:	2000aee4 	.word	0x2000aee4
 80168ac:	2000aed4 	.word	0x2000aed4

080168b0 <on_request>:
 80168b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168b4:	4823      	ldr	r0, [pc, #140]	@ (8016944 <on_request+0x94>)
 80168b6:	b094      	sub	sp, #80	@ 0x50
 80168b8:	6800      	ldr	r0, [r0, #0]
 80168ba:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80168bc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80168c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80168c2:	2800      	cmp	r0, #0
 80168c4:	d03b      	beq.n	801693e <on_request+0x8e>
 80168c6:	461d      	mov	r5, r3
 80168c8:	e001      	b.n	80168ce <on_request+0x1e>
 80168ca:	6840      	ldr	r0, [r0, #4]
 80168cc:	b3b8      	cbz	r0, 801693e <on_request+0x8e>
 80168ce:	6884      	ldr	r4, [r0, #8]
 80168d0:	8b21      	ldrh	r1, [r4, #24]
 80168d2:	4291      	cmp	r1, r2
 80168d4:	d1f9      	bne.n	80168ca <on_request+0x1a>
 80168d6:	2248      	movs	r2, #72	@ 0x48
 80168d8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80168dc:	4668      	mov	r0, sp
 80168de:	f002 ff88 	bl	80197f2 <memcpy>
 80168e2:	f104 0320 	add.w	r3, r4, #32
 80168e6:	cb0c      	ldmia	r3, {r2, r3}
 80168e8:	4620      	mov	r0, r4
 80168ea:	f7f7 fcb3 	bl	800e254 <rmw_uxrce_get_static_input_buffer_for_entity>
 80168ee:	4680      	mov	r8, r0
 80168f0:	b328      	cbz	r0, 801693e <on_request+0x8e>
 80168f2:	4638      	mov	r0, r7
 80168f4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80168f8:	4632      	mov	r2, r6
 80168fa:	f107 0110 	add.w	r1, r7, #16
 80168fe:	f000 ff23 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 8016902:	b930      	cbnz	r0, 8016912 <on_request+0x62>
 8016904:	4810      	ldr	r0, [pc, #64]	@ (8016948 <on_request+0x98>)
 8016906:	4641      	mov	r1, r8
 8016908:	b014      	add	sp, #80	@ 0x50
 801690a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801690e:	f000 b877 	b.w	8016a00 <put_memory>
 8016912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016914:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016918:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801691c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016920:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016924:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016928:	e88c 0003 	stmia.w	ip, {r0, r1}
 801692c:	f7f7 fa90 	bl	800de50 <rmw_uros_epoch_nanos>
 8016930:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016934:	2303      	movs	r3, #3
 8016936:	e942 0102 	strd	r0, r1, [r2, #-8]
 801693a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801693e:	b014      	add	sp, #80	@ 0x50
 8016940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016944:	2000aeb4 	.word	0x2000aeb4
 8016948:	2000aed4 	.word	0x2000aed4

0801694c <on_reply>:
 801694c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016950:	4821      	ldr	r0, [pc, #132]	@ (80169d8 <on_reply+0x8c>)
 8016952:	b094      	sub	sp, #80	@ 0x50
 8016954:	6800      	ldr	r0, [r0, #0]
 8016956:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016958:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801695c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801695e:	b3b8      	cbz	r0, 80169d0 <on_reply+0x84>
 8016960:	461d      	mov	r5, r3
 8016962:	e001      	b.n	8016968 <on_reply+0x1c>
 8016964:	6840      	ldr	r0, [r0, #4]
 8016966:	b398      	cbz	r0, 80169d0 <on_reply+0x84>
 8016968:	6884      	ldr	r4, [r0, #8]
 801696a:	8b21      	ldrh	r1, [r4, #24]
 801696c:	4291      	cmp	r1, r2
 801696e:	d1f9      	bne.n	8016964 <on_reply+0x18>
 8016970:	2248      	movs	r2, #72	@ 0x48
 8016972:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016976:	4668      	mov	r0, sp
 8016978:	f002 ff3b 	bl	80197f2 <memcpy>
 801697c:	f104 0320 	add.w	r3, r4, #32
 8016980:	cb0c      	ldmia	r3, {r2, r3}
 8016982:	4620      	mov	r0, r4
 8016984:	f7f7 fc66 	bl	800e254 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016988:	4680      	mov	r8, r0
 801698a:	b308      	cbz	r0, 80169d0 <on_reply+0x84>
 801698c:	4638      	mov	r0, r7
 801698e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016992:	4632      	mov	r2, r6
 8016994:	f107 0110 	add.w	r1, r7, #16
 8016998:	f000 fed6 	bl	8017748 <ucdr_deserialize_array_uint8_t>
 801699c:	b930      	cbnz	r0, 80169ac <on_reply+0x60>
 801699e:	480f      	ldr	r0, [pc, #60]	@ (80169dc <on_reply+0x90>)
 80169a0:	4641      	mov	r1, r8
 80169a2:	b014      	add	sp, #80	@ 0x50
 80169a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169a8:	f000 b82a 	b.w	8016a00 <put_memory>
 80169ac:	2200      	movs	r2, #0
 80169ae:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80169b2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80169b6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80169ba:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80169be:	f7f7 fa47 	bl	800de50 <rmw_uros_epoch_nanos>
 80169c2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80169c6:	2304      	movs	r3, #4
 80169c8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80169cc:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80169d0:	b014      	add	sp, #80	@ 0x50
 80169d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169d6:	bf00      	nop
 80169d8:	200065c4 	.word	0x200065c4
 80169dc:	2000aed4 	.word	0x2000aed4

080169e0 <get_memory>:
 80169e0:	4603      	mov	r3, r0
 80169e2:	6840      	ldr	r0, [r0, #4]
 80169e4:	b158      	cbz	r0, 80169fe <get_memory+0x1e>
 80169e6:	6842      	ldr	r2, [r0, #4]
 80169e8:	605a      	str	r2, [r3, #4]
 80169ea:	b10a      	cbz	r2, 80169f0 <get_memory+0x10>
 80169ec:	2100      	movs	r1, #0
 80169ee:	6011      	str	r1, [r2, #0]
 80169f0:	681a      	ldr	r2, [r3, #0]
 80169f2:	6042      	str	r2, [r0, #4]
 80169f4:	b102      	cbz	r2, 80169f8 <get_memory+0x18>
 80169f6:	6010      	str	r0, [r2, #0]
 80169f8:	2200      	movs	r2, #0
 80169fa:	6002      	str	r2, [r0, #0]
 80169fc:	6018      	str	r0, [r3, #0]
 80169fe:	4770      	bx	lr

08016a00 <put_memory>:
 8016a00:	680b      	ldr	r3, [r1, #0]
 8016a02:	b10b      	cbz	r3, 8016a08 <put_memory+0x8>
 8016a04:	684a      	ldr	r2, [r1, #4]
 8016a06:	605a      	str	r2, [r3, #4]
 8016a08:	684a      	ldr	r2, [r1, #4]
 8016a0a:	b102      	cbz	r2, 8016a0e <put_memory+0xe>
 8016a0c:	6013      	str	r3, [r2, #0]
 8016a0e:	6803      	ldr	r3, [r0, #0]
 8016a10:	428b      	cmp	r3, r1
 8016a12:	6843      	ldr	r3, [r0, #4]
 8016a14:	bf08      	it	eq
 8016a16:	6002      	streq	r2, [r0, #0]
 8016a18:	604b      	str	r3, [r1, #4]
 8016a1a:	b103      	cbz	r3, 8016a1e <put_memory+0x1e>
 8016a1c:	6019      	str	r1, [r3, #0]
 8016a1e:	2300      	movs	r3, #0
 8016a20:	600b      	str	r3, [r1, #0]
 8016a22:	6041      	str	r1, [r0, #4]
 8016a24:	4770      	bx	lr
 8016a26:	bf00      	nop

08016a28 <rmw_destroy_client>:
 8016a28:	b570      	push	{r4, r5, r6, lr}
 8016a2a:	b128      	cbz	r0, 8016a38 <rmw_destroy_client+0x10>
 8016a2c:	4604      	mov	r4, r0
 8016a2e:	6800      	ldr	r0, [r0, #0]
 8016a30:	460d      	mov	r5, r1
 8016a32:	f7f7 fd83 	bl	800e53c <is_uxrce_rmw_identifier_valid>
 8016a36:	b910      	cbnz	r0, 8016a3e <rmw_destroy_client+0x16>
 8016a38:	2401      	movs	r4, #1
 8016a3a:	4620      	mov	r0, r4
 8016a3c:	bd70      	pop	{r4, r5, r6, pc}
 8016a3e:	6863      	ldr	r3, [r4, #4]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d0f9      	beq.n	8016a38 <rmw_destroy_client+0x10>
 8016a44:	2d00      	cmp	r5, #0
 8016a46:	d0f7      	beq.n	8016a38 <rmw_destroy_client+0x10>
 8016a48:	6828      	ldr	r0, [r5, #0]
 8016a4a:	f7f7 fd77 	bl	800e53c <is_uxrce_rmw_identifier_valid>
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	d0f2      	beq.n	8016a38 <rmw_destroy_client+0x10>
 8016a52:	686e      	ldr	r6, [r5, #4]
 8016a54:	2e00      	cmp	r6, #0
 8016a56:	d0ef      	beq.n	8016a38 <rmw_destroy_client+0x10>
 8016a58:	6864      	ldr	r4, [r4, #4]
 8016a5a:	6932      	ldr	r2, [r6, #16]
 8016a5c:	6920      	ldr	r0, [r4, #16]
 8016a5e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016a62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016a66:	6819      	ldr	r1, [r3, #0]
 8016a68:	f7f9 fc24 	bl	80102b4 <uxr_buffer_cancel_data>
 8016a6c:	4602      	mov	r2, r0
 8016a6e:	6920      	ldr	r0, [r4, #16]
 8016a70:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016a74:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016a78:	f7f7 fce0 	bl	800e43c <run_xrce_session>
 8016a7c:	6920      	ldr	r0, [r4, #16]
 8016a7e:	6932      	ldr	r2, [r6, #16]
 8016a80:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016a84:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016a88:	6819      	ldr	r1, [r3, #0]
 8016a8a:	f7f9 f9c7 	bl	800fe1c <uxr_buffer_delete_entity>
 8016a8e:	4602      	mov	r2, r0
 8016a90:	6920      	ldr	r0, [r4, #16]
 8016a92:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016a96:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016a9a:	f7f7 fccf 	bl	800e43c <run_xrce_session>
 8016a9e:	2800      	cmp	r0, #0
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	bf14      	ite	ne
 8016aa4:	2400      	movne	r4, #0
 8016aa6:	2402      	moveq	r4, #2
 8016aa8:	f7f7 fbb2 	bl	800e210 <rmw_uxrce_fini_client_memory>
 8016aac:	e7c5      	b.n	8016a3a <rmw_destroy_client+0x12>
 8016aae:	bf00      	nop

08016ab0 <rmw_get_implementation_identifier>:
 8016ab0:	4b01      	ldr	r3, [pc, #4]	@ (8016ab8 <rmw_get_implementation_identifier+0x8>)
 8016ab2:	6818      	ldr	r0, [r3, #0]
 8016ab4:	4770      	bx	lr
 8016ab6:	bf00      	nop
 8016ab8:	0801b0c8 	.word	0x0801b0c8

08016abc <create_topic>:
 8016abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ac0:	4605      	mov	r5, r0
 8016ac2:	b084      	sub	sp, #16
 8016ac4:	4822      	ldr	r0, [pc, #136]	@ (8016b50 <create_topic+0x94>)
 8016ac6:	460f      	mov	r7, r1
 8016ac8:	4616      	mov	r6, r2
 8016aca:	f7ff ff89 	bl	80169e0 <get_memory>
 8016ace:	4604      	mov	r4, r0
 8016ad0:	2800      	cmp	r0, #0
 8016ad2:	d039      	beq.n	8016b48 <create_topic+0x8c>
 8016ad4:	692b      	ldr	r3, [r5, #16]
 8016ad6:	6884      	ldr	r4, [r0, #8]
 8016ad8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8016b58 <create_topic+0x9c>
 8016adc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016ae0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8016ae4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8016ae8:	1c42      	adds	r2, r0, #1
 8016aea:	2102      	movs	r1, #2
 8016aec:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8016af0:	f7f9 fbb0 	bl	8010254 <uxr_object_id>
 8016af4:	223c      	movs	r2, #60	@ 0x3c
 8016af6:	6120      	str	r0, [r4, #16]
 8016af8:	4641      	mov	r1, r8
 8016afa:	4638      	mov	r0, r7
 8016afc:	f7f7 fd04 	bl	800e508 <generate_topic_name>
 8016b00:	b1f0      	cbz	r0, 8016b40 <create_topic+0x84>
 8016b02:	4f14      	ldr	r7, [pc, #80]	@ (8016b54 <create_topic+0x98>)
 8016b04:	4630      	mov	r0, r6
 8016b06:	2264      	movs	r2, #100	@ 0x64
 8016b08:	4639      	mov	r1, r7
 8016b0a:	f7f7 fccd 	bl	800e4a8 <generate_type_name>
 8016b0e:	b1b8      	cbz	r0, 8016b40 <create_topic+0x84>
 8016b10:	6928      	ldr	r0, [r5, #16]
 8016b12:	2306      	movs	r3, #6
 8016b14:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016b18:	f8cd 8000 	str.w	r8, [sp]
 8016b1c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8016b20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016b24:	6811      	ldr	r1, [r2, #0]
 8016b26:	696b      	ldr	r3, [r5, #20]
 8016b28:	6922      	ldr	r2, [r4, #16]
 8016b2a:	f7f9 f9f5 	bl	800ff18 <uxr_buffer_create_topic_bin>
 8016b2e:	4602      	mov	r2, r0
 8016b30:	6928      	ldr	r0, [r5, #16]
 8016b32:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016b36:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016b3a:	f7f7 fc7f 	bl	800e43c <run_xrce_session>
 8016b3e:	b918      	cbnz	r0, 8016b48 <create_topic+0x8c>
 8016b40:	4620      	mov	r0, r4
 8016b42:	f7f7 fb7b 	bl	800e23c <rmw_uxrce_fini_topic_memory>
 8016b46:	2400      	movs	r4, #0
 8016b48:	4620      	mov	r0, r4
 8016b4a:	b004      	add	sp, #16
 8016b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b50:	2000aef4 	.word	0x2000aef4
 8016b54:	2000af74 	.word	0x2000af74
 8016b58:	2000af38 	.word	0x2000af38

08016b5c <destroy_topic>:
 8016b5c:	b538      	push	{r3, r4, r5, lr}
 8016b5e:	6985      	ldr	r5, [r0, #24]
 8016b60:	b1d5      	cbz	r5, 8016b98 <destroy_topic+0x3c>
 8016b62:	4604      	mov	r4, r0
 8016b64:	6928      	ldr	r0, [r5, #16]
 8016b66:	6922      	ldr	r2, [r4, #16]
 8016b68:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016b6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016b70:	6819      	ldr	r1, [r3, #0]
 8016b72:	f7f9 f953 	bl	800fe1c <uxr_buffer_delete_entity>
 8016b76:	4602      	mov	r2, r0
 8016b78:	6928      	ldr	r0, [r5, #16]
 8016b7a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016b7e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016b82:	f7f7 fc5b 	bl	800e43c <run_xrce_session>
 8016b86:	2800      	cmp	r0, #0
 8016b88:	4620      	mov	r0, r4
 8016b8a:	bf14      	ite	ne
 8016b8c:	2400      	movne	r4, #0
 8016b8e:	2402      	moveq	r4, #2
 8016b90:	f7f7 fb54 	bl	800e23c <rmw_uxrce_fini_topic_memory>
 8016b94:	4620      	mov	r0, r4
 8016b96:	bd38      	pop	{r3, r4, r5, pc}
 8016b98:	2401      	movs	r4, #1
 8016b9a:	4620      	mov	r0, r4
 8016b9c:	bd38      	pop	{r3, r4, r5, pc}
 8016b9e:	bf00      	nop

08016ba0 <rmw_send_request>:
 8016ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ba4:	4604      	mov	r4, r0
 8016ba6:	6800      	ldr	r0, [r0, #0]
 8016ba8:	b08b      	sub	sp, #44	@ 0x2c
 8016baa:	460e      	mov	r6, r1
 8016bac:	4615      	mov	r5, r2
 8016bae:	b128      	cbz	r0, 8016bbc <rmw_send_request+0x1c>
 8016bb0:	4b21      	ldr	r3, [pc, #132]	@ (8016c38 <rmw_send_request+0x98>)
 8016bb2:	6819      	ldr	r1, [r3, #0]
 8016bb4:	f7e9 fb34 	bl	8000220 <strcmp>
 8016bb8:	2800      	cmp	r0, #0
 8016bba:	d139      	bne.n	8016c30 <rmw_send_request+0x90>
 8016bbc:	6864      	ldr	r4, [r4, #4]
 8016bbe:	6963      	ldr	r3, [r4, #20]
 8016bc0:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8016bc4:	689b      	ldr	r3, [r3, #8]
 8016bc6:	4798      	blx	r3
 8016bc8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016bcc:	4630      	mov	r0, r6
 8016bce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016bd2:	4798      	blx	r3
 8016bd4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016bd8:	9000      	str	r0, [sp, #0]
 8016bda:	6922      	ldr	r2, [r4, #16]
 8016bdc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8016bde:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016be2:	ab02      	add	r3, sp, #8
 8016be4:	f7fb fc0e 	bl	8012404 <uxr_prepare_output_stream>
 8016be8:	2700      	movs	r7, #0
 8016bea:	6028      	str	r0, [r5, #0]
 8016bec:	606f      	str	r7, [r5, #4]
 8016bee:	b198      	cbz	r0, 8016c18 <rmw_send_request+0x78>
 8016bf0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016bf4:	a902      	add	r1, sp, #8
 8016bf6:	4630      	mov	r0, r6
 8016bf8:	4798      	blx	r3
 8016bfa:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8016bfe:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016c02:	2b01      	cmp	r3, #1
 8016c04:	d00c      	beq.n	8016c20 <rmw_send_request+0x80>
 8016c06:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8016c08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016c0c:	f7fa f928 	bl	8010e60 <uxr_run_session_until_confirm_delivery>
 8016c10:	4638      	mov	r0, r7
 8016c12:	b00b      	add	sp, #44	@ 0x2c
 8016c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c18:	2001      	movs	r0, #1
 8016c1a:	b00b      	add	sp, #44	@ 0x2c
 8016c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016c24:	f7f9 fd5c 	bl	80106e0 <uxr_flash_output_streams>
 8016c28:	4638      	mov	r0, r7
 8016c2a:	b00b      	add	sp, #44	@ 0x2c
 8016c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c30:	200c      	movs	r0, #12
 8016c32:	b00b      	add	sp, #44	@ 0x2c
 8016c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c38:	0801b0c8 	.word	0x0801b0c8

08016c3c <rmw_take_request>:
 8016c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c40:	4605      	mov	r5, r0
 8016c42:	6800      	ldr	r0, [r0, #0]
 8016c44:	b089      	sub	sp, #36	@ 0x24
 8016c46:	460c      	mov	r4, r1
 8016c48:	4690      	mov	r8, r2
 8016c4a:	461e      	mov	r6, r3
 8016c4c:	b128      	cbz	r0, 8016c5a <rmw_take_request+0x1e>
 8016c4e:	4b28      	ldr	r3, [pc, #160]	@ (8016cf0 <rmw_take_request+0xb4>)
 8016c50:	6819      	ldr	r1, [r3, #0]
 8016c52:	f7e9 fae5 	bl	8000220 <strcmp>
 8016c56:	2800      	cmp	r0, #0
 8016c58:	d146      	bne.n	8016ce8 <rmw_take_request+0xac>
 8016c5a:	b10e      	cbz	r6, 8016c60 <rmw_take_request+0x24>
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	7033      	strb	r3, [r6, #0]
 8016c60:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016c64:	f7f7 fb6c 	bl	800e340 <rmw_uxrce_clean_expired_static_input_buffer>
 8016c68:	4648      	mov	r0, r9
 8016c6a:	f7f7 fb43 	bl	800e2f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016c6e:	4607      	mov	r7, r0
 8016c70:	b3b0      	cbz	r0, 8016ce0 <rmw_take_request+0xa4>
 8016c72:	6885      	ldr	r5, [r0, #8]
 8016c74:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8016c78:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8016c7c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8016c80:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8016c84:	7423      	strb	r3, [r4, #16]
 8016c86:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8016c8a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8016c8e:	74e2      	strb	r2, [r4, #19]
 8016c90:	f8a4 3011 	strh.w	r3, [r4, #17]
 8016c94:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016c98:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8016c9c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8016ca0:	61e1      	str	r1, [r4, #28]
 8016ca2:	6162      	str	r2, [r4, #20]
 8016ca4:	61a3      	str	r3, [r4, #24]
 8016ca6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016caa:	689b      	ldr	r3, [r3, #8]
 8016cac:	4798      	blx	r3
 8016cae:	6844      	ldr	r4, [r0, #4]
 8016cb0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8016cb4:	f105 0110 	add.w	r1, r5, #16
 8016cb8:	4668      	mov	r0, sp
 8016cba:	f7f8 ffbb 	bl	800fc34 <ucdr_init_buffer>
 8016cbe:	68e3      	ldr	r3, [r4, #12]
 8016cc0:	4641      	mov	r1, r8
 8016cc2:	4668      	mov	r0, sp
 8016cc4:	4798      	blx	r3
 8016cc6:	4639      	mov	r1, r7
 8016cc8:	4604      	mov	r4, r0
 8016cca:	480a      	ldr	r0, [pc, #40]	@ (8016cf4 <rmw_take_request+0xb8>)
 8016ccc:	f7ff fe98 	bl	8016a00 <put_memory>
 8016cd0:	b106      	cbz	r6, 8016cd4 <rmw_take_request+0x98>
 8016cd2:	7034      	strb	r4, [r6, #0]
 8016cd4:	f084 0001 	eor.w	r0, r4, #1
 8016cd8:	b2c0      	uxtb	r0, r0
 8016cda:	b009      	add	sp, #36	@ 0x24
 8016cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ce0:	2001      	movs	r0, #1
 8016ce2:	b009      	add	sp, #36	@ 0x24
 8016ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ce8:	200c      	movs	r0, #12
 8016cea:	b009      	add	sp, #36	@ 0x24
 8016cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cf0:	0801b0c8 	.word	0x0801b0c8
 8016cf4:	2000aed4 	.word	0x2000aed4

08016cf8 <rmw_send_response>:
 8016cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cfa:	4605      	mov	r5, r0
 8016cfc:	6800      	ldr	r0, [r0, #0]
 8016cfe:	b091      	sub	sp, #68	@ 0x44
 8016d00:	460c      	mov	r4, r1
 8016d02:	4616      	mov	r6, r2
 8016d04:	b128      	cbz	r0, 8016d12 <rmw_send_response+0x1a>
 8016d06:	4b29      	ldr	r3, [pc, #164]	@ (8016dac <rmw_send_response+0xb4>)
 8016d08:	6819      	ldr	r1, [r3, #0]
 8016d0a:	f7e9 fa89 	bl	8000220 <strcmp>
 8016d0e:	2800      	cmp	r0, #0
 8016d10:	d141      	bne.n	8016d96 <rmw_send_response+0x9e>
 8016d12:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8016d16:	9306      	str	r3, [sp, #24]
 8016d18:	4623      	mov	r3, r4
 8016d1a:	9207      	str	r2, [sp, #28]
 8016d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d20:	686d      	ldr	r5, [r5, #4]
 8016d22:	789b      	ldrb	r3, [r3, #2]
 8016d24:	68a1      	ldr	r1, [r4, #8]
 8016d26:	f88d 2017 	strb.w	r2, [sp, #23]
 8016d2a:	f88d 3016 	strb.w	r3, [sp, #22]
 8016d2e:	68e2      	ldr	r2, [r4, #12]
 8016d30:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8016d34:	6860      	ldr	r0, [r4, #4]
 8016d36:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016d3a:	ab02      	add	r3, sp, #8
 8016d3c:	c307      	stmia	r3!, {r0, r1, r2}
 8016d3e:	696b      	ldr	r3, [r5, #20]
 8016d40:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8016d42:	68db      	ldr	r3, [r3, #12]
 8016d44:	4798      	blx	r3
 8016d46:	6844      	ldr	r4, [r0, #4]
 8016d48:	4630      	mov	r0, r6
 8016d4a:	6923      	ldr	r3, [r4, #16]
 8016d4c:	4798      	blx	r3
 8016d4e:	f100 0318 	add.w	r3, r0, #24
 8016d52:	6938      	ldr	r0, [r7, #16]
 8016d54:	9300      	str	r3, [sp, #0]
 8016d56:	692a      	ldr	r2, [r5, #16]
 8016d58:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016d5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d5e:	ab08      	add	r3, sp, #32
 8016d60:	f7fb fb50 	bl	8012404 <uxr_prepare_output_stream>
 8016d64:	b910      	cbnz	r0, 8016d6c <rmw_send_response+0x74>
 8016d66:	2001      	movs	r0, #1
 8016d68:	b011      	add	sp, #68	@ 0x44
 8016d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d6c:	a902      	add	r1, sp, #8
 8016d6e:	a808      	add	r0, sp, #32
 8016d70:	f7fc fba2 	bl	80134b8 <uxr_serialize_SampleIdentity>
 8016d74:	68a3      	ldr	r3, [r4, #8]
 8016d76:	a908      	add	r1, sp, #32
 8016d78:	4630      	mov	r0, r6
 8016d7a:	4798      	blx	r3
 8016d7c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016d80:	6938      	ldr	r0, [r7, #16]
 8016d82:	2b01      	cmp	r3, #1
 8016d84:	d00a      	beq.n	8016d9c <rmw_send_response+0xa4>
 8016d86:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016d88:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d8c:	f7fa f868 	bl	8010e60 <uxr_run_session_until_confirm_delivery>
 8016d90:	2000      	movs	r0, #0
 8016d92:	b011      	add	sp, #68	@ 0x44
 8016d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d96:	200c      	movs	r0, #12
 8016d98:	b011      	add	sp, #68	@ 0x44
 8016d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016da0:	f7f9 fc9e 	bl	80106e0 <uxr_flash_output_streams>
 8016da4:	2000      	movs	r0, #0
 8016da6:	b011      	add	sp, #68	@ 0x44
 8016da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016daa:	bf00      	nop
 8016dac:	0801b0c8 	.word	0x0801b0c8

08016db0 <rmw_take_response>:
 8016db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016db4:	4604      	mov	r4, r0
 8016db6:	6800      	ldr	r0, [r0, #0]
 8016db8:	b088      	sub	sp, #32
 8016dba:	4688      	mov	r8, r1
 8016dbc:	4617      	mov	r7, r2
 8016dbe:	461d      	mov	r5, r3
 8016dc0:	b120      	cbz	r0, 8016dcc <rmw_take_response+0x1c>
 8016dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8016e3c <rmw_take_response+0x8c>)
 8016dc4:	6819      	ldr	r1, [r3, #0]
 8016dc6:	f7e9 fa2b 	bl	8000220 <strcmp>
 8016dca:	bb78      	cbnz	r0, 8016e2c <rmw_take_response+0x7c>
 8016dcc:	b10d      	cbz	r5, 8016dd2 <rmw_take_response+0x22>
 8016dce:	2300      	movs	r3, #0
 8016dd0:	702b      	strb	r3, [r5, #0]
 8016dd2:	6864      	ldr	r4, [r4, #4]
 8016dd4:	f7f7 fab4 	bl	800e340 <rmw_uxrce_clean_expired_static_input_buffer>
 8016dd8:	4620      	mov	r0, r4
 8016dda:	f7f7 fa8b 	bl	800e2f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016dde:	4606      	mov	r6, r0
 8016de0:	b340      	cbz	r0, 8016e34 <rmw_take_response+0x84>
 8016de2:	6963      	ldr	r3, [r4, #20]
 8016de4:	6884      	ldr	r4, [r0, #8]
 8016de6:	68db      	ldr	r3, [r3, #12]
 8016de8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8016dec:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016df0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8016df4:	4798      	blx	r3
 8016df6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016dfa:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016dfe:	f104 0110 	add.w	r1, r4, #16
 8016e02:	4668      	mov	r0, sp
 8016e04:	f7f8 ff16 	bl	800fc34 <ucdr_init_buffer>
 8016e08:	4639      	mov	r1, r7
 8016e0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016e0e:	4668      	mov	r0, sp
 8016e10:	4798      	blx	r3
 8016e12:	4631      	mov	r1, r6
 8016e14:	4604      	mov	r4, r0
 8016e16:	480a      	ldr	r0, [pc, #40]	@ (8016e40 <rmw_take_response+0x90>)
 8016e18:	f7ff fdf2 	bl	8016a00 <put_memory>
 8016e1c:	b105      	cbz	r5, 8016e20 <rmw_take_response+0x70>
 8016e1e:	702c      	strb	r4, [r5, #0]
 8016e20:	f084 0001 	eor.w	r0, r4, #1
 8016e24:	b2c0      	uxtb	r0, r0
 8016e26:	b008      	add	sp, #32
 8016e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e2c:	200c      	movs	r0, #12
 8016e2e:	b008      	add	sp, #32
 8016e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e34:	2001      	movs	r0, #1
 8016e36:	b008      	add	sp, #32
 8016e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e3c:	0801b0c8 	.word	0x0801b0c8
 8016e40:	2000aed4 	.word	0x2000aed4

08016e44 <rmw_take_with_info>:
 8016e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e46:	4604      	mov	r4, r0
 8016e48:	6800      	ldr	r0, [r0, #0]
 8016e4a:	b089      	sub	sp, #36	@ 0x24
 8016e4c:	460f      	mov	r7, r1
 8016e4e:	4615      	mov	r5, r2
 8016e50:	b128      	cbz	r0, 8016e5e <rmw_take_with_info+0x1a>
 8016e52:	4b24      	ldr	r3, [pc, #144]	@ (8016ee4 <rmw_take_with_info+0xa0>)
 8016e54:	6819      	ldr	r1, [r3, #0]
 8016e56:	f7e9 f9e3 	bl	8000220 <strcmp>
 8016e5a:	2800      	cmp	r0, #0
 8016e5c:	d13e      	bne.n	8016edc <rmw_take_with_info+0x98>
 8016e5e:	b305      	cbz	r5, 8016ea2 <rmw_take_with_info+0x5e>
 8016e60:	6864      	ldr	r4, [r4, #4]
 8016e62:	2300      	movs	r3, #0
 8016e64:	702b      	strb	r3, [r5, #0]
 8016e66:	f7f7 fa6b 	bl	800e340 <rmw_uxrce_clean_expired_static_input_buffer>
 8016e6a:	4620      	mov	r0, r4
 8016e6c:	f7f7 fa42 	bl	800e2f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016e70:	4606      	mov	r6, r0
 8016e72:	b1f0      	cbz	r0, 8016eb2 <rmw_take_with_info+0x6e>
 8016e74:	6881      	ldr	r1, [r0, #8]
 8016e76:	4668      	mov	r0, sp
 8016e78:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016e7c:	3110      	adds	r1, #16
 8016e7e:	f7f8 fed9 	bl	800fc34 <ucdr_init_buffer>
 8016e82:	69a3      	ldr	r3, [r4, #24]
 8016e84:	4639      	mov	r1, r7
 8016e86:	68db      	ldr	r3, [r3, #12]
 8016e88:	4668      	mov	r0, sp
 8016e8a:	4798      	blx	r3
 8016e8c:	4631      	mov	r1, r6
 8016e8e:	4604      	mov	r4, r0
 8016e90:	4815      	ldr	r0, [pc, #84]	@ (8016ee8 <rmw_take_with_info+0xa4>)
 8016e92:	f7ff fdb5 	bl	8016a00 <put_memory>
 8016e96:	702c      	strb	r4, [r5, #0]
 8016e98:	f084 0001 	eor.w	r0, r4, #1
 8016e9c:	b2c0      	uxtb	r0, r0
 8016e9e:	b009      	add	sp, #36	@ 0x24
 8016ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ea2:	6864      	ldr	r4, [r4, #4]
 8016ea4:	f7f7 fa4c 	bl	800e340 <rmw_uxrce_clean_expired_static_input_buffer>
 8016ea8:	4620      	mov	r0, r4
 8016eaa:	f7f7 fa23 	bl	800e2f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016eae:	4605      	mov	r5, r0
 8016eb0:	b910      	cbnz	r0, 8016eb8 <rmw_take_with_info+0x74>
 8016eb2:	2001      	movs	r0, #1
 8016eb4:	b009      	add	sp, #36	@ 0x24
 8016eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016eb8:	68a9      	ldr	r1, [r5, #8]
 8016eba:	4668      	mov	r0, sp
 8016ebc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016ec0:	3110      	adds	r1, #16
 8016ec2:	f7f8 feb7 	bl	800fc34 <ucdr_init_buffer>
 8016ec6:	69a3      	ldr	r3, [r4, #24]
 8016ec8:	4639      	mov	r1, r7
 8016eca:	68db      	ldr	r3, [r3, #12]
 8016ecc:	4668      	mov	r0, sp
 8016ece:	4798      	blx	r3
 8016ed0:	4629      	mov	r1, r5
 8016ed2:	4604      	mov	r4, r0
 8016ed4:	4804      	ldr	r0, [pc, #16]	@ (8016ee8 <rmw_take_with_info+0xa4>)
 8016ed6:	f7ff fd93 	bl	8016a00 <put_memory>
 8016eda:	e7dd      	b.n	8016e98 <rmw_take_with_info+0x54>
 8016edc:	200c      	movs	r0, #12
 8016ede:	b009      	add	sp, #36	@ 0x24
 8016ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ee2:	bf00      	nop
 8016ee4:	0801b0c8 	.word	0x0801b0c8
 8016ee8:	2000aed4 	.word	0x2000aed4

08016eec <rmw_wait>:
 8016eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ef0:	b089      	sub	sp, #36	@ 0x24
 8016ef2:	4605      	mov	r5, r0
 8016ef4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8016ef6:	460e      	mov	r6, r1
 8016ef8:	4698      	mov	r8, r3
 8016efa:	4691      	mov	r9, r2
 8016efc:	2a00      	cmp	r2, #0
 8016efe:	f000 810a 	beq.w	8017116 <rmw_wait+0x22a>
 8016f02:	b16c      	cbz	r4, 8016f20 <rmw_wait+0x34>
 8016f04:	4bae      	ldr	r3, [pc, #696]	@ (80171c0 <rmw_wait+0x2d4>)
 8016f06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f08:	af04      	add	r7, sp, #16
 8016f0a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8016f0e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016f12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016f16:	f7ff faaf 	bl	8016478 <rmw_time_equal>
 8016f1a:	2800      	cmp	r0, #0
 8016f1c:	f000 8127 	beq.w	801716e <rmw_wait+0x282>
 8016f20:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016f24:	f7f7 fa0c 	bl	800e340 <rmw_uxrce_clean_expired_static_input_buffer>
 8016f28:	4ba6      	ldr	r3, [pc, #664]	@ (80171c4 <rmw_wait+0x2d8>)
 8016f2a:	681c      	ldr	r4, [r3, #0]
 8016f2c:	b14c      	cbz	r4, 8016f42 <rmw_wait+0x56>
 8016f2e:	4623      	mov	r3, r4
 8016f30:	2100      	movs	r1, #0
 8016f32:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8016f36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016f3a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d1f7      	bne.n	8016f32 <rmw_wait+0x46>
 8016f42:	f1b9 0f00 	cmp.w	r9, #0
 8016f46:	d011      	beq.n	8016f6c <rmw_wait+0x80>
 8016f48:	f8d9 1000 	ldr.w	r1, [r9]
 8016f4c:	b171      	cbz	r1, 8016f6c <rmw_wait+0x80>
 8016f4e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016f52:	2300      	movs	r3, #0
 8016f54:	2001      	movs	r0, #1
 8016f56:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016f5a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016f5c:	6912      	ldr	r2, [r2, #16]
 8016f5e:	3301      	adds	r3, #1
 8016f60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016f64:	4299      	cmp	r1, r3
 8016f66:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016f6a:	d1f4      	bne.n	8016f56 <rmw_wait+0x6a>
 8016f6c:	f1b8 0f00 	cmp.w	r8, #0
 8016f70:	d011      	beq.n	8016f96 <rmw_wait+0xaa>
 8016f72:	f8d8 1000 	ldr.w	r1, [r8]
 8016f76:	b171      	cbz	r1, 8016f96 <rmw_wait+0xaa>
 8016f78:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	2001      	movs	r0, #1
 8016f80:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016f84:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016f86:	6912      	ldr	r2, [r2, #16]
 8016f88:	3301      	adds	r3, #1
 8016f8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016f8e:	4299      	cmp	r1, r3
 8016f90:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016f94:	d1f4      	bne.n	8016f80 <rmw_wait+0x94>
 8016f96:	b185      	cbz	r5, 8016fba <rmw_wait+0xce>
 8016f98:	6829      	ldr	r1, [r5, #0]
 8016f9a:	b171      	cbz	r1, 8016fba <rmw_wait+0xce>
 8016f9c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	2001      	movs	r0, #1
 8016fa4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016fa8:	6a12      	ldr	r2, [r2, #32]
 8016faa:	6912      	ldr	r2, [r2, #16]
 8016fac:	3301      	adds	r3, #1
 8016fae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016fb2:	4299      	cmp	r1, r3
 8016fb4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016fb8:	d1f4      	bne.n	8016fa4 <rmw_wait+0xb8>
 8016fba:	b34c      	cbz	r4, 8017010 <rmw_wait+0x124>
 8016fbc:	4622      	mov	r2, r4
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8016fc4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8016fc8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8016fcc:	440b      	add	r3, r1
 8016fce:	b2db      	uxtb	r3, r3
 8016fd0:	2a00      	cmp	r2, #0
 8016fd2:	d1f5      	bne.n	8016fc0 <rmw_wait+0xd4>
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	f000 8084 	beq.w	80170e2 <rmw_wait+0x1f6>
 8016fda:	1c7a      	adds	r2, r7, #1
 8016fdc:	d00d      	beq.n	8016ffa <rmw_wait+0x10e>
 8016fde:	ee07 7a90 	vmov	s15, r7
 8016fe2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016fe6:	ee07 3a90 	vmov	s15, r3
 8016fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016ff2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016ff6:	ee17 7a90 	vmov	r7, s15
 8016ffa:	68a0      	ldr	r0, [r4, #8]
 8016ffc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017000:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017004:	2b00      	cmp	r3, #0
 8017006:	f040 8090 	bne.w	801712a <rmw_wait+0x23e>
 801700a:	6864      	ldr	r4, [r4, #4]
 801700c:	2c00      	cmp	r4, #0
 801700e:	d1f4      	bne.n	8016ffa <rmw_wait+0x10e>
 8017010:	f1b9 0f00 	cmp.w	r9, #0
 8017014:	f000 80bc 	beq.w	8017190 <rmw_wait+0x2a4>
 8017018:	f8d9 7000 	ldr.w	r7, [r9]
 801701c:	2f00      	cmp	r7, #0
 801701e:	f000 808e 	beq.w	801713e <rmw_wait+0x252>
 8017022:	2400      	movs	r4, #0
 8017024:	4627      	mov	r7, r4
 8017026:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801702a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801702e:	f7f7 f961 	bl	800e2f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017032:	2800      	cmp	r0, #0
 8017034:	d05f      	beq.n	80170f6 <rmw_wait+0x20a>
 8017036:	f8d9 3000 	ldr.w	r3, [r9]
 801703a:	3401      	adds	r4, #1
 801703c:	42a3      	cmp	r3, r4
 801703e:	f04f 0701 	mov.w	r7, #1
 8017042:	d8f0      	bhi.n	8017026 <rmw_wait+0x13a>
 8017044:	f1b8 0f00 	cmp.w	r8, #0
 8017048:	d012      	beq.n	8017070 <rmw_wait+0x184>
 801704a:	f8d8 3000 	ldr.w	r3, [r8]
 801704e:	b17b      	cbz	r3, 8017070 <rmw_wait+0x184>
 8017050:	2400      	movs	r4, #0
 8017052:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017056:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801705a:	f7f7 f94b 	bl	800e2f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801705e:	2800      	cmp	r0, #0
 8017060:	d051      	beq.n	8017106 <rmw_wait+0x21a>
 8017062:	f8d8 3000 	ldr.w	r3, [r8]
 8017066:	3401      	adds	r4, #1
 8017068:	42a3      	cmp	r3, r4
 801706a:	f04f 0701 	mov.w	r7, #1
 801706e:	d8f0      	bhi.n	8017052 <rmw_wait+0x166>
 8017070:	b1dd      	cbz	r5, 80170aa <rmw_wait+0x1be>
 8017072:	682b      	ldr	r3, [r5, #0]
 8017074:	b1cb      	cbz	r3, 80170aa <rmw_wait+0x1be>
 8017076:	2400      	movs	r4, #0
 8017078:	686b      	ldr	r3, [r5, #4]
 801707a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801707e:	f7f7 f939 	bl	800e2f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017082:	b158      	cbz	r0, 801709c <rmw_wait+0x1b0>
 8017084:	682b      	ldr	r3, [r5, #0]
 8017086:	3401      	adds	r4, #1
 8017088:	42a3      	cmp	r3, r4
 801708a:	d969      	bls.n	8017160 <rmw_wait+0x274>
 801708c:	686b      	ldr	r3, [r5, #4]
 801708e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017092:	2701      	movs	r7, #1
 8017094:	f7f7 f92e 	bl	800e2f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017098:	2800      	cmp	r0, #0
 801709a:	d1f3      	bne.n	8017084 <rmw_wait+0x198>
 801709c:	e9d5 3200 	ldrd	r3, r2, [r5]
 80170a0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80170a4:	3401      	adds	r4, #1
 80170a6:	42a3      	cmp	r3, r4
 80170a8:	d8e6      	bhi.n	8017078 <rmw_wait+0x18c>
 80170aa:	b1a6      	cbz	r6, 80170d6 <rmw_wait+0x1ea>
 80170ac:	6834      	ldr	r4, [r6, #0]
 80170ae:	b194      	cbz	r4, 80170d6 <rmw_wait+0x1ea>
 80170b0:	2300      	movs	r3, #0
 80170b2:	461d      	mov	r5, r3
 80170b4:	e004      	b.n	80170c0 <rmw_wait+0x1d4>
 80170b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80170ba:	3301      	adds	r3, #1
 80170bc:	42a3      	cmp	r3, r4
 80170be:	d00a      	beq.n	80170d6 <rmw_wait+0x1ea>
 80170c0:	6870      	ldr	r0, [r6, #4]
 80170c2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80170c6:	7c0a      	ldrb	r2, [r1, #16]
 80170c8:	2a00      	cmp	r2, #0
 80170ca:	d0f4      	beq.n	80170b6 <rmw_wait+0x1ca>
 80170cc:	3301      	adds	r3, #1
 80170ce:	42a3      	cmp	r3, r4
 80170d0:	740d      	strb	r5, [r1, #16]
 80170d2:	4617      	mov	r7, r2
 80170d4:	d1f4      	bne.n	80170c0 <rmw_wait+0x1d4>
 80170d6:	2f00      	cmp	r7, #0
 80170d8:	d03e      	beq.n	8017158 <rmw_wait+0x26c>
 80170da:	2000      	movs	r0, #0
 80170dc:	b009      	add	sp, #36	@ 0x24
 80170de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170e2:	68a0      	ldr	r0, [r4, #8]
 80170e4:	2100      	movs	r1, #0
 80170e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80170ea:	f7f9 fe7f 	bl	8010dec <uxr_run_session_timeout>
 80170ee:	6864      	ldr	r4, [r4, #4]
 80170f0:	2c00      	cmp	r4, #0
 80170f2:	d1f6      	bne.n	80170e2 <rmw_wait+0x1f6>
 80170f4:	e78c      	b.n	8017010 <rmw_wait+0x124>
 80170f6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80170fa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80170fe:	3401      	adds	r4, #1
 8017100:	42a3      	cmp	r3, r4
 8017102:	d890      	bhi.n	8017026 <rmw_wait+0x13a>
 8017104:	e79e      	b.n	8017044 <rmw_wait+0x158>
 8017106:	e9d8 3200 	ldrd	r3, r2, [r8]
 801710a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801710e:	3401      	adds	r4, #1
 8017110:	429c      	cmp	r4, r3
 8017112:	d39e      	bcc.n	8017052 <rmw_wait+0x166>
 8017114:	e7ac      	b.n	8017070 <rmw_wait+0x184>
 8017116:	2b00      	cmp	r3, #0
 8017118:	f47f aef3 	bne.w	8016f02 <rmw_wait+0x16>
 801711c:	2800      	cmp	r0, #0
 801711e:	f47f aef0 	bne.w	8016f02 <rmw_wait+0x16>
 8017122:	2900      	cmp	r1, #0
 8017124:	f47f aeed 	bne.w	8016f02 <rmw_wait+0x16>
 8017128:	e7d7      	b.n	80170da <rmw_wait+0x1ee>
 801712a:	4639      	mov	r1, r7
 801712c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017130:	f7f9 fe76 	bl	8010e20 <uxr_run_session_until_data>
 8017134:	6864      	ldr	r4, [r4, #4]
 8017136:	2c00      	cmp	r4, #0
 8017138:	f47f af5f 	bne.w	8016ffa <rmw_wait+0x10e>
 801713c:	e768      	b.n	8017010 <rmw_wait+0x124>
 801713e:	f1b8 0f00 	cmp.w	r8, #0
 8017142:	d032      	beq.n	80171aa <rmw_wait+0x2be>
 8017144:	f8d8 3000 	ldr.w	r3, [r8]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d181      	bne.n	8017050 <rmw_wait+0x164>
 801714c:	461f      	mov	r7, r3
 801714e:	2d00      	cmp	r5, #0
 8017150:	d18f      	bne.n	8017072 <rmw_wait+0x186>
 8017152:	462f      	mov	r7, r5
 8017154:	2e00      	cmp	r6, #0
 8017156:	d1a9      	bne.n	80170ac <rmw_wait+0x1c0>
 8017158:	2002      	movs	r0, #2
 801715a:	b009      	add	sp, #36	@ 0x24
 801715c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017160:	2e00      	cmp	r6, #0
 8017162:	d0ba      	beq.n	80170da <rmw_wait+0x1ee>
 8017164:	6834      	ldr	r4, [r6, #0]
 8017166:	2701      	movs	r7, #1
 8017168:	2c00      	cmp	r4, #0
 801716a:	d1a1      	bne.n	80170b0 <rmw_wait+0x1c4>
 801716c:	e7b5      	b.n	80170da <rmw_wait+0x1ee>
 801716e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017172:	f7ff f9d5 	bl	8016520 <rmw_time_total_nsec>
 8017176:	2300      	movs	r3, #0
 8017178:	4a13      	ldr	r2, [pc, #76]	@ (80171c8 <rmw_wait+0x2dc>)
 801717a:	f7e9 fac5 	bl	8000708 <__aeabi_uldivmod>
 801717e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017182:	f171 0300 	sbcs.w	r3, r1, #0
 8017186:	4607      	mov	r7, r0
 8017188:	bfa8      	it	ge
 801718a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801718e:	e6c9      	b.n	8016f24 <rmw_wait+0x38>
 8017190:	f1b8 0f00 	cmp.w	r8, #0
 8017194:	d009      	beq.n	80171aa <rmw_wait+0x2be>
 8017196:	f8d8 3000 	ldr.w	r3, [r8]
 801719a:	464f      	mov	r7, r9
 801719c:	2b00      	cmp	r3, #0
 801719e:	f47f af57 	bne.w	8017050 <rmw_wait+0x164>
 80171a2:	2d00      	cmp	r5, #0
 80171a4:	f47f af65 	bne.w	8017072 <rmw_wait+0x186>
 80171a8:	e7d3      	b.n	8017152 <rmw_wait+0x266>
 80171aa:	b17d      	cbz	r5, 80171cc <rmw_wait+0x2e0>
 80171ac:	682b      	ldr	r3, [r5, #0]
 80171ae:	4647      	mov	r7, r8
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	f47f af60 	bne.w	8017076 <rmw_wait+0x18a>
 80171b6:	2e00      	cmp	r6, #0
 80171b8:	f47f af78 	bne.w	80170ac <rmw_wait+0x1c0>
 80171bc:	e7cc      	b.n	8017158 <rmw_wait+0x26c>
 80171be:	bf00      	nop
 80171c0:	0801a508 	.word	0x0801a508
 80171c4:	2000aec4 	.word	0x2000aec4
 80171c8:	000f4240 	.word	0x000f4240
 80171cc:	2e00      	cmp	r6, #0
 80171ce:	d0c3      	beq.n	8017158 <rmw_wait+0x26c>
 80171d0:	6834      	ldr	r4, [r6, #0]
 80171d2:	462f      	mov	r7, r5
 80171d4:	2c00      	cmp	r4, #0
 80171d6:	f47f af6b 	bne.w	80170b0 <rmw_wait+0x1c4>
 80171da:	e7bd      	b.n	8017158 <rmw_wait+0x26c>

080171dc <rmw_create_wait_set>:
 80171dc:	b508      	push	{r3, lr}
 80171de:	4803      	ldr	r0, [pc, #12]	@ (80171ec <rmw_create_wait_set+0x10>)
 80171e0:	f7ff fbfe 	bl	80169e0 <get_memory>
 80171e4:	b108      	cbz	r0, 80171ea <rmw_create_wait_set+0xe>
 80171e6:	6880      	ldr	r0, [r0, #8]
 80171e8:	3010      	adds	r0, #16
 80171ea:	bd08      	pop	{r3, pc}
 80171ec:	2000af04 	.word	0x2000af04

080171f0 <rmw_destroy_wait_set>:
 80171f0:	b508      	push	{r3, lr}
 80171f2:	4b08      	ldr	r3, [pc, #32]	@ (8017214 <rmw_destroy_wait_set+0x24>)
 80171f4:	6819      	ldr	r1, [r3, #0]
 80171f6:	b911      	cbnz	r1, 80171fe <rmw_destroy_wait_set+0xe>
 80171f8:	e00a      	b.n	8017210 <rmw_destroy_wait_set+0x20>
 80171fa:	6849      	ldr	r1, [r1, #4]
 80171fc:	b141      	cbz	r1, 8017210 <rmw_destroy_wait_set+0x20>
 80171fe:	688b      	ldr	r3, [r1, #8]
 8017200:	3310      	adds	r3, #16
 8017202:	4298      	cmp	r0, r3
 8017204:	d1f9      	bne.n	80171fa <rmw_destroy_wait_set+0xa>
 8017206:	4803      	ldr	r0, [pc, #12]	@ (8017214 <rmw_destroy_wait_set+0x24>)
 8017208:	f7ff fbfa 	bl	8016a00 <put_memory>
 801720c:	2000      	movs	r0, #0
 801720e:	bd08      	pop	{r3, pc}
 8017210:	2001      	movs	r0, #1
 8017212:	bd08      	pop	{r3, pc}
 8017214:	2000af04 	.word	0x2000af04

08017218 <rosidl_runtime_c__double__Sequence__init>:
 8017218:	b530      	push	{r4, r5, lr}
 801721a:	4604      	mov	r4, r0
 801721c:	b087      	sub	sp, #28
 801721e:	b130      	cbz	r0, 801722e <rosidl_runtime_c__double__Sequence__init+0x16>
 8017220:	460d      	mov	r5, r1
 8017222:	b931      	cbnz	r1, 8017232 <rosidl_runtime_c__double__Sequence__init+0x1a>
 8017224:	4608      	mov	r0, r1
 8017226:	e9c4 0500 	strd	r0, r5, [r4]
 801722a:	60a5      	str	r5, [r4, #8]
 801722c:	2001      	movs	r0, #1
 801722e:	b007      	add	sp, #28
 8017230:	bd30      	pop	{r4, r5, pc}
 8017232:	a801      	add	r0, sp, #4
 8017234:	f7f5 ff40 	bl	800d0b8 <rcutils_get_default_allocator>
 8017238:	9b01      	ldr	r3, [sp, #4]
 801723a:	9905      	ldr	r1, [sp, #20]
 801723c:	00e8      	lsls	r0, r5, #3
 801723e:	4798      	blx	r3
 8017240:	2800      	cmp	r0, #0
 8017242:	d1f0      	bne.n	8017226 <rosidl_runtime_c__double__Sequence__init+0xe>
 8017244:	e7f3      	b.n	801722e <rosidl_runtime_c__double__Sequence__init+0x16>
 8017246:	bf00      	nop

08017248 <rosidl_runtime_c__double__Sequence__fini>:
 8017248:	b188      	cbz	r0, 801726e <rosidl_runtime_c__double__Sequence__fini+0x26>
 801724a:	b510      	push	{r4, lr}
 801724c:	6803      	ldr	r3, [r0, #0]
 801724e:	b086      	sub	sp, #24
 8017250:	4604      	mov	r4, r0
 8017252:	b153      	cbz	r3, 801726a <rosidl_runtime_c__double__Sequence__fini+0x22>
 8017254:	a801      	add	r0, sp, #4
 8017256:	f7f5 ff2f 	bl	800d0b8 <rcutils_get_default_allocator>
 801725a:	9b02      	ldr	r3, [sp, #8]
 801725c:	9905      	ldr	r1, [sp, #20]
 801725e:	6820      	ldr	r0, [r4, #0]
 8017260:	4798      	blx	r3
 8017262:	2300      	movs	r3, #0
 8017264:	e9c4 3300 	strd	r3, r3, [r4]
 8017268:	60a3      	str	r3, [r4, #8]
 801726a:	b006      	add	sp, #24
 801726c:	bd10      	pop	{r4, pc}
 801726e:	4770      	bx	lr

08017270 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8017270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017274:	6805      	ldr	r5, [r0, #0]
 8017276:	4604      	mov	r4, r0
 8017278:	4628      	mov	r0, r5
 801727a:	460e      	mov	r6, r1
 801727c:	f7e8 ffd0 	bl	8000220 <strcmp>
 8017280:	b1c8      	cbz	r0, 80172b6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8017282:	4b11      	ldr	r3, [pc, #68]	@ (80172c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	429d      	cmp	r5, r3
 8017288:	d112      	bne.n	80172b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801728a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801728e:	f8d8 4000 	ldr.w	r4, [r8]
 8017292:	b16c      	cbz	r4, 80172b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8017294:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017298:	2700      	movs	r7, #0
 801729a:	3d04      	subs	r5, #4
 801729c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80172a0:	4631      	mov	r1, r6
 80172a2:	f7e8 ffbd 	bl	8000220 <strcmp>
 80172a6:	00bb      	lsls	r3, r7, #2
 80172a8:	b140      	cbz	r0, 80172bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80172aa:	3701      	adds	r7, #1
 80172ac:	42bc      	cmp	r4, r7
 80172ae:	d1f5      	bne.n	801729c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80172b0:	2000      	movs	r0, #0
 80172b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172b6:	4620      	mov	r0, r4
 80172b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80172c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172c4:	58d3      	ldr	r3, [r2, r3]
 80172c6:	4718      	bx	r3
 80172c8:	200001b0 	.word	0x200001b0

080172cc <std_msgs__msg__Float64MultiArray__init>:
 80172cc:	b570      	push	{r4, r5, r6, lr}
 80172ce:	4605      	mov	r5, r0
 80172d0:	b1b0      	cbz	r0, 8017300 <std_msgs__msg__Float64MultiArray__init+0x34>
 80172d2:	f000 f8b5 	bl	8017440 <std_msgs__msg__MultiArrayLayout__init>
 80172d6:	4604      	mov	r4, r0
 80172d8:	b148      	cbz	r0, 80172ee <std_msgs__msg__Float64MultiArray__init+0x22>
 80172da:	f105 0610 	add.w	r6, r5, #16
 80172de:	2100      	movs	r1, #0
 80172e0:	4630      	mov	r0, r6
 80172e2:	f7ff ff99 	bl	8017218 <rosidl_runtime_c__double__Sequence__init>
 80172e6:	4604      	mov	r4, r0
 80172e8:	b168      	cbz	r0, 8017306 <std_msgs__msg__Float64MultiArray__init+0x3a>
 80172ea:	4620      	mov	r0, r4
 80172ec:	bd70      	pop	{r4, r5, r6, pc}
 80172ee:	4628      	mov	r0, r5
 80172f0:	f000 f8b8 	bl	8017464 <std_msgs__msg__MultiArrayLayout__fini>
 80172f4:	f105 0010 	add.w	r0, r5, #16
 80172f8:	f7ff ffa6 	bl	8017248 <rosidl_runtime_c__double__Sequence__fini>
 80172fc:	4620      	mov	r0, r4
 80172fe:	bd70      	pop	{r4, r5, r6, pc}
 8017300:	4604      	mov	r4, r0
 8017302:	4620      	mov	r0, r4
 8017304:	bd70      	pop	{r4, r5, r6, pc}
 8017306:	4628      	mov	r0, r5
 8017308:	f000 f8ac 	bl	8017464 <std_msgs__msg__MultiArrayLayout__fini>
 801730c:	4630      	mov	r0, r6
 801730e:	f7ff ff9b 	bl	8017248 <rosidl_runtime_c__double__Sequence__fini>
 8017312:	e7ea      	b.n	80172ea <std_msgs__msg__Float64MultiArray__init+0x1e>

08017314 <std_msgs__msg__Float64MultiArray__fini>:
 8017314:	b148      	cbz	r0, 801732a <std_msgs__msg__Float64MultiArray__fini+0x16>
 8017316:	b510      	push	{r4, lr}
 8017318:	4604      	mov	r4, r0
 801731a:	f000 f8a3 	bl	8017464 <std_msgs__msg__MultiArrayLayout__fini>
 801731e:	f104 0010 	add.w	r0, r4, #16
 8017322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017326:	f7ff bf8f 	b.w	8017248 <rosidl_runtime_c__double__Sequence__fini>
 801732a:	4770      	bx	lr

0801732c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 801732c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017330:	b086      	sub	sp, #24
 8017332:	4682      	mov	sl, r0
 8017334:	4689      	mov	r9, r1
 8017336:	a801      	add	r0, sp, #4
 8017338:	f7f5 febe 	bl	800d0b8 <rcutils_get_default_allocator>
 801733c:	f1b9 0f00 	cmp.w	r9, #0
 8017340:	d02f      	beq.n	80173a2 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 8017342:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 8017346:	2114      	movs	r1, #20
 8017348:	4642      	mov	r2, r8
 801734a:	4648      	mov	r0, r9
 801734c:	4798      	blx	r3
 801734e:	4607      	mov	r7, r0
 8017350:	b388      	cbz	r0, 80173b6 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x8a>
 8017352:	4606      	mov	r6, r0
 8017354:	2400      	movs	r4, #0
 8017356:	e004      	b.n	8017362 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x36>
 8017358:	3401      	adds	r4, #1
 801735a:	45a1      	cmp	r9, r4
 801735c:	f106 0614 	add.w	r6, r6, #20
 8017360:	d020      	beq.n	80173a4 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 8017362:	4630      	mov	r0, r6
 8017364:	f001 fc2e 	bl	8018bc4 <rosidl_runtime_c__String__init>
 8017368:	4605      	mov	r5, r0
 801736a:	2800      	cmp	r0, #0
 801736c:	d1f4      	bne.n	8017358 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 801736e:	4630      	mov	r0, r6
 8017370:	f001 fc3e 	bl	8018bf0 <rosidl_runtime_c__String__fini>
 8017374:	45a1      	cmp	r9, r4
 8017376:	d915      	bls.n	80173a4 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 8017378:	b15c      	cbz	r4, 8017392 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x66>
 801737a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801737e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8017382:	3c14      	subs	r4, #20
 8017384:	4620      	mov	r0, r4
 8017386:	f001 fc33 	bl	8018bf0 <rosidl_runtime_c__String__fini>
 801738a:	42a7      	cmp	r7, r4
 801738c:	f1a4 0414 	sub.w	r4, r4, #20
 8017390:	d1f8      	bne.n	8017384 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x58>
 8017392:	4638      	mov	r0, r7
 8017394:	9b02      	ldr	r3, [sp, #8]
 8017396:	4641      	mov	r1, r8
 8017398:	4798      	blx	r3
 801739a:	4628      	mov	r0, r5
 801739c:	b006      	add	sp, #24
 801739e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173a2:	464f      	mov	r7, r9
 80173a4:	e9ca 7900 	strd	r7, r9, [sl]
 80173a8:	f8ca 9008 	str.w	r9, [sl, #8]
 80173ac:	2501      	movs	r5, #1
 80173ae:	4628      	mov	r0, r5
 80173b0:	b006      	add	sp, #24
 80173b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173b6:	4605      	mov	r5, r0
 80173b8:	e7f9      	b.n	80173ae <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x82>
 80173ba:	bf00      	nop

080173bc <std_msgs__msg__MultiArrayDimension__init>:
 80173bc:	b538      	push	{r3, r4, r5, lr}
 80173be:	4604      	mov	r4, r0
 80173c0:	b128      	cbz	r0, 80173ce <std_msgs__msg__MultiArrayDimension__init+0x12>
 80173c2:	f001 fbff 	bl	8018bc4 <rosidl_runtime_c__String__init>
 80173c6:	4605      	mov	r5, r0
 80173c8:	b120      	cbz	r0, 80173d4 <std_msgs__msg__MultiArrayDimension__init+0x18>
 80173ca:	4628      	mov	r0, r5
 80173cc:	bd38      	pop	{r3, r4, r5, pc}
 80173ce:	4605      	mov	r5, r0
 80173d0:	4628      	mov	r0, r5
 80173d2:	bd38      	pop	{r3, r4, r5, pc}
 80173d4:	4620      	mov	r0, r4
 80173d6:	f001 fc0b 	bl	8018bf0 <rosidl_runtime_c__String__fini>
 80173da:	4628      	mov	r0, r5
 80173dc:	bd38      	pop	{r3, r4, r5, pc}
 80173de:	bf00      	nop

080173e0 <std_msgs__msg__MultiArrayDimension__fini>:
 80173e0:	b108      	cbz	r0, 80173e6 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 80173e2:	f001 bc05 	b.w	8018bf0 <rosidl_runtime_c__String__fini>
 80173e6:	4770      	bx	lr

080173e8 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 80173e8:	b108      	cbz	r0, 80173ee <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 80173ea:	f7ff bf9f 	b.w	801732c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 80173ee:	4770      	bx	lr

080173f0 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 80173f0:	b320      	cbz	r0, 801743c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 80173f2:	b530      	push	{r4, r5, lr}
 80173f4:	4605      	mov	r5, r0
 80173f6:	b087      	sub	sp, #28
 80173f8:	a801      	add	r0, sp, #4
 80173fa:	f7f5 fe5d 	bl	800d0b8 <rcutils_get_default_allocator>
 80173fe:	682a      	ldr	r2, [r5, #0]
 8017400:	b1b2      	cbz	r2, 8017430 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 8017402:	68a9      	ldr	r1, [r5, #8]
 8017404:	b161      	cbz	r1, 8017420 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8017406:	2400      	movs	r4, #0
 8017408:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801740c:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8017410:	d010      	beq.n	8017434 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 8017412:	f001 fbed 	bl	8018bf0 <rosidl_runtime_c__String__fini>
 8017416:	68a9      	ldr	r1, [r5, #8]
 8017418:	682a      	ldr	r2, [r5, #0]
 801741a:	3401      	adds	r4, #1
 801741c:	428c      	cmp	r4, r1
 801741e:	d3f3      	bcc.n	8017408 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8017420:	9b02      	ldr	r3, [sp, #8]
 8017422:	9905      	ldr	r1, [sp, #20]
 8017424:	4610      	mov	r0, r2
 8017426:	4798      	blx	r3
 8017428:	2300      	movs	r3, #0
 801742a:	e9c5 3300 	strd	r3, r3, [r5]
 801742e:	60ab      	str	r3, [r5, #8]
 8017430:	b007      	add	sp, #28
 8017432:	bd30      	pop	{r4, r5, pc}
 8017434:	3401      	adds	r4, #1
 8017436:	428c      	cmp	r4, r1
 8017438:	d3e6      	bcc.n	8017408 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 801743a:	e7f1      	b.n	8017420 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 801743c:	4770      	bx	lr
 801743e:	bf00      	nop

08017440 <std_msgs__msg__MultiArrayLayout__init>:
 8017440:	b538      	push	{r3, r4, r5, lr}
 8017442:	4604      	mov	r4, r0
 8017444:	b130      	cbz	r0, 8017454 <std_msgs__msg__MultiArrayLayout__init+0x14>
 8017446:	2100      	movs	r1, #0
 8017448:	f7ff ffce 	bl	80173e8 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 801744c:	4605      	mov	r5, r0
 801744e:	b120      	cbz	r0, 801745a <std_msgs__msg__MultiArrayLayout__init+0x1a>
 8017450:	4628      	mov	r0, r5
 8017452:	bd38      	pop	{r3, r4, r5, pc}
 8017454:	4605      	mov	r5, r0
 8017456:	4628      	mov	r0, r5
 8017458:	bd38      	pop	{r3, r4, r5, pc}
 801745a:	4620      	mov	r0, r4
 801745c:	f7ff ffc8 	bl	80173f0 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8017460:	4628      	mov	r0, r5
 8017462:	bd38      	pop	{r3, r4, r5, pc}

08017464 <std_msgs__msg__MultiArrayLayout__fini>:
 8017464:	b108      	cbz	r0, 801746a <std_msgs__msg__MultiArrayLayout__fini+0x6>
 8017466:	f7ff bfc3 	b.w	80173f0 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801746a:	4770      	bx	lr

0801746c <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 801746c:	f7ff bfa6 	b.w	80173bc <std_msgs__msg__MultiArrayDimension__init>

08017470 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 8017470:	f7ff bfb6 	b.w	80173e0 <std_msgs__msg__MultiArrayDimension__fini>

08017474 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8017474:	4b04      	ldr	r3, [pc, #16]	@ (8017488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8017476:	681a      	ldr	r2, [r3, #0]
 8017478:	b10a      	cbz	r2, 801747e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 801747a:	4803      	ldr	r0, [pc, #12]	@ (8017488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801747c:	4770      	bx	lr
 801747e:	4a03      	ldr	r2, [pc, #12]	@ (801748c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 8017480:	4801      	ldr	r0, [pc, #4]	@ (8017488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8017482:	6812      	ldr	r2, [r2, #0]
 8017484:	601a      	str	r2, [r3, #0]
 8017486:	4770      	bx	lr
 8017488:	2000026c 	.word	0x2000026c
 801748c:	200001b4 	.word	0x200001b4

08017490 <_MultiArrayDimension__cdr_serialize>:
 8017490:	b1d0      	cbz	r0, 80174c8 <_MultiArrayDimension__cdr_serialize+0x38>
 8017492:	b570      	push	{r4, r5, r6, lr}
 8017494:	6806      	ldr	r6, [r0, #0]
 8017496:	460d      	mov	r5, r1
 8017498:	4604      	mov	r4, r0
 801749a:	b196      	cbz	r6, 80174c2 <_MultiArrayDimension__cdr_serialize+0x32>
 801749c:	4630      	mov	r0, r6
 801749e:	f7e8 fec9 	bl	8000234 <strlen>
 80174a2:	1c42      	adds	r2, r0, #1
 80174a4:	4631      	mov	r1, r6
 80174a6:	6060      	str	r0, [r4, #4]
 80174a8:	4628      	mov	r0, r5
 80174aa:	f7f8 fc33 	bl	800fd14 <ucdr_serialize_sequence_char>
 80174ae:	68e1      	ldr	r1, [r4, #12]
 80174b0:	4628      	mov	r0, r5
 80174b2:	f7f7 fc89 	bl	800edc8 <ucdr_serialize_uint32_t>
 80174b6:	6921      	ldr	r1, [r4, #16]
 80174b8:	4628      	mov	r0, r5
 80174ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80174be:	f7f7 bc83 	b.w	800edc8 <ucdr_serialize_uint32_t>
 80174c2:	4632      	mov	r2, r6
 80174c4:	4630      	mov	r0, r6
 80174c6:	e7ed      	b.n	80174a4 <_MultiArrayDimension__cdr_serialize+0x14>
 80174c8:	4770      	bx	lr
 80174ca:	bf00      	nop

080174cc <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 80174cc:	b570      	push	{r4, r5, r6, lr}
 80174ce:	4604      	mov	r4, r0
 80174d0:	b1b0      	cbz	r0, 8017500 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 80174d2:	460d      	mov	r5, r1
 80174d4:	4628      	mov	r0, r5
 80174d6:	2104      	movs	r1, #4
 80174d8:	f7f8 fbb0 	bl	800fc3c <ucdr_alignment>
 80174dc:	6866      	ldr	r6, [r4, #4]
 80174de:	1d6b      	adds	r3, r5, #5
 80174e0:	4433      	add	r3, r6
 80174e2:	181e      	adds	r6, r3, r0
 80174e4:	2104      	movs	r1, #4
 80174e6:	4630      	mov	r0, r6
 80174e8:	f7f8 fba8 	bl	800fc3c <ucdr_alignment>
 80174ec:	1d04      	adds	r4, r0, #4
 80174ee:	4434      	add	r4, r6
 80174f0:	2104      	movs	r1, #4
 80174f2:	4620      	mov	r0, r4
 80174f4:	f7f8 fba2 	bl	800fc3c <ucdr_alignment>
 80174f8:	f1c5 0504 	rsb	r5, r5, #4
 80174fc:	4428      	add	r0, r5
 80174fe:	4420      	add	r0, r4
 8017500:	bd70      	pop	{r4, r5, r6, pc}
 8017502:	bf00      	nop

08017504 <_MultiArrayDimension__cdr_deserialize>:
 8017504:	b570      	push	{r4, r5, r6, lr}
 8017506:	460c      	mov	r4, r1
 8017508:	b082      	sub	sp, #8
 801750a:	b1d9      	cbz	r1, 8017544 <_MultiArrayDimension__cdr_deserialize+0x40>
 801750c:	688e      	ldr	r6, [r1, #8]
 801750e:	6809      	ldr	r1, [r1, #0]
 8017510:	ab01      	add	r3, sp, #4
 8017512:	4632      	mov	r2, r6
 8017514:	4605      	mov	r5, r0
 8017516:	f7f8 fc0f 	bl	800fd38 <ucdr_deserialize_sequence_char>
 801751a:	9b01      	ldr	r3, [sp, #4]
 801751c:	b970      	cbnz	r0, 801753c <_MultiArrayDimension__cdr_deserialize+0x38>
 801751e:	429e      	cmp	r6, r3
 8017520:	d313      	bcc.n	801754a <_MultiArrayDimension__cdr_deserialize+0x46>
 8017522:	f104 010c 	add.w	r1, r4, #12
 8017526:	4628      	mov	r0, r5
 8017528:	f7f7 fd7e 	bl	800f028 <ucdr_deserialize_uint32_t>
 801752c:	f104 0110 	add.w	r1, r4, #16
 8017530:	4628      	mov	r0, r5
 8017532:	b002      	add	sp, #8
 8017534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017538:	f7f7 bd76 	b.w	800f028 <ucdr_deserialize_uint32_t>
 801753c:	b103      	cbz	r3, 8017540 <_MultiArrayDimension__cdr_deserialize+0x3c>
 801753e:	3b01      	subs	r3, #1
 8017540:	6063      	str	r3, [r4, #4]
 8017542:	e7ee      	b.n	8017522 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8017544:	4608      	mov	r0, r1
 8017546:	b002      	add	sp, #8
 8017548:	bd70      	pop	{r4, r5, r6, pc}
 801754a:	2101      	movs	r1, #1
 801754c:	75a8      	strb	r0, [r5, #22]
 801754e:	7569      	strb	r1, [r5, #21]
 8017550:	6060      	str	r0, [r4, #4]
 8017552:	4628      	mov	r0, r5
 8017554:	f7f8 fb88 	bl	800fc68 <ucdr_align_to>
 8017558:	9901      	ldr	r1, [sp, #4]
 801755a:	4628      	mov	r0, r5
 801755c:	f7f8 fbba 	bl	800fcd4 <ucdr_advance_buffer>
 8017560:	e7df      	b.n	8017522 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8017562:	bf00      	nop

08017564 <_MultiArrayDimension__max_serialized_size>:
 8017564:	b510      	push	{r4, lr}
 8017566:	2104      	movs	r1, #4
 8017568:	2000      	movs	r0, #0
 801756a:	f7f8 fb67 	bl	800fc3c <ucdr_alignment>
 801756e:	1d04      	adds	r4, r0, #4
 8017570:	2104      	movs	r1, #4
 8017572:	4620      	mov	r0, r4
 8017574:	f7f8 fb62 	bl	800fc3c <ucdr_alignment>
 8017578:	3004      	adds	r0, #4
 801757a:	4420      	add	r0, r4
 801757c:	bd10      	pop	{r4, pc}
 801757e:	bf00      	nop

08017580 <_MultiArrayDimension__get_serialized_size>:
 8017580:	b510      	push	{r4, lr}
 8017582:	4604      	mov	r4, r0
 8017584:	b190      	cbz	r0, 80175ac <_MultiArrayDimension__get_serialized_size+0x2c>
 8017586:	2104      	movs	r1, #4
 8017588:	2000      	movs	r0, #0
 801758a:	f7f8 fb57 	bl	800fc3c <ucdr_alignment>
 801758e:	6863      	ldr	r3, [r4, #4]
 8017590:	3305      	adds	r3, #5
 8017592:	181c      	adds	r4, r3, r0
 8017594:	2104      	movs	r1, #4
 8017596:	4620      	mov	r0, r4
 8017598:	f7f8 fb50 	bl	800fc3c <ucdr_alignment>
 801759c:	3004      	adds	r0, #4
 801759e:	4404      	add	r4, r0
 80175a0:	2104      	movs	r1, #4
 80175a2:	4620      	mov	r0, r4
 80175a4:	f7f8 fb4a 	bl	800fc3c <ucdr_alignment>
 80175a8:	3004      	adds	r0, #4
 80175aa:	4420      	add	r0, r4
 80175ac:	bd10      	pop	{r4, pc}
 80175ae:	bf00      	nop

080175b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80175b0:	4800      	ldr	r0, [pc, #0]	@ (80175b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 80175b2:	4770      	bx	lr
 80175b4:	20000278 	.word	0x20000278

080175b8 <ucdr_serialize_endian_array_char>:
 80175b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175bc:	4619      	mov	r1, r3
 80175be:	461f      	mov	r7, r3
 80175c0:	4605      	mov	r5, r0
 80175c2:	4690      	mov	r8, r2
 80175c4:	f7f8 fae2 	bl	800fb8c <ucdr_check_buffer_available_for>
 80175c8:	b9e0      	cbnz	r0, 8017604 <ucdr_serialize_endian_array_char+0x4c>
 80175ca:	463e      	mov	r6, r7
 80175cc:	e009      	b.n	80175e2 <ucdr_serialize_endian_array_char+0x2a>
 80175ce:	68a8      	ldr	r0, [r5, #8]
 80175d0:	f002 f90f 	bl	80197f2 <memcpy>
 80175d4:	68ab      	ldr	r3, [r5, #8]
 80175d6:	6928      	ldr	r0, [r5, #16]
 80175d8:	4423      	add	r3, r4
 80175da:	4420      	add	r0, r4
 80175dc:	1b36      	subs	r6, r6, r4
 80175de:	60ab      	str	r3, [r5, #8]
 80175e0:	6128      	str	r0, [r5, #16]
 80175e2:	4631      	mov	r1, r6
 80175e4:	2201      	movs	r2, #1
 80175e6:	4628      	mov	r0, r5
 80175e8:	f7f8 fb58 	bl	800fc9c <ucdr_check_final_buffer_behavior_array>
 80175ec:	1bb9      	subs	r1, r7, r6
 80175ee:	4441      	add	r1, r8
 80175f0:	4604      	mov	r4, r0
 80175f2:	4602      	mov	r2, r0
 80175f4:	2800      	cmp	r0, #0
 80175f6:	d1ea      	bne.n	80175ce <ucdr_serialize_endian_array_char+0x16>
 80175f8:	2301      	movs	r3, #1
 80175fa:	7da8      	ldrb	r0, [r5, #22]
 80175fc:	756b      	strb	r3, [r5, #21]
 80175fe:	4058      	eors	r0, r3
 8017600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017604:	463a      	mov	r2, r7
 8017606:	68a8      	ldr	r0, [r5, #8]
 8017608:	4641      	mov	r1, r8
 801760a:	f002 f8f2 	bl	80197f2 <memcpy>
 801760e:	68aa      	ldr	r2, [r5, #8]
 8017610:	692b      	ldr	r3, [r5, #16]
 8017612:	443a      	add	r2, r7
 8017614:	443b      	add	r3, r7
 8017616:	60aa      	str	r2, [r5, #8]
 8017618:	612b      	str	r3, [r5, #16]
 801761a:	e7ed      	b.n	80175f8 <ucdr_serialize_endian_array_char+0x40>

0801761c <ucdr_deserialize_endian_array_char>:
 801761c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017620:	4619      	mov	r1, r3
 8017622:	461f      	mov	r7, r3
 8017624:	4605      	mov	r5, r0
 8017626:	4690      	mov	r8, r2
 8017628:	f7f8 fab0 	bl	800fb8c <ucdr_check_buffer_available_for>
 801762c:	b9e0      	cbnz	r0, 8017668 <ucdr_deserialize_endian_array_char+0x4c>
 801762e:	463e      	mov	r6, r7
 8017630:	e009      	b.n	8017646 <ucdr_deserialize_endian_array_char+0x2a>
 8017632:	68a9      	ldr	r1, [r5, #8]
 8017634:	f002 f8dd 	bl	80197f2 <memcpy>
 8017638:	68ab      	ldr	r3, [r5, #8]
 801763a:	6928      	ldr	r0, [r5, #16]
 801763c:	4423      	add	r3, r4
 801763e:	4420      	add	r0, r4
 8017640:	1b36      	subs	r6, r6, r4
 8017642:	60ab      	str	r3, [r5, #8]
 8017644:	6128      	str	r0, [r5, #16]
 8017646:	2201      	movs	r2, #1
 8017648:	4631      	mov	r1, r6
 801764a:	4628      	mov	r0, r5
 801764c:	f7f8 fb26 	bl	800fc9c <ucdr_check_final_buffer_behavior_array>
 8017650:	4604      	mov	r4, r0
 8017652:	1bb8      	subs	r0, r7, r6
 8017654:	4440      	add	r0, r8
 8017656:	4622      	mov	r2, r4
 8017658:	2c00      	cmp	r4, #0
 801765a:	d1ea      	bne.n	8017632 <ucdr_deserialize_endian_array_char+0x16>
 801765c:	2301      	movs	r3, #1
 801765e:	7da8      	ldrb	r0, [r5, #22]
 8017660:	756b      	strb	r3, [r5, #21]
 8017662:	4058      	eors	r0, r3
 8017664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017668:	463a      	mov	r2, r7
 801766a:	68a9      	ldr	r1, [r5, #8]
 801766c:	4640      	mov	r0, r8
 801766e:	f002 f8c0 	bl	80197f2 <memcpy>
 8017672:	68aa      	ldr	r2, [r5, #8]
 8017674:	692b      	ldr	r3, [r5, #16]
 8017676:	443a      	add	r2, r7
 8017678:	443b      	add	r3, r7
 801767a:	60aa      	str	r2, [r5, #8]
 801767c:	612b      	str	r3, [r5, #16]
 801767e:	e7ed      	b.n	801765c <ucdr_deserialize_endian_array_char+0x40>

08017680 <ucdr_serialize_array_uint8_t>:
 8017680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017684:	4688      	mov	r8, r1
 8017686:	4611      	mov	r1, r2
 8017688:	4617      	mov	r7, r2
 801768a:	4605      	mov	r5, r0
 801768c:	f7f8 fa7e 	bl	800fb8c <ucdr_check_buffer_available_for>
 8017690:	b9e0      	cbnz	r0, 80176cc <ucdr_serialize_array_uint8_t+0x4c>
 8017692:	463e      	mov	r6, r7
 8017694:	e009      	b.n	80176aa <ucdr_serialize_array_uint8_t+0x2a>
 8017696:	68a8      	ldr	r0, [r5, #8]
 8017698:	f002 f8ab 	bl	80197f2 <memcpy>
 801769c:	68aa      	ldr	r2, [r5, #8]
 801769e:	692b      	ldr	r3, [r5, #16]
 80176a0:	4422      	add	r2, r4
 80176a2:	4423      	add	r3, r4
 80176a4:	1b36      	subs	r6, r6, r4
 80176a6:	60aa      	str	r2, [r5, #8]
 80176a8:	612b      	str	r3, [r5, #16]
 80176aa:	4631      	mov	r1, r6
 80176ac:	2201      	movs	r2, #1
 80176ae:	4628      	mov	r0, r5
 80176b0:	f7f8 faf4 	bl	800fc9c <ucdr_check_final_buffer_behavior_array>
 80176b4:	1bb9      	subs	r1, r7, r6
 80176b6:	4441      	add	r1, r8
 80176b8:	4604      	mov	r4, r0
 80176ba:	4602      	mov	r2, r0
 80176bc:	2800      	cmp	r0, #0
 80176be:	d1ea      	bne.n	8017696 <ucdr_serialize_array_uint8_t+0x16>
 80176c0:	2301      	movs	r3, #1
 80176c2:	7da8      	ldrb	r0, [r5, #22]
 80176c4:	756b      	strb	r3, [r5, #21]
 80176c6:	4058      	eors	r0, r3
 80176c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176cc:	463a      	mov	r2, r7
 80176ce:	68a8      	ldr	r0, [r5, #8]
 80176d0:	4641      	mov	r1, r8
 80176d2:	f002 f88e 	bl	80197f2 <memcpy>
 80176d6:	68aa      	ldr	r2, [r5, #8]
 80176d8:	692b      	ldr	r3, [r5, #16]
 80176da:	443a      	add	r2, r7
 80176dc:	443b      	add	r3, r7
 80176de:	60aa      	str	r2, [r5, #8]
 80176e0:	612b      	str	r3, [r5, #16]
 80176e2:	e7ed      	b.n	80176c0 <ucdr_serialize_array_uint8_t+0x40>

080176e4 <ucdr_serialize_endian_array_uint8_t>:
 80176e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176e8:	4619      	mov	r1, r3
 80176ea:	461f      	mov	r7, r3
 80176ec:	4605      	mov	r5, r0
 80176ee:	4690      	mov	r8, r2
 80176f0:	f7f8 fa4c 	bl	800fb8c <ucdr_check_buffer_available_for>
 80176f4:	b9e0      	cbnz	r0, 8017730 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80176f6:	463e      	mov	r6, r7
 80176f8:	e009      	b.n	801770e <ucdr_serialize_endian_array_uint8_t+0x2a>
 80176fa:	68a8      	ldr	r0, [r5, #8]
 80176fc:	f002 f879 	bl	80197f2 <memcpy>
 8017700:	68ab      	ldr	r3, [r5, #8]
 8017702:	6928      	ldr	r0, [r5, #16]
 8017704:	4423      	add	r3, r4
 8017706:	4420      	add	r0, r4
 8017708:	1b36      	subs	r6, r6, r4
 801770a:	60ab      	str	r3, [r5, #8]
 801770c:	6128      	str	r0, [r5, #16]
 801770e:	4631      	mov	r1, r6
 8017710:	2201      	movs	r2, #1
 8017712:	4628      	mov	r0, r5
 8017714:	f7f8 fac2 	bl	800fc9c <ucdr_check_final_buffer_behavior_array>
 8017718:	1bb9      	subs	r1, r7, r6
 801771a:	4441      	add	r1, r8
 801771c:	4604      	mov	r4, r0
 801771e:	4602      	mov	r2, r0
 8017720:	2800      	cmp	r0, #0
 8017722:	d1ea      	bne.n	80176fa <ucdr_serialize_endian_array_uint8_t+0x16>
 8017724:	2301      	movs	r3, #1
 8017726:	7da8      	ldrb	r0, [r5, #22]
 8017728:	756b      	strb	r3, [r5, #21]
 801772a:	4058      	eors	r0, r3
 801772c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017730:	463a      	mov	r2, r7
 8017732:	68a8      	ldr	r0, [r5, #8]
 8017734:	4641      	mov	r1, r8
 8017736:	f002 f85c 	bl	80197f2 <memcpy>
 801773a:	68aa      	ldr	r2, [r5, #8]
 801773c:	692b      	ldr	r3, [r5, #16]
 801773e:	443a      	add	r2, r7
 8017740:	443b      	add	r3, r7
 8017742:	60aa      	str	r2, [r5, #8]
 8017744:	612b      	str	r3, [r5, #16]
 8017746:	e7ed      	b.n	8017724 <ucdr_serialize_endian_array_uint8_t+0x40>

08017748 <ucdr_deserialize_array_uint8_t>:
 8017748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801774c:	4688      	mov	r8, r1
 801774e:	4611      	mov	r1, r2
 8017750:	4617      	mov	r7, r2
 8017752:	4605      	mov	r5, r0
 8017754:	f7f8 fa1a 	bl	800fb8c <ucdr_check_buffer_available_for>
 8017758:	b9e0      	cbnz	r0, 8017794 <ucdr_deserialize_array_uint8_t+0x4c>
 801775a:	463e      	mov	r6, r7
 801775c:	e009      	b.n	8017772 <ucdr_deserialize_array_uint8_t+0x2a>
 801775e:	68a9      	ldr	r1, [r5, #8]
 8017760:	f002 f847 	bl	80197f2 <memcpy>
 8017764:	68aa      	ldr	r2, [r5, #8]
 8017766:	692b      	ldr	r3, [r5, #16]
 8017768:	4422      	add	r2, r4
 801776a:	4423      	add	r3, r4
 801776c:	1b36      	subs	r6, r6, r4
 801776e:	60aa      	str	r2, [r5, #8]
 8017770:	612b      	str	r3, [r5, #16]
 8017772:	2201      	movs	r2, #1
 8017774:	4631      	mov	r1, r6
 8017776:	4628      	mov	r0, r5
 8017778:	f7f8 fa90 	bl	800fc9c <ucdr_check_final_buffer_behavior_array>
 801777c:	4604      	mov	r4, r0
 801777e:	1bb8      	subs	r0, r7, r6
 8017780:	4440      	add	r0, r8
 8017782:	4622      	mov	r2, r4
 8017784:	2c00      	cmp	r4, #0
 8017786:	d1ea      	bne.n	801775e <ucdr_deserialize_array_uint8_t+0x16>
 8017788:	2301      	movs	r3, #1
 801778a:	7da8      	ldrb	r0, [r5, #22]
 801778c:	756b      	strb	r3, [r5, #21]
 801778e:	4058      	eors	r0, r3
 8017790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017794:	463a      	mov	r2, r7
 8017796:	68a9      	ldr	r1, [r5, #8]
 8017798:	4640      	mov	r0, r8
 801779a:	f002 f82a 	bl	80197f2 <memcpy>
 801779e:	68aa      	ldr	r2, [r5, #8]
 80177a0:	692b      	ldr	r3, [r5, #16]
 80177a2:	443a      	add	r2, r7
 80177a4:	443b      	add	r3, r7
 80177a6:	60aa      	str	r2, [r5, #8]
 80177a8:	612b      	str	r3, [r5, #16]
 80177aa:	e7ed      	b.n	8017788 <ucdr_deserialize_array_uint8_t+0x40>

080177ac <ucdr_deserialize_endian_array_uint8_t>:
 80177ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177b0:	4619      	mov	r1, r3
 80177b2:	461f      	mov	r7, r3
 80177b4:	4605      	mov	r5, r0
 80177b6:	4690      	mov	r8, r2
 80177b8:	f7f8 f9e8 	bl	800fb8c <ucdr_check_buffer_available_for>
 80177bc:	b9e0      	cbnz	r0, 80177f8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80177be:	463e      	mov	r6, r7
 80177c0:	e009      	b.n	80177d6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80177c2:	68a9      	ldr	r1, [r5, #8]
 80177c4:	f002 f815 	bl	80197f2 <memcpy>
 80177c8:	68ab      	ldr	r3, [r5, #8]
 80177ca:	6928      	ldr	r0, [r5, #16]
 80177cc:	4423      	add	r3, r4
 80177ce:	4420      	add	r0, r4
 80177d0:	1b36      	subs	r6, r6, r4
 80177d2:	60ab      	str	r3, [r5, #8]
 80177d4:	6128      	str	r0, [r5, #16]
 80177d6:	2201      	movs	r2, #1
 80177d8:	4631      	mov	r1, r6
 80177da:	4628      	mov	r0, r5
 80177dc:	f7f8 fa5e 	bl	800fc9c <ucdr_check_final_buffer_behavior_array>
 80177e0:	4604      	mov	r4, r0
 80177e2:	1bb8      	subs	r0, r7, r6
 80177e4:	4440      	add	r0, r8
 80177e6:	4622      	mov	r2, r4
 80177e8:	2c00      	cmp	r4, #0
 80177ea:	d1ea      	bne.n	80177c2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80177ec:	2301      	movs	r3, #1
 80177ee:	7da8      	ldrb	r0, [r5, #22]
 80177f0:	756b      	strb	r3, [r5, #21]
 80177f2:	4058      	eors	r0, r3
 80177f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177f8:	463a      	mov	r2, r7
 80177fa:	68a9      	ldr	r1, [r5, #8]
 80177fc:	4640      	mov	r0, r8
 80177fe:	f001 fff8 	bl	80197f2 <memcpy>
 8017802:	68aa      	ldr	r2, [r5, #8]
 8017804:	692b      	ldr	r3, [r5, #16]
 8017806:	443a      	add	r2, r7
 8017808:	443b      	add	r3, r7
 801780a:	60aa      	str	r2, [r5, #8]
 801780c:	612b      	str	r3, [r5, #16]
 801780e:	e7ed      	b.n	80177ec <ucdr_deserialize_endian_array_uint8_t+0x40>

08017810 <ucdr_serialize_endian_array_double>:
 8017810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017814:	4688      	mov	r8, r1
 8017816:	2108      	movs	r1, #8
 8017818:	4604      	mov	r4, r0
 801781a:	4616      	mov	r6, r2
 801781c:	461f      	mov	r7, r3
 801781e:	f7f8 fa15 	bl	800fc4c <ucdr_buffer_alignment>
 8017822:	4601      	mov	r1, r0
 8017824:	4620      	mov	r0, r4
 8017826:	7d65      	ldrb	r5, [r4, #21]
 8017828:	f7f8 fa54 	bl	800fcd4 <ucdr_advance_buffer>
 801782c:	f1b8 0f01 	cmp.w	r8, #1
 8017830:	7565      	strb	r5, [r4, #21]
 8017832:	d00f      	beq.n	8017854 <ucdr_serialize_endian_array_double+0x44>
 8017834:	2500      	movs	r5, #0
 8017836:	b147      	cbz	r7, 801784a <ucdr_serialize_endian_array_double+0x3a>
 8017838:	ecb6 0b02 	vldmia	r6!, {d0}
 801783c:	4641      	mov	r1, r8
 801783e:	4620      	mov	r0, r4
 8017840:	3501      	adds	r5, #1
 8017842:	f7f8 f803 	bl	800f84c <ucdr_serialize_endian_double>
 8017846:	42af      	cmp	r7, r5
 8017848:	d1f6      	bne.n	8017838 <ucdr_serialize_endian_array_double+0x28>
 801784a:	7da0      	ldrb	r0, [r4, #22]
 801784c:	f080 0001 	eor.w	r0, r0, #1
 8017850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017854:	00ff      	lsls	r7, r7, #3
 8017856:	4639      	mov	r1, r7
 8017858:	4620      	mov	r0, r4
 801785a:	f7f8 f997 	bl	800fb8c <ucdr_check_buffer_available_for>
 801785e:	b9f8      	cbnz	r0, 80178a0 <ucdr_serialize_endian_array_double+0x90>
 8017860:	46b8      	mov	r8, r7
 8017862:	e00a      	b.n	801787a <ucdr_serialize_endian_array_double+0x6a>
 8017864:	68a0      	ldr	r0, [r4, #8]
 8017866:	f001 ffc4 	bl	80197f2 <memcpy>
 801786a:	68a2      	ldr	r2, [r4, #8]
 801786c:	6923      	ldr	r3, [r4, #16]
 801786e:	442a      	add	r2, r5
 8017870:	442b      	add	r3, r5
 8017872:	eba8 0805 	sub.w	r8, r8, r5
 8017876:	60a2      	str	r2, [r4, #8]
 8017878:	6123      	str	r3, [r4, #16]
 801787a:	4641      	mov	r1, r8
 801787c:	2208      	movs	r2, #8
 801787e:	4620      	mov	r0, r4
 8017880:	f7f8 fa0c 	bl	800fc9c <ucdr_check_final_buffer_behavior_array>
 8017884:	eba7 0108 	sub.w	r1, r7, r8
 8017888:	4431      	add	r1, r6
 801788a:	4605      	mov	r5, r0
 801788c:	4602      	mov	r2, r0
 801788e:	2800      	cmp	r0, #0
 8017890:	d1e8      	bne.n	8017864 <ucdr_serialize_endian_array_double+0x54>
 8017892:	7da0      	ldrb	r0, [r4, #22]
 8017894:	2308      	movs	r3, #8
 8017896:	7563      	strb	r3, [r4, #21]
 8017898:	f080 0001 	eor.w	r0, r0, #1
 801789c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178a0:	463a      	mov	r2, r7
 80178a2:	68a0      	ldr	r0, [r4, #8]
 80178a4:	4631      	mov	r1, r6
 80178a6:	f001 ffa4 	bl	80197f2 <memcpy>
 80178aa:	68a2      	ldr	r2, [r4, #8]
 80178ac:	6923      	ldr	r3, [r4, #16]
 80178ae:	443a      	add	r2, r7
 80178b0:	441f      	add	r7, r3
 80178b2:	60a2      	str	r2, [r4, #8]
 80178b4:	6127      	str	r7, [r4, #16]
 80178b6:	e7ec      	b.n	8017892 <ucdr_serialize_endian_array_double+0x82>

080178b8 <ucdr_deserialize_endian_array_double>:
 80178b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178bc:	4688      	mov	r8, r1
 80178be:	2108      	movs	r1, #8
 80178c0:	4605      	mov	r5, r0
 80178c2:	4614      	mov	r4, r2
 80178c4:	461f      	mov	r7, r3
 80178c6:	f7f8 f9c1 	bl	800fc4c <ucdr_buffer_alignment>
 80178ca:	4601      	mov	r1, r0
 80178cc:	4628      	mov	r0, r5
 80178ce:	7d6e      	ldrb	r6, [r5, #21]
 80178d0:	f7f8 fa00 	bl	800fcd4 <ucdr_advance_buffer>
 80178d4:	f1b8 0f01 	cmp.w	r8, #1
 80178d8:	756e      	strb	r6, [r5, #21]
 80178da:	d010      	beq.n	80178fe <ucdr_deserialize_endian_array_double+0x46>
 80178dc:	2600      	movs	r6, #0
 80178de:	b14f      	cbz	r7, 80178f4 <ucdr_deserialize_endian_array_double+0x3c>
 80178e0:	4622      	mov	r2, r4
 80178e2:	4641      	mov	r1, r8
 80178e4:	4628      	mov	r0, r5
 80178e6:	3601      	adds	r6, #1
 80178e8:	f7f8 f882 	bl	800f9f0 <ucdr_deserialize_endian_double>
 80178ec:	42b7      	cmp	r7, r6
 80178ee:	f104 0408 	add.w	r4, r4, #8
 80178f2:	d1f5      	bne.n	80178e0 <ucdr_deserialize_endian_array_double+0x28>
 80178f4:	7da8      	ldrb	r0, [r5, #22]
 80178f6:	f080 0001 	eor.w	r0, r0, #1
 80178fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178fe:	00ff      	lsls	r7, r7, #3
 8017900:	4639      	mov	r1, r7
 8017902:	4628      	mov	r0, r5
 8017904:	f7f8 f942 	bl	800fb8c <ucdr_check_buffer_available_for>
 8017908:	b9f8      	cbnz	r0, 801794a <ucdr_deserialize_endian_array_double+0x92>
 801790a:	46b8      	mov	r8, r7
 801790c:	e00a      	b.n	8017924 <ucdr_deserialize_endian_array_double+0x6c>
 801790e:	68a9      	ldr	r1, [r5, #8]
 8017910:	f001 ff6f 	bl	80197f2 <memcpy>
 8017914:	68aa      	ldr	r2, [r5, #8]
 8017916:	692b      	ldr	r3, [r5, #16]
 8017918:	4432      	add	r2, r6
 801791a:	4433      	add	r3, r6
 801791c:	eba8 0806 	sub.w	r8, r8, r6
 8017920:	60aa      	str	r2, [r5, #8]
 8017922:	612b      	str	r3, [r5, #16]
 8017924:	2208      	movs	r2, #8
 8017926:	4641      	mov	r1, r8
 8017928:	4628      	mov	r0, r5
 801792a:	f7f8 f9b7 	bl	800fc9c <ucdr_check_final_buffer_behavior_array>
 801792e:	4606      	mov	r6, r0
 8017930:	eba7 0008 	sub.w	r0, r7, r8
 8017934:	4420      	add	r0, r4
 8017936:	4632      	mov	r2, r6
 8017938:	2e00      	cmp	r6, #0
 801793a:	d1e8      	bne.n	801790e <ucdr_deserialize_endian_array_double+0x56>
 801793c:	7da8      	ldrb	r0, [r5, #22]
 801793e:	2308      	movs	r3, #8
 8017940:	756b      	strb	r3, [r5, #21]
 8017942:	f080 0001 	eor.w	r0, r0, #1
 8017946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801794a:	463a      	mov	r2, r7
 801794c:	68a9      	ldr	r1, [r5, #8]
 801794e:	4620      	mov	r0, r4
 8017950:	f001 ff4f 	bl	80197f2 <memcpy>
 8017954:	68aa      	ldr	r2, [r5, #8]
 8017956:	692b      	ldr	r3, [r5, #16]
 8017958:	443a      	add	r2, r7
 801795a:	441f      	add	r7, r3
 801795c:	60aa      	str	r2, [r5, #8]
 801795e:	612f      	str	r7, [r5, #16]
 8017960:	e7ec      	b.n	801793c <ucdr_deserialize_endian_array_double+0x84>
 8017962:	bf00      	nop

08017964 <ucdr_serialize_string>:
 8017964:	b510      	push	{r4, lr}
 8017966:	b082      	sub	sp, #8
 8017968:	4604      	mov	r4, r0
 801796a:	4608      	mov	r0, r1
 801796c:	9101      	str	r1, [sp, #4]
 801796e:	f7e8 fc61 	bl	8000234 <strlen>
 8017972:	9901      	ldr	r1, [sp, #4]
 8017974:	1c42      	adds	r2, r0, #1
 8017976:	4620      	mov	r0, r4
 8017978:	b002      	add	sp, #8
 801797a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801797e:	f7f8 b9c9 	b.w	800fd14 <ucdr_serialize_sequence_char>
 8017982:	bf00      	nop

08017984 <ucdr_deserialize_string>:
 8017984:	b500      	push	{lr}
 8017986:	b083      	sub	sp, #12
 8017988:	ab01      	add	r3, sp, #4
 801798a:	f7f8 f9d5 	bl	800fd38 <ucdr_deserialize_sequence_char>
 801798e:	b003      	add	sp, #12
 8017990:	f85d fb04 	ldr.w	pc, [sp], #4

08017994 <uxr_init_input_best_effort_stream>:
 8017994:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017998:	8003      	strh	r3, [r0, #0]
 801799a:	4770      	bx	lr

0801799c <uxr_reset_input_best_effort_stream>:
 801799c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80179a0:	8003      	strh	r3, [r0, #0]
 80179a2:	4770      	bx	lr

080179a4 <uxr_receive_best_effort_message>:
 80179a4:	b538      	push	{r3, r4, r5, lr}
 80179a6:	4604      	mov	r4, r0
 80179a8:	8800      	ldrh	r0, [r0, #0]
 80179aa:	460d      	mov	r5, r1
 80179ac:	f000 fd42 	bl	8018434 <uxr_seq_num_cmp>
 80179b0:	4603      	mov	r3, r0
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80179b8:	bfb8      	it	lt
 80179ba:	8025      	strhlt	r5, [r4, #0]
 80179bc:	bd38      	pop	{r3, r4, r5, pc}
 80179be:	bf00      	nop

080179c0 <on_full_input_buffer>:
 80179c0:	b570      	push	{r4, r5, r6, lr}
 80179c2:	4605      	mov	r5, r0
 80179c4:	460c      	mov	r4, r1
 80179c6:	682b      	ldr	r3, [r5, #0]
 80179c8:	6809      	ldr	r1, [r1, #0]
 80179ca:	8920      	ldrh	r0, [r4, #8]
 80179cc:	6862      	ldr	r2, [r4, #4]
 80179ce:	fbb2 f2f0 	udiv	r2, r2, r0
 80179d2:	eba3 0c01 	sub.w	ip, r3, r1
 80179d6:	fbbc fcf2 	udiv	ip, ip, r2
 80179da:	f10c 0c01 	add.w	ip, ip, #1
 80179de:	fa1f f38c 	uxth.w	r3, ip
 80179e2:	fbb3 f6f0 	udiv	r6, r3, r0
 80179e6:	fb00 3316 	mls	r3, r0, r6, r3
 80179ea:	b29b      	uxth	r3, r3
 80179ec:	fb02 f303 	mul.w	r3, r2, r3
 80179f0:	1d18      	adds	r0, r3, #4
 80179f2:	4408      	add	r0, r1
 80179f4:	7d26      	ldrb	r6, [r4, #20]
 80179f6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80179fa:	b116      	cbz	r6, 8017a02 <on_full_input_buffer+0x42>
 80179fc:	2600      	movs	r6, #0
 80179fe:	f840 6c04 	str.w	r6, [r0, #-4]
 8017a02:	2a03      	cmp	r2, #3
 8017a04:	d801      	bhi.n	8017a0a <on_full_input_buffer+0x4a>
 8017a06:	2001      	movs	r0, #1
 8017a08:	bd70      	pop	{r4, r5, r6, pc}
 8017a0a:	3308      	adds	r3, #8
 8017a0c:	4419      	add	r1, r3
 8017a0e:	4628      	mov	r0, r5
 8017a10:	692b      	ldr	r3, [r5, #16]
 8017a12:	3a04      	subs	r2, #4
 8017a14:	f7f8 f906 	bl	800fc24 <ucdr_init_buffer_origin>
 8017a18:	4628      	mov	r0, r5
 8017a1a:	4903      	ldr	r1, [pc, #12]	@ (8017a28 <on_full_input_buffer+0x68>)
 8017a1c:	4622      	mov	r2, r4
 8017a1e:	f7f8 f8dd 	bl	800fbdc <ucdr_set_on_full_buffer_callback>
 8017a22:	2000      	movs	r0, #0
 8017a24:	bd70      	pop	{r4, r5, r6, pc}
 8017a26:	bf00      	nop
 8017a28:	080179c1 	.word	0x080179c1

08017a2c <uxr_init_input_reliable_stream>:
 8017a2c:	b500      	push	{lr}
 8017a2e:	e9c0 1200 	strd	r1, r2, [r0]
 8017a32:	f04f 0e00 	mov.w	lr, #0
 8017a36:	9a01      	ldr	r2, [sp, #4]
 8017a38:	8103      	strh	r3, [r0, #8]
 8017a3a:	6102      	str	r2, [r0, #16]
 8017a3c:	f880 e014 	strb.w	lr, [r0, #20]
 8017a40:	b1d3      	cbz	r3, 8017a78 <uxr_init_input_reliable_stream+0x4c>
 8017a42:	f8c1 e000 	str.w	lr, [r1]
 8017a46:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017a4a:	f1bc 0f01 	cmp.w	ip, #1
 8017a4e:	d913      	bls.n	8017a78 <uxr_init_input_reliable_stream+0x4c>
 8017a50:	2301      	movs	r3, #1
 8017a52:	fbb3 f1fc 	udiv	r1, r3, ip
 8017a56:	fb0c 3111 	mls	r1, ip, r1, r3
 8017a5a:	b289      	uxth	r1, r1
 8017a5c:	6842      	ldr	r2, [r0, #4]
 8017a5e:	fbb2 f2fc 	udiv	r2, r2, ip
 8017a62:	fb01 f202 	mul.w	r2, r1, r2
 8017a66:	6801      	ldr	r1, [r0, #0]
 8017a68:	f841 e002 	str.w	lr, [r1, r2]
 8017a6c:	3301      	adds	r3, #1
 8017a6e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017a72:	b29b      	uxth	r3, r3
 8017a74:	459c      	cmp	ip, r3
 8017a76:	d8ec      	bhi.n	8017a52 <uxr_init_input_reliable_stream+0x26>
 8017a78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017a7c:	60c3      	str	r3, [r0, #12]
 8017a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a82:	bf00      	nop

08017a84 <uxr_reset_input_reliable_stream>:
 8017a84:	8901      	ldrh	r1, [r0, #8]
 8017a86:	b1e9      	cbz	r1, 8017ac4 <uxr_reset_input_reliable_stream+0x40>
 8017a88:	f04f 0c00 	mov.w	ip, #0
 8017a8c:	b500      	push	{lr}
 8017a8e:	4663      	mov	r3, ip
 8017a90:	46e6      	mov	lr, ip
 8017a92:	fbb3 f2f1 	udiv	r2, r3, r1
 8017a96:	fb01 3312 	mls	r3, r1, r2, r3
 8017a9a:	b29b      	uxth	r3, r3
 8017a9c:	6842      	ldr	r2, [r0, #4]
 8017a9e:	fbb2 f2f1 	udiv	r2, r2, r1
 8017aa2:	fb02 f303 	mul.w	r3, r2, r3
 8017aa6:	6802      	ldr	r2, [r0, #0]
 8017aa8:	f842 e003 	str.w	lr, [r2, r3]
 8017aac:	f10c 0c01 	add.w	ip, ip, #1
 8017ab0:	8901      	ldrh	r1, [r0, #8]
 8017ab2:	fa1f f38c 	uxth.w	r3, ip
 8017ab6:	4299      	cmp	r1, r3
 8017ab8:	d8eb      	bhi.n	8017a92 <uxr_reset_input_reliable_stream+0xe>
 8017aba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017abe:	60c3      	str	r3, [r0, #12]
 8017ac0:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ac4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017ac8:	60c3      	str	r3, [r0, #12]
 8017aca:	4770      	bx	lr

08017acc <uxr_receive_reliable_message>:
 8017acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ad0:	4604      	mov	r4, r0
 8017ad2:	460d      	mov	r5, r1
 8017ad4:	8901      	ldrh	r1, [r0, #8]
 8017ad6:	8980      	ldrh	r0, [r0, #12]
 8017ad8:	4690      	mov	r8, r2
 8017ada:	461f      	mov	r7, r3
 8017adc:	f000 fca2 	bl	8018424 <uxr_seq_num_add>
 8017ae0:	4629      	mov	r1, r5
 8017ae2:	4606      	mov	r6, r0
 8017ae4:	89a0      	ldrh	r0, [r4, #12]
 8017ae6:	f000 fca5 	bl	8018434 <uxr_seq_num_cmp>
 8017aea:	2800      	cmp	r0, #0
 8017aec:	db0a      	blt.n	8017b04 <uxr_receive_reliable_message+0x38>
 8017aee:	2600      	movs	r6, #0
 8017af0:	89e0      	ldrh	r0, [r4, #14]
 8017af2:	4629      	mov	r1, r5
 8017af4:	f000 fc9e 	bl	8018434 <uxr_seq_num_cmp>
 8017af8:	2800      	cmp	r0, #0
 8017afa:	da00      	bge.n	8017afe <uxr_receive_reliable_message+0x32>
 8017afc:	81e5      	strh	r5, [r4, #14]
 8017afe:	4630      	mov	r0, r6
 8017b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b04:	4630      	mov	r0, r6
 8017b06:	4629      	mov	r1, r5
 8017b08:	f000 fc94 	bl	8018434 <uxr_seq_num_cmp>
 8017b0c:	2800      	cmp	r0, #0
 8017b0e:	dbee      	blt.n	8017aee <uxr_receive_reliable_message+0x22>
 8017b10:	6923      	ldr	r3, [r4, #16]
 8017b12:	4640      	mov	r0, r8
 8017b14:	4798      	blx	r3
 8017b16:	2101      	movs	r1, #1
 8017b18:	4681      	mov	r9, r0
 8017b1a:	89a0      	ldrh	r0, [r4, #12]
 8017b1c:	f000 fc82 	bl	8018424 <uxr_seq_num_add>
 8017b20:	f1b9 0f00 	cmp.w	r9, #0
 8017b24:	d101      	bne.n	8017b2a <uxr_receive_reliable_message+0x5e>
 8017b26:	4285      	cmp	r5, r0
 8017b28:	d047      	beq.n	8017bba <uxr_receive_reliable_message+0xee>
 8017b2a:	8922      	ldrh	r2, [r4, #8]
 8017b2c:	fbb5 f0f2 	udiv	r0, r5, r2
 8017b30:	fb02 5010 	mls	r0, r2, r0, r5
 8017b34:	b280      	uxth	r0, r0
 8017b36:	6863      	ldr	r3, [r4, #4]
 8017b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8017b3c:	fb00 f303 	mul.w	r3, r0, r3
 8017b40:	6820      	ldr	r0, [r4, #0]
 8017b42:	3304      	adds	r3, #4
 8017b44:	4418      	add	r0, r3
 8017b46:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d1cf      	bne.n	8017aee <uxr_receive_reliable_message+0x22>
 8017b4e:	4641      	mov	r1, r8
 8017b50:	463a      	mov	r2, r7
 8017b52:	f001 fe4e 	bl	80197f2 <memcpy>
 8017b56:	8921      	ldrh	r1, [r4, #8]
 8017b58:	fbb5 f2f1 	udiv	r2, r5, r1
 8017b5c:	fb01 5212 	mls	r2, r1, r2, r5
 8017b60:	b292      	uxth	r2, r2
 8017b62:	6863      	ldr	r3, [r4, #4]
 8017b64:	fbb3 f3f1 	udiv	r3, r3, r1
 8017b68:	fb02 f303 	mul.w	r3, r2, r3
 8017b6c:	6822      	ldr	r2, [r4, #0]
 8017b6e:	50d7      	str	r7, [r2, r3]
 8017b70:	9a08      	ldr	r2, [sp, #32]
 8017b72:	2301      	movs	r3, #1
 8017b74:	7013      	strb	r3, [r2, #0]
 8017b76:	f1b9 0f00 	cmp.w	r9, #0
 8017b7a:	d0b8      	beq.n	8017aee <uxr_receive_reliable_message+0x22>
 8017b7c:	89a6      	ldrh	r6, [r4, #12]
 8017b7e:	4630      	mov	r0, r6
 8017b80:	2101      	movs	r1, #1
 8017b82:	f000 fc4f 	bl	8018424 <uxr_seq_num_add>
 8017b86:	8922      	ldrh	r2, [r4, #8]
 8017b88:	6863      	ldr	r3, [r4, #4]
 8017b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8017b8e:	4606      	mov	r6, r0
 8017b90:	fbb0 f0f2 	udiv	r0, r0, r2
 8017b94:	fb02 6010 	mls	r0, r2, r0, r6
 8017b98:	b280      	uxth	r0, r0
 8017b9a:	fb00 f303 	mul.w	r3, r0, r3
 8017b9e:	6820      	ldr	r0, [r4, #0]
 8017ba0:	3304      	adds	r3, #4
 8017ba2:	4418      	add	r0, r3
 8017ba4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d0a0      	beq.n	8017aee <uxr_receive_reliable_message+0x22>
 8017bac:	6923      	ldr	r3, [r4, #16]
 8017bae:	4798      	blx	r3
 8017bb0:	2802      	cmp	r0, #2
 8017bb2:	d008      	beq.n	8017bc6 <uxr_receive_reliable_message+0xfa>
 8017bb4:	2801      	cmp	r0, #1
 8017bb6:	d0e2      	beq.n	8017b7e <uxr_receive_reliable_message+0xb2>
 8017bb8:	e799      	b.n	8017aee <uxr_receive_reliable_message+0x22>
 8017bba:	9b08      	ldr	r3, [sp, #32]
 8017bbc:	81a5      	strh	r5, [r4, #12]
 8017bbe:	2601      	movs	r6, #1
 8017bc0:	f883 9000 	strb.w	r9, [r3]
 8017bc4:	e794      	b.n	8017af0 <uxr_receive_reliable_message+0x24>
 8017bc6:	2601      	movs	r6, #1
 8017bc8:	e792      	b.n	8017af0 <uxr_receive_reliable_message+0x24>
 8017bca:	bf00      	nop

08017bcc <uxr_next_input_reliable_buffer_available>:
 8017bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bd0:	4604      	mov	r4, r0
 8017bd2:	460f      	mov	r7, r1
 8017bd4:	8980      	ldrh	r0, [r0, #12]
 8017bd6:	2101      	movs	r1, #1
 8017bd8:	4690      	mov	r8, r2
 8017bda:	f000 fc23 	bl	8018424 <uxr_seq_num_add>
 8017bde:	8922      	ldrh	r2, [r4, #8]
 8017be0:	fbb0 f6f2 	udiv	r6, r0, r2
 8017be4:	fb02 0616 	mls	r6, r2, r6, r0
 8017be8:	b2b6      	uxth	r6, r6
 8017bea:	6863      	ldr	r3, [r4, #4]
 8017bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8017bf0:	fb06 f303 	mul.w	r3, r6, r3
 8017bf4:	6826      	ldr	r6, [r4, #0]
 8017bf6:	3304      	adds	r3, #4
 8017bf8:	441e      	add	r6, r3
 8017bfa:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8017bfe:	f1b9 0f00 	cmp.w	r9, #0
 8017c02:	d023      	beq.n	8017c4c <uxr_next_input_reliable_buffer_available+0x80>
 8017c04:	6923      	ldr	r3, [r4, #16]
 8017c06:	4605      	mov	r5, r0
 8017c08:	4630      	mov	r0, r6
 8017c0a:	4798      	blx	r3
 8017c0c:	4682      	mov	sl, r0
 8017c0e:	b300      	cbz	r0, 8017c52 <uxr_next_input_reliable_buffer_available+0x86>
 8017c10:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017c14:	2101      	movs	r1, #1
 8017c16:	4650      	mov	r0, sl
 8017c18:	f000 fc04 	bl	8018424 <uxr_seq_num_add>
 8017c1c:	8921      	ldrh	r1, [r4, #8]
 8017c1e:	fbb0 f2f1 	udiv	r2, r0, r1
 8017c22:	4682      	mov	sl, r0
 8017c24:	fb01 0212 	mls	r2, r1, r2, r0
 8017c28:	e9d4 0300 	ldrd	r0, r3, [r4]
 8017c2c:	b292      	uxth	r2, r2
 8017c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017c32:	fb02 f303 	mul.w	r3, r2, r3
 8017c36:	3304      	adds	r3, #4
 8017c38:	4418      	add	r0, r3
 8017c3a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017c3e:	b12b      	cbz	r3, 8017c4c <uxr_next_input_reliable_buffer_available+0x80>
 8017c40:	6923      	ldr	r3, [r4, #16]
 8017c42:	4798      	blx	r3
 8017c44:	2802      	cmp	r0, #2
 8017c46:	d01b      	beq.n	8017c80 <uxr_next_input_reliable_buffer_available+0xb4>
 8017c48:	2801      	cmp	r0, #1
 8017c4a:	d0e3      	beq.n	8017c14 <uxr_next_input_reliable_buffer_available+0x48>
 8017c4c:	2000      	movs	r0, #0
 8017c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c52:	464a      	mov	r2, r9
 8017c54:	4631      	mov	r1, r6
 8017c56:	4638      	mov	r0, r7
 8017c58:	f7f7 ffec 	bl	800fc34 <ucdr_init_buffer>
 8017c5c:	8921      	ldrh	r1, [r4, #8]
 8017c5e:	fbb5 f2f1 	udiv	r2, r5, r1
 8017c62:	fb01 5212 	mls	r2, r1, r2, r5
 8017c66:	b292      	uxth	r2, r2
 8017c68:	6863      	ldr	r3, [r4, #4]
 8017c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8017c6e:	fb02 f303 	mul.w	r3, r2, r3
 8017c72:	6822      	ldr	r2, [r4, #0]
 8017c74:	f842 a003 	str.w	sl, [r2, r3]
 8017c78:	2001      	movs	r0, #1
 8017c7a:	81a5      	strh	r5, [r4, #12]
 8017c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c80:	8920      	ldrh	r0, [r4, #8]
 8017c82:	fbb5 f3f0 	udiv	r3, r5, r0
 8017c86:	fb00 5513 	mls	r5, r0, r3, r5
 8017c8a:	b2ad      	uxth	r5, r5
 8017c8c:	6863      	ldr	r3, [r4, #4]
 8017c8e:	fbb3 f3f0 	udiv	r3, r3, r0
 8017c92:	fb03 f505 	mul.w	r5, r3, r5
 8017c96:	6823      	ldr	r3, [r4, #0]
 8017c98:	2000      	movs	r0, #0
 8017c9a:	5158      	str	r0, [r3, r5]
 8017c9c:	eb06 0108 	add.w	r1, r6, r8
 8017ca0:	eba9 0208 	sub.w	r2, r9, r8
 8017ca4:	4638      	mov	r0, r7
 8017ca6:	f7f7 ffc5 	bl	800fc34 <ucdr_init_buffer>
 8017caa:	4638      	mov	r0, r7
 8017cac:	4903      	ldr	r1, [pc, #12]	@ (8017cbc <uxr_next_input_reliable_buffer_available+0xf0>)
 8017cae:	4622      	mov	r2, r4
 8017cb0:	f7f7 ff94 	bl	800fbdc <ucdr_set_on_full_buffer_callback>
 8017cb4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8017cb8:	2001      	movs	r0, #1
 8017cba:	e7c8      	b.n	8017c4e <uxr_next_input_reliable_buffer_available+0x82>
 8017cbc:	080179c1 	.word	0x080179c1

08017cc0 <uxr_process_heartbeat>:
 8017cc0:	b538      	push	{r3, r4, r5, lr}
 8017cc2:	4611      	mov	r1, r2
 8017cc4:	4604      	mov	r4, r0
 8017cc6:	89c0      	ldrh	r0, [r0, #14]
 8017cc8:	4615      	mov	r5, r2
 8017cca:	f000 fbb3 	bl	8018434 <uxr_seq_num_cmp>
 8017cce:	2800      	cmp	r0, #0
 8017cd0:	bfb8      	it	lt
 8017cd2:	81e5      	strhlt	r5, [r4, #14]
 8017cd4:	bd38      	pop	{r3, r4, r5, pc}
 8017cd6:	bf00      	nop

08017cd8 <uxr_compute_acknack>:
 8017cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cdc:	8903      	ldrh	r3, [r0, #8]
 8017cde:	8985      	ldrh	r5, [r0, #12]
 8017ce0:	4604      	mov	r4, r0
 8017ce2:	460e      	mov	r6, r1
 8017ce4:	b1d3      	cbz	r3, 8017d1c <uxr_compute_acknack+0x44>
 8017ce6:	4628      	mov	r0, r5
 8017ce8:	2701      	movs	r7, #1
 8017cea:	e003      	b.n	8017cf4 <uxr_compute_acknack+0x1c>
 8017cec:	4567      	cmp	r7, ip
 8017cee:	d215      	bcs.n	8017d1c <uxr_compute_acknack+0x44>
 8017cf0:	89a0      	ldrh	r0, [r4, #12]
 8017cf2:	3701      	adds	r7, #1
 8017cf4:	b2b9      	uxth	r1, r7
 8017cf6:	f000 fb95 	bl	8018424 <uxr_seq_num_add>
 8017cfa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017cfe:	fbb0 f3fc 	udiv	r3, r0, ip
 8017d02:	fb0c 0313 	mls	r3, ip, r3, r0
 8017d06:	b29a      	uxth	r2, r3
 8017d08:	e9d4 1300 	ldrd	r1, r3, [r4]
 8017d0c:	fbb3 f3fc 	udiv	r3, r3, ip
 8017d10:	fb02 f303 	mul.w	r3, r2, r3
 8017d14:	58cb      	ldr	r3, [r1, r3]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d1e8      	bne.n	8017cec <uxr_compute_acknack+0x14>
 8017d1a:	4605      	mov	r5, r0
 8017d1c:	8035      	strh	r5, [r6, #0]
 8017d1e:	2101      	movs	r1, #1
 8017d20:	4628      	mov	r0, r5
 8017d22:	89e7      	ldrh	r7, [r4, #14]
 8017d24:	f000 fb82 	bl	801842c <uxr_seq_num_sub>
 8017d28:	4601      	mov	r1, r0
 8017d2a:	4638      	mov	r0, r7
 8017d2c:	f000 fb7e 	bl	801842c <uxr_seq_num_sub>
 8017d30:	4605      	mov	r5, r0
 8017d32:	b318      	cbz	r0, 8017d7c <uxr_compute_acknack+0xa4>
 8017d34:	f04f 0900 	mov.w	r9, #0
 8017d38:	464f      	mov	r7, r9
 8017d3a:	f04f 0801 	mov.w	r8, #1
 8017d3e:	fa1f f189 	uxth.w	r1, r9
 8017d42:	8830      	ldrh	r0, [r6, #0]
 8017d44:	f000 fb6e 	bl	8018424 <uxr_seq_num_add>
 8017d48:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017d4c:	fbb0 f3fc 	udiv	r3, r0, ip
 8017d50:	e9d4 1200 	ldrd	r1, r2, [r4]
 8017d54:	fb03 001c 	mls	r0, r3, ip, r0
 8017d58:	b283      	uxth	r3, r0
 8017d5a:	fbb2 f2fc 	udiv	r2, r2, ip
 8017d5e:	fb02 f303 	mul.w	r3, r2, r3
 8017d62:	fa08 f209 	lsl.w	r2, r8, r9
 8017d66:	58cb      	ldr	r3, [r1, r3]
 8017d68:	f109 0901 	add.w	r9, r9, #1
 8017d6c:	b90b      	cbnz	r3, 8017d72 <uxr_compute_acknack+0x9a>
 8017d6e:	4317      	orrs	r7, r2
 8017d70:	b2bf      	uxth	r7, r7
 8017d72:	454d      	cmp	r5, r9
 8017d74:	d1e3      	bne.n	8017d3e <uxr_compute_acknack+0x66>
 8017d76:	4638      	mov	r0, r7
 8017d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d7c:	4607      	mov	r7, r0
 8017d7e:	4638      	mov	r0, r7
 8017d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017d84 <uxr_init_output_best_effort_stream>:
 8017d84:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8017d88:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8017d8c:	6001      	str	r1, [r0, #0]
 8017d8e:	7303      	strb	r3, [r0, #12]
 8017d90:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017d94:	4770      	bx	lr
 8017d96:	bf00      	nop

08017d98 <uxr_reset_output_best_effort_stream>:
 8017d98:	7b02      	ldrb	r2, [r0, #12]
 8017d9a:	6042      	str	r2, [r0, #4]
 8017d9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017da0:	81c3      	strh	r3, [r0, #14]
 8017da2:	4770      	bx	lr

08017da4 <uxr_prepare_best_effort_buffer_to_write>:
 8017da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017da6:	4604      	mov	r4, r0
 8017da8:	b083      	sub	sp, #12
 8017daa:	6840      	ldr	r0, [r0, #4]
 8017dac:	460d      	mov	r5, r1
 8017dae:	4616      	mov	r6, r2
 8017db0:	f7fa fa68 	bl	8012284 <uxr_submessage_padding>
 8017db4:	6863      	ldr	r3, [r4, #4]
 8017db6:	4418      	add	r0, r3
 8017db8:	68a3      	ldr	r3, [r4, #8]
 8017dba:	1942      	adds	r2, r0, r5
 8017dbc:	4293      	cmp	r3, r2
 8017dbe:	bf2c      	ite	cs
 8017dc0:	2701      	movcs	r7, #1
 8017dc2:	2700      	movcc	r7, #0
 8017dc4:	d202      	bcs.n	8017dcc <uxr_prepare_best_effort_buffer_to_write+0x28>
 8017dc6:	4638      	mov	r0, r7
 8017dc8:	b003      	add	sp, #12
 8017dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dcc:	9000      	str	r0, [sp, #0]
 8017dce:	6821      	ldr	r1, [r4, #0]
 8017dd0:	4630      	mov	r0, r6
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	f7f7 ff1c 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 8017dd8:	6861      	ldr	r1, [r4, #4]
 8017dda:	4638      	mov	r0, r7
 8017ddc:	4429      	add	r1, r5
 8017dde:	6061      	str	r1, [r4, #4]
 8017de0:	b003      	add	sp, #12
 8017de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017de4 <uxr_prepare_best_effort_buffer_to_send>:
 8017de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017de8:	4604      	mov	r4, r0
 8017dea:	461d      	mov	r5, r3
 8017dec:	6840      	ldr	r0, [r0, #4]
 8017dee:	7b23      	ldrb	r3, [r4, #12]
 8017df0:	4298      	cmp	r0, r3
 8017df2:	bf8c      	ite	hi
 8017df4:	2601      	movhi	r6, #1
 8017df6:	2600      	movls	r6, #0
 8017df8:	d802      	bhi.n	8017e00 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8017dfa:	4630      	mov	r0, r6
 8017dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e00:	4688      	mov	r8, r1
 8017e02:	89e0      	ldrh	r0, [r4, #14]
 8017e04:	2101      	movs	r1, #1
 8017e06:	4617      	mov	r7, r2
 8017e08:	f000 fb0c 	bl	8018424 <uxr_seq_num_add>
 8017e0c:	6823      	ldr	r3, [r4, #0]
 8017e0e:	81e0      	strh	r0, [r4, #14]
 8017e10:	8028      	strh	r0, [r5, #0]
 8017e12:	f8c8 3000 	str.w	r3, [r8]
 8017e16:	6863      	ldr	r3, [r4, #4]
 8017e18:	603b      	str	r3, [r7, #0]
 8017e1a:	7b23      	ldrb	r3, [r4, #12]
 8017e1c:	6063      	str	r3, [r4, #4]
 8017e1e:	4630      	mov	r0, r6
 8017e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017e24 <on_full_output_buffer>:
 8017e24:	b538      	push	{r3, r4, r5, lr}
 8017e26:	6802      	ldr	r2, [r0, #0]
 8017e28:	460c      	mov	r4, r1
 8017e2a:	6809      	ldr	r1, [r1, #0]
 8017e2c:	8923      	ldrh	r3, [r4, #8]
 8017e2e:	eba2 0c01 	sub.w	ip, r2, r1
 8017e32:	6862      	ldr	r2, [r4, #4]
 8017e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8017e38:	fbbc fcf2 	udiv	ip, ip, r2
 8017e3c:	f10c 0c01 	add.w	ip, ip, #1
 8017e40:	fa1f fc8c 	uxth.w	ip, ip
 8017e44:	fbbc fef3 	udiv	lr, ip, r3
 8017e48:	fb03 c31e 	mls	r3, r3, lr, ip
 8017e4c:	b29b      	uxth	r3, r3
 8017e4e:	fb02 f303 	mul.w	r3, r2, r3
 8017e52:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8017e56:	58ca      	ldr	r2, [r1, r3]
 8017e58:	4463      	add	r3, ip
 8017e5a:	eba2 020c 	sub.w	r2, r2, ip
 8017e5e:	3308      	adds	r3, #8
 8017e60:	4605      	mov	r5, r0
 8017e62:	4419      	add	r1, r3
 8017e64:	3a04      	subs	r2, #4
 8017e66:	6903      	ldr	r3, [r0, #16]
 8017e68:	f7f7 fedc 	bl	800fc24 <ucdr_init_buffer_origin>
 8017e6c:	4628      	mov	r0, r5
 8017e6e:	4903      	ldr	r1, [pc, #12]	@ (8017e7c <on_full_output_buffer+0x58>)
 8017e70:	4622      	mov	r2, r4
 8017e72:	f7f7 feb3 	bl	800fbdc <ucdr_set_on_full_buffer_callback>
 8017e76:	2000      	movs	r0, #0
 8017e78:	bd38      	pop	{r3, r4, r5, pc}
 8017e7a:	bf00      	nop
 8017e7c:	08017e25 	.word	0x08017e25

08017e80 <uxr_init_output_reliable_stream>:
 8017e80:	b410      	push	{r4}
 8017e82:	f89d c004 	ldrb.w	ip, [sp, #4]
 8017e86:	8103      	strh	r3, [r0, #8]
 8017e88:	e9c0 1200 	strd	r1, r2, [r0]
 8017e8c:	f880 c00c 	strb.w	ip, [r0, #12]
 8017e90:	b1d3      	cbz	r3, 8017ec8 <uxr_init_output_reliable_stream+0x48>
 8017e92:	f8c1 c000 	str.w	ip, [r1]
 8017e96:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017e9a:	f1bc 0f01 	cmp.w	ip, #1
 8017e9e:	d913      	bls.n	8017ec8 <uxr_init_output_reliable_stream+0x48>
 8017ea0:	2301      	movs	r3, #1
 8017ea2:	fbb3 f1fc 	udiv	r1, r3, ip
 8017ea6:	fb0c 3111 	mls	r1, ip, r1, r3
 8017eaa:	b289      	uxth	r1, r1
 8017eac:	6842      	ldr	r2, [r0, #4]
 8017eae:	6804      	ldr	r4, [r0, #0]
 8017eb0:	fbb2 f2fc 	udiv	r2, r2, ip
 8017eb4:	fb01 f202 	mul.w	r2, r1, r2
 8017eb8:	7b01      	ldrb	r1, [r0, #12]
 8017eba:	50a1      	str	r1, [r4, r2]
 8017ebc:	3301      	adds	r3, #1
 8017ebe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017ec2:	b29b      	uxth	r3, r3
 8017ec4:	459c      	cmp	ip, r3
 8017ec6:	d8ec      	bhi.n	8017ea2 <uxr_init_output_reliable_stream+0x22>
 8017ec8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017ecc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017ed0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017ed4:	4905      	ldr	r1, [pc, #20]	@ (8017eec <uxr_init_output_reliable_stream+0x6c>)
 8017ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017eda:	f8c0 100e 	str.w	r1, [r0, #14]
 8017ede:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	8242      	strh	r2, [r0, #18]
 8017ee6:	8403      	strh	r3, [r0, #32]
 8017ee8:	4770      	bx	lr
 8017eea:	bf00      	nop
 8017eec:	ffff0000 	.word	0xffff0000

08017ef0 <uxr_reset_output_reliable_stream>:
 8017ef0:	8901      	ldrh	r1, [r0, #8]
 8017ef2:	b1b1      	cbz	r1, 8017f22 <uxr_reset_output_reliable_stream+0x32>
 8017ef4:	f04f 0c00 	mov.w	ip, #0
 8017ef8:	4663      	mov	r3, ip
 8017efa:	fbb3 f2f1 	udiv	r2, r3, r1
 8017efe:	fb01 3312 	mls	r3, r1, r2, r3
 8017f02:	b29b      	uxth	r3, r3
 8017f04:	6842      	ldr	r2, [r0, #4]
 8017f06:	fbb2 f2f1 	udiv	r2, r2, r1
 8017f0a:	6801      	ldr	r1, [r0, #0]
 8017f0c:	fb02 f303 	mul.w	r3, r2, r3
 8017f10:	7b02      	ldrb	r2, [r0, #12]
 8017f12:	50ca      	str	r2, [r1, r3]
 8017f14:	f10c 0c01 	add.w	ip, ip, #1
 8017f18:	8901      	ldrh	r1, [r0, #8]
 8017f1a:	fa1f f38c 	uxth.w	r3, ip
 8017f1e:	4299      	cmp	r1, r3
 8017f20:	d8eb      	bhi.n	8017efa <uxr_reset_output_reliable_stream+0xa>
 8017f22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017f26:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017f2a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017f2e:	4904      	ldr	r1, [pc, #16]	@ (8017f40 <uxr_reset_output_reliable_stream+0x50>)
 8017f30:	f8c0 100e 	str.w	r1, [r0, #14]
 8017f34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017f38:	2300      	movs	r3, #0
 8017f3a:	8242      	strh	r2, [r0, #18]
 8017f3c:	8403      	strh	r3, [r0, #32]
 8017f3e:	4770      	bx	lr
 8017f40:	ffff0000 	.word	0xffff0000

08017f44 <uxr_prepare_reliable_buffer_to_write>:
 8017f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f48:	4604      	mov	r4, r0
 8017f4a:	b091      	sub	sp, #68	@ 0x44
 8017f4c:	8900      	ldrh	r0, [r0, #8]
 8017f4e:	89e6      	ldrh	r6, [r4, #14]
 8017f50:	6823      	ldr	r3, [r4, #0]
 8017f52:	9204      	str	r2, [sp, #16]
 8017f54:	fbb6 f2f0 	udiv	r2, r6, r0
 8017f58:	fb00 6212 	mls	r2, r0, r2, r6
 8017f5c:	b292      	uxth	r2, r2
 8017f5e:	6865      	ldr	r5, [r4, #4]
 8017f60:	fbb5 f5f0 	udiv	r5, r5, r0
 8017f64:	fb05 3202 	mla	r2, r5, r2, r3
 8017f68:	3204      	adds	r2, #4
 8017f6a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8017f6e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8017f72:	9203      	str	r2, [sp, #12]
 8017f74:	468b      	mov	fp, r1
 8017f76:	1f2f      	subs	r7, r5, #4
 8017f78:	2800      	cmp	r0, #0
 8017f7a:	f000 814c 	beq.w	8018216 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8017f7e:	f04f 0c00 	mov.w	ip, #0
 8017f82:	46e2      	mov	sl, ip
 8017f84:	4661      	mov	r1, ip
 8017f86:	fbb1 f2f0 	udiv	r2, r1, r0
 8017f8a:	fb00 1212 	mls	r2, r0, r2, r1
 8017f8e:	b292      	uxth	r2, r2
 8017f90:	fb05 f202 	mul.w	r2, r5, r2
 8017f94:	f10c 0c01 	add.w	ip, ip, #1
 8017f98:	589a      	ldr	r2, [r3, r2]
 8017f9a:	454a      	cmp	r2, r9
 8017f9c:	bf08      	it	eq
 8017f9e:	f10a 0a01 	addeq.w	sl, sl, #1
 8017fa2:	fa1f f18c 	uxth.w	r1, ip
 8017fa6:	bf08      	it	eq
 8017fa8:	fa1f fa8a 	uxtheq.w	sl, sl
 8017fac:	4281      	cmp	r1, r0
 8017fae:	d3ea      	bcc.n	8017f86 <uxr_prepare_reliable_buffer_to_write+0x42>
 8017fb0:	4640      	mov	r0, r8
 8017fb2:	2104      	movs	r1, #4
 8017fb4:	f8cd a014 	str.w	sl, [sp, #20]
 8017fb8:	f7f7 fe40 	bl	800fc3c <ucdr_alignment>
 8017fbc:	4480      	add	r8, r0
 8017fbe:	eb08 020b 	add.w	r2, r8, fp
 8017fc2:	42ba      	cmp	r2, r7
 8017fc4:	f240 80cd 	bls.w	8018162 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8017fc8:	7b22      	ldrb	r2, [r4, #12]
 8017fca:	445a      	add	r2, fp
 8017fcc:	42ba      	cmp	r2, r7
 8017fce:	f240 80b5 	bls.w	801813c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8017fd2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8017fd6:	33fc      	adds	r3, #252	@ 0xfc
 8017fd8:	b2ba      	uxth	r2, r7
 8017fda:	4413      	add	r3, r2
 8017fdc:	b29b      	uxth	r3, r3
 8017fde:	fb0a f903 	mul.w	r9, sl, r3
 8017fe2:	45d9      	cmp	r9, fp
 8017fe4:	9305      	str	r3, [sp, #20]
 8017fe6:	9306      	str	r3, [sp, #24]
 8017fe8:	f0c0 80b7 	bcc.w	801815a <uxr_prepare_reliable_buffer_to_write+0x216>
 8017fec:	f108 0304 	add.w	r3, r8, #4
 8017ff0:	42bb      	cmp	r3, r7
 8017ff2:	f080 80db 	bcs.w	80181ac <uxr_prepare_reliable_buffer_to_write+0x268>
 8017ff6:	f1a2 0904 	sub.w	r9, r2, #4
 8017ffa:	eba9 0908 	sub.w	r9, r9, r8
 8017ffe:	9b05      	ldr	r3, [sp, #20]
 8018000:	fa1f f989 	uxth.w	r9, r9
 8018004:	ebab 0b09 	sub.w	fp, fp, r9
 8018008:	fbbb f2f3 	udiv	r2, fp, r3
 801800c:	fb03 b312 	mls	r3, r3, r2, fp
 8018010:	2b00      	cmp	r3, #0
 8018012:	f000 80c8 	beq.w	80181a6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8018016:	3201      	adds	r2, #1
 8018018:	b292      	uxth	r2, r2
 801801a:	9306      	str	r3, [sp, #24]
 801801c:	4552      	cmp	r2, sl
 801801e:	f200 809c 	bhi.w	801815a <uxr_prepare_reliable_buffer_to_write+0x216>
 8018022:	f10d 0b20 	add.w	fp, sp, #32
 8018026:	2a00      	cmp	r2, #0
 8018028:	d042      	beq.n	80180b0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801802a:	f8cd 801c 	str.w	r8, [sp, #28]
 801802e:	f04f 0a00 	mov.w	sl, #0
 8018032:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018036:	9505      	str	r5, [sp, #20]
 8018038:	f10d 0b20 	add.w	fp, sp, #32
 801803c:	4615      	mov	r5, r2
 801803e:	e000      	b.n	8018042 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8018040:	46c1      	mov	r9, r8
 8018042:	8920      	ldrh	r0, [r4, #8]
 8018044:	fbb6 f2f0 	udiv	r2, r6, r0
 8018048:	fb00 6112 	mls	r1, r0, r2, r6
 801804c:	b28a      	uxth	r2, r1
 801804e:	6863      	ldr	r3, [r4, #4]
 8018050:	fbb3 f1f0 	udiv	r1, r3, r0
 8018054:	6823      	ldr	r3, [r4, #0]
 8018056:	fb02 f101 	mul.w	r1, r2, r1
 801805a:	3104      	adds	r1, #4
 801805c:	4419      	add	r1, r3
 801805e:	4658      	mov	r0, fp
 8018060:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018064:	9200      	str	r2, [sp, #0]
 8018066:	2300      	movs	r3, #0
 8018068:	463a      	mov	r2, r7
 801806a:	f7f7 fdd1 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 801806e:	464a      	mov	r2, r9
 8018070:	2300      	movs	r3, #0
 8018072:	210d      	movs	r1, #13
 8018074:	4658      	mov	r0, fp
 8018076:	f7fa f8c5 	bl	8012204 <uxr_buffer_submessage_header>
 801807a:	8921      	ldrh	r1, [r4, #8]
 801807c:	fbb6 f2f1 	udiv	r2, r6, r1
 8018080:	fb01 6212 	mls	r2, r1, r2, r6
 8018084:	b292      	uxth	r2, r2
 8018086:	6863      	ldr	r3, [r4, #4]
 8018088:	fbb3 f3f1 	udiv	r3, r3, r1
 801808c:	fb02 f303 	mul.w	r3, r2, r3
 8018090:	6822      	ldr	r2, [r4, #0]
 8018092:	4630      	mov	r0, r6
 8018094:	50d7      	str	r7, [r2, r3]
 8018096:	2101      	movs	r1, #1
 8018098:	f000 f9c4 	bl	8018424 <uxr_seq_num_add>
 801809c:	f10a 0a01 	add.w	sl, sl, #1
 80180a0:	fa1f f38a 	uxth.w	r3, sl
 80180a4:	429d      	cmp	r5, r3
 80180a6:	4606      	mov	r6, r0
 80180a8:	d8ca      	bhi.n	8018040 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80180aa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80180ae:	9d05      	ldr	r5, [sp, #20]
 80180b0:	8920      	ldrh	r0, [r4, #8]
 80180b2:	fbb6 f3f0 	udiv	r3, r6, r0
 80180b6:	fb00 6313 	mls	r3, r0, r3, r6
 80180ba:	b299      	uxth	r1, r3
 80180bc:	6863      	ldr	r3, [r4, #4]
 80180be:	fbb3 f3f0 	udiv	r3, r3, r0
 80180c2:	fb01 f303 	mul.w	r3, r1, r3
 80180c6:	6821      	ldr	r1, [r4, #0]
 80180c8:	3304      	adds	r3, #4
 80180ca:	4419      	add	r1, r3
 80180cc:	463a      	mov	r2, r7
 80180ce:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80180d2:	9000      	str	r0, [sp, #0]
 80180d4:	2300      	movs	r3, #0
 80180d6:	4658      	mov	r0, fp
 80180d8:	f7f7 fd9a 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 80180dc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80180e0:	4658      	mov	r0, fp
 80180e2:	fa1f f289 	uxth.w	r2, r9
 80180e6:	2302      	movs	r3, #2
 80180e8:	210d      	movs	r1, #13
 80180ea:	f7fa f88b 	bl	8012204 <uxr_buffer_submessage_header>
 80180ee:	9b03      	ldr	r3, [sp, #12]
 80180f0:	8927      	ldrh	r7, [r4, #8]
 80180f2:	7b20      	ldrb	r0, [r4, #12]
 80180f4:	f108 0104 	add.w	r1, r8, #4
 80180f8:	440b      	add	r3, r1
 80180fa:	4619      	mov	r1, r3
 80180fc:	fbb6 f3f7 	udiv	r3, r6, r7
 8018100:	fb07 6313 	mls	r3, r7, r3, r6
 8018104:	f1a5 0208 	sub.w	r2, r5, #8
 8018108:	b29d      	uxth	r5, r3
 801810a:	3004      	adds	r0, #4
 801810c:	6863      	ldr	r3, [r4, #4]
 801810e:	fbb3 f3f7 	udiv	r3, r3, r7
 8018112:	fb05 f303 	mul.w	r3, r5, r3
 8018116:	6825      	ldr	r5, [r4, #0]
 8018118:	4448      	add	r0, r9
 801811a:	50e8      	str	r0, [r5, r3]
 801811c:	9d04      	ldr	r5, [sp, #16]
 801811e:	eba2 0208 	sub.w	r2, r2, r8
 8018122:	4628      	mov	r0, r5
 8018124:	f7f7 fd86 	bl	800fc34 <ucdr_init_buffer>
 8018128:	4628      	mov	r0, r5
 801812a:	493c      	ldr	r1, [pc, #240]	@ (801821c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801812c:	4622      	mov	r2, r4
 801812e:	f7f7 fd55 	bl	800fbdc <ucdr_set_on_full_buffer_callback>
 8018132:	2001      	movs	r0, #1
 8018134:	81e6      	strh	r6, [r4, #14]
 8018136:	b011      	add	sp, #68	@ 0x44
 8018138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801813c:	2101      	movs	r1, #1
 801813e:	89e0      	ldrh	r0, [r4, #14]
 8018140:	f000 f970 	bl	8018424 <uxr_seq_num_add>
 8018144:	8921      	ldrh	r1, [r4, #8]
 8018146:	4605      	mov	r5, r0
 8018148:	8a60      	ldrh	r0, [r4, #18]
 801814a:	f000 f96b 	bl	8018424 <uxr_seq_num_add>
 801814e:	4601      	mov	r1, r0
 8018150:	4628      	mov	r0, r5
 8018152:	f000 f96f 	bl	8018434 <uxr_seq_num_cmp>
 8018156:	2800      	cmp	r0, #0
 8018158:	dd42      	ble.n	80181e0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801815a:	2000      	movs	r0, #0
 801815c:	b011      	add	sp, #68	@ 0x44
 801815e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018162:	8921      	ldrh	r1, [r4, #8]
 8018164:	8a60      	ldrh	r0, [r4, #18]
 8018166:	9205      	str	r2, [sp, #20]
 8018168:	f000 f95c 	bl	8018424 <uxr_seq_num_add>
 801816c:	4601      	mov	r1, r0
 801816e:	4630      	mov	r0, r6
 8018170:	f000 f960 	bl	8018434 <uxr_seq_num_cmp>
 8018174:	2800      	cmp	r0, #0
 8018176:	9a05      	ldr	r2, [sp, #20]
 8018178:	dcef      	bgt.n	801815a <uxr_prepare_reliable_buffer_to_write+0x216>
 801817a:	8927      	ldrh	r7, [r4, #8]
 801817c:	fbb6 f3f7 	udiv	r3, r6, r7
 8018180:	fb07 6313 	mls	r3, r7, r3, r6
 8018184:	b29d      	uxth	r5, r3
 8018186:	6863      	ldr	r3, [r4, #4]
 8018188:	6824      	ldr	r4, [r4, #0]
 801818a:	fbb3 f3f7 	udiv	r3, r3, r7
 801818e:	fb05 f303 	mul.w	r3, r5, r3
 8018192:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018196:	50e2      	str	r2, [r4, r3]
 8018198:	2300      	movs	r3, #0
 801819a:	f8cd 8000 	str.w	r8, [sp]
 801819e:	f7f7 fd37 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 80181a2:	2001      	movs	r0, #1
 80181a4:	e7da      	b.n	801815c <uxr_prepare_reliable_buffer_to_write+0x218>
 80181a6:	b293      	uxth	r3, r2
 80181a8:	461a      	mov	r2, r3
 80181aa:	e737      	b.n	801801c <uxr_prepare_reliable_buffer_to_write+0xd8>
 80181ac:	4630      	mov	r0, r6
 80181ae:	2101      	movs	r1, #1
 80181b0:	9207      	str	r2, [sp, #28]
 80181b2:	f000 f937 	bl	8018424 <uxr_seq_num_add>
 80181b6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80181ba:	fbb0 f1fc 	udiv	r1, r0, ip
 80181be:	fb0c 0111 	mls	r1, ip, r1, r0
 80181c2:	4606      	mov	r6, r0
 80181c4:	b288      	uxth	r0, r1
 80181c6:	6863      	ldr	r3, [r4, #4]
 80181c8:	fbb3 f1fc 	udiv	r1, r3, ip
 80181cc:	6823      	ldr	r3, [r4, #0]
 80181ce:	9a07      	ldr	r2, [sp, #28]
 80181d0:	fb00 f101 	mul.w	r1, r0, r1
 80181d4:	3104      	adds	r1, #4
 80181d6:	440b      	add	r3, r1
 80181d8:	9303      	str	r3, [sp, #12]
 80181da:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80181de:	e70a      	b.n	8017ff6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80181e0:	8921      	ldrh	r1, [r4, #8]
 80181e2:	fbb5 f3f1 	udiv	r3, r5, r1
 80181e6:	fb01 5313 	mls	r3, r1, r3, r5
 80181ea:	b29a      	uxth	r2, r3
 80181ec:	6863      	ldr	r3, [r4, #4]
 80181ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80181f2:	6821      	ldr	r1, [r4, #0]
 80181f4:	9804      	ldr	r0, [sp, #16]
 80181f6:	fb02 f303 	mul.w	r3, r2, r3
 80181fa:	3304      	adds	r3, #4
 80181fc:	7b22      	ldrb	r2, [r4, #12]
 80181fe:	4419      	add	r1, r3
 8018200:	445a      	add	r2, fp
 8018202:	f841 2c04 	str.w	r2, [r1, #-4]
 8018206:	7b23      	ldrb	r3, [r4, #12]
 8018208:	9300      	str	r3, [sp, #0]
 801820a:	2300      	movs	r3, #0
 801820c:	f7f7 fd00 	bl	800fc10 <ucdr_init_buffer_origin_offset>
 8018210:	81e5      	strh	r5, [r4, #14]
 8018212:	2001      	movs	r0, #1
 8018214:	e7a2      	b.n	801815c <uxr_prepare_reliable_buffer_to_write+0x218>
 8018216:	4682      	mov	sl, r0
 8018218:	e6ca      	b.n	8017fb0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801821a:	bf00      	nop
 801821c:	08017e25 	.word	0x08017e25

08018220 <uxr_prepare_next_reliable_buffer_to_send>:
 8018220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018222:	4604      	mov	r4, r0
 8018224:	460f      	mov	r7, r1
 8018226:	8a00      	ldrh	r0, [r0, #16]
 8018228:	2101      	movs	r1, #1
 801822a:	4616      	mov	r6, r2
 801822c:	461d      	mov	r5, r3
 801822e:	f000 f8f9 	bl	8018424 <uxr_seq_num_add>
 8018232:	8028      	strh	r0, [r5, #0]
 8018234:	8922      	ldrh	r2, [r4, #8]
 8018236:	fbb0 f3f2 	udiv	r3, r0, r2
 801823a:	fb02 0c13 	mls	ip, r2, r3, r0
 801823e:	fa1f fc8c 	uxth.w	ip, ip
 8018242:	6863      	ldr	r3, [r4, #4]
 8018244:	fbb3 f3f2 	udiv	r3, r3, r2
 8018248:	fb0c fc03 	mul.w	ip, ip, r3
 801824c:	6823      	ldr	r3, [r4, #0]
 801824e:	89e1      	ldrh	r1, [r4, #14]
 8018250:	f10c 0c04 	add.w	ip, ip, #4
 8018254:	4463      	add	r3, ip
 8018256:	603b      	str	r3, [r7, #0]
 8018258:	6823      	ldr	r3, [r4, #0]
 801825a:	449c      	add	ip, r3
 801825c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018260:	6033      	str	r3, [r6, #0]
 8018262:	f000 f8e7 	bl	8018434 <uxr_seq_num_cmp>
 8018266:	2800      	cmp	r0, #0
 8018268:	dd01      	ble.n	801826e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801826a:	2000      	movs	r0, #0
 801826c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801826e:	7b23      	ldrb	r3, [r4, #12]
 8018270:	6832      	ldr	r2, [r6, #0]
 8018272:	429a      	cmp	r2, r3
 8018274:	d9f9      	bls.n	801826a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018276:	8a61      	ldrh	r1, [r4, #18]
 8018278:	8a20      	ldrh	r0, [r4, #16]
 801827a:	f000 f8d7 	bl	801842c <uxr_seq_num_sub>
 801827e:	8923      	ldrh	r3, [r4, #8]
 8018280:	4283      	cmp	r3, r0
 8018282:	d0f2      	beq.n	801826a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018284:	8828      	ldrh	r0, [r5, #0]
 8018286:	89e3      	ldrh	r3, [r4, #14]
 8018288:	8220      	strh	r0, [r4, #16]
 801828a:	4298      	cmp	r0, r3
 801828c:	d001      	beq.n	8018292 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801828e:	2001      	movs	r0, #1
 8018290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018292:	2101      	movs	r1, #1
 8018294:	f000 f8c6 	bl	8018424 <uxr_seq_num_add>
 8018298:	81e0      	strh	r0, [r4, #14]
 801829a:	2001      	movs	r0, #1
 801829c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801829e:	bf00      	nop

080182a0 <uxr_update_output_stream_heartbeat_timestamp>:
 80182a0:	b570      	push	{r4, r5, r6, lr}
 80182a2:	8a01      	ldrh	r1, [r0, #16]
 80182a4:	4604      	mov	r4, r0
 80182a6:	8a40      	ldrh	r0, [r0, #18]
 80182a8:	4615      	mov	r5, r2
 80182aa:	461e      	mov	r6, r3
 80182ac:	f000 f8c2 	bl	8018434 <uxr_seq_num_cmp>
 80182b0:	2800      	cmp	r0, #0
 80182b2:	db07      	blt.n	80182c4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80182b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80182b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80182bc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80182c0:	2000      	movs	r0, #0
 80182c2:	bd70      	pop	{r4, r5, r6, pc}
 80182c4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80182c8:	b940      	cbnz	r0, 80182dc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80182ca:	2301      	movs	r3, #1
 80182cc:	f884 3020 	strb.w	r3, [r4, #32]
 80182d0:	3564      	adds	r5, #100	@ 0x64
 80182d2:	f146 0600 	adc.w	r6, r6, #0
 80182d6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80182da:	bd70      	pop	{r4, r5, r6, pc}
 80182dc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80182e0:	4295      	cmp	r5, r2
 80182e2:	eb76 0303 	sbcs.w	r3, r6, r3
 80182e6:	bfa5      	ittet	ge
 80182e8:	3001      	addge	r0, #1
 80182ea:	f884 0020 	strbge.w	r0, [r4, #32]
 80182ee:	2000      	movlt	r0, #0
 80182f0:	2001      	movge	r0, #1
 80182f2:	e7ed      	b.n	80182d0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080182f4 <uxr_begin_output_nack_buffer_it>:
 80182f4:	8a40      	ldrh	r0, [r0, #18]
 80182f6:	4770      	bx	lr

080182f8 <uxr_next_reliable_nack_buffer_to_send>:
 80182f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182fc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8018300:	b082      	sub	sp, #8
 8018302:	f1b8 0f00 	cmp.w	r8, #0
 8018306:	d011      	beq.n	801832c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8018308:	4604      	mov	r4, r0
 801830a:	8818      	ldrh	r0, [r3, #0]
 801830c:	460e      	mov	r6, r1
 801830e:	4617      	mov	r7, r2
 8018310:	461d      	mov	r5, r3
 8018312:	2101      	movs	r1, #1
 8018314:	f000 f886 	bl	8018424 <uxr_seq_num_add>
 8018318:	8028      	strh	r0, [r5, #0]
 801831a:	8a21      	ldrh	r1, [r4, #16]
 801831c:	f000 f88a 	bl	8018434 <uxr_seq_num_cmp>
 8018320:	2800      	cmp	r0, #0
 8018322:	dd07      	ble.n	8018334 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8018324:	f04f 0800 	mov.w	r8, #0
 8018328:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801832c:	4640      	mov	r0, r8
 801832e:	b002      	add	sp, #8
 8018330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018334:	8921      	ldrh	r1, [r4, #8]
 8018336:	8828      	ldrh	r0, [r5, #0]
 8018338:	6823      	ldr	r3, [r4, #0]
 801833a:	fbb0 f2f1 	udiv	r2, r0, r1
 801833e:	fb01 0c12 	mls	ip, r1, r2, r0
 8018342:	fa1f f28c 	uxth.w	r2, ip
 8018346:	9301      	str	r3, [sp, #4]
 8018348:	6863      	ldr	r3, [r4, #4]
 801834a:	fbb3 fcf1 	udiv	ip, r3, r1
 801834e:	9b01      	ldr	r3, [sp, #4]
 8018350:	fb02 fc0c 	mul.w	ip, r2, ip
 8018354:	f10c 0c04 	add.w	ip, ip, #4
 8018358:	4463      	add	r3, ip
 801835a:	6033      	str	r3, [r6, #0]
 801835c:	6823      	ldr	r3, [r4, #0]
 801835e:	4463      	add	r3, ip
 8018360:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018364:	603b      	str	r3, [r7, #0]
 8018366:	7b22      	ldrb	r2, [r4, #12]
 8018368:	429a      	cmp	r2, r3
 801836a:	d0d2      	beq.n	8018312 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801836c:	4640      	mov	r0, r8
 801836e:	b002      	add	sp, #8
 8018370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018374 <uxr_process_acknack>:
 8018374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018376:	4604      	mov	r4, r0
 8018378:	460e      	mov	r6, r1
 801837a:	4610      	mov	r0, r2
 801837c:	2101      	movs	r1, #1
 801837e:	f000 f855 	bl	801842c <uxr_seq_num_sub>
 8018382:	8a61      	ldrh	r1, [r4, #18]
 8018384:	f000 f852 	bl	801842c <uxr_seq_num_sub>
 8018388:	b1c0      	cbz	r0, 80183bc <uxr_process_acknack+0x48>
 801838a:	4605      	mov	r5, r0
 801838c:	2700      	movs	r7, #0
 801838e:	2101      	movs	r1, #1
 8018390:	8a60      	ldrh	r0, [r4, #18]
 8018392:	f000 f847 	bl	8018424 <uxr_seq_num_add>
 8018396:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801839a:	fbb0 f1fc 	udiv	r1, r0, ip
 801839e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80183a2:	fb0c 0111 	mls	r1, ip, r1, r0
 80183a6:	b289      	uxth	r1, r1
 80183a8:	3701      	adds	r7, #1
 80183aa:	fbb3 f3fc 	udiv	r3, r3, ip
 80183ae:	fb01 f303 	mul.w	r3, r1, r3
 80183b2:	42bd      	cmp	r5, r7
 80183b4:	7b21      	ldrb	r1, [r4, #12]
 80183b6:	8260      	strh	r0, [r4, #18]
 80183b8:	50d1      	str	r1, [r2, r3]
 80183ba:	d1e8      	bne.n	801838e <uxr_process_acknack+0x1a>
 80183bc:	3e00      	subs	r6, #0
 80183be:	f04f 0300 	mov.w	r3, #0
 80183c2:	bf18      	it	ne
 80183c4:	2601      	movne	r6, #1
 80183c6:	f884 3020 	strb.w	r3, [r4, #32]
 80183ca:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80183ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080183d0 <uxr_is_output_up_to_date>:
 80183d0:	8a01      	ldrh	r1, [r0, #16]
 80183d2:	8a40      	ldrh	r0, [r0, #18]
 80183d4:	b508      	push	{r3, lr}
 80183d6:	f000 f82d 	bl	8018434 <uxr_seq_num_cmp>
 80183da:	fab0 f080 	clz	r0, r0
 80183de:	0940      	lsrs	r0, r0, #5
 80183e0:	bd08      	pop	{r3, pc}
 80183e2:	bf00      	nop

080183e4 <get_available_free_slots>:
 80183e4:	8902      	ldrh	r2, [r0, #8]
 80183e6:	b1da      	cbz	r2, 8018420 <get_available_free_slots+0x3c>
 80183e8:	b530      	push	{r4, r5, lr}
 80183ea:	2100      	movs	r1, #0
 80183ec:	6843      	ldr	r3, [r0, #4]
 80183ee:	6805      	ldr	r5, [r0, #0]
 80183f0:	7b04      	ldrb	r4, [r0, #12]
 80183f2:	fbb3 fef2 	udiv	lr, r3, r2
 80183f6:	4608      	mov	r0, r1
 80183f8:	460b      	mov	r3, r1
 80183fa:	fbb3 fcf2 	udiv	ip, r3, r2
 80183fe:	fb02 331c 	mls	r3, r2, ip, r3
 8018402:	b29b      	uxth	r3, r3
 8018404:	fb0e f303 	mul.w	r3, lr, r3
 8018408:	3101      	adds	r1, #1
 801840a:	f855 c003 	ldr.w	ip, [r5, r3]
 801840e:	4564      	cmp	r4, ip
 8018410:	bf08      	it	eq
 8018412:	3001      	addeq	r0, #1
 8018414:	b28b      	uxth	r3, r1
 8018416:	bf08      	it	eq
 8018418:	b280      	uxtheq	r0, r0
 801841a:	4293      	cmp	r3, r2
 801841c:	d3ed      	bcc.n	80183fa <get_available_free_slots+0x16>
 801841e:	bd30      	pop	{r4, r5, pc}
 8018420:	4610      	mov	r0, r2
 8018422:	4770      	bx	lr

08018424 <uxr_seq_num_add>:
 8018424:	4408      	add	r0, r1
 8018426:	b280      	uxth	r0, r0
 8018428:	4770      	bx	lr
 801842a:	bf00      	nop

0801842c <uxr_seq_num_sub>:
 801842c:	1a40      	subs	r0, r0, r1
 801842e:	b280      	uxth	r0, r0
 8018430:	4770      	bx	lr
 8018432:	bf00      	nop

08018434 <uxr_seq_num_cmp>:
 8018434:	4288      	cmp	r0, r1
 8018436:	d011      	beq.n	801845c <uxr_seq_num_cmp+0x28>
 8018438:	d309      	bcc.n	801844e <uxr_seq_num_cmp+0x1a>
 801843a:	4288      	cmp	r0, r1
 801843c:	d910      	bls.n	8018460 <uxr_seq_num_cmp+0x2c>
 801843e:	1a40      	subs	r0, r0, r1
 8018440:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018444:	bfd4      	ite	le
 8018446:	2001      	movle	r0, #1
 8018448:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801844c:	4770      	bx	lr
 801844e:	1a0b      	subs	r3, r1, r0
 8018450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018454:	daf1      	bge.n	801843a <uxr_seq_num_cmp+0x6>
 8018456:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801845a:	4770      	bx	lr
 801845c:	2000      	movs	r0, #0
 801845e:	4770      	bx	lr
 8018460:	2001      	movs	r0, #1
 8018462:	4770      	bx	lr

08018464 <rcl_get_default_domain_id>:
 8018464:	b530      	push	{r4, r5, lr}
 8018466:	b083      	sub	sp, #12
 8018468:	2300      	movs	r3, #0
 801846a:	9300      	str	r3, [sp, #0]
 801846c:	b1d0      	cbz	r0, 80184a4 <rcl_get_default_domain_id+0x40>
 801846e:	4604      	mov	r4, r0
 8018470:	4669      	mov	r1, sp
 8018472:	4815      	ldr	r0, [pc, #84]	@ (80184c8 <rcl_get_default_domain_id+0x64>)
 8018474:	f7fd fd54 	bl	8015f20 <rcutils_get_env>
 8018478:	4602      	mov	r2, r0
 801847a:	b110      	cbz	r0, 8018482 <rcl_get_default_domain_id+0x1e>
 801847c:	2001      	movs	r0, #1
 801847e:	b003      	add	sp, #12
 8018480:	bd30      	pop	{r4, r5, pc}
 8018482:	9b00      	ldr	r3, [sp, #0]
 8018484:	b18b      	cbz	r3, 80184aa <rcl_get_default_domain_id+0x46>
 8018486:	7818      	ldrb	r0, [r3, #0]
 8018488:	2800      	cmp	r0, #0
 801848a:	d0f8      	beq.n	801847e <rcl_get_default_domain_id+0x1a>
 801848c:	a901      	add	r1, sp, #4
 801848e:	4618      	mov	r0, r3
 8018490:	9201      	str	r2, [sp, #4]
 8018492:	f000 fe39 	bl	8019108 <strtoul>
 8018496:	4605      	mov	r5, r0
 8018498:	b150      	cbz	r0, 80184b0 <rcl_get_default_domain_id+0x4c>
 801849a:	1c43      	adds	r3, r0, #1
 801849c:	d00d      	beq.n	80184ba <rcl_get_default_domain_id+0x56>
 801849e:	6025      	str	r5, [r4, #0]
 80184a0:	2000      	movs	r0, #0
 80184a2:	e7ec      	b.n	801847e <rcl_get_default_domain_id+0x1a>
 80184a4:	200b      	movs	r0, #11
 80184a6:	b003      	add	sp, #12
 80184a8:	bd30      	pop	{r4, r5, pc}
 80184aa:	4618      	mov	r0, r3
 80184ac:	b003      	add	sp, #12
 80184ae:	bd30      	pop	{r4, r5, pc}
 80184b0:	9b01      	ldr	r3, [sp, #4]
 80184b2:	781b      	ldrb	r3, [r3, #0]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d0f2      	beq.n	801849e <rcl_get_default_domain_id+0x3a>
 80184b8:	e7e0      	b.n	801847c <rcl_get_default_domain_id+0x18>
 80184ba:	f001 f965 	bl	8019788 <__errno>
 80184be:	6803      	ldr	r3, [r0, #0]
 80184c0:	2b22      	cmp	r3, #34	@ 0x22
 80184c2:	d1ec      	bne.n	801849e <rcl_get_default_domain_id+0x3a>
 80184c4:	e7da      	b.n	801847c <rcl_get_default_domain_id+0x18>
 80184c6:	bf00      	nop
 80184c8:	0801ac14 	.word	0x0801ac14

080184cc <rcl_expand_topic_name>:
 80184cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184d0:	b08b      	sub	sp, #44	@ 0x2c
 80184d2:	9306      	str	r3, [sp, #24]
 80184d4:	2800      	cmp	r0, #0
 80184d6:	f000 80ad 	beq.w	8018634 <rcl_expand_topic_name+0x168>
 80184da:	460e      	mov	r6, r1
 80184dc:	2900      	cmp	r1, #0
 80184de:	f000 80a9 	beq.w	8018634 <rcl_expand_topic_name+0x168>
 80184e2:	4617      	mov	r7, r2
 80184e4:	2a00      	cmp	r2, #0
 80184e6:	f000 80a5 	beq.w	8018634 <rcl_expand_topic_name+0x168>
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	f000 80a2 	beq.w	8018634 <rcl_expand_topic_name+0x168>
 80184f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	f000 809e 	beq.w	8018634 <rcl_expand_topic_name+0x168>
 80184f8:	2200      	movs	r2, #0
 80184fa:	a909      	add	r1, sp, #36	@ 0x24
 80184fc:	4680      	mov	r8, r0
 80184fe:	f000 fa57 	bl	80189b0 <rcl_validate_topic_name>
 8018502:	4604      	mov	r4, r0
 8018504:	2800      	cmp	r0, #0
 8018506:	f040 8096 	bne.w	8018636 <rcl_expand_topic_name+0x16a>
 801850a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801850c:	2b00      	cmp	r3, #0
 801850e:	f040 809a 	bne.w	8018646 <rcl_expand_topic_name+0x17a>
 8018512:	4602      	mov	r2, r0
 8018514:	a909      	add	r1, sp, #36	@ 0x24
 8018516:	4630      	mov	r0, r6
 8018518:	f7fe f91c 	bl	8016754 <rmw_validate_node_name>
 801851c:	2800      	cmp	r0, #0
 801851e:	f040 808e 	bne.w	801863e <rcl_expand_topic_name+0x172>
 8018522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018524:	2a00      	cmp	r2, #0
 8018526:	f040 8093 	bne.w	8018650 <rcl_expand_topic_name+0x184>
 801852a:	a909      	add	r1, sp, #36	@ 0x24
 801852c:	4638      	mov	r0, r7
 801852e:	f7fe f8f3 	bl	8016718 <rmw_validate_namespace>
 8018532:	2800      	cmp	r0, #0
 8018534:	f040 8083 	bne.w	801863e <rcl_expand_topic_name+0x172>
 8018538:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801853a:	2c00      	cmp	r4, #0
 801853c:	f040 80ed 	bne.w	801871a <rcl_expand_topic_name+0x24e>
 8018540:	217b      	movs	r1, #123	@ 0x7b
 8018542:	4640      	mov	r0, r8
 8018544:	f001 f894 	bl	8019670 <strchr>
 8018548:	f898 3000 	ldrb.w	r3, [r8]
 801854c:	2b2f      	cmp	r3, #47	@ 0x2f
 801854e:	4605      	mov	r5, r0
 8018550:	f000 809e 	beq.w	8018690 <rcl_expand_topic_name+0x1c4>
 8018554:	2b7e      	cmp	r3, #126	@ 0x7e
 8018556:	f040 80a2 	bne.w	801869e <rcl_expand_topic_name+0x1d2>
 801855a:	4638      	mov	r0, r7
 801855c:	f7e7 fe6a 	bl	8000234 <strlen>
 8018560:	4a82      	ldr	r2, [pc, #520]	@ (801876c <rcl_expand_topic_name+0x2a0>)
 8018562:	4b83      	ldr	r3, [pc, #524]	@ (8018770 <rcl_expand_topic_name+0x2a4>)
 8018564:	2801      	cmp	r0, #1
 8018566:	bf18      	it	ne
 8018568:	4613      	movne	r3, r2
 801856a:	9302      	str	r3, [sp, #8]
 801856c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801856e:	9300      	str	r3, [sp, #0]
 8018570:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018574:	f108 0301 	add.w	r3, r8, #1
 8018578:	9305      	str	r3, [sp, #20]
 801857a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801857e:	9301      	str	r3, [sp, #4]
 8018580:	ab14      	add	r3, sp, #80	@ 0x50
 8018582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018584:	f7fd fce4 	bl	8015f50 <rcutils_format_string_limit>
 8018588:	4682      	mov	sl, r0
 801858a:	2800      	cmp	r0, #0
 801858c:	f000 80c7 	beq.w	801871e <rcl_expand_topic_name+0x252>
 8018590:	2d00      	cmp	r5, #0
 8018592:	f000 80a2 	beq.w	80186da <rcl_expand_topic_name+0x20e>
 8018596:	217b      	movs	r1, #123	@ 0x7b
 8018598:	f001 f86a 	bl	8019670 <strchr>
 801859c:	46d1      	mov	r9, sl
 801859e:	4605      	mov	r5, r0
 80185a0:	9407      	str	r4, [sp, #28]
 80185a2:	46d3      	mov	fp, sl
 80185a4:	464c      	mov	r4, r9
 80185a6:	2d00      	cmp	r5, #0
 80185a8:	f000 80be 	beq.w	8018728 <rcl_expand_topic_name+0x25c>
 80185ac:	217d      	movs	r1, #125	@ 0x7d
 80185ae:	4620      	mov	r0, r4
 80185b0:	f001 f85e 	bl	8019670 <strchr>
 80185b4:	eba0 0905 	sub.w	r9, r0, r5
 80185b8:	f109 0a01 	add.w	sl, r9, #1
 80185bc:	486d      	ldr	r0, [pc, #436]	@ (8018774 <rcl_expand_topic_name+0x2a8>)
 80185be:	4652      	mov	r2, sl
 80185c0:	4629      	mov	r1, r5
 80185c2:	f001 f862 	bl	801968a <strncmp>
 80185c6:	2800      	cmp	r0, #0
 80185c8:	d067      	beq.n	801869a <rcl_expand_topic_name+0x1ce>
 80185ca:	486b      	ldr	r0, [pc, #428]	@ (8018778 <rcl_expand_topic_name+0x2ac>)
 80185cc:	4652      	mov	r2, sl
 80185ce:	4629      	mov	r1, r5
 80185d0:	f001 f85b 	bl	801968a <strncmp>
 80185d4:	b130      	cbz	r0, 80185e4 <rcl_expand_topic_name+0x118>
 80185d6:	4869      	ldr	r0, [pc, #420]	@ (801877c <rcl_expand_topic_name+0x2b0>)
 80185d8:	4652      	mov	r2, sl
 80185da:	4629      	mov	r1, r5
 80185dc:	f001 f855 	bl	801968a <strncmp>
 80185e0:	2800      	cmp	r0, #0
 80185e2:	d137      	bne.n	8018654 <rcl_expand_topic_name+0x188>
 80185e4:	46b9      	mov	r9, r7
 80185e6:	ab16      	add	r3, sp, #88	@ 0x58
 80185e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80185ec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80185f0:	ab14      	add	r3, sp, #80	@ 0x50
 80185f2:	4628      	mov	r0, r5
 80185f4:	cb0c      	ldmia	r3, {r2, r3}
 80185f6:	4651      	mov	r1, sl
 80185f8:	f7fd fde6 	bl	80161c8 <rcutils_strndup>
 80185fc:	4605      	mov	r5, r0
 80185fe:	2800      	cmp	r0, #0
 8018600:	f000 809c 	beq.w	801873c <rcl_expand_topic_name+0x270>
 8018604:	464a      	mov	r2, r9
 8018606:	4620      	mov	r0, r4
 8018608:	ab14      	add	r3, sp, #80	@ 0x50
 801860a:	4629      	mov	r1, r5
 801860c:	f7fd fcda 	bl	8015fc4 <rcutils_repl_str>
 8018610:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018612:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018614:	4604      	mov	r4, r0
 8018616:	4628      	mov	r0, r5
 8018618:	4798      	blx	r3
 801861a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801861c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801861e:	4658      	mov	r0, fp
 8018620:	4798      	blx	r3
 8018622:	2c00      	cmp	r4, #0
 8018624:	d07b      	beq.n	801871e <rcl_expand_topic_name+0x252>
 8018626:	217b      	movs	r1, #123	@ 0x7b
 8018628:	4620      	mov	r0, r4
 801862a:	f001 f821 	bl	8019670 <strchr>
 801862e:	46a3      	mov	fp, r4
 8018630:	4605      	mov	r5, r0
 8018632:	e7b8      	b.n	80185a6 <rcl_expand_topic_name+0xda>
 8018634:	240b      	movs	r4, #11
 8018636:	4620      	mov	r0, r4
 8018638:	b00b      	add	sp, #44	@ 0x2c
 801863a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801863e:	f7fb f819 	bl	8013674 <rcl_convert_rmw_ret_to_rcl_ret>
 8018642:	4604      	mov	r4, r0
 8018644:	e7f7      	b.n	8018636 <rcl_expand_topic_name+0x16a>
 8018646:	2467      	movs	r4, #103	@ 0x67
 8018648:	4620      	mov	r0, r4
 801864a:	b00b      	add	sp, #44	@ 0x2c
 801864c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018650:	24c9      	movs	r4, #201	@ 0xc9
 8018652:	e7f0      	b.n	8018636 <rcl_expand_topic_name+0x16a>
 8018654:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018658:	9806      	ldr	r0, [sp, #24]
 801865a:	1c69      	adds	r1, r5, #1
 801865c:	f7fd fece 	bl	80163fc <rcutils_string_map_getn>
 8018660:	4681      	mov	r9, r0
 8018662:	2800      	cmp	r0, #0
 8018664:	d1bf      	bne.n	80185e6 <rcl_expand_topic_name+0x11a>
 8018666:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018668:	aa16      	add	r2, sp, #88	@ 0x58
 801866a:	6018      	str	r0, [r3, #0]
 801866c:	ca07      	ldmia	r2, {r0, r1, r2}
 801866e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018672:	ab14      	add	r3, sp, #80	@ 0x50
 8018674:	cb0c      	ldmia	r3, {r2, r3}
 8018676:	4651      	mov	r1, sl
 8018678:	4628      	mov	r0, r5
 801867a:	f7fd fda5 	bl	80161c8 <rcutils_strndup>
 801867e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018680:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018682:	4798      	blx	r3
 8018684:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018686:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018688:	4658      	mov	r0, fp
 801868a:	2469      	movs	r4, #105	@ 0x69
 801868c:	4798      	blx	r3
 801868e:	e7d2      	b.n	8018636 <rcl_expand_topic_name+0x16a>
 8018690:	2800      	cmp	r0, #0
 8018692:	d05b      	beq.n	801874c <rcl_expand_topic_name+0x280>
 8018694:	46c1      	mov	r9, r8
 8018696:	46a2      	mov	sl, r4
 8018698:	e782      	b.n	80185a0 <rcl_expand_topic_name+0xd4>
 801869a:	46b1      	mov	r9, r6
 801869c:	e7a3      	b.n	80185e6 <rcl_expand_topic_name+0x11a>
 801869e:	2800      	cmp	r0, #0
 80186a0:	d1f8      	bne.n	8018694 <rcl_expand_topic_name+0x1c8>
 80186a2:	4638      	mov	r0, r7
 80186a4:	f7e7 fdc6 	bl	8000234 <strlen>
 80186a8:	4a35      	ldr	r2, [pc, #212]	@ (8018780 <rcl_expand_topic_name+0x2b4>)
 80186aa:	4b36      	ldr	r3, [pc, #216]	@ (8018784 <rcl_expand_topic_name+0x2b8>)
 80186ac:	f8cd 8010 	str.w	r8, [sp, #16]
 80186b0:	2801      	cmp	r0, #1
 80186b2:	bf18      	it	ne
 80186b4:	4613      	movne	r3, r2
 80186b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80186ba:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80186be:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80186c0:	9703      	str	r7, [sp, #12]
 80186c2:	9200      	str	r2, [sp, #0]
 80186c4:	ab14      	add	r3, sp, #80	@ 0x50
 80186c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80186c8:	f7fd fc42 	bl	8015f50 <rcutils_format_string_limit>
 80186cc:	4682      	mov	sl, r0
 80186ce:	4653      	mov	r3, sl
 80186d0:	b32b      	cbz	r3, 801871e <rcl_expand_topic_name+0x252>
 80186d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80186d4:	f8c3 a000 	str.w	sl, [r3]
 80186d8:	e7ad      	b.n	8018636 <rcl_expand_topic_name+0x16a>
 80186da:	f89a 3000 	ldrb.w	r3, [sl]
 80186de:	2b2f      	cmp	r3, #47	@ 0x2f
 80186e0:	d0f7      	beq.n	80186d2 <rcl_expand_topic_name+0x206>
 80186e2:	4638      	mov	r0, r7
 80186e4:	f7e7 fda6 	bl	8000234 <strlen>
 80186e8:	4a25      	ldr	r2, [pc, #148]	@ (8018780 <rcl_expand_topic_name+0x2b4>)
 80186ea:	4b26      	ldr	r3, [pc, #152]	@ (8018784 <rcl_expand_topic_name+0x2b8>)
 80186ec:	f8cd a010 	str.w	sl, [sp, #16]
 80186f0:	2801      	cmp	r0, #1
 80186f2:	bf18      	it	ne
 80186f4:	4613      	movne	r3, r2
 80186f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80186fa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80186fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018700:	9703      	str	r7, [sp, #12]
 8018702:	9200      	str	r2, [sp, #0]
 8018704:	ab14      	add	r3, sp, #80	@ 0x50
 8018706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018708:	f7fd fc22 	bl	8015f50 <rcutils_format_string_limit>
 801870c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801870e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018710:	4605      	mov	r5, r0
 8018712:	4650      	mov	r0, sl
 8018714:	4798      	blx	r3
 8018716:	46aa      	mov	sl, r5
 8018718:	e7d9      	b.n	80186ce <rcl_expand_topic_name+0x202>
 801871a:	24ca      	movs	r4, #202	@ 0xca
 801871c:	e78b      	b.n	8018636 <rcl_expand_topic_name+0x16a>
 801871e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018720:	2300      	movs	r3, #0
 8018722:	6013      	str	r3, [r2, #0]
 8018724:	240a      	movs	r4, #10
 8018726:	e786      	b.n	8018636 <rcl_expand_topic_name+0x16a>
 8018728:	465b      	mov	r3, fp
 801872a:	9c07      	ldr	r4, [sp, #28]
 801872c:	46da      	mov	sl, fp
 801872e:	2b00      	cmp	r3, #0
 8018730:	d1d3      	bne.n	80186da <rcl_expand_topic_name+0x20e>
 8018732:	f898 3000 	ldrb.w	r3, [r8]
 8018736:	2b2f      	cmp	r3, #47	@ 0x2f
 8018738:	d0cb      	beq.n	80186d2 <rcl_expand_topic_name+0x206>
 801873a:	e7b2      	b.n	80186a2 <rcl_expand_topic_name+0x1d6>
 801873c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8018740:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018742:	6015      	str	r5, [r2, #0]
 8018744:	4658      	mov	r0, fp
 8018746:	4798      	blx	r3
 8018748:	240a      	movs	r4, #10
 801874a:	e774      	b.n	8018636 <rcl_expand_topic_name+0x16a>
 801874c:	ab17      	add	r3, sp, #92	@ 0x5c
 801874e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018752:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018756:	ab14      	add	r3, sp, #80	@ 0x50
 8018758:	cb0e      	ldmia	r3, {r1, r2, r3}
 801875a:	4640      	mov	r0, r8
 801875c:	f7fd fd12 	bl	8016184 <rcutils_strdup>
 8018760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018762:	2800      	cmp	r0, #0
 8018764:	6018      	str	r0, [r3, #0]
 8018766:	bf08      	it	eq
 8018768:	240a      	moveq	r4, #10
 801876a:	e764      	b.n	8018636 <rcl_expand_topic_name+0x16a>
 801876c:	0801ac24 	.word	0x0801ac24
 8018770:	0801a710 	.word	0x0801a710
 8018774:	0801ac2c 	.word	0x0801ac2c
 8018778:	0801ac34 	.word	0x0801ac34
 801877c:	0801ac3c 	.word	0x0801ac3c
 8018780:	0801a6d8 	.word	0x0801a6d8
 8018784:	0801a720 	.word	0x0801a720

08018788 <rcl_get_default_topic_name_substitutions>:
 8018788:	2800      	cmp	r0, #0
 801878a:	bf0c      	ite	eq
 801878c:	200b      	moveq	r0, #11
 801878e:	2000      	movne	r0, #0
 8018790:	4770      	bx	lr
 8018792:	bf00      	nop

08018794 <rcl_get_zero_initialized_guard_condition>:
 8018794:	4a03      	ldr	r2, [pc, #12]	@ (80187a4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018796:	4603      	mov	r3, r0
 8018798:	e892 0003 	ldmia.w	r2, {r0, r1}
 801879c:	e883 0003 	stmia.w	r3, {r0, r1}
 80187a0:	4618      	mov	r0, r3
 80187a2:	4770      	bx	lr
 80187a4:	0801b0e8 	.word	0x0801b0e8

080187a8 <rcl_guard_condition_init>:
 80187a8:	b082      	sub	sp, #8
 80187aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187ac:	b087      	sub	sp, #28
 80187ae:	ac0c      	add	r4, sp, #48	@ 0x30
 80187b0:	e884 000c 	stmia.w	r4, {r2, r3}
 80187b4:	46a6      	mov	lr, r4
 80187b6:	460d      	mov	r5, r1
 80187b8:	4604      	mov	r4, r0
 80187ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80187be:	f10d 0c04 	add.w	ip, sp, #4
 80187c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80187c6:	f8de 3000 	ldr.w	r3, [lr]
 80187ca:	f8cc 3000 	str.w	r3, [ip]
 80187ce:	a801      	add	r0, sp, #4
 80187d0:	f7f4 fc80 	bl	800d0d4 <rcutils_allocator_is_valid>
 80187d4:	b338      	cbz	r0, 8018826 <rcl_guard_condition_init+0x7e>
 80187d6:	b334      	cbz	r4, 8018826 <rcl_guard_condition_init+0x7e>
 80187d8:	6866      	ldr	r6, [r4, #4]
 80187da:	b9ee      	cbnz	r6, 8018818 <rcl_guard_condition_init+0x70>
 80187dc:	b31d      	cbz	r5, 8018826 <rcl_guard_condition_init+0x7e>
 80187de:	4628      	mov	r0, r5
 80187e0:	f7fa ff66 	bl	80136b0 <rcl_context_is_valid>
 80187e4:	b308      	cbz	r0, 801882a <rcl_guard_condition_init+0x82>
 80187e6:	9b01      	ldr	r3, [sp, #4]
 80187e8:	9905      	ldr	r1, [sp, #20]
 80187ea:	201c      	movs	r0, #28
 80187ec:	4798      	blx	r3
 80187ee:	4607      	mov	r7, r0
 80187f0:	6060      	str	r0, [r4, #4]
 80187f2:	b310      	cbz	r0, 801883a <rcl_guard_condition_init+0x92>
 80187f4:	6828      	ldr	r0, [r5, #0]
 80187f6:	3028      	adds	r0, #40	@ 0x28
 80187f8:	f000 f9ac 	bl	8018b54 <rmw_create_guard_condition>
 80187fc:	6038      	str	r0, [r7, #0]
 80187fe:	6860      	ldr	r0, [r4, #4]
 8018800:	6805      	ldr	r5, [r0, #0]
 8018802:	b1a5      	cbz	r5, 801882e <rcl_guard_condition_init+0x86>
 8018804:	2301      	movs	r3, #1
 8018806:	ac01      	add	r4, sp, #4
 8018808:	7103      	strb	r3, [r0, #4]
 801880a:	f100 0708 	add.w	r7, r0, #8
 801880e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018810:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018812:	6823      	ldr	r3, [r4, #0]
 8018814:	603b      	str	r3, [r7, #0]
 8018816:	e000      	b.n	801881a <rcl_guard_condition_init+0x72>
 8018818:	2664      	movs	r6, #100	@ 0x64
 801881a:	4630      	mov	r0, r6
 801881c:	b007      	add	sp, #28
 801881e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018822:	b002      	add	sp, #8
 8018824:	4770      	bx	lr
 8018826:	260b      	movs	r6, #11
 8018828:	e7f7      	b.n	801881a <rcl_guard_condition_init+0x72>
 801882a:	2665      	movs	r6, #101	@ 0x65
 801882c:	e7f5      	b.n	801881a <rcl_guard_condition_init+0x72>
 801882e:	9b02      	ldr	r3, [sp, #8]
 8018830:	9905      	ldr	r1, [sp, #20]
 8018832:	4798      	blx	r3
 8018834:	2601      	movs	r6, #1
 8018836:	6065      	str	r5, [r4, #4]
 8018838:	e7ef      	b.n	801881a <rcl_guard_condition_init+0x72>
 801883a:	260a      	movs	r6, #10
 801883c:	e7ed      	b.n	801881a <rcl_guard_condition_init+0x72>
 801883e:	bf00      	nop

08018840 <rcl_guard_condition_init_from_rmw>:
 8018840:	b082      	sub	sp, #8
 8018842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018846:	b086      	sub	sp, #24
 8018848:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801884c:	4604      	mov	r4, r0
 801884e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8018852:	460e      	mov	r6, r1
 8018854:	4617      	mov	r7, r2
 8018856:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801885a:	f10d 0e04 	add.w	lr, sp, #4
 801885e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018862:	f8dc 3000 	ldr.w	r3, [ip]
 8018866:	f8ce 3000 	str.w	r3, [lr]
 801886a:	a801      	add	r0, sp, #4
 801886c:	f7f4 fc32 	bl	800d0d4 <rcutils_allocator_is_valid>
 8018870:	b350      	cbz	r0, 80188c8 <rcl_guard_condition_init_from_rmw+0x88>
 8018872:	b34c      	cbz	r4, 80188c8 <rcl_guard_condition_init_from_rmw+0x88>
 8018874:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018878:	f1b8 0f00 	cmp.w	r8, #0
 801887c:	d11e      	bne.n	80188bc <rcl_guard_condition_init_from_rmw+0x7c>
 801887e:	b31f      	cbz	r7, 80188c8 <rcl_guard_condition_init_from_rmw+0x88>
 8018880:	4638      	mov	r0, r7
 8018882:	f7fa ff15 	bl	80136b0 <rcl_context_is_valid>
 8018886:	b328      	cbz	r0, 80188d4 <rcl_guard_condition_init_from_rmw+0x94>
 8018888:	9b01      	ldr	r3, [sp, #4]
 801888a:	9905      	ldr	r1, [sp, #20]
 801888c:	201c      	movs	r0, #28
 801888e:	4798      	blx	r3
 8018890:	4605      	mov	r5, r0
 8018892:	6060      	str	r0, [r4, #4]
 8018894:	b358      	cbz	r0, 80188ee <rcl_guard_condition_init_from_rmw+0xae>
 8018896:	b1fe      	cbz	r6, 80188d8 <rcl_guard_condition_init_from_rmw+0x98>
 8018898:	6006      	str	r6, [r0, #0]
 801889a:	f880 8004 	strb.w	r8, [r0, #4]
 801889e:	ac01      	add	r4, sp, #4
 80188a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80188a2:	f105 0c08 	add.w	ip, r5, #8
 80188a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80188aa:	6823      	ldr	r3, [r4, #0]
 80188ac:	f8cc 3000 	str.w	r3, [ip]
 80188b0:	2000      	movs	r0, #0
 80188b2:	b006      	add	sp, #24
 80188b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80188b8:	b002      	add	sp, #8
 80188ba:	4770      	bx	lr
 80188bc:	2064      	movs	r0, #100	@ 0x64
 80188be:	b006      	add	sp, #24
 80188c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80188c4:	b002      	add	sp, #8
 80188c6:	4770      	bx	lr
 80188c8:	200b      	movs	r0, #11
 80188ca:	b006      	add	sp, #24
 80188cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80188d0:	b002      	add	sp, #8
 80188d2:	4770      	bx	lr
 80188d4:	2065      	movs	r0, #101	@ 0x65
 80188d6:	e7f2      	b.n	80188be <rcl_guard_condition_init_from_rmw+0x7e>
 80188d8:	6838      	ldr	r0, [r7, #0]
 80188da:	3028      	adds	r0, #40	@ 0x28
 80188dc:	f000 f93a 	bl	8018b54 <rmw_create_guard_condition>
 80188e0:	6028      	str	r0, [r5, #0]
 80188e2:	6865      	ldr	r5, [r4, #4]
 80188e4:	682e      	ldr	r6, [r5, #0]
 80188e6:	b126      	cbz	r6, 80188f2 <rcl_guard_condition_init_from_rmw+0xb2>
 80188e8:	2301      	movs	r3, #1
 80188ea:	712b      	strb	r3, [r5, #4]
 80188ec:	e7d7      	b.n	801889e <rcl_guard_condition_init_from_rmw+0x5e>
 80188ee:	200a      	movs	r0, #10
 80188f0:	e7e5      	b.n	80188be <rcl_guard_condition_init_from_rmw+0x7e>
 80188f2:	4628      	mov	r0, r5
 80188f4:	9b02      	ldr	r3, [sp, #8]
 80188f6:	9905      	ldr	r1, [sp, #20]
 80188f8:	4798      	blx	r3
 80188fa:	6066      	str	r6, [r4, #4]
 80188fc:	2001      	movs	r0, #1
 80188fe:	e7de      	b.n	80188be <rcl_guard_condition_init_from_rmw+0x7e>

08018900 <rcl_guard_condition_fini>:
 8018900:	b570      	push	{r4, r5, r6, lr}
 8018902:	b082      	sub	sp, #8
 8018904:	b1f0      	cbz	r0, 8018944 <rcl_guard_condition_fini+0x44>
 8018906:	6843      	ldr	r3, [r0, #4]
 8018908:	4604      	mov	r4, r0
 801890a:	b163      	cbz	r3, 8018926 <rcl_guard_condition_fini+0x26>
 801890c:	6818      	ldr	r0, [r3, #0]
 801890e:	68de      	ldr	r6, [r3, #12]
 8018910:	6999      	ldr	r1, [r3, #24]
 8018912:	b160      	cbz	r0, 801892e <rcl_guard_condition_fini+0x2e>
 8018914:	791d      	ldrb	r5, [r3, #4]
 8018916:	b965      	cbnz	r5, 8018932 <rcl_guard_condition_fini+0x32>
 8018918:	4618      	mov	r0, r3
 801891a:	47b0      	blx	r6
 801891c:	2300      	movs	r3, #0
 801891e:	4628      	mov	r0, r5
 8018920:	6063      	str	r3, [r4, #4]
 8018922:	b002      	add	sp, #8
 8018924:	bd70      	pop	{r4, r5, r6, pc}
 8018926:	461d      	mov	r5, r3
 8018928:	4628      	mov	r0, r5
 801892a:	b002      	add	sp, #8
 801892c:	bd70      	pop	{r4, r5, r6, pc}
 801892e:	4605      	mov	r5, r0
 8018930:	e7f2      	b.n	8018918 <rcl_guard_condition_fini+0x18>
 8018932:	9101      	str	r1, [sp, #4]
 8018934:	f000 f922 	bl	8018b7c <rmw_destroy_guard_condition>
 8018938:	1e05      	subs	r5, r0, #0
 801893a:	6863      	ldr	r3, [r4, #4]
 801893c:	9901      	ldr	r1, [sp, #4]
 801893e:	bf18      	it	ne
 8018940:	2501      	movne	r5, #1
 8018942:	e7e9      	b.n	8018918 <rcl_guard_condition_fini+0x18>
 8018944:	250b      	movs	r5, #11
 8018946:	4628      	mov	r0, r5
 8018948:	b002      	add	sp, #8
 801894a:	bd70      	pop	{r4, r5, r6, pc}

0801894c <rcl_guard_condition_get_default_options>:
 801894c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801894e:	b087      	sub	sp, #28
 8018950:	4606      	mov	r6, r0
 8018952:	4668      	mov	r0, sp
 8018954:	f7f4 fbb0 	bl	800d0b8 <rcutils_get_default_allocator>
 8018958:	4b09      	ldr	r3, [pc, #36]	@ (8018980 <rcl_guard_condition_get_default_options+0x34>)
 801895a:	46ee      	mov	lr, sp
 801895c:	469c      	mov	ip, r3
 801895e:	461d      	mov	r5, r3
 8018960:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018964:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801896a:	4634      	mov	r4, r6
 801896c:	f8de 7000 	ldr.w	r7, [lr]
 8018970:	f8cc 7000 	str.w	r7, [ip]
 8018974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018976:	4630      	mov	r0, r6
 8018978:	6027      	str	r7, [r4, #0]
 801897a:	b007      	add	sp, #28
 801897c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801897e:	bf00      	nop
 8018980:	2000afd8 	.word	0x2000afd8

08018984 <rcl_trigger_guard_condition>:
 8018984:	b148      	cbz	r0, 801899a <rcl_trigger_guard_condition+0x16>
 8018986:	b508      	push	{r3, lr}
 8018988:	6843      	ldr	r3, [r0, #4]
 801898a:	b143      	cbz	r3, 801899e <rcl_trigger_guard_condition+0x1a>
 801898c:	6818      	ldr	r0, [r3, #0]
 801898e:	f000 f909 	bl	8018ba4 <rmw_trigger_guard_condition>
 8018992:	3800      	subs	r0, #0
 8018994:	bf18      	it	ne
 8018996:	2001      	movne	r0, #1
 8018998:	bd08      	pop	{r3, pc}
 801899a:	200b      	movs	r0, #11
 801899c:	4770      	bx	lr
 801899e:	200b      	movs	r0, #11
 80189a0:	bd08      	pop	{r3, pc}
 80189a2:	bf00      	nop

080189a4 <rcl_guard_condition_get_rmw_handle>:
 80189a4:	b110      	cbz	r0, 80189ac <rcl_guard_condition_get_rmw_handle+0x8>
 80189a6:	6840      	ldr	r0, [r0, #4]
 80189a8:	b100      	cbz	r0, 80189ac <rcl_guard_condition_get_rmw_handle+0x8>
 80189aa:	6800      	ldr	r0, [r0, #0]
 80189ac:	4770      	bx	lr
 80189ae:	bf00      	nop

080189b0 <rcl_validate_topic_name>:
 80189b0:	2800      	cmp	r0, #0
 80189b2:	d07a      	beq.n	8018aaa <rcl_validate_topic_name+0xfa>
 80189b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189b8:	460e      	mov	r6, r1
 80189ba:	2900      	cmp	r1, #0
 80189bc:	d07c      	beq.n	8018ab8 <rcl_validate_topic_name+0x108>
 80189be:	4617      	mov	r7, r2
 80189c0:	4605      	mov	r5, r0
 80189c2:	f7e7 fc37 	bl	8000234 <strlen>
 80189c6:	b1b0      	cbz	r0, 80189f6 <rcl_validate_topic_name+0x46>
 80189c8:	f895 9000 	ldrb.w	r9, [r5]
 80189cc:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8018b50 <rcl_validate_topic_name+0x1a0>
 80189d0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80189d4:	f013 0304 	ands.w	r3, r3, #4
 80189d8:	d169      	bne.n	8018aae <rcl_validate_topic_name+0xfe>
 80189da:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80189de:	f815 2008 	ldrb.w	r2, [r5, r8]
 80189e2:	2a2f      	cmp	r2, #47	@ 0x2f
 80189e4:	d10e      	bne.n	8018a04 <rcl_validate_topic_name+0x54>
 80189e6:	2202      	movs	r2, #2
 80189e8:	6032      	str	r2, [r6, #0]
 80189ea:	b36f      	cbz	r7, 8018a48 <rcl_validate_topic_name+0x98>
 80189ec:	f8c7 8000 	str.w	r8, [r7]
 80189f0:	4618      	mov	r0, r3
 80189f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189f6:	2301      	movs	r3, #1
 80189f8:	6033      	str	r3, [r6, #0]
 80189fa:	b32f      	cbz	r7, 8018a48 <rcl_validate_topic_name+0x98>
 80189fc:	2000      	movs	r0, #0
 80189fe:	6038      	str	r0, [r7, #0]
 8018a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a04:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8018a08:	461c      	mov	r4, r3
 8018a0a:	4619      	mov	r1, r3
 8018a0c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018a10:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018a14:	f1be 0f09 	cmp.w	lr, #9
 8018a18:	d919      	bls.n	8018a4e <rcl_validate_topic_name+0x9e>
 8018a1a:	f022 0e20 	bic.w	lr, r2, #32
 8018a1e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8018a22:	f1be 0f19 	cmp.w	lr, #25
 8018a26:	d912      	bls.n	8018a4e <rcl_validate_topic_name+0x9e>
 8018a28:	2a5f      	cmp	r2, #95	@ 0x5f
 8018a2a:	d019      	beq.n	8018a60 <rcl_validate_topic_name+0xb0>
 8018a2c:	2a2f      	cmp	r2, #47	@ 0x2f
 8018a2e:	d051      	beq.n	8018ad4 <rcl_validate_topic_name+0x124>
 8018a30:	2a7e      	cmp	r2, #126	@ 0x7e
 8018a32:	d048      	beq.n	8018ac6 <rcl_validate_topic_name+0x116>
 8018a34:	2a7b      	cmp	r2, #123	@ 0x7b
 8018a36:	d054      	beq.n	8018ae2 <rcl_validate_topic_name+0x132>
 8018a38:	2a7d      	cmp	r2, #125	@ 0x7d
 8018a3a:	d161      	bne.n	8018b00 <rcl_validate_topic_name+0x150>
 8018a3c:	2c00      	cmp	r4, #0
 8018a3e:	d155      	bne.n	8018aec <rcl_validate_topic_name+0x13c>
 8018a40:	2305      	movs	r3, #5
 8018a42:	6033      	str	r3, [r6, #0]
 8018a44:	b107      	cbz	r7, 8018a48 <rcl_validate_topic_name+0x98>
 8018a46:	6039      	str	r1, [r7, #0]
 8018a48:	2000      	movs	r0, #0
 8018a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a4e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018a52:	0752      	lsls	r2, r2, #29
 8018a54:	d504      	bpl.n	8018a60 <rcl_validate_topic_name+0xb0>
 8018a56:	b11c      	cbz	r4, 8018a60 <rcl_validate_topic_name+0xb0>
 8018a58:	b111      	cbz	r1, 8018a60 <rcl_validate_topic_name+0xb0>
 8018a5a:	1e4a      	subs	r2, r1, #1
 8018a5c:	429a      	cmp	r2, r3
 8018a5e:	d02d      	beq.n	8018abc <rcl_validate_topic_name+0x10c>
 8018a60:	3101      	adds	r1, #1
 8018a62:	4288      	cmp	r0, r1
 8018a64:	d1d2      	bne.n	8018a0c <rcl_validate_topic_name+0x5c>
 8018a66:	2c00      	cmp	r4, #0
 8018a68:	d145      	bne.n	8018af6 <rcl_validate_topic_name+0x146>
 8018a6a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8018a6e:	d04f      	beq.n	8018b10 <rcl_validate_topic_name+0x160>
 8018a70:	4620      	mov	r0, r4
 8018a72:	2301      	movs	r3, #1
 8018a74:	e006      	b.n	8018a84 <rcl_validate_topic_name+0xd4>
 8018a76:	428b      	cmp	r3, r1
 8018a78:	f105 0501 	add.w	r5, r5, #1
 8018a7c:	f103 0201 	add.w	r2, r3, #1
 8018a80:	d236      	bcs.n	8018af0 <rcl_validate_topic_name+0x140>
 8018a82:	4613      	mov	r3, r2
 8018a84:	4580      	cmp	r8, r0
 8018a86:	f100 0001 	add.w	r0, r0, #1
 8018a8a:	d0f4      	beq.n	8018a76 <rcl_validate_topic_name+0xc6>
 8018a8c:	782a      	ldrb	r2, [r5, #0]
 8018a8e:	2a2f      	cmp	r2, #47	@ 0x2f
 8018a90:	d1f1      	bne.n	8018a76 <rcl_validate_topic_name+0xc6>
 8018a92:	786a      	ldrb	r2, [r5, #1]
 8018a94:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018a98:	0754      	lsls	r4, r2, #29
 8018a9a:	d5ec      	bpl.n	8018a76 <rcl_validate_topic_name+0xc6>
 8018a9c:	2204      	movs	r2, #4
 8018a9e:	6032      	str	r2, [r6, #0]
 8018aa0:	2f00      	cmp	r7, #0
 8018aa2:	d0d1      	beq.n	8018a48 <rcl_validate_topic_name+0x98>
 8018aa4:	603b      	str	r3, [r7, #0]
 8018aa6:	2000      	movs	r0, #0
 8018aa8:	e7aa      	b.n	8018a00 <rcl_validate_topic_name+0x50>
 8018aaa:	200b      	movs	r0, #11
 8018aac:	4770      	bx	lr
 8018aae:	2304      	movs	r3, #4
 8018ab0:	6033      	str	r3, [r6, #0]
 8018ab2:	2f00      	cmp	r7, #0
 8018ab4:	d1a2      	bne.n	80189fc <rcl_validate_topic_name+0x4c>
 8018ab6:	e7c7      	b.n	8018a48 <rcl_validate_topic_name+0x98>
 8018ab8:	200b      	movs	r0, #11
 8018aba:	e7a1      	b.n	8018a00 <rcl_validate_topic_name+0x50>
 8018abc:	2309      	movs	r3, #9
 8018abe:	6033      	str	r3, [r6, #0]
 8018ac0:	2f00      	cmp	r7, #0
 8018ac2:	d1c0      	bne.n	8018a46 <rcl_validate_topic_name+0x96>
 8018ac4:	e7c0      	b.n	8018a48 <rcl_validate_topic_name+0x98>
 8018ac6:	2900      	cmp	r1, #0
 8018ac8:	d0ca      	beq.n	8018a60 <rcl_validate_topic_name+0xb0>
 8018aca:	2306      	movs	r3, #6
 8018acc:	6033      	str	r3, [r6, #0]
 8018ace:	2f00      	cmp	r7, #0
 8018ad0:	d1b9      	bne.n	8018a46 <rcl_validate_topic_name+0x96>
 8018ad2:	e7b9      	b.n	8018a48 <rcl_validate_topic_name+0x98>
 8018ad4:	2c00      	cmp	r4, #0
 8018ad6:	d0c3      	beq.n	8018a60 <rcl_validate_topic_name+0xb0>
 8018ad8:	2308      	movs	r3, #8
 8018ada:	6033      	str	r3, [r6, #0]
 8018adc:	2f00      	cmp	r7, #0
 8018ade:	d1b2      	bne.n	8018a46 <rcl_validate_topic_name+0x96>
 8018ae0:	e7b2      	b.n	8018a48 <rcl_validate_topic_name+0x98>
 8018ae2:	2c00      	cmp	r4, #0
 8018ae4:	d1f8      	bne.n	8018ad8 <rcl_validate_topic_name+0x128>
 8018ae6:	460b      	mov	r3, r1
 8018ae8:	2401      	movs	r4, #1
 8018aea:	e7b9      	b.n	8018a60 <rcl_validate_topic_name+0xb0>
 8018aec:	2400      	movs	r4, #0
 8018aee:	e7b7      	b.n	8018a60 <rcl_validate_topic_name+0xb0>
 8018af0:	2000      	movs	r0, #0
 8018af2:	6030      	str	r0, [r6, #0]
 8018af4:	e784      	b.n	8018a00 <rcl_validate_topic_name+0x50>
 8018af6:	2205      	movs	r2, #5
 8018af8:	6032      	str	r2, [r6, #0]
 8018afa:	2f00      	cmp	r7, #0
 8018afc:	d1d2      	bne.n	8018aa4 <rcl_validate_topic_name+0xf4>
 8018afe:	e7a3      	b.n	8018a48 <rcl_validate_topic_name+0x98>
 8018b00:	2c00      	cmp	r4, #0
 8018b02:	bf14      	ite	ne
 8018b04:	2308      	movne	r3, #8
 8018b06:	2303      	moveq	r3, #3
 8018b08:	6033      	str	r3, [r6, #0]
 8018b0a:	2f00      	cmp	r7, #0
 8018b0c:	d19b      	bne.n	8018a46 <rcl_validate_topic_name+0x96>
 8018b0e:	e79b      	b.n	8018a48 <rcl_validate_topic_name+0x98>
 8018b10:	2301      	movs	r3, #1
 8018b12:	e00a      	b.n	8018b2a <rcl_validate_topic_name+0x17a>
 8018b14:	2c01      	cmp	r4, #1
 8018b16:	d013      	beq.n	8018b40 <rcl_validate_topic_name+0x190>
 8018b18:	4299      	cmp	r1, r3
 8018b1a:	f104 0401 	add.w	r4, r4, #1
 8018b1e:	f105 0501 	add.w	r5, r5, #1
 8018b22:	f103 0201 	add.w	r2, r3, #1
 8018b26:	d9e3      	bls.n	8018af0 <rcl_validate_topic_name+0x140>
 8018b28:	4613      	mov	r3, r2
 8018b2a:	45a0      	cmp	r8, r4
 8018b2c:	d0f4      	beq.n	8018b18 <rcl_validate_topic_name+0x168>
 8018b2e:	782a      	ldrb	r2, [r5, #0]
 8018b30:	2a2f      	cmp	r2, #47	@ 0x2f
 8018b32:	d1ef      	bne.n	8018b14 <rcl_validate_topic_name+0x164>
 8018b34:	786a      	ldrb	r2, [r5, #1]
 8018b36:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018b3a:	0752      	lsls	r2, r2, #29
 8018b3c:	d5ec      	bpl.n	8018b18 <rcl_validate_topic_name+0x168>
 8018b3e:	e7ad      	b.n	8018a9c <rcl_validate_topic_name+0xec>
 8018b40:	2307      	movs	r3, #7
 8018b42:	6033      	str	r3, [r6, #0]
 8018b44:	2f00      	cmp	r7, #0
 8018b46:	f43f af7f 	beq.w	8018a48 <rcl_validate_topic_name+0x98>
 8018b4a:	603c      	str	r4, [r7, #0]
 8018b4c:	2000      	movs	r0, #0
 8018b4e:	e757      	b.n	8018a00 <rcl_validate_topic_name+0x50>
 8018b50:	0801b1cf 	.word	0x0801b1cf

08018b54 <rmw_create_guard_condition>:
 8018b54:	b538      	push	{r3, r4, r5, lr}
 8018b56:	4605      	mov	r5, r0
 8018b58:	4807      	ldr	r0, [pc, #28]	@ (8018b78 <rmw_create_guard_condition+0x24>)
 8018b5a:	f7fd ff41 	bl	80169e0 <get_memory>
 8018b5e:	b148      	cbz	r0, 8018b74 <rmw_create_guard_condition+0x20>
 8018b60:	6884      	ldr	r4, [r0, #8]
 8018b62:	2300      	movs	r3, #0
 8018b64:	7423      	strb	r3, [r4, #16]
 8018b66:	61e5      	str	r5, [r4, #28]
 8018b68:	f7fd ffa2 	bl	8016ab0 <rmw_get_implementation_identifier>
 8018b6c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8018b70:	f104 0014 	add.w	r0, r4, #20
 8018b74:	bd38      	pop	{r3, r4, r5, pc}
 8018b76:	bf00      	nop
 8018b78:	2000ae74 	.word	0x2000ae74

08018b7c <rmw_destroy_guard_condition>:
 8018b7c:	b508      	push	{r3, lr}
 8018b7e:	4b08      	ldr	r3, [pc, #32]	@ (8018ba0 <rmw_destroy_guard_condition+0x24>)
 8018b80:	6819      	ldr	r1, [r3, #0]
 8018b82:	b911      	cbnz	r1, 8018b8a <rmw_destroy_guard_condition+0xe>
 8018b84:	e00a      	b.n	8018b9c <rmw_destroy_guard_condition+0x20>
 8018b86:	6849      	ldr	r1, [r1, #4]
 8018b88:	b141      	cbz	r1, 8018b9c <rmw_destroy_guard_condition+0x20>
 8018b8a:	688b      	ldr	r3, [r1, #8]
 8018b8c:	3314      	adds	r3, #20
 8018b8e:	4298      	cmp	r0, r3
 8018b90:	d1f9      	bne.n	8018b86 <rmw_destroy_guard_condition+0xa>
 8018b92:	4803      	ldr	r0, [pc, #12]	@ (8018ba0 <rmw_destroy_guard_condition+0x24>)
 8018b94:	f7fd ff34 	bl	8016a00 <put_memory>
 8018b98:	2000      	movs	r0, #0
 8018b9a:	bd08      	pop	{r3, pc}
 8018b9c:	2001      	movs	r0, #1
 8018b9e:	bd08      	pop	{r3, pc}
 8018ba0:	2000ae74 	.word	0x2000ae74

08018ba4 <rmw_trigger_guard_condition>:
 8018ba4:	b160      	cbz	r0, 8018bc0 <rmw_trigger_guard_condition+0x1c>
 8018ba6:	b510      	push	{r4, lr}
 8018ba8:	4604      	mov	r4, r0
 8018baa:	6800      	ldr	r0, [r0, #0]
 8018bac:	f7f5 fcc6 	bl	800e53c <is_uxrce_rmw_identifier_valid>
 8018bb0:	b908      	cbnz	r0, 8018bb6 <rmw_trigger_guard_condition+0x12>
 8018bb2:	2001      	movs	r0, #1
 8018bb4:	bd10      	pop	{r4, pc}
 8018bb6:	6863      	ldr	r3, [r4, #4]
 8018bb8:	2201      	movs	r2, #1
 8018bba:	741a      	strb	r2, [r3, #16]
 8018bbc:	2000      	movs	r0, #0
 8018bbe:	bd10      	pop	{r4, pc}
 8018bc0:	2001      	movs	r0, #1
 8018bc2:	4770      	bx	lr

08018bc4 <rosidl_runtime_c__String__init>:
 8018bc4:	b510      	push	{r4, lr}
 8018bc6:	4604      	mov	r4, r0
 8018bc8:	b086      	sub	sp, #24
 8018bca:	b170      	cbz	r0, 8018bea <rosidl_runtime_c__String__init+0x26>
 8018bcc:	a801      	add	r0, sp, #4
 8018bce:	f7f4 fa73 	bl	800d0b8 <rcutils_get_default_allocator>
 8018bd2:	9b01      	ldr	r3, [sp, #4]
 8018bd4:	9905      	ldr	r1, [sp, #20]
 8018bd6:	2001      	movs	r0, #1
 8018bd8:	4798      	blx	r3
 8018bda:	6020      	str	r0, [r4, #0]
 8018bdc:	b128      	cbz	r0, 8018bea <rosidl_runtime_c__String__init+0x26>
 8018bde:	2100      	movs	r1, #0
 8018be0:	2201      	movs	r2, #1
 8018be2:	7001      	strb	r1, [r0, #0]
 8018be4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8018be8:	4610      	mov	r0, r2
 8018bea:	b006      	add	sp, #24
 8018bec:	bd10      	pop	{r4, pc}
 8018bee:	bf00      	nop

08018bf0 <rosidl_runtime_c__String__fini>:
 8018bf0:	b320      	cbz	r0, 8018c3c <rosidl_runtime_c__String__fini+0x4c>
 8018bf2:	b510      	push	{r4, lr}
 8018bf4:	6803      	ldr	r3, [r0, #0]
 8018bf6:	b086      	sub	sp, #24
 8018bf8:	4604      	mov	r4, r0
 8018bfa:	b173      	cbz	r3, 8018c1a <rosidl_runtime_c__String__fini+0x2a>
 8018bfc:	6883      	ldr	r3, [r0, #8]
 8018bfe:	b1f3      	cbz	r3, 8018c3e <rosidl_runtime_c__String__fini+0x4e>
 8018c00:	a801      	add	r0, sp, #4
 8018c02:	f7f4 fa59 	bl	800d0b8 <rcutils_get_default_allocator>
 8018c06:	9b02      	ldr	r3, [sp, #8]
 8018c08:	9905      	ldr	r1, [sp, #20]
 8018c0a:	6820      	ldr	r0, [r4, #0]
 8018c0c:	4798      	blx	r3
 8018c0e:	2300      	movs	r3, #0
 8018c10:	e9c4 3300 	strd	r3, r3, [r4]
 8018c14:	60a3      	str	r3, [r4, #8]
 8018c16:	b006      	add	sp, #24
 8018c18:	bd10      	pop	{r4, pc}
 8018c1a:	6843      	ldr	r3, [r0, #4]
 8018c1c:	b9db      	cbnz	r3, 8018c56 <rosidl_runtime_c__String__fini+0x66>
 8018c1e:	6883      	ldr	r3, [r0, #8]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d0f8      	beq.n	8018c16 <rosidl_runtime_c__String__fini+0x26>
 8018c24:	4b12      	ldr	r3, [pc, #72]	@ (8018c70 <rosidl_runtime_c__String__fini+0x80>)
 8018c26:	4813      	ldr	r0, [pc, #76]	@ (8018c74 <rosidl_runtime_c__String__fini+0x84>)
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	2251      	movs	r2, #81	@ 0x51
 8018c2c:	68db      	ldr	r3, [r3, #12]
 8018c2e:	2101      	movs	r1, #1
 8018c30:	f000 fb82 	bl	8019338 <fwrite>
 8018c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c38:	f000 f83e 	bl	8018cb8 <exit>
 8018c3c:	4770      	bx	lr
 8018c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8018c70 <rosidl_runtime_c__String__fini+0x80>)
 8018c40:	480d      	ldr	r0, [pc, #52]	@ (8018c78 <rosidl_runtime_c__String__fini+0x88>)
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	224c      	movs	r2, #76	@ 0x4c
 8018c46:	68db      	ldr	r3, [r3, #12]
 8018c48:	2101      	movs	r1, #1
 8018c4a:	f000 fb75 	bl	8019338 <fwrite>
 8018c4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c52:	f000 f831 	bl	8018cb8 <exit>
 8018c56:	4b06      	ldr	r3, [pc, #24]	@ (8018c70 <rosidl_runtime_c__String__fini+0x80>)
 8018c58:	4808      	ldr	r0, [pc, #32]	@ (8018c7c <rosidl_runtime_c__String__fini+0x8c>)
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	224e      	movs	r2, #78	@ 0x4e
 8018c5e:	68db      	ldr	r3, [r3, #12]
 8018c60:	2101      	movs	r1, #1
 8018c62:	f000 fb69 	bl	8019338 <fwrite>
 8018c66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c6a:	f000 f825 	bl	8018cb8 <exit>
 8018c6e:	bf00      	nop
 8018c70:	200002ac 	.word	0x200002ac
 8018c74:	0801ace8 	.word	0x0801ace8
 8018c78:	0801ac48 	.word	0x0801ac48
 8018c7c:	0801ac98 	.word	0x0801ac98

08018c80 <calloc>:
 8018c80:	4b02      	ldr	r3, [pc, #8]	@ (8018c8c <calloc+0xc>)
 8018c82:	460a      	mov	r2, r1
 8018c84:	4601      	mov	r1, r0
 8018c86:	6818      	ldr	r0, [r3, #0]
 8018c88:	f000 b802 	b.w	8018c90 <_calloc_r>
 8018c8c:	200002ac 	.word	0x200002ac

08018c90 <_calloc_r>:
 8018c90:	b570      	push	{r4, r5, r6, lr}
 8018c92:	fba1 5402 	umull	r5, r4, r1, r2
 8018c96:	b934      	cbnz	r4, 8018ca6 <_calloc_r+0x16>
 8018c98:	4629      	mov	r1, r5
 8018c9a:	f000 f899 	bl	8018dd0 <_malloc_r>
 8018c9e:	4606      	mov	r6, r0
 8018ca0:	b928      	cbnz	r0, 8018cae <_calloc_r+0x1e>
 8018ca2:	4630      	mov	r0, r6
 8018ca4:	bd70      	pop	{r4, r5, r6, pc}
 8018ca6:	220c      	movs	r2, #12
 8018ca8:	6002      	str	r2, [r0, #0]
 8018caa:	2600      	movs	r6, #0
 8018cac:	e7f9      	b.n	8018ca2 <_calloc_r+0x12>
 8018cae:	462a      	mov	r2, r5
 8018cb0:	4621      	mov	r1, r4
 8018cb2:	f000 fcd5 	bl	8019660 <memset>
 8018cb6:	e7f4      	b.n	8018ca2 <_calloc_r+0x12>

08018cb8 <exit>:
 8018cb8:	b508      	push	{r3, lr}
 8018cba:	4b06      	ldr	r3, [pc, #24]	@ (8018cd4 <exit+0x1c>)
 8018cbc:	4604      	mov	r4, r0
 8018cbe:	b113      	cbz	r3, 8018cc6 <exit+0xe>
 8018cc0:	2100      	movs	r1, #0
 8018cc2:	f3af 8000 	nop.w
 8018cc6:	4b04      	ldr	r3, [pc, #16]	@ (8018cd8 <exit+0x20>)
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	b103      	cbz	r3, 8018cce <exit+0x16>
 8018ccc:	4798      	blx	r3
 8018cce:	4620      	mov	r0, r4
 8018cd0:	f7e9 fb46 	bl	8002360 <_exit>
 8018cd4:	00000000 	.word	0x00000000
 8018cd8:	2000b12c 	.word	0x2000b12c

08018cdc <getenv>:
 8018cdc:	b507      	push	{r0, r1, r2, lr}
 8018cde:	4b04      	ldr	r3, [pc, #16]	@ (8018cf0 <getenv+0x14>)
 8018ce0:	4601      	mov	r1, r0
 8018ce2:	aa01      	add	r2, sp, #4
 8018ce4:	6818      	ldr	r0, [r3, #0]
 8018ce6:	f000 f805 	bl	8018cf4 <_findenv_r>
 8018cea:	b003      	add	sp, #12
 8018cec:	f85d fb04 	ldr.w	pc, [sp], #4
 8018cf0:	200002ac 	.word	0x200002ac

08018cf4 <_findenv_r>:
 8018cf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cf8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8018d68 <_findenv_r+0x74>
 8018cfc:	4606      	mov	r6, r0
 8018cfe:	4689      	mov	r9, r1
 8018d00:	4617      	mov	r7, r2
 8018d02:	f000 fda3 	bl	801984c <__env_lock>
 8018d06:	f8da 4000 	ldr.w	r4, [sl]
 8018d0a:	b134      	cbz	r4, 8018d1a <_findenv_r+0x26>
 8018d0c:	464b      	mov	r3, r9
 8018d0e:	4698      	mov	r8, r3
 8018d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d14:	b13a      	cbz	r2, 8018d26 <_findenv_r+0x32>
 8018d16:	2a3d      	cmp	r2, #61	@ 0x3d
 8018d18:	d1f9      	bne.n	8018d0e <_findenv_r+0x1a>
 8018d1a:	4630      	mov	r0, r6
 8018d1c:	f000 fd9c 	bl	8019858 <__env_unlock>
 8018d20:	2000      	movs	r0, #0
 8018d22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d26:	eba8 0809 	sub.w	r8, r8, r9
 8018d2a:	46a3      	mov	fp, r4
 8018d2c:	f854 0b04 	ldr.w	r0, [r4], #4
 8018d30:	2800      	cmp	r0, #0
 8018d32:	d0f2      	beq.n	8018d1a <_findenv_r+0x26>
 8018d34:	4642      	mov	r2, r8
 8018d36:	4649      	mov	r1, r9
 8018d38:	f000 fca7 	bl	801968a <strncmp>
 8018d3c:	2800      	cmp	r0, #0
 8018d3e:	d1f4      	bne.n	8018d2a <_findenv_r+0x36>
 8018d40:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018d44:	eb03 0508 	add.w	r5, r3, r8
 8018d48:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018d4c:	2b3d      	cmp	r3, #61	@ 0x3d
 8018d4e:	d1ec      	bne.n	8018d2a <_findenv_r+0x36>
 8018d50:	f8da 3000 	ldr.w	r3, [sl]
 8018d54:	ebab 0303 	sub.w	r3, fp, r3
 8018d58:	109b      	asrs	r3, r3, #2
 8018d5a:	4630      	mov	r0, r6
 8018d5c:	603b      	str	r3, [r7, #0]
 8018d5e:	f000 fd7b 	bl	8019858 <__env_unlock>
 8018d62:	1c68      	adds	r0, r5, #1
 8018d64:	e7dd      	b.n	8018d22 <_findenv_r+0x2e>
 8018d66:	bf00      	nop
 8018d68:	2000001c 	.word	0x2000001c

08018d6c <malloc>:
 8018d6c:	4b02      	ldr	r3, [pc, #8]	@ (8018d78 <malloc+0xc>)
 8018d6e:	4601      	mov	r1, r0
 8018d70:	6818      	ldr	r0, [r3, #0]
 8018d72:	f000 b82d 	b.w	8018dd0 <_malloc_r>
 8018d76:	bf00      	nop
 8018d78:	200002ac 	.word	0x200002ac

08018d7c <free>:
 8018d7c:	4b02      	ldr	r3, [pc, #8]	@ (8018d88 <free+0xc>)
 8018d7e:	4601      	mov	r1, r0
 8018d80:	6818      	ldr	r0, [r3, #0]
 8018d82:	f000 bd6f 	b.w	8019864 <_free_r>
 8018d86:	bf00      	nop
 8018d88:	200002ac 	.word	0x200002ac

08018d8c <sbrk_aligned>:
 8018d8c:	b570      	push	{r4, r5, r6, lr}
 8018d8e:	4e0f      	ldr	r6, [pc, #60]	@ (8018dcc <sbrk_aligned+0x40>)
 8018d90:	460c      	mov	r4, r1
 8018d92:	6831      	ldr	r1, [r6, #0]
 8018d94:	4605      	mov	r5, r0
 8018d96:	b911      	cbnz	r1, 8018d9e <sbrk_aligned+0x12>
 8018d98:	f000 fcd4 	bl	8019744 <_sbrk_r>
 8018d9c:	6030      	str	r0, [r6, #0]
 8018d9e:	4621      	mov	r1, r4
 8018da0:	4628      	mov	r0, r5
 8018da2:	f000 fccf 	bl	8019744 <_sbrk_r>
 8018da6:	1c43      	adds	r3, r0, #1
 8018da8:	d103      	bne.n	8018db2 <sbrk_aligned+0x26>
 8018daa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018dae:	4620      	mov	r0, r4
 8018db0:	bd70      	pop	{r4, r5, r6, pc}
 8018db2:	1cc4      	adds	r4, r0, #3
 8018db4:	f024 0403 	bic.w	r4, r4, #3
 8018db8:	42a0      	cmp	r0, r4
 8018dba:	d0f8      	beq.n	8018dae <sbrk_aligned+0x22>
 8018dbc:	1a21      	subs	r1, r4, r0
 8018dbe:	4628      	mov	r0, r5
 8018dc0:	f000 fcc0 	bl	8019744 <_sbrk_r>
 8018dc4:	3001      	adds	r0, #1
 8018dc6:	d1f2      	bne.n	8018dae <sbrk_aligned+0x22>
 8018dc8:	e7ef      	b.n	8018daa <sbrk_aligned+0x1e>
 8018dca:	bf00      	nop
 8018dcc:	2000afec 	.word	0x2000afec

08018dd0 <_malloc_r>:
 8018dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018dd4:	1ccd      	adds	r5, r1, #3
 8018dd6:	f025 0503 	bic.w	r5, r5, #3
 8018dda:	3508      	adds	r5, #8
 8018ddc:	2d0c      	cmp	r5, #12
 8018dde:	bf38      	it	cc
 8018de0:	250c      	movcc	r5, #12
 8018de2:	2d00      	cmp	r5, #0
 8018de4:	4606      	mov	r6, r0
 8018de6:	db01      	blt.n	8018dec <_malloc_r+0x1c>
 8018de8:	42a9      	cmp	r1, r5
 8018dea:	d904      	bls.n	8018df6 <_malloc_r+0x26>
 8018dec:	230c      	movs	r3, #12
 8018dee:	6033      	str	r3, [r6, #0]
 8018df0:	2000      	movs	r0, #0
 8018df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018df6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018ecc <_malloc_r+0xfc>
 8018dfa:	f000 f869 	bl	8018ed0 <__malloc_lock>
 8018dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8018e02:	461c      	mov	r4, r3
 8018e04:	bb44      	cbnz	r4, 8018e58 <_malloc_r+0x88>
 8018e06:	4629      	mov	r1, r5
 8018e08:	4630      	mov	r0, r6
 8018e0a:	f7ff ffbf 	bl	8018d8c <sbrk_aligned>
 8018e0e:	1c43      	adds	r3, r0, #1
 8018e10:	4604      	mov	r4, r0
 8018e12:	d158      	bne.n	8018ec6 <_malloc_r+0xf6>
 8018e14:	f8d8 4000 	ldr.w	r4, [r8]
 8018e18:	4627      	mov	r7, r4
 8018e1a:	2f00      	cmp	r7, #0
 8018e1c:	d143      	bne.n	8018ea6 <_malloc_r+0xd6>
 8018e1e:	2c00      	cmp	r4, #0
 8018e20:	d04b      	beq.n	8018eba <_malloc_r+0xea>
 8018e22:	6823      	ldr	r3, [r4, #0]
 8018e24:	4639      	mov	r1, r7
 8018e26:	4630      	mov	r0, r6
 8018e28:	eb04 0903 	add.w	r9, r4, r3
 8018e2c:	f000 fc8a 	bl	8019744 <_sbrk_r>
 8018e30:	4581      	cmp	r9, r0
 8018e32:	d142      	bne.n	8018eba <_malloc_r+0xea>
 8018e34:	6821      	ldr	r1, [r4, #0]
 8018e36:	1a6d      	subs	r5, r5, r1
 8018e38:	4629      	mov	r1, r5
 8018e3a:	4630      	mov	r0, r6
 8018e3c:	f7ff ffa6 	bl	8018d8c <sbrk_aligned>
 8018e40:	3001      	adds	r0, #1
 8018e42:	d03a      	beq.n	8018eba <_malloc_r+0xea>
 8018e44:	6823      	ldr	r3, [r4, #0]
 8018e46:	442b      	add	r3, r5
 8018e48:	6023      	str	r3, [r4, #0]
 8018e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8018e4e:	685a      	ldr	r2, [r3, #4]
 8018e50:	bb62      	cbnz	r2, 8018eac <_malloc_r+0xdc>
 8018e52:	f8c8 7000 	str.w	r7, [r8]
 8018e56:	e00f      	b.n	8018e78 <_malloc_r+0xa8>
 8018e58:	6822      	ldr	r2, [r4, #0]
 8018e5a:	1b52      	subs	r2, r2, r5
 8018e5c:	d420      	bmi.n	8018ea0 <_malloc_r+0xd0>
 8018e5e:	2a0b      	cmp	r2, #11
 8018e60:	d917      	bls.n	8018e92 <_malloc_r+0xc2>
 8018e62:	1961      	adds	r1, r4, r5
 8018e64:	42a3      	cmp	r3, r4
 8018e66:	6025      	str	r5, [r4, #0]
 8018e68:	bf18      	it	ne
 8018e6a:	6059      	strne	r1, [r3, #4]
 8018e6c:	6863      	ldr	r3, [r4, #4]
 8018e6e:	bf08      	it	eq
 8018e70:	f8c8 1000 	streq.w	r1, [r8]
 8018e74:	5162      	str	r2, [r4, r5]
 8018e76:	604b      	str	r3, [r1, #4]
 8018e78:	4630      	mov	r0, r6
 8018e7a:	f000 f82f 	bl	8018edc <__malloc_unlock>
 8018e7e:	f104 000b 	add.w	r0, r4, #11
 8018e82:	1d23      	adds	r3, r4, #4
 8018e84:	f020 0007 	bic.w	r0, r0, #7
 8018e88:	1ac2      	subs	r2, r0, r3
 8018e8a:	bf1c      	itt	ne
 8018e8c:	1a1b      	subne	r3, r3, r0
 8018e8e:	50a3      	strne	r3, [r4, r2]
 8018e90:	e7af      	b.n	8018df2 <_malloc_r+0x22>
 8018e92:	6862      	ldr	r2, [r4, #4]
 8018e94:	42a3      	cmp	r3, r4
 8018e96:	bf0c      	ite	eq
 8018e98:	f8c8 2000 	streq.w	r2, [r8]
 8018e9c:	605a      	strne	r2, [r3, #4]
 8018e9e:	e7eb      	b.n	8018e78 <_malloc_r+0xa8>
 8018ea0:	4623      	mov	r3, r4
 8018ea2:	6864      	ldr	r4, [r4, #4]
 8018ea4:	e7ae      	b.n	8018e04 <_malloc_r+0x34>
 8018ea6:	463c      	mov	r4, r7
 8018ea8:	687f      	ldr	r7, [r7, #4]
 8018eaa:	e7b6      	b.n	8018e1a <_malloc_r+0x4a>
 8018eac:	461a      	mov	r2, r3
 8018eae:	685b      	ldr	r3, [r3, #4]
 8018eb0:	42a3      	cmp	r3, r4
 8018eb2:	d1fb      	bne.n	8018eac <_malloc_r+0xdc>
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	6053      	str	r3, [r2, #4]
 8018eb8:	e7de      	b.n	8018e78 <_malloc_r+0xa8>
 8018eba:	230c      	movs	r3, #12
 8018ebc:	6033      	str	r3, [r6, #0]
 8018ebe:	4630      	mov	r0, r6
 8018ec0:	f000 f80c 	bl	8018edc <__malloc_unlock>
 8018ec4:	e794      	b.n	8018df0 <_malloc_r+0x20>
 8018ec6:	6005      	str	r5, [r0, #0]
 8018ec8:	e7d6      	b.n	8018e78 <_malloc_r+0xa8>
 8018eca:	bf00      	nop
 8018ecc:	2000aff0 	.word	0x2000aff0

08018ed0 <__malloc_lock>:
 8018ed0:	4801      	ldr	r0, [pc, #4]	@ (8018ed8 <__malloc_lock+0x8>)
 8018ed2:	f000 bc84 	b.w	80197de <__retarget_lock_acquire_recursive>
 8018ed6:	bf00      	nop
 8018ed8:	2000b135 	.word	0x2000b135

08018edc <__malloc_unlock>:
 8018edc:	4801      	ldr	r0, [pc, #4]	@ (8018ee4 <__malloc_unlock+0x8>)
 8018ede:	f000 bc7f 	b.w	80197e0 <__retarget_lock_release_recursive>
 8018ee2:	bf00      	nop
 8018ee4:	2000b135 	.word	0x2000b135

08018ee8 <srand>:
 8018ee8:	b538      	push	{r3, r4, r5, lr}
 8018eea:	4b10      	ldr	r3, [pc, #64]	@ (8018f2c <srand+0x44>)
 8018eec:	681d      	ldr	r5, [r3, #0]
 8018eee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018ef0:	4604      	mov	r4, r0
 8018ef2:	b9b3      	cbnz	r3, 8018f22 <srand+0x3a>
 8018ef4:	2018      	movs	r0, #24
 8018ef6:	f7ff ff39 	bl	8018d6c <malloc>
 8018efa:	4602      	mov	r2, r0
 8018efc:	6328      	str	r0, [r5, #48]	@ 0x30
 8018efe:	b920      	cbnz	r0, 8018f0a <srand+0x22>
 8018f00:	4b0b      	ldr	r3, [pc, #44]	@ (8018f30 <srand+0x48>)
 8018f02:	480c      	ldr	r0, [pc, #48]	@ (8018f34 <srand+0x4c>)
 8018f04:	2146      	movs	r1, #70	@ 0x46
 8018f06:	f000 fc83 	bl	8019810 <__assert_func>
 8018f0a:	490b      	ldr	r1, [pc, #44]	@ (8018f38 <srand+0x50>)
 8018f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8018f3c <srand+0x54>)
 8018f0e:	e9c0 1300 	strd	r1, r3, [r0]
 8018f12:	4b0b      	ldr	r3, [pc, #44]	@ (8018f40 <srand+0x58>)
 8018f14:	6083      	str	r3, [r0, #8]
 8018f16:	230b      	movs	r3, #11
 8018f18:	8183      	strh	r3, [r0, #12]
 8018f1a:	2100      	movs	r1, #0
 8018f1c:	2001      	movs	r0, #1
 8018f1e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018f22:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018f24:	2200      	movs	r2, #0
 8018f26:	611c      	str	r4, [r3, #16]
 8018f28:	615a      	str	r2, [r3, #20]
 8018f2a:	bd38      	pop	{r3, r4, r5, pc}
 8018f2c:	200002ac 	.word	0x200002ac
 8018f30:	0801b0f0 	.word	0x0801b0f0
 8018f34:	0801b107 	.word	0x0801b107
 8018f38:	abcd330e 	.word	0xabcd330e
 8018f3c:	e66d1234 	.word	0xe66d1234
 8018f40:	0005deec 	.word	0x0005deec

08018f44 <rand>:
 8018f44:	4b16      	ldr	r3, [pc, #88]	@ (8018fa0 <rand+0x5c>)
 8018f46:	b510      	push	{r4, lr}
 8018f48:	681c      	ldr	r4, [r3, #0]
 8018f4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018f4c:	b9b3      	cbnz	r3, 8018f7c <rand+0x38>
 8018f4e:	2018      	movs	r0, #24
 8018f50:	f7ff ff0c 	bl	8018d6c <malloc>
 8018f54:	4602      	mov	r2, r0
 8018f56:	6320      	str	r0, [r4, #48]	@ 0x30
 8018f58:	b920      	cbnz	r0, 8018f64 <rand+0x20>
 8018f5a:	4b12      	ldr	r3, [pc, #72]	@ (8018fa4 <rand+0x60>)
 8018f5c:	4812      	ldr	r0, [pc, #72]	@ (8018fa8 <rand+0x64>)
 8018f5e:	2152      	movs	r1, #82	@ 0x52
 8018f60:	f000 fc56 	bl	8019810 <__assert_func>
 8018f64:	4911      	ldr	r1, [pc, #68]	@ (8018fac <rand+0x68>)
 8018f66:	4b12      	ldr	r3, [pc, #72]	@ (8018fb0 <rand+0x6c>)
 8018f68:	e9c0 1300 	strd	r1, r3, [r0]
 8018f6c:	4b11      	ldr	r3, [pc, #68]	@ (8018fb4 <rand+0x70>)
 8018f6e:	6083      	str	r3, [r0, #8]
 8018f70:	230b      	movs	r3, #11
 8018f72:	8183      	strh	r3, [r0, #12]
 8018f74:	2100      	movs	r1, #0
 8018f76:	2001      	movs	r0, #1
 8018f78:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018f7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018f7e:	480e      	ldr	r0, [pc, #56]	@ (8018fb8 <rand+0x74>)
 8018f80:	690b      	ldr	r3, [r1, #16]
 8018f82:	694c      	ldr	r4, [r1, #20]
 8018f84:	4a0d      	ldr	r2, [pc, #52]	@ (8018fbc <rand+0x78>)
 8018f86:	4358      	muls	r0, r3
 8018f88:	fb02 0004 	mla	r0, r2, r4, r0
 8018f8c:	fba3 3202 	umull	r3, r2, r3, r2
 8018f90:	3301      	adds	r3, #1
 8018f92:	eb40 0002 	adc.w	r0, r0, r2
 8018f96:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018f9a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018f9e:	bd10      	pop	{r4, pc}
 8018fa0:	200002ac 	.word	0x200002ac
 8018fa4:	0801b0f0 	.word	0x0801b0f0
 8018fa8:	0801b107 	.word	0x0801b107
 8018fac:	abcd330e 	.word	0xabcd330e
 8018fb0:	e66d1234 	.word	0xe66d1234
 8018fb4:	0005deec 	.word	0x0005deec
 8018fb8:	5851f42d 	.word	0x5851f42d
 8018fbc:	4c957f2d 	.word	0x4c957f2d

08018fc0 <realloc>:
 8018fc0:	4b02      	ldr	r3, [pc, #8]	@ (8018fcc <realloc+0xc>)
 8018fc2:	460a      	mov	r2, r1
 8018fc4:	4601      	mov	r1, r0
 8018fc6:	6818      	ldr	r0, [r3, #0]
 8018fc8:	f000 b802 	b.w	8018fd0 <_realloc_r>
 8018fcc:	200002ac 	.word	0x200002ac

08018fd0 <_realloc_r>:
 8018fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fd4:	4607      	mov	r7, r0
 8018fd6:	4614      	mov	r4, r2
 8018fd8:	460d      	mov	r5, r1
 8018fda:	b921      	cbnz	r1, 8018fe6 <_realloc_r+0x16>
 8018fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018fe0:	4611      	mov	r1, r2
 8018fe2:	f7ff bef5 	b.w	8018dd0 <_malloc_r>
 8018fe6:	b92a      	cbnz	r2, 8018ff4 <_realloc_r+0x24>
 8018fe8:	f000 fc3c 	bl	8019864 <_free_r>
 8018fec:	4625      	mov	r5, r4
 8018fee:	4628      	mov	r0, r5
 8018ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ff4:	f000 fc80 	bl	80198f8 <_malloc_usable_size_r>
 8018ff8:	4284      	cmp	r4, r0
 8018ffa:	4606      	mov	r6, r0
 8018ffc:	d802      	bhi.n	8019004 <_realloc_r+0x34>
 8018ffe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019002:	d8f4      	bhi.n	8018fee <_realloc_r+0x1e>
 8019004:	4621      	mov	r1, r4
 8019006:	4638      	mov	r0, r7
 8019008:	f7ff fee2 	bl	8018dd0 <_malloc_r>
 801900c:	4680      	mov	r8, r0
 801900e:	b908      	cbnz	r0, 8019014 <_realloc_r+0x44>
 8019010:	4645      	mov	r5, r8
 8019012:	e7ec      	b.n	8018fee <_realloc_r+0x1e>
 8019014:	42b4      	cmp	r4, r6
 8019016:	4622      	mov	r2, r4
 8019018:	4629      	mov	r1, r5
 801901a:	bf28      	it	cs
 801901c:	4632      	movcs	r2, r6
 801901e:	f000 fbe8 	bl	80197f2 <memcpy>
 8019022:	4629      	mov	r1, r5
 8019024:	4638      	mov	r0, r7
 8019026:	f000 fc1d 	bl	8019864 <_free_r>
 801902a:	e7f1      	b.n	8019010 <_realloc_r+0x40>

0801902c <_strtoul_l.isra.0>:
 801902c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019030:	4e34      	ldr	r6, [pc, #208]	@ (8019104 <_strtoul_l.isra.0+0xd8>)
 8019032:	4686      	mov	lr, r0
 8019034:	460d      	mov	r5, r1
 8019036:	4628      	mov	r0, r5
 8019038:	f815 4b01 	ldrb.w	r4, [r5], #1
 801903c:	5d37      	ldrb	r7, [r6, r4]
 801903e:	f017 0708 	ands.w	r7, r7, #8
 8019042:	d1f8      	bne.n	8019036 <_strtoul_l.isra.0+0xa>
 8019044:	2c2d      	cmp	r4, #45	@ 0x2d
 8019046:	d110      	bne.n	801906a <_strtoul_l.isra.0+0x3e>
 8019048:	782c      	ldrb	r4, [r5, #0]
 801904a:	2701      	movs	r7, #1
 801904c:	1c85      	adds	r5, r0, #2
 801904e:	f033 0010 	bics.w	r0, r3, #16
 8019052:	d115      	bne.n	8019080 <_strtoul_l.isra.0+0x54>
 8019054:	2c30      	cmp	r4, #48	@ 0x30
 8019056:	d10d      	bne.n	8019074 <_strtoul_l.isra.0+0x48>
 8019058:	7828      	ldrb	r0, [r5, #0]
 801905a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801905e:	2858      	cmp	r0, #88	@ 0x58
 8019060:	d108      	bne.n	8019074 <_strtoul_l.isra.0+0x48>
 8019062:	786c      	ldrb	r4, [r5, #1]
 8019064:	3502      	adds	r5, #2
 8019066:	2310      	movs	r3, #16
 8019068:	e00a      	b.n	8019080 <_strtoul_l.isra.0+0x54>
 801906a:	2c2b      	cmp	r4, #43	@ 0x2b
 801906c:	bf04      	itt	eq
 801906e:	782c      	ldrbeq	r4, [r5, #0]
 8019070:	1c85      	addeq	r5, r0, #2
 8019072:	e7ec      	b.n	801904e <_strtoul_l.isra.0+0x22>
 8019074:	2b00      	cmp	r3, #0
 8019076:	d1f6      	bne.n	8019066 <_strtoul_l.isra.0+0x3a>
 8019078:	2c30      	cmp	r4, #48	@ 0x30
 801907a:	bf14      	ite	ne
 801907c:	230a      	movne	r3, #10
 801907e:	2308      	moveq	r3, #8
 8019080:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019084:	2600      	movs	r6, #0
 8019086:	fbb8 f8f3 	udiv	r8, r8, r3
 801908a:	fb03 f908 	mul.w	r9, r3, r8
 801908e:	ea6f 0909 	mvn.w	r9, r9
 8019092:	4630      	mov	r0, r6
 8019094:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019098:	f1bc 0f09 	cmp.w	ip, #9
 801909c:	d810      	bhi.n	80190c0 <_strtoul_l.isra.0+0x94>
 801909e:	4664      	mov	r4, ip
 80190a0:	42a3      	cmp	r3, r4
 80190a2:	dd1e      	ble.n	80190e2 <_strtoul_l.isra.0+0xb6>
 80190a4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80190a8:	d007      	beq.n	80190ba <_strtoul_l.isra.0+0x8e>
 80190aa:	4580      	cmp	r8, r0
 80190ac:	d316      	bcc.n	80190dc <_strtoul_l.isra.0+0xb0>
 80190ae:	d101      	bne.n	80190b4 <_strtoul_l.isra.0+0x88>
 80190b0:	45a1      	cmp	r9, r4
 80190b2:	db13      	blt.n	80190dc <_strtoul_l.isra.0+0xb0>
 80190b4:	fb00 4003 	mla	r0, r0, r3, r4
 80190b8:	2601      	movs	r6, #1
 80190ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80190be:	e7e9      	b.n	8019094 <_strtoul_l.isra.0+0x68>
 80190c0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80190c4:	f1bc 0f19 	cmp.w	ip, #25
 80190c8:	d801      	bhi.n	80190ce <_strtoul_l.isra.0+0xa2>
 80190ca:	3c37      	subs	r4, #55	@ 0x37
 80190cc:	e7e8      	b.n	80190a0 <_strtoul_l.isra.0+0x74>
 80190ce:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80190d2:	f1bc 0f19 	cmp.w	ip, #25
 80190d6:	d804      	bhi.n	80190e2 <_strtoul_l.isra.0+0xb6>
 80190d8:	3c57      	subs	r4, #87	@ 0x57
 80190da:	e7e1      	b.n	80190a0 <_strtoul_l.isra.0+0x74>
 80190dc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80190e0:	e7eb      	b.n	80190ba <_strtoul_l.isra.0+0x8e>
 80190e2:	1c73      	adds	r3, r6, #1
 80190e4:	d106      	bne.n	80190f4 <_strtoul_l.isra.0+0xc8>
 80190e6:	2322      	movs	r3, #34	@ 0x22
 80190e8:	f8ce 3000 	str.w	r3, [lr]
 80190ec:	4630      	mov	r0, r6
 80190ee:	b932      	cbnz	r2, 80190fe <_strtoul_l.isra.0+0xd2>
 80190f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190f4:	b107      	cbz	r7, 80190f8 <_strtoul_l.isra.0+0xcc>
 80190f6:	4240      	negs	r0, r0
 80190f8:	2a00      	cmp	r2, #0
 80190fa:	d0f9      	beq.n	80190f0 <_strtoul_l.isra.0+0xc4>
 80190fc:	b106      	cbz	r6, 8019100 <_strtoul_l.isra.0+0xd4>
 80190fe:	1e69      	subs	r1, r5, #1
 8019100:	6011      	str	r1, [r2, #0]
 8019102:	e7f5      	b.n	80190f0 <_strtoul_l.isra.0+0xc4>
 8019104:	0801b1cf 	.word	0x0801b1cf

08019108 <strtoul>:
 8019108:	4613      	mov	r3, r2
 801910a:	460a      	mov	r2, r1
 801910c:	4601      	mov	r1, r0
 801910e:	4802      	ldr	r0, [pc, #8]	@ (8019118 <strtoul+0x10>)
 8019110:	6800      	ldr	r0, [r0, #0]
 8019112:	f7ff bf8b 	b.w	801902c <_strtoul_l.isra.0>
 8019116:	bf00      	nop
 8019118:	200002ac 	.word	0x200002ac

0801911c <std>:
 801911c:	2300      	movs	r3, #0
 801911e:	b510      	push	{r4, lr}
 8019120:	4604      	mov	r4, r0
 8019122:	e9c0 3300 	strd	r3, r3, [r0]
 8019126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801912a:	6083      	str	r3, [r0, #8]
 801912c:	8181      	strh	r1, [r0, #12]
 801912e:	6643      	str	r3, [r0, #100]	@ 0x64
 8019130:	81c2      	strh	r2, [r0, #14]
 8019132:	6183      	str	r3, [r0, #24]
 8019134:	4619      	mov	r1, r3
 8019136:	2208      	movs	r2, #8
 8019138:	305c      	adds	r0, #92	@ 0x5c
 801913a:	f000 fa91 	bl	8019660 <memset>
 801913e:	4b0d      	ldr	r3, [pc, #52]	@ (8019174 <std+0x58>)
 8019140:	6263      	str	r3, [r4, #36]	@ 0x24
 8019142:	4b0d      	ldr	r3, [pc, #52]	@ (8019178 <std+0x5c>)
 8019144:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019146:	4b0d      	ldr	r3, [pc, #52]	@ (801917c <std+0x60>)
 8019148:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801914a:	4b0d      	ldr	r3, [pc, #52]	@ (8019180 <std+0x64>)
 801914c:	6323      	str	r3, [r4, #48]	@ 0x30
 801914e:	4b0d      	ldr	r3, [pc, #52]	@ (8019184 <std+0x68>)
 8019150:	6224      	str	r4, [r4, #32]
 8019152:	429c      	cmp	r4, r3
 8019154:	d006      	beq.n	8019164 <std+0x48>
 8019156:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801915a:	4294      	cmp	r4, r2
 801915c:	d002      	beq.n	8019164 <std+0x48>
 801915e:	33d0      	adds	r3, #208	@ 0xd0
 8019160:	429c      	cmp	r4, r3
 8019162:	d105      	bne.n	8019170 <std+0x54>
 8019164:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801916c:	f000 bb36 	b.w	80197dc <__retarget_lock_init_recursive>
 8019170:	bd10      	pop	{r4, pc}
 8019172:	bf00      	nop
 8019174:	080193e5 	.word	0x080193e5
 8019178:	08019407 	.word	0x08019407
 801917c:	0801943f 	.word	0x0801943f
 8019180:	08019463 	.word	0x08019463
 8019184:	2000aff4 	.word	0x2000aff4

08019188 <stdio_exit_handler>:
 8019188:	4a02      	ldr	r2, [pc, #8]	@ (8019194 <stdio_exit_handler+0xc>)
 801918a:	4903      	ldr	r1, [pc, #12]	@ (8019198 <stdio_exit_handler+0x10>)
 801918c:	4803      	ldr	r0, [pc, #12]	@ (801919c <stdio_exit_handler+0x14>)
 801918e:	f000 b869 	b.w	8019264 <_fwalk_sglue>
 8019192:	bf00      	nop
 8019194:	200002a0 	.word	0x200002a0
 8019198:	0801a25d 	.word	0x0801a25d
 801919c:	200002b0 	.word	0x200002b0

080191a0 <cleanup_stdio>:
 80191a0:	6841      	ldr	r1, [r0, #4]
 80191a2:	4b0c      	ldr	r3, [pc, #48]	@ (80191d4 <cleanup_stdio+0x34>)
 80191a4:	4299      	cmp	r1, r3
 80191a6:	b510      	push	{r4, lr}
 80191a8:	4604      	mov	r4, r0
 80191aa:	d001      	beq.n	80191b0 <cleanup_stdio+0x10>
 80191ac:	f001 f856 	bl	801a25c <_fflush_r>
 80191b0:	68a1      	ldr	r1, [r4, #8]
 80191b2:	4b09      	ldr	r3, [pc, #36]	@ (80191d8 <cleanup_stdio+0x38>)
 80191b4:	4299      	cmp	r1, r3
 80191b6:	d002      	beq.n	80191be <cleanup_stdio+0x1e>
 80191b8:	4620      	mov	r0, r4
 80191ba:	f001 f84f 	bl	801a25c <_fflush_r>
 80191be:	68e1      	ldr	r1, [r4, #12]
 80191c0:	4b06      	ldr	r3, [pc, #24]	@ (80191dc <cleanup_stdio+0x3c>)
 80191c2:	4299      	cmp	r1, r3
 80191c4:	d004      	beq.n	80191d0 <cleanup_stdio+0x30>
 80191c6:	4620      	mov	r0, r4
 80191c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191cc:	f001 b846 	b.w	801a25c <_fflush_r>
 80191d0:	bd10      	pop	{r4, pc}
 80191d2:	bf00      	nop
 80191d4:	2000aff4 	.word	0x2000aff4
 80191d8:	2000b05c 	.word	0x2000b05c
 80191dc:	2000b0c4 	.word	0x2000b0c4

080191e0 <global_stdio_init.part.0>:
 80191e0:	b510      	push	{r4, lr}
 80191e2:	4b0b      	ldr	r3, [pc, #44]	@ (8019210 <global_stdio_init.part.0+0x30>)
 80191e4:	4c0b      	ldr	r4, [pc, #44]	@ (8019214 <global_stdio_init.part.0+0x34>)
 80191e6:	4a0c      	ldr	r2, [pc, #48]	@ (8019218 <global_stdio_init.part.0+0x38>)
 80191e8:	601a      	str	r2, [r3, #0]
 80191ea:	4620      	mov	r0, r4
 80191ec:	2200      	movs	r2, #0
 80191ee:	2104      	movs	r1, #4
 80191f0:	f7ff ff94 	bl	801911c <std>
 80191f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80191f8:	2201      	movs	r2, #1
 80191fa:	2109      	movs	r1, #9
 80191fc:	f7ff ff8e 	bl	801911c <std>
 8019200:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019204:	2202      	movs	r2, #2
 8019206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801920a:	2112      	movs	r1, #18
 801920c:	f7ff bf86 	b.w	801911c <std>
 8019210:	2000b12c 	.word	0x2000b12c
 8019214:	2000aff4 	.word	0x2000aff4
 8019218:	08019189 	.word	0x08019189

0801921c <__sfp_lock_acquire>:
 801921c:	4801      	ldr	r0, [pc, #4]	@ (8019224 <__sfp_lock_acquire+0x8>)
 801921e:	f000 bade 	b.w	80197de <__retarget_lock_acquire_recursive>
 8019222:	bf00      	nop
 8019224:	2000b136 	.word	0x2000b136

08019228 <__sfp_lock_release>:
 8019228:	4801      	ldr	r0, [pc, #4]	@ (8019230 <__sfp_lock_release+0x8>)
 801922a:	f000 bad9 	b.w	80197e0 <__retarget_lock_release_recursive>
 801922e:	bf00      	nop
 8019230:	2000b136 	.word	0x2000b136

08019234 <__sinit>:
 8019234:	b510      	push	{r4, lr}
 8019236:	4604      	mov	r4, r0
 8019238:	f7ff fff0 	bl	801921c <__sfp_lock_acquire>
 801923c:	6a23      	ldr	r3, [r4, #32]
 801923e:	b11b      	cbz	r3, 8019248 <__sinit+0x14>
 8019240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019244:	f7ff bff0 	b.w	8019228 <__sfp_lock_release>
 8019248:	4b04      	ldr	r3, [pc, #16]	@ (801925c <__sinit+0x28>)
 801924a:	6223      	str	r3, [r4, #32]
 801924c:	4b04      	ldr	r3, [pc, #16]	@ (8019260 <__sinit+0x2c>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	2b00      	cmp	r3, #0
 8019252:	d1f5      	bne.n	8019240 <__sinit+0xc>
 8019254:	f7ff ffc4 	bl	80191e0 <global_stdio_init.part.0>
 8019258:	e7f2      	b.n	8019240 <__sinit+0xc>
 801925a:	bf00      	nop
 801925c:	080191a1 	.word	0x080191a1
 8019260:	2000b12c 	.word	0x2000b12c

08019264 <_fwalk_sglue>:
 8019264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019268:	4607      	mov	r7, r0
 801926a:	4688      	mov	r8, r1
 801926c:	4614      	mov	r4, r2
 801926e:	2600      	movs	r6, #0
 8019270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019274:	f1b9 0901 	subs.w	r9, r9, #1
 8019278:	d505      	bpl.n	8019286 <_fwalk_sglue+0x22>
 801927a:	6824      	ldr	r4, [r4, #0]
 801927c:	2c00      	cmp	r4, #0
 801927e:	d1f7      	bne.n	8019270 <_fwalk_sglue+0xc>
 8019280:	4630      	mov	r0, r6
 8019282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019286:	89ab      	ldrh	r3, [r5, #12]
 8019288:	2b01      	cmp	r3, #1
 801928a:	d907      	bls.n	801929c <_fwalk_sglue+0x38>
 801928c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019290:	3301      	adds	r3, #1
 8019292:	d003      	beq.n	801929c <_fwalk_sglue+0x38>
 8019294:	4629      	mov	r1, r5
 8019296:	4638      	mov	r0, r7
 8019298:	47c0      	blx	r8
 801929a:	4306      	orrs	r6, r0
 801929c:	3568      	adds	r5, #104	@ 0x68
 801929e:	e7e9      	b.n	8019274 <_fwalk_sglue+0x10>

080192a0 <_fwrite_r>:
 80192a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192a4:	9c08      	ldr	r4, [sp, #32]
 80192a6:	468a      	mov	sl, r1
 80192a8:	4690      	mov	r8, r2
 80192aa:	fb02 f903 	mul.w	r9, r2, r3
 80192ae:	4606      	mov	r6, r0
 80192b0:	b118      	cbz	r0, 80192ba <_fwrite_r+0x1a>
 80192b2:	6a03      	ldr	r3, [r0, #32]
 80192b4:	b90b      	cbnz	r3, 80192ba <_fwrite_r+0x1a>
 80192b6:	f7ff ffbd 	bl	8019234 <__sinit>
 80192ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80192bc:	07dd      	lsls	r5, r3, #31
 80192be:	d405      	bmi.n	80192cc <_fwrite_r+0x2c>
 80192c0:	89a3      	ldrh	r3, [r4, #12]
 80192c2:	0598      	lsls	r0, r3, #22
 80192c4:	d402      	bmi.n	80192cc <_fwrite_r+0x2c>
 80192c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80192c8:	f000 fa89 	bl	80197de <__retarget_lock_acquire_recursive>
 80192cc:	89a3      	ldrh	r3, [r4, #12]
 80192ce:	0719      	lsls	r1, r3, #28
 80192d0:	d516      	bpl.n	8019300 <_fwrite_r+0x60>
 80192d2:	6923      	ldr	r3, [r4, #16]
 80192d4:	b1a3      	cbz	r3, 8019300 <_fwrite_r+0x60>
 80192d6:	2500      	movs	r5, #0
 80192d8:	454d      	cmp	r5, r9
 80192da:	d01f      	beq.n	801931c <_fwrite_r+0x7c>
 80192dc:	68a7      	ldr	r7, [r4, #8]
 80192de:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80192e2:	3f01      	subs	r7, #1
 80192e4:	2f00      	cmp	r7, #0
 80192e6:	60a7      	str	r7, [r4, #8]
 80192e8:	da04      	bge.n	80192f4 <_fwrite_r+0x54>
 80192ea:	69a3      	ldr	r3, [r4, #24]
 80192ec:	429f      	cmp	r7, r3
 80192ee:	db0f      	blt.n	8019310 <_fwrite_r+0x70>
 80192f0:	290a      	cmp	r1, #10
 80192f2:	d00d      	beq.n	8019310 <_fwrite_r+0x70>
 80192f4:	6823      	ldr	r3, [r4, #0]
 80192f6:	1c5a      	adds	r2, r3, #1
 80192f8:	6022      	str	r2, [r4, #0]
 80192fa:	7019      	strb	r1, [r3, #0]
 80192fc:	3501      	adds	r5, #1
 80192fe:	e7eb      	b.n	80192d8 <_fwrite_r+0x38>
 8019300:	4621      	mov	r1, r4
 8019302:	4630      	mov	r0, r6
 8019304:	f000 f92c 	bl	8019560 <__swsetup_r>
 8019308:	2800      	cmp	r0, #0
 801930a:	d0e4      	beq.n	80192d6 <_fwrite_r+0x36>
 801930c:	2500      	movs	r5, #0
 801930e:	e005      	b.n	801931c <_fwrite_r+0x7c>
 8019310:	4622      	mov	r2, r4
 8019312:	4630      	mov	r0, r6
 8019314:	f000 f8e6 	bl	80194e4 <__swbuf_r>
 8019318:	3001      	adds	r0, #1
 801931a:	d1ef      	bne.n	80192fc <_fwrite_r+0x5c>
 801931c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801931e:	07da      	lsls	r2, r3, #31
 8019320:	d405      	bmi.n	801932e <_fwrite_r+0x8e>
 8019322:	89a3      	ldrh	r3, [r4, #12]
 8019324:	059b      	lsls	r3, r3, #22
 8019326:	d402      	bmi.n	801932e <_fwrite_r+0x8e>
 8019328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801932a:	f000 fa59 	bl	80197e0 <__retarget_lock_release_recursive>
 801932e:	fbb5 f0f8 	udiv	r0, r5, r8
 8019332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08019338 <fwrite>:
 8019338:	b507      	push	{r0, r1, r2, lr}
 801933a:	9300      	str	r3, [sp, #0]
 801933c:	4613      	mov	r3, r2
 801933e:	460a      	mov	r2, r1
 8019340:	4601      	mov	r1, r0
 8019342:	4803      	ldr	r0, [pc, #12]	@ (8019350 <fwrite+0x18>)
 8019344:	6800      	ldr	r0, [r0, #0]
 8019346:	f7ff ffab 	bl	80192a0 <_fwrite_r>
 801934a:	b003      	add	sp, #12
 801934c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019350:	200002ac 	.word	0x200002ac

08019354 <iprintf>:
 8019354:	b40f      	push	{r0, r1, r2, r3}
 8019356:	b507      	push	{r0, r1, r2, lr}
 8019358:	4906      	ldr	r1, [pc, #24]	@ (8019374 <iprintf+0x20>)
 801935a:	ab04      	add	r3, sp, #16
 801935c:	6808      	ldr	r0, [r1, #0]
 801935e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019362:	6881      	ldr	r1, [r0, #8]
 8019364:	9301      	str	r3, [sp, #4]
 8019366:	f000 fc51 	bl	8019c0c <_vfiprintf_r>
 801936a:	b003      	add	sp, #12
 801936c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019370:	b004      	add	sp, #16
 8019372:	4770      	bx	lr
 8019374:	200002ac 	.word	0x200002ac

08019378 <sniprintf>:
 8019378:	b40c      	push	{r2, r3}
 801937a:	b530      	push	{r4, r5, lr}
 801937c:	4b18      	ldr	r3, [pc, #96]	@ (80193e0 <sniprintf+0x68>)
 801937e:	1e0c      	subs	r4, r1, #0
 8019380:	681d      	ldr	r5, [r3, #0]
 8019382:	b09d      	sub	sp, #116	@ 0x74
 8019384:	da08      	bge.n	8019398 <sniprintf+0x20>
 8019386:	238b      	movs	r3, #139	@ 0x8b
 8019388:	602b      	str	r3, [r5, #0]
 801938a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801938e:	b01d      	add	sp, #116	@ 0x74
 8019390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019394:	b002      	add	sp, #8
 8019396:	4770      	bx	lr
 8019398:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801939c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80193a0:	f04f 0300 	mov.w	r3, #0
 80193a4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80193a6:	bf14      	ite	ne
 80193a8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80193ac:	4623      	moveq	r3, r4
 80193ae:	9304      	str	r3, [sp, #16]
 80193b0:	9307      	str	r3, [sp, #28]
 80193b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80193b6:	9002      	str	r0, [sp, #8]
 80193b8:	9006      	str	r0, [sp, #24]
 80193ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80193be:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80193c0:	ab21      	add	r3, sp, #132	@ 0x84
 80193c2:	a902      	add	r1, sp, #8
 80193c4:	4628      	mov	r0, r5
 80193c6:	9301      	str	r3, [sp, #4]
 80193c8:	f000 fafa 	bl	80199c0 <_svfiprintf_r>
 80193cc:	1c43      	adds	r3, r0, #1
 80193ce:	bfbc      	itt	lt
 80193d0:	238b      	movlt	r3, #139	@ 0x8b
 80193d2:	602b      	strlt	r3, [r5, #0]
 80193d4:	2c00      	cmp	r4, #0
 80193d6:	d0da      	beq.n	801938e <sniprintf+0x16>
 80193d8:	9b02      	ldr	r3, [sp, #8]
 80193da:	2200      	movs	r2, #0
 80193dc:	701a      	strb	r2, [r3, #0]
 80193de:	e7d6      	b.n	801938e <sniprintf+0x16>
 80193e0:	200002ac 	.word	0x200002ac

080193e4 <__sread>:
 80193e4:	b510      	push	{r4, lr}
 80193e6:	460c      	mov	r4, r1
 80193e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80193ec:	f000 f998 	bl	8019720 <_read_r>
 80193f0:	2800      	cmp	r0, #0
 80193f2:	bfab      	itete	ge
 80193f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80193f6:	89a3      	ldrhlt	r3, [r4, #12]
 80193f8:	181b      	addge	r3, r3, r0
 80193fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80193fe:	bfac      	ite	ge
 8019400:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019402:	81a3      	strhlt	r3, [r4, #12]
 8019404:	bd10      	pop	{r4, pc}

08019406 <__swrite>:
 8019406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801940a:	461f      	mov	r7, r3
 801940c:	898b      	ldrh	r3, [r1, #12]
 801940e:	05db      	lsls	r3, r3, #23
 8019410:	4605      	mov	r5, r0
 8019412:	460c      	mov	r4, r1
 8019414:	4616      	mov	r6, r2
 8019416:	d505      	bpl.n	8019424 <__swrite+0x1e>
 8019418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801941c:	2302      	movs	r3, #2
 801941e:	2200      	movs	r2, #0
 8019420:	f000 f96c 	bl	80196fc <_lseek_r>
 8019424:	89a3      	ldrh	r3, [r4, #12]
 8019426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801942a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801942e:	81a3      	strh	r3, [r4, #12]
 8019430:	4632      	mov	r2, r6
 8019432:	463b      	mov	r3, r7
 8019434:	4628      	mov	r0, r5
 8019436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801943a:	f000 b993 	b.w	8019764 <_write_r>

0801943e <__sseek>:
 801943e:	b510      	push	{r4, lr}
 8019440:	460c      	mov	r4, r1
 8019442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019446:	f000 f959 	bl	80196fc <_lseek_r>
 801944a:	1c43      	adds	r3, r0, #1
 801944c:	89a3      	ldrh	r3, [r4, #12]
 801944e:	bf15      	itete	ne
 8019450:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019452:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019456:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801945a:	81a3      	strheq	r3, [r4, #12]
 801945c:	bf18      	it	ne
 801945e:	81a3      	strhne	r3, [r4, #12]
 8019460:	bd10      	pop	{r4, pc}

08019462 <__sclose>:
 8019462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019466:	f000 b939 	b.w	80196dc <_close_r>

0801946a <_vsniprintf_r>:
 801946a:	b530      	push	{r4, r5, lr}
 801946c:	4614      	mov	r4, r2
 801946e:	2c00      	cmp	r4, #0
 8019470:	b09b      	sub	sp, #108	@ 0x6c
 8019472:	4605      	mov	r5, r0
 8019474:	461a      	mov	r2, r3
 8019476:	da05      	bge.n	8019484 <_vsniprintf_r+0x1a>
 8019478:	238b      	movs	r3, #139	@ 0x8b
 801947a:	6003      	str	r3, [r0, #0]
 801947c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019480:	b01b      	add	sp, #108	@ 0x6c
 8019482:	bd30      	pop	{r4, r5, pc}
 8019484:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019488:	f8ad 300c 	strh.w	r3, [sp, #12]
 801948c:	f04f 0300 	mov.w	r3, #0
 8019490:	9319      	str	r3, [sp, #100]	@ 0x64
 8019492:	bf14      	ite	ne
 8019494:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019498:	4623      	moveq	r3, r4
 801949a:	9302      	str	r3, [sp, #8]
 801949c:	9305      	str	r3, [sp, #20]
 801949e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80194a2:	9100      	str	r1, [sp, #0]
 80194a4:	9104      	str	r1, [sp, #16]
 80194a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80194aa:	4669      	mov	r1, sp
 80194ac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80194ae:	f000 fa87 	bl	80199c0 <_svfiprintf_r>
 80194b2:	1c43      	adds	r3, r0, #1
 80194b4:	bfbc      	itt	lt
 80194b6:	238b      	movlt	r3, #139	@ 0x8b
 80194b8:	602b      	strlt	r3, [r5, #0]
 80194ba:	2c00      	cmp	r4, #0
 80194bc:	d0e0      	beq.n	8019480 <_vsniprintf_r+0x16>
 80194be:	9b00      	ldr	r3, [sp, #0]
 80194c0:	2200      	movs	r2, #0
 80194c2:	701a      	strb	r2, [r3, #0]
 80194c4:	e7dc      	b.n	8019480 <_vsniprintf_r+0x16>
	...

080194c8 <vsniprintf>:
 80194c8:	b507      	push	{r0, r1, r2, lr}
 80194ca:	9300      	str	r3, [sp, #0]
 80194cc:	4613      	mov	r3, r2
 80194ce:	460a      	mov	r2, r1
 80194d0:	4601      	mov	r1, r0
 80194d2:	4803      	ldr	r0, [pc, #12]	@ (80194e0 <vsniprintf+0x18>)
 80194d4:	6800      	ldr	r0, [r0, #0]
 80194d6:	f7ff ffc8 	bl	801946a <_vsniprintf_r>
 80194da:	b003      	add	sp, #12
 80194dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80194e0:	200002ac 	.word	0x200002ac

080194e4 <__swbuf_r>:
 80194e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194e6:	460e      	mov	r6, r1
 80194e8:	4614      	mov	r4, r2
 80194ea:	4605      	mov	r5, r0
 80194ec:	b118      	cbz	r0, 80194f6 <__swbuf_r+0x12>
 80194ee:	6a03      	ldr	r3, [r0, #32]
 80194f0:	b90b      	cbnz	r3, 80194f6 <__swbuf_r+0x12>
 80194f2:	f7ff fe9f 	bl	8019234 <__sinit>
 80194f6:	69a3      	ldr	r3, [r4, #24]
 80194f8:	60a3      	str	r3, [r4, #8]
 80194fa:	89a3      	ldrh	r3, [r4, #12]
 80194fc:	071a      	lsls	r2, r3, #28
 80194fe:	d501      	bpl.n	8019504 <__swbuf_r+0x20>
 8019500:	6923      	ldr	r3, [r4, #16]
 8019502:	b943      	cbnz	r3, 8019516 <__swbuf_r+0x32>
 8019504:	4621      	mov	r1, r4
 8019506:	4628      	mov	r0, r5
 8019508:	f000 f82a 	bl	8019560 <__swsetup_r>
 801950c:	b118      	cbz	r0, 8019516 <__swbuf_r+0x32>
 801950e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019512:	4638      	mov	r0, r7
 8019514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019516:	6823      	ldr	r3, [r4, #0]
 8019518:	6922      	ldr	r2, [r4, #16]
 801951a:	1a98      	subs	r0, r3, r2
 801951c:	6963      	ldr	r3, [r4, #20]
 801951e:	b2f6      	uxtb	r6, r6
 8019520:	4283      	cmp	r3, r0
 8019522:	4637      	mov	r7, r6
 8019524:	dc05      	bgt.n	8019532 <__swbuf_r+0x4e>
 8019526:	4621      	mov	r1, r4
 8019528:	4628      	mov	r0, r5
 801952a:	f000 fe97 	bl	801a25c <_fflush_r>
 801952e:	2800      	cmp	r0, #0
 8019530:	d1ed      	bne.n	801950e <__swbuf_r+0x2a>
 8019532:	68a3      	ldr	r3, [r4, #8]
 8019534:	3b01      	subs	r3, #1
 8019536:	60a3      	str	r3, [r4, #8]
 8019538:	6823      	ldr	r3, [r4, #0]
 801953a:	1c5a      	adds	r2, r3, #1
 801953c:	6022      	str	r2, [r4, #0]
 801953e:	701e      	strb	r6, [r3, #0]
 8019540:	6962      	ldr	r2, [r4, #20]
 8019542:	1c43      	adds	r3, r0, #1
 8019544:	429a      	cmp	r2, r3
 8019546:	d004      	beq.n	8019552 <__swbuf_r+0x6e>
 8019548:	89a3      	ldrh	r3, [r4, #12]
 801954a:	07db      	lsls	r3, r3, #31
 801954c:	d5e1      	bpl.n	8019512 <__swbuf_r+0x2e>
 801954e:	2e0a      	cmp	r6, #10
 8019550:	d1df      	bne.n	8019512 <__swbuf_r+0x2e>
 8019552:	4621      	mov	r1, r4
 8019554:	4628      	mov	r0, r5
 8019556:	f000 fe81 	bl	801a25c <_fflush_r>
 801955a:	2800      	cmp	r0, #0
 801955c:	d0d9      	beq.n	8019512 <__swbuf_r+0x2e>
 801955e:	e7d6      	b.n	801950e <__swbuf_r+0x2a>

08019560 <__swsetup_r>:
 8019560:	b538      	push	{r3, r4, r5, lr}
 8019562:	4b29      	ldr	r3, [pc, #164]	@ (8019608 <__swsetup_r+0xa8>)
 8019564:	4605      	mov	r5, r0
 8019566:	6818      	ldr	r0, [r3, #0]
 8019568:	460c      	mov	r4, r1
 801956a:	b118      	cbz	r0, 8019574 <__swsetup_r+0x14>
 801956c:	6a03      	ldr	r3, [r0, #32]
 801956e:	b90b      	cbnz	r3, 8019574 <__swsetup_r+0x14>
 8019570:	f7ff fe60 	bl	8019234 <__sinit>
 8019574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019578:	0719      	lsls	r1, r3, #28
 801957a:	d422      	bmi.n	80195c2 <__swsetup_r+0x62>
 801957c:	06da      	lsls	r2, r3, #27
 801957e:	d407      	bmi.n	8019590 <__swsetup_r+0x30>
 8019580:	2209      	movs	r2, #9
 8019582:	602a      	str	r2, [r5, #0]
 8019584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019588:	81a3      	strh	r3, [r4, #12]
 801958a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801958e:	e033      	b.n	80195f8 <__swsetup_r+0x98>
 8019590:	0758      	lsls	r0, r3, #29
 8019592:	d512      	bpl.n	80195ba <__swsetup_r+0x5a>
 8019594:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019596:	b141      	cbz	r1, 80195aa <__swsetup_r+0x4a>
 8019598:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801959c:	4299      	cmp	r1, r3
 801959e:	d002      	beq.n	80195a6 <__swsetup_r+0x46>
 80195a0:	4628      	mov	r0, r5
 80195a2:	f000 f95f 	bl	8019864 <_free_r>
 80195a6:	2300      	movs	r3, #0
 80195a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80195aa:	89a3      	ldrh	r3, [r4, #12]
 80195ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80195b0:	81a3      	strh	r3, [r4, #12]
 80195b2:	2300      	movs	r3, #0
 80195b4:	6063      	str	r3, [r4, #4]
 80195b6:	6923      	ldr	r3, [r4, #16]
 80195b8:	6023      	str	r3, [r4, #0]
 80195ba:	89a3      	ldrh	r3, [r4, #12]
 80195bc:	f043 0308 	orr.w	r3, r3, #8
 80195c0:	81a3      	strh	r3, [r4, #12]
 80195c2:	6923      	ldr	r3, [r4, #16]
 80195c4:	b94b      	cbnz	r3, 80195da <__swsetup_r+0x7a>
 80195c6:	89a3      	ldrh	r3, [r4, #12]
 80195c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80195cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80195d0:	d003      	beq.n	80195da <__swsetup_r+0x7a>
 80195d2:	4621      	mov	r1, r4
 80195d4:	4628      	mov	r0, r5
 80195d6:	f000 fea1 	bl	801a31c <__smakebuf_r>
 80195da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195de:	f013 0201 	ands.w	r2, r3, #1
 80195e2:	d00a      	beq.n	80195fa <__swsetup_r+0x9a>
 80195e4:	2200      	movs	r2, #0
 80195e6:	60a2      	str	r2, [r4, #8]
 80195e8:	6962      	ldr	r2, [r4, #20]
 80195ea:	4252      	negs	r2, r2
 80195ec:	61a2      	str	r2, [r4, #24]
 80195ee:	6922      	ldr	r2, [r4, #16]
 80195f0:	b942      	cbnz	r2, 8019604 <__swsetup_r+0xa4>
 80195f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80195f6:	d1c5      	bne.n	8019584 <__swsetup_r+0x24>
 80195f8:	bd38      	pop	{r3, r4, r5, pc}
 80195fa:	0799      	lsls	r1, r3, #30
 80195fc:	bf58      	it	pl
 80195fe:	6962      	ldrpl	r2, [r4, #20]
 8019600:	60a2      	str	r2, [r4, #8]
 8019602:	e7f4      	b.n	80195ee <__swsetup_r+0x8e>
 8019604:	2000      	movs	r0, #0
 8019606:	e7f7      	b.n	80195f8 <__swsetup_r+0x98>
 8019608:	200002ac 	.word	0x200002ac

0801960c <memcmp>:
 801960c:	b510      	push	{r4, lr}
 801960e:	3901      	subs	r1, #1
 8019610:	4402      	add	r2, r0
 8019612:	4290      	cmp	r0, r2
 8019614:	d101      	bne.n	801961a <memcmp+0xe>
 8019616:	2000      	movs	r0, #0
 8019618:	e005      	b.n	8019626 <memcmp+0x1a>
 801961a:	7803      	ldrb	r3, [r0, #0]
 801961c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019620:	42a3      	cmp	r3, r4
 8019622:	d001      	beq.n	8019628 <memcmp+0x1c>
 8019624:	1b18      	subs	r0, r3, r4
 8019626:	bd10      	pop	{r4, pc}
 8019628:	3001      	adds	r0, #1
 801962a:	e7f2      	b.n	8019612 <memcmp+0x6>

0801962c <memmove>:
 801962c:	4288      	cmp	r0, r1
 801962e:	b510      	push	{r4, lr}
 8019630:	eb01 0402 	add.w	r4, r1, r2
 8019634:	d902      	bls.n	801963c <memmove+0x10>
 8019636:	4284      	cmp	r4, r0
 8019638:	4623      	mov	r3, r4
 801963a:	d807      	bhi.n	801964c <memmove+0x20>
 801963c:	1e43      	subs	r3, r0, #1
 801963e:	42a1      	cmp	r1, r4
 8019640:	d008      	beq.n	8019654 <memmove+0x28>
 8019642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019646:	f803 2f01 	strb.w	r2, [r3, #1]!
 801964a:	e7f8      	b.n	801963e <memmove+0x12>
 801964c:	4402      	add	r2, r0
 801964e:	4601      	mov	r1, r0
 8019650:	428a      	cmp	r2, r1
 8019652:	d100      	bne.n	8019656 <memmove+0x2a>
 8019654:	bd10      	pop	{r4, pc}
 8019656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801965a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801965e:	e7f7      	b.n	8019650 <memmove+0x24>

08019660 <memset>:
 8019660:	4402      	add	r2, r0
 8019662:	4603      	mov	r3, r0
 8019664:	4293      	cmp	r3, r2
 8019666:	d100      	bne.n	801966a <memset+0xa>
 8019668:	4770      	bx	lr
 801966a:	f803 1b01 	strb.w	r1, [r3], #1
 801966e:	e7f9      	b.n	8019664 <memset+0x4>

08019670 <strchr>:
 8019670:	b2c9      	uxtb	r1, r1
 8019672:	4603      	mov	r3, r0
 8019674:	4618      	mov	r0, r3
 8019676:	f813 2b01 	ldrb.w	r2, [r3], #1
 801967a:	b112      	cbz	r2, 8019682 <strchr+0x12>
 801967c:	428a      	cmp	r2, r1
 801967e:	d1f9      	bne.n	8019674 <strchr+0x4>
 8019680:	4770      	bx	lr
 8019682:	2900      	cmp	r1, #0
 8019684:	bf18      	it	ne
 8019686:	2000      	movne	r0, #0
 8019688:	4770      	bx	lr

0801968a <strncmp>:
 801968a:	b510      	push	{r4, lr}
 801968c:	b16a      	cbz	r2, 80196aa <strncmp+0x20>
 801968e:	3901      	subs	r1, #1
 8019690:	1884      	adds	r4, r0, r2
 8019692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019696:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801969a:	429a      	cmp	r2, r3
 801969c:	d103      	bne.n	80196a6 <strncmp+0x1c>
 801969e:	42a0      	cmp	r0, r4
 80196a0:	d001      	beq.n	80196a6 <strncmp+0x1c>
 80196a2:	2a00      	cmp	r2, #0
 80196a4:	d1f5      	bne.n	8019692 <strncmp+0x8>
 80196a6:	1ad0      	subs	r0, r2, r3
 80196a8:	bd10      	pop	{r4, pc}
 80196aa:	4610      	mov	r0, r2
 80196ac:	e7fc      	b.n	80196a8 <strncmp+0x1e>

080196ae <strstr>:
 80196ae:	780a      	ldrb	r2, [r1, #0]
 80196b0:	b570      	push	{r4, r5, r6, lr}
 80196b2:	b96a      	cbnz	r2, 80196d0 <strstr+0x22>
 80196b4:	bd70      	pop	{r4, r5, r6, pc}
 80196b6:	429a      	cmp	r2, r3
 80196b8:	d109      	bne.n	80196ce <strstr+0x20>
 80196ba:	460c      	mov	r4, r1
 80196bc:	4605      	mov	r5, r0
 80196be:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d0f6      	beq.n	80196b4 <strstr+0x6>
 80196c6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80196ca:	429e      	cmp	r6, r3
 80196cc:	d0f7      	beq.n	80196be <strstr+0x10>
 80196ce:	3001      	adds	r0, #1
 80196d0:	7803      	ldrb	r3, [r0, #0]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d1ef      	bne.n	80196b6 <strstr+0x8>
 80196d6:	4618      	mov	r0, r3
 80196d8:	e7ec      	b.n	80196b4 <strstr+0x6>
	...

080196dc <_close_r>:
 80196dc:	b538      	push	{r3, r4, r5, lr}
 80196de:	4d06      	ldr	r5, [pc, #24]	@ (80196f8 <_close_r+0x1c>)
 80196e0:	2300      	movs	r3, #0
 80196e2:	4604      	mov	r4, r0
 80196e4:	4608      	mov	r0, r1
 80196e6:	602b      	str	r3, [r5, #0]
 80196e8:	f7e8 fe7e 	bl	80023e8 <_close>
 80196ec:	1c43      	adds	r3, r0, #1
 80196ee:	d102      	bne.n	80196f6 <_close_r+0x1a>
 80196f0:	682b      	ldr	r3, [r5, #0]
 80196f2:	b103      	cbz	r3, 80196f6 <_close_r+0x1a>
 80196f4:	6023      	str	r3, [r4, #0]
 80196f6:	bd38      	pop	{r3, r4, r5, pc}
 80196f8:	2000b130 	.word	0x2000b130

080196fc <_lseek_r>:
 80196fc:	b538      	push	{r3, r4, r5, lr}
 80196fe:	4d07      	ldr	r5, [pc, #28]	@ (801971c <_lseek_r+0x20>)
 8019700:	4604      	mov	r4, r0
 8019702:	4608      	mov	r0, r1
 8019704:	4611      	mov	r1, r2
 8019706:	2200      	movs	r2, #0
 8019708:	602a      	str	r2, [r5, #0]
 801970a:	461a      	mov	r2, r3
 801970c:	f7e8 fe93 	bl	8002436 <_lseek>
 8019710:	1c43      	adds	r3, r0, #1
 8019712:	d102      	bne.n	801971a <_lseek_r+0x1e>
 8019714:	682b      	ldr	r3, [r5, #0]
 8019716:	b103      	cbz	r3, 801971a <_lseek_r+0x1e>
 8019718:	6023      	str	r3, [r4, #0]
 801971a:	bd38      	pop	{r3, r4, r5, pc}
 801971c:	2000b130 	.word	0x2000b130

08019720 <_read_r>:
 8019720:	b538      	push	{r3, r4, r5, lr}
 8019722:	4d07      	ldr	r5, [pc, #28]	@ (8019740 <_read_r+0x20>)
 8019724:	4604      	mov	r4, r0
 8019726:	4608      	mov	r0, r1
 8019728:	4611      	mov	r1, r2
 801972a:	2200      	movs	r2, #0
 801972c:	602a      	str	r2, [r5, #0]
 801972e:	461a      	mov	r2, r3
 8019730:	f7e8 fe21 	bl	8002376 <_read>
 8019734:	1c43      	adds	r3, r0, #1
 8019736:	d102      	bne.n	801973e <_read_r+0x1e>
 8019738:	682b      	ldr	r3, [r5, #0]
 801973a:	b103      	cbz	r3, 801973e <_read_r+0x1e>
 801973c:	6023      	str	r3, [r4, #0]
 801973e:	bd38      	pop	{r3, r4, r5, pc}
 8019740:	2000b130 	.word	0x2000b130

08019744 <_sbrk_r>:
 8019744:	b538      	push	{r3, r4, r5, lr}
 8019746:	4d06      	ldr	r5, [pc, #24]	@ (8019760 <_sbrk_r+0x1c>)
 8019748:	2300      	movs	r3, #0
 801974a:	4604      	mov	r4, r0
 801974c:	4608      	mov	r0, r1
 801974e:	602b      	str	r3, [r5, #0]
 8019750:	f7e8 fe7e 	bl	8002450 <_sbrk>
 8019754:	1c43      	adds	r3, r0, #1
 8019756:	d102      	bne.n	801975e <_sbrk_r+0x1a>
 8019758:	682b      	ldr	r3, [r5, #0]
 801975a:	b103      	cbz	r3, 801975e <_sbrk_r+0x1a>
 801975c:	6023      	str	r3, [r4, #0]
 801975e:	bd38      	pop	{r3, r4, r5, pc}
 8019760:	2000b130 	.word	0x2000b130

08019764 <_write_r>:
 8019764:	b538      	push	{r3, r4, r5, lr}
 8019766:	4d07      	ldr	r5, [pc, #28]	@ (8019784 <_write_r+0x20>)
 8019768:	4604      	mov	r4, r0
 801976a:	4608      	mov	r0, r1
 801976c:	4611      	mov	r1, r2
 801976e:	2200      	movs	r2, #0
 8019770:	602a      	str	r2, [r5, #0]
 8019772:	461a      	mov	r2, r3
 8019774:	f7e8 fe1c 	bl	80023b0 <_write>
 8019778:	1c43      	adds	r3, r0, #1
 801977a:	d102      	bne.n	8019782 <_write_r+0x1e>
 801977c:	682b      	ldr	r3, [r5, #0]
 801977e:	b103      	cbz	r3, 8019782 <_write_r+0x1e>
 8019780:	6023      	str	r3, [r4, #0]
 8019782:	bd38      	pop	{r3, r4, r5, pc}
 8019784:	2000b130 	.word	0x2000b130

08019788 <__errno>:
 8019788:	4b01      	ldr	r3, [pc, #4]	@ (8019790 <__errno+0x8>)
 801978a:	6818      	ldr	r0, [r3, #0]
 801978c:	4770      	bx	lr
 801978e:	bf00      	nop
 8019790:	200002ac 	.word	0x200002ac

08019794 <__libc_init_array>:
 8019794:	b570      	push	{r4, r5, r6, lr}
 8019796:	4d0d      	ldr	r5, [pc, #52]	@ (80197cc <__libc_init_array+0x38>)
 8019798:	4c0d      	ldr	r4, [pc, #52]	@ (80197d0 <__libc_init_array+0x3c>)
 801979a:	1b64      	subs	r4, r4, r5
 801979c:	10a4      	asrs	r4, r4, #2
 801979e:	2600      	movs	r6, #0
 80197a0:	42a6      	cmp	r6, r4
 80197a2:	d109      	bne.n	80197b8 <__libc_init_array+0x24>
 80197a4:	4d0b      	ldr	r5, [pc, #44]	@ (80197d4 <__libc_init_array+0x40>)
 80197a6:	4c0c      	ldr	r4, [pc, #48]	@ (80197d8 <__libc_init_array+0x44>)
 80197a8:	f000 fe62 	bl	801a470 <_init>
 80197ac:	1b64      	subs	r4, r4, r5
 80197ae:	10a4      	asrs	r4, r4, #2
 80197b0:	2600      	movs	r6, #0
 80197b2:	42a6      	cmp	r6, r4
 80197b4:	d105      	bne.n	80197c2 <__libc_init_array+0x2e>
 80197b6:	bd70      	pop	{r4, r5, r6, pc}
 80197b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80197bc:	4798      	blx	r3
 80197be:	3601      	adds	r6, #1
 80197c0:	e7ee      	b.n	80197a0 <__libc_init_array+0xc>
 80197c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80197c6:	4798      	blx	r3
 80197c8:	3601      	adds	r6, #1
 80197ca:	e7f2      	b.n	80197b2 <__libc_init_array+0x1e>
 80197cc:	0801b2d8 	.word	0x0801b2d8
 80197d0:	0801b2d8 	.word	0x0801b2d8
 80197d4:	0801b2d8 	.word	0x0801b2d8
 80197d8:	0801b2e0 	.word	0x0801b2e0

080197dc <__retarget_lock_init_recursive>:
 80197dc:	4770      	bx	lr

080197de <__retarget_lock_acquire_recursive>:
 80197de:	4770      	bx	lr

080197e0 <__retarget_lock_release_recursive>:
 80197e0:	4770      	bx	lr

080197e2 <strcpy>:
 80197e2:	4603      	mov	r3, r0
 80197e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80197e8:	f803 2b01 	strb.w	r2, [r3], #1
 80197ec:	2a00      	cmp	r2, #0
 80197ee:	d1f9      	bne.n	80197e4 <strcpy+0x2>
 80197f0:	4770      	bx	lr

080197f2 <memcpy>:
 80197f2:	440a      	add	r2, r1
 80197f4:	4291      	cmp	r1, r2
 80197f6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80197fa:	d100      	bne.n	80197fe <memcpy+0xc>
 80197fc:	4770      	bx	lr
 80197fe:	b510      	push	{r4, lr}
 8019800:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019804:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019808:	4291      	cmp	r1, r2
 801980a:	d1f9      	bne.n	8019800 <memcpy+0xe>
 801980c:	bd10      	pop	{r4, pc}
	...

08019810 <__assert_func>:
 8019810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019812:	4614      	mov	r4, r2
 8019814:	461a      	mov	r2, r3
 8019816:	4b09      	ldr	r3, [pc, #36]	@ (801983c <__assert_func+0x2c>)
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	4605      	mov	r5, r0
 801981c:	68d8      	ldr	r0, [r3, #12]
 801981e:	b14c      	cbz	r4, 8019834 <__assert_func+0x24>
 8019820:	4b07      	ldr	r3, [pc, #28]	@ (8019840 <__assert_func+0x30>)
 8019822:	9100      	str	r1, [sp, #0]
 8019824:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019828:	4906      	ldr	r1, [pc, #24]	@ (8019844 <__assert_func+0x34>)
 801982a:	462b      	mov	r3, r5
 801982c:	f000 fd3e 	bl	801a2ac <fiprintf>
 8019830:	f000 fdd2 	bl	801a3d8 <abort>
 8019834:	4b04      	ldr	r3, [pc, #16]	@ (8019848 <__assert_func+0x38>)
 8019836:	461c      	mov	r4, r3
 8019838:	e7f3      	b.n	8019822 <__assert_func+0x12>
 801983a:	bf00      	nop
 801983c:	200002ac 	.word	0x200002ac
 8019840:	0801b15f 	.word	0x0801b15f
 8019844:	0801b16c 	.word	0x0801b16c
 8019848:	0801b19a 	.word	0x0801b19a

0801984c <__env_lock>:
 801984c:	4801      	ldr	r0, [pc, #4]	@ (8019854 <__env_lock+0x8>)
 801984e:	f7ff bfc6 	b.w	80197de <__retarget_lock_acquire_recursive>
 8019852:	bf00      	nop
 8019854:	2000b134 	.word	0x2000b134

08019858 <__env_unlock>:
 8019858:	4801      	ldr	r0, [pc, #4]	@ (8019860 <__env_unlock+0x8>)
 801985a:	f7ff bfc1 	b.w	80197e0 <__retarget_lock_release_recursive>
 801985e:	bf00      	nop
 8019860:	2000b134 	.word	0x2000b134

08019864 <_free_r>:
 8019864:	b538      	push	{r3, r4, r5, lr}
 8019866:	4605      	mov	r5, r0
 8019868:	2900      	cmp	r1, #0
 801986a:	d041      	beq.n	80198f0 <_free_r+0x8c>
 801986c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019870:	1f0c      	subs	r4, r1, #4
 8019872:	2b00      	cmp	r3, #0
 8019874:	bfb8      	it	lt
 8019876:	18e4      	addlt	r4, r4, r3
 8019878:	f7ff fb2a 	bl	8018ed0 <__malloc_lock>
 801987c:	4a1d      	ldr	r2, [pc, #116]	@ (80198f4 <_free_r+0x90>)
 801987e:	6813      	ldr	r3, [r2, #0]
 8019880:	b933      	cbnz	r3, 8019890 <_free_r+0x2c>
 8019882:	6063      	str	r3, [r4, #4]
 8019884:	6014      	str	r4, [r2, #0]
 8019886:	4628      	mov	r0, r5
 8019888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801988c:	f7ff bb26 	b.w	8018edc <__malloc_unlock>
 8019890:	42a3      	cmp	r3, r4
 8019892:	d908      	bls.n	80198a6 <_free_r+0x42>
 8019894:	6820      	ldr	r0, [r4, #0]
 8019896:	1821      	adds	r1, r4, r0
 8019898:	428b      	cmp	r3, r1
 801989a:	bf01      	itttt	eq
 801989c:	6819      	ldreq	r1, [r3, #0]
 801989e:	685b      	ldreq	r3, [r3, #4]
 80198a0:	1809      	addeq	r1, r1, r0
 80198a2:	6021      	streq	r1, [r4, #0]
 80198a4:	e7ed      	b.n	8019882 <_free_r+0x1e>
 80198a6:	461a      	mov	r2, r3
 80198a8:	685b      	ldr	r3, [r3, #4]
 80198aa:	b10b      	cbz	r3, 80198b0 <_free_r+0x4c>
 80198ac:	42a3      	cmp	r3, r4
 80198ae:	d9fa      	bls.n	80198a6 <_free_r+0x42>
 80198b0:	6811      	ldr	r1, [r2, #0]
 80198b2:	1850      	adds	r0, r2, r1
 80198b4:	42a0      	cmp	r0, r4
 80198b6:	d10b      	bne.n	80198d0 <_free_r+0x6c>
 80198b8:	6820      	ldr	r0, [r4, #0]
 80198ba:	4401      	add	r1, r0
 80198bc:	1850      	adds	r0, r2, r1
 80198be:	4283      	cmp	r3, r0
 80198c0:	6011      	str	r1, [r2, #0]
 80198c2:	d1e0      	bne.n	8019886 <_free_r+0x22>
 80198c4:	6818      	ldr	r0, [r3, #0]
 80198c6:	685b      	ldr	r3, [r3, #4]
 80198c8:	6053      	str	r3, [r2, #4]
 80198ca:	4408      	add	r0, r1
 80198cc:	6010      	str	r0, [r2, #0]
 80198ce:	e7da      	b.n	8019886 <_free_r+0x22>
 80198d0:	d902      	bls.n	80198d8 <_free_r+0x74>
 80198d2:	230c      	movs	r3, #12
 80198d4:	602b      	str	r3, [r5, #0]
 80198d6:	e7d6      	b.n	8019886 <_free_r+0x22>
 80198d8:	6820      	ldr	r0, [r4, #0]
 80198da:	1821      	adds	r1, r4, r0
 80198dc:	428b      	cmp	r3, r1
 80198de:	bf04      	itt	eq
 80198e0:	6819      	ldreq	r1, [r3, #0]
 80198e2:	685b      	ldreq	r3, [r3, #4]
 80198e4:	6063      	str	r3, [r4, #4]
 80198e6:	bf04      	itt	eq
 80198e8:	1809      	addeq	r1, r1, r0
 80198ea:	6021      	streq	r1, [r4, #0]
 80198ec:	6054      	str	r4, [r2, #4]
 80198ee:	e7ca      	b.n	8019886 <_free_r+0x22>
 80198f0:	bd38      	pop	{r3, r4, r5, pc}
 80198f2:	bf00      	nop
 80198f4:	2000aff0 	.word	0x2000aff0

080198f8 <_malloc_usable_size_r>:
 80198f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80198fc:	1f18      	subs	r0, r3, #4
 80198fe:	2b00      	cmp	r3, #0
 8019900:	bfbc      	itt	lt
 8019902:	580b      	ldrlt	r3, [r1, r0]
 8019904:	18c0      	addlt	r0, r0, r3
 8019906:	4770      	bx	lr

08019908 <__ssputs_r>:
 8019908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801990c:	688e      	ldr	r6, [r1, #8]
 801990e:	461f      	mov	r7, r3
 8019910:	42be      	cmp	r6, r7
 8019912:	680b      	ldr	r3, [r1, #0]
 8019914:	4682      	mov	sl, r0
 8019916:	460c      	mov	r4, r1
 8019918:	4690      	mov	r8, r2
 801991a:	d82d      	bhi.n	8019978 <__ssputs_r+0x70>
 801991c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019920:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019924:	d026      	beq.n	8019974 <__ssputs_r+0x6c>
 8019926:	6965      	ldr	r5, [r4, #20]
 8019928:	6909      	ldr	r1, [r1, #16]
 801992a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801992e:	eba3 0901 	sub.w	r9, r3, r1
 8019932:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019936:	1c7b      	adds	r3, r7, #1
 8019938:	444b      	add	r3, r9
 801993a:	106d      	asrs	r5, r5, #1
 801993c:	429d      	cmp	r5, r3
 801993e:	bf38      	it	cc
 8019940:	461d      	movcc	r5, r3
 8019942:	0553      	lsls	r3, r2, #21
 8019944:	d527      	bpl.n	8019996 <__ssputs_r+0x8e>
 8019946:	4629      	mov	r1, r5
 8019948:	f7ff fa42 	bl	8018dd0 <_malloc_r>
 801994c:	4606      	mov	r6, r0
 801994e:	b360      	cbz	r0, 80199aa <__ssputs_r+0xa2>
 8019950:	6921      	ldr	r1, [r4, #16]
 8019952:	464a      	mov	r2, r9
 8019954:	f7ff ff4d 	bl	80197f2 <memcpy>
 8019958:	89a3      	ldrh	r3, [r4, #12]
 801995a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801995e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019962:	81a3      	strh	r3, [r4, #12]
 8019964:	6126      	str	r6, [r4, #16]
 8019966:	6165      	str	r5, [r4, #20]
 8019968:	444e      	add	r6, r9
 801996a:	eba5 0509 	sub.w	r5, r5, r9
 801996e:	6026      	str	r6, [r4, #0]
 8019970:	60a5      	str	r5, [r4, #8]
 8019972:	463e      	mov	r6, r7
 8019974:	42be      	cmp	r6, r7
 8019976:	d900      	bls.n	801997a <__ssputs_r+0x72>
 8019978:	463e      	mov	r6, r7
 801997a:	6820      	ldr	r0, [r4, #0]
 801997c:	4632      	mov	r2, r6
 801997e:	4641      	mov	r1, r8
 8019980:	f7ff fe54 	bl	801962c <memmove>
 8019984:	68a3      	ldr	r3, [r4, #8]
 8019986:	1b9b      	subs	r3, r3, r6
 8019988:	60a3      	str	r3, [r4, #8]
 801998a:	6823      	ldr	r3, [r4, #0]
 801998c:	4433      	add	r3, r6
 801998e:	6023      	str	r3, [r4, #0]
 8019990:	2000      	movs	r0, #0
 8019992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019996:	462a      	mov	r2, r5
 8019998:	f7ff fb1a 	bl	8018fd0 <_realloc_r>
 801999c:	4606      	mov	r6, r0
 801999e:	2800      	cmp	r0, #0
 80199a0:	d1e0      	bne.n	8019964 <__ssputs_r+0x5c>
 80199a2:	6921      	ldr	r1, [r4, #16]
 80199a4:	4650      	mov	r0, sl
 80199a6:	f7ff ff5d 	bl	8019864 <_free_r>
 80199aa:	230c      	movs	r3, #12
 80199ac:	f8ca 3000 	str.w	r3, [sl]
 80199b0:	89a3      	ldrh	r3, [r4, #12]
 80199b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80199b6:	81a3      	strh	r3, [r4, #12]
 80199b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80199bc:	e7e9      	b.n	8019992 <__ssputs_r+0x8a>
	...

080199c0 <_svfiprintf_r>:
 80199c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199c4:	4698      	mov	r8, r3
 80199c6:	898b      	ldrh	r3, [r1, #12]
 80199c8:	061b      	lsls	r3, r3, #24
 80199ca:	b09d      	sub	sp, #116	@ 0x74
 80199cc:	4607      	mov	r7, r0
 80199ce:	460d      	mov	r5, r1
 80199d0:	4614      	mov	r4, r2
 80199d2:	d510      	bpl.n	80199f6 <_svfiprintf_r+0x36>
 80199d4:	690b      	ldr	r3, [r1, #16]
 80199d6:	b973      	cbnz	r3, 80199f6 <_svfiprintf_r+0x36>
 80199d8:	2140      	movs	r1, #64	@ 0x40
 80199da:	f7ff f9f9 	bl	8018dd0 <_malloc_r>
 80199de:	6028      	str	r0, [r5, #0]
 80199e0:	6128      	str	r0, [r5, #16]
 80199e2:	b930      	cbnz	r0, 80199f2 <_svfiprintf_r+0x32>
 80199e4:	230c      	movs	r3, #12
 80199e6:	603b      	str	r3, [r7, #0]
 80199e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80199ec:	b01d      	add	sp, #116	@ 0x74
 80199ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199f2:	2340      	movs	r3, #64	@ 0x40
 80199f4:	616b      	str	r3, [r5, #20]
 80199f6:	2300      	movs	r3, #0
 80199f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80199fa:	2320      	movs	r3, #32
 80199fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019a00:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a04:	2330      	movs	r3, #48	@ 0x30
 8019a06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019ba4 <_svfiprintf_r+0x1e4>
 8019a0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019a0e:	f04f 0901 	mov.w	r9, #1
 8019a12:	4623      	mov	r3, r4
 8019a14:	469a      	mov	sl, r3
 8019a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a1a:	b10a      	cbz	r2, 8019a20 <_svfiprintf_r+0x60>
 8019a1c:	2a25      	cmp	r2, #37	@ 0x25
 8019a1e:	d1f9      	bne.n	8019a14 <_svfiprintf_r+0x54>
 8019a20:	ebba 0b04 	subs.w	fp, sl, r4
 8019a24:	d00b      	beq.n	8019a3e <_svfiprintf_r+0x7e>
 8019a26:	465b      	mov	r3, fp
 8019a28:	4622      	mov	r2, r4
 8019a2a:	4629      	mov	r1, r5
 8019a2c:	4638      	mov	r0, r7
 8019a2e:	f7ff ff6b 	bl	8019908 <__ssputs_r>
 8019a32:	3001      	adds	r0, #1
 8019a34:	f000 80a7 	beq.w	8019b86 <_svfiprintf_r+0x1c6>
 8019a38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019a3a:	445a      	add	r2, fp
 8019a3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8019a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	f000 809f 	beq.w	8019b86 <_svfiprintf_r+0x1c6>
 8019a48:	2300      	movs	r3, #0
 8019a4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019a52:	f10a 0a01 	add.w	sl, sl, #1
 8019a56:	9304      	str	r3, [sp, #16]
 8019a58:	9307      	str	r3, [sp, #28]
 8019a5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019a5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8019a60:	4654      	mov	r4, sl
 8019a62:	2205      	movs	r2, #5
 8019a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a68:	484e      	ldr	r0, [pc, #312]	@ (8019ba4 <_svfiprintf_r+0x1e4>)
 8019a6a:	f7e6 fbf1 	bl	8000250 <memchr>
 8019a6e:	9a04      	ldr	r2, [sp, #16]
 8019a70:	b9d8      	cbnz	r0, 8019aaa <_svfiprintf_r+0xea>
 8019a72:	06d0      	lsls	r0, r2, #27
 8019a74:	bf44      	itt	mi
 8019a76:	2320      	movmi	r3, #32
 8019a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019a7c:	0711      	lsls	r1, r2, #28
 8019a7e:	bf44      	itt	mi
 8019a80:	232b      	movmi	r3, #43	@ 0x2b
 8019a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019a86:	f89a 3000 	ldrb.w	r3, [sl]
 8019a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8019a8c:	d015      	beq.n	8019aba <_svfiprintf_r+0xfa>
 8019a8e:	9a07      	ldr	r2, [sp, #28]
 8019a90:	4654      	mov	r4, sl
 8019a92:	2000      	movs	r0, #0
 8019a94:	f04f 0c0a 	mov.w	ip, #10
 8019a98:	4621      	mov	r1, r4
 8019a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019a9e:	3b30      	subs	r3, #48	@ 0x30
 8019aa0:	2b09      	cmp	r3, #9
 8019aa2:	d94b      	bls.n	8019b3c <_svfiprintf_r+0x17c>
 8019aa4:	b1b0      	cbz	r0, 8019ad4 <_svfiprintf_r+0x114>
 8019aa6:	9207      	str	r2, [sp, #28]
 8019aa8:	e014      	b.n	8019ad4 <_svfiprintf_r+0x114>
 8019aaa:	eba0 0308 	sub.w	r3, r0, r8
 8019aae:	fa09 f303 	lsl.w	r3, r9, r3
 8019ab2:	4313      	orrs	r3, r2
 8019ab4:	9304      	str	r3, [sp, #16]
 8019ab6:	46a2      	mov	sl, r4
 8019ab8:	e7d2      	b.n	8019a60 <_svfiprintf_r+0xa0>
 8019aba:	9b03      	ldr	r3, [sp, #12]
 8019abc:	1d19      	adds	r1, r3, #4
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	9103      	str	r1, [sp, #12]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	bfbb      	ittet	lt
 8019ac6:	425b      	neglt	r3, r3
 8019ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8019acc:	9307      	strge	r3, [sp, #28]
 8019ace:	9307      	strlt	r3, [sp, #28]
 8019ad0:	bfb8      	it	lt
 8019ad2:	9204      	strlt	r2, [sp, #16]
 8019ad4:	7823      	ldrb	r3, [r4, #0]
 8019ad6:	2b2e      	cmp	r3, #46	@ 0x2e
 8019ad8:	d10a      	bne.n	8019af0 <_svfiprintf_r+0x130>
 8019ada:	7863      	ldrb	r3, [r4, #1]
 8019adc:	2b2a      	cmp	r3, #42	@ 0x2a
 8019ade:	d132      	bne.n	8019b46 <_svfiprintf_r+0x186>
 8019ae0:	9b03      	ldr	r3, [sp, #12]
 8019ae2:	1d1a      	adds	r2, r3, #4
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	9203      	str	r2, [sp, #12]
 8019ae8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019aec:	3402      	adds	r4, #2
 8019aee:	9305      	str	r3, [sp, #20]
 8019af0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019bb4 <_svfiprintf_r+0x1f4>
 8019af4:	7821      	ldrb	r1, [r4, #0]
 8019af6:	2203      	movs	r2, #3
 8019af8:	4650      	mov	r0, sl
 8019afa:	f7e6 fba9 	bl	8000250 <memchr>
 8019afe:	b138      	cbz	r0, 8019b10 <_svfiprintf_r+0x150>
 8019b00:	9b04      	ldr	r3, [sp, #16]
 8019b02:	eba0 000a 	sub.w	r0, r0, sl
 8019b06:	2240      	movs	r2, #64	@ 0x40
 8019b08:	4082      	lsls	r2, r0
 8019b0a:	4313      	orrs	r3, r2
 8019b0c:	3401      	adds	r4, #1
 8019b0e:	9304      	str	r3, [sp, #16]
 8019b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b14:	4824      	ldr	r0, [pc, #144]	@ (8019ba8 <_svfiprintf_r+0x1e8>)
 8019b16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019b1a:	2206      	movs	r2, #6
 8019b1c:	f7e6 fb98 	bl	8000250 <memchr>
 8019b20:	2800      	cmp	r0, #0
 8019b22:	d036      	beq.n	8019b92 <_svfiprintf_r+0x1d2>
 8019b24:	4b21      	ldr	r3, [pc, #132]	@ (8019bac <_svfiprintf_r+0x1ec>)
 8019b26:	bb1b      	cbnz	r3, 8019b70 <_svfiprintf_r+0x1b0>
 8019b28:	9b03      	ldr	r3, [sp, #12]
 8019b2a:	3307      	adds	r3, #7
 8019b2c:	f023 0307 	bic.w	r3, r3, #7
 8019b30:	3308      	adds	r3, #8
 8019b32:	9303      	str	r3, [sp, #12]
 8019b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019b36:	4433      	add	r3, r6
 8019b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8019b3a:	e76a      	b.n	8019a12 <_svfiprintf_r+0x52>
 8019b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019b40:	460c      	mov	r4, r1
 8019b42:	2001      	movs	r0, #1
 8019b44:	e7a8      	b.n	8019a98 <_svfiprintf_r+0xd8>
 8019b46:	2300      	movs	r3, #0
 8019b48:	3401      	adds	r4, #1
 8019b4a:	9305      	str	r3, [sp, #20]
 8019b4c:	4619      	mov	r1, r3
 8019b4e:	f04f 0c0a 	mov.w	ip, #10
 8019b52:	4620      	mov	r0, r4
 8019b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b58:	3a30      	subs	r2, #48	@ 0x30
 8019b5a:	2a09      	cmp	r2, #9
 8019b5c:	d903      	bls.n	8019b66 <_svfiprintf_r+0x1a6>
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d0c6      	beq.n	8019af0 <_svfiprintf_r+0x130>
 8019b62:	9105      	str	r1, [sp, #20]
 8019b64:	e7c4      	b.n	8019af0 <_svfiprintf_r+0x130>
 8019b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8019b6a:	4604      	mov	r4, r0
 8019b6c:	2301      	movs	r3, #1
 8019b6e:	e7f0      	b.n	8019b52 <_svfiprintf_r+0x192>
 8019b70:	ab03      	add	r3, sp, #12
 8019b72:	9300      	str	r3, [sp, #0]
 8019b74:	462a      	mov	r2, r5
 8019b76:	4b0e      	ldr	r3, [pc, #56]	@ (8019bb0 <_svfiprintf_r+0x1f0>)
 8019b78:	a904      	add	r1, sp, #16
 8019b7a:	4638      	mov	r0, r7
 8019b7c:	f3af 8000 	nop.w
 8019b80:	1c42      	adds	r2, r0, #1
 8019b82:	4606      	mov	r6, r0
 8019b84:	d1d6      	bne.n	8019b34 <_svfiprintf_r+0x174>
 8019b86:	89ab      	ldrh	r3, [r5, #12]
 8019b88:	065b      	lsls	r3, r3, #25
 8019b8a:	f53f af2d 	bmi.w	80199e8 <_svfiprintf_r+0x28>
 8019b8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019b90:	e72c      	b.n	80199ec <_svfiprintf_r+0x2c>
 8019b92:	ab03      	add	r3, sp, #12
 8019b94:	9300      	str	r3, [sp, #0]
 8019b96:	462a      	mov	r2, r5
 8019b98:	4b05      	ldr	r3, [pc, #20]	@ (8019bb0 <_svfiprintf_r+0x1f0>)
 8019b9a:	a904      	add	r1, sp, #16
 8019b9c:	4638      	mov	r0, r7
 8019b9e:	f000 f9bb 	bl	8019f18 <_printf_i>
 8019ba2:	e7ed      	b.n	8019b80 <_svfiprintf_r+0x1c0>
 8019ba4:	0801b19b 	.word	0x0801b19b
 8019ba8:	0801b1a5 	.word	0x0801b1a5
 8019bac:	00000000 	.word	0x00000000
 8019bb0:	08019909 	.word	0x08019909
 8019bb4:	0801b1a1 	.word	0x0801b1a1

08019bb8 <__sfputc_r>:
 8019bb8:	6893      	ldr	r3, [r2, #8]
 8019bba:	3b01      	subs	r3, #1
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	b410      	push	{r4}
 8019bc0:	6093      	str	r3, [r2, #8]
 8019bc2:	da08      	bge.n	8019bd6 <__sfputc_r+0x1e>
 8019bc4:	6994      	ldr	r4, [r2, #24]
 8019bc6:	42a3      	cmp	r3, r4
 8019bc8:	db01      	blt.n	8019bce <__sfputc_r+0x16>
 8019bca:	290a      	cmp	r1, #10
 8019bcc:	d103      	bne.n	8019bd6 <__sfputc_r+0x1e>
 8019bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bd2:	f7ff bc87 	b.w	80194e4 <__swbuf_r>
 8019bd6:	6813      	ldr	r3, [r2, #0]
 8019bd8:	1c58      	adds	r0, r3, #1
 8019bda:	6010      	str	r0, [r2, #0]
 8019bdc:	7019      	strb	r1, [r3, #0]
 8019bde:	4608      	mov	r0, r1
 8019be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019be4:	4770      	bx	lr

08019be6 <__sfputs_r>:
 8019be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019be8:	4606      	mov	r6, r0
 8019bea:	460f      	mov	r7, r1
 8019bec:	4614      	mov	r4, r2
 8019bee:	18d5      	adds	r5, r2, r3
 8019bf0:	42ac      	cmp	r4, r5
 8019bf2:	d101      	bne.n	8019bf8 <__sfputs_r+0x12>
 8019bf4:	2000      	movs	r0, #0
 8019bf6:	e007      	b.n	8019c08 <__sfputs_r+0x22>
 8019bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019bfc:	463a      	mov	r2, r7
 8019bfe:	4630      	mov	r0, r6
 8019c00:	f7ff ffda 	bl	8019bb8 <__sfputc_r>
 8019c04:	1c43      	adds	r3, r0, #1
 8019c06:	d1f3      	bne.n	8019bf0 <__sfputs_r+0xa>
 8019c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019c0c <_vfiprintf_r>:
 8019c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c10:	460d      	mov	r5, r1
 8019c12:	b09d      	sub	sp, #116	@ 0x74
 8019c14:	4614      	mov	r4, r2
 8019c16:	4698      	mov	r8, r3
 8019c18:	4606      	mov	r6, r0
 8019c1a:	b118      	cbz	r0, 8019c24 <_vfiprintf_r+0x18>
 8019c1c:	6a03      	ldr	r3, [r0, #32]
 8019c1e:	b90b      	cbnz	r3, 8019c24 <_vfiprintf_r+0x18>
 8019c20:	f7ff fb08 	bl	8019234 <__sinit>
 8019c24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019c26:	07d9      	lsls	r1, r3, #31
 8019c28:	d405      	bmi.n	8019c36 <_vfiprintf_r+0x2a>
 8019c2a:	89ab      	ldrh	r3, [r5, #12]
 8019c2c:	059a      	lsls	r2, r3, #22
 8019c2e:	d402      	bmi.n	8019c36 <_vfiprintf_r+0x2a>
 8019c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019c32:	f7ff fdd4 	bl	80197de <__retarget_lock_acquire_recursive>
 8019c36:	89ab      	ldrh	r3, [r5, #12]
 8019c38:	071b      	lsls	r3, r3, #28
 8019c3a:	d501      	bpl.n	8019c40 <_vfiprintf_r+0x34>
 8019c3c:	692b      	ldr	r3, [r5, #16]
 8019c3e:	b99b      	cbnz	r3, 8019c68 <_vfiprintf_r+0x5c>
 8019c40:	4629      	mov	r1, r5
 8019c42:	4630      	mov	r0, r6
 8019c44:	f7ff fc8c 	bl	8019560 <__swsetup_r>
 8019c48:	b170      	cbz	r0, 8019c68 <_vfiprintf_r+0x5c>
 8019c4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019c4c:	07dc      	lsls	r4, r3, #31
 8019c4e:	d504      	bpl.n	8019c5a <_vfiprintf_r+0x4e>
 8019c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019c54:	b01d      	add	sp, #116	@ 0x74
 8019c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c5a:	89ab      	ldrh	r3, [r5, #12]
 8019c5c:	0598      	lsls	r0, r3, #22
 8019c5e:	d4f7      	bmi.n	8019c50 <_vfiprintf_r+0x44>
 8019c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019c62:	f7ff fdbd 	bl	80197e0 <__retarget_lock_release_recursive>
 8019c66:	e7f3      	b.n	8019c50 <_vfiprintf_r+0x44>
 8019c68:	2300      	movs	r3, #0
 8019c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c6c:	2320      	movs	r3, #32
 8019c6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c76:	2330      	movs	r3, #48	@ 0x30
 8019c78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019e28 <_vfiprintf_r+0x21c>
 8019c7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019c80:	f04f 0901 	mov.w	r9, #1
 8019c84:	4623      	mov	r3, r4
 8019c86:	469a      	mov	sl, r3
 8019c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c8c:	b10a      	cbz	r2, 8019c92 <_vfiprintf_r+0x86>
 8019c8e:	2a25      	cmp	r2, #37	@ 0x25
 8019c90:	d1f9      	bne.n	8019c86 <_vfiprintf_r+0x7a>
 8019c92:	ebba 0b04 	subs.w	fp, sl, r4
 8019c96:	d00b      	beq.n	8019cb0 <_vfiprintf_r+0xa4>
 8019c98:	465b      	mov	r3, fp
 8019c9a:	4622      	mov	r2, r4
 8019c9c:	4629      	mov	r1, r5
 8019c9e:	4630      	mov	r0, r6
 8019ca0:	f7ff ffa1 	bl	8019be6 <__sfputs_r>
 8019ca4:	3001      	adds	r0, #1
 8019ca6:	f000 80a7 	beq.w	8019df8 <_vfiprintf_r+0x1ec>
 8019caa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019cac:	445a      	add	r2, fp
 8019cae:	9209      	str	r2, [sp, #36]	@ 0x24
 8019cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	f000 809f 	beq.w	8019df8 <_vfiprintf_r+0x1ec>
 8019cba:	2300      	movs	r3, #0
 8019cbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019cc4:	f10a 0a01 	add.w	sl, sl, #1
 8019cc8:	9304      	str	r3, [sp, #16]
 8019cca:	9307      	str	r3, [sp, #28]
 8019ccc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019cd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8019cd2:	4654      	mov	r4, sl
 8019cd4:	2205      	movs	r2, #5
 8019cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cda:	4853      	ldr	r0, [pc, #332]	@ (8019e28 <_vfiprintf_r+0x21c>)
 8019cdc:	f7e6 fab8 	bl	8000250 <memchr>
 8019ce0:	9a04      	ldr	r2, [sp, #16]
 8019ce2:	b9d8      	cbnz	r0, 8019d1c <_vfiprintf_r+0x110>
 8019ce4:	06d1      	lsls	r1, r2, #27
 8019ce6:	bf44      	itt	mi
 8019ce8:	2320      	movmi	r3, #32
 8019cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019cee:	0713      	lsls	r3, r2, #28
 8019cf0:	bf44      	itt	mi
 8019cf2:	232b      	movmi	r3, #43	@ 0x2b
 8019cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8019cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8019cfe:	d015      	beq.n	8019d2c <_vfiprintf_r+0x120>
 8019d00:	9a07      	ldr	r2, [sp, #28]
 8019d02:	4654      	mov	r4, sl
 8019d04:	2000      	movs	r0, #0
 8019d06:	f04f 0c0a 	mov.w	ip, #10
 8019d0a:	4621      	mov	r1, r4
 8019d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d10:	3b30      	subs	r3, #48	@ 0x30
 8019d12:	2b09      	cmp	r3, #9
 8019d14:	d94b      	bls.n	8019dae <_vfiprintf_r+0x1a2>
 8019d16:	b1b0      	cbz	r0, 8019d46 <_vfiprintf_r+0x13a>
 8019d18:	9207      	str	r2, [sp, #28]
 8019d1a:	e014      	b.n	8019d46 <_vfiprintf_r+0x13a>
 8019d1c:	eba0 0308 	sub.w	r3, r0, r8
 8019d20:	fa09 f303 	lsl.w	r3, r9, r3
 8019d24:	4313      	orrs	r3, r2
 8019d26:	9304      	str	r3, [sp, #16]
 8019d28:	46a2      	mov	sl, r4
 8019d2a:	e7d2      	b.n	8019cd2 <_vfiprintf_r+0xc6>
 8019d2c:	9b03      	ldr	r3, [sp, #12]
 8019d2e:	1d19      	adds	r1, r3, #4
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	9103      	str	r1, [sp, #12]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	bfbb      	ittet	lt
 8019d38:	425b      	neglt	r3, r3
 8019d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8019d3e:	9307      	strge	r3, [sp, #28]
 8019d40:	9307      	strlt	r3, [sp, #28]
 8019d42:	bfb8      	it	lt
 8019d44:	9204      	strlt	r2, [sp, #16]
 8019d46:	7823      	ldrb	r3, [r4, #0]
 8019d48:	2b2e      	cmp	r3, #46	@ 0x2e
 8019d4a:	d10a      	bne.n	8019d62 <_vfiprintf_r+0x156>
 8019d4c:	7863      	ldrb	r3, [r4, #1]
 8019d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019d50:	d132      	bne.n	8019db8 <_vfiprintf_r+0x1ac>
 8019d52:	9b03      	ldr	r3, [sp, #12]
 8019d54:	1d1a      	adds	r2, r3, #4
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	9203      	str	r2, [sp, #12]
 8019d5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019d5e:	3402      	adds	r4, #2
 8019d60:	9305      	str	r3, [sp, #20]
 8019d62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019e38 <_vfiprintf_r+0x22c>
 8019d66:	7821      	ldrb	r1, [r4, #0]
 8019d68:	2203      	movs	r2, #3
 8019d6a:	4650      	mov	r0, sl
 8019d6c:	f7e6 fa70 	bl	8000250 <memchr>
 8019d70:	b138      	cbz	r0, 8019d82 <_vfiprintf_r+0x176>
 8019d72:	9b04      	ldr	r3, [sp, #16]
 8019d74:	eba0 000a 	sub.w	r0, r0, sl
 8019d78:	2240      	movs	r2, #64	@ 0x40
 8019d7a:	4082      	lsls	r2, r0
 8019d7c:	4313      	orrs	r3, r2
 8019d7e:	3401      	adds	r4, #1
 8019d80:	9304      	str	r3, [sp, #16]
 8019d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d86:	4829      	ldr	r0, [pc, #164]	@ (8019e2c <_vfiprintf_r+0x220>)
 8019d88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019d8c:	2206      	movs	r2, #6
 8019d8e:	f7e6 fa5f 	bl	8000250 <memchr>
 8019d92:	2800      	cmp	r0, #0
 8019d94:	d03f      	beq.n	8019e16 <_vfiprintf_r+0x20a>
 8019d96:	4b26      	ldr	r3, [pc, #152]	@ (8019e30 <_vfiprintf_r+0x224>)
 8019d98:	bb1b      	cbnz	r3, 8019de2 <_vfiprintf_r+0x1d6>
 8019d9a:	9b03      	ldr	r3, [sp, #12]
 8019d9c:	3307      	adds	r3, #7
 8019d9e:	f023 0307 	bic.w	r3, r3, #7
 8019da2:	3308      	adds	r3, #8
 8019da4:	9303      	str	r3, [sp, #12]
 8019da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019da8:	443b      	add	r3, r7
 8019daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8019dac:	e76a      	b.n	8019c84 <_vfiprintf_r+0x78>
 8019dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8019db2:	460c      	mov	r4, r1
 8019db4:	2001      	movs	r0, #1
 8019db6:	e7a8      	b.n	8019d0a <_vfiprintf_r+0xfe>
 8019db8:	2300      	movs	r3, #0
 8019dba:	3401      	adds	r4, #1
 8019dbc:	9305      	str	r3, [sp, #20]
 8019dbe:	4619      	mov	r1, r3
 8019dc0:	f04f 0c0a 	mov.w	ip, #10
 8019dc4:	4620      	mov	r0, r4
 8019dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019dca:	3a30      	subs	r2, #48	@ 0x30
 8019dcc:	2a09      	cmp	r2, #9
 8019dce:	d903      	bls.n	8019dd8 <_vfiprintf_r+0x1cc>
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d0c6      	beq.n	8019d62 <_vfiprintf_r+0x156>
 8019dd4:	9105      	str	r1, [sp, #20]
 8019dd6:	e7c4      	b.n	8019d62 <_vfiprintf_r+0x156>
 8019dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8019ddc:	4604      	mov	r4, r0
 8019dde:	2301      	movs	r3, #1
 8019de0:	e7f0      	b.n	8019dc4 <_vfiprintf_r+0x1b8>
 8019de2:	ab03      	add	r3, sp, #12
 8019de4:	9300      	str	r3, [sp, #0]
 8019de6:	462a      	mov	r2, r5
 8019de8:	4b12      	ldr	r3, [pc, #72]	@ (8019e34 <_vfiprintf_r+0x228>)
 8019dea:	a904      	add	r1, sp, #16
 8019dec:	4630      	mov	r0, r6
 8019dee:	f3af 8000 	nop.w
 8019df2:	4607      	mov	r7, r0
 8019df4:	1c78      	adds	r0, r7, #1
 8019df6:	d1d6      	bne.n	8019da6 <_vfiprintf_r+0x19a>
 8019df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019dfa:	07d9      	lsls	r1, r3, #31
 8019dfc:	d405      	bmi.n	8019e0a <_vfiprintf_r+0x1fe>
 8019dfe:	89ab      	ldrh	r3, [r5, #12]
 8019e00:	059a      	lsls	r2, r3, #22
 8019e02:	d402      	bmi.n	8019e0a <_vfiprintf_r+0x1fe>
 8019e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019e06:	f7ff fceb 	bl	80197e0 <__retarget_lock_release_recursive>
 8019e0a:	89ab      	ldrh	r3, [r5, #12]
 8019e0c:	065b      	lsls	r3, r3, #25
 8019e0e:	f53f af1f 	bmi.w	8019c50 <_vfiprintf_r+0x44>
 8019e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019e14:	e71e      	b.n	8019c54 <_vfiprintf_r+0x48>
 8019e16:	ab03      	add	r3, sp, #12
 8019e18:	9300      	str	r3, [sp, #0]
 8019e1a:	462a      	mov	r2, r5
 8019e1c:	4b05      	ldr	r3, [pc, #20]	@ (8019e34 <_vfiprintf_r+0x228>)
 8019e1e:	a904      	add	r1, sp, #16
 8019e20:	4630      	mov	r0, r6
 8019e22:	f000 f879 	bl	8019f18 <_printf_i>
 8019e26:	e7e4      	b.n	8019df2 <_vfiprintf_r+0x1e6>
 8019e28:	0801b19b 	.word	0x0801b19b
 8019e2c:	0801b1a5 	.word	0x0801b1a5
 8019e30:	00000000 	.word	0x00000000
 8019e34:	08019be7 	.word	0x08019be7
 8019e38:	0801b1a1 	.word	0x0801b1a1

08019e3c <_printf_common>:
 8019e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e40:	4616      	mov	r6, r2
 8019e42:	4698      	mov	r8, r3
 8019e44:	688a      	ldr	r2, [r1, #8]
 8019e46:	690b      	ldr	r3, [r1, #16]
 8019e48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019e4c:	4293      	cmp	r3, r2
 8019e4e:	bfb8      	it	lt
 8019e50:	4613      	movlt	r3, r2
 8019e52:	6033      	str	r3, [r6, #0]
 8019e54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019e58:	4607      	mov	r7, r0
 8019e5a:	460c      	mov	r4, r1
 8019e5c:	b10a      	cbz	r2, 8019e62 <_printf_common+0x26>
 8019e5e:	3301      	adds	r3, #1
 8019e60:	6033      	str	r3, [r6, #0]
 8019e62:	6823      	ldr	r3, [r4, #0]
 8019e64:	0699      	lsls	r1, r3, #26
 8019e66:	bf42      	ittt	mi
 8019e68:	6833      	ldrmi	r3, [r6, #0]
 8019e6a:	3302      	addmi	r3, #2
 8019e6c:	6033      	strmi	r3, [r6, #0]
 8019e6e:	6825      	ldr	r5, [r4, #0]
 8019e70:	f015 0506 	ands.w	r5, r5, #6
 8019e74:	d106      	bne.n	8019e84 <_printf_common+0x48>
 8019e76:	f104 0a19 	add.w	sl, r4, #25
 8019e7a:	68e3      	ldr	r3, [r4, #12]
 8019e7c:	6832      	ldr	r2, [r6, #0]
 8019e7e:	1a9b      	subs	r3, r3, r2
 8019e80:	42ab      	cmp	r3, r5
 8019e82:	dc26      	bgt.n	8019ed2 <_printf_common+0x96>
 8019e84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019e88:	6822      	ldr	r2, [r4, #0]
 8019e8a:	3b00      	subs	r3, #0
 8019e8c:	bf18      	it	ne
 8019e8e:	2301      	movne	r3, #1
 8019e90:	0692      	lsls	r2, r2, #26
 8019e92:	d42b      	bmi.n	8019eec <_printf_common+0xb0>
 8019e94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019e98:	4641      	mov	r1, r8
 8019e9a:	4638      	mov	r0, r7
 8019e9c:	47c8      	blx	r9
 8019e9e:	3001      	adds	r0, #1
 8019ea0:	d01e      	beq.n	8019ee0 <_printf_common+0xa4>
 8019ea2:	6823      	ldr	r3, [r4, #0]
 8019ea4:	6922      	ldr	r2, [r4, #16]
 8019ea6:	f003 0306 	and.w	r3, r3, #6
 8019eaa:	2b04      	cmp	r3, #4
 8019eac:	bf02      	ittt	eq
 8019eae:	68e5      	ldreq	r5, [r4, #12]
 8019eb0:	6833      	ldreq	r3, [r6, #0]
 8019eb2:	1aed      	subeq	r5, r5, r3
 8019eb4:	68a3      	ldr	r3, [r4, #8]
 8019eb6:	bf0c      	ite	eq
 8019eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019ebc:	2500      	movne	r5, #0
 8019ebe:	4293      	cmp	r3, r2
 8019ec0:	bfc4      	itt	gt
 8019ec2:	1a9b      	subgt	r3, r3, r2
 8019ec4:	18ed      	addgt	r5, r5, r3
 8019ec6:	2600      	movs	r6, #0
 8019ec8:	341a      	adds	r4, #26
 8019eca:	42b5      	cmp	r5, r6
 8019ecc:	d11a      	bne.n	8019f04 <_printf_common+0xc8>
 8019ece:	2000      	movs	r0, #0
 8019ed0:	e008      	b.n	8019ee4 <_printf_common+0xa8>
 8019ed2:	2301      	movs	r3, #1
 8019ed4:	4652      	mov	r2, sl
 8019ed6:	4641      	mov	r1, r8
 8019ed8:	4638      	mov	r0, r7
 8019eda:	47c8      	blx	r9
 8019edc:	3001      	adds	r0, #1
 8019ede:	d103      	bne.n	8019ee8 <_printf_common+0xac>
 8019ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ee8:	3501      	adds	r5, #1
 8019eea:	e7c6      	b.n	8019e7a <_printf_common+0x3e>
 8019eec:	18e1      	adds	r1, r4, r3
 8019eee:	1c5a      	adds	r2, r3, #1
 8019ef0:	2030      	movs	r0, #48	@ 0x30
 8019ef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019ef6:	4422      	add	r2, r4
 8019ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019efc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019f00:	3302      	adds	r3, #2
 8019f02:	e7c7      	b.n	8019e94 <_printf_common+0x58>
 8019f04:	2301      	movs	r3, #1
 8019f06:	4622      	mov	r2, r4
 8019f08:	4641      	mov	r1, r8
 8019f0a:	4638      	mov	r0, r7
 8019f0c:	47c8      	blx	r9
 8019f0e:	3001      	adds	r0, #1
 8019f10:	d0e6      	beq.n	8019ee0 <_printf_common+0xa4>
 8019f12:	3601      	adds	r6, #1
 8019f14:	e7d9      	b.n	8019eca <_printf_common+0x8e>
	...

08019f18 <_printf_i>:
 8019f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019f1c:	7e0f      	ldrb	r7, [r1, #24]
 8019f1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019f20:	2f78      	cmp	r7, #120	@ 0x78
 8019f22:	4691      	mov	r9, r2
 8019f24:	4680      	mov	r8, r0
 8019f26:	460c      	mov	r4, r1
 8019f28:	469a      	mov	sl, r3
 8019f2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019f2e:	d807      	bhi.n	8019f40 <_printf_i+0x28>
 8019f30:	2f62      	cmp	r7, #98	@ 0x62
 8019f32:	d80a      	bhi.n	8019f4a <_printf_i+0x32>
 8019f34:	2f00      	cmp	r7, #0
 8019f36:	f000 80d1 	beq.w	801a0dc <_printf_i+0x1c4>
 8019f3a:	2f58      	cmp	r7, #88	@ 0x58
 8019f3c:	f000 80b8 	beq.w	801a0b0 <_printf_i+0x198>
 8019f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019f44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019f48:	e03a      	b.n	8019fc0 <_printf_i+0xa8>
 8019f4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019f4e:	2b15      	cmp	r3, #21
 8019f50:	d8f6      	bhi.n	8019f40 <_printf_i+0x28>
 8019f52:	a101      	add	r1, pc, #4	@ (adr r1, 8019f58 <_printf_i+0x40>)
 8019f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019f58:	08019fb1 	.word	0x08019fb1
 8019f5c:	08019fc5 	.word	0x08019fc5
 8019f60:	08019f41 	.word	0x08019f41
 8019f64:	08019f41 	.word	0x08019f41
 8019f68:	08019f41 	.word	0x08019f41
 8019f6c:	08019f41 	.word	0x08019f41
 8019f70:	08019fc5 	.word	0x08019fc5
 8019f74:	08019f41 	.word	0x08019f41
 8019f78:	08019f41 	.word	0x08019f41
 8019f7c:	08019f41 	.word	0x08019f41
 8019f80:	08019f41 	.word	0x08019f41
 8019f84:	0801a0c3 	.word	0x0801a0c3
 8019f88:	08019fef 	.word	0x08019fef
 8019f8c:	0801a07d 	.word	0x0801a07d
 8019f90:	08019f41 	.word	0x08019f41
 8019f94:	08019f41 	.word	0x08019f41
 8019f98:	0801a0e5 	.word	0x0801a0e5
 8019f9c:	08019f41 	.word	0x08019f41
 8019fa0:	08019fef 	.word	0x08019fef
 8019fa4:	08019f41 	.word	0x08019f41
 8019fa8:	08019f41 	.word	0x08019f41
 8019fac:	0801a085 	.word	0x0801a085
 8019fb0:	6833      	ldr	r3, [r6, #0]
 8019fb2:	1d1a      	adds	r2, r3, #4
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	6032      	str	r2, [r6, #0]
 8019fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019fbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019fc0:	2301      	movs	r3, #1
 8019fc2:	e09c      	b.n	801a0fe <_printf_i+0x1e6>
 8019fc4:	6833      	ldr	r3, [r6, #0]
 8019fc6:	6820      	ldr	r0, [r4, #0]
 8019fc8:	1d19      	adds	r1, r3, #4
 8019fca:	6031      	str	r1, [r6, #0]
 8019fcc:	0606      	lsls	r6, r0, #24
 8019fce:	d501      	bpl.n	8019fd4 <_printf_i+0xbc>
 8019fd0:	681d      	ldr	r5, [r3, #0]
 8019fd2:	e003      	b.n	8019fdc <_printf_i+0xc4>
 8019fd4:	0645      	lsls	r5, r0, #25
 8019fd6:	d5fb      	bpl.n	8019fd0 <_printf_i+0xb8>
 8019fd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019fdc:	2d00      	cmp	r5, #0
 8019fde:	da03      	bge.n	8019fe8 <_printf_i+0xd0>
 8019fe0:	232d      	movs	r3, #45	@ 0x2d
 8019fe2:	426d      	negs	r5, r5
 8019fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019fe8:	4858      	ldr	r0, [pc, #352]	@ (801a14c <_printf_i+0x234>)
 8019fea:	230a      	movs	r3, #10
 8019fec:	e011      	b.n	801a012 <_printf_i+0xfa>
 8019fee:	6821      	ldr	r1, [r4, #0]
 8019ff0:	6833      	ldr	r3, [r6, #0]
 8019ff2:	0608      	lsls	r0, r1, #24
 8019ff4:	f853 5b04 	ldr.w	r5, [r3], #4
 8019ff8:	d402      	bmi.n	801a000 <_printf_i+0xe8>
 8019ffa:	0649      	lsls	r1, r1, #25
 8019ffc:	bf48      	it	mi
 8019ffe:	b2ad      	uxthmi	r5, r5
 801a000:	2f6f      	cmp	r7, #111	@ 0x6f
 801a002:	4852      	ldr	r0, [pc, #328]	@ (801a14c <_printf_i+0x234>)
 801a004:	6033      	str	r3, [r6, #0]
 801a006:	bf14      	ite	ne
 801a008:	230a      	movne	r3, #10
 801a00a:	2308      	moveq	r3, #8
 801a00c:	2100      	movs	r1, #0
 801a00e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a012:	6866      	ldr	r6, [r4, #4]
 801a014:	60a6      	str	r6, [r4, #8]
 801a016:	2e00      	cmp	r6, #0
 801a018:	db05      	blt.n	801a026 <_printf_i+0x10e>
 801a01a:	6821      	ldr	r1, [r4, #0]
 801a01c:	432e      	orrs	r6, r5
 801a01e:	f021 0104 	bic.w	r1, r1, #4
 801a022:	6021      	str	r1, [r4, #0]
 801a024:	d04b      	beq.n	801a0be <_printf_i+0x1a6>
 801a026:	4616      	mov	r6, r2
 801a028:	fbb5 f1f3 	udiv	r1, r5, r3
 801a02c:	fb03 5711 	mls	r7, r3, r1, r5
 801a030:	5dc7      	ldrb	r7, [r0, r7]
 801a032:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a036:	462f      	mov	r7, r5
 801a038:	42bb      	cmp	r3, r7
 801a03a:	460d      	mov	r5, r1
 801a03c:	d9f4      	bls.n	801a028 <_printf_i+0x110>
 801a03e:	2b08      	cmp	r3, #8
 801a040:	d10b      	bne.n	801a05a <_printf_i+0x142>
 801a042:	6823      	ldr	r3, [r4, #0]
 801a044:	07df      	lsls	r7, r3, #31
 801a046:	d508      	bpl.n	801a05a <_printf_i+0x142>
 801a048:	6923      	ldr	r3, [r4, #16]
 801a04a:	6861      	ldr	r1, [r4, #4]
 801a04c:	4299      	cmp	r1, r3
 801a04e:	bfde      	ittt	le
 801a050:	2330      	movle	r3, #48	@ 0x30
 801a052:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a056:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a05a:	1b92      	subs	r2, r2, r6
 801a05c:	6122      	str	r2, [r4, #16]
 801a05e:	f8cd a000 	str.w	sl, [sp]
 801a062:	464b      	mov	r3, r9
 801a064:	aa03      	add	r2, sp, #12
 801a066:	4621      	mov	r1, r4
 801a068:	4640      	mov	r0, r8
 801a06a:	f7ff fee7 	bl	8019e3c <_printf_common>
 801a06e:	3001      	adds	r0, #1
 801a070:	d14a      	bne.n	801a108 <_printf_i+0x1f0>
 801a072:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a076:	b004      	add	sp, #16
 801a078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a07c:	6823      	ldr	r3, [r4, #0]
 801a07e:	f043 0320 	orr.w	r3, r3, #32
 801a082:	6023      	str	r3, [r4, #0]
 801a084:	4832      	ldr	r0, [pc, #200]	@ (801a150 <_printf_i+0x238>)
 801a086:	2778      	movs	r7, #120	@ 0x78
 801a088:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a08c:	6823      	ldr	r3, [r4, #0]
 801a08e:	6831      	ldr	r1, [r6, #0]
 801a090:	061f      	lsls	r7, r3, #24
 801a092:	f851 5b04 	ldr.w	r5, [r1], #4
 801a096:	d402      	bmi.n	801a09e <_printf_i+0x186>
 801a098:	065f      	lsls	r7, r3, #25
 801a09a:	bf48      	it	mi
 801a09c:	b2ad      	uxthmi	r5, r5
 801a09e:	6031      	str	r1, [r6, #0]
 801a0a0:	07d9      	lsls	r1, r3, #31
 801a0a2:	bf44      	itt	mi
 801a0a4:	f043 0320 	orrmi.w	r3, r3, #32
 801a0a8:	6023      	strmi	r3, [r4, #0]
 801a0aa:	b11d      	cbz	r5, 801a0b4 <_printf_i+0x19c>
 801a0ac:	2310      	movs	r3, #16
 801a0ae:	e7ad      	b.n	801a00c <_printf_i+0xf4>
 801a0b0:	4826      	ldr	r0, [pc, #152]	@ (801a14c <_printf_i+0x234>)
 801a0b2:	e7e9      	b.n	801a088 <_printf_i+0x170>
 801a0b4:	6823      	ldr	r3, [r4, #0]
 801a0b6:	f023 0320 	bic.w	r3, r3, #32
 801a0ba:	6023      	str	r3, [r4, #0]
 801a0bc:	e7f6      	b.n	801a0ac <_printf_i+0x194>
 801a0be:	4616      	mov	r6, r2
 801a0c0:	e7bd      	b.n	801a03e <_printf_i+0x126>
 801a0c2:	6833      	ldr	r3, [r6, #0]
 801a0c4:	6825      	ldr	r5, [r4, #0]
 801a0c6:	6961      	ldr	r1, [r4, #20]
 801a0c8:	1d18      	adds	r0, r3, #4
 801a0ca:	6030      	str	r0, [r6, #0]
 801a0cc:	062e      	lsls	r6, r5, #24
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	d501      	bpl.n	801a0d6 <_printf_i+0x1be>
 801a0d2:	6019      	str	r1, [r3, #0]
 801a0d4:	e002      	b.n	801a0dc <_printf_i+0x1c4>
 801a0d6:	0668      	lsls	r0, r5, #25
 801a0d8:	d5fb      	bpl.n	801a0d2 <_printf_i+0x1ba>
 801a0da:	8019      	strh	r1, [r3, #0]
 801a0dc:	2300      	movs	r3, #0
 801a0de:	6123      	str	r3, [r4, #16]
 801a0e0:	4616      	mov	r6, r2
 801a0e2:	e7bc      	b.n	801a05e <_printf_i+0x146>
 801a0e4:	6833      	ldr	r3, [r6, #0]
 801a0e6:	1d1a      	adds	r2, r3, #4
 801a0e8:	6032      	str	r2, [r6, #0]
 801a0ea:	681e      	ldr	r6, [r3, #0]
 801a0ec:	6862      	ldr	r2, [r4, #4]
 801a0ee:	2100      	movs	r1, #0
 801a0f0:	4630      	mov	r0, r6
 801a0f2:	f7e6 f8ad 	bl	8000250 <memchr>
 801a0f6:	b108      	cbz	r0, 801a0fc <_printf_i+0x1e4>
 801a0f8:	1b80      	subs	r0, r0, r6
 801a0fa:	6060      	str	r0, [r4, #4]
 801a0fc:	6863      	ldr	r3, [r4, #4]
 801a0fe:	6123      	str	r3, [r4, #16]
 801a100:	2300      	movs	r3, #0
 801a102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a106:	e7aa      	b.n	801a05e <_printf_i+0x146>
 801a108:	6923      	ldr	r3, [r4, #16]
 801a10a:	4632      	mov	r2, r6
 801a10c:	4649      	mov	r1, r9
 801a10e:	4640      	mov	r0, r8
 801a110:	47d0      	blx	sl
 801a112:	3001      	adds	r0, #1
 801a114:	d0ad      	beq.n	801a072 <_printf_i+0x15a>
 801a116:	6823      	ldr	r3, [r4, #0]
 801a118:	079b      	lsls	r3, r3, #30
 801a11a:	d413      	bmi.n	801a144 <_printf_i+0x22c>
 801a11c:	68e0      	ldr	r0, [r4, #12]
 801a11e:	9b03      	ldr	r3, [sp, #12]
 801a120:	4298      	cmp	r0, r3
 801a122:	bfb8      	it	lt
 801a124:	4618      	movlt	r0, r3
 801a126:	e7a6      	b.n	801a076 <_printf_i+0x15e>
 801a128:	2301      	movs	r3, #1
 801a12a:	4632      	mov	r2, r6
 801a12c:	4649      	mov	r1, r9
 801a12e:	4640      	mov	r0, r8
 801a130:	47d0      	blx	sl
 801a132:	3001      	adds	r0, #1
 801a134:	d09d      	beq.n	801a072 <_printf_i+0x15a>
 801a136:	3501      	adds	r5, #1
 801a138:	68e3      	ldr	r3, [r4, #12]
 801a13a:	9903      	ldr	r1, [sp, #12]
 801a13c:	1a5b      	subs	r3, r3, r1
 801a13e:	42ab      	cmp	r3, r5
 801a140:	dcf2      	bgt.n	801a128 <_printf_i+0x210>
 801a142:	e7eb      	b.n	801a11c <_printf_i+0x204>
 801a144:	2500      	movs	r5, #0
 801a146:	f104 0619 	add.w	r6, r4, #25
 801a14a:	e7f5      	b.n	801a138 <_printf_i+0x220>
 801a14c:	0801b1ac 	.word	0x0801b1ac
 801a150:	0801b1bd 	.word	0x0801b1bd

0801a154 <__sflush_r>:
 801a154:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a15c:	0716      	lsls	r6, r2, #28
 801a15e:	4605      	mov	r5, r0
 801a160:	460c      	mov	r4, r1
 801a162:	d454      	bmi.n	801a20e <__sflush_r+0xba>
 801a164:	684b      	ldr	r3, [r1, #4]
 801a166:	2b00      	cmp	r3, #0
 801a168:	dc02      	bgt.n	801a170 <__sflush_r+0x1c>
 801a16a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	dd48      	ble.n	801a202 <__sflush_r+0xae>
 801a170:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a172:	2e00      	cmp	r6, #0
 801a174:	d045      	beq.n	801a202 <__sflush_r+0xae>
 801a176:	2300      	movs	r3, #0
 801a178:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a17c:	682f      	ldr	r7, [r5, #0]
 801a17e:	6a21      	ldr	r1, [r4, #32]
 801a180:	602b      	str	r3, [r5, #0]
 801a182:	d030      	beq.n	801a1e6 <__sflush_r+0x92>
 801a184:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a186:	89a3      	ldrh	r3, [r4, #12]
 801a188:	0759      	lsls	r1, r3, #29
 801a18a:	d505      	bpl.n	801a198 <__sflush_r+0x44>
 801a18c:	6863      	ldr	r3, [r4, #4]
 801a18e:	1ad2      	subs	r2, r2, r3
 801a190:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a192:	b10b      	cbz	r3, 801a198 <__sflush_r+0x44>
 801a194:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a196:	1ad2      	subs	r2, r2, r3
 801a198:	2300      	movs	r3, #0
 801a19a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a19c:	6a21      	ldr	r1, [r4, #32]
 801a19e:	4628      	mov	r0, r5
 801a1a0:	47b0      	blx	r6
 801a1a2:	1c43      	adds	r3, r0, #1
 801a1a4:	89a3      	ldrh	r3, [r4, #12]
 801a1a6:	d106      	bne.n	801a1b6 <__sflush_r+0x62>
 801a1a8:	6829      	ldr	r1, [r5, #0]
 801a1aa:	291d      	cmp	r1, #29
 801a1ac:	d82b      	bhi.n	801a206 <__sflush_r+0xb2>
 801a1ae:	4a2a      	ldr	r2, [pc, #168]	@ (801a258 <__sflush_r+0x104>)
 801a1b0:	40ca      	lsrs	r2, r1
 801a1b2:	07d6      	lsls	r6, r2, #31
 801a1b4:	d527      	bpl.n	801a206 <__sflush_r+0xb2>
 801a1b6:	2200      	movs	r2, #0
 801a1b8:	6062      	str	r2, [r4, #4]
 801a1ba:	04d9      	lsls	r1, r3, #19
 801a1bc:	6922      	ldr	r2, [r4, #16]
 801a1be:	6022      	str	r2, [r4, #0]
 801a1c0:	d504      	bpl.n	801a1cc <__sflush_r+0x78>
 801a1c2:	1c42      	adds	r2, r0, #1
 801a1c4:	d101      	bne.n	801a1ca <__sflush_r+0x76>
 801a1c6:	682b      	ldr	r3, [r5, #0]
 801a1c8:	b903      	cbnz	r3, 801a1cc <__sflush_r+0x78>
 801a1ca:	6560      	str	r0, [r4, #84]	@ 0x54
 801a1cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a1ce:	602f      	str	r7, [r5, #0]
 801a1d0:	b1b9      	cbz	r1, 801a202 <__sflush_r+0xae>
 801a1d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a1d6:	4299      	cmp	r1, r3
 801a1d8:	d002      	beq.n	801a1e0 <__sflush_r+0x8c>
 801a1da:	4628      	mov	r0, r5
 801a1dc:	f7ff fb42 	bl	8019864 <_free_r>
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	6363      	str	r3, [r4, #52]	@ 0x34
 801a1e4:	e00d      	b.n	801a202 <__sflush_r+0xae>
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	4628      	mov	r0, r5
 801a1ea:	47b0      	blx	r6
 801a1ec:	4602      	mov	r2, r0
 801a1ee:	1c50      	adds	r0, r2, #1
 801a1f0:	d1c9      	bne.n	801a186 <__sflush_r+0x32>
 801a1f2:	682b      	ldr	r3, [r5, #0]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d0c6      	beq.n	801a186 <__sflush_r+0x32>
 801a1f8:	2b1d      	cmp	r3, #29
 801a1fa:	d001      	beq.n	801a200 <__sflush_r+0xac>
 801a1fc:	2b16      	cmp	r3, #22
 801a1fe:	d11e      	bne.n	801a23e <__sflush_r+0xea>
 801a200:	602f      	str	r7, [r5, #0]
 801a202:	2000      	movs	r0, #0
 801a204:	e022      	b.n	801a24c <__sflush_r+0xf8>
 801a206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a20a:	b21b      	sxth	r3, r3
 801a20c:	e01b      	b.n	801a246 <__sflush_r+0xf2>
 801a20e:	690f      	ldr	r7, [r1, #16]
 801a210:	2f00      	cmp	r7, #0
 801a212:	d0f6      	beq.n	801a202 <__sflush_r+0xae>
 801a214:	0793      	lsls	r3, r2, #30
 801a216:	680e      	ldr	r6, [r1, #0]
 801a218:	bf08      	it	eq
 801a21a:	694b      	ldreq	r3, [r1, #20]
 801a21c:	600f      	str	r7, [r1, #0]
 801a21e:	bf18      	it	ne
 801a220:	2300      	movne	r3, #0
 801a222:	eba6 0807 	sub.w	r8, r6, r7
 801a226:	608b      	str	r3, [r1, #8]
 801a228:	f1b8 0f00 	cmp.w	r8, #0
 801a22c:	dde9      	ble.n	801a202 <__sflush_r+0xae>
 801a22e:	6a21      	ldr	r1, [r4, #32]
 801a230:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a232:	4643      	mov	r3, r8
 801a234:	463a      	mov	r2, r7
 801a236:	4628      	mov	r0, r5
 801a238:	47b0      	blx	r6
 801a23a:	2800      	cmp	r0, #0
 801a23c:	dc08      	bgt.n	801a250 <__sflush_r+0xfc>
 801a23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a246:	81a3      	strh	r3, [r4, #12]
 801a248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a250:	4407      	add	r7, r0
 801a252:	eba8 0800 	sub.w	r8, r8, r0
 801a256:	e7e7      	b.n	801a228 <__sflush_r+0xd4>
 801a258:	20400001 	.word	0x20400001

0801a25c <_fflush_r>:
 801a25c:	b538      	push	{r3, r4, r5, lr}
 801a25e:	690b      	ldr	r3, [r1, #16]
 801a260:	4605      	mov	r5, r0
 801a262:	460c      	mov	r4, r1
 801a264:	b913      	cbnz	r3, 801a26c <_fflush_r+0x10>
 801a266:	2500      	movs	r5, #0
 801a268:	4628      	mov	r0, r5
 801a26a:	bd38      	pop	{r3, r4, r5, pc}
 801a26c:	b118      	cbz	r0, 801a276 <_fflush_r+0x1a>
 801a26e:	6a03      	ldr	r3, [r0, #32]
 801a270:	b90b      	cbnz	r3, 801a276 <_fflush_r+0x1a>
 801a272:	f7fe ffdf 	bl	8019234 <__sinit>
 801a276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d0f3      	beq.n	801a266 <_fflush_r+0xa>
 801a27e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a280:	07d0      	lsls	r0, r2, #31
 801a282:	d404      	bmi.n	801a28e <_fflush_r+0x32>
 801a284:	0599      	lsls	r1, r3, #22
 801a286:	d402      	bmi.n	801a28e <_fflush_r+0x32>
 801a288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a28a:	f7ff faa8 	bl	80197de <__retarget_lock_acquire_recursive>
 801a28e:	4628      	mov	r0, r5
 801a290:	4621      	mov	r1, r4
 801a292:	f7ff ff5f 	bl	801a154 <__sflush_r>
 801a296:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a298:	07da      	lsls	r2, r3, #31
 801a29a:	4605      	mov	r5, r0
 801a29c:	d4e4      	bmi.n	801a268 <_fflush_r+0xc>
 801a29e:	89a3      	ldrh	r3, [r4, #12]
 801a2a0:	059b      	lsls	r3, r3, #22
 801a2a2:	d4e1      	bmi.n	801a268 <_fflush_r+0xc>
 801a2a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a2a6:	f7ff fa9b 	bl	80197e0 <__retarget_lock_release_recursive>
 801a2aa:	e7dd      	b.n	801a268 <_fflush_r+0xc>

0801a2ac <fiprintf>:
 801a2ac:	b40e      	push	{r1, r2, r3}
 801a2ae:	b503      	push	{r0, r1, lr}
 801a2b0:	4601      	mov	r1, r0
 801a2b2:	ab03      	add	r3, sp, #12
 801a2b4:	4805      	ldr	r0, [pc, #20]	@ (801a2cc <fiprintf+0x20>)
 801a2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2ba:	6800      	ldr	r0, [r0, #0]
 801a2bc:	9301      	str	r3, [sp, #4]
 801a2be:	f7ff fca5 	bl	8019c0c <_vfiprintf_r>
 801a2c2:	b002      	add	sp, #8
 801a2c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a2c8:	b003      	add	sp, #12
 801a2ca:	4770      	bx	lr
 801a2cc:	200002ac 	.word	0x200002ac

0801a2d0 <__swhatbuf_r>:
 801a2d0:	b570      	push	{r4, r5, r6, lr}
 801a2d2:	460c      	mov	r4, r1
 801a2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2d8:	2900      	cmp	r1, #0
 801a2da:	b096      	sub	sp, #88	@ 0x58
 801a2dc:	4615      	mov	r5, r2
 801a2de:	461e      	mov	r6, r3
 801a2e0:	da0d      	bge.n	801a2fe <__swhatbuf_r+0x2e>
 801a2e2:	89a3      	ldrh	r3, [r4, #12]
 801a2e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a2e8:	f04f 0100 	mov.w	r1, #0
 801a2ec:	bf14      	ite	ne
 801a2ee:	2340      	movne	r3, #64	@ 0x40
 801a2f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a2f4:	2000      	movs	r0, #0
 801a2f6:	6031      	str	r1, [r6, #0]
 801a2f8:	602b      	str	r3, [r5, #0]
 801a2fa:	b016      	add	sp, #88	@ 0x58
 801a2fc:	bd70      	pop	{r4, r5, r6, pc}
 801a2fe:	466a      	mov	r2, sp
 801a300:	f000 f848 	bl	801a394 <_fstat_r>
 801a304:	2800      	cmp	r0, #0
 801a306:	dbec      	blt.n	801a2e2 <__swhatbuf_r+0x12>
 801a308:	9901      	ldr	r1, [sp, #4]
 801a30a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a30e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a312:	4259      	negs	r1, r3
 801a314:	4159      	adcs	r1, r3
 801a316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a31a:	e7eb      	b.n	801a2f4 <__swhatbuf_r+0x24>

0801a31c <__smakebuf_r>:
 801a31c:	898b      	ldrh	r3, [r1, #12]
 801a31e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a320:	079d      	lsls	r5, r3, #30
 801a322:	4606      	mov	r6, r0
 801a324:	460c      	mov	r4, r1
 801a326:	d507      	bpl.n	801a338 <__smakebuf_r+0x1c>
 801a328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a32c:	6023      	str	r3, [r4, #0]
 801a32e:	6123      	str	r3, [r4, #16]
 801a330:	2301      	movs	r3, #1
 801a332:	6163      	str	r3, [r4, #20]
 801a334:	b003      	add	sp, #12
 801a336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a338:	ab01      	add	r3, sp, #4
 801a33a:	466a      	mov	r2, sp
 801a33c:	f7ff ffc8 	bl	801a2d0 <__swhatbuf_r>
 801a340:	9f00      	ldr	r7, [sp, #0]
 801a342:	4605      	mov	r5, r0
 801a344:	4639      	mov	r1, r7
 801a346:	4630      	mov	r0, r6
 801a348:	f7fe fd42 	bl	8018dd0 <_malloc_r>
 801a34c:	b948      	cbnz	r0, 801a362 <__smakebuf_r+0x46>
 801a34e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a352:	059a      	lsls	r2, r3, #22
 801a354:	d4ee      	bmi.n	801a334 <__smakebuf_r+0x18>
 801a356:	f023 0303 	bic.w	r3, r3, #3
 801a35a:	f043 0302 	orr.w	r3, r3, #2
 801a35e:	81a3      	strh	r3, [r4, #12]
 801a360:	e7e2      	b.n	801a328 <__smakebuf_r+0xc>
 801a362:	89a3      	ldrh	r3, [r4, #12]
 801a364:	6020      	str	r0, [r4, #0]
 801a366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a36a:	81a3      	strh	r3, [r4, #12]
 801a36c:	9b01      	ldr	r3, [sp, #4]
 801a36e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a372:	b15b      	cbz	r3, 801a38c <__smakebuf_r+0x70>
 801a374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a378:	4630      	mov	r0, r6
 801a37a:	f000 f81d 	bl	801a3b8 <_isatty_r>
 801a37e:	b128      	cbz	r0, 801a38c <__smakebuf_r+0x70>
 801a380:	89a3      	ldrh	r3, [r4, #12]
 801a382:	f023 0303 	bic.w	r3, r3, #3
 801a386:	f043 0301 	orr.w	r3, r3, #1
 801a38a:	81a3      	strh	r3, [r4, #12]
 801a38c:	89a3      	ldrh	r3, [r4, #12]
 801a38e:	431d      	orrs	r5, r3
 801a390:	81a5      	strh	r5, [r4, #12]
 801a392:	e7cf      	b.n	801a334 <__smakebuf_r+0x18>

0801a394 <_fstat_r>:
 801a394:	b538      	push	{r3, r4, r5, lr}
 801a396:	4d07      	ldr	r5, [pc, #28]	@ (801a3b4 <_fstat_r+0x20>)
 801a398:	2300      	movs	r3, #0
 801a39a:	4604      	mov	r4, r0
 801a39c:	4608      	mov	r0, r1
 801a39e:	4611      	mov	r1, r2
 801a3a0:	602b      	str	r3, [r5, #0]
 801a3a2:	f7e8 f82d 	bl	8002400 <_fstat>
 801a3a6:	1c43      	adds	r3, r0, #1
 801a3a8:	d102      	bne.n	801a3b0 <_fstat_r+0x1c>
 801a3aa:	682b      	ldr	r3, [r5, #0]
 801a3ac:	b103      	cbz	r3, 801a3b0 <_fstat_r+0x1c>
 801a3ae:	6023      	str	r3, [r4, #0]
 801a3b0:	bd38      	pop	{r3, r4, r5, pc}
 801a3b2:	bf00      	nop
 801a3b4:	2000b130 	.word	0x2000b130

0801a3b8 <_isatty_r>:
 801a3b8:	b538      	push	{r3, r4, r5, lr}
 801a3ba:	4d06      	ldr	r5, [pc, #24]	@ (801a3d4 <_isatty_r+0x1c>)
 801a3bc:	2300      	movs	r3, #0
 801a3be:	4604      	mov	r4, r0
 801a3c0:	4608      	mov	r0, r1
 801a3c2:	602b      	str	r3, [r5, #0]
 801a3c4:	f7e8 f82c 	bl	8002420 <_isatty>
 801a3c8:	1c43      	adds	r3, r0, #1
 801a3ca:	d102      	bne.n	801a3d2 <_isatty_r+0x1a>
 801a3cc:	682b      	ldr	r3, [r5, #0]
 801a3ce:	b103      	cbz	r3, 801a3d2 <_isatty_r+0x1a>
 801a3d0:	6023      	str	r3, [r4, #0]
 801a3d2:	bd38      	pop	{r3, r4, r5, pc}
 801a3d4:	2000b130 	.word	0x2000b130

0801a3d8 <abort>:
 801a3d8:	b508      	push	{r3, lr}
 801a3da:	2006      	movs	r0, #6
 801a3dc:	f000 f82c 	bl	801a438 <raise>
 801a3e0:	2001      	movs	r0, #1
 801a3e2:	f7e7 ffbd 	bl	8002360 <_exit>

0801a3e6 <_raise_r>:
 801a3e6:	291f      	cmp	r1, #31
 801a3e8:	b538      	push	{r3, r4, r5, lr}
 801a3ea:	4605      	mov	r5, r0
 801a3ec:	460c      	mov	r4, r1
 801a3ee:	d904      	bls.n	801a3fa <_raise_r+0x14>
 801a3f0:	2316      	movs	r3, #22
 801a3f2:	6003      	str	r3, [r0, #0]
 801a3f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a3f8:	bd38      	pop	{r3, r4, r5, pc}
 801a3fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a3fc:	b112      	cbz	r2, 801a404 <_raise_r+0x1e>
 801a3fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a402:	b94b      	cbnz	r3, 801a418 <_raise_r+0x32>
 801a404:	4628      	mov	r0, r5
 801a406:	f000 f831 	bl	801a46c <_getpid_r>
 801a40a:	4622      	mov	r2, r4
 801a40c:	4601      	mov	r1, r0
 801a40e:	4628      	mov	r0, r5
 801a410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a414:	f000 b818 	b.w	801a448 <_kill_r>
 801a418:	2b01      	cmp	r3, #1
 801a41a:	d00a      	beq.n	801a432 <_raise_r+0x4c>
 801a41c:	1c59      	adds	r1, r3, #1
 801a41e:	d103      	bne.n	801a428 <_raise_r+0x42>
 801a420:	2316      	movs	r3, #22
 801a422:	6003      	str	r3, [r0, #0]
 801a424:	2001      	movs	r0, #1
 801a426:	e7e7      	b.n	801a3f8 <_raise_r+0x12>
 801a428:	2100      	movs	r1, #0
 801a42a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a42e:	4620      	mov	r0, r4
 801a430:	4798      	blx	r3
 801a432:	2000      	movs	r0, #0
 801a434:	e7e0      	b.n	801a3f8 <_raise_r+0x12>
	...

0801a438 <raise>:
 801a438:	4b02      	ldr	r3, [pc, #8]	@ (801a444 <raise+0xc>)
 801a43a:	4601      	mov	r1, r0
 801a43c:	6818      	ldr	r0, [r3, #0]
 801a43e:	f7ff bfd2 	b.w	801a3e6 <_raise_r>
 801a442:	bf00      	nop
 801a444:	200002ac 	.word	0x200002ac

0801a448 <_kill_r>:
 801a448:	b538      	push	{r3, r4, r5, lr}
 801a44a:	4d07      	ldr	r5, [pc, #28]	@ (801a468 <_kill_r+0x20>)
 801a44c:	2300      	movs	r3, #0
 801a44e:	4604      	mov	r4, r0
 801a450:	4608      	mov	r0, r1
 801a452:	4611      	mov	r1, r2
 801a454:	602b      	str	r3, [r5, #0]
 801a456:	f7e7 ff73 	bl	8002340 <_kill>
 801a45a:	1c43      	adds	r3, r0, #1
 801a45c:	d102      	bne.n	801a464 <_kill_r+0x1c>
 801a45e:	682b      	ldr	r3, [r5, #0]
 801a460:	b103      	cbz	r3, 801a464 <_kill_r+0x1c>
 801a462:	6023      	str	r3, [r4, #0]
 801a464:	bd38      	pop	{r3, r4, r5, pc}
 801a466:	bf00      	nop
 801a468:	2000b130 	.word	0x2000b130

0801a46c <_getpid_r>:
 801a46c:	f7e7 bf60 	b.w	8002330 <_getpid>

0801a470 <_init>:
 801a470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a472:	bf00      	nop
 801a474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a476:	bc08      	pop	{r3}
 801a478:	469e      	mov	lr, r3
 801a47a:	4770      	bx	lr

0801a47c <_fini>:
 801a47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a47e:	bf00      	nop
 801a480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a482:	bc08      	pop	{r3}
 801a484:	469e      	mov	lr, r3
 801a486:	4770      	bx	lr
